// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-gcp/apis/kms/v1alpha1

package v1alpha1

// KeyRingParameters defines parameters for a desired KMS KeyRing
// https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings
// The name of the key ring (ie the `keyRingId` parameter of the Create
// call) is determined by the value of the `crossplane.io/external-name`
// annotation. Unless overridden by the user, this annotation is automatically
// populated with the value of the `metadata.name` attribute.
#KeyRingParameters: {
	// The location for the KeyRing.
	// A full list of valid locations can be found by running 'gcloud kms locations list'.
	// +immutable
	location: string @go(Location)
}

// KeyRingObservation is used to show the observed state of the
// KeyRing resource on GCP. All fields in this structure should only
// be populated from GCP responses; any changes made to the k8s resource outside
// of the crossplane gcp controller will be ignored and overwritten.
#KeyRingObservation: {
	// CreateTime: Output only. The time at which this KeyRing was created.
	createTime?: string @go(CreateTime)

	// Name: Output only. The resource name for the KeyRing in the
	// format `projects/*/locations/*/keyRings/*`.
	name?: string @go(Name)
}

// KeyRingSpec defines the desired state of a KeyRing.
#KeyRingSpec: {
	forProvider: #KeyRingParameters @go(ForProvider)
}

// KeyRingStatus represents the observed state of a KeyRing.
#KeyRingStatus: {
	atProvider?: #KeyRingObservation @go(AtProvider)
}

// KeyRing is a managed resource that represents a Google KMS KeyRing
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="LOCATION",type="string",JSONPath=".spec.forProvider.location"
// +kubebuilder:resource:scope=Cluster
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#KeyRing: {
	spec:    #KeyRingSpec   @go(Spec)
	status?: #KeyRingStatus @go(Status)
}

// KeyRingList contains a list of KeyRing types
#KeyRingList: {
	items: [...#KeyRing] @go(Items,[]KeyRing)
}
