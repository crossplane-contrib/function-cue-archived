// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-gcp/apis/dns/v1alpha1

package v1alpha1

// The PolicyParameters define the desired state of a Policy
#PolicyParameters: {
	// AlternativeNameServerConfig: Sets an alternative name server for the associated networks.
	// When specified, all DNS queries are forwarded to a name server that you choose.
	// Names such as .internal are not available when an alternative name server is specified.
	// +optional
	alternativeNameServerConfig?: null | #PolicyAlternativeNameServerConfig @go(AlternativeNameServerConfig,*PolicyAlternativeNameServerConfig)

	// Description: A mutable string of at most 1024 characters associated with this resource for the user's convenience.
	// Has no effect on the policy's function.
	// +optional
	description: string @go(Description)

	// EnableInboundForwarding: Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections.
	// When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.
	// +optional
	enableInboundForwarding?: null | bool @go(EnableInboundForwarding,*bool)

	// EnableLogging: Controls whether logging is enabled for the networks bound to this policy.
	// Defaults to no logging if not set.
	// +optional
	enableLogging?: null | bool @go(EnableLogging,*bool)

	// Networks: List of network names specifying networks to which this policy is applied.
	// +optional
	networks?: null | [...#PolicyNetwork] @go(Networks,*[]PolicyNetwork)
}

// The PolicyAlternativeNameServerConfig Sets an alternative name server for the associated networks.
// When specified, all DNS queries are forwarded to a name server that you choose.
#PolicyAlternativeNameServerConfig: {
	// TargetNameServers: Sets an alternative name server for the associated
	// networks. When specified, all DNS queries are forwarded to a name
	// server that you choose. Names such as .internal are not available
	// when an alternative name server is specified.
	targetNameServers: [...#PolicyAlternativeNameServerConfigTargetNameServer] @go(TargetNameServers,[]PolicyAlternativeNameServerConfigTargetNameServer)
}

// A PolicyAlternativeNameServerConfigTargetNameServer has the below fields.
#PolicyAlternativeNameServerConfigTargetNameServer: {
	// ForwardingPath: Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on  address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud
	// DNS always sends queries through the VPC network for this target. Possible values:
	// "default" - Cloud DNS makes forwarding decision based on IP address ranges; that is, RFC1918 addresses forward to the target through the VPC and non-RFC1918 addresses forward to the target through the internet
	// "private" - Cloud DNS always forwards to this target through the VPC.
	forwardingPath?: null | string @go(ForwardingPath,*string)

	// Ipv4Address: IPv4 address to forward to.
	ipv4Address: string @go(Ipv4Address)
}

// A PolicyNetwork struct has the field NetworkURL
#PolicyNetwork: {
	// NetworkUrl: The fully qualified URL of the VPC network to bind to.
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-gcp/apis/compute/v1beta1.NetworkURL()
	networkUrl: string @go(NetworkURL)
}

// The PolicyObservation is used to show the observed state of the Policy
#PolicyObservation: {
	// Id: Unique identifier for the resource; defined by the server (output only).
	id?: null | uint64 @go(ID,*uint64)
}

// The PolicySpec defines the desired state of a DNSPolicy.
#PolicySpec: {
	forProvider: #PolicyParameters @go(ForProvider)
}

// The PolicyStatus represents the observed state of a DNSPolicy.
#PolicyStatus: {
	atProvider?: #PolicyObservation @go(AtProvider)
}

// A Policy is a collection of DNS rules applied to one or more
// Virtual Private Cloud resources.
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="DNS NAME",type="string",JSONPath=".status.atProvider.name"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Policy: {
	spec:    #PolicySpec   @go(Spec)
	status?: #PolicyStatus @go(Status)
}

// The PolicyList contains a list of DNSPolicy
#PolicyList: {
	items: [...#Policy] @go(Items,[]Policy)
}
