// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-gcp/apis/compute/v1beta1

package v1beta1

// NetworkParameters define the desired state of a Google Compute Engine VPC
// Network. Most fields map directly to a Network:
// https://cloud.google.com/compute/docs/reference/rest/v1/networks
#NetworkParameters: {
	// AutoCreateSubnetworks: When set to true, the VPC network is created
	// in "auto" mode. When set to false, the VPC network is created in
	// "custom" mode. When set to nil, the VPC network is created in "legacy"
	// mode which will be deprecated by GCP soon.
	//
	// An auto mode VPC network starts with one subnet per region. Each
	// subnet has a predetermined range as described in Auto mode VPC
	// network IP ranges.
	//
	// This field can only be updated from true to false after creation using
	// switchToCustomMode.
	// +optional
	autoCreateSubnetworks?: null | bool @go(AutoCreateSubnetworks,*bool)

	// Description: An optional description of this resource. Provide this
	// field when you create the resource.
	// +optional
	// +immutable
	description?: null | string @go(Description,*string)

	// RoutingConfig: The network-level routing configuration for this
	// network. Used by Cloud Router to determine what type of network-wide
	// routing behavior to enforce.
	// +optional
	routingConfig?: null | #NetworkRoutingConfig @go(RoutingConfig,*NetworkRoutingConfig)
}

// A NetworkObservation represents the observed state of a Google Compute Engine
// VPC Network.
#NetworkObservation: {
	// CreationTimestamp: Creation timestamp in RFC3339 text
	// format.
	creationTimestamp?: string @go(CreationTimestamp)

	// GatewayIPv4: The gateway address for default routing
	// out of the network, selected by GCP.
	gatewayIPv4?: string @go(GatewayIPv4)

	// Id: The unique identifier for the resource. This
	// identifier is defined by the server.
	id?: uint64 @go(ID)

	// Peerings: A list of network peerings for the resource.
	peerings?: [...null | #NetworkPeering] @go(Peerings,[]*NetworkPeering)

	// SelfLink: Server-defined URL for the resource.
	selfLink?: string @go(SelfLink)

	// Subnetworks: Server-defined fully-qualified URLs for
	// all subnetworks in this VPC network.
	subnetworks?: [...string] @go(Subnetworks,[]string)
}

// A NetworkPeering represents the observed state of a Google Compute Engine
// VPC Network Peering.
#NetworkPeering: {
	// AutoCreateRoutes: This field will be deprecated soon. Use the
	// exchange_subnet_routes field instead. Indicates whether full mesh
	// connectivity is created and managed automatically between peered
	// networks. Currently this field should always be true since Google
	// Compute Engine will automatically create and manage subnetwork routes
	// between two networks when peering state is ACTIVE.
	autoCreateRoutes?: bool @go(AutoCreateRoutes)

	// ExchangeSubnetRoutes: Indicates whether full mesh connectivity is
	// created and managed automatically between peered networks. Currently
	// this field should always be true since Google Compute Engine will
	// automatically create and manage subnetwork routes between two
	// networks when peering state is ACTIVE.
	exchangeSubnetRoutes?: bool @go(ExchangeSubnetRoutes)

	// Name: Name of this peering. Provided by the client when the peering
	// is created. The name must comply with RFC1035. Specifically, the name
	// must be 1-63 characters long and match regular expression
	// `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase
	// letter, and all the following characters must be a dash, lowercase
	// letter, or digit, except the last character, which cannot be a dash.
	name?: string @go(Name)

	// Network: The URL of the peer network. It can be either full URL or
	// partial URL. The peer network may belong to a different project. If
	// the partial URL does not contain project, it is assumed that the peer
	// network is in the same project as the current network.
	network?: string @go(Network)

	// State: State for the peering, either `ACTIVE` or
	// `INACTIVE`. The peering is `ACTIVE` when there's a matching
	// configuration in the peer network.
	//
	// Possible values:
	//   "ACTIVE"
	//   "INACTIVE"
	state?: string @go(State)

	// StateDetails: Details about the current state of the
	// peering.
	stateDetails?: string @go(StateDetails)
}

// A NetworkRoutingConfig specifies the desired state of a Google Compute
// Engine VPC Network Routing configuration.
#NetworkRoutingConfig: {
	// RoutingMode: The network-wide routing mode to use. If set to
	// REGIONAL, this network's Cloud Routers will only advertise routes
	// with subnets of this network in the same region as the router. If set
	// to GLOBAL, this network's Cloud Routers will advertise routes with
	// all subnets of this network, across regions.
	//
	// Possible values:
	//   "GLOBAL"
	//   "REGIONAL"
	// +kubebuilder:validation:Enum=GLOBAL;REGIONAL
	routingMode: string @go(RoutingMode)
}

// A NetworkSpec defines the desired state of a Network.
#NetworkSpec: {
	forProvider: #NetworkParameters @go(ForProvider)
}

// A NetworkStatus represents the observed state of a Network.
#NetworkStatus: {
	atProvider?: #NetworkObservation @go(AtProvider)
}

// A Network is a managed resource that represents a Google Compute Engine VPC
// Network.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Network: {
	spec:    #NetworkSpec   @go(Spec)
	status?: #NetworkStatus @go(Status)
}

// NetworkList contains a list of Network.
#NetworkList: {
	items: [...#Network] @go(Items,[]Network)
}
