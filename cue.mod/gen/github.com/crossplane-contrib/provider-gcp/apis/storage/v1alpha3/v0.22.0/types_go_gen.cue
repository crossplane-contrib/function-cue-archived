// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-gcp/apis/storage/v1alpha3

package v1alpha3

// ProjectTeam is the project team associated with the entity, if any.
#ProjectTeam: {
	// ProjectNumber is the number of the project.
	projectNumber?: string @go(ProjectNumber)

	// The team. Acceptable values are: "editors", "owners" or "viewers"
	// +kubebuilder:validation:Enum=editors;owners;viewers
	team?: string @go(Team)
}

// ACLRule represents a grant for a role to an entity (user, group or team) for a
// Google Cloud Storage object or bucket.
#ACLRule: {
	// Entity refers to a user or group. They are sometimes referred to as grantees.
	// It could be in the form of:
	// "user-<userId>", "user-<email>", "group-<groupId>", "group-<email>",
	// "domain-<domain>" and "project-team-<projectId>".
	//
	// Or one of the predefined constants: AllUsers, AllAuthenticatedUsers.
	entity?: string @go(Entity)

	// Role is the access permission for the entity.
	// Valid values are "OWNER", "READER" and "WRITER"
	// +kubebuilder:validation:Enum=OWNER;READER;WRITER
	role?: string @go(Role)

	// EntityID is the ID for the entity, if any.
	entityId?: string @go(EntityID)

	// The domain associated with the entity, if any.
	domain?: string @go(Domain)

	// The email address associated with the entity, if any.
	email?: string @go(Email)

	// ProjectTeam that is associated with the entity, if any.
	projectTeam?: null | #ProjectTeam @go(ProjectTeam,*ProjectTeam)
}

// LifecycleAction is a lifecycle configuration action.
#LifecycleAction: {
	// StorageClass is the storage class to set on matching objects if the Action
	// is "SetStorageClass".
	storageClass?: string @go(StorageClass)

	// Type is the type of action to take on matching objects.
	//
	// Acceptable values are "Delete" to delete matching objects and
	// "SetStorageClass" to set the storage class defined in StorageClass on
	// matching objects.
	type?: string @go(Type)
}

// LifecycleCondition is a set of conditions used to match objects and take an
// action automatically. All configured conditions must be met for the
// associated action to be taken.
#LifecycleCondition: {
	// AgeInDays is the age of the object in days.
	ageInDays?: int64 @go(AgeInDays)

	// MatchesStorageClasses is the condition matching the object's storage
	// class.
	//
	// Values include "MULTI_REGIONAL", "REGIONAL", "NEARLINE", "COLDLINE",
	// "STANDARD", and "DURABLE_REDUCED_AVAILABILITY".
	matchesStorageClasses?: [...string] @go(MatchesStorageClasses,[]string)

	// NumNewerVersions is the condition matching objects with a number of newer versions.
	//
	// If the value is N, this condition is satisfied when there are at least N
	// versions (including the live version) newer than this version of the
	// object.
	numNewerVersions?: int64 @go(NumNewerVersions)
}

// LifecycleRule is a lifecycle configuration rule.
//
// When all the configured conditions are met by an object in the bucket, the
// configured action will automatically be taken on that object.
#LifecycleRule: {
	// Action is the action to take when all of the associated conditions are
	// met.
	action?: #LifecycleAction @go(Action)

	// Condition is the set of conditions that must be met for the associated
	// action to be taken.
	condition?: #LifecycleCondition @go(Condition)
}

// Lifecycle is the lifecycle configuration for objects in the bucket.
#Lifecycle: {
	rules?: [...#LifecycleRule] @go(Rules,[]LifecycleRule)
}

// RetentionPolicy enforces a minimum retention time for all objects
// contained in the bucket.
//
// Any attempt to overwrite or delete objects younger than the retention
// period will result in an error. An unlocked retention policy can be
// modified or removed from the bucket via the Update method. A
// locked retention policy cannot be removed or shortened in duration
// for the lifetime of the bucket.
//
// This feature is in private alpha release. It is not currently available to
// most customers. It might be changed in backwards-incompatible ways and is not
// subject to any SLA or deprecation policy.
#RetentionPolicy: {
	// RetentionPeriod specifies the duration value in seconds that objects
	// need to be retained. Retention duration must be greater than zero and
	// less than 100 years. Note that enforcement of retention periods less
	// than a day is not guaranteed. Such periods should only be used for
	// testing purposes.
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:validation:Maximum=3155673600
	retentionPeriodSeconds?: int @go(RetentionPeriodSeconds)
}

// RetentionPolicyStatus output component of storage.RetentionPolicy
#RetentionPolicyStatus: {
	// IsLocked describes whether the bucket is locked. Once locked, an object
	// retention policy cannot be modified.
	isLocked?: bool @go(IsLocked)
}

// BucketEncryption is a bucket's encryption configuration.
#BucketEncryption: {
	// A Cloud KMS key name, in the form
	// projects/P/locations/L/keyRings/R/cryptoKeys/K, that will be used to encrypt
	// objects inserted into this bucket, if no encryption method is specified.
	// The key's location must be the same as the bucket's.
	defaultKmsKeyName?: string @go(DefaultKMSKeyName)
}

// BucketLogging holds the bucket's logging configuration, which defines the
// destination bucket and optional name prefix for the current bucket's
// logs.
#BucketLogging: {
	// The destination bucket where the current bucket's logs
	// should be placed.
	logBucket?: string @go(LogBucket)

	// A prefix for log object names.
	logObjectPrefix?: string @go(LogObjectPrefix)
}

// CORS is the bucket's Cross-Origin Resource Sharing (CORS) configuration.
#CORS: {
	// Methods is the list of HTTP methods on which to include CORS response
	// headers, (GET, OPTIONS, POST, etc) Note: "*" is permitted in the list
	// of methods, and means "any method".
	methods?: [...string] @go(Methods,[]string)

	// Origins is the list of Origins eligible to receive CORS response
	// headers. Note: "*" is permitted in the list of origins, and means
	// "any Origin".
	origins?: [...string] @go(Origins,[]string)

	// ResponseHeaders is the list of HTTP headers other than the simple
	// response headers to give permission for the user-agent to share
	// across domains.
	responseHeaders?: [...string] @go(ResponseHeaders,[]string)
}

// BucketWebsite holds the bucket's website configuration, controlling how the
// service behaves when accessing bucket contents as a web site. See
// https://cloud.google.com/storage/docs/static-website for more information.
#BucketWebsite: {
	// If the requested object path is missing, the service will ensure the path has
	// a trailing '/', append this suffix, and attempt to retrieve the resulting
	// object. This allows the creation of index.html objects to represent directory
	// pages.
	mainPageSuffix?: string @go(MainPageSuffix)

	// If the requested object path is missing, and any mainPageSuffix object is
	// missing, if applicable, the service will return the named object from this
	// bucket as the content for a 404 Not Found result.
	notFoundPage?: string @go(NotFoundPage)
}

// BucketPolicyOnly configures access checks to use only bucket-level IAM
// policies.
#BucketPolicyOnly: {
	// Enabled specifies whether access checks use only bucket-level IAM
	// policies. Enabled may be disabled until the locked time.
	enabled?: bool @go(Enabled)
}

// BucketUpdatableAttrs represents the subset of parameters of a Google Cloud
// Storage bucket that may be updated.
#BucketUpdatableAttrs: {
	// BucketPolicyOnly configures access checks to use only bucket-level IAM
	// policies.
	bucketPolicyOnly?: null | #BucketPolicyOnly @go(BucketPolicyOnly,*BucketPolicyOnly)

	// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
	cors?: [...#CORS] @go(CORS,[]CORS)

	// DefaultEventBasedHold is the default value for event-based hold on
	// newly created objects in this bucket. It defaults to false.
	defaultEventBasedHold?: bool @go(DefaultEventBasedHold)

	// The encryption configuration used by default for newly inserted objects.
	encryption?: null | #BucketEncryption @go(Encryption,*BucketEncryption)

	// Labels are the bucket's labels.
	labels?: {[string]: string} @go(Labels,map[string]string)

	// Lifecycle is the lifecycle configuration for objects in the bucket.
	lifecycle?: #Lifecycle @go(Lifecycle)

	// The logging configuration.
	logging?: null | #BucketLogging @go(Logging,*BucketLogging)

	// If not empty, applies a predefined set of access controls. It should be set
	// only when creating a bucket.
	// It is always empty for BucketAttrs returned from the service.
	// See https://cloud.google.com/storage/docs/json_api/v1/buckets/insert
	// for valid values.
	predefinedAcl?: string @go(PredefinedACL)

	// If not empty, applies a predefined set of default object access controls.
	// It should be set only when creating a bucket.
	// It is always empty for BucketAttrs returned from the service.
	// See https://cloud.google.com/storage/docs/json_api/v1/buckets/insert
	// for valid values.
	predefinedDefaultObjectAcl?: string @go(PredefinedDefaultObjectACL)

	// RequesterPays reports whether the bucket is a Requester Pays bucket.
	// Clients performing operations on Requester Pays buckets must provide
	// a user project (see BucketHandle.UserProject), which will be billed
	// for the operations.
	requesterPays?: bool @go(RequesterPays)

	// Retention policy enforces a minimum retention time for all objects
	// contained in the bucket. A RetentionPolicy of nil implies the bucket
	// has no minimum data retention.
	//
	// This feature is in private alpha release. It is not currently available to
	// most customers. It might be changed in backwards-incompatible ways and is not
	// subject to any SLA or deprecation policy.
	retentionPolicy?: null | #RetentionPolicy @go(RetentionPolicy,*RetentionPolicy)

	// VersioningEnabled reports whether this bucket has versioning enabled.
	versioningEnabled?: bool @go(VersioningEnabled)

	// The website configuration.
	website?: null | #BucketWebsite @go(Website,*BucketWebsite)
}

// BucketSpecAttrs represents the full set of metadata for a Google Cloud Storage
// bucket limited to all input attributes
#BucketSpecAttrs: {
	#BucketUpdatableAttrs

	// ACL is the list of access control rules on the bucket.
	acl?: [...#ACLRule] @go(ACL,[]ACLRule)

	// DefaultObjectACL is the list of access controls to
	// apply to new objects when no object ACL is provided.
	defaultObjectAcl?: [...#ACLRule] @go(DefaultObjectACL,[]ACLRule)

	// Location is the location of the bucket. It defaults to "US".
	location?: string @go(Location)

	// StorageClass is the default storage class of the bucket. This defines
	// how objects in the bucket are stored and determines the SLA
	// and the cost of storage. Typical values are "MULTI_REGIONAL",
	// "REGIONAL", "NEARLINE", "COLDLINE", "STANDARD" and
	// "DURABLE_REDUCED_AVAILABILITY". Defaults to "STANDARD", which
	// is equivalent to "MULTI_REGIONAL" or "REGIONAL" depending on
	// the bucket's location settings.
	// +kubebuilder:validation:Enum=MULTI_REGIONAL;REGIONAL;NEARLINE;COLDLINE;STANDARD;DURABLE_REDUCED_AVAILABILITY
	storageClass?: string @go(StorageClass)
}

// BucketOutputAttrs represent the subset of metadata for a Google Cloud Storage
// bucket limited to output (read-only) fields.
#BucketOutputAttrs: {
	// BucketPolicyOnly configures access checks to use only bucket-level IAM
	// policies.
	bucketPolicyOnly?: null | #BucketPolicyOnly @go(BucketPolicyOnly,*BucketPolicyOnly)

	// Retention policy enforces a minimum retention time for all objects
	// contained in the bucket. A RetentionPolicy of nil implies the bucket
	// has no minimum data retention.
	//
	// This feature is in private alpha release. It is not currently available to
	// most customers. It might be changed in backwards-incompatible ways and is not
	// subject to any SLA or deprecation policy.
	retentionPolicy?: null | #RetentionPolicyStatus @go(RetentionPolicy,*RetentionPolicyStatus)
}

// BucketParameters define the desired state of a Google Cloud Storage Bucket.
// Most fields map directly to a bucket resource:
// https://cloud.google.com/storage/docs/json_api/v1/buckets#resource
#BucketParameters: {
	#BucketSpecAttrs
}

// A BucketSpec defines the desired state of a Bucket.
#BucketSpec: {

	#BucketParameters
}

// A BucketStatus represents the observed state of a Bucket.
#BucketStatus: {
	attributes?: #BucketOutputAttrs @go(BucketOutputAttrs)
}

// A Bucket is a managed resource that represents a Google Cloud Storage bucket.
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="STORAGE_CLASS",type="string",JSONPath=".spec.storageClass"
// +kubebuilder:printcolumn:name="LOCATION",type="string",JSONPath=".spec.location"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Bucket: {
	spec:    #BucketSpec   @go(Spec)
	status?: #BucketStatus @go(Status)
}

// BucketList contains a list of GCPBuckets
#BucketList: {
	items: [...#Bucket] @go(Items,[]Bucket)
}
