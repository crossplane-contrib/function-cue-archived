// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-gcp/apis/storage/v1alpha1

package v1alpha1

import iamv1alpha1 "github.com/crossplane-contrib/provider-gcp/apis/iam/v1alpha1"

// BucketPolicyParameters defines parameters for a desired KMS BucketPolicy
#BucketPolicyParameters: {
	// Bucket: The RRN of the Bucket to which this BucketPolicy belongs.
	// +optional
	// +immutable
	bucket?: null | string @go(Bucket,*string)

	// Policy: An Identity and Access Management (IAM) policy, which
	// specifies access controls for Google Cloud resources.
	policy: iamv1alpha1.#Policy @go(Policy)
}

// BucketPolicyObservation is used to show the observed state of the
// BucketPolicy resource on GCP. All fields in this structure should only
// be populated from GCP responses; any changes made to the k8s resource outside
// of the crossplane gcp controller will be ignored and overwritten.
#BucketPolicyObservation: {
	// Version: Specifies the format of the policy.
	//
	// Valid values are `0`, `1`, and `3`. Requests that specify an invalid
	// value
	// are rejected.
	//
	// Any operation that affects conditional role bindings must specify
	// version
	// `3`. This requirement applies to the following operations:
	//
	// * Getting a policy that includes a conditional role binding
	// * Adding a conditional role binding to a policy
	// * Changing a conditional role binding in a policy
	// * Removing any role binding, with or without a condition, from a
	// policy
	//   that includes conditions
	//
	// **Important:** If you use IAM Conditions, you must include the `etag`
	// field
	// whenever you call `setIamPolicy`. If you omit this field, then IAM
	// allows
	// you to overwrite a version `3` policy with a version `1` policy, and
	// all of
	// the conditions in the version `3` policy are lost.
	//
	// If a policy does not include any conditions, operations on that
	// policy may
	// specify any valid version or leave the field unset.
	version?: int64 @go(Version)
}

// BucketPolicySpec defines the desired state of a
// BucketPolicy.
#BucketPolicySpec: {
	forProvider: #BucketPolicyParameters @go(ForProvider)
}

// BucketPolicyStatus represents the observed state of a
// BucketPolicy.
#BucketPolicyStatus: {
	atProvider?: #BucketPolicyObservation @go(AtProvider)
}

// BucketPolicy is a managed resource that represents a Google Cloud Storage
// Bucket IAM Policy.
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:resource:scope=Cluster
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#BucketPolicy: {
	spec:    #BucketPolicySpec   @go(Spec)
	status?: #BucketPolicyStatus @go(Status)
}

// BucketPolicyList contains a list of BucketPolicy types
#BucketPolicyList: {
	items: [...#BucketPolicy] @go(Items,[]BucketPolicy)
}
