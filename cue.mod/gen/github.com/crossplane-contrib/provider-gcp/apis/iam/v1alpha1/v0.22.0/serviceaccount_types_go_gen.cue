// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-gcp/apis/iam/v1alpha1

package v1alpha1

// ServiceAccountParameters defines parameters for a desired IAM ServiceAccount
// https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts
// The name of the service account (ie the `accountId` parameter of the Create
// call) is determined by the value of the `crossplane.io/external-name`
// annotation. Unless overridden by the user, this annotation is automatically
// populated with the value of the `metadata.name` attribute.
#ServiceAccountParameters: {
	// DisplayName is an optional user-specified name for the service account.
	// Must be less than or equal to 100 characters.
	// +optional
	displayName?: null | string @go(DisplayName,*string)

	// Description is an optional user-specified opaque description of the
	// service account. Must be less than or equal to 256 characters.
	// +optional
	description?: null | string @go(Description,*string)
}

// ServiceAccountObservation is used to show the observed state of the
// ServiceAccount resource on GCP. All fields in this structure should only
// be populated from GCP responses; any changes made to the k8s resource outside
// of the crossplane gcp controller will be ignored and overwritten.
#ServiceAccountObservation: {
	// Name is the "relative resource name" of the service account in the following format:
	// projects/{PROJECT_ID}/serviceAccounts/{external-name}.
	// part of https://godoc.org/google.golang.org/genproto/googleapis/iam/admin/v1#ServiceAccount
	// not to be confused with CreateServiceAccountRequest.Name aka ServiceAccountParameters.ProjectName
	name?: string @go(Name)

	// ProjectID is the id of the project that owns the service account.
	projectId?: string @go(ProjectID)

	// The unique and stable id of the service account.
	uniqueId?: string @go(UniqueID)

	// Email is the the email address of the service account.
	// This matches the EMAIL field you would see using `gcloud iam service-accounts list`
	email?: string @go(Email)

	// OAuth2ClientId is the value GCP will use in conjunction with the OAuth2
	// clientconfig API to make three legged OAuth2 (3LO) flows to access the
	// data of Google users.
	oauth2ClientId?: string @go(Oauth2ClientID)

	// Disabled is a bool indicating if the service account is disabled.
	// The field is currently in alpha phase.
	disabled?: bool @go(Disabled)
}

// ServiceAccountSpec defines the desired state of a
// ServiceAccount.
#ServiceAccountSpec: {
	forProvider: #ServiceAccountParameters @go(ForProvider)
}

// ServiceAccountStatus represents the observed state of a
// ServiceAccount.
#ServiceAccountStatus: {
	atProvider?: #ServiceAccountObservation @go(AtProvider)
}

// ServiceAccount is a managed resource that represents a Google IAM Service Account.
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="DISPLAYNAME",type="string",JSONPath=".spec.forProvider.displayName"
// +kubebuilder:printcolumn:name="EMAIL",type="string",JSONPath=".status.atProvider.email"
// +kubebuilder:printcolumn:name="DISABLED",type="boolean",JSONPath=".status.atProvider.disabled"
// +kubebuilder:resource:scope=Cluster
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#ServiceAccount: {
	spec:    #ServiceAccountSpec   @go(Spec)
	status?: #ServiceAccountStatus @go(Status)
}

// ServiceAccountList contains a list of ServiceAccount types
#ServiceAccountList: {
	items: [...#ServiceAccount] @go(Items,[]ServiceAccount)
}
