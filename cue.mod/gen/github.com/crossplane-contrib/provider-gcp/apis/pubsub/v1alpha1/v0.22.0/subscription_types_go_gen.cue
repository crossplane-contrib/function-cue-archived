// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-gcp/apis/pubsub/v1alpha1

package v1alpha1

// SubscriptionParameters defines parameters for a desired Subscription.
#SubscriptionParameters: {
	// AckDeadlineSeconds is the approximate amount of time Pub/Sub waits for
	// the subscriber to acknowledge receipt before resending the message.
	// The minimum custom deadline you can specify is 10 seconds. The maximum
	// custom deadline you can specify is 600 seconds (10 minutes). If this
	// parameter is 0, a default value of 10 seconds is used.
	// +optional
	ackDeadlineSeconds?: int64 @go(AckDeadlineSeconds)

	// DeadLetterPolicy is the policy that specifies the conditions for dead
	// lettering messages in this subscription. If dead_letter_policy is not
	// set, dead lettering is disabled.
	// +optional
	deadLetterPolicy?: null | #DeadLetterPolicy @go(DeadLetterPolicy,*DeadLetterPolicy)

	// Detached is the flag which indicates whether the subscription is detached from its
	// topic. Detached subscriptions don't receive messages from their topic
	// and don't retain any backlog.
	// +optional
	detached?: bool @go(Detached)

	// EnableMessageOrdering is the flag which controls message delivery order
	// to subscribers. When it is true, messages published with the same
	// `ordering_key` in `PubsubMessage` will be delivered to the subscribers
	// in the order in which they are received by the Pub/Sub system.
	// Otherwise, they may be delivered in any order.
	// +optional
	enableMessageOrdering?: bool @go(EnableMessageOrdering)

	// ExpirationPolicy is the policy that specifies the conditions for this
	// subscription's expiration. If `expiration_policy` is not set, a
	// *default policy* with `ttl` of 31 days will be used. The minimum allowed value
	// for `expiration_policy.ttl` is 1 day.
	// +optional
	expirationPolicy?: null | #ExpirationPolicy @go(ExpirationPolicy,*ExpirationPolicy)

	// Filter is an expression written in the Pub/Sub filter language
	// (https://cloud.google.com/pubsub/docs/filtering). If non-empty, then
	// only `PubsubMessage`s whose `attributes` field matches the filter are
	// delivered on this subscription. If empty, then no messages are
	// filtered out.
	// +optional
	filter?: string @go(Filter)

	// Labels are used as additional metadata on Subscription.
	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string)

	// MessageRetentionDuration is a parameter which defines how long to retain
	// unacknowledged messages in the subscription's backlog, from the moment
	// a message is published. If `retain_acked_messages` is true, then this also
	// configures the retention of acknowledged messages, and thus
	// configures how far back in time a `Seek` can be done. Defaults to 7
	// days. Cannot be more than 7 days or less than 10 minutes.
	// +optional
	// +kubebuilder:validation:Pattern=^[0-9]*s$
	messageRetentionDuration?: string @go(MessageRetentionDuration)

	// PushConfig is a parameter which configures push delivery. An empty
	// `pushConfig` signifies that the subscriber will pull and ack messages
	// using API methods.
	// +optional
	pushConfig?: null | #PushConfig @go(PushConfig,*PushConfig)

	// RetainAckedMessages is a message which indicates whether to retain acknowledged
	// messages. If true, then messages are not expunged from the
	// subscription's backlog, even if they are acknowledged, until they
	// fall out of the `message_retention_duration` window.
	// +optional
	retainAckedMessages?: bool @go(RetainAckedMessages)

	// RetryPolicy is the policy that specifies how Pub/Sub retries message
	// delivery for this subscription. If not set, the default retry policy
	// is applied. This generally implies that messages will be retried as
	// soon as possible for healthy subscribers.
	// +optional
	retryPolicy?: null | #RetryPolicy @go(RetryPolicy,*RetryPolicy)

	// TODO: Add referencer & selector for Topic resource.
	// Topic is the name of the topic from which this subscription
	// is receiving messages. Format is `projects/{project}/topics/{topic}`.
	topic?: string @go(Topic)
}

// DeadLetterPolicy contains configuration for dead letter policy.
#DeadLetterPolicy: {
	// DeadLetterTopic is the name of the topic to which dead letter messages
	// should be published. Format is `projects/{project}/topics/{topic}`.
	deadLetterTopic?: string @go(DeadLetterTopic)

	// MaxDeliveryAttempts is the maximum number of delivery attempts for any
	// message. The value must be between 5 and 100.
	// +optional
	maxDeliveryAttempts?: int64 @go(MaxDeliveryAttempts)
}

// ExpirationPolicy contains configuration for resource expiration.
#ExpirationPolicy: {
	// TTL is the duration of "time-to-live" for an associated resource.
	// The resource expires if it is not active for a period of `ttl`.
	// +kubebuilder:validation:Pattern=^[0-9]*s$
	ttl?: string @go(TTL)
}

// PushConfig contains configuration for a push delivery endpoint.
#PushConfig: {
	// Attributes is the map of endpoint configuration attributes that can be used to
	// control different aspects of the message delivery.
	attributes?: {[string]: string} @go(Attributes,map[string]string)

	// OidcToken is a set of parameters to attach OIDC JWT
	// token as an `Authorization` header in the HTTP request for every
	// pushed message.
	oidcToken?: null | #OidcToken @go(OidcToken,*OidcToken)

	// PushEndpoint is a URL locating the endpoint to which messages should be
	// pushed.
	pushEndpoint?: string @go(PushEndpoint)
}

// OidcToken contains information needed for generating an OpenID Connect token
#OidcToken: {
	// Audience is the "audience" to be used when generating OIDC token.
	audience?: string @go(Audience)

	// ServiceAccountEmail is the email to be used for generating the OIDC token
	serviceAccountEmail?: string @go(ServiceAccountEmail)
}

// RetryPolicy is the policy that specifies how Cloud Pub/Sub retries
// message delivery. Retry delay will be exponential based on provided
// minimum and maximum backoffs.
#RetryPolicy: {
	// MaximumBackoff is the maximum delay between consecutive deliveries of a
	// given message. Value should be between 0 and 600 seconds. Defaults to
	// 600 seconds.
	maximumBackoff?: string @go(MaximumBackoff)

	// MinimumBackoff is the minimum delay between consecutive deliveries of a
	// given message. Value should be between 0 and 600 seconds. Defaults to
	// 10 seconds.
	minimumBackoff?: string @go(MinimumBackoff)
}

// SubscriptionSpec defines the desired state of a Subscription.
#SubscriptionSpec: {
	forProvider: #SubscriptionParameters @go(ForProvider)
}

// Subscription is a managed resource that represents a Google PubSub Subscription.
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:resource:scope=Cluster
#Subscription: {
	spec: #SubscriptionSpec @go(Spec)
}

// SubscriptionList contains a list of Subscription types
#SubscriptionList: {
	items: [...#Subscription] @go(Items,[]Subscription)
}
