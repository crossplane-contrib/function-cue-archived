// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-azure/apis/database/v1beta1

package v1beta1

import apisv1alpha3 "github.com/crossplane-contrib/provider-azure/apis/v1alpha3"

// A PostgreSQLServerConfiguration is a managed resource that represents an Azure
// PostgreSQL Server Configuration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="VERSION",type="string",JSONPath=".spec.forProvider.version"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#PostgreSQLServerConfiguration: {
	spec:    #SQLServerConfigurationSpec   @go(Spec)
	status?: #SQLServerConfigurationStatus @go(Status)
}

// PostgreSQLServerConfigurationList contains a list of PostgreSQLServerConfiguration.
#PostgreSQLServerConfigurationList: {
	items: [...#PostgreSQLServerConfiguration] @go(Items,[]PostgreSQLServerConfiguration)
}

// A MySQLServerConfiguration is a managed resource that represents an Azure
// MySQL Server Configuration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="VERSION",type="string",JSONPath=".spec.forProvider.version"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#MySQLServerConfiguration: {
	spec:    #SQLServerConfigurationSpec   @go(Spec)
	status?: #SQLServerConfigurationStatus @go(Status)
}

// MySQLServerConfigurationList contains a list of MySQLServerConfiguration.
#MySQLServerConfigurationList: {
	items: [...#MySQLServerConfiguration] @go(Items,[]MySQLServerConfiguration)
}

// SQLServerConfigurationParameters define the desired state of an Azure SQL
// Database Server Configuration, either PostgreSQL or MySQL Configuration.
#SQLServerConfigurationParameters: {
	// ResourceGroupName specifies the name of the resource group that should
	// contain this SQLServer.
	// +immutable
	resourceGroupName?: string @go(ResourceGroupName)

	// ServerName specifies the name of the server that this
	// configuration applies to.
	// +immutable
	serverName?: string @go(ServerName)

	// Name - Configuration name to be applied
	// +kubebuilder:validation:Required
	// +immutable
	name: string @go(Name)

	// Value - Configuration value to be applied
	// Can be left unset to read the current value
	// as a result of late-initialization.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

// A SQLServerConfigurationSpec defines the desired state of a SQLServer
// Configuration.
#SQLServerConfigurationSpec: {
	forProvider: #SQLServerConfigurationParameters @go(ForProvider)
}

// SQLServerConfigurationObservation represents the current state of Azure SQL resource.
#SQLServerConfigurationObservation: {
	// ID - Resource ID
	id?: string @go(ID)

	// Name - Resource name.
	name?: string @go(Name)

	// Type - Resource type.
	type?: string @go(Type)

	// DataType - Data type for the configuration
	dataType?: string @go(DataType)

	// Value - Applied configuration value
	value?: string @go(Value)

	// DefaultValue - Default value for this configuration
	defaultValue?: string @go(DefaultValue)

	// Source - Applied configuration source
	source?: string @go(Source)

	// Description - Description for the configuration
	description?: string @go(Description)

	// LastOperation represents the state of the last operation started by the
	// controller.
	lastOperation?: apisv1alpha3.#AsyncOperation @go(LastOperation)
}

// A SQLServerConfigurationStatus represents the observed state of a
// SQLServerConfiguration.
#SQLServerConfigurationStatus: {
	atProvider?: #SQLServerConfigurationObservation @go(AtProvider)
}
