// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-azure/apis/database/v1alpha3

package v1alpha3

// A CosmosDBAccount is a managed resource that represents an Azure CosmosDB
// account with CosmosDB API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="STATE",type="string",JSONPath=".status.atProvider.state"
// +kubebuilder:printcolumn:name="KIND",type="string",JSONPath=".spec.forProvider.kind"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#CosmosDBAccount: {
	spec:    #CosmosDBAccountSpec   @go(Spec)
	status?: #CosmosDBAccountStatus @go(Status)
}

// CosmosDBAccountList contains a list of CosmosDB.
#CosmosDBAccountList: {
	items: [...#CosmosDBAccount] @go(Items,[]CosmosDBAccount)
}

// CosmosDBAccountParameters define the desired state of an Azure CosmosDB
// account.
#CosmosDBAccountParameters: {
	// ResourceGroupName specifies the name of the resource group that should
	// contain this Account.
	// +immutable
	resourceGroupName?: string @go(ResourceGroupName)

	// Location - The location of the resource. This will be one of the
	// supported and registered Azure Geo Regions (e.g. West US, East US,
	// Southeast Asia, etc.).
	location: string @go(Location)

	// Properties - Account properties like databaseAccountOfferType,
	// ipRangeFilters, etc.
	properties: #CosmosDBAccountProperties @go(Properties)

	// Tags - A list of key value pairs that describe the resource. These tags
	// can be used for viewing and grouping this resource (across resource
	// groups). A maximum of 15 tags can be provided for a resource. Each tag
	// must have a key with a length no greater than 128 characters and a value
	// with a length no greater than 256 characters.
	// +optional
	tags?: {[string]: string} @go(Tags,map[string]string)
}

// CosmosDBAccountObservation shows current state of an Azure CosmosDB account.
#CosmosDBAccountObservation: {
	// Identity - The identity of the resource.
	id: string @go(ID)

	// State - current state of the account in Azure.
	state: string @go(State)
}

// CosmosDBAccountProperties define the desired properties of an Azure CosmosDB account.
#CosmosDBAccountProperties: {
	// ConsistencyPolicy - The consistency policy for the Cosmos DB account.
	// + optional
	consistencyPolicy?: null | #CosmosDBAccountConsistencyPolicy @go(ConsistencyPolicy,*CosmosDBAccountConsistencyPolicy)

	// Locations - An array that contains the georeplication locations enabled
	// for the Cosmos DB account.
	locations: [...#CosmosDBAccountLocation] @go(Locations,[]CosmosDBAccountLocation)

	// DatabaseAccountOfferType - The offer type for the database
	databaseAccountOfferType: string @go(DatabaseAccountOfferType)

	// IPRangeFilter - Cosmos DB Firewall Support: This value specifies the set
	// of IP addresses or IP address ranges in CIDR form to be included as the
	// allowed list of client IPs for a given database account. IP
	// addresses/ranges must be comma separated and must not contain any spaces.
	// + optional
	ipRangeFilter?: null | string @go(IPRangeFilter,*string)

	// EnableAutomaticFailover - Enables automatic failover of the write region
	// in the rare event that the region is unavailable due to an outage.
	// Automatic failover will result in a new write region for the account and
	// is chosen based on the failover priorities configured for the account.
	// + optional
	enableAutomaticFailover?: null | bool @go(EnableAutomaticFailover,*bool)

	// EnableMultipleWriteLocations - Enables the account to write in multiple
	// locations
	// + optional
	enableMultipleWriteLocations?: null | bool @go(EnableMultipleWriteLocations,*bool)

	// EnableCassandraConnector - Enables the cassandra connector on the Cosmos
	// DB C* account
	// + optional
	enableCassandraConnector?: null | bool @go(EnableCassandraConnector,*bool)
}

// CosmosDBAccountConsistencyPolicy the consistency policy for the Cosmos DB
// database account.
#CosmosDBAccountConsistencyPolicy: {
	// DefaultConsistencyLevel - The default consistency level and configuration
	// settings of the Cosmos DB account. Possible values include: 'Eventual',
	// 'Session', 'BoundedStaleness', 'Strong', 'ConsistentPrefix'
	defaultConsistencyLevel: string @go(DefaultConsistencyLevel)

	// MaxStalenessPrefix - When used with the Bounded Staleness consistency
	// level, this value represents the number of stale requests tolerated.
	// Accepted range for this value is 1 â€“ 2,147,483,647. Required when
	// defaultConsistencyPolicy is set to 'BoundedStaleness'.
	// + optional
	maxStalenessPrefix?: null | int64 @go(MaxStalenessPrefix,*int64)

	// MaxIntervalInSeconds - When used with the Bounded Staleness consistency
	// level, this value represents the time amount of staleness (in seconds)
	// tolerated. Accepted range for this value is 5 - 86400. Required when
	// defaultConsistencyPolicy is set to 'BoundedStaleness'.
	// + optional
	maxIntervalInSeconds?: null | int32 @go(MaxIntervalInSeconds,*int32)
}

// CosmosDBAccountLocation a region in which the Azure Cosmos DB database
// account is deployed.
#CosmosDBAccountLocation: {
	// LocationName - The name of the region.
	locationName: string @go(LocationName)

	// FailoverPriority - The failover priority of the region. A failover
	// priority of 0 indicates a write region. The maximum value for a failover
	// priority = (total number of regions - 1). Failover priority values must
	// be unique for each of the regions in which the database account exists.
	failoverPriority: int32 @go(FailoverPriority)

	// IsZoneRedundant - Flag to indicate whether or not this region is an
	// AvailabilityZone region
	isZoneRedundant: bool @go(IsZoneRedundant)
}

// A CosmosDBAccountSpec defines the desired state of a CosmosDB Account.
#CosmosDBAccountSpec: {
	forProvider: #CosmosDBAccountParameters @go(ForProvider)
}

// An CosmosDBAccountStatus represents the observed state of an Account.
#CosmosDBAccountStatus: {
	// + optional
	atProvider?: null | #CosmosDBAccountObservation @go(AtProvider,*CosmosDBAccountObservation)
}
