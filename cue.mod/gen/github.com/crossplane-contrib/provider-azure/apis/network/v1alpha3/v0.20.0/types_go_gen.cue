// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-azure/apis/network/v1alpha3

package v1alpha3

// AddressSpace contains an array of IP address ranges that can be used by
// subnets of the virtual network.
#AddressSpace: {
	// AddressPrefixes - A list of address blocks reserved for this virtual
	// network in CIDR notation.
	addressPrefixes: [...string] @go(AddressPrefixes,[]string)
}

// VirtualNetworkPropertiesFormat defines properties of a VirtualNetwork.
#VirtualNetworkPropertiesFormat: {
	// AddressSpace - The AddressSpace that contains an array of IP address
	// ranges that can be used by subnets.
	// +optional
	addressSpace: #AddressSpace @go(AddressSpace)

	// EnableDDOSProtection - Indicates if DDoS protection is enabled for all
	// the protected resources in the virtual network. It requires a DDoS
	// protection plan associated with the resource.
	// +optional
	enableDdosProtection?: bool @go(EnableDDOSProtection)

	// EnableVMProtection - Indicates if VM protection is enabled for all the
	// subnets in the virtual network.
	// +optional
	enableVmProtection?: bool @go(EnableVMProtection)
}

// A VirtualNetworkSpec defines the desired state of a VirtualNetwork.
#VirtualNetworkSpec: {
	// ResourceGroupName - Name of the Virtual Network's resource group.
	resourceGroupName?: string @go(ResourceGroupName)

	// VirtualNetworkPropertiesFormat - Properties of the virtual network.
	properties: #VirtualNetworkPropertiesFormat @go(VirtualNetworkPropertiesFormat)

	// Location - Resource location.
	location: string @go(Location)

	// Tags - Resource tags.
	// +optional
	tags?: {[string]: string} @go(Tags,map[string]string)
}

// A VirtualNetworkStatus represents the observed state of a VirtualNetwork.
#VirtualNetworkStatus: {
	// State of this VirtualNetwork.
	state?: string @go(State)

	// A Message providing detail about the state of this VirtualNetwork, if
	// any.
	message?: string @go(Message)

	// ID of this VirtualNetwork.
	id?: string @go(ID)

	// Etag - A unique read-only string that changes whenever the resource is
	// updated.
	etag?: string @go(Etag)

	// ResourceGUID - The GUID of this VirtualNetwork.
	resourceGuid?: string @go(ResourceGUID)

	// Type of this VirtualNetwork.
	type?: string @go(Type)
}

// A VirtualNetwork is a managed resource that represents an Azure Virtual
// Network.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="STATE",type="string",JSONPath=".status.state"
// +kubebuilder:printcolumn:name="LOCATION",type="string",JSONPath=".spec.location"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#VirtualNetwork: {
	spec:    #VirtualNetworkSpec   @go(Spec)
	status?: #VirtualNetworkStatus @go(Status)
}

// VirtualNetworkList contains a list of VirtualNetwork items
#VirtualNetworkList: {
	items: [...#VirtualNetwork] @go(Items,[]VirtualNetwork)
}

// ServiceEndpointPropertiesFormat defines properties of a service endpoint.
#ServiceEndpointPropertiesFormat: {
	// Service - The type of the endpoint service.
	// +optional
	service?: string @go(Service)

	// Locations - A list of locations.
	// +optional
	locations?: [...string] @go(Locations,[]string)

	// ProvisioningState - The provisioning state of the resource.
	// +optional
	provisioningState?: string @go(ProvisioningState)
}

// SubnetPropertiesFormat defines properties of a Subnet.
#SubnetPropertiesFormat: {
	// AddressPrefix - The address prefix for the subnet.
	addressPrefix: string @go(AddressPrefix)

	// ServiceEndpoints - An array of service endpoints.
	serviceEndpoints?: [...#ServiceEndpointPropertiesFormat] @go(ServiceEndpoints,[]ServiceEndpointPropertiesFormat)
}

// A SubnetSpec defines the desired state of a Subnet.
#SubnetSpec: {
	// VirtualNetworkName - Name of the Subnet's virtual network.
	virtualNetworkName?: string @go(VirtualNetworkName)

	// ResourceGroupName - Name of the Subnet's resource group.
	resourceGroupName?: string @go(ResourceGroupName)

	// SubnetPropertiesFormat - Properties of the subnet.
	properties: #SubnetPropertiesFormat @go(SubnetPropertiesFormat)
}

// A SubnetStatus represents the observed state of a Subnet.
#SubnetStatus: {
	// State of this Subnet.
	state?: string @go(State)

	// A Message providing detail about the state of this Subnet, if any.
	message?: string @go(Message)

	// Etag - A unique string that changes whenever the resource is updated.
	etag?: string @go(Etag)

	// ID of this Subnet.
	id?: string @go(ID)

	// Purpose - A string identifying the intention of use for this subnet based
	// on delegations and other user-defined properties.
	purpose?: string @go(Purpose)
}

// A Subnet is a managed resource that represents an Azure Subnet.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="STATE",type="string",JSONPath=".status.state"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Subnet: {
	spec:    #SubnetSpec   @go(Spec)
	status?: #SubnetStatus @go(Status)
}

// SubnetList contains a list of Subnet items
#SubnetList: {
	items: [...#Subnet] @go(Items,[]Subnet)
}

// A PublicIPAddressSpec defines the desired state of a PublicIPAddress.
#PublicIPAddressSpec: {
	forProvider: #PublicIPAddressProperties @go(ForProvider)
}

// PublicIPAddressDNSSettings contains FQDN of the DNS record associated with the public IP address.
#PublicIPAddressDNSSettings: {
	// DomainNameLabel -the Domain name label.
	// The concatenation of the domain name label and the regionalized DNS zone
	// make up the fully qualified domain name associated with
	// the public IP address. If a domain name label is specified,
	// an A DNS record is created for the public IP in
	// the Microsoft Azure DNS system.
	// +kubebuilder:validation:MinLength:=1
	domainNameLabel: string @go(DomainNameLabel)

	// ReverseFQDN - Gets or Sets the Reverse FQDN.
	// A user-visible, fully qualified domain name that
	// resolves to this public IP address. If the reverseFqdn
	// is specified, then a PTR DNS record is created pointing
	// from the IP address in the in-addr.arpa domain to
	// the reverse FQDN.
	// +optional
	reverseFqdn?: null | string @go(ReverseFQDN,*string)
}

// IPTag list of tags to be assigned to this public IP
#IPTag: {
	// IPTagType - Type of the IP tag. Example: FirstPartyUsage.
	ipTagType: string @go(IPTagType)

	// Tag - Value of the IpTag associated with the public IP. Example SQL, Storage etc.
	tag: string @go(Tag)
}

// PublicIPAddressProperties defines properties of the PublicIPAddress.
#PublicIPAddressProperties: {
	// ResourceGroupName - Name of the Public IP address's resource group.
	// +immutable
	resourceGroupName?: string @go(ResourceGroupName)

	// PublicIPAllocationMethod - The public IP address allocation method. Possible values include: 'Static', 'Dynamic'
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Enum=Static;Dynamic
	// +immutable
	allocationMethod: string @go(PublicIPAllocationMethod)

	// PublicIPAllocationMethod - The public IP address version. Possible values include: 'IPv4', 'IPv6'
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Enum=IPv4;IPv6
	// +immutable
	version: string @go(PublicIPAddressVersion)

	// Location - Resource location.
	// +kubebuilder:validation:MinLength:=1
	// +immutable
	location: string @go(Location)

	// SKU of PublicIPAddress
	// +optional
	sku?: null | #SKU @go(SKU,*SKU)

	// PublicIPPrefixID - The Public IP Prefix this Public IP Address should be allocated from.
	// +optional
	publicIPPrefixID?: null | string @go(PublicIPPrefixID,*string)

	// PublicIPAddressDNSSettings - The FQDN of the DNS record associated with the public IP address.
	// +optional
	dnsSettings?: null | #PublicIPAddressDNSSettings @go(PublicIPAddressDNSSettings,*PublicIPAddressDNSSettings)

	// TCPIdleTimeoutInMinutes - Timeout in minutes for idle TCP connections
	// +kubebuilder:validation:Minimum:=0
	// +optional
	tcpIdleTimeoutInMinutes?: null | int32 @go(TCPIdleTimeoutInMinutes,*int32)

	// IPTags - IP tags to be assigned to this public IP address
	// +optional
	ipTags?: [...#IPTag] @go(IPTags,[]IPTag)

	// Tags - Resource tags.
	// +optional
	tags?: {[string]: string} @go(Tags,map[string]string)
}

// SKU of PublicIPAddress
#SKU: {
	// Name - Name of sku. Possible values include: ['Standard', 'Basic']
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Enum=Standard;Basic
	name: string @go(Name)
}

// IPConfiguration properties of the observed IP configuration.
#IPConfiguration: {
	// PrivateIPAddress - The private IP address of the IP configuration.
	privateIPAddress?: null | string @go(PrivateIPAddress,*string)

	// PrivateIPAllocationMethod - The private IP address allocation method. Possible values include: 'Static', 'Dynamic'
	privateIPAllocationMethod: string @go(PrivateIPAllocationMethod)

	// ProvisioningState - Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	provisioningState: string @go(ProvisioningState)
}

// PublicIPAddressDNSSettingsObservation represents observed DNS settings of
// a public IP resource
#PublicIPAddressDNSSettingsObservation: {
	// DomainNameLabel -the Domain name label.
	// The concatenation of the domain name label and the regionalized DNS zone
	// make up the fully qualified domain name associated with
	// the public IP address. If a domain name label is specified,
	// an A DNS record is created for the public IP in
	// the Microsoft Azure DNS system.
	// +optional
	domainNameLabel?: null | string @go(DomainNameLabel,*string)

	// ReverseFQDN - Gets or Sets the Reverse FQDN.
	// A user-visible, fully qualified domain name that
	// resolves to this public IP address. If the reverseFqdn
	// is specified, then a PTR DNS record is created pointing
	// from the IP address in the in-addr.arpa domain to
	// the reverse FQDN.
	// +optional
	reverseFqdn?: null | string @go(ReverseFQDN,*string)

	// FQDN - Gets the FQDN, Fully qualified domain name of
	// the A DNS record associated with the public IP.
	// This is the concatenation of the domainNameLabel
	// and the regionalized DNS zone.
	fqdn?: null | string @go(FQDN,*string)
}

// A PublicIPAddressObservation represents the observed state of a PublicIPAddress.
#PublicIPAddressObservation: {
	// State of this PublicIPAddress.
	state?: string @go(State)

	// A Message providing detail about the state of this PublicIPAddress, if any.
	message?: string @go(Message)

	// Etag - A unique string that changes whenever the resource is updated.
	etag?: string @go(Etag)

	// ID of this PublicIPAddress.
	id?: string @go(ID)

	// Address - A string identifying address of PublicIPAddress resource
	address: string @go(Address)

	// Version observed IP version
	version: string @go(Version)

	// DNSSettings observed DNS settings of the IP address
	dnsSettings?: null | #PublicIPAddressDNSSettingsObservation @go(DNSSettings,*PublicIPAddressDNSSettingsObservation)

	// IPConfiguration - The IP configuration associated with the public IP address
	ipConfiguration?: null | #IPConfiguration @go(IPConfiguration,*IPConfiguration)
}

// A PublicIPAddressStatus represents the observed state of a SQLServer.
#PublicIPAddressStatus: {
	atProvider?: #PublicIPAddressObservation @go(AtProvider)
}

// A PublicIPAddress is a managed resource that represents an Azure PublicIPAddress.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="ADDRESS",type="string",JSONPath=".status.atProvider.address"
// +kubebuilder:printcolumn:name="FQDN",type="string",JSONPath=".status.atProvider.dnsSettings.fqdn"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#PublicIPAddress: {
	spec:    #PublicIPAddressSpec   @go(Spec)
	status?: #PublicIPAddressStatus @go(Status)
}

// PublicIPAddressList contains a list of PublicIPAddress items
#PublicIPAddressList: {
	items: [...#PublicIPAddress] @go(Items,[]PublicIPAddress)
}
