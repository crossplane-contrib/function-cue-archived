// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-azure/apis/dns/v1alpha1

package v1alpha1

// ZoneParameters define the desired state of an Azure DNS Zone.
#ZoneParameters: {
	// ResourceGroupName specifies the name of the resource group that should
	// contain this DNS Zone.
	// +immutable
	resourceGroupName?: string @go(ResourceGroupName)

	// Location is the Azure location that the DNS Zone will be created in
	// +kubebuilder:validation:Required
	// +immutable
	location: string @go(Location)

	// ZoneType - Type of DNS zone to create.
	// Allowed values: Private, Public
	// Default: Public
	// +kubebuilder:validation:Enum=Public;Private
	// +kubebuilder:default=Public
	// +optional
	// +immutable
	zoneType?: null | string @go(ZoneType,*string)

	// RegistrationVirtualNetworks - A list of references to virtual networks that register hostnames in this
	// DNS zone. This is an only when ZoneType is Private.
	// +optional
	registrationVirtualNetworks?: [...#SubResource] @go(RegistrationVirtualNetworks,[]SubResource)

	// ResolutionVirtualNetworks - A list of references to virtual networks that resolve records in this DNS zone.
	// This is an only when ZoneType is Private.
	// +optional
	resolutionVirtualNetworks?: [...#SubResource] @go(ResolutionVirtualNetworks,[]SubResource)

	// Tags - Resource tags.
	// +optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// ZoneObservation define the actual state of an Azure DNS Zone.
#ZoneObservation: {
	// ID - Resource ID
	id?: string @go(ID)

	// Etag - The etag of the zone.
	etag?: string @go(Etag)

	// Name - The name of the zone.
	name?: string @go(Name)

	// MaxNumberOfRecordSets - The maximum number of record sets that can be created in this DNS zone.
	// This is a read-only property and any attempt to set this value will be ignored.
	maxNumberOfRecordSets?: int @go(MaxNumberOfRecordSets)

	// NumberOfRecordSets - The current number of record sets in this DNS zone.
	// This is a read-only property and any attempt to set this value will be ignored.
	numberOfRecordSets?: int @go(NumberOfRecordSets)

	// NameServers - The name servers for this DNS zone. This is a read-only property and any attempt
	// to set this value will be ignored.
	nameServers?: [...string] @go(NameServers,[]string)

	// Type - Resource type.
	type?: string @go(Type)
}

// SubResource a reference to another resource
#SubResource: {
	// ID - Resource id.
	id?: null | string @go(ID,*string)
}

// A ZoneSpec defines the desired state of a Zone.
#ZoneSpec: {
	forProvider: #ZoneParameters @go(ForProvider)
}

// A ZoneStatus represents the observed state of a Zone.
#ZoneStatus: {
	atProvider?: #ZoneObservation @go(AtProvider)
}

// RecordType enumerates the values for record type.
#RecordType: string // #enumRecordType

#enumRecordType:
	#A |
	#AAAA |
	#CAA |
	#CNAME |
	#MX |
	#NS |
	#PTR |
	#SOA |
	#SRV |
	#TXT

// A type DNS record
#A: #RecordType & "A"

// AAAA type DNS record
#AAAA: #RecordType & "AAAA"

// CAA type DNS record
#CAA: #RecordType & "CAA"

// CNAME type DNS record
#CNAME: #RecordType & "CNAME"

// MX type DNS record
#MX: #RecordType & "MX"

// NS type DNS record
#NS: #RecordType & "NS"

// PTR type DNS record
#PTR: #RecordType & "PTR"

// SOA type DNS record
#SOA: #RecordType & "SOA"

// SRV type DNS record
#SRV: #RecordType & "SRV"

// TXT type DNS record
#TXT: #RecordType & "TXT"

// RecordSetParameters define the desired state of an Azure DNS RecordSet.
#RecordSetParameters: {
	// ResourceGroupName specifies the name of the resource group that should
	// contain this DNS Zone.
	// +immutable
	resourceGroupName?: string @go(ResourceGroupName)

	// ZoneName specifies the name of the Zone that should
	// contain this DNS RecordSet.
	// +immutable
	zoneName?: string @go(ZoneName)

	// Metadata - The metadata attached to the record set
	// +optional
	metadata?: {[string]: string} @go(Metadata,map[string]string)

	// TTL - The TTL (time-to-live) of the records in the record set.
	// +kubebuilder:validation:Required
	ttl: int @go(TTL)

	// TargetResource - A reference to an azure resource from where the dns resource value is taken.
	// +optional
	targetResource?: null | #SubResource @go(TargetResource,*SubResource)

	// RecordType enumerates the values for record type.
	// +kubebuilder:validation:Required
	recordType: #RecordType @go(RecordType)

	// ARecords - The list of A records in the record set.
	// +optional
	aRecords?: [...#ARecord] @go(ARecords,[]ARecord)

	// AAAARecords - The list of AAAA records in the record set.
	// +optional
	aaaaRecords?: [...#AAAARecord] @go(AAAARecords,[]AAAARecord)

	// MXRecords - The list of MX records in the record set.
	// +optional
	mxRecords?: [...#MXRecord] @go(MXRecords,[]MXRecord)

	// NSRecords - The list of NS records in the record set.
	// +optional
	nsRecords?: [...#NSRecord] @go(NSRecords,[]NSRecord)

	// PTRRecords - The list of PTR records in the record set.
	// +optional
	ptrRecords?: [...#PTRRecord] @go(PTRRecords,[]PTRRecord)

	// SRVRecords - The list of SRV records in the record set.
	// +optional
	srvRecords?: [...#SRVRecord] @go(SRVRecords,[]SRVRecord)

	// TXTRecords - The list of TXT records in the record set.
	// +optional
	txtRecords?: [...#TXTRecord] @go(TXTRecords,[]TXTRecord)

	// CNAMERecord - The CNAME record in the  record set.
	// +optional
	cnameRecord?: #CNAMERecord @go(CNAMERecord)

	// SOARecord - The SOA record in the record set.
	// +optional
	soaRecord?: #SOARecord @go(SOARecord)

	// CAARecords - The list of CAA records in the record set.
	// +optional
	caaRecords?: [...#CAARecord] @go(CAARecords,[]CAARecord)
}

// RecordSetObservation define the actual state of an Azure DNS RecordSet.
#RecordSetObservation: {
	// ID - Resource ID
	id?: string @go(ID)

	// Etag - The etag of the zone.
	etag?: string @go(Etag)

	// Name - The name of the zone.
	name?: string @go(Name)

	// Type - Resource type.
	type?: string @go(Type)

	// FQDN - Fully qualified domain name of the record set.
	fqdn?: string @go(FQDN)

	// ProvisioningState -provisioning State of the record set.
	provisioningState?: string @go(ProvisioningState)
}

// ARecord an A record.
#ARecord: {
	// IPV4Address - The IPv4 address of this A record.
	// +optional
	ipV4Address?: null | string @go(IPV4Address,*string)
}

// AAAARecord an AAAA record.
#AAAARecord: {
	// IPV6Address - The IPv6 address of this AAAA record.
	// +optional
	ipV6Address?: null | string @go(IPV6Address,*string)
}

// CAARecord a CAA record.
#CAARecord: {
	// Flags - The flags for this CAA record as an integer between 0 and 255.
	// +optional
	flags?: null | int @go(Flags,*int)

	// Tag - The tag for this CAA record.
	// +optional
	tag?: null | string @go(Tag,*string)

	// Value - The value for this CAA record.
	// +optional
	value?: null | string @go(Value,*string)
}

// CNAMERecord a CNAME record.
#CNAMERecord: {
	// CNAME - The canonical name for this CNAME record.
	// +optional
	cname?: null | string @go(CNAME,*string)
}

// MXRecord an MX record.
#MXRecord: {
	// Preference - The preference value for this MX record.
	// +optional
	preference?: null | int @go(Preference,*int)

	// Exchange - The domain name of the mail host for this MX record.
	// +optional
	exchange?: null | string @go(Exchange,*string)
}

// NSRecord an NS record.
#NSRecord: {
	// NSDName - The name server name for this NS record.
	// +optional
	nsDName?: null | string @go(NSDName,*string)
}

// PTRRecord a PTR record.
#PTRRecord: {
	// PTRDName - The PTR target domain name for this PTR record.
	// +optional
	ptrDName?: null | string @go(PTRDName,*string)
}

// SOARecord an SOA record.
#SOARecord: {
	// Host - The domain name of the authoritative name server for this SOA record.
	// +optional
	host?: null | string @go(Host,*string)

	// Email - The email contact for this SOA record.
	// +optional
	email?: null | string @go(Email,*string)

	// SerialNumber - The serial number for this SOA record.
	// +optional
	serialNumber?: null | int @go(SerialNumber,*int)

	// RefreshTime - The refresh value for this SOA record.
	// +optional
	refreshTime?: null | int @go(RefreshTime,*int)

	// RetryTime - The retry time for this SOA record.
	// +optional
	retryTime?: null | int @go(RetryTime,*int)

	// ExpireTime - The expire time for this SOA record.
	// +optional
	expireTime?: null | int @go(ExpireTime,*int)

	// MinimumTTL - The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
	// +optional
	minimumTTL?: null | int @go(MinimumTTL,*int)
}

// SRVRecord an SRV record.
#SRVRecord: {
	// Priority - The priority value for this SRV record.
	// +optional
	priority?: null | int @go(Priority,*int)

	// Weight - The weight value for this SRV record.
	// +optional
	weight?: null | int @go(Weight,*int)

	// Port - The port value for this SRV record.
	// +optional
	port?: null | int @go(Port,*int)

	// Target - The target domain name for this SRV record.
	// +optional
	target?: null | string @go(Target,*string)
}

// TXTRecord a TXT record.
#TXTRecord: {
	// Value - The text value of this TXT record.
	// +optional
	value?: [...string] @go(Value,[]string)
}

// A RecordSetSpec defines the desired state of a RecordSet.
#RecordSetSpec: {
	forProvider: #RecordSetParameters @go(ForProvider)
}

// A RecordSetStatus represents the observed state of a RecordSet.
#RecordSetStatus: {
	atProvider?: #RecordSetObservation @go(AtProvider)
}

// A Zone is a managed resource that represents an Azure DNS Zone
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="VERSION",type="string",JSONPath=".spec.forProvider.version"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Zone: {
	spec:    #ZoneSpec   @go(Spec)
	status?: #ZoneStatus @go(Status)
}

// ZoneList contains a list of Zone.
#ZoneList: {
	items: [...#Zone] @go(Items,[]Zone)
}

// A RecordSet is a managed resource that represents an Azure DNS RecordSet
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="VERSION",type="string",JSONPath=".spec.forProvider.version"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#RecordSet: {
	spec:    #RecordSetSpec   @go(Spec)
	status?: #RecordSetStatus @go(Status)
}

// RecordSetList contains a list of RecordSet.
#RecordSetList: {
	items: [...#RecordSet] @go(Items,[]RecordSet)
}
