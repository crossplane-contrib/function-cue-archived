// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/cognitoidentityprovider/v1alpha1

package v1alpha1

// IdentityProviderParameters defines the desired state of IdentityProvider
#IdentityProviderParameters: {
	// Region is which region the IdentityProvider will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// A mapping of IdP attributes to standard and custom user pool attributes.
	attributeMapping?: {[string]: null | string} @go(AttributeMapping,map[string]*string)

	// A list of IdP identifiers.
	idpIdentifiers?: [...null | string] @go(IDpIdentifiers,[]*string)

	// The IdP type.
	// +kubebuilder:validation:Required
	providerType?: null | string @go(ProviderType,*string)

	#CustomIdentityProviderParameters
}

// IdentityProviderSpec defines the desired state of IdentityProvider
#IdentityProviderSpec: {
	forProvider: #IdentityProviderParameters @go(ForProvider)
}

// IdentityProviderObservation defines the observed state of IdentityProvider
#IdentityProviderObservation: {
	// The IdP name.
	providerName?: null | string @go(ProviderName,*string)

	// The user pool ID.
	userPoolID?: null | string @go(UserPoolID,*string)
}

// IdentityProviderStatus defines the observed state of IdentityProvider.
#IdentityProviderStatus: {
	atProvider?: #IdentityProviderObservation @go(AtProvider)
}

// IdentityProvider is the Schema for the IdentityProviders API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#IdentityProvider: {
	spec:    #IdentityProviderSpec   @go(Spec)
	status?: #IdentityProviderStatus @go(Status)
}

// IdentityProviderList contains a list of IdentityProviders
#IdentityProviderList: {
	items: [...#IdentityProvider] @go(Items,[]IdentityProvider)
}
