// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/cognitoidentityprovider/v1alpha1

package v1alpha1

// UserPoolParameters defines the desired state of UserPool
#UserPoolParameters: {
	// Region is which region the UserPool will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The available verified method a user can use to recover their password when
	// they call ForgotPassword. You can use this setting to define a preferred
	// method when a user has more than one method available. With this setting,
	// SMS doesn't qualify for a valid password recovery mechanism if the user also
	// has SMS multi-factor authentication (MFA) activated. In the absence of this
	// setting, Amazon Cognito uses the legacy behavior to determine the recovery
	// method where SMS is preferred through email.
	accountRecoverySetting?: null | #AccountRecoverySettingType @go(AccountRecoverySetting,*AccountRecoverySettingType)

	// The configuration for AdminCreateUser requests.
	adminCreateUserConfig?: null | #AdminCreateUserConfigType @go(AdminCreateUserConfig,*AdminCreateUserConfigType)

	// Attributes supported as an alias for this user pool. Possible values: phone_number,
	// email, or preferred_username.
	aliasAttributes?: [...null | string] @go(AliasAttributes,[]*string)

	// The attributes to be auto-verified. Possible values: email, phone_number.
	autoVerifiedAttributes?: [...null | string] @go(AutoVerifiedAttributes,[]*string)

	// When active, DeletionProtection prevents accidental deletion of your user
	// pool. Before you can delete a user pool that you have protected against deletion,
	// you must deactivate this feature.
	//
	// When you try to delete a protected user pool in a DeleteUserPool API request,
	// Amazon Cognito returns an InvalidParameterException error. To delete a protected
	// user pool, send a new DeleteUserPool request after you deactivate deletion
	// protection in an UpdateUserPool API request.
	deletionProtection?: null | string @go(DeletionProtection,*string)

	// The device-remembering configuration for a user pool. A null value indicates
	// that you have deactivated device remembering in your user pool.
	//
	// When you provide a value for any DeviceConfiguration field, you activate
	// the Amazon Cognito device-remembering feature.
	deviceConfiguration?: null | #DeviceConfigurationType @go(DeviceConfiguration,*DeviceConfigurationType)

	// The email configuration of your user pool. The email configuration type sets
	// your preferred sending method, Amazon Web Services Region, and sender for
	// messages from your user pool.
	emailConfiguration?: null | #EmailConfigurationType @go(EmailConfiguration,*EmailConfigurationType)

	// This parameter is no longer used. See VerificationMessageTemplateType (https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
	emailVerificationMessage?: null | string @go(EmailVerificationMessage,*string)

	// This parameter is no longer used. See VerificationMessageTemplateType (https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
	emailVerificationSubject?: null | string @go(EmailVerificationSubject,*string)

	// The Lambda trigger configuration information for the new user pool.
	//
	// In a push model, event sources (such as Amazon S3 and custom applications)
	// need permission to invoke a function. So you must make an extra call to add
	// permission for these event sources to invoke your Lambda function.
	//
	// For more information on using the Lambda API to add permission, see AddPermission
	// (https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html).
	//
	// For adding permission using the CLI, see add-permission (https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html).
	lambdaConfig?: null | #LambdaConfigType @go(LambdaConfig,*LambdaConfigType)

	// Specifies MFA configuration details.
	mfaConfiguration?: null | string @go(MFAConfiguration,*string)

	// The policies associated with the new user pool.
	policies?: null | #UserPoolPolicyType @go(Policies,*UserPoolPolicyType)

	// A string used to name the user pool.
	// +kubebuilder:validation:Required
	poolName?: null | string @go(PoolName,*string)

	// An array of schema attributes for the new user pool. These attributes can
	// be standard or custom attributes.
	schema?: [...null | #SchemaAttributeType] @go(Schema,[]*SchemaAttributeType)

	// A string representing the SMS authentication message.
	smsAuthenticationMessage?: null | string @go(SmsAuthenticationMessage,*string)

	// The SMS configuration with the settings that your Amazon Cognito user pool
	// must use to send an SMS message from your Amazon Web Services account through
	// Amazon Simple Notification Service. To send SMS messages with Amazon SNS
	// in the Amazon Web Services Region that you want, the Amazon Cognito user
	// pool uses an Identity and Access Management (IAM) role in your Amazon Web
	// Services account.
	smsConfiguration?: null | #SmsConfigurationType @go(SmsConfiguration,*SmsConfigurationType)

	// This parameter is no longer used. See VerificationMessageTemplateType (https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
	smsVerificationMessage?: null | string @go(SmsVerificationMessage,*string)

	// The software token MFA configuration.
	softwareTokenMFAConfiguration?: null | #SoftwareTokenMFAConfigType @go(SoftwareTokenMFAConfiguration,*SoftwareTokenMFAConfigType)

	// The settings for updates to user attributes. These settings include the property
	// AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells
	// Amazon Cognito how to handle changes to the value of your users' email address
	// and phone number attributes. For more information, see Verifying updates
	// to email addresses and phone numbers (https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
	userAttributeUpdateSettings?: null | #UserAttributeUpdateSettingsType @go(UserAttributeUpdateSettings,*UserAttributeUpdateSettingsType)

	// User pool add-ons. Contains settings for activation of advanced security
	// features. To log user security information but take no action, set to AUDIT.
	// To configure automatic security responses to risky traffic to your user pool,
	// set to ENFORCED.
	//
	// For more information, see Adding advanced security to a user pool (https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html).
	userPoolAddOns?: null | #UserPoolAddOnsType @go(UserPoolAddOns,*UserPoolAddOnsType)

	// The tag keys and values to assign to the user pool. A tag is a label that
	// you can use to categorize and manage user pools in different ways, such as
	// by purpose, owner, environment, or other criteria.
	userPoolTags?: {[string]: null | string} @go(UserPoolTags,map[string]*string)

	// Specifies whether a user can use an email address or phone number as a username
	// when they sign up.
	usernameAttributes?: [...null | string] @go(UsernameAttributes,[]*string)

	// Case sensitivity on the username input for the selected sign-in option. When
	// case sensitivity is set to False (case insensitive), users can sign in with
	// any combination of capital and lowercase letters. For example, username,
	// USERNAME, or UserName, or for email, email@example.com or EMaiL@eXamplE.Com.
	// For most use cases, set case sensitivity to False (case insensitive) as a
	// best practice. When usernames and email addresses are case insensitive, Amazon
	// Cognito treats any variation in case as the same user, and prevents a case
	// variation from being assigned to the same attribute for a different user.
	//
	// This configuration is immutable after you set it. For more information, see
	// UsernameConfigurationType (https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html).
	usernameConfiguration?: null | #UsernameConfigurationType @go(UsernameConfiguration,*UsernameConfigurationType)

	// The template for the verification message that the user sees when the app
	// requests permission to access the user's information.
	verificationMessageTemplate?: null | #VerificationMessageTemplateType @go(VerificationMessageTemplate,*VerificationMessageTemplateType)

	#CustomUserPoolParameters
}

// UserPoolSpec defines the desired state of UserPool
#UserPoolSpec: {
	forProvider: #UserPoolParameters @go(ForProvider)
}

// UserPoolObservation defines the observed state of UserPool
#UserPoolObservation: {
	// The Amazon Resource Name (ARN) for the user pool.
	arn?: null | string @go(ARN,*string)

	// A custom domain name that you provide to Amazon Cognito. This parameter applies
	// only if you use a custom domain to host the sign-up and sign-in pages for
	// your application. An example of a custom domain name might be auth.example.com.
	//
	// For more information about adding a custom domain to your user pool, see
	// Using Your Own Domain for the Hosted UI (https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html).
	customDomain?: null | string @go(CustomDomain,*string)

	// The domain prefix, if the user pool has a domain associated with it.
	domain?: null | string @go(Domain,*string)

	// Deprecated. Review error codes from API requests with EventSource:cognito-idp.amazonaws.com
	// in CloudTrail for information about problems with user pool email configuration.
	emailConfigurationFailure?: null | string @go(EmailConfigurationFailure,*string)

	// A number estimating the size of the user pool.
	estimatedNumberOfUsers?: null | int64 @go(EstimatedNumberOfUsers,*int64)

	// The ID of the user pool.
	id?: null | string @go(ID,*string)

	// The name of the user pool.
	name?: null | string @go(Name,*string)

	// A list of the user attributes and their properties in your user pool. The
	// attribute schema contains standard attributes, custom attributes with a custom:
	// prefix, and developer attributes with a dev: prefix. For more information,
	// see User pool attributes (https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html).
	//
	// Developer-only attributes are a legacy feature of user pools, are read-only
	// to all app clients. You can create and update developer-only attributes only
	// with IAM-authenticated API operations. Use app client read/write permissions
	// instead.
	schemaAttributes?: [...null | #SchemaAttributeType] @go(SchemaAttributes,[]*SchemaAttributeType)

	// The reason why the SMS configuration can't send the messages to your users.
	//
	// This message might include comma-separated values to describe why your SMS
	// configuration can't send messages to user pool end users.
	//
	// InvalidSmsRoleAccessPolicyException
	//
	// The Identity and Access Management role that Amazon Cognito uses to send
	// SMS messages isn't properly configured. For more information, see SmsConfigurationType
	// (https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html).
	//
	// SNSSandbox
	//
	// The Amazon Web Services account is in the SNS SMS Sandbox and messages will
	// only reach verified end users. This parameter won’t get populated with
	// SNSSandbox if the user creating the user pool doesn’t have SNS permissions.
	// To learn how to move your Amazon Web Services account out of the sandbox,
	// see Moving out of the SMS sandbox (https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html).
	smsConfigurationFailure?: null | string @go(SmsConfigurationFailure,*string)

	// The status of a user pool.
	status?: null | string @go(Status,*string)
}

// UserPoolStatus defines the observed state of UserPool.
#UserPoolStatus: {
	atProvider?: #UserPoolObservation @go(AtProvider)
}

// UserPool is the Schema for the UserPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#UserPool: {
	spec:    #UserPoolSpec   @go(Spec)
	status?: #UserPoolStatus @go(Status)
}

// UserPoolList contains a list of UserPools
#UserPoolList: {
	items: [...#UserPool] @go(Items,[]UserPool)
}
