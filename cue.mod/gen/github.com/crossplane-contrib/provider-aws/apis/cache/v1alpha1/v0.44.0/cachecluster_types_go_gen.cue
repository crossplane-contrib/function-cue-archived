// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/cache/v1alpha1

package v1alpha1

#StatusCreating:            "creating"
#StatusAvailable:           "available"
#StatusModifying:           "modifying"
#StatusDeleted:             "deleted"
#StatusDeleting:            "deleting"
#StatusCreateFailed:        "create-failed"
#StatusIncompatibleNetwork: "incompatible-network"
#StatusSnapshotting:        "snapshotting"
#StatusRebooting:           "rebooting cluster nodes"
#StatusRestoreFail:         "restore-failed"

// A Tag is used to tag the ElastiCache resources in AWS.
#Tag: {
	// Key for the tag.
	key: string @go(Key)

	// Value of the tag.
	// +optional
	value?: null | string @go(Value,*string)
}

// CacheNode represents a node in the cluster
#CacheNode: {
	// The cache node identifier.
	cacheNodeId?: string @go(CacheNodeID)

	// The current state of this cache node, one of the following values:  available, creating,
	// deleted, deleting, incompatible-network, modifying, rebooting cluster nodes, restore-failed, or snapshotting.
	cacheNodeStatus?: string @go(CacheNodeStatus)

	// The Availability Zone where this node was created and now resides.
	customerAvailabilityZone?: string @go(CustomerAvailabilityZone)

	// The hostname for connecting to this cache node.
	endpoint?: null | #Endpoint @go(Endpoint,*Endpoint)

	// The status of the parameter group applied to this cache node.
	parameterGroupStatus?: string @go(ParameterGroupStatus)

	// The ID of the primary node to which this read replica node is synchronized.
	sourceCacheNodeId?: null | string @go(SourceCacheNodeID,*string)
}

// CacheParameterGroupStatus represent status of CacheParameterGroup
#CacheParameterGroupStatus: {
	// A list of the cache node IDs which need to be rebooted for parameter changes
	// to be applied.
	cacheNodeIdsToReboot?: [...string] @go(CacheNodeIDsToReboot,[]string)

	// The name of the cache parameter group.
	cacheParameterGroupName?: string @go(CacheParameterGroupName)

	// The status of parameter updates.
	parameterApplyStatus?: string @go(ParameterApplyStatus)
}

// Endpoint represents the information required for client programs to connect
// to a cache node.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/elasticache-2015-02-02/Endpoint
#Endpoint: {
	// Address is the DNS hostname of the cache node.
	address?: string @go(Address)

	// Port number that the cache engine is listening on.
	port?: int @go(Port)
}

// NotificationConfiguration represents configuration of a SNS topic
// used to publish Cluster events
#NotificationConfiguration: {
	// The Amazon Resource Name (ARN) that identifies the topic.
	topicArn?: string @go(TopicARN)

	// The current state of the topic.
	topicStatus?: null | string @go(TopicStatus,*string)
}

// PendingModifiedValues lists values that are applied to cluster in future
#PendingModifiedValues: {
	// The auth token status
	authTokenStatus?: string @go(AuthTokenStatus)

	// A list of cache node IDs that are being removed (or will be removed) from
	// the cluster.
	cacheNodeIdsToRemove?: [...string] @go(CacheNodeIDsToRemove,[]string)

	// The cache node type that this cluster or replication group is scaled to.
	cacheNodeType?: string @go(CacheNodeType)

	// The new cache engine version that the cluster runs.
	engineVersion?: null | string @go(EngineVersion,*string)

	// The new number of cache nodes for the cluster.
	numCacheNodes?: null | int64 @go(NumCacheNodes,*int64)
}

// CacheClusterObservation contains the observation of the status of
// the given Cache Cluster.
#CacheClusterObservation: {
	// A flag that enables encryption at-rest when set to true.
	// Default: false
	atRestEncryptionEnabled?: bool @go(AtRestEncryptionEnabled)

	// A flag that enables using an AuthToken (password) when issuing Redis commands.
	// Default: false
	authTokenEnabled?: bool @go(AuthTokenEnabled)

	// The current state of this cluster.
	cacheClusterStatus?: string @go(CacheClusterStatus)

	// A list of cache nodes that are members of the cluster.
	cacheNodes?: [...#CacheNode] @go(CacheNodes,[]CacheNode)

	// Status of the cache parameter group.
	cacheParameterGroup?: #CacheParameterGroupStatus @go(CacheParameterGroup)

	// The URL of the web page where you can download the latest ElastiCache client
	// library.
	clientDownloadLandingPage?: string @go(ClientDownloadLandingPage)

	// Represents a Memcached cluster endpoint which, if Automatic Discovery is
	// enabled on the cluster, can be used by an application to connect to any node
	// in the cluster. The configuration endpoint will always have .cfg in it.
	configurationEndpoint?: #Endpoint @go(ConfigurationEndpoint)

	// Describes a notification topic and its status. Notification topics are used
	// for publishing ElastiCache events to subscribers using Amazon Simple Notification
	// Service (SNS).
	notificationConfiguration?: #NotificationConfiguration @go(NotificationConfiguration)

	// A group of settings that are applied to the cluster in the future, or that
	// are currently being applied.
	pendingModifiedValues?: #PendingModifiedValues @go(PendingModifiedValues)

	// A flag that enables in-transit encryption when set to true.
	transitEncryptionEnabled?: bool @go(TransitEncryptionEnabled)
}

// CacheClusterParameters define the desired state of an AWS ElastiCache
// Cache Cluster. Most fields map directly to an AWS ReplicationGroup:
// https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateReplicationGroup.html#API_CreateReplicationGroup_RequestParameters
#CacheClusterParameters: {
	// Region is the region you'd like your CacheSubnetGroup to be created in.
	region: string @go(Region)

	// If true, this parameter causes the modifications in this request and any
	// pending modifications to be applied, asynchronously and as soon as possible,
	// regardless of the PreferredMaintenanceWindow setting for the cluster.
	// If false, changes to the cluster are applied on the next maintenance reboot,
	// or the next failure reboot, whichever occurs first.
	// +optional
	applyImmediately?: null | bool @go(ApplyImmediately,*bool)

	// Specifies whether the nodes in this Memcached cluster are created in a single
	// Availability Zone or created across multiple Availability Zones in the cluster's
	// region.
	// This parameter is only supported for Memcached clusters.
	// +optional
	azMode?: null | string @go(AZMode,*string)

	// The password used to access a password protected server.
	// +optional
	authToken?: null | string @go(AuthToken,*string)

	// Specifies the strategy to use to update the AUTH token. This parameter must
	// be specified with the auth-token parameter. Possible values:
	// +optional
	authTokenUpdateStrategy?: null | string @go(AuthTokenUpdateStrategy,*string)

	// A list of cache node IDs to be removed.
	// +optional
	cacheNodeIdsToRemove?: [...string] @go(CacheNodeIDsToRemove,[]string)

	// The compute and memory capacity of the nodes in the node group (shard).
	cacheNodeType: string @go(CacheNodeType)

	// The name of the parameter group to associate with this cluster. If this argument
	// is omitted, the default parameter group for the specified engine is used.
	// +optional
	cacheParameterGroupName?: null | string @go(CacheParameterGroupName,*string)

	// A list of security group names to associate with this cluster.
	// +optional
	cacheSecurityGroupNames?: [...string] @go(CacheSecurityGroupNames,[]string)

	// The name of the subnet group to be used for the cluster.
	// +optional
	// +crossplane:generate:reference:type=CacheSubnetGroup
	cacheSubnetGroupName?: null | string @go(CacheSubnetGroupName,*string)

	// The name of the cache engine to be used for this cluster.
	// +optional
	// +immutable
	engine?: null | string @go(Engine,*string)

	// The version number of the cache engine to be used for this cluster.
	// +optional
	engineVersion?: null | string @go(EngineVersion,*string)

	// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service
	// (SNS) topic to which notifications are sent.
	// +optional
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-aws/apis/sns/v1beta1.SNSTopicARN()
	notificationTopicArn?: null | string @go(NotificationTopicARN,*string)

	// The initial number of cache nodes that the cluster has.
	numCacheNodes: int32 @go(NumCacheNodes)

	// The port number on which each of the cache nodes accepts connections.
	// +optional
	// +immutable
	port?: null | int32 @go(Port,*int32)

	// The EC2 Availability Zone in which the cluster is created.
	// Default: System chosen Availability Zone.
	// +optional
	preferredAvailabilityZone?: null | string @go(PreferredAvailabilityZone,*string)

	// A list of the Availability Zones in which cache nodes are created.
	// +optional
	preferredAvailabilityZones?: [...string] @go(PreferredAvailabilityZones,[]string)

	// Specifies the weekly time range during which maintenance on the cluster is
	// performed.
	// +optional
	preferredMaintenanceWindow?: null | string @go(PreferredMaintenanceWindow,*string)

	// The ID of the replication group to which this cluster should belong.
	// +optional
	// +immutable
	replicationGroupId?: null | string @go(ReplicationGroupID,*string)

	// One or more VPC security groups associated with the cluster.
	// +optional
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=SecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIDSelector
	securityGroupIds?: [...string] @go(SecurityGroupIDs,[]string)

	// A single-element string list containing an Amazon Resource Name (ARN) that
	// uniquely identifies a Redis RDB snapshot file stored in Amazon S3.
	// +optional
	// +immutable
	snapshotArns?: [...string] @go(SnapshotARNs,[]string)

	// The name of a Redis snapshot from which to restore data into the new node
	// group (shard).
	// +optional
	// +immutable
	snapshotName?: null | string @go(SnapshotName,*string)

	// The number of days for which ElastiCache retains automatic snapshots before
	// deleting them.
	// +optional
	snapshotRetentionLimit?: null | int32 @go(SnapshotRetentionLimit,*int32)

	// The daily time range (in UTC) during which ElastiCache begins taking a daily
	// snapshot of your node group (shard).
	// +optional
	snapshotWindow?: null | string @go(SnapshotWindow,*string)

	// A list of cost allocation tags to be added to this resource.
	// +optional
	// +immutable
	tags?: [...#Tag] @go(Tags,[]Tag)
}

// A CacheClusterSpec defines the desired state of a CacheCluster.
#CacheClusterSpec: {
	forProvider: #CacheClusterParameters @go(ForProvider)
}

// A CacheClusterStatus defines the observed state of a CacheCluster.
#CacheClusterStatus: {
	atProvider?: #CacheClusterObservation @go(AtProvider)
}

// A CacheCluster is a managed resource that represents an AWS ElastiCache
// Cache Cluster.
// +kubebuilder:printcolumn:name="STATUS",type="string",JSONPath=".status.atProvider.cacheClusterStatus"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#CacheCluster: {
	spec:    #CacheClusterSpec   @go(Spec)
	status?: #CacheClusterStatus @go(Status)
}

// CacheClusterList contains a list of ReplicationGroup
#CacheClusterList: {
	items: [...#CacheCluster] @go(Items,[]CacheCluster)
}
