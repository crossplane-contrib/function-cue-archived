// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/acm/v1beta1

package v1beta1

// Tag represents user-provided metadata that can be associated
#Tag: {
	// The key name that can be used to look up or retrieve the associated value.
	key: string @go(Key)

	// The value associated with this tag.
	value: string @go(Value)
}

// DomainValidationOption validate domain ownership.
#DomainValidationOption: {
	// Additional Fully qualified domain name (FQDN), that to secure with an ACM certificate.
	// +immutable
	domainName: string @go(DomainName)

	// Method to validate certificate
	// +immutable
	validationDomain: string @go(ValidationDomain)
}

// CertificateSpec defines the desired state of Certificate
#CertificateSpec: {
	forProvider: #CertificateParameters @go(ForProvider)
}

// CertificateExternalStatus keeps the state of external resource
#CertificateExternalStatus: {
	// String that contains the ARN of the issued certificate. This must be of the
	certificateARN?: string @go(CertificateARN)

	// Flag to check eligibility for renewal status
	// +kubebuilder:validation:Enum=ELIGIBLE;INELIGIBLE
	renewalEligibility?: string @go(RenewalEligibility)

	// Status of the certificate
	// +kubebuilder:validation:Enum=PENDING_VALIDATION;ISSUED;INACTIVE;EXPIRED;VALIDATION_TIMED_OUT;REVOKED;FAILED
	status?: string @go(Status)

	// Type of the certificate
	// +kubebuilder:validation:Enum=IMPORTED;AMAZON_ISSUED;PRIVATE
	type?: string @go(Type)

	// Contains the CNAME record that you add to your DNS database for domain
	// validation. For more information, see Use DNS to Validate Domain Ownership
	// (https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html).
	// Note: The CNAME information that you need does not include the name of your
	// domain. If you include your domain name in the DNS database CNAME record,
	// validation fails. For example, if the name is
	// "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only
	// "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.
	resourceRecord?: null | #ResourceRecord @go(ResourceRecord,*ResourceRecord)
}

// An CertificateStatus represents the observed state of an Certificate manager.
#CertificateStatus: {
	atProvider?: #CertificateExternalStatus @go(AtProvider)
}

// ResourceRecord Contains a DNS record value that you can use to validate ownership or control of a domain.
#ResourceRecord: {
	// The name of the DNS record to create in your domain. This is supplied by ACM.
	name?: null | string @go(Name,*string)

	// The type of DNS record. Currently this can be CNAME.
	// +kubebuilder:validation:Enum=CNAME
	type?: null | string @go(Type,*string)

	// The value of the CNAME record to add to your DNS database.
	value?: null | string @go(Value,*string)
}

// CertificateParameters defines the desired state of an AWS Certificate.
#CertificateParameters: {
	// Region is the region you'd like your Certificate to be created in.
	region: string @go(Region)

	// The Amazon Resource Name (ARN) of the private certificate authority (CA)that will be used to issue the certificate.
	// +optional
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/acmpca/v1beta1.CertificateAuthority
	certificateAuthorityARN?: null | string @go(CertificateAuthorityARN,*string)

	// Fully qualified domain name (FQDN),that to secure with an ACM certificate.
	// +immutable
	domainName: string @go(DomainName)

	// The domain name that you want ACM to use to send you emails so that you can
	// validate domain ownership.
	// +optional
	// +immutable
	domainValidationOptions?: [...null | #DomainValidationOption] @go(DomainValidationOptions,[]*DomainValidationOption)

	// Specifies the algorithm of the public and private key pair that your certificate
	// uses to encrypt data. RSA is the default key algorithm for ACM certificates.
	// Elliptic Curve Digital Signature Algorithm (ECDSA) keys are smaller, offering
	// security comparable to RSA keys but with greater computing efficiency. However,
	// ECDSA is not supported by all network clients. Some AWS services may require RSA
	// keys, or only support ECDSA keys of a particular size, while others allow the
	// use of either RSA and ECDSA keys to ensure that compatibility is not broken.
	// Check the requirements for the AWS service where you plan to deploy your
	// certificate.
	// Default: RSA_2048
	// Note: ACM can request the issue of new certificates using the following algorithms:
	// "RSA_2048", "EC_prime256v1" and "EC_secp384r1".
	// The remaining algorithms are supported only for imported certificates.
	// See also AWS docs: https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms.title
	// +optional
	// +immutable
	keyAlgorithm?: null | string @go(KeyAlgorithm,*string)

	// Currently, you can use this parameter to specify whether to add the certificate
	// to a certificate transparency log. Certificate transparency makes it possible to
	// detect SSL/TLS certificates that have been mistakenly or maliciously issued.
	// Certificates that have not been logged typically produce an error message in a
	// browser. For more information, see Opting Out of Certificate Transparency
	// Logging
	// (https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-transparency).
	options?: null | #CertificateOptions @go(Options,*CertificateOptions)

	// Subject Alternative Name extension of the ACM certificate.
	// +optional
	// +immutable
	subjectAlternativeNames?: [...null | string] @go(SubjectAlternativeNames,[]*string)

	// One or more resource tags to associate with the certificate.
	tags: [...#Tag] @go(Tags,[]Tag)

	// Method to validate certificate.
	// +optional
	// +kubebuilder:validation:Enum=DNS;EMAIL
	validationMethod?: string @go(ValidationMethod)
}

// CertificateOptions contains options for your certificate. Currently, you can use
// this only to specify whether to opt in to or out of certificate transparency
// logging. Some browsers require that public certificates issued for your domain
// be recorded in a log. Certificates that are not logged typically generate a
// browser error. Transparency makes it possible for you to detect SSL/TLS
// certificates that have been mistakenly or maliciously issued for your domain.
// For general information, see Certificate Transparency Logging
// (https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency).
#CertificateOptions: {
	// You can opt out of certificate transparency logging by specifying the DISABLED
	// option. Opt in by specifying ENABLED.
	// +kubebuilder:validation:Enum=ENABLED;DISABLED
	certificateTransparencyLoggingPreference: string @go(CertificateTransparencyLoggingPreference)
}

// Certificate is a managed resource that represents an AWS Certificate Manager.
// +kubebuilder:printcolumn:name="DOMAINNAME",type="string",JSONPath=".spec.forProvider.domainName"
// +kubebuilder:printcolumn:name="STATUS",type="string",JSONPath=".status.atProvider.status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Certificate: {
	spec:    #CertificateSpec   @go(Spec)
	status?: #CertificateStatus @go(Status)
}

// CertificateList contains a list of Certificate
#CertificateList: {
	items: [...#Certificate] @go(Items,[]Certificate)
}
