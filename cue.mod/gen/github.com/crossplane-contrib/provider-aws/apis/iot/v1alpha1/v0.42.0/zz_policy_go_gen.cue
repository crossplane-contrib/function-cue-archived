// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/iot/v1alpha1

package v1alpha1

// PolicyParameters defines the desired state of Policy
#PolicyParameters: {
	// Region is which region the Policy will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The JSON document that describes the policy. policyDocument must have a minimum
	// length of 1, with a maximum length of 2048, excluding whitespace.
	// +kubebuilder:validation:Required
	policyDocument?: null | string @go(PolicyDocument,*string)

	// Metadata which can be used to manage the policy.
	//
	// For URI Request parameters use format: ...key1=value1&key2=value2...
	//
	// For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..."
	//
	// For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	#CustomPolicyParameters
}

// PolicySpec defines the desired state of Policy
#PolicySpec: {
	forProvider: #PolicyParameters @go(ForProvider)
}

// PolicyObservation defines the observed state of Policy
#PolicyObservation: {
	// The policy ARN.
	policyARN?: null | string @go(PolicyARN,*string)

	// The policy version ID.
	policyVersionID?: null | string @go(PolicyVersionID,*string)
}

// PolicyStatus defines the observed state of Policy.
#PolicyStatus: {
	atProvider?: #PolicyObservation @go(AtProvider)
}

// Policy is the Schema for the Policies API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Policy: {
	spec:    #PolicySpec   @go(Spec)
	status?: #PolicyStatus @go(Status)
}

// PolicyList contains a list of Policies
#PolicyList: {
	items: [...#Policy] @go(Items,[]Policy)
}
