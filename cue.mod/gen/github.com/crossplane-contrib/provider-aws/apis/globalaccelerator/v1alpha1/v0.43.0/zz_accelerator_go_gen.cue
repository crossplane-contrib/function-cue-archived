// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/globalaccelerator/v1alpha1

package v1alpha1

// AcceleratorParameters defines the desired state of Accelerator
#AcceleratorParameters: {
	// Region is which region the Accelerator will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// Indicates whether an accelerator is enabled. The value is true or false.
	// The default value is true.
	//
	// If the value is set to true, an accelerator cannot be deleted. If set to
	// false, the accelerator can be deleted.
	enabled?: null | bool @go(Enabled,*bool)

	// The IP address type that an accelerator supports. For a standard accelerator,
	// the value can be IPV4 or DUAL_STACK.
	ipAddressType?: null | string @go(IPAddressType,*string)

	// Optionally, if you've added your own IP address pool to Global Accelerator
	// (BYOIP), you can choose an IPv4 address from your own pool to use for the
	// accelerator's static IPv4 address when you create an accelerator.
	//
	// After you bring an address range to Amazon Web Services, it appears in your
	// account as an address pool. When you create an accelerator, you can assign
	// one IPv4 address from your range to it. Global Accelerator assigns you a
	// second static IPv4 address from an Amazon IP address range. If you bring
	// two IPv4 address ranges to Amazon Web Services, you can assign one IPv4 address
	// from each range to your accelerator. This restriction is because Global Accelerator
	// assigns each address range to a different network zone, for high availability.
	//
	// You can specify one or two addresses, separated by a space. Do not include
	// the /32 suffix.
	//
	// Note that you can't update IP addresses for an existing accelerator. To change
	// them, you must create a new accelerator with the new addresses.
	//
	// For more information, see Bring your own IP addresses (BYOIP) (https://docs.aws.amazon.com/global-accelerator/latest/dg/using-byoip.html)
	// in the Global Accelerator Developer Guide.
	ipAddresses?: [...null | string] @go(IPAddresses,[]*string)

	// The name of the accelerator. The name can have a maximum of 64 characters,
	// must contain only alphanumeric characters, periods (.), or hyphens (-), and
	// must not begin or end with a hyphen or period.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Create tags for an accelerator.
	//
	// For more information, see Tagging in Global Accelerator (https://docs.aws.amazon.com/global-accelerator/latest/dg/tagging-in-global-accelerator.html)
	// in the Global Accelerator Developer Guide.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	#CustomAcceleratorParameters
}

// AcceleratorSpec defines the desired state of Accelerator
#AcceleratorSpec: {
	forProvider: #AcceleratorParameters @go(ForProvider)
}

// AcceleratorObservation defines the observed state of Accelerator
#AcceleratorObservation: {
	// The Amazon Resource Name (ARN) of the accelerator.
	acceleratorARN?: null | string @go(AcceleratorARN,*string)

	// The Domain Name System (DNS) name that Global Accelerator creates that points
	// to an accelerator's static IPv4 addresses.
	//
	// The naming convention for the DNS name for an accelerator is the following:
	// A lowercase letter a, followed by a 16-bit random hex string, followed by
	// .awsglobalaccelerator.com. For example: a1234567890abcdef.awsglobalaccelerator.com.
	//
	// If you have a dual-stack accelerator, you also have a second DNS name, DualStackDnsName,
	// that points to both the A record and the AAAA record for all four static
	// addresses for the accelerator: two IPv4 addresses and two IPv6 addresses.
	//
	// For more information about the default DNS name, see Support for DNS addressing
	// in Global Accelerator (https://docs.aws.amazon.com/global-accelerator/latest/dg/dns-addressing-custom-domains.dns-addressing.html)
	// in the Global Accelerator Developer Guide.
	dnsName?: null | string @go(DNSName,*string)

	// The Domain Name System (DNS) name that Global Accelerator creates that points
	// to a dual-stack accelerator's four static IP addresses: two IPv4 addresses
	// and two IPv6 addresses.
	//
	// The naming convention for the dual-stack DNS name is the following: A lowercase
	// letter a, followed by a 16-bit random hex string, followed by .dualstack.awsglobalaccelerator.com.
	// For example: a1234567890abcdef.dualstack.awsglobalaccelerator.com.
	//
	// Note: Global Accelerator also assigns a default DNS name, DnsName, to your
	// accelerator that points just to the static IPv4 addresses.
	//
	// For more information, see Support for DNS addressing in Global Accelerator
	// (https://docs.aws.amazon.com/global-accelerator/latest/dg/about-accelerators.html#about-accelerators.dns-addressing)
	// in the Global Accelerator Developer Guide.
	dualStackDNSName?: null | string @go(DualStackDNSName,*string)

	// A history of changes that you make to an accelerator in Global Accelerator.
	events?: [...null | #AcceleratorEvent] @go(Events,[]*AcceleratorEvent)

	// The static IP addresses that Global Accelerator associates with the accelerator.
	ipSets?: [...null | #IPSet] @go(IPSets,[]*IPSet)

	// Describes the deployment status of the accelerator.
	status?: null | string @go(Status,*string)
}

// AcceleratorStatus defines the observed state of Accelerator.
#AcceleratorStatus: {
	atProvider?: #AcceleratorObservation @go(AtProvider)
}

// Accelerator is the Schema for the Accelerators API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Accelerator: {
	spec:    #AcceleratorSpec   @go(Spec)
	status?: #AcceleratorStatus @go(Status)
}

// AcceleratorList contains a list of Accelerators
#AcceleratorList: {
	items: [...#Accelerator] @go(Items,[]Accelerator)
}
