// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/elbv2/v1alpha1

package v1alpha1

// +kubebuilder:skipversion
#Action: {
	// Request parameters to use when integrating with Amazon Cognito to authenticate
	// users.
	authenticateCognitoConfig?: null | #AuthenticateCognitoActionConfig @go(AuthenticateCognitoConfig,*AuthenticateCognitoActionConfig)

	// Request parameters when using an identity provider (IdP) that is compliant
	// with OpenID Connect (OIDC) to authenticate users.
	authenticateOIDCConfig?: null | #AuthenticateOIDCActionConfig @go(AuthenticateOIDCConfig,*AuthenticateOIDCActionConfig)

	// Information about an action that returns a custom HTTP response.
	fixedResponseConfig?: null | #FixedResponseActionConfig @go(FixedResponseConfig,*FixedResponseActionConfig)

	// Information about a forward action.
	forwardConfig?: null | #ForwardActionConfig @go(ForwardConfig,*ForwardActionConfig)
	order?:         null | int64                @go(Order,*int64)

	// Information about a redirect action.
	//
	// A URI consists of the following components: protocol://hostname:port/path?query.
	// You must modify at least one of the following components to avoid a redirect
	// loop: protocol, hostname, port, or path. Any components that you do not modify
	// retain their original values.
	//
	// You can reuse URI components using the following reserved keywords:
	//
	//    * #{protocol}
	//
	//    * #{host}
	//
	//    * #{port}
	//
	//    * #{path} (the leading "/" is removed)
	//
	//    * #{query}
	//
	// For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}",
	// or the query to "#{query}&value=xyz".
	redirectConfig?: null | #RedirectActionConfig @go(RedirectConfig,*RedirectActionConfig)
	targetGroupARN?: null | string                @go(TargetGroupARN,*string)
	type_?:          null | string                @go(Type,*string)
}

// +kubebuilder:skipversion
#AuthenticateCognitoActionConfig: {
	authenticationRequestExtraParams?: {[string]: null | string} @go(AuthenticationRequestExtraParams,map[string]*string)
	onUnauthenticatedRequest?: null | string @go(OnUnauthenticatedRequest,*string)
	scope?:                    null | string @go(Scope,*string)
	sessionCookieName?:        null | string @go(SessionCookieName,*string)
	sessionTimeout?:           null | int64  @go(SessionTimeout,*int64)
	userPoolARN?:              null | string @go(UserPoolARN,*string)
	userPoolClientID?:         null | string @go(UserPoolClientID,*string)
	userPoolDomain?:           null | string @go(UserPoolDomain,*string)
}

// +kubebuilder:skipversion
#AuthenticateOIDCActionConfig: {
	authenticationRequestExtraParams?: {[string]: null | string} @go(AuthenticationRequestExtraParams,map[string]*string)
	authorizationEndpoint?:    null | string @go(AuthorizationEndpoint,*string)
	clientID?:                 null | string @go(ClientID,*string)
	clientSecret?:             null | string @go(ClientSecret,*string)
	issuer?:                   null | string @go(Issuer,*string)
	onUnauthenticatedRequest?: null | string @go(OnUnauthenticatedRequest,*string)
	scope?:                    null | string @go(Scope,*string)
	sessionCookieName?:        null | string @go(SessionCookieName,*string)
	sessionTimeout?:           null | int64  @go(SessionTimeout,*int64)
	tokenEndpoint?:            null | string @go(TokenEndpoint,*string)
	useExistingClientSecret?:  null | bool   @go(UseExistingClientSecret,*bool)
	userInfoEndpoint?:         null | string @go(UserInfoEndpoint,*string)
}

// +kubebuilder:skipversion
#AvailabilityZone: {
	loadBalancerAddresses?: [...null | #LoadBalancerAddress] @go(LoadBalancerAddresses,[]*LoadBalancerAddress)
	outpostID?: null | string @go(OutpostID,*string)
	subnetID?:  null | string @go(SubnetID,*string)
	zoneName?:  null | string @go(ZoneName,*string)
}

// +kubebuilder:skipversion
#Certificate: {
	certificateARN?: null | string @go(CertificateARN,*string)
	isDefault?:      null | bool   @go(IsDefault,*bool)
}

// +kubebuilder:skipversion
#FixedResponseActionConfig: {
	contentType?: null | string @go(ContentType,*string)
	messageBody?: null | string @go(MessageBody,*string)
	statusCode?:  null | string @go(StatusCode,*string)
}

// +kubebuilder:skipversion
#ForwardActionConfig: {
	// Information about the target group stickiness for a rule.
	targetGroupStickinessConfig?: null | #TargetGroupStickinessConfig @go(TargetGroupStickinessConfig,*TargetGroupStickinessConfig)
	targetGroups?: [...null | #TargetGroupTuple] @go(TargetGroups,[]*TargetGroupTuple)
}

// +kubebuilder:skipversion
#Listener_SDK: {
	alpnPolicy?: [...null | string] @go(AlpnPolicy,[]*string)
	certificates?: [...null | #Certificate] @go(Certificates,[]*Certificate)
	defaultActions?: [...null | #Action] @go(DefaultActions,[]*Action)
	listenerARN?:     null | string @go(ListenerARN,*string)
	loadBalancerARN?: null | string @go(LoadBalancerARN,*string)
	port?:            null | int64  @go(Port,*int64)
	protocol?:        null | string @go(Protocol,*string)
	sslPolicy?:       null | string @go(SSLPolicy,*string)
}

// +kubebuilder:skipversion
#LoadBalancerAddress: {
	allocationID?:       null | string @go(AllocationID,*string)
	iPv6Address?:        null | string @go(IPv6Address,*string)
	ipAddress?:          null | string @go(IPAddress,*string)
	privateIPv4Address?: null | string @go(PrivateIPv4Address,*string)
}

// +kubebuilder:skipversion
#LoadBalancerState: {
	code?:   null | string @go(Code,*string)
	reason?: null | string @go(Reason,*string)
}

// +kubebuilder:skipversion
#LoadBalancer_SDK: {
	availabilityZones?: [...null | #AvailabilityZone] @go(AvailabilityZones,[]*AvailabilityZone)
	canonicalHostedZoneID?: null | string @go(CanonicalHostedZoneID,*string)
	customerOwnedIPv4Pool?: null | string @go(CustomerOwnedIPv4Pool,*string)
	dnsName?:               null | string @go(DNSName,*string)
	ipAddressType?:         null | string @go(IPAddressType,*string)
	loadBalancerARN?:       null | string @go(LoadBalancerARN,*string)
	loadBalancerName?:      null | string @go(LoadBalancerName,*string)
	scheme?:                null | string @go(Scheme,*string)
	securityGroups?: [...null | string] @go(SecurityGroups,[]*string)

	// Information about the state of the load balancer.
	state?: null | #LoadBalancerState @go(State,*LoadBalancerState)
	type_?: null | string             @go(Type,*string)
	vpcID?: null | string             @go(VPCID,*string)
}

// +kubebuilder:skipversion
#Matcher: {
	grpcCode?: null | string @go(GrpcCode,*string)
	httpCode?: null | string @go(HTTPCode,*string)
}

// +kubebuilder:skipversion
#RedirectActionConfig: {
	host?:       null | string @go(Host,*string)
	path?:       null | string @go(Path,*string)
	port?:       null | string @go(Port,*string)
	protocol?:   null | string @go(Protocol,*string)
	query?:      null | string @go(Query,*string)
	statusCode?: null | string @go(StatusCode,*string)
}

// +kubebuilder:skipversion
#Rule: {
	actions?: [...null | #Action] @go(Actions,[]*Action)
}

// +kubebuilder:skipversion
#SSLPolicy: {
	name?: null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#SubnetMapping: {
	allocationID?:       null | string @go(AllocationID,*string)
	iPv6Address?:        null | string @go(IPv6Address,*string)
	privateIPv4Address?: null | string @go(PrivateIPv4Address,*string)
	subnetID?:           null | string @go(SubnetID,*string)
}

// +kubebuilder:skipversion
#Tag: {
	key?:   null | string @go(Key,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#TagDescription: {
	tags?: [...null | #Tag] @go(Tags,[]*Tag)
}

// +kubebuilder:skipversion
#TargetDescription: {
	availabilityZone?: null | string @go(AvailabilityZone,*string)
	port?:             null | int64  @go(Port,*int64)
}

// +kubebuilder:skipversion
#TargetGroupStickinessConfig: {
	durationSeconds?: null | int64 @go(DurationSeconds,*int64)
	enabled?:         null | bool  @go(Enabled,*bool)
}

// +kubebuilder:skipversion
#TargetGroupTuple: {
	targetGroupARN?: null | string @go(TargetGroupARN,*string)
	weight?:         null | int64  @go(Weight,*int64)
}

// +kubebuilder:skipversion
#TargetGroup_SDK: {
	healthCheckEnabled?:         null | bool   @go(HealthCheckEnabled,*bool)
	healthCheckIntervalSeconds?: null | int64  @go(HealthCheckIntervalSeconds,*int64)
	healthCheckPath?:            null | string @go(HealthCheckPath,*string)
	healthCheckPort?:            null | string @go(HealthCheckPort,*string)
	healthCheckProtocol?:        null | string @go(HealthCheckProtocol,*string)
	healthCheckTimeoutSeconds?:  null | int64  @go(HealthCheckTimeoutSeconds,*int64)
	healthyThresholdCount?:      null | int64  @go(HealthyThresholdCount,*int64)
	ipAddressType?:              null | string @go(IPAddressType,*string)
	loadBalancerARNs?: [...null | string] @go(LoadBalancerARNs,[]*string)

	// The codes to use when checking for a successful response from a target. If
	// the protocol version is gRPC, these are gRPC codes. Otherwise, these are
	// HTTP codes.
	matcher?:                 null | #Matcher @go(Matcher,*Matcher)
	port?:                    null | int64    @go(Port,*int64)
	protocol?:                null | string   @go(Protocol,*string)
	protocolVersion?:         null | string   @go(ProtocolVersion,*string)
	targetGroupARN?:          null | string   @go(TargetGroupARN,*string)
	targetGroupName?:         null | string   @go(TargetGroupName,*string)
	targetType?:              null | string   @go(TargetType,*string)
	unhealthyThresholdCount?: null | int64    @go(UnhealthyThresholdCount,*int64)
	vpcID?:                   null | string   @go(VPCID,*string)
}

// +kubebuilder:skipversion
#TargetHealthDescription: {
	healthCheckPort?: null | string @go(HealthCheckPort,*string)
}
