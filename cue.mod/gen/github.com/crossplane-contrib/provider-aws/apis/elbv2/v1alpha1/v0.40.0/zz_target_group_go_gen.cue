// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/elbv2/v1alpha1

package v1alpha1

// TargetGroupParameters defines the desired state of TargetGroup
#TargetGroupParameters: {
	// Region is which region the TargetGroup will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// Indicates whether health checks are enabled. If the target type is lambda,
	// health checks are disabled by default but can be enabled. If the target type
	// is instance, ip, or alb, health checks are always enabled and cannot be disabled.
	healthCheckEnabled?: null | bool @go(HealthCheckEnabled,*bool)

	// The approximate amount of time, in seconds, between health checks of an individual
	// target. The range is 5-300. If the target group protocol is TCP, TLS, UDP,
	// TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol
	// is GENEVE, the default is 10 seconds. If the target type is lambda, the default
	// is 35 seconds.
	healthCheckIntervalSeconds?: null | int64 @go(HealthCheckIntervalSeconds,*int64)

	// [HTTP/HTTPS health checks] The destination for health checks on the targets.
	//
	// [HTTP1 or HTTP2 protocol version] The ping path. The default is /.
	//
	// [GRPC protocol version] The path of a custom health check method with the
	// format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.
	healthCheckPath?: null | string @go(HealthCheckPath,*string)

	// The port the load balancer uses when performing health checks on targets.
	// If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is
	// traffic-port, which is the port on which each target receives traffic from
	// the load balancer. If the protocol is GENEVE, the default is port 80.
	healthCheckPort?: null | string @go(HealthCheckPort,*string)

	// The protocol the load balancer uses when performing health checks on targets.
	// For Application Load Balancers, the default is HTTP. For Network Load Balancers
	// and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported
	// for health checks if the protocol of the target group is HTTP or HTTPS. The
	// GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
	healthCheckProtocol?: null | string @go(HealthCheckProtocol,*string)

	// The amount of time, in seconds, during which no response from a target means
	// a failed health check. The range is 2â€“120 seconds. For target groups with
	// a protocol of HTTP, the default is 6 seconds. For target groups with a protocol
	// of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a
	// protocol of GENEVE, the default is 5 seconds. If the target type is lambda,
	// the default is 30 seconds.
	healthCheckTimeoutSeconds?: null | int64 @go(HealthCheckTimeoutSeconds,*int64)

	// The number of consecutive health check successes required before considering
	// a target healthy. The range is 2-10. If the target group protocol is TCP,
	// TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with
	// a protocol of GENEVE, the default is 3. If the target type is lambda, the
	// default is 5.
	healthyThresholdCount?: null | int64 @go(HealthyThresholdCount,*int64)

	// The type of IP address used for this target group. The possible values are
	// ipv4 and ipv6. This is an optional parameter. If not specified, the IP address
	// type defaults to ipv4.
	ipAddressType?: null | string @go(IPAddressType,*string)

	// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for
	// a successful response from a target. For target groups with a protocol of
	// TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol
	// of HTTP or HTTPS, the range is 200-499. For target groups with a protocol
	// of GENEVE, the range is 200-399.
	matcher?: null | #Matcher @go(Matcher,*Matcher)

	// The name of the target group.
	//
	// This name must be unique per region per account, can have a maximum of 32
	// characters, must contain only alphanumeric characters or hyphens, and must
	// not begin or end with a hyphen.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The port on which the targets receive traffic. This port is used unless you
	// specify a port override when registering the target. If the target is a Lambda
	// function, this parameter does not apply. If the protocol is GENEVE, the supported
	// port is 6081.
	port?: null | int64 @go(Port,*int64)

	// The protocol to use for routing traffic to the targets. For Application Load
	// Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers,
	// the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers,
	// the supported protocol is GENEVE. A TCP_UDP listener must be associated with
	// a TCP_UDP target group. If the target is a Lambda function, this parameter
	// does not apply.
	protocol?: null | string @go(Protocol,*string)

	// [HTTP/HTTPS protocol] The protocol version. Specify GRPC to send requests
	// to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2.
	// The default is HTTP1, which sends requests to targets using HTTP/1.1.
	protocolVersion?: null | string @go(ProtocolVersion,*string)

	// The tags to assign to the target group.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	// The type of target that you must specify when registering targets with this
	// target group. You can't specify targets for a target group using more than
	// one target type.
	//
	//    * instance - Register targets by instance ID. This is the default value.
	//
	//    * ip - Register targets by IP address. You can specify IP addresses from
	//    the subnets of the virtual private cloud (VPC) for the target group, the
	//    RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the
	//    RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP
	//    addresses.
	//
	//    * lambda - Register a single Lambda function as a target.
	//
	//    * alb - Register a single Application Load Balancer as a target.
	targetType?: null | string @go(TargetType,*string)

	// The number of consecutive health check failures required before considering
	// a target unhealthy. The range is 2-10. If the target group protocol is TCP,
	// TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with
	// a protocol of GENEVE, the default is 3. If the target type is lambda, the
	// default is 5.
	unhealthyThresholdCount?: null | int64 @go(UnhealthyThresholdCount,*int64)

	// The identifier of the virtual private cloud (VPC). If the target is a Lambda
	// function, this parameter does not apply. Otherwise, this parameter is required.
	vpcID?: null | string @go(VPCID,*string)
}

// TargetGroupSpec defines the desired state of TargetGroup
#TargetGroupSpec: {
	forProvider: #TargetGroupParameters @go(ForProvider)
}

// TargetGroupObservation defines the observed state of TargetGroup
#TargetGroupObservation: {
	// Information about the target group.
	targetGroups?: [...null | #TargetGroup_SDK] @go(TargetGroups,[]*TargetGroup_SDK)
}

// TargetGroupStatus defines the observed state of TargetGroup.
#TargetGroupStatus: {
	atProvider?: #TargetGroupObservation @go(AtProvider)
}

// TargetGroup is the Schema for the TargetGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#TargetGroup: {
	spec:    #TargetGroupSpec   @go(Spec)
	status?: #TargetGroupStatus @go(Status)
}

// TargetGroupList contains a list of TargetGroups
#TargetGroupList: {
	items: [...#TargetGroup] @go(Items,[]TargetGroup)
}
