// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/cloudfront/v1alpha1

package v1alpha1

// +kubebuilder:skipversion
#ActiveTrustedKeyGroups: {
	enabled?: null | bool @go(Enabled,*bool)
	items?: [...null | #KGKeyPairIDs] @go(Items,[]*KGKeyPairIDs)
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#ActiveTrustedSigners: {
	enabled?: null | bool @go(Enabled,*bool)
	items?: [...null | #Signer] @go(Items,[]*Signer)
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#AliasICPRecordal: {
	cname?:             null | string @go(CNAME,*string)
	iCPRecordalStatus?: null | string @go(ICPRecordalStatus,*string)
}

// +kubebuilder:skipversion
#Aliases: {
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#AllowedMethods: {
	// A complex type that controls whether CloudFront caches the response to requests
	// using the specified HTTP methods. There are two choices:
	//
	//    * CloudFront caches responses to GET and HEAD requests.
	//
	//    * CloudFront caches responses to GET, HEAD, and OPTIONS requests.
	//
	// If you pick the second choice for your Amazon S3 Origin, you may need to
	// forward Access-Control-Request-Method, Access-Control-Request-Headers, and
	// Origin headers for the responses to be cached correctly.
	cachedMethods?: null | #CachedMethods @go(CachedMethods,*CachedMethods)
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#CacheBehavior: {
	// A complex type that controls which HTTP methods CloudFront processes and
	// forwards to your Amazon S3 bucket or your custom origin. There are three
	// choices:
	//
	//    * CloudFront forwards only GET and HEAD requests.
	//
	//    * CloudFront forwards only GET, HEAD, and OPTIONS requests.
	//
	//    * CloudFront forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE
	//    requests.
	//
	// If you pick the third choice, you may need to restrict access to your Amazon
	// S3 bucket or to your custom origin so users can't perform operations that
	// you don't want them to. For example, you might not want users to have permissions
	// to delete objects from your origin.
	allowedMethods?:         null | #AllowedMethods @go(AllowedMethods,*AllowedMethods)
	cachePolicyID?:          null | string          @go(CachePolicyID,*string)
	compress?:               null | bool            @go(Compress,*bool)
	defaultTTL?:             null | int64           @go(DefaultTTL,*int64)
	fieldLevelEncryptionID?: null | string          @go(FieldLevelEncryptionID,*string)

	// This field is deprecated. We recommend that you use a cache policy or an
	// origin request policy instead of this field.
	//
	// If you want to include values in the cache key, use a cache policy. For more
	// information, see Creating cache policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// in the Amazon CloudFront Developer Guide.
	//
	// If you want to send values to the origin but not include them in the cache
	// key, use an origin request policy. For more information, see Creating origin
	// request policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// in the Amazon CloudFront Developer Guide.
	//
	// A complex type that specifies how CloudFront handles query strings, cookies,
	// and HTTP headers.
	forwardedValues?: null | #ForwardedValues @go(ForwardedValues,*ForwardedValues)

	// A list of CloudFront functions that are associated with a cache behavior
	// in a CloudFront distribution. CloudFront functions must be published to the
	// LIVE stage to associate them with a cache behavior.
	functionAssociations?: null | #FunctionAssociations @go(FunctionAssociations,*FunctionAssociations)

	// A complex type that specifies a list of Lambda@Edge functions associations
	// for a cache behavior.
	//
	// If you want to invoke one or more Lambda@Edge functions triggered by requests
	// that match the PathPattern of the cache behavior, specify the applicable
	// values for Quantity and Items. Note that there can be up to 4 LambdaFunctionAssociation
	// items in this list (one for each possible value of EventType) and each EventType
	// can be associated with only one function.
	//
	// If you don't want to invoke any Lambda@Edge functions for the requests that
	// match PathPattern, specify 0 for Quantity and omit Items.
	lambdaFunctionAssociations?: null | #LambdaFunctionAssociations @go(LambdaFunctionAssociations,*LambdaFunctionAssociations)
	maxTTL?:                     null | int64                       @go(MaxTTL,*int64)
	minTTL?:                     null | int64                       @go(MinTTL,*int64)
	originRequestPolicyID?:      null | string                      @go(OriginRequestPolicyID,*string)
	pathPattern?:                null | string                      @go(PathPattern,*string)
	realtimeLogConfigARN?:       null | string                      @go(RealtimeLogConfigARN,*string)
	responseHeadersPolicyID?:    null | string                      @go(ResponseHeadersPolicyID,*string)
	smoothStreaming?:            null | bool                        @go(SmoothStreaming,*bool)
	targetOriginID?:             null | string                      @go(TargetOriginID,*string)

	// A list of key groups whose public keys CloudFront can use to verify the signatures
	// of signed URLs and signed cookies.
	trustedKeyGroups?: null | #TrustedKeyGroups @go(TrustedKeyGroups,*TrustedKeyGroups)

	// A list of Amazon Web Services accounts whose public keys CloudFront can use
	// to verify the signatures of signed URLs and signed cookies.
	trustedSigners?:       null | #TrustedSigners @go(TrustedSigners,*TrustedSigners)
	viewerProtocolPolicy?: null | string          @go(ViewerProtocolPolicy,*string)
}

// +kubebuilder:skipversion
#CacheBehaviors: {
	items?: [...null | #CacheBehavior] @go(Items,[]*CacheBehavior)
}

// +kubebuilder:skipversion
#CachePolicyConfig: {
	comment?:    null | string @go(Comment,*string)
	defaultTTL?: null | int64  @go(DefaultTTL,*int64)
	maxTTL?:     null | int64  @go(MaxTTL,*int64)
	minTTL?:     null | int64  @go(MinTTL,*int64)
	name?:       null | string @go(Name,*string)

	// This object determines the values that CloudFront includes in the cache key.
	// These values can include HTTP headers, cookies, and URL query strings. CloudFront
	// uses the cache key to find an object in its cache that it can return to the
	// viewer.
	//
	// The headers, cookies, and query strings that are included in the cache key
	// are automatically included in requests that CloudFront sends to the origin.
	// CloudFront sends a request when it can't find an object in its cache that
	// matches the request's cache key. If you want to send values to the origin
	// but not include them in the cache key, use OriginRequestPolicy.
	parametersInCacheKeyAndForwardedToOrigin?: null | #ParametersInCacheKeyAndForwardedToOrigin @go(ParametersInCacheKeyAndForwardedToOrigin,*ParametersInCacheKeyAndForwardedToOrigin)
}

// +kubebuilder:skipversion
#CachePolicyCookiesConfig: {
	cookieBehavior?: null | string @go(CookieBehavior,*string)

	// Contains a list of cookie names.
	cookies?: null | #CookieNames @go(Cookies,*CookieNames)
}

// +kubebuilder:skipversion
#CachePolicyHeadersConfig: {
	headerBehavior?: null | string @go(HeaderBehavior,*string)

	// Contains a list of HTTP header names.
	headers?: null | #Headers @go(Headers,*Headers)
}

// +kubebuilder:skipversion
#CachePolicyList_SDK: {
	items?: [...null | #CachePolicySummary] @go(Items,[]*CachePolicySummary)
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#CachePolicyQueryStringsConfig: {
	queryStringBehavior?: null | string @go(QueryStringBehavior,*string)

	// Contains a list of query string names.
	queryStrings?: null | #QueryStringNames @go(QueryStrings,*QueryStringNames)
}

// +kubebuilder:skipversion
#CachePolicySummary: {
	// A cache policy.
	//
	// When it's attached to a cache behavior, the cache policy determines the following:
	//
	//    * The values that CloudFront includes in the cache key. These values can
	//    include HTTP headers, cookies, and URL query strings. CloudFront uses
	//    the cache key to find an object in its cache that it can return to the
	//    viewer.
	//
	//    * The default, minimum, and maximum time to live (TTL) values that you
	//    want objects to stay in the CloudFront cache.
	//
	// The headers, cookies, and query strings that are included in the cache key
	// are automatically included in requests that CloudFront sends to the origin.
	// CloudFront sends a request when it can't find a valid object in its cache
	// that matches the request's cache key. If you want to send values to the origin
	// but not include them in the cache key, use OriginRequestPolicy.
	cachePolicy?: null | #CachePolicy_SDK @go(CachePolicy,*CachePolicy_SDK)
	type_?:       null | string           @go(Type,*string)
}

// +kubebuilder:skipversion
#CachePolicy_SDK: {
	// A cache policy configuration.
	//
	// This configuration determines the following:
	//
	//    * The values that CloudFront includes in the cache key. These values can
	//    include HTTP headers, cookies, and URL query strings. CloudFront uses
	//    the cache key to find an object in its cache that it can return to the
	//    viewer.
	//
	//    * The default, minimum, and maximum time to live (TTL) values that you
	//    want objects to stay in the CloudFront cache.
	//
	// The headers, cookies, and query strings that are included in the cache key
	// are automatically included in requests that CloudFront sends to the origin.
	// CloudFront sends a request when it can't find a valid object in its cache
	// that matches the request's cache key. If you want to send values to the origin
	// but not include them in the cache key, use OriginRequestPolicy.
	cachePolicyConfig?: null | #CachePolicyConfig @go(CachePolicyConfig,*CachePolicyConfig)
	id?:                null | string             @go(ID,*string)
}

// +kubebuilder:skipversion
#CachedMethods: {
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#ConflictingAlias: {
	accountID?:      null | string @go(AccountID,*string)
	alias?:          null | string @go(Alias,*string)
	distributionID?: null | string @go(DistributionID,*string)
}

// +kubebuilder:skipversion
#ConflictingAliasesList: {
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#ContentTypeProfile: {
	contentType?: null | string @go(ContentType,*string)
	profileID?:   null | string @go(ProfileID,*string)
}

// +kubebuilder:skipversion
#ContentTypeProfileConfig: {
	forwardWhenContentTypeIsUnknown?: null | bool @go(ForwardWhenContentTypeIsUnknown,*bool)
}

// +kubebuilder:skipversion
#ContentTypeProfiles: {
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#ContinuousDeploymentPolicy: {
	id?: null | string @go(ID,*string)
}

// +kubebuilder:skipversion
#ContinuousDeploymentPolicyConfig: {
	enabled?: null | bool @go(Enabled,*bool)
}

// +kubebuilder:skipversion
#ContinuousDeploymentPolicyList: {
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#ContinuousDeploymentSingleHeaderConfig: {
	header?: null | string @go(Header,*string)
	value?:  null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#CookieNames: {
	items?: [...null | string] @go(Items,[]*string)
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#CookiePreference: {
	forward?: null | string @go(Forward,*string)

	// Contains a list of cookie names.
	whitelistedNames?: null | #CookieNames @go(WhitelistedNames,*CookieNames)
}

// +kubebuilder:skipversion
#CustomErrorResponse: {
	errorCachingMinTTL?: null | int64  @go(ErrorCachingMinTTL,*int64)
	errorCode?:          null | int64  @go(ErrorCode,*int64)
	responseCode?:       null | string @go(ResponseCode,*string)
	responsePagePath?:   null | string @go(ResponsePagePath,*string)
}

// +kubebuilder:skipversion
#CustomErrorResponses: {
	items?: [...null | #CustomErrorResponse] @go(Items,[]*CustomErrorResponse)
}

// +kubebuilder:skipversion
#CustomHeaders: {
	items?: [...null | #OriginCustomHeader] @go(Items,[]*OriginCustomHeader)
}

// +kubebuilder:skipversion
#CustomOriginConfig: {
	httpPort?:               null | int64  @go(HTTPPort,*int64)
	httpSPort?:              null | int64  @go(HTTPSPort,*int64)
	originKeepaliveTimeout?: null | int64  @go(OriginKeepaliveTimeout,*int64)
	originProtocolPolicy?:   null | string @go(OriginProtocolPolicy,*string)
	originReadTimeout?:      null | int64  @go(OriginReadTimeout,*int64)

	// A complex type that contains information about the SSL/TLS protocols that
	// CloudFront can use when establishing an HTTPS connection with your origin.
	originSSLProtocols?: null | #OriginSSLProtocols @go(OriginSSLProtocols,*OriginSSLProtocols)
}

// +kubebuilder:skipversion
#DefaultCacheBehavior: {
	// A complex type that controls which HTTP methods CloudFront processes and
	// forwards to your Amazon S3 bucket or your custom origin. There are three
	// choices:
	//
	//    * CloudFront forwards only GET and HEAD requests.
	//
	//    * CloudFront forwards only GET, HEAD, and OPTIONS requests.
	//
	//    * CloudFront forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE
	//    requests.
	//
	// If you pick the third choice, you may need to restrict access to your Amazon
	// S3 bucket or to your custom origin so users can't perform operations that
	// you don't want them to. For example, you might not want users to have permissions
	// to delete objects from your origin.
	allowedMethods?:         null | #AllowedMethods @go(AllowedMethods,*AllowedMethods)
	cachePolicyID?:          null | string          @go(CachePolicyID,*string)
	compress?:               null | bool            @go(Compress,*bool)
	defaultTTL?:             null | int64           @go(DefaultTTL,*int64)
	fieldLevelEncryptionID?: null | string          @go(FieldLevelEncryptionID,*string)

	// This field is deprecated. We recommend that you use a cache policy or an
	// origin request policy instead of this field.
	//
	// If you want to include values in the cache key, use a cache policy. For more
	// information, see Creating cache policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
	// in the Amazon CloudFront Developer Guide.
	//
	// If you want to send values to the origin but not include them in the cache
	// key, use an origin request policy. For more information, see Creating origin
	// request policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
	// in the Amazon CloudFront Developer Guide.
	//
	// A complex type that specifies how CloudFront handles query strings, cookies,
	// and HTTP headers.
	forwardedValues?: null | #ForwardedValues @go(ForwardedValues,*ForwardedValues)

	// A list of CloudFront functions that are associated with a cache behavior
	// in a CloudFront distribution. CloudFront functions must be published to the
	// LIVE stage to associate them with a cache behavior.
	functionAssociations?: null | #FunctionAssociations @go(FunctionAssociations,*FunctionAssociations)

	// A complex type that specifies a list of Lambda@Edge functions associations
	// for a cache behavior.
	//
	// If you want to invoke one or more Lambda@Edge functions triggered by requests
	// that match the PathPattern of the cache behavior, specify the applicable
	// values for Quantity and Items. Note that there can be up to 4 LambdaFunctionAssociation
	// items in this list (one for each possible value of EventType) and each EventType
	// can be associated with only one function.
	//
	// If you don't want to invoke any Lambda@Edge functions for the requests that
	// match PathPattern, specify 0 for Quantity and omit Items.
	lambdaFunctionAssociations?: null | #LambdaFunctionAssociations @go(LambdaFunctionAssociations,*LambdaFunctionAssociations)
	maxTTL?:                     null | int64                       @go(MaxTTL,*int64)
	minTTL?:                     null | int64                       @go(MinTTL,*int64)
	originRequestPolicyID?:      null | string                      @go(OriginRequestPolicyID,*string)
	realtimeLogConfigARN?:       null | string                      @go(RealtimeLogConfigARN,*string)
	responseHeadersPolicyID?:    null | string                      @go(ResponseHeadersPolicyID,*string)
	smoothStreaming?:            null | bool                        @go(SmoothStreaming,*bool)
	targetOriginID?:             null | string                      @go(TargetOriginID,*string)

	// A list of key groups whose public keys CloudFront can use to verify the signatures
	// of signed URLs and signed cookies.
	trustedKeyGroups?: null | #TrustedKeyGroups @go(TrustedKeyGroups,*TrustedKeyGroups)

	// A list of Amazon Web Services accounts whose public keys CloudFront can use
	// to verify the signatures of signed URLs and signed cookies.
	trustedSigners?:       null | #TrustedSigners @go(TrustedSigners,*TrustedSigners)
	viewerProtocolPolicy?: null | string          @go(ViewerProtocolPolicy,*string)
}

// +kubebuilder:skipversion
#DistributionConfig: {
	// A complex type that contains information about CNAMEs (alternate domain names),
	// if any, for this distribution.
	aliases?: null | #Aliases @go(Aliases,*Aliases)

	// A complex type that contains zero or more CacheBehavior elements.
	cacheBehaviors?:               null | #CacheBehaviors @go(CacheBehaviors,*CacheBehaviors)
	callerReference?:              null | string          @go(CallerReference,*string)
	comment?:                      null | string          @go(Comment,*string)
	continuousDeploymentPolicyID?: null | string          @go(ContinuousDeploymentPolicyID,*string)

	// A complex type that controls:
	//
	//    * Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range
	//    with custom error messages before returning the response to the viewer.
	//
	//    * How long CloudFront caches HTTP status codes in the 4xx and 5xx range.
	//
	// For more information about custom error pages, see Customizing Error Responses
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html)
	// in the Amazon CloudFront Developer Guide.
	customErrorResponses?: null | #CustomErrorResponses @go(CustomErrorResponses,*CustomErrorResponses)

	// A complex type that describes the default cache behavior if you don't specify
	// a CacheBehavior element or if request URLs don't match any of the values
	// of PathPattern in CacheBehavior elements. You must create exactly one default
	// cache behavior.
	defaultCacheBehavior?: null | #DefaultCacheBehavior @go(DefaultCacheBehavior,*DefaultCacheBehavior)
	defaultRootObject?:    null | string                @go(DefaultRootObject,*string)
	enabled?:              null | bool                  @go(Enabled,*bool)
	httpVersion?:          null | string                @go(HTTPVersion,*string)
	isIPV6Enabled?:        null | bool                  @go(IsIPV6Enabled,*bool)

	// A complex type that controls whether access logs are written for the distribution.
	logging?: null | #LoggingConfig @go(Logging,*LoggingConfig)

	// A complex data type for the origin groups specified for a distribution.
	originGroups?: null | #OriginGroups @go(OriginGroups,*OriginGroups)

	// Contains information about the origins for this distribution.
	origins?:    null | #Origins @go(Origins,*Origins)
	priceClass?: null | string   @go(PriceClass,*string)

	// A complex type that identifies ways in which you want to restrict distribution
	// of your content.
	restrictions?: null | #Restrictions @go(Restrictions,*Restrictions)
	staging?:      null | bool          @go(Staging,*bool)

	// A complex type that determines the distribution's SSL/TLS configuration for
	// communicating with viewers.
	//
	// If the distribution doesn't use Aliases (also known as alternate domain names
	// or CNAMEs)—that is, if the distribution uses the CloudFront domain name
	// such as d111111abcdef8.cloudfront.net—set CloudFrontDefaultCertificate
	// to true and leave all other fields empty.
	//
	// If the distribution uses Aliases (alternate domain names or CNAMEs), use
	// the fields in this type to specify the following settings:
	//
	//    * Which viewers the distribution accepts HTTPS connections from: only
	//    viewers that support server name indication (SNI) (https://en.wikipedia.org/wiki/Server_Name_Indication)
	//    (recommended), or all viewers including those that don't support SNI.
	//    To accept HTTPS connections from only viewers that support SNI, set SSLSupportMethod
	//    to sni-only. This is recommended. Most browsers and clients support SNI.
	//    To accept HTTPS connections from all viewers, including those that don't
	//    support SNI, set SSLSupportMethod to vip. This is not recommended, and
	//    results in additional monthly charges from CloudFront.
	//
	//    * The minimum SSL/TLS protocol version that the distribution can use to
	//    communicate with viewers. To specify a minimum version, choose a value
	//    for MinimumProtocolVersion. For more information, see Security Policy
	//    (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy)
	//    in the Amazon CloudFront Developer Guide.
	//
	//    * The location of the SSL/TLS certificate, Certificate Manager (ACM) (https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html)
	//    (recommended) or Identity and Access Management (IAM) (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html).
	//    You specify the location by setting a value in one of the following fields
	//    (not both): ACMCertificateArn IAMCertificateId
	//
	// All distributions support HTTPS connections from viewers. To require viewers
	// to use HTTPS only, or to redirect them from HTTP to HTTPS, use ViewerProtocolPolicy
	// in the CacheBehavior or DefaultCacheBehavior. To specify how CloudFront should
	// use SSL/TLS to communicate with your custom origin, use CustomOriginConfig.
	//
	// For more information, see Using HTTPS with CloudFront (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html)
	// and Using Alternate Domain Names and HTTPS (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html)
	// in the Amazon CloudFront Developer Guide.
	viewerCertificate?: null | #ViewerCertificate @go(ViewerCertificate,*ViewerCertificate)
	webACLID?:          null | string             @go(WebACLID,*string)
}

// +kubebuilder:skipversion
#DistributionConfigWithTags: {
	// A distribution configuration.
	distributionConfig?: null | #DistributionConfig @go(DistributionConfig,*DistributionConfig)
}

// +kubebuilder:skipversion
#DistributionIDList: {
	isTruncated?: null | bool   @go(IsTruncated,*bool)
	marker?:      null | string @go(Marker,*string)
	maxItems?:    null | int64  @go(MaxItems,*int64)
	nextMarker?:  null | string @go(NextMarker,*string)
	quantity?:    null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#DistributionList_SDK: {
	isTruncated?: null | bool @go(IsTruncated,*bool)
	items?: [...null | #DistributionSummary] @go(Items,[]*DistributionSummary)
	marker?:     null | string @go(Marker,*string)
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#DistributionSummary: {
	arn?: null | string @go(ARN,*string)
	aliasICPRecordals?: [...null | #AliasICPRecordal] @go(AliasICPRecordals,[]*AliasICPRecordal)

	// A complex type that contains information about CNAMEs (alternate domain names),
	// if any, for this distribution.
	aliases?: null | #Aliases @go(Aliases,*Aliases)

	// A complex type that contains zero or more CacheBehavior elements.
	cacheBehaviors?: null | #CacheBehaviors @go(CacheBehaviors,*CacheBehaviors)
	comment?:        null | string          @go(Comment,*string)

	// A complex type that controls:
	//
	//    * Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range
	//    with custom error messages before returning the response to the viewer.
	//
	//    * How long CloudFront caches HTTP status codes in the 4xx and 5xx range.
	//
	// For more information about custom error pages, see Customizing Error Responses
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html)
	// in the Amazon CloudFront Developer Guide.
	customErrorResponses?: null | #CustomErrorResponses @go(CustomErrorResponses,*CustomErrorResponses)

	// A complex type that describes the default cache behavior if you don't specify
	// a CacheBehavior element or if request URLs don't match any of the values
	// of PathPattern in CacheBehavior elements. You must create exactly one default
	// cache behavior.
	defaultCacheBehavior?: null | #DefaultCacheBehavior @go(DefaultCacheBehavior,*DefaultCacheBehavior)
	domainName?:           null | string                @go(DomainName,*string)
	enabled?:              null | bool                  @go(Enabled,*bool)
	httpVersion?:          null | string                @go(HTTPVersion,*string)
	id?:                   null | string                @go(ID,*string)
	isIPV6Enabled?:        null | bool                  @go(IsIPV6Enabled,*bool)

	// A complex data type for the origin groups specified for a distribution.
	originGroups?: null | #OriginGroups @go(OriginGroups,*OriginGroups)

	// Contains information about the origins for this distribution.
	origins?:    null | #Origins @go(Origins,*Origins)
	priceClass?: null | string   @go(PriceClass,*string)

	// A complex type that identifies ways in which you want to restrict distribution
	// of your content.
	restrictions?: null | #Restrictions @go(Restrictions,*Restrictions)
	staging?:      null | bool          @go(Staging,*bool)
	status?:       null | string        @go(Status,*string)

	// A complex type that determines the distribution's SSL/TLS configuration for
	// communicating with viewers.
	//
	// If the distribution doesn't use Aliases (also known as alternate domain names
	// or CNAMEs)—that is, if the distribution uses the CloudFront domain name
	// such as d111111abcdef8.cloudfront.net—set CloudFrontDefaultCertificate
	// to true and leave all other fields empty.
	//
	// If the distribution uses Aliases (alternate domain names or CNAMEs), use
	// the fields in this type to specify the following settings:
	//
	//    * Which viewers the distribution accepts HTTPS connections from: only
	//    viewers that support server name indication (SNI) (https://en.wikipedia.org/wiki/Server_Name_Indication)
	//    (recommended), or all viewers including those that don't support SNI.
	//    To accept HTTPS connections from only viewers that support SNI, set SSLSupportMethod
	//    to sni-only. This is recommended. Most browsers and clients support SNI.
	//    To accept HTTPS connections from all viewers, including those that don't
	//    support SNI, set SSLSupportMethod to vip. This is not recommended, and
	//    results in additional monthly charges from CloudFront.
	//
	//    * The minimum SSL/TLS protocol version that the distribution can use to
	//    communicate with viewers. To specify a minimum version, choose a value
	//    for MinimumProtocolVersion. For more information, see Security Policy
	//    (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy)
	//    in the Amazon CloudFront Developer Guide.
	//
	//    * The location of the SSL/TLS certificate, Certificate Manager (ACM) (https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html)
	//    (recommended) or Identity and Access Management (IAM) (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html).
	//    You specify the location by setting a value in one of the following fields
	//    (not both): ACMCertificateArn IAMCertificateId
	//
	// All distributions support HTTPS connections from viewers. To require viewers
	// to use HTTPS only, or to redirect them from HTTP to HTTPS, use ViewerProtocolPolicy
	// in the CacheBehavior or DefaultCacheBehavior. To specify how CloudFront should
	// use SSL/TLS to communicate with your custom origin, use CustomOriginConfig.
	//
	// For more information, see Using HTTPS with CloudFront (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html)
	// and Using Alternate Domain Names and HTTPS (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html)
	// in the Amazon CloudFront Developer Guide.
	viewerCertificate?: null | #ViewerCertificate @go(ViewerCertificate,*ViewerCertificate)
	webACLID?:          null | string             @go(WebACLID,*string)
}

// +kubebuilder:skipversion
#Distribution_SDK: {
	arn?: null | string @go(ARN,*string)

	// A list of key groups, and the public keys in each key group, that CloudFront
	// can use to verify the signatures of signed URLs and signed cookies.
	activeTrustedKeyGroups?: null | #ActiveTrustedKeyGroups @go(ActiveTrustedKeyGroups,*ActiveTrustedKeyGroups)

	// A list of Amazon Web Services accounts and the active CloudFront key pairs
	// in each account that CloudFront can use to verify the signatures of signed
	// URLs and signed cookies.
	activeTrustedSigners?: null | #ActiveTrustedSigners @go(ActiveTrustedSigners,*ActiveTrustedSigners)
	aliasICPRecordals?: [...null | #AliasICPRecordal] @go(AliasICPRecordals,[]*AliasICPRecordal)

	// A distribution configuration.
	distributionConfig?:            null | #DistributionConfig @go(DistributionConfig,*DistributionConfig)
	domainName?:                    null | string              @go(DomainName,*string)
	id?:                            null | string              @go(ID,*string)
	inProgressInvalidationBatches?: null | int64               @go(InProgressInvalidationBatches,*int64)
	status?:                        null | string              @go(Status,*string)
}

// +kubebuilder:skipversion
#EncryptionEntities: {
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#EncryptionEntity: {
	providerID?:  null | string @go(ProviderID,*string)
	publicKeyID?: null | string @go(PublicKeyID,*string)
}

// +kubebuilder:skipversion
#EndPoint: {
	streamType?: null | string @go(StreamType,*string)
}

// +kubebuilder:skipversion
#FieldLevelEncryption: {
	id?: null | string @go(ID,*string)
}

// +kubebuilder:skipversion
#FieldLevelEncryptionConfig: {
	callerReference?: null | string @go(CallerReference,*string)
	comment?:         null | string @go(Comment,*string)
}

// +kubebuilder:skipversion
#FieldLevelEncryptionList: {
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#FieldLevelEncryptionProfile: {
	id?: null | string @go(ID,*string)
}

// +kubebuilder:skipversion
#FieldLevelEncryptionProfileConfig: {
	callerReference?: null | string @go(CallerReference,*string)
	comment?:         null | string @go(Comment,*string)
	name?:            null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#FieldLevelEncryptionProfileList: {
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#FieldLevelEncryptionProfileSummary: {
	comment?: null | string @go(Comment,*string)
	id?:      null | string @go(ID,*string)
	name?:    null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#FieldLevelEncryptionSummary: {
	comment?: null | string @go(Comment,*string)
	id?:      null | string @go(ID,*string)
}

// +kubebuilder:skipversion
#FieldPatterns: {
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#ForwardedValues: {
	// This field is deprecated. We recommend that you use a cache policy or an
	// origin request policy instead of this field.
	//
	// If you want to include cookies in the cache key, use CookiesConfig in a cache
	// policy. See CachePolicy.
	//
	// If you want to send cookies to the origin but not include them in the cache
	// key, use CookiesConfig in an origin request policy. See OriginRequestPolicy.
	//
	// A complex type that specifies whether you want CloudFront to forward cookies
	// to the origin and, if so, which ones. For more information about forwarding
	// cookies to the origin, see Caching Content Based on Cookies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html)
	// in the Amazon CloudFront Developer Guide.
	cookies?: null | #CookiePreference @go(Cookies,*CookiePreference)

	// Contains a list of HTTP header names.
	headers?:     null | #Headers @go(Headers,*Headers)
	queryString?: null | bool     @go(QueryString,*bool)

	// This field is deprecated. We recommend that you use a cache policy or an
	// origin request policy instead of this field.
	//
	// If you want to include query strings in the cache key, use QueryStringsConfig
	// in a cache policy. See CachePolicy.
	//
	// If you want to send query strings to the origin but not include them in the
	// cache key, use QueryStringsConfig in an origin request policy. See OriginRequestPolicy.
	//
	// A complex type that contains information about the query string parameters
	// that you want CloudFront to use for caching for a cache behavior.
	queryStringCacheKeys?: null | #QueryStringCacheKeys @go(QueryStringCacheKeys,*QueryStringCacheKeys)
}

// +kubebuilder:skipversion
#FunctionAssociation: {
	eventType?:   null | string @go(EventType,*string)
	functionARN?: null | string @go(FunctionARN,*string)
}

// +kubebuilder:skipversion
#FunctionAssociations: {
	items?: [...null | #FunctionAssociation] @go(Items,[]*FunctionAssociation)
}

// +kubebuilder:skipversion
#FunctionConfig: {
	comment?: null | string @go(Comment,*string)
}

// +kubebuilder:skipversion
#FunctionList: {
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#FunctionMetadata: {
	functionARN?: null | string @go(FunctionARN,*string)
}

// +kubebuilder:skipversion
#FunctionSummary: {
	status?: null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#GeoRestriction: {
	items?: [...null | string] @go(Items,[]*string)
	restrictionType?: null | string @go(RestrictionType,*string)
}

// +kubebuilder:skipversion
#Headers: {
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#Invalidation: {
	id?:     null | string @go(ID,*string)
	status?: null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#InvalidationBatch: {
	callerReference?: null | string @go(CallerReference,*string)
}

// +kubebuilder:skipversion
#InvalidationList: {
	isTruncated?: null | bool   @go(IsTruncated,*bool)
	marker?:      null | string @go(Marker,*string)
	maxItems?:    null | int64  @go(MaxItems,*int64)
	nextMarker?:  null | string @go(NextMarker,*string)
	quantity?:    null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#InvalidationSummary: {
	id?:     null | string @go(ID,*string)
	status?: null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#KGKeyPairIDs: {
	keyGroupID?: null | string @go(KeyGroupID,*string)

	// A list of CloudFront key pair identifiers.
	keyPairIDs?: null | #KeyPairIDs @go(KeyPairIDs,*KeyPairIDs)
}

// +kubebuilder:skipversion
#KeyGroup: {
	id?: null | string @go(ID,*string)
}

// +kubebuilder:skipversion
#KeyGroupConfig: {
	comment?: null | string @go(Comment,*string)
	name?:    null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#KeyGroupList: {
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#KeyPairIDs: {
	items?: [...null | string] @go(Items,[]*string)
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#KinesisStreamConfig: {
	roleARN?:   null | string @go(RoleARN,*string)
	streamARN?: null | string @go(StreamARN,*string)
}

// +kubebuilder:skipversion
#LambdaFunctionAssociation: {
	eventType?:         null | string @go(EventType,*string)
	includeBody?:       null | bool   @go(IncludeBody,*bool)
	lambdaFunctionARN?: null | string @go(LambdaFunctionARN,*string)
}

// +kubebuilder:skipversion
#LambdaFunctionAssociations: {
	items?: [...null | #LambdaFunctionAssociation] @go(Items,[]*LambdaFunctionAssociation)
}

// +kubebuilder:skipversion
#LoggingConfig: {
	bucket?:         null | string @go(Bucket,*string)
	enabled?:        null | bool   @go(Enabled,*bool)
	includeCookies?: null | bool   @go(IncludeCookies,*bool)
	prefix?:         null | string @go(Prefix,*string)
}

// +kubebuilder:skipversion
#Origin: {
	connectionAttempts?: null | int64 @go(ConnectionAttempts,*int64)
	connectionTimeout?:  null | int64 @go(ConnectionTimeout,*int64)

	// A complex type that contains the list of Custom Headers for each origin.
	customHeaders?: null | #CustomHeaders @go(CustomHeaders,*CustomHeaders)

	// A custom origin. A custom origin is any origin that is not an Amazon S3 bucket,
	// with one exception. An Amazon S3 bucket that is configured with static website
	// hosting (https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html)
	// is a custom origin.
	customOriginConfig?:    null | #CustomOriginConfig @go(CustomOriginConfig,*CustomOriginConfig)
	domainName?:            null | string              @go(DomainName,*string)
	id?:                    null | string              @go(ID,*string)
	originAccessControlID?: null | string              @go(OriginAccessControlID,*string)
	originPath?:            null | string              @go(OriginPath,*string)

	// CloudFront Origin Shield.
	//
	// Using Origin Shield can help reduce the load on your origin. For more information,
	// see Using Origin Shield (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html)
	// in the Amazon CloudFront Developer Guide.
	originShield?: null | #OriginShield @go(OriginShield,*OriginShield)

	// A complex type that contains information about the Amazon S3 origin. If the
	// origin is a custom origin or an S3 bucket that is configured as a website
	// endpoint, use the CustomOriginConfig element instead.
	s3OriginConfig?: null | #S3OriginConfig @go(S3OriginConfig,*S3OriginConfig)
}

// +kubebuilder:skipversion
#OriginAccessControl: {
	id?: null | string @go(ID,*string)
}

// +kubebuilder:skipversion
#OriginAccessControlConfig: {
	description?: null | string @go(Description,*string)
	name?:        null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#OriginAccessControlList: {
	isTruncated?: null | bool   @go(IsTruncated,*bool)
	marker?:      null | string @go(Marker,*string)
	maxItems?:    null | int64  @go(MaxItems,*int64)
	nextMarker?:  null | string @go(NextMarker,*string)
	quantity?:    null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#OriginAccessControlSummary: {
	description?: null | string @go(Description,*string)
	id?:          null | string @go(ID,*string)
	name?:        null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#OriginAccessIdentity: {
	// Origin access identity configuration. Send a GET request to the /CloudFront
	// API version/CloudFront/identity ID/config resource.
	cloudFrontOriginAccessIdentityConfig?: null | #OriginAccessIdentityConfig @go(CloudFrontOriginAccessIdentityConfig,*OriginAccessIdentityConfig)
	id?:                                   null | string                      @go(ID,*string)
	s3CanonicalUserID?:                    null | string                      @go(S3CanonicalUserID,*string)
}

// +kubebuilder:skipversion
#OriginAccessIdentityConfig: {
	comment?: null | string @go(Comment,*string)
}

// +kubebuilder:skipversion
#OriginAccessIdentityList: {
	isTruncated?: null | bool @go(IsTruncated,*bool)
	items?: [...null | #OriginAccessIdentitySummary] @go(Items,[]*OriginAccessIdentitySummary)
	marker?:     null | string @go(Marker,*string)
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#OriginAccessIdentitySummary: {
	comment?:           null | string @go(Comment,*string)
	id?:                null | string @go(ID,*string)
	s3CanonicalUserID?: null | string @go(S3CanonicalUserID,*string)
}

// +kubebuilder:skipversion
#OriginCustomHeader: {
	headerName?:  null | string @go(HeaderName,*string)
	headerValue?: null | string @go(HeaderValue,*string)
}

// +kubebuilder:skipversion
#OriginGroup: {
	// A complex data type that includes information about the failover criteria
	// for an origin group, including the status codes for which CloudFront will
	// failover from the primary origin to the second origin.
	failoverCriteria?: null | #OriginGroupFailoverCriteria @go(FailoverCriteria,*OriginGroupFailoverCriteria)
	id?:               null | string                       @go(ID,*string)

	// A complex data type for the origins included in an origin group.
	members?: null | #OriginGroupMembers @go(Members,*OriginGroupMembers)
}

// +kubebuilder:skipversion
#OriginGroupFailoverCriteria: {
	// A complex data type for the status codes that you specify that, when returned
	// by a primary origin, trigger CloudFront to failover to a second origin.
	statusCodes?: null | #StatusCodes @go(StatusCodes,*StatusCodes)
}

// +kubebuilder:skipversion
#OriginGroupMember: {
	originID?: null | string @go(OriginID,*string)
}

// +kubebuilder:skipversion
#OriginGroupMembers: {
	// List of origins in an origin group.
	items?: [...null | #OriginGroupMember] @go(Items,[]*OriginGroupMember)
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#OriginGroups: {
	// List of origin groups for a distribution.
	items?: [...null | #OriginGroup] @go(Items,[]*OriginGroup)
}

// +kubebuilder:skipversion
#OriginRequestPolicy: {
	id?: null | string @go(ID,*string)
}

// +kubebuilder:skipversion
#OriginRequestPolicyConfig: {
	comment?: null | string @go(Comment,*string)
	name?:    null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#OriginRequestPolicyCookiesConfig: {
	// Contains a list of cookie names.
	cookies?: null | #CookieNames @go(Cookies,*CookieNames)
}

// +kubebuilder:skipversion
#OriginRequestPolicyHeadersConfig: {
	// Contains a list of HTTP header names.
	headers?: null | #Headers @go(Headers,*Headers)
}

// +kubebuilder:skipversion
#OriginRequestPolicyList: {
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#OriginRequestPolicyQueryStringsConfig: {
	// Contains a list of query string names.
	queryStrings?: null | #QueryStringNames @go(QueryStrings,*QueryStringNames)
}

// +kubebuilder:skipversion
#OriginSSLProtocols: {
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#OriginShield: {
	enabled?:            null | bool   @go(Enabled,*bool)
	originShieldRegion?: null | string @go(OriginShieldRegion,*string)
}

// +kubebuilder:skipversion
#Origins: {
	items?: [...null | #Origin] @go(Items,[]*Origin)
}

// +kubebuilder:skipversion
#ParametersInCacheKeyAndForwardedToOrigin: {
	// An object that determines whether any cookies in viewer requests (and if
	// so, which cookies) are included in the cache key and automatically included
	// in requests that CloudFront sends to the origin.
	cookiesConfig?:              null | #CachePolicyCookiesConfig @go(CookiesConfig,*CachePolicyCookiesConfig)
	enableAcceptEncodingBrotli?: null | bool                      @go(EnableAcceptEncodingBrotli,*bool)
	enableAcceptEncodingGzip?:   null | bool                      @go(EnableAcceptEncodingGzip,*bool)

	// An object that determines whether any HTTP headers (and if so, which headers)
	// are included in the cache key and automatically included in requests that
	// CloudFront sends to the origin.
	headersConfig?: null | #CachePolicyHeadersConfig @go(HeadersConfig,*CachePolicyHeadersConfig)

	// An object that determines whether any URL query strings in viewer requests
	// (and if so, which query strings) are included in the cache key and automatically
	// included in requests that CloudFront sends to the origin.
	queryStringsConfig?: null | #CachePolicyQueryStringsConfig @go(QueryStringsConfig,*CachePolicyQueryStringsConfig)
}

// +kubebuilder:skipversion
#Paths: {
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#PublicKey: {
	id?: null | string @go(ID,*string)
}

// +kubebuilder:skipversion
#PublicKeyConfig: {
	callerReference?: null | string @go(CallerReference,*string)
	comment?:         null | string @go(Comment,*string)
	encodedKey?:      null | string @go(EncodedKey,*string)
	name?:            null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#PublicKeyList: {
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#PublicKeySummary: {
	comment?:    null | string @go(Comment,*string)
	encodedKey?: null | string @go(EncodedKey,*string)
	id?:         null | string @go(ID,*string)
	name?:       null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#QueryArgProfile: {
	profileID?: null | string @go(ProfileID,*string)
	queryArg?:  null | string @go(QueryArg,*string)
}

// +kubebuilder:skipversion
#QueryArgProfileConfig: {
	forwardWhenQueryArgProfileIsUnknown?: null | bool @go(ForwardWhenQueryArgProfileIsUnknown,*bool)
}

// +kubebuilder:skipversion
#QueryArgProfiles: {
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#QueryStringCacheKeys: {
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#QueryStringNames: {
	items?: [...null | string] @go(Items,[]*string)
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#RealtimeLogConfig: {
	arn?:          null | string @go(ARN,*string)
	name?:         null | string @go(Name,*string)
	samplingRate?: null | int64  @go(SamplingRate,*int64)
}

// +kubebuilder:skipversion
#RealtimeLogConfigs: {
	isTruncated?: null | bool   @go(IsTruncated,*bool)
	marker?:      null | string @go(Marker,*string)
	maxItems?:    null | int64  @go(MaxItems,*int64)
	nextMarker?:  null | string @go(NextMarker,*string)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyAccessControlAllowHeaders: {
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyAccessControlAllowMethods: {
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyAccessControlAllowOrigins: {
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyAccessControlExposeHeaders: {
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyCORSConfig: {
	accessControlAllowCredentials?: null | bool @go(AccessControlAllowCredentials,*bool)

	// A list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers
	// HTTP response header.
	//
	// For more information about the Access-Control-Allow-Headers HTTP response
	// header, see Access-Control-Allow-Headers (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers)
	// in the MDN Web Docs.
	accessControlAllowHeaders?: null | #ResponseHeadersPolicyAccessControlAllowHeaders @go(AccessControlAllowHeaders,*ResponseHeadersPolicyAccessControlAllowHeaders)

	// A list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods
	// HTTP response header.
	//
	// For more information about the Access-Control-Allow-Methods HTTP response
	// header, see Access-Control-Allow-Methods (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods)
	// in the MDN Web Docs.
	accessControlAllowMethods?: null | #ResponseHeadersPolicyAccessControlAllowMethods @go(AccessControlAllowMethods,*ResponseHeadersPolicyAccessControlAllowMethods)

	// A list of origins (domain names) that CloudFront can use as the value for
	// the Access-Control-Allow-Origin HTTP response header.
	//
	// For more information about the Access-Control-Allow-Origin HTTP response
	// header, see Access-Control-Allow-Origin (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin)
	// in the MDN Web Docs.
	accessControlAllowOrigins?: null | #ResponseHeadersPolicyAccessControlAllowOrigins @go(AccessControlAllowOrigins,*ResponseHeadersPolicyAccessControlAllowOrigins)

	// A list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers
	// HTTP response header.
	//
	// For more information about the Access-Control-Expose-Headers HTTP response
	// header, see Access-Control-Expose-Headers (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers)
	// in the MDN Web Docs.
	accessControlExposeHeaders?: null | #ResponseHeadersPolicyAccessControlExposeHeaders @go(AccessControlExposeHeaders,*ResponseHeadersPolicyAccessControlExposeHeaders)
	accessControlMaxAgeSec?:     null | int64                                            @go(AccessControlMaxAgeSec,*int64)
	originOverride?:             null | bool                                             @go(OriginOverride,*bool)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyConfig: {
	comment?: null | string @go(Comment,*string)

	// A configuration for a set of HTTP response headers that are used for cross-origin
	// resource sharing (CORS). CloudFront adds these headers to HTTP responses
	// that it sends for CORS requests that match a cache behavior associated with
	// this response headers policy.
	//
	// For more information about CORS, see Cross-Origin Resource Sharing (CORS)
	// (https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) in the MDN Web Docs.
	corsConfig?: null | #ResponseHeadersPolicyCORSConfig @go(CORSConfig,*ResponseHeadersPolicyCORSConfig)

	// A list of HTTP response header names and their values. CloudFront includes
	// these headers in HTTP responses that it sends for requests that match a cache
	// behavior that's associated with this response headers policy.
	customHeadersConfig?: null | #ResponseHeadersPolicyCustomHeadersConfig @go(CustomHeadersConfig,*ResponseHeadersPolicyCustomHeadersConfig)
	name?:                null | string                                    @go(Name,*string)

	// A list of HTTP header names that CloudFront removes from HTTP responses to
	// requests that match the cache behavior that this response headers policy
	// is attached to.
	removeHeadersConfig?: null | #ResponseHeadersPolicyRemoveHeadersConfig @go(RemoveHeadersConfig,*ResponseHeadersPolicyRemoveHeadersConfig)

	// A configuration for a set of security-related HTTP response headers. CloudFront
	// adds these headers to HTTP responses that it sends for requests that match
	// a cache behavior associated with this response headers policy.
	securityHeadersConfig?: null | #ResponseHeadersPolicySecurityHeadersConfig @go(SecurityHeadersConfig,*ResponseHeadersPolicySecurityHeadersConfig)

	// A configuration for enabling the Server-Timing header in HTTP responses sent
	// from CloudFront. CloudFront adds this header to HTTP responses that it sends
	// in response to requests that match a cache behavior that's associated with
	// this response headers policy.
	//
	// You can use the Server-Timing header to view metrics that can help you gain
	// insights about the behavior and performance of CloudFront. For example, you
	// can see which cache layer served a cache hit, or the first byte latency from
	// the origin when there was a cache miss. You can use the metrics in the Server-Timing
	// header to troubleshoot issues or test the efficiency of your CloudFront configuration.
	// For more information, see Server-Timing header (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/understanding-response-headers-policies.html#server-timing-header)
	// in the Amazon CloudFront Developer Guide.
	serverTimingHeadersConfig?: null | #ResponseHeadersPolicyServerTimingHeadersConfig @go(ServerTimingHeadersConfig,*ResponseHeadersPolicyServerTimingHeadersConfig)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyContentSecurityPolicy: {
	contentSecurityPolicy?: null | string @go(ContentSecurityPolicy,*string)
	override?:              null | bool   @go(Override,*bool)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyContentTypeOptions: {
	override?: null | bool @go(Override,*bool)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyCustomHeader: {
	header?:   null | string @go(Header,*string)
	override?: null | bool   @go(Override,*bool)
	value?:    null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyCustomHeadersConfig: {
	items?: [...null | #ResponseHeadersPolicyCustomHeader] @go(Items,[]*ResponseHeadersPolicyCustomHeader)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyFrameOptions: {
	frameOption?: null | string @go(FrameOption,*string)
	override?:    null | bool   @go(Override,*bool)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyList_SDK: {
	items?: [...null | #ResponseHeadersPolicySummary] @go(Items,[]*ResponseHeadersPolicySummary)
	maxItems?:   null | int64  @go(MaxItems,*int64)
	nextMarker?: null | string @go(NextMarker,*string)
	quantity?:   null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyReferrerPolicy: {
	override?:       null | bool   @go(Override,*bool)
	referrerPolicy?: null | string @go(ReferrerPolicy,*string)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyRemoveHeader: {
	header?: null | string @go(Header,*string)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyRemoveHeadersConfig: {
	items?: [...null | #ResponseHeadersPolicyRemoveHeader] @go(Items,[]*ResponseHeadersPolicyRemoveHeader)
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicySecurityHeadersConfig: {
	// The policy directives and their values that CloudFront includes as values
	// for the Content-Security-Policy HTTP response header.
	//
	// For more information about the Content-Security-Policy HTTP response header,
	// see Content-Security-Policy (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)
	// in the MDN Web Docs.
	contentSecurityPolicy?: null | #ResponseHeadersPolicyContentSecurityPolicy @go(ContentSecurityPolicy,*ResponseHeadersPolicyContentSecurityPolicy)

	// Determines whether CloudFront includes the X-Content-Type-Options HTTP response
	// header with its value set to nosniff.
	//
	// For more information about the X-Content-Type-Options HTTP response header,
	// see X-Content-Type-Options (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options)
	// in the MDN Web Docs.
	contentTypeOptions?: null | #ResponseHeadersPolicyContentTypeOptions @go(ContentTypeOptions,*ResponseHeadersPolicyContentTypeOptions)

	// Determines whether CloudFront includes the X-Frame-Options HTTP response
	// header and the header's value.
	//
	// For more information about the X-Frame-Options HTTP response header, see
	// X-Frame-Options (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options)
	// in the MDN Web Docs.
	frameOptions?: null | #ResponseHeadersPolicyFrameOptions @go(FrameOptions,*ResponseHeadersPolicyFrameOptions)

	// Determines whether CloudFront includes the Referrer-Policy HTTP response
	// header and the header's value.
	//
	// For more information about the Referrer-Policy HTTP response header, see
	// Referrer-Policy (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy)
	// in the MDN Web Docs.
	referrerPolicy?: null | #ResponseHeadersPolicyReferrerPolicy @go(ReferrerPolicy,*ResponseHeadersPolicyReferrerPolicy)

	// Determines whether CloudFront includes the Strict-Transport-Security HTTP
	// response header and the header's value.
	//
	// For more information about the Strict-Transport-Security HTTP response header,
	// see Strict-Transport-Security (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security)
	// in the MDN Web Docs.
	strictTransportSecurity?: null | #ResponseHeadersPolicyStrictTransportSecurity @go(StrictTransportSecurity,*ResponseHeadersPolicyStrictTransportSecurity)

	// Determines whether CloudFront includes the X-XSS-Protection HTTP response
	// header and the header's value.
	//
	// For more information about the X-XSS-Protection HTTP response header, see
	// X-XSS-Protection (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection)
	// in the MDN Web Docs.
	xSSProtection?: null | #ResponseHeadersPolicyXSSProtection @go(XSSProtection,*ResponseHeadersPolicyXSSProtection)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyServerTimingHeadersConfig: {
	enabled?:      null | bool    @go(Enabled,*bool)
	samplingRate?: null | float64 @go(SamplingRate,*float64)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyStrictTransportSecurity: {
	accessControlMaxAgeSec?: null | int64 @go(AccessControlMaxAgeSec,*int64)
	includeSubdomains?:      null | bool  @go(IncludeSubdomains,*bool)
	override?:               null | bool  @go(Override,*bool)
	preload?:                null | bool  @go(Preload,*bool)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicySummary: {
	// A response headers policy.
	//
	// A response headers policy contains information about a set of HTTP response
	// headers.
	//
	// After you create a response headers policy, you can use its ID to attach
	// it to one or more cache behaviors in a CloudFront distribution. When it's
	// attached to a cache behavior, the response headers policy affects the HTTP
	// headers that CloudFront includes in HTTP responses to requests that match
	// the cache behavior. CloudFront adds or removes response headers according
	// to the configuration of the response headers policy.
	//
	// For more information, see Adding or removing HTTP headers in CloudFront responses
	// (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/modifying-response-headers.html)
	// in the Amazon CloudFront Developer Guide.
	responseHeadersPolicy?: null | #ResponseHeadersPolicy_SDK @go(ResponseHeadersPolicy,*ResponseHeadersPolicy_SDK)
	type_?:                 null | string                     @go(Type,*string)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicyXSSProtection: {
	modeBlock?:  null | bool   @go(ModeBlock,*bool)
	override?:   null | bool   @go(Override,*bool)
	protection?: null | bool   @go(Protection,*bool)
	reportURI?:  null | string @go(ReportURI,*string)
}

// +kubebuilder:skipversion
#ResponseHeadersPolicy_SDK: {
	id?: null | string @go(ID,*string)

	// A response headers policy configuration.
	//
	// A response headers policy configuration contains metadata about the response
	// headers policy, and configurations for sets of HTTP response headers.
	responseHeadersPolicyConfig?: null | #ResponseHeadersPolicyConfig @go(ResponseHeadersPolicyConfig,*ResponseHeadersPolicyConfig)
}

// +kubebuilder:skipversion
#Restrictions: {
	// A complex type that controls the countries in which your content is distributed.
	// CloudFront determines the location of your users using MaxMind GeoIP databases.
	geoRestriction?: null | #GeoRestriction @go(GeoRestriction,*GeoRestriction)
}

// +kubebuilder:skipversion
#S3Origin: {
	domainName?:           null | string @go(DomainName,*string)
	originAccessIdentity?: null | string @go(OriginAccessIdentity,*string)
}

// +kubebuilder:skipversion
#S3OriginConfig: {
	originAccessIdentity?: null | string @go(OriginAccessIdentity,*string)
}

// +kubebuilder:skipversion
#SessionStickinessConfig: {
	idleTTL?:    null | int64 @go(IdleTTL,*int64)
	maximumTTL?: null | int64 @go(MaximumTTL,*int64)
}

// +kubebuilder:skipversion
#Signer: {
	awsAccountNumber?: null | string @go(AWSAccountNumber,*string)

	// A list of CloudFront key pair identifiers.
	keyPairIDs?: null | #KeyPairIDs @go(KeyPairIDs,*KeyPairIDs)
}

// +kubebuilder:skipversion
#StagingDistributionDNSNames: {
	quantity?: null | int64 @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#StatusCodes: {
	// List of status codes for origin failover.
	items?: [...null | int64] @go(Items,[]*int64)
}

// +kubebuilder:skipversion
#StreamingDistribution: {
	arn?: null | string @go(ARN,*string)

	// A list of Amazon Web Services accounts and the active CloudFront key pairs
	// in each account that CloudFront can use to verify the signatures of signed
	// URLs and signed cookies.
	activeTrustedSigners?: null | #ActiveTrustedSigners @go(ActiveTrustedSigners,*ActiveTrustedSigners)
	domainName?:           null | string                @go(DomainName,*string)
	id?:                   null | string                @go(ID,*string)
	status?:               null | string                @go(Status,*string)
}

// +kubebuilder:skipversion
#StreamingDistributionConfig: {
	// A complex type that contains information about CNAMEs (alternate domain names),
	// if any, for this distribution.
	aliases?:         null | #Aliases @go(Aliases,*Aliases)
	callerReference?: null | string   @go(CallerReference,*string)
	comment?:         null | string   @go(Comment,*string)
	enabled?:         null | bool     @go(Enabled,*bool)
	priceClass?:      null | string   @go(PriceClass,*string)

	// A list of Amazon Web Services accounts whose public keys CloudFront can use
	// to verify the signatures of signed URLs and signed cookies.
	trustedSigners?: null | #TrustedSigners @go(TrustedSigners,*TrustedSigners)
}

// +kubebuilder:skipversion
#StreamingDistributionList: {
	isTruncated?: null | bool   @go(IsTruncated,*bool)
	marker?:      null | string @go(Marker,*string)
	maxItems?:    null | int64  @go(MaxItems,*int64)
	nextMarker?:  null | string @go(NextMarker,*string)
	quantity?:    null | int64  @go(Quantity,*int64)
}

// +kubebuilder:skipversion
#StreamingDistributionSummary: {
	arn?: null | string @go(ARN,*string)

	// A complex type that contains information about CNAMEs (alternate domain names),
	// if any, for this distribution.
	aliases?:    null | #Aliases @go(Aliases,*Aliases)
	comment?:    null | string   @go(Comment,*string)
	domainName?: null | string   @go(DomainName,*string)
	enabled?:    null | bool     @go(Enabled,*bool)
	id?:         null | string   @go(ID,*string)
	priceClass?: null | string   @go(PriceClass,*string)
	status?:     null | string   @go(Status,*string)

	// A list of Amazon Web Services accounts whose public keys CloudFront can use
	// to verify the signatures of signed URLs and signed cookies.
	trustedSigners?: null | #TrustedSigners @go(TrustedSigners,*TrustedSigners)
}

// +kubebuilder:skipversion
#StreamingLoggingConfig: {
	bucket?:  null | string @go(Bucket,*string)
	enabled?: null | bool   @go(Enabled,*bool)
	prefix?:  null | string @go(Prefix,*string)
}

// +kubebuilder:skipversion
#TestResult: {
	computeUtilization?:   null | string @go(ComputeUtilization,*string)
	functionErrorMessage?: null | string @go(FunctionErrorMessage,*string)
	functionOutput?:       null | string @go(FunctionOutput,*string)
}

// +kubebuilder:skipversion
#TrustedKeyGroups: {
	enabled?: null | bool @go(Enabled,*bool)
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#TrustedSigners: {
	enabled?: null | bool @go(Enabled,*bool)
	items?: [...null | string] @go(Items,[]*string)
}

// +kubebuilder:skipversion
#ViewerCertificate: {
	aCMCertificateARN?:            null | string @go(ACMCertificateARN,*string)
	certificate?:                  null | string @go(Certificate,*string)
	certificateSource?:            null | string @go(CertificateSource,*string)
	cloudFrontDefaultCertificate?: null | bool   @go(CloudFrontDefaultCertificate,*bool)
	iamCertificateID?:             null | string @go(IAMCertificateID,*string)
	minimumProtocolVersion?:       null | string @go(MinimumProtocolVersion,*string)
	sslSupportMethod?:             null | string @go(SSLSupportMethod,*string)
}
