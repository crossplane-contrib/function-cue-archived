// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/kafka/v1alpha1

package v1alpha1

// +kubebuilder:skipversion
#BrokerEBSVolumeInfo: {
	kafkaBrokerNodeID?: null | string @go(KafkaBrokerNodeID,*string)

	// Contains information about provisioned throughput for EBS storage volumes
	// attached to kafka broker nodes.
	provisionedThroughput?: null | #ProvisionedThroughput @go(ProvisionedThroughput,*ProvisionedThroughput)
	volumeSizeGB?:          null | int64                  @go(VolumeSizeGB,*int64)
}

// +kubebuilder:skipversion
#BrokerLogs: {
	// Details of the CloudWatch Logs destination for broker logs.
	cloudWatchLogs?: null | #CloudWatchLogs @go(CloudWatchLogs,*CloudWatchLogs)

	// Firehose details for BrokerLogs.
	firehose?: null | #Firehose @go(Firehose,*Firehose)

	// The details of the Amazon S3 destination for broker logs.
	s3?: null | #S3 @go(S3,*S3)
}

// +kubebuilder:skipversion
#BrokerNodeGroupInfo: {
	// The distribution of broker nodes across Availability Zones. By default, broker
	// nodes are distributed among the Availability Zones of your Region. Currently,
	// the only supported value is DEFAULT. You can either specify this value explicitly
	// or leave it out.
	brokerAZDistribution?: null | string @go(BrokerAZDistribution,*string)
	clientSubnets?: [...null | string] @go(ClientSubnets,[]*string)

	// Information about the broker access configuration.
	connectivityInfo?: null | #ConnectivityInfo @go(ConnectivityInfo,*ConnectivityInfo)
	instanceType?:     null | string            @go(InstanceType,*string)
	securityGroups?: [...null | string] @go(SecurityGroups,[]*string)

	// Contains information about storage volumes attached to MSK broker nodes.
	storageInfo?: null | #StorageInfo @go(StorageInfo,*StorageInfo)
}

// +kubebuilder:skipversion
#BrokerNodeInfo: {
	attachedENIID?:      null | string @go(AttachedENIID,*string)
	clientSubnet?:       null | string @go(ClientSubnet,*string)
	clientVPCIPAddress?: null | string @go(ClientVPCIPAddress,*string)

	// Information about the current software installed on the cluster.
	currentBrokerSoftwareInfo?: null | #BrokerSoftwareInfo @go(CurrentBrokerSoftwareInfo,*BrokerSoftwareInfo)
	endpoints?: [...null | string] @go(Endpoints,[]*string)
}

// +kubebuilder:skipversion
#BrokerSoftwareInfo: {
	configurationARN?:      null | string @go(ConfigurationARN,*string)
	configurationRevision?: null | int64  @go(ConfigurationRevision,*int64)
	kafkaVersion?:          null | string @go(KafkaVersion,*string)
}

// +kubebuilder:skipversion
#ClientAuthentication: {
	sasl?: null | #SASL @go(SASL,*SASL)

	// Details for client authentication using TLS.
	tls?: null | #TLS @go(TLS,*TLS)

	// Contains information about unauthenticated traffic to the cluster.
	unauthenticated?: null | #Unauthenticated @go(Unauthenticated,*Unauthenticated)
}

// +kubebuilder:skipversion
#CloudWatchLogs: {
	enabled?:  null | bool   @go(Enabled,*bool)
	logGroup?: null | string @go(LogGroup,*string)
}

// +kubebuilder:skipversion
#ClusterInfo: {
	activeOperationARN?: null | string @go(ActiveOperationARN,*string)

	// Describes the setup to be used for Apache Kafka broker nodes in the cluster.
	brokerNodeGroupInfo?: null | #BrokerNodeGroupInfo @go(BrokerNodeGroupInfo,*BrokerNodeGroupInfo)

	// Includes all client authentication information.
	clientAuthentication?: null | #ClientAuthentication @go(ClientAuthentication,*ClientAuthentication)
	clusterARN?:           null | string                @go(ClusterARN,*string)
	clusterName?:          null | string                @go(ClusterName,*string)

	// Information about the current software installed on the cluster.
	currentBrokerSoftwareInfo?: null | #BrokerSoftwareInfo @go(CurrentBrokerSoftwareInfo,*BrokerSoftwareInfo)
	currentVersion?:            null | string              @go(CurrentVersion,*string)

	// Includes encryption-related information, such as the AWS KMS key used for
	// encrypting data at rest and whether you want MSK to encrypt your data in
	// transit.
	encryptionInfo?: null | #EncryptionInfo @go(EncryptionInfo,*EncryptionInfo)

	// Specifies which metrics are gathered for the MSK cluster. This property has
	// the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER,
	// and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each
	// of these levels of monitoring, see Monitoring (https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html).
	enhancedMonitoring?: null | string @go(EnhancedMonitoring,*string)

	// You can configure your MSK cluster to send broker logs to different destination
	// types. This is a container for the configuration details related to broker
	// logs.
	loggingInfo?:         null | #LoggingInfo @go(LoggingInfo,*LoggingInfo)
	numberOfBrokerNodes?: null | int64        @go(NumberOfBrokerNodes,*int64)

	// JMX and Node monitoring for the MSK cluster.
	openMonitoring?: null | #OpenMonitoring @go(OpenMonitoring,*OpenMonitoring)

	// The state of an Apache Kafka cluster.
	state?: null | string @go(State,*string)

	// Contains information about the state of the Amazon MSK cluster.
	stateInfo?: null | #StateInfo @go(StateInfo,*StateInfo)

	// Controls storage mode for various supported storage tiers.
	storageMode?: null | string @go(StorageMode,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	zookeeperConnectString?:    null | string @go(ZookeeperConnectString,*string)
	zookeeperConnectStringTLS?: null | string @go(ZookeeperConnectStringTLS,*string)
}

// +kubebuilder:skipversion
#ClusterOperationInfo: {
	clientRequestID?: null | string @go(ClientRequestID,*string)
	clusterARN?:      null | string @go(ClusterARN,*string)
	operationARN?:    null | string @go(OperationARN,*string)
	operationState?:  null | string @go(OperationState,*string)
	operationType?:   null | string @go(OperationType,*string)
}

// +kubebuilder:skipversion
#ClusterOperationStep: {
	stepName?: null | string @go(StepName,*string)
}

// +kubebuilder:skipversion
#ClusterOperationStepInfo: {
	stepStatus?: null | string @go(StepStatus,*string)
}

// +kubebuilder:skipversion
#Cluster_SDK: {
	activeOperationARN?: null | string @go(ActiveOperationARN,*string)
	clusterARN?:         null | string @go(ClusterARN,*string)
	clusterName?:        null | string @go(ClusterName,*string)
	currentVersion?:     null | string @go(CurrentVersion,*string)

	// The state of an Apache Kafka cluster.
	state?: null | string @go(State,*string)

	// Contains information about the state of the Amazon MSK cluster.
	stateInfo?: null | #StateInfo @go(StateInfo,*StateInfo)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// +kubebuilder:skipversion
#CompatibleKafkaVersion: {
	sourceVersion?: null | string @go(SourceVersion,*string)
	targetVersions?: [...null | string] @go(TargetVersions,[]*string)
}

// +kubebuilder:skipversion
#ConfigurationInfo: {
	arn?:      null | string @go(ARN,*string)
	revision?: null | int64  @go(Revision,*int64)
}

// +kubebuilder:skipversion
#ConfigurationRevision: {
	description?: null | string @go(Description,*string)
	revision?:    null | int64  @go(Revision,*int64)
}

// +kubebuilder:skipversion
#Configuration_SDK: {
	arn?:         null | string @go(ARN,*string)
	description?: null | string @go(Description,*string)
	kafkaVersions?: [...null | string] @go(KafkaVersions,[]*string)

	// Describes a configuration revision.
	latestRevision?: null | #ConfigurationRevision @go(LatestRevision,*ConfigurationRevision)
	name?:           null | string                 @go(Name,*string)

	// The state of a configuration.
	state?: null | string @go(State,*string)
}

// +kubebuilder:skipversion
#ConnectivityInfo: {
	// Broker public access control.
	publicAccess?: null | #PublicAccess @go(PublicAccess,*PublicAccess)
}

// +kubebuilder:skipversion
#EBSStorageInfo: {
	// Contains information about provisioned throughput for EBS storage volumes
	// attached to kafka broker nodes.
	provisionedThroughput?: null | #ProvisionedThroughput @go(ProvisionedThroughput,*ProvisionedThroughput)
	volumeSize?:            null | int64                  @go(VolumeSize,*int64)
}

// +kubebuilder:skipversion
#EncryptionAtRest: {
	dataVolumeKMSKeyID?: null | string @go(DataVolumeKMSKeyID,*string)
}

// +kubebuilder:skipversion
#EncryptionInTransit: {
	// Client-broker encryption in transit setting.
	clientBroker?: null | string @go(ClientBroker,*string)
	inCluster?:    null | bool   @go(InCluster,*bool)
}

// +kubebuilder:skipversion
#EncryptionInfo: {
	// The data-volume encryption details.
	encryptionAtRest?: null | #EncryptionAtRest @go(EncryptionAtRest,*EncryptionAtRest)

	// The settings for encrypting data in transit.
	encryptionInTransit?: null | #EncryptionInTransit @go(EncryptionInTransit,*EncryptionInTransit)
}

// +kubebuilder:skipversion
#ErrorInfo: {
	errorCode?:   null | string @go(ErrorCode,*string)
	errorString?: null | string @go(ErrorString,*string)
}

// +kubebuilder:skipversion
#Firehose: {
	deliveryStream?: null | string @go(DeliveryStream,*string)
	enabled?:        null | bool   @go(Enabled,*bool)
}

// +kubebuilder:skipversion
#IAM: {
	enabled?: null | bool @go(Enabled,*bool)
}

// +kubebuilder:skipversion
#JmxExporter: {
	enabledInBroker?: null | bool @go(EnabledInBroker,*bool)
}

// +kubebuilder:skipversion
#JmxExporterInfo: {
	enabledInBroker?: null | bool @go(EnabledInBroker,*bool)
}

// +kubebuilder:skipversion
#KafkaVersion: {
	version?: null | string @go(Version,*string)
}

// +kubebuilder:skipversion
#LoggingInfo: {
	// The broker logs configuration for this MSK cluster.
	brokerLogs?: null | #BrokerLogs @go(BrokerLogs,*BrokerLogs)
}

// +kubebuilder:skipversion
#MutableClusterInfo: {
	// Includes all client authentication information.
	clientAuthentication?: null | #ClientAuthentication @go(ClientAuthentication,*ClientAuthentication)

	// Information about the broker access configuration.
	connectivityInfo?: null | #ConnectivityInfo @go(ConnectivityInfo,*ConnectivityInfo)

	// Includes encryption-related information, such as the AWS KMS key used for
	// encrypting data at rest and whether you want MSK to encrypt your data in
	// transit.
	encryptionInfo?: null | #EncryptionInfo @go(EncryptionInfo,*EncryptionInfo)

	// Specifies which metrics are gathered for the MSK cluster. This property has
	// the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER,
	// and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each
	// of these levels of monitoring, see Monitoring (https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html).
	enhancedMonitoring?: null | string @go(EnhancedMonitoring,*string)
	instanceType?:       null | string @go(InstanceType,*string)
	kafkaVersion?:       null | string @go(KafkaVersion,*string)

	// You can configure your MSK cluster to send broker logs to different destination
	// types. This is a container for the configuration details related to broker
	// logs.
	loggingInfo?:         null | #LoggingInfo @go(LoggingInfo,*LoggingInfo)
	numberOfBrokerNodes?: null | int64        @go(NumberOfBrokerNodes,*int64)

	// JMX and Node monitoring for the MSK cluster.
	openMonitoring?: null | #OpenMonitoring @go(OpenMonitoring,*OpenMonitoring)

	// Controls storage mode for various supported storage tiers.
	storageMode?: null | string @go(StorageMode,*string)
}

// +kubebuilder:skipversion
#NodeExporter: {
	enabledInBroker?: null | bool @go(EnabledInBroker,*bool)
}

// +kubebuilder:skipversion
#NodeExporterInfo: {
	enabledInBroker?: null | bool @go(EnabledInBroker,*bool)
}

// +kubebuilder:skipversion
#NodeInfo: {
	addedToClusterTime?: null | string @go(AddedToClusterTime,*string)
	instanceType?:       null | string @go(InstanceType,*string)
	nodeARN?:            null | string @go(NodeARN,*string)
}

// +kubebuilder:skipversion
#OpenMonitoring: {
	// Prometheus settings for open monitoring.
	prometheus?: null | #Prometheus @go(Prometheus,*Prometheus)
}

// +kubebuilder:skipversion
#OpenMonitoringInfo: {
	// Prometheus settings.
	prometheus?: null | #PrometheusInfo @go(Prometheus,*PrometheusInfo)
}

// +kubebuilder:skipversion
#Prometheus: {
	// Indicates whether you want to enable or disable the JMX Exporter.
	jmxExporter?: null | #JmxExporter @go(JmxExporter,*JmxExporter)

	// Indicates whether you want to enable or disable the Node Exporter.
	nodeExporter?: null | #NodeExporter @go(NodeExporter,*NodeExporter)
}

// +kubebuilder:skipversion
#PrometheusInfo: {
	// Indicates whether you want to enable or disable the JMX Exporter.
	jmxExporter?: null | #JmxExporterInfo @go(JmxExporter,*JmxExporterInfo)

	// Indicates whether you want to enable or disable the Node Exporter.
	nodeExporter?: null | #NodeExporterInfo @go(NodeExporter,*NodeExporterInfo)
}

// +kubebuilder:skipversion
#Provisioned: {
	// Describes the setup to be used for Apache Kafka broker nodes in the cluster.
	brokerNodeGroupInfo?: null | #BrokerNodeGroupInfo @go(BrokerNodeGroupInfo,*BrokerNodeGroupInfo)

	// Includes all client authentication information.
	clientAuthentication?: null | #ClientAuthentication @go(ClientAuthentication,*ClientAuthentication)

	// Information about the current software installed on the cluster.
	currentBrokerSoftwareInfo?: null | #BrokerSoftwareInfo @go(CurrentBrokerSoftwareInfo,*BrokerSoftwareInfo)

	// Includes encryption-related information, such as the AWS KMS key used for
	// encrypting data at rest and whether you want MSK to encrypt your data in
	// transit.
	encryptionInfo?: null | #EncryptionInfo @go(EncryptionInfo,*EncryptionInfo)

	// Specifies which metrics are gathered for the MSK cluster. This property has
	// the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER,
	// and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each
	// of these levels of monitoring, see Monitoring (https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html).
	enhancedMonitoring?: null | string @go(EnhancedMonitoring,*string)

	// You can configure your MSK cluster to send broker logs to different destination
	// types. This is a container for the configuration details related to broker
	// logs.
	loggingInfo?:         null | #LoggingInfo @go(LoggingInfo,*LoggingInfo)
	numberOfBrokerNodes?: null | int64        @go(NumberOfBrokerNodes,*int64)

	// JMX and Node monitoring for the MSK cluster.
	openMonitoring?: null | #OpenMonitoringInfo @go(OpenMonitoring,*OpenMonitoringInfo)

	// Controls storage mode for various supported storage tiers.
	storageMode?:               null | string @go(StorageMode,*string)
	zookeeperConnectString?:    null | string @go(ZookeeperConnectString,*string)
	zookeeperConnectStringTLS?: null | string @go(ZookeeperConnectStringTLS,*string)
}

// +kubebuilder:skipversion
#ProvisionedRequest: {
	// Describes the setup to be used for Apache Kafka broker nodes in the cluster.
	brokerNodeGroupInfo?: null | #BrokerNodeGroupInfo @go(BrokerNodeGroupInfo,*BrokerNodeGroupInfo)

	// Includes all client authentication information.
	clientAuthentication?: null | #ClientAuthentication @go(ClientAuthentication,*ClientAuthentication)

	// Includes encryption-related information, such as the AWS KMS key used for
	// encrypting data at rest and whether you want MSK to encrypt your data in
	// transit.
	encryptionInfo?: null | #EncryptionInfo @go(EncryptionInfo,*EncryptionInfo)

	// Specifies which metrics are gathered for the MSK cluster. This property has
	// the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER,
	// and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each
	// of these levels of monitoring, see Monitoring (https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html).
	enhancedMonitoring?: null | string @go(EnhancedMonitoring,*string)
	kafkaVersion?:       null | string @go(KafkaVersion,*string)

	// You can configure your MSK cluster to send broker logs to different destination
	// types. This is a container for the configuration details related to broker
	// logs.
	loggingInfo?:         null | #LoggingInfo @go(LoggingInfo,*LoggingInfo)
	numberOfBrokerNodes?: null | int64        @go(NumberOfBrokerNodes,*int64)

	// JMX and Node monitoring for the MSK cluster.
	openMonitoring?: null | #OpenMonitoringInfo @go(OpenMonitoring,*OpenMonitoringInfo)

	// Controls storage mode for various supported storage tiers.
	storageMode?: null | string @go(StorageMode,*string)
}

// +kubebuilder:skipversion
#ProvisionedThroughput: {
	enabled?:          null | bool  @go(Enabled,*bool)
	volumeThroughput?: null | int64 @go(VolumeThroughput,*int64)
}

// +kubebuilder:skipversion
#PublicAccess: {
	type_?: null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#S3: {
	bucket?:  null | string @go(Bucket,*string)
	enabled?: null | bool   @go(Enabled,*bool)
	prefix?:  null | string @go(Prefix,*string)
}

// +kubebuilder:skipversion
#SASL: {
	iam?:   null | #IAM   @go(IAM,*IAM)
	scram?: null | #SCRAM @go(SCRAM,*SCRAM)
}

// +kubebuilder:skipversion
#SCRAM: {
	enabled?: null | bool @go(Enabled,*bool)
}

// +kubebuilder:skipversion
#ServerlessSASL: {
	iam?: null | #IAM @go(IAM,*IAM)
}

// +kubebuilder:skipversion
#StateInfo: {
	code?:    null | string @go(Code,*string)
	message?: null | string @go(Message,*string)
}

// +kubebuilder:skipversion
#StorageInfo: {
	// Contains information about the EBS storage volumes attached to Apache Kafka
	// broker nodes.
	ebsStorageInfo?: null | #EBSStorageInfo @go(EBSStorageInfo,*EBSStorageInfo)
}

// +kubebuilder:skipversion
#TLS: {
	certificateAuthorityARNList?: [...null | string] @go(CertificateAuthorityARNList,[]*string)
	enabled?: null | bool @go(Enabled,*bool)
}

// +kubebuilder:skipversion
#Unauthenticated: {
	enabled?: null | bool @go(Enabled,*bool)
}

// +kubebuilder:skipversion
#UnprocessedSCRAMSecret: {
	errorCode?:    null | string @go(ErrorCode,*string)
	errorMessage?: null | string @go(ErrorMessage,*string)
	secretARN?:    null | string @go(SecretARN,*string)
}

// +kubebuilder:skipversion
#VPCConfig: {
	securityGroupIDs?: [...null | string] @go(SecurityGroupIDs,[]*string)
	subnetIDs?: [...null | string] @go(SubnetIDs,[]*string)
}

// +kubebuilder:skipversion
#ZookeeperNodeInfo: {
	attachedENIID?:      null | string @go(AttachedENIID,*string)
	clientVPCIPAddress?: null | string @go(ClientVPCIPAddress,*string)
	endpoints?: [...null | string] @go(Endpoints,[]*string)
	zookeeperVersion?: null | string @go(ZookeeperVersion,*string)
}
