// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/kinesis/v1alpha1

package v1alpha1

// StreamParameters defines the desired state of Stream
#StreamParameters: {
	// Region is which region the Stream will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The number of shards that the stream will use. The throughput of the stream
	// is a function of the number of shards; more shards are required for greater
	// provisioned throughput.
	shardCount?: null | int64 @go(ShardCount,*int64)

	// Indicates the capacity mode of the data stream. Currently, in Kinesis Data
	// Streams, you can choose between an on-demand capacity mode and a provisioned
	// capacity mode for your data streams.
	streamModeDetails?: null | #StreamModeDetails @go(StreamModeDetails,*StreamModeDetails)

	#CustomStreamParameters
}

// StreamSpec defines the desired state of Stream
#StreamSpec: {
	forProvider: #StreamParameters @go(ForProvider)
}

// StreamObservation defines the observed state of Stream
#StreamObservation: {
	// The server-side encryption type used on the stream. This parameter can be
	// one of the following values:
	//
	//    * NONE: Do not encrypt the records in the stream.
	//
	//    * KMS: Use server-side encryption on the records in the stream using a
	//    customer-managed Amazon Web Services KMS key.
	encryptionType?: null | string @go(EncryptionType,*string)

	// Represents the current enhanced monitoring settings of the stream.
	enhancedMonitoring?: [...null | #EnhancedMetrics] @go(EnhancedMonitoring,[]*EnhancedMetrics)

	// If set to true, more shards in the stream are available to describe.
	hasMoreShards?: null | bool @go(HasMoreShards,*bool)

	// The GUID for the customer-managed Amazon Web Services KMS key to use for
	// encryption. This value can be a globally unique identifier, a fully specified
	// ARN to either an alias or a key, or an alias name prefixed by "alias/".You
	// can also use a master key owned by Kinesis Data Streams by specifying the
	// alias aws/kinesis.
	//
	//    * Key ARN example: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
	//
	//    * Alias ARN example: arn:aws:kms:us-east-1:123456789012:alias/MyAliasName
	//
	//    * Globally unique key ID example: 12345678-1234-1234-1234-123456789012
	//
	//    * Alias name example: alias/MyAliasName
	//
	//    * Master key owned by Kinesis Data Streams: alias/aws/kinesis
	keyID?: null | string @go(KeyID,*string)

	// The current retention period, in hours. Minimum value of 24. Maximum value
	// of 168.
	retentionPeriodHours?: null | int64 @go(RetentionPeriodHours,*int64)

	// The shards that comprise the stream.
	shards?: [...null | #Shard] @go(Shards,[]*Shard)

	// The Amazon Resource Name (ARN) for the stream being described.
	streamARN?: null | string @go(StreamARN,*string)

	// The current status of the stream being described. The stream status is one
	// of the following states:
	//
	//    * CREATING - The stream is being created. Kinesis Data Streams immediately
	//    returns and sets StreamStatus to CREATING.
	//
	//    * DELETING - The stream is being deleted. The specified stream is in the
	//    DELETING state until Kinesis Data Streams completes the deletion.
	//
	//    * ACTIVE - The stream exists and is ready for read and write operations
	//    or deletion. You should perform read and write operations only on an ACTIVE
	//    stream.
	//
	//    * UPDATING - Shards in the stream are being merged or split. Read and
	//    write operations continue to work while the stream is in the UPDATING
	//    state.
	streamStatus?: null | string @go(StreamStatus,*string)
}

// StreamStatus defines the observed state of Stream.
#StreamStatus: {
	atProvider?: #StreamObservation @go(AtProvider)
}

// Stream is the Schema for the Streams API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Stream: {
	spec:    #StreamSpec   @go(Spec)
	status?: #StreamStatus @go(Status)
}

// StreamList contains a list of Streams
#StreamList: {
	items: [...#Stream] @go(Items,[]Stream)
}
