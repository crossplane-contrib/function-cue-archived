// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/firehose/v1alpha1

package v1alpha1

// DeliveryStreamParameters defines the desired state of DeliveryStream
#DeliveryStreamParameters: {
	// Region is which region the DeliveryStream will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The destination in the Serverless offering for Amazon OpenSearch Service.
	// You can specify only one destination.
	amazonOpenSearchServerlessDestinationConfiguration?: null | #AmazonOpenSearchServerlessDestinationConfiguration @go(AmazonOpenSearchServerlessDestinationConfiguration,*AmazonOpenSearchServerlessDestinationConfiguration)

	// The destination in Amazon OpenSearch Service. You can specify only one destination.
	amazonopensearchserviceDestinationConfiguration?: null | #AmazonopensearchserviceDestinationConfiguration @go(AmazonopensearchserviceDestinationConfiguration,*AmazonopensearchserviceDestinationConfiguration)

	// Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed
	// for Server-Side Encryption (SSE).
	deliveryStreamEncryptionConfigurationInput?: null | #DeliveryStreamEncryptionConfigurationInput @go(DeliveryStreamEncryptionConfigurationInput,*DeliveryStreamEncryptionConfigurationInput)

	// The name of the delivery stream. This name must be unique per Amazon Web
	// Services account in the same Amazon Web Services Region. If the delivery
	// streams are in different accounts or different Regions, you can have multiple
	// delivery streams with the same name.
	// +kubebuilder:validation:Required
	deliveryStreamName?: null | string @go(DeliveryStreamName,*string)

	// The delivery stream type. This parameter can be one of the following values:
	//
	//    * DirectPut: Provider applications access the delivery stream directly.
	//
	//    * KinesisStreamAsSource: The delivery stream uses a Kinesis data stream
	//    as a source.
	deliveryStreamType?: null | string @go(DeliveryStreamType,*string)

	// The destination in Amazon ES. You can specify only one destination.
	elasticsearchDestinationConfiguration?: null | #ElasticsearchDestinationConfiguration @go(ElasticsearchDestinationConfiguration,*ElasticsearchDestinationConfiguration)

	// The destination in Amazon S3. You can specify only one destination.
	extendedS3DestinationConfiguration?: null | #ExtendedS3DestinationConfiguration @go(ExtendedS3DestinationConfiguration,*ExtendedS3DestinationConfiguration)

	// Enables configuring Kinesis Firehose to deliver data to any HTTP endpoint
	// destination. You can specify only one destination.
	httpEndpointDestinationConfiguration?: null | #HTTPEndpointDestinationConfiguration @go(HTTPEndpointDestinationConfiguration,*HTTPEndpointDestinationConfiguration)

	// When a Kinesis data stream is used as the source for the delivery stream,
	// a KinesisStreamSourceConfiguration containing the Kinesis data stream Amazon
	// Resource Name (ARN) and the role ARN for the source stream.
	kinesisStreamSourceConfiguration?: null | #KinesisStreamSourceConfiguration @go(KinesisStreamSourceConfiguration,*KinesisStreamSourceConfiguration)

	// The destination in Amazon Redshift. You can specify only one destination.
	redshiftDestinationConfiguration?: null | #RedshiftDestinationConfiguration @go(RedshiftDestinationConfiguration,*RedshiftDestinationConfiguration)

	// [Deprecated] The destination in Amazon S3. You can specify only one destination.
	s3DestinationConfiguration?: null | #S3DestinationConfiguration @go(S3DestinationConfiguration,*S3DestinationConfiguration)

	// The destination in Splunk. You can specify only one destination.
	splunkDestinationConfiguration?: null | #SplunkDestinationConfiguration @go(SplunkDestinationConfiguration,*SplunkDestinationConfiguration)

	// A set of tags to assign to the delivery stream. A tag is a key-value pair
	// that you can define and assign to Amazon Web Services resources. Tags are
	// metadata. For example, you can add friendly names and descriptions or other
	// types of information that can help you distinguish the delivery stream. For
	// more information about tags, see Using Cost Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
	// in the Amazon Web Services Billing and Cost Management User Guide.
	//
	// You can specify up to 50 tags when creating a delivery stream.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	#CustomDeliveryStreamParameters
}

// DeliveryStreamSpec defines the desired state of DeliveryStream
#DeliveryStreamSpec: {
	forProvider: #DeliveryStreamParameters @go(ForProvider)
}

// DeliveryStreamObservation defines the observed state of DeliveryStream
#DeliveryStreamObservation: {
	// The Amazon Resource Name (ARN) of the delivery stream. For more information,
	// see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces
	// (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
	deliveryStreamARN?: null | string @go(DeliveryStreamARN,*string)

	// The status of the delivery stream. If the status of a delivery stream is
	// CREATING_FAILED, this status doesn't change, and you can't invoke CreateDeliveryStream
	// again on it. However, you can invoke the DeleteDeliveryStream operation to
	// delete it.
	deliveryStreamStatus?: null | string @go(DeliveryStreamStatus,*string)
}

// DeliveryStreamStatus defines the observed state of DeliveryStream.
#DeliveryStreamStatus: {
	atProvider?: #DeliveryStreamObservation @go(AtProvider)
}

// DeliveryStream is the Schema for the DeliveryStreams API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DeliveryStream: {
	spec:    #DeliveryStreamSpec   @go(Spec)
	status?: #DeliveryStreamStatus @go(Status)
}

// DeliveryStreamList contains a list of DeliveryStreams
#DeliveryStreamList: {
	items: [...#DeliveryStream] @go(Items,[]DeliveryStream)
}
