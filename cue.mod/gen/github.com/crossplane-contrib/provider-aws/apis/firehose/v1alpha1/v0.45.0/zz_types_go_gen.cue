// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/firehose/v1alpha1

package v1alpha1

// +kubebuilder:skipversion
#AmazonOpenSearchServerlessBufferingHints: {
	intervalInSeconds?: null | int64 @go(IntervalInSeconds,*int64)
	sizeInMBs?:         null | int64 @go(SizeInMBs,*int64)
}

// +kubebuilder:skipversion
#AmazonOpenSearchServerlessDestinationConfiguration: {
	// Describes the buffering to perform before delivering data to the Serverless
	// offering for Amazon OpenSearch Service destination.
	bufferingHints?: null | #AmazonOpenSearchServerlessBufferingHints @go(BufferingHints,*AmazonOpenSearchServerlessBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	collectionEndpoint?:       null | string                    @go(CollectionEndpoint,*string)
	indexName?:                null | string                    @go(IndexName,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to the Serverless offering for Amazon OpenSearch Service.
	retryOptions?: null | #AmazonOpenSearchServerlessRetryOptions @go(RetryOptions,*AmazonOpenSearchServerlessRetryOptions)
	roleARN?:      null | string                                  @go(RoleARN,*string)
	s3BackupMode?: null | string                                  @go(S3BackupMode,*string)

	// Describes the configuration of a destination in Amazon S3.
	s3Configuration?: null | #S3DestinationConfiguration @go(S3Configuration,*S3DestinationConfiguration)

	// The details of the VPC of the Amazon ES destination.
	vpcConfiguration?: null | #VPCConfiguration @go(VPCConfiguration,*VPCConfiguration)
}

// +kubebuilder:skipversion
#AmazonOpenSearchServerlessDestinationDescription: {
	// Describes the buffering to perform before delivering data to the Serverless
	// offering for Amazon OpenSearch Service destination.
	bufferingHints?: null | #AmazonOpenSearchServerlessBufferingHints @go(BufferingHints,*AmazonOpenSearchServerlessBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	collectionEndpoint?:       null | string                    @go(CollectionEndpoint,*string)
	indexName?:                null | string                    @go(IndexName,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to the Serverless offering for Amazon OpenSearch Service.
	retryOptions?: null | #AmazonOpenSearchServerlessRetryOptions @go(RetryOptions,*AmazonOpenSearchServerlessRetryOptions)
	roleARN?:      null | string                                  @go(RoleARN,*string)
	s3BackupMode?: null | string                                  @go(S3BackupMode,*string)

	// Describes a destination in Amazon S3.
	s3DestinationDescription?: null | #S3DestinationDescription @go(S3DestinationDescription,*S3DestinationDescription)

	// The details of the VPC of the Amazon ES destination.
	vpcConfigurationDescription?: null | #VPCConfigurationDescription @go(VPCConfigurationDescription,*VPCConfigurationDescription)
}

// +kubebuilder:skipversion
#AmazonOpenSearchServerlessDestinationUpdate: {
	// Describes the buffering to perform before delivering data to the Serverless
	// offering for Amazon OpenSearch Service destination.
	bufferingHints?: null | #AmazonOpenSearchServerlessBufferingHints @go(BufferingHints,*AmazonOpenSearchServerlessBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	collectionEndpoint?:       null | string                    @go(CollectionEndpoint,*string)
	indexName?:                null | string                    @go(IndexName,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to the Serverless offering for Amazon OpenSearch Service.
	retryOptions?: null | #AmazonOpenSearchServerlessRetryOptions @go(RetryOptions,*AmazonOpenSearchServerlessRetryOptions)
	roleARN?:      null | string                                  @go(RoleARN,*string)
}

// +kubebuilder:skipversion
#AmazonOpenSearchServerlessRetryOptions: {
	durationInSeconds?: null | int64 @go(DurationInSeconds,*int64)
}

// +kubebuilder:skipversion
#AmazonopensearchserviceBufferingHints: {
	intervalInSeconds?: null | int64 @go(IntervalInSeconds,*int64)
	sizeInMBs?:         null | int64 @go(SizeInMBs,*int64)
}

// +kubebuilder:skipversion
#AmazonopensearchserviceDestinationConfiguration: {
	// Describes the buffering to perform before delivering data to the Amazon OpenSearch
	// Service destination.
	bufferingHints?: null | #AmazonopensearchserviceBufferingHints @go(BufferingHints,*AmazonopensearchserviceBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	clusterEndpoint?:          null | string                    @go(ClusterEndpoint,*string)
	domainARN?:                null | string                    @go(DomainARN,*string)
	indexName?:                null | string                    @go(IndexName,*string)
	indexRotationPeriod?:      null | string                    @go(IndexRotationPeriod,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon OpenSearch Service.
	retryOptions?: null | #AmazonopensearchserviceRetryOptions @go(RetryOptions,*AmazonopensearchserviceRetryOptions)
	roleARN?:      null | string                               @go(RoleARN,*string)
	s3BackupMode?: null | string                               @go(S3BackupMode,*string)

	// Describes the configuration of a destination in Amazon S3.
	s3Configuration?: null | #S3DestinationConfiguration @go(S3Configuration,*S3DestinationConfiguration)
	typeName?:        null | string                      @go(TypeName,*string)

	// The details of the VPC of the Amazon ES destination.
	vpcConfiguration?: null | #VPCConfiguration @go(VPCConfiguration,*VPCConfiguration)
}

// +kubebuilder:skipversion
#AmazonopensearchserviceDestinationDescription: {
	// Describes the buffering to perform before delivering data to the Amazon OpenSearch
	// Service destination.
	bufferingHints?: null | #AmazonopensearchserviceBufferingHints @go(BufferingHints,*AmazonopensearchserviceBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	clusterEndpoint?:          null | string                    @go(ClusterEndpoint,*string)
	domainARN?:                null | string                    @go(DomainARN,*string)
	indexName?:                null | string                    @go(IndexName,*string)
	indexRotationPeriod?:      null | string                    @go(IndexRotationPeriod,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon OpenSearch Service.
	retryOptions?: null | #AmazonopensearchserviceRetryOptions @go(RetryOptions,*AmazonopensearchserviceRetryOptions)
	roleARN?:      null | string                               @go(RoleARN,*string)
	s3BackupMode?: null | string                               @go(S3BackupMode,*string)

	// Describes a destination in Amazon S3.
	s3DestinationDescription?: null | #S3DestinationDescription @go(S3DestinationDescription,*S3DestinationDescription)
	typeName?:                 null | string                    @go(TypeName,*string)

	// The details of the VPC of the Amazon ES destination.
	vpcConfigurationDescription?: null | #VPCConfigurationDescription @go(VPCConfigurationDescription,*VPCConfigurationDescription)
}

// +kubebuilder:skipversion
#AmazonopensearchserviceDestinationUpdate: {
	// Describes the buffering to perform before delivering data to the Amazon OpenSearch
	// Service destination.
	bufferingHints?: null | #AmazonopensearchserviceBufferingHints @go(BufferingHints,*AmazonopensearchserviceBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	clusterEndpoint?:          null | string                    @go(ClusterEndpoint,*string)
	domainARN?:                null | string                    @go(DomainARN,*string)
	indexName?:                null | string                    @go(IndexName,*string)
	indexRotationPeriod?:      null | string                    @go(IndexRotationPeriod,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon OpenSearch Service.
	retryOptions?: null | #AmazonopensearchserviceRetryOptions @go(RetryOptions,*AmazonopensearchserviceRetryOptions)
	roleARN?:      null | string                               @go(RoleARN,*string)
	typeName?:     null | string                               @go(TypeName,*string)
}

// +kubebuilder:skipversion
#AmazonopensearchserviceRetryOptions: {
	durationInSeconds?: null | int64 @go(DurationInSeconds,*int64)
}

// +kubebuilder:skipversion
#BufferingHints: {
	intervalInSeconds?: null | int64 @go(IntervalInSeconds,*int64)
	sizeInMBs?:         null | int64 @go(SizeInMBs,*int64)
}

// +kubebuilder:skipversion
#CloudWatchLoggingOptions: {
	enabled?:       null | bool   @go(Enabled,*bool)
	logGroupName?:  null | string @go(LogGroupName,*string)
	logStreamName?: null | string @go(LogStreamName,*string)
}

// +kubebuilder:skipversion
#CopyCommand: {
	copyOptions?:      null | string @go(CopyOptions,*string)
	dataTableColumns?: null | string @go(DataTableColumns,*string)
	dataTableName?:    null | string @go(DataTableName,*string)
}

// +kubebuilder:skipversion
#DataFormatConversionConfiguration: {
	enabled?: null | bool @go(Enabled,*bool)

	// Specifies the deserializer you want to use to convert the format of the input
	// data. This parameter is required if Enabled is set to true.
	inputFormatConfiguration?: null | #InputFormatConfiguration @go(InputFormatConfiguration,*InputFormatConfiguration)

	// Specifies the serializer that you want Kinesis Data Firehose to use to convert
	// the format of your data before it writes it to Amazon S3. This parameter
	// is required if Enabled is set to true.
	outputFormatConfiguration?: null | #OutputFormatConfiguration @go(OutputFormatConfiguration,*OutputFormatConfiguration)

	// Specifies the schema to which you want Kinesis Data Firehose to configure
	// your data before it writes it to Amazon S3. This parameter is required if
	// Enabled is set to true.
	schemaConfiguration?: null | #SchemaConfiguration @go(SchemaConfiguration,*SchemaConfiguration)
}

// +kubebuilder:skipversion
#DeliveryStreamDescription: {
	deliveryStreamARN?: null | string @go(DeliveryStreamARN,*string)

	// Contains information about the server-side encryption (SSE) status for the
	// delivery stream, the type customer master key (CMK) in use, if any, and the
	// ARN of the CMK. You can get DeliveryStreamEncryptionConfiguration by invoking
	// the DescribeDeliveryStream operation.
	deliveryStreamEncryptionConfiguration?: null | #DeliveryStreamEncryptionConfiguration @go(DeliveryStreamEncryptionConfiguration,*DeliveryStreamEncryptionConfiguration)
	deliveryStreamName?:                    null | string                                 @go(DeliveryStreamName,*string)
	deliveryStreamStatus?:                  null | string                                 @go(DeliveryStreamStatus,*string)
	deliveryStreamType?:                    null | string                                 @go(DeliveryStreamType,*string)
	destinations?: [...null | #DestinationDescription] @go(Destinations,[]*DestinationDescription)

	// Provides details in case one of the following operations fails due to an
	// error related to KMS: CreateDeliveryStream, DeleteDeliveryStream, StartDeliveryStreamEncryption,
	// StopDeliveryStreamEncryption.
	failureDescription?:  null | #FailureDescription @go(FailureDescription,*FailureDescription)
	hasMoreDestinations?: null | bool                @go(HasMoreDestinations,*bool)

	// Details about a Kinesis data stream used as the source for a Kinesis Data
	// Firehose delivery stream.
	source?:    null | #SourceDescription @go(Source,*SourceDescription)
	versionID?: null | string             @go(VersionID,*string)
}

// +kubebuilder:skipversion
#DeliveryStreamEncryptionConfiguration: {
	// Provides details in case one of the following operations fails due to an
	// error related to KMS: CreateDeliveryStream, DeleteDeliveryStream, StartDeliveryStreamEncryption,
	// StopDeliveryStreamEncryption.
	failureDescription?: null | #FailureDescription @go(FailureDescription,*FailureDescription)
	keyARN?:             null | string              @go(KeyARN,*string)
	keyType?:            null | string              @go(KeyType,*string)
	status?:             null | string              @go(Status,*string)
}

// +kubebuilder:skipversion
#DeliveryStreamEncryptionConfigurationInput: {
	keyARN?:  null | string @go(KeyARN,*string)
	keyType?: null | string @go(KeyType,*string)
}

// +kubebuilder:skipversion
#Deserializer: {
	// The native Hive / HCatalog JsonSerDe. Used by Kinesis Data Firehose for deserializing
	// data, which means converting it from the JSON format in preparation for serializing
	// it to the Parquet or ORC format. This is one of two deserializers you can
	// choose, depending on which one offers the functionality you need. The other
	// option is the OpenX SerDe.
	hiveJSONSerDe?: null | #HiveJSONSerDe @go(HiveJSONSerDe,*HiveJSONSerDe)

	// The OpenX SerDe. Used by Kinesis Data Firehose for deserializing data, which
	// means converting it from the JSON format in preparation for serializing it
	// to the Parquet or ORC format. This is one of two deserializers you can choose,
	// depending on which one offers the functionality you need. The other option
	// is the native Hive / HCatalog JsonSerDe.
	openXJSONSerDe?: null | #OpenXJSONSerDe @go(OpenXJSONSerDe,*OpenXJSONSerDe)
}

// +kubebuilder:skipversion
#DestinationDescription: {
	// The destination description in the Serverless offering for Amazon OpenSearch
	// Service.
	amazonOpenSearchServerlessDestinationDescription?: null | #AmazonOpenSearchServerlessDestinationDescription @go(AmazonOpenSearchServerlessDestinationDescription,*AmazonOpenSearchServerlessDestinationDescription)

	// The destination description in Amazon OpenSearch Service.
	amazonopensearchserviceDestinationDescription?: null | #AmazonopensearchserviceDestinationDescription @go(AmazonopensearchserviceDestinationDescription,*AmazonopensearchserviceDestinationDescription)
	destinationID?:                                 null | string                                         @go(DestinationID,*string)

	// The destination description in Amazon ES.
	elasticsearchDestinationDescription?: null | #ElasticsearchDestinationDescription @go(ElasticsearchDestinationDescription,*ElasticsearchDestinationDescription)

	// Describes a destination in Amazon S3.
	extendedS3DestinationDescription?: null | #ExtendedS3DestinationDescription @go(ExtendedS3DestinationDescription,*ExtendedS3DestinationDescription)

	// Describes the HTTP endpoint destination.
	httpEndpointDestinationDescription?: null | #HTTPEndpointDestinationDescription @go(HTTPEndpointDestinationDescription,*HTTPEndpointDestinationDescription)

	// Describes a destination in Amazon Redshift.
	redshiftDestinationDescription?: null | #RedshiftDestinationDescription @go(RedshiftDestinationDescription,*RedshiftDestinationDescription)

	// Describes a destination in Amazon S3.
	s3DestinationDescription?: null | #S3DestinationDescription @go(S3DestinationDescription,*S3DestinationDescription)

	// Describes a destination in Splunk.
	splunkDestinationDescription?: null | #SplunkDestinationDescription @go(SplunkDestinationDescription,*SplunkDestinationDescription)
}

// +kubebuilder:skipversion
#DynamicPartitioningConfiguration: {
	enabled?: null | bool @go(Enabled,*bool)

	// The retry behavior in case Kinesis Data Firehose is unable to deliver data
	// to an Amazon S3 prefix.
	retryOptions?: null | #RetryOptions @go(RetryOptions,*RetryOptions)
}

// +kubebuilder:skipversion
#ElasticsearchBufferingHints: {
	intervalInSeconds?: null | int64 @go(IntervalInSeconds,*int64)
	sizeInMBs?:         null | int64 @go(SizeInMBs,*int64)
}

// +kubebuilder:skipversion
#ElasticsearchDestinationConfiguration: {
	// Describes the buffering to perform before delivering data to the Amazon ES
	// destination.
	bufferingHints?: null | #ElasticsearchBufferingHints @go(BufferingHints,*ElasticsearchBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	clusterEndpoint?:          null | string                    @go(ClusterEndpoint,*string)
	domainARN?:                null | string                    @go(DomainARN,*string)
	indexName?:                null | string                    @go(IndexName,*string)
	indexRotationPeriod?:      null | string                    @go(IndexRotationPeriod,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon ES.
	retryOptions?: null | #ElasticsearchRetryOptions @go(RetryOptions,*ElasticsearchRetryOptions)
	roleARN?:      null | string                     @go(RoleARN,*string)
	s3BackupMode?: null | string                     @go(S3BackupMode,*string)

	// Describes the configuration of a destination in Amazon S3.
	s3Configuration?: null | #S3DestinationConfiguration @go(S3Configuration,*S3DestinationConfiguration)
	typeName?:        null | string                      @go(TypeName,*string)

	// The details of the VPC of the Amazon ES destination.
	vpcConfiguration?: null | #VPCConfiguration @go(VPCConfiguration,*VPCConfiguration)
}

// +kubebuilder:skipversion
#ElasticsearchDestinationDescription: {
	// Describes the buffering to perform before delivering data to the Amazon ES
	// destination.
	bufferingHints?: null | #ElasticsearchBufferingHints @go(BufferingHints,*ElasticsearchBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	clusterEndpoint?:          null | string                    @go(ClusterEndpoint,*string)
	domainARN?:                null | string                    @go(DomainARN,*string)
	indexName?:                null | string                    @go(IndexName,*string)
	indexRotationPeriod?:      null | string                    @go(IndexRotationPeriod,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon ES.
	retryOptions?: null | #ElasticsearchRetryOptions @go(RetryOptions,*ElasticsearchRetryOptions)
	roleARN?:      null | string                     @go(RoleARN,*string)
	s3BackupMode?: null | string                     @go(S3BackupMode,*string)

	// Describes a destination in Amazon S3.
	s3DestinationDescription?: null | #S3DestinationDescription @go(S3DestinationDescription,*S3DestinationDescription)
	typeName?:                 null | string                    @go(TypeName,*string)

	// The details of the VPC of the Amazon ES destination.
	vpcConfigurationDescription?: null | #VPCConfigurationDescription @go(VPCConfigurationDescription,*VPCConfigurationDescription)
}

// +kubebuilder:skipversion
#ElasticsearchDestinationUpdate: {
	// Describes the buffering to perform before delivering data to the Amazon ES
	// destination.
	bufferingHints?: null | #ElasticsearchBufferingHints @go(BufferingHints,*ElasticsearchBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	clusterEndpoint?:          null | string                    @go(ClusterEndpoint,*string)
	domainARN?:                null | string                    @go(DomainARN,*string)
	indexName?:                null | string                    @go(IndexName,*string)
	indexRotationPeriod?:      null | string                    @go(IndexRotationPeriod,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon ES.
	retryOptions?: null | #ElasticsearchRetryOptions @go(RetryOptions,*ElasticsearchRetryOptions)
	roleARN?:      null | string                     @go(RoleARN,*string)
	typeName?:     null | string                     @go(TypeName,*string)
}

// +kubebuilder:skipversion
#ElasticsearchRetryOptions: {
	durationInSeconds?: null | int64 @go(DurationInSeconds,*int64)
}

// +kubebuilder:skipversion
#EncryptionConfiguration: {
	// Describes an encryption key for a destination in Amazon S3.
	kmsEncryptionConfig?: null | #KMSEncryptionConfig @go(KMSEncryptionConfig,*KMSEncryptionConfig)
	noEncryptionConfig?:  null | string               @go(NoEncryptionConfig,*string)
}

// +kubebuilder:skipversion
#ExtendedS3DestinationConfiguration: {
	bucketARN?: null | string @go(BucketARN,*string)

	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	bufferingHints?: null | #BufferingHints @go(BufferingHints,*BufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	compressionFormat?:        null | string                    @go(CompressionFormat,*string)

	// Specifies that you want Kinesis Data Firehose to convert data from the JSON
	// format to the Parquet or ORC format before writing it to Amazon S3. Kinesis
	// Data Firehose uses the serializer and deserializer that you specify, in addition
	// to the column information from the Amazon Web Services Glue table, to deserialize
	// your input data from JSON and then serialize it to the Parquet or ORC format.
	// For more information, see Kinesis Data Firehose Record Format Conversion
	// (https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html).
	dataFormatConversionConfiguration?: null | #DataFormatConversionConfiguration @go(DataFormatConversionConfiguration,*DataFormatConversionConfiguration)

	// The configuration of the dynamic partitioning mechanism that creates smaller
	// data sets from the streaming data by partitioning it based on partition keys.
	// Currently, dynamic partitioning is only supported for Amazon S3 destinations.
	dynamicPartitioningConfiguration?: null | #DynamicPartitioningConfiguration @go(DynamicPartitioningConfiguration,*DynamicPartitioningConfiguration)

	// Describes the encryption for a destination in Amazon S3.
	encryptionConfiguration?: null | #EncryptionConfiguration @go(EncryptionConfiguration,*EncryptionConfiguration)
	errorOutputPrefix?:       null | string                   @go(ErrorOutputPrefix,*string)
	prefix?:                  null | string                   @go(Prefix,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)
	roleARN?:                 null | string                   @go(RoleARN,*string)

	// Describes the configuration of a destination in Amazon S3.
	s3BackupConfiguration?: null | #S3DestinationConfiguration @go(S3BackupConfiguration,*S3DestinationConfiguration)
	s3BackupMode?:          null | string                      @go(S3BackupMode,*string)
}

// +kubebuilder:skipversion
#ExtendedS3DestinationDescription: {
	bucketARN?: null | string @go(BucketARN,*string)

	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	bufferingHints?: null | #BufferingHints @go(BufferingHints,*BufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	compressionFormat?:        null | string                    @go(CompressionFormat,*string)

	// Specifies that you want Kinesis Data Firehose to convert data from the JSON
	// format to the Parquet or ORC format before writing it to Amazon S3. Kinesis
	// Data Firehose uses the serializer and deserializer that you specify, in addition
	// to the column information from the Amazon Web Services Glue table, to deserialize
	// your input data from JSON and then serialize it to the Parquet or ORC format.
	// For more information, see Kinesis Data Firehose Record Format Conversion
	// (https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html).
	dataFormatConversionConfiguration?: null | #DataFormatConversionConfiguration @go(DataFormatConversionConfiguration,*DataFormatConversionConfiguration)

	// The configuration of the dynamic partitioning mechanism that creates smaller
	// data sets from the streaming data by partitioning it based on partition keys.
	// Currently, dynamic partitioning is only supported for Amazon S3 destinations.
	dynamicPartitioningConfiguration?: null | #DynamicPartitioningConfiguration @go(DynamicPartitioningConfiguration,*DynamicPartitioningConfiguration)

	// Describes the encryption for a destination in Amazon S3.
	encryptionConfiguration?: null | #EncryptionConfiguration @go(EncryptionConfiguration,*EncryptionConfiguration)
	errorOutputPrefix?:       null | string                   @go(ErrorOutputPrefix,*string)
	prefix?:                  null | string                   @go(Prefix,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)
	roleARN?:                 null | string                   @go(RoleARN,*string)

	// Describes a destination in Amazon S3.
	s3BackupDescription?: null | #S3DestinationDescription @go(S3BackupDescription,*S3DestinationDescription)
	s3BackupMode?:        null | string                    @go(S3BackupMode,*string)
}

// +kubebuilder:skipversion
#ExtendedS3DestinationUpdate: {
	bucketARN?: null | string @go(BucketARN,*string)

	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	bufferingHints?: null | #BufferingHints @go(BufferingHints,*BufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	compressionFormat?:        null | string                    @go(CompressionFormat,*string)

	// Specifies that you want Kinesis Data Firehose to convert data from the JSON
	// format to the Parquet or ORC format before writing it to Amazon S3. Kinesis
	// Data Firehose uses the serializer and deserializer that you specify, in addition
	// to the column information from the Amazon Web Services Glue table, to deserialize
	// your input data from JSON and then serialize it to the Parquet or ORC format.
	// For more information, see Kinesis Data Firehose Record Format Conversion
	// (https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html).
	dataFormatConversionConfiguration?: null | #DataFormatConversionConfiguration @go(DataFormatConversionConfiguration,*DataFormatConversionConfiguration)

	// The configuration of the dynamic partitioning mechanism that creates smaller
	// data sets from the streaming data by partitioning it based on partition keys.
	// Currently, dynamic partitioning is only supported for Amazon S3 destinations.
	dynamicPartitioningConfiguration?: null | #DynamicPartitioningConfiguration @go(DynamicPartitioningConfiguration,*DynamicPartitioningConfiguration)

	// Describes the encryption for a destination in Amazon S3.
	encryptionConfiguration?: null | #EncryptionConfiguration @go(EncryptionConfiguration,*EncryptionConfiguration)
	errorOutputPrefix?:       null | string                   @go(ErrorOutputPrefix,*string)
	prefix?:                  null | string                   @go(Prefix,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)
	roleARN?:                 null | string                   @go(RoleARN,*string)
	s3BackupMode?:            null | string                   @go(S3BackupMode,*string)
}

// +kubebuilder:skipversion
#FailureDescription: {
	details?: null | string @go(Details,*string)
	type_?:   null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#HTTPEndpointBufferingHints: {
	intervalInSeconds?: null | int64 @go(IntervalInSeconds,*int64)
	sizeInMBs?:         null | int64 @go(SizeInMBs,*int64)
}

// +kubebuilder:skipversion
#HTTPEndpointCommonAttribute: {
	attributeName?:  null | string @go(AttributeName,*string)
	attributeValue?: null | string @go(AttributeValue,*string)
}

// +kubebuilder:skipversion
#HTTPEndpointConfiguration: {
	accessKey?: null | string @go(AccessKey,*string)
	name?:      null | string @go(Name,*string)
	url?:       null | string @go(URL,*string)
}

// +kubebuilder:skipversion
#HTTPEndpointDescription: {
	name?: null | string @go(Name,*string)
	url?:  null | string @go(URL,*string)
}

// +kubebuilder:skipversion
#HTTPEndpointDestinationConfiguration: {
	// Describes the buffering options that can be applied before data is delivered
	// to the HTTP endpoint destination. Kinesis Data Firehose treats these options
	// as hints, and it might choose to use more optimal values. The SizeInMBs and
	// IntervalInSeconds parameters are optional. However, if specify a value for
	// one of them, you must also provide a value for the other.
	bufferingHints?: null | #HTTPEndpointBufferingHints @go(BufferingHints,*HTTPEndpointBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)

	// Describes the configuration of the HTTP endpoint to which Kinesis Firehose
	// delivers data.
	endpointConfiguration?: null | #HTTPEndpointConfiguration @go(EndpointConfiguration,*HTTPEndpointConfiguration)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// The configuration of the HTTP endpoint request.
	requestConfiguration?: null | #HTTPEndpointRequestConfiguration @go(RequestConfiguration,*HTTPEndpointRequestConfiguration)

	// Describes the retry behavior in case Kinesis Data Firehose is unable to deliver
	// data to the specified HTTP endpoint destination, or if it doesn't receive
	// a valid acknowledgment of receipt from the specified HTTP endpoint destination.
	retryOptions?: null | #HTTPEndpointRetryOptions @go(RetryOptions,*HTTPEndpointRetryOptions)
	roleARN?:      null | string                    @go(RoleARN,*string)
	s3BackupMode?: null | string                    @go(S3BackupMode,*string)

	// Describes the configuration of a destination in Amazon S3.
	s3Configuration?: null | #S3DestinationConfiguration @go(S3Configuration,*S3DestinationConfiguration)
}

// +kubebuilder:skipversion
#HTTPEndpointDestinationDescription: {
	// Describes the buffering options that can be applied before data is delivered
	// to the HTTP endpoint destination. Kinesis Data Firehose treats these options
	// as hints, and it might choose to use more optimal values. The SizeInMBs and
	// IntervalInSeconds parameters are optional. However, if specify a value for
	// one of them, you must also provide a value for the other.
	bufferingHints?: null | #HTTPEndpointBufferingHints @go(BufferingHints,*HTTPEndpointBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)

	// Describes the HTTP endpoint selected as the destination.
	endpointConfiguration?: null | #HTTPEndpointDescription @go(EndpointConfiguration,*HTTPEndpointDescription)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// The configuration of the HTTP endpoint request.
	requestConfiguration?: null | #HTTPEndpointRequestConfiguration @go(RequestConfiguration,*HTTPEndpointRequestConfiguration)

	// Describes the retry behavior in case Kinesis Data Firehose is unable to deliver
	// data to the specified HTTP endpoint destination, or if it doesn't receive
	// a valid acknowledgment of receipt from the specified HTTP endpoint destination.
	retryOptions?: null | #HTTPEndpointRetryOptions @go(RetryOptions,*HTTPEndpointRetryOptions)
	roleARN?:      null | string                    @go(RoleARN,*string)
	s3BackupMode?: null | string                    @go(S3BackupMode,*string)

	// Describes a destination in Amazon S3.
	s3DestinationDescription?: null | #S3DestinationDescription @go(S3DestinationDescription,*S3DestinationDescription)
}

// +kubebuilder:skipversion
#HTTPEndpointDestinationUpdate: {
	// Describes the buffering options that can be applied before data is delivered
	// to the HTTP endpoint destination. Kinesis Data Firehose treats these options
	// as hints, and it might choose to use more optimal values. The SizeInMBs and
	// IntervalInSeconds parameters are optional. However, if specify a value for
	// one of them, you must also provide a value for the other.
	bufferingHints?: null | #HTTPEndpointBufferingHints @go(BufferingHints,*HTTPEndpointBufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)

	// Describes the configuration of the HTTP endpoint to which Kinesis Firehose
	// delivers data.
	endpointConfiguration?: null | #HTTPEndpointConfiguration @go(EndpointConfiguration,*HTTPEndpointConfiguration)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// The configuration of the HTTP endpoint request.
	requestConfiguration?: null | #HTTPEndpointRequestConfiguration @go(RequestConfiguration,*HTTPEndpointRequestConfiguration)

	// Describes the retry behavior in case Kinesis Data Firehose is unable to deliver
	// data to the specified HTTP endpoint destination, or if it doesn't receive
	// a valid acknowledgment of receipt from the specified HTTP endpoint destination.
	retryOptions?: null | #HTTPEndpointRetryOptions @go(RetryOptions,*HTTPEndpointRetryOptions)
	roleARN?:      null | string                    @go(RoleARN,*string)
	s3BackupMode?: null | string                    @go(S3BackupMode,*string)
}

// +kubebuilder:skipversion
#HTTPEndpointRequestConfiguration: {
	commonAttributes?: [...null | #HTTPEndpointCommonAttribute] @go(CommonAttributes,[]*HTTPEndpointCommonAttribute)
	contentEncoding?: null | string @go(ContentEncoding,*string)
}

// +kubebuilder:skipversion
#HTTPEndpointRetryOptions: {
	durationInSeconds?: null | int64 @go(DurationInSeconds,*int64)
}

// +kubebuilder:skipversion
#HiveJSONSerDe: {
	timestampFormats?: [...null | string] @go(TimestampFormats,[]*string)
}

// +kubebuilder:skipversion
#InputFormatConfiguration: {
	// The deserializer you want Kinesis Data Firehose to use for converting the
	// input data from JSON. Kinesis Data Firehose then serializes the data to its
	// final format using the Serializer. Kinesis Data Firehose supports two types
	// of deserializers: the Apache Hive JSON SerDe (https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-JSON)
	// and the OpenX JSON SerDe (https://github.com/rcongiu/Hive-JSON-Serde).
	deserializer?: null | #Deserializer @go(Deserializer,*Deserializer)
}

// +kubebuilder:skipversion
#KMSEncryptionConfig: {
	awsKMSKeyARN?: null | string @go(AWSKMSKeyARN,*string)
}

// +kubebuilder:skipversion
#KinesisStreamSourceConfiguration: {
	kinesisStreamARN?: null | string @go(KinesisStreamARN,*string)
	roleARN?:          null | string @go(RoleARN,*string)
}

// +kubebuilder:skipversion
#KinesisStreamSourceDescription: {
	kinesisStreamARN?: null | string @go(KinesisStreamARN,*string)
	roleARN?:          null | string @go(RoleARN,*string)
}

// +kubebuilder:skipversion
#OpenXJSONSerDe: {
	caseInsensitive?: null | bool @go(CaseInsensitive,*bool)
	columnToJSONKeyMappings?: {[string]: null | string} @go(ColumnToJSONKeyMappings,map[string]*string)
	convertDotsInJSONKeysToUnderscores?: null | bool @go(ConvertDotsInJSONKeysToUnderscores,*bool)
}

// +kubebuilder:skipversion
#OrcSerDe: {
	blockSizeBytes?: null | int64 @go(BlockSizeBytes,*int64)
	bloomFilterColumns?: [...null | string] @go(BloomFilterColumns,[]*string)
	bloomFilterFalsePositiveProbability?: null | float64 @go(BloomFilterFalsePositiveProbability,*float64)
	compression?:                         null | string  @go(Compression,*string)
	dictionaryKeyThreshold?:              null | float64 @go(DictionaryKeyThreshold,*float64)
	enablePadding?:                       null | bool    @go(EnablePadding,*bool)
	formatVersion?:                       null | string  @go(FormatVersion,*string)
	paddingTolerance?:                    null | float64 @go(PaddingTolerance,*float64)
	rowIndexStride?:                      null | int64   @go(RowIndexStride,*int64)
	stripeSizeBytes?:                     null | int64   @go(StripeSizeBytes,*int64)
}

// +kubebuilder:skipversion
#OutputFormatConfiguration: {
	// The serializer that you want Kinesis Data Firehose to use to convert data
	// to the target format before writing it to Amazon S3. Kinesis Data Firehose
	// supports two types of serializers: the ORC SerDe (https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/orc/OrcSerde.html)
	// and the Parquet SerDe (https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/parquet/serde/ParquetHiveSerDe.html).
	serializer?: null | #Serializer @go(Serializer,*Serializer)
}

// +kubebuilder:skipversion
#ParquetSerDe: {
	blockSizeBytes?:              null | int64  @go(BlockSizeBytes,*int64)
	compression?:                 null | string @go(Compression,*string)
	enableDictionaryCompression?: null | bool   @go(EnableDictionaryCompression,*bool)
	maxPaddingBytes?:             null | int64  @go(MaxPaddingBytes,*int64)
	pageSizeBytes?:               null | int64  @go(PageSizeBytes,*int64)
	writerVersion?:               null | string @go(WriterVersion,*string)
}

// +kubebuilder:skipversion
#ProcessingConfiguration: {
	enabled?: null | bool @go(Enabled,*bool)
	processors?: [...null | #Processor] @go(Processors,[]*Processor)
}

// +kubebuilder:skipversion
#Processor: {
	parameters?: [...null | #ProcessorParameter] @go(Parameters,[]*ProcessorParameter)
	type_?: null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#ProcessorParameter: {
	parameterName?:  null | string @go(ParameterName,*string)
	parameterValue?: null | string @go(ParameterValue,*string)
}

// +kubebuilder:skipversion
#RedshiftDestinationConfiguration: {
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	clusterJDBCURL?:           null | string                    @go(ClusterJDBCURL,*string)

	// Describes a COPY command for Amazon Redshift.
	copyCommand?: null | #CopyCommand @go(CopyCommand,*CopyCommand)
	password?:    null | string       @go(Password,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon Redshift.
	retryOptions?: null | #RedshiftRetryOptions @go(RetryOptions,*RedshiftRetryOptions)
	roleARN?:      null | string                @go(RoleARN,*string)

	// Describes the configuration of a destination in Amazon S3.
	s3BackupConfiguration?: null | #S3DestinationConfiguration @go(S3BackupConfiguration,*S3DestinationConfiguration)
	s3BackupMode?:          null | string                      @go(S3BackupMode,*string)

	// Describes the configuration of a destination in Amazon S3.
	s3Configuration?: null | #S3DestinationConfiguration @go(S3Configuration,*S3DestinationConfiguration)
	username?:        null | string                      @go(Username,*string)
}

// +kubebuilder:skipversion
#RedshiftDestinationDescription: {
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	clusterJDBCURL?:           null | string                    @go(ClusterJDBCURL,*string)

	// Describes a COPY command for Amazon Redshift.
	copyCommand?: null | #CopyCommand @go(CopyCommand,*CopyCommand)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon Redshift.
	retryOptions?: null | #RedshiftRetryOptions @go(RetryOptions,*RedshiftRetryOptions)
	roleARN?:      null | string                @go(RoleARN,*string)

	// Describes a destination in Amazon S3.
	s3BackupDescription?: null | #S3DestinationDescription @go(S3BackupDescription,*S3DestinationDescription)
	s3BackupMode?:        null | string                    @go(S3BackupMode,*string)

	// Describes a destination in Amazon S3.
	s3DestinationDescription?: null | #S3DestinationDescription @go(S3DestinationDescription,*S3DestinationDescription)
	username?:                 null | string                    @go(Username,*string)
}

// +kubebuilder:skipversion
#RedshiftDestinationUpdate: {
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	clusterJDBCURL?:           null | string                    @go(ClusterJDBCURL,*string)

	// Describes a COPY command for Amazon Redshift.
	copyCommand?: null | #CopyCommand @go(CopyCommand,*CopyCommand)
	password?:    null | string       @go(Password,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon Redshift.
	retryOptions?: null | #RedshiftRetryOptions @go(RetryOptions,*RedshiftRetryOptions)
	roleARN?:      null | string                @go(RoleARN,*string)
	s3BackupMode?: null | string                @go(S3BackupMode,*string)
	username?:     null | string                @go(Username,*string)
}

// +kubebuilder:skipversion
#RedshiftRetryOptions: {
	durationInSeconds?: null | int64 @go(DurationInSeconds,*int64)
}

// +kubebuilder:skipversion
#RetryOptions: {
	durationInSeconds?: null | int64 @go(DurationInSeconds,*int64)
}

// +kubebuilder:skipversion
#S3DestinationConfiguration: {
	bucketARN?: null | string @go(BucketARN,*string)

	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	bufferingHints?: null | #BufferingHints @go(BufferingHints,*BufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	compressionFormat?:        null | string                    @go(CompressionFormat,*string)

	// Describes the encryption for a destination in Amazon S3.
	encryptionConfiguration?: null | #EncryptionConfiguration @go(EncryptionConfiguration,*EncryptionConfiguration)
	errorOutputPrefix?:       null | string                   @go(ErrorOutputPrefix,*string)
	prefix?:                  null | string                   @go(Prefix,*string)
	roleARN?:                 null | string                   @go(RoleARN,*string)
}

// +kubebuilder:skipversion
#S3DestinationDescription: {
	bucketARN?: null | string @go(BucketARN,*string)

	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	bufferingHints?: null | #BufferingHints @go(BufferingHints,*BufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	compressionFormat?:        null | string                    @go(CompressionFormat,*string)

	// Describes the encryption for a destination in Amazon S3.
	encryptionConfiguration?: null | #EncryptionConfiguration @go(EncryptionConfiguration,*EncryptionConfiguration)
	errorOutputPrefix?:       null | string                   @go(ErrorOutputPrefix,*string)
	prefix?:                  null | string                   @go(Prefix,*string)
	roleARN?:                 null | string                   @go(RoleARN,*string)
}

// +kubebuilder:skipversion
#S3DestinationUpdate: {
	bucketARN?: null | string @go(BucketARN,*string)

	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	bufferingHints?: null | #BufferingHints @go(BufferingHints,*BufferingHints)

	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?: null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	compressionFormat?:        null | string                    @go(CompressionFormat,*string)

	// Describes the encryption for a destination in Amazon S3.
	encryptionConfiguration?: null | #EncryptionConfiguration @go(EncryptionConfiguration,*EncryptionConfiguration)
	errorOutputPrefix?:       null | string                   @go(ErrorOutputPrefix,*string)
	prefix?:                  null | string                   @go(Prefix,*string)
	roleARN?:                 null | string                   @go(RoleARN,*string)
}

// +kubebuilder:skipversion
#SchemaConfiguration: {
	catalogID?:    null | string @go(CatalogID,*string)
	databaseName?: null | string @go(DatabaseName,*string)
	region?:       null | string @go(Region,*string)
	roleARN?:      null | string @go(RoleARN,*string)
	tableName?:    null | string @go(TableName,*string)
	versionID?:    null | string @go(VersionID,*string)
}

// +kubebuilder:skipversion
#Serializer: {
	// A serializer to use for converting data to the ORC format before storing
	// it in Amazon S3. For more information, see Apache ORC (https://orc.apache.org/docs/).
	orcSerDe?: null | #OrcSerDe @go(OrcSerDe,*OrcSerDe)

	// A serializer to use for converting data to the Parquet format before storing
	// it in Amazon S3. For more information, see Apache Parquet (https://parquet.apache.org/documentation/latest/).
	parquetSerDe?: null | #ParquetSerDe @go(ParquetSerDe,*ParquetSerDe)
}

// +kubebuilder:skipversion
#SourceDescription: {
	// Details about a Kinesis data stream used as the source for a Kinesis Data
	// Firehose delivery stream.
	kinesisStreamSourceDescription?: null | #KinesisStreamSourceDescription @go(KinesisStreamSourceDescription,*KinesisStreamSourceDescription)
}

// +kubebuilder:skipversion
#SplunkDestinationConfiguration: {
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?:          null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	hECAcknowledgmentTimeoutInSeconds?: null | int64                     @go(HECAcknowledgmentTimeoutInSeconds,*int64)
	hECEndpoint?:                       null | string                    @go(HECEndpoint,*string)
	hECEndpointType?:                   null | string                    @go(HECEndpointType,*string)
	hECToken?:                          null | string                    @go(HECToken,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
	retryOptions?: null | #SplunkRetryOptions @go(RetryOptions,*SplunkRetryOptions)
	s3BackupMode?: null | string              @go(S3BackupMode,*string)

	// Describes the configuration of a destination in Amazon S3.
	s3Configuration?: null | #S3DestinationConfiguration @go(S3Configuration,*S3DestinationConfiguration)
}

// +kubebuilder:skipversion
#SplunkDestinationDescription: {
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?:          null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	hECAcknowledgmentTimeoutInSeconds?: null | int64                     @go(HECAcknowledgmentTimeoutInSeconds,*int64)
	hECEndpoint?:                       null | string                    @go(HECEndpoint,*string)
	hECEndpointType?:                   null | string                    @go(HECEndpointType,*string)
	hECToken?:                          null | string                    @go(HECToken,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
	retryOptions?: null | #SplunkRetryOptions @go(RetryOptions,*SplunkRetryOptions)
	s3BackupMode?: null | string              @go(S3BackupMode,*string)

	// Describes a destination in Amazon S3.
	s3DestinationDescription?: null | #S3DestinationDescription @go(S3DestinationDescription,*S3DestinationDescription)
}

// +kubebuilder:skipversion
#SplunkDestinationUpdate: {
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	cloudWatchLoggingOptions?:          null | #CloudWatchLoggingOptions @go(CloudWatchLoggingOptions,*CloudWatchLoggingOptions)
	hECAcknowledgmentTimeoutInSeconds?: null | int64                     @go(HECAcknowledgmentTimeoutInSeconds,*int64)
	hECEndpoint?:                       null | string                    @go(HECEndpoint,*string)
	hECEndpointType?:                   null | string                    @go(HECEndpointType,*string)
	hECToken?:                          null | string                    @go(HECToken,*string)

	// Describes a data processing configuration.
	processingConfiguration?: null | #ProcessingConfiguration @go(ProcessingConfiguration,*ProcessingConfiguration)

	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
	retryOptions?: null | #SplunkRetryOptions @go(RetryOptions,*SplunkRetryOptions)
	s3BackupMode?: null | string              @go(S3BackupMode,*string)
}

// +kubebuilder:skipversion
#SplunkRetryOptions: {
	durationInSeconds?: null | int64 @go(DurationInSeconds,*int64)
}

// +kubebuilder:skipversion
#Tag: {
	key?:   null | string @go(Key,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#VPCConfiguration: {
	roleARN?: null | string @go(RoleARN,*string)
	securityGroupIDs?: [...null | string] @go(SecurityGroupIDs,[]*string)
	subnetIDs?: [...null | string] @go(SubnetIDs,[]*string)
}

// +kubebuilder:skipversion
#VPCConfigurationDescription: {
	roleARN?: null | string @go(RoleARN,*string)
	securityGroupIDs?: [...null | string] @go(SecurityGroupIDs,[]*string)
	subnetIDs?: [...null | string] @go(SubnetIDs,[]*string)
	vpcID?: null | string @go(VPCID,*string)
}
