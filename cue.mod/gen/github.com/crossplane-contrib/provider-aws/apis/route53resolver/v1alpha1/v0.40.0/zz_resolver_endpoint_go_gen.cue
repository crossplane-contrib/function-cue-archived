// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/route53resolver/v1alpha1

package v1alpha1

// ResolverEndpointParameters defines the desired state of ResolverEndpoint
#ResolverEndpointParameters: {
	// Region is which region the ResolverEndpoint will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// Specify the applicable value:
	//
	//    * INBOUND: Resolver forwards DNS queries to the DNS service for a VPC
	//    from your network
	//
	//    * OUTBOUND: Resolver forwards DNS queries from the DNS service for a VPC
	//    to your network
	// +kubebuilder:validation:Required
	direction?: null | string @go(Direction,*string)

	// A friendly name that lets you easily find a configuration in the Resolver
	// dashboard in the Route 53 console.
	name?: null | string @go(Name,*string)

	// A list of the tag keys and values that you want to associate with the endpoint.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	#CustomResolverEndpointParameters
}

// ResolverEndpointSpec defines the desired state of ResolverEndpoint
#ResolverEndpointSpec: {
	forProvider: #ResolverEndpointParameters @go(ForProvider)
}

// ResolverEndpointObservation defines the observed state of ResolverEndpoint
#ResolverEndpointObservation: {
	// The ARN (Amazon Resource Name) for the Resolver endpoint.
	arn?: null | string @go(ARN,*string)

	// The date and time that the endpoint was created, in Unix time format and
	// Coordinated Universal Time (UTC).
	creationTime?: null | string @go(CreationTime,*string)

	// A unique string that identifies the request that created the Resolver endpoint.
	// The CreatorRequestId allows failed requests to be retried without the risk
	// of running the operation twice.
	creatorRequestID?: null | string @go(CreatorRequestID,*string)

	// The ID of the VPC that you want to create the Resolver endpoint in.
	hostVPCID?: null | string @go(HostVPCID,*string)

	// The ID of the Resolver endpoint.
	id?: null | string @go(ID,*string)

	// The number of IP addresses that the Resolver endpoint can use for DNS queries.
	ipAddressCount?: null | int64 @go(IPAddressCount,*int64)

	// The date and time that the endpoint was last modified, in Unix time format
	// and Coordinated Universal Time (UTC).
	modificationTime?: null | string @go(ModificationTime,*string)

	// The ID of one or more security groups that control access to this VPC. The
	// security group must include one or more inbound rules (for inbound endpoints)
	// or outbound rules (for outbound endpoints). Inbound and outbound rules must
	// allow TCP and UDP access. For inbound access, open port 53. For outbound
	// access, open the port that you're using for DNS queries on your network.
	securityGroupIDs?: [...null | string] @go(SecurityGroupIDs,[]*string)

	// A code that specifies the current status of the Resolver endpoint. Valid
	// values include the following:
	//
	//    * CREATING: Resolver is creating and configuring one or more Amazon VPC
	//    network interfaces for this endpoint.
	//
	//    * OPERATIONAL: The Amazon VPC network interfaces for this endpoint are
	//    correctly configured and able to pass inbound or outbound DNS queries
	//    between your network and Resolver.
	//
	//    * UPDATING: Resolver is associating or disassociating one or more network
	//    interfaces with this endpoint.
	//
	//    * AUTO_RECOVERING: Resolver is trying to recover one or more of the network
	//    interfaces that are associated with this endpoint. During the recovery
	//    process, the endpoint functions with limited capacity because of the limit
	//    on the number of DNS queries per IP address (per network interface). For
	//    the current limit, see Limits on Route 53 Resolver (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html#limits-api-entities-resolver).
	//
	//    * ACTION_NEEDED: This endpoint is unhealthy, and Resolver can't automatically
	//    recover it. To resolve the problem, we recommend that you check each IP
	//    address that you associated with the endpoint. For each IP address that
	//    isn't available, add another IP address and then delete the IP address
	//    that isn't available. (An endpoint must always include at least two IP
	//    addresses.) A status of ACTION_NEEDED can have a variety of causes. Here
	//    are two common causes: One or more of the network interfaces that are
	//    associated with the endpoint were deleted using Amazon VPC. The network
	//    interface couldn't be created for some reason that's outside the control
	//    of Resolver.
	//
	//    * DELETING: Resolver is deleting this endpoint and the associated network
	//    interfaces.
	status?: null | string @go(Status,*string)

	// A detailed description of the status of the Resolver endpoint.
	statusMessage?: null | string @go(StatusMessage,*string)
}

// ResolverEndpointStatus defines the observed state of ResolverEndpoint.
#ResolverEndpointStatus: {
	atProvider?: #ResolverEndpointObservation @go(AtProvider)
}

// ResolverEndpoint is the Schema for the ResolverEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ResolverEndpoint: {
	spec:    #ResolverEndpointSpec   @go(Spec)
	status?: #ResolverEndpointStatus @go(Status)
}

// ResolverEndpointList contains a list of ResolverEndpoints
#ResolverEndpointList: {
	items: [...#ResolverEndpoint] @go(Items,[]ResolverEndpoint)
}
