// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/dax/v1alpha1

package v1alpha1

// ClusterParameters defines the desired state of Cluster
#ClusterParameters: {
	// Region is which region the Cluster will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The Availability Zones (AZs) in which the cluster nodes will reside after
	// the cluster has been created or updated. If provided, the length of this
	// list must equal the ReplicationFactor parameter. If you omit this parameter,
	// DAX will spread the nodes across Availability Zones for the highest availability.
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)

	// The type of encryption the cluster's endpoint should support. Values are:
	//
	//    * NONE for no encryption
	//
	//    * TLS for Transport Layer Security
	clusterEndpointEncryptionType?: null | string @go(ClusterEndpointEncryptionType,*string)

	// A description of the cluster.
	description?: null | string @go(Description,*string)

	// The compute and memory capacity of the nodes in the cluster.
	// +kubebuilder:validation:Required
	nodeType?: null | string @go(NodeType,*string)

	// Specifies the weekly time range during which maintenance on the DAX cluster
	// is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid
	// values for ddd are:
	//
	//    * sun
	//
	//    * mon
	//
	//    * tue
	//
	//    * wed
	//
	//    * thu
	//
	//    * fri
	//
	//    * sat
	//
	// Example: sun:05:00-sun:09:00
	//
	// If you don't specify a preferred maintenance window when you create or modify
	// a cache cluster, DAX assigns a 60-minute maintenance window on a randomly
	// selected day of the week.
	preferredMaintenanceWindow?: null | string @go(PreferredMaintenanceWindow,*string)

	// The number of nodes in the DAX cluster. A replication factor of 1 will create
	// a single-node cluster, without any read replicas. For additional fault tolerance,
	// you can create a multiple node cluster with one or more read replicas. To
	// do this, set ReplicationFactor to a number between 3 (one primary and two
	// read replicas) and 10 (one primary and nine read replicas). If the AvailabilityZones
	// parameter is provided, its length must equal the ReplicationFactor.
	//
	// AWS recommends that you have at least two read replicas per cluster.
	// +kubebuilder:validation:Required
	replicationFactor?: null | int64 @go(ReplicationFactor,*int64)

	// Represents the settings used to enable server-side encryption on the cluster.
	sseSpecification?: null | #SSESpecification @go(SSESpecification,*SSESpecification)

	// A set of tags to associate with the DAX cluster.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	#CustomClusterParameters
}

// ClusterSpec defines the desired state of Cluster
#ClusterSpec: {
	forProvider: #ClusterParameters @go(ForProvider)
}

// ClusterObservation defines the observed state of Cluster
#ClusterObservation: {
	// The number of nodes in the cluster that are active (i.e., capable of serving
	// requests).
	activeNodes?: null | int64 @go(ActiveNodes,*int64)

	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	clusterARN?: null | string @go(ClusterARN,*string)

	// The endpoint for this DAX cluster, consisting of a DNS name, a port number,
	// and a URL. Applications should use the URL to configure the DAX client to
	// find their cluster.
	clusterDiscoveryEndpoint?: null | #Endpoint @go(ClusterDiscoveryEndpoint,*Endpoint)

	// The name of the DAX cluster.
	clusterName?: null | string @go(ClusterName,*string)

	// A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime,
	// DAX will assume this role and use the role's permissions to access DynamoDB
	// on your behalf.
	iamRoleARN?: null | string @go(IAMRoleARN,*string)

	// A list of nodes to be removed from the cluster.
	nodeIDsToRemove?: [...null | string] @go(NodeIDsToRemove,[]*string)

	// A list of nodes that are currently in the cluster.
	nodes?: [...null | #Node] @go(Nodes,[]*Node)

	// Describes a notification topic and its status. Notification topics are used
	// for publishing DAX events to subscribers using Amazon Simple Notification
	// Service (SNS).
	notificationConfiguration?: null | #NotificationConfiguration @go(NotificationConfiguration,*NotificationConfiguration)

	// The parameter group being used by nodes in the cluster.
	parameterGroup?: null | #ParameterGroupStatus_SDK @go(ParameterGroup,*ParameterGroupStatus_SDK)

	// The description of the server-side encryption status on the specified DAX
	// cluster.
	sseDescription?: null | #SSEDescription @go(SSEDescription,*SSEDescription)

	// A list of security groups, and the status of each, for the nodes in the cluster.
	securityGroups?: [...null | #SecurityGroupMembership] @go(SecurityGroups,[]*SecurityGroupMembership)

	// The current status of the cluster.
	status?: null | string @go(Status,*string)

	// The subnet group where the DAX cluster is running.
	subnetGroup?: null | string @go(SubnetGroup,*string)

	// The total number of nodes in the cluster.
	totalNodes?: null | int64 @go(TotalNodes,*int64)
}

// ClusterStatus defines the observed state of Cluster.
#ClusterStatus: {
	atProvider?: #ClusterObservation @go(AtProvider)
}

// Cluster is the Schema for the Clusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Cluster: {
	spec:    #ClusterSpec   @go(Spec)
	status?: #ClusterStatus @go(Status)
}

// ClusterList contains a list of Clusters
#ClusterList: {
	items: [...#Cluster] @go(Items,[]Cluster)
}
