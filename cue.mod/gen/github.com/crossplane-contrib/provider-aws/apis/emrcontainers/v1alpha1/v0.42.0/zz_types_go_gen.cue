// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/emrcontainers/v1alpha1

package v1alpha1

// +kubebuilder:skipversion
#CloudWatchMonitoringConfiguration: {
	logStreamNamePrefix?: null | string @go(LogStreamNamePrefix,*string)
}

// +kubebuilder:skipversion
#Configuration: {
	classification?: null | string @go(Classification,*string)
}

// +kubebuilder:skipversion
#ContainerInfo: {
	// The information about the EKS cluster.
	eksInfo?: null | #EKSInfo @go(EKSInfo,*EKSInfo)
}

// +kubebuilder:skipversion
#ContainerProvider: {
	id?: null | string @go(ID,*string)

	// The information about the container used for a job run or a managed endpoint.
	info?:  null | #ContainerInfo @go(Info,*ContainerInfo)
	type_?: null | string         @go(Type,*string)
}

// +kubebuilder:skipversion
#EKSInfo: {
	namespace?: null | string @go(Namespace,*string)
}

// +kubebuilder:skipversion
#Endpoint: {
	executionRoleARN?: null | string @go(ExecutionRoleARN,*string)
	failureReason?:    null | string @go(FailureReason,*string)
	id?:               null | string @go(ID,*string)
	name?:             null | string @go(Name,*string)
	releaseLabel?:     null | string @go(ReleaseLabel,*string)
	securityGroup?:    null | string @go(SecurityGroup,*string)
	stateDetails?:     null | string @go(StateDetails,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	virtualClusterID?: null | string @go(VirtualClusterID,*string)
}

// +kubebuilder:skipversion
#JobDriver: {
	// The job driver for job type.
	sparkSQLJobDriver?: null | #SparkSQLJobDriver @go(SparkSQLJobDriver,*SparkSQLJobDriver)

	// The information about job driver for Spark submit.
	sparkSubmitJobDriver?: null | #SparkSubmitJobDriver @go(SparkSubmitJobDriver,*SparkSubmitJobDriver)
}

// +kubebuilder:skipversion
#JobRun_SDK: {
	arn?:              null | string @go(ARN,*string)
	clientToken?:      null | string @go(ClientToken,*string)
	createdBy?:        null | string @go(CreatedBy,*string)
	executionRoleARN?: null | string @go(ExecutionRoleARN,*string)
	failureReason?:    null | string @go(FailureReason,*string)
	id?:               null | string @go(ID,*string)

	// Specify the driver that the job runs on. Exactly one of the two available
	// job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
	jobDriver?:    null | #JobDriver @go(JobDriver,*JobDriver)
	name?:         null | string     @go(Name,*string)
	releaseLabel?: null | string     @go(ReleaseLabel,*string)
	state?:        null | string     @go(State,*string)
	stateDetails?: null | string     @go(StateDetails,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	virtualClusterID?: null | string @go(VirtualClusterID,*string)
}

// +kubebuilder:skipversion
#JobTemplate: {
	createdBy?: null | string @go(CreatedBy,*string)
	id?:        null | string @go(ID,*string)
	name?:      null | string @go(Name,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// +kubebuilder:skipversion
#JobTemplateData: {
	// Specify the driver that the job runs on. Exactly one of the two available
	// job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
	jobDriver?: null | #JobDriver @go(JobDriver,*JobDriver)
	jobTags?: {[string]: null | string} @go(JobTags,map[string]*string)
}

// +kubebuilder:skipversion
#ParametricCloudWatchMonitoringConfiguration: {
	logStreamNamePrefix?: null | string @go(LogStreamNamePrefix,*string)
}

// +kubebuilder:skipversion
#SparkSQLJobDriver: {
	entryPoint?:         null | string @go(EntryPoint,*string)
	sparkSQLParameters?: null | string @go(SparkSQLParameters,*string)
}

// +kubebuilder:skipversion
#SparkSubmitJobDriver: {
	entryPoint?: null | string @go(EntryPoint,*string)
	entryPointArguments?: [...null | string] @go(EntryPointArguments,[]*string)
	sparkSubmitParameters?: null | string @go(SparkSubmitParameters,*string)
}

// +kubebuilder:skipversion
#TemplateParameterConfiguration: {
	defaultValue?: null | string @go(DefaultValue,*string)
}

// +kubebuilder:skipversion
#VirtualCluster_SDK: {
	arn?: null | string @go(ARN,*string)

	// The information about the container provider.
	containerProvider?: null | #ContainerProvider @go(ContainerProvider,*ContainerProvider)
	id?:                null | string             @go(ID,*string)
	name?:              null | string             @go(Name,*string)
	state?:             null | string             @go(State,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}
