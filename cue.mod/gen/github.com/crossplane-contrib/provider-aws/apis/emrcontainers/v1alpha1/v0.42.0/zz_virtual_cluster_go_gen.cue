// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/emrcontainers/v1alpha1

package v1alpha1

// VirtualClusterParameters defines the desired state of VirtualCluster
#VirtualClusterParameters: {
	// Region is which region the VirtualCluster will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The container provider of the virtual cluster.
	// +kubebuilder:validation:Required
	containerProvider?: null | #ContainerProvider @go(ContainerProvider,*ContainerProvider)

	// The tags assigned to the virtual cluster.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	#CustomVirtualClusterParameters
}

// VirtualClusterSpec defines the desired state of VirtualCluster
#VirtualClusterSpec: {
	forProvider: #VirtualClusterParameters @go(ForProvider)
}

// VirtualClusterObservation defines the observed state of VirtualCluster
#VirtualClusterObservation: {
	// This output contains the ARN of virtual cluster.
	arn?: null | string @go(ARN,*string)

	// This output contains the virtual cluster ID.
	id?: null | string @go(ID,*string)

	// This output contains the name of the virtual cluster.
	name?: null | string @go(Name,*string)
}

// VirtualClusterStatus defines the observed state of VirtualCluster.
#VirtualClusterStatus: {
	atProvider?: #VirtualClusterObservation @go(AtProvider)
}

// VirtualCluster is the Schema for the VirtualClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VirtualCluster: {
	spec:    #VirtualClusterSpec   @go(Spec)
	status?: #VirtualClusterStatus @go(Status)
}

// VirtualClusterList contains a list of VirtualClusters
#VirtualClusterList: {
	items: [...#VirtualCluster] @go(Items,[]VirtualCluster)
}
