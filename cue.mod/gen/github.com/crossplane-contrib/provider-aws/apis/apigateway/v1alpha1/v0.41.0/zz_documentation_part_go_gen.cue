// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/apigateway/v1alpha1

package v1alpha1

// DocumentationPartParameters defines the desired state of DocumentationPart
#DocumentationPartParameters: {
	// Region is which region the DocumentationPart will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The location of the targeted API entity of the to-be-created documentation
	// part.
	// +kubebuilder:validation:Required
	location?: null | #DocumentationPartLocation @go(Location,*DocumentationPartLocation)

	// The new documentation content map of the targeted API entity. Enclosed key-value
	// pairs are API-specific, but only OpenAPI-compliant key-value pairs can be
	// exported and, hence, published.
	// +kubebuilder:validation:Required
	properties?: null | string @go(Properties,*string)

	#CustomDocumentationPartParameters
}

// DocumentationPartSpec defines the desired state of DocumentationPart
#DocumentationPartSpec: {
	forProvider: #DocumentationPartParameters @go(ForProvider)
}

// DocumentationPartObservation defines the observed state of DocumentationPart
#DocumentationPartObservation: {
	// The DocumentationPart identifier, generated by API Gateway when the DocumentationPart
	// is created.
	id?: null | string @go(ID,*string)
}

// DocumentationPartStatus defines the observed state of DocumentationPart.
#DocumentationPartStatus: {
	atProvider?: #DocumentationPartObservation @go(AtProvider)
}

// DocumentationPart is the Schema for the DocumentationParts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DocumentationPart: {
	spec:    #DocumentationPartSpec   @go(Spec)
	status?: #DocumentationPartStatus @go(Status)
}

// DocumentationPartList contains a list of DocumentationParts
#DocumentationPartList: {
	items: [...#DocumentationPart] @go(Items,[]DocumentationPart)
}
