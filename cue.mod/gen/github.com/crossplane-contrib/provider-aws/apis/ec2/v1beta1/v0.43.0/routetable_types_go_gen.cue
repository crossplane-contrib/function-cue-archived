// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/ec2/v1beta1

package v1beta1

// RouteBeta describes a route in a route table.
// provider-aws currently provides both a standalone Route resource
// and a RouteTable resource with routes defined in-line.
// At this time you cannot use a Route Table with in-line routes
// in conjunction with any Route resources.
// Doing so will cause a conflict of rule settings and will overwrite rules.
#RouteBeta: {
	// The IPv4 CIDR address block used for the destination match. Routing
	// decisions are based on the most specific match.
	// +optional
	destinationCidrBlock?: null | string @go(DestinationCIDRBlock,*string)

	// The IPv6 CIDR address block used for the destination match. Routing
	// decisions are based on the most specific match.
	// +optional
	destinationIpv6CidrBlock?: null | string @go(DestinationIPV6CIDRBlock,*string)

	// [IPv6 traffic only] The ID of an egress-only internet gateway.
	egressOnlyInternetGatewayId?: null | string @go(EgressOnlyInternetGatewayID,*string)

	// The ID of an internet gateway or virtual private gateway attached to your
	// VPC.
	// +optional
	// +crossplane:generate:reference:type=InternetGateway
	gatewayId?: null | string @go(GatewayID,*string)

	// The ID of a NAT instance in your VPC. The operation fails if you specify
	// an instance ID unless exactly one network interface is attached.
	instanceId?: null | string @go(InstanceID,*string)

	// The ID of the local gateway.
	localGatewayId?: null | string @go(LocalGatewayID,*string)

	// [IPv4 traffic only] The ID of a NAT gateway.
	// +optional
	// +crossplane:generate:reference:type=NATGateway
	natGatewayId?: null | string @go(NatGatewayID,*string)

	// The ID of a network interface.
	networkInterfaceId?: null | string @go(NetworkInterfaceID,*string)

	// The ID of a transit gateway.
	transitGatewayId?: null | string @go(TransitGatewayID,*string)

	// The ID of a VPC peering connection.
	vpcPeeringConnectionId?: null | string @go(VpcPeeringConnectionID,*string)
}

// RouteState describes a route state in the route table.
#RouteState: {
	// The state of the route. The blackhole state indicates that the route's
	// target isn't available (for example, the specified gateway isn't attached
	// to the VPC, or the specified NAT instance has been terminated).
	state?: string @go(State)

	// The IPv4 CIDR address block used for the destination match. Routing
	// decisions are based on the most specific match.
	destinationCidrBlock?: string @go(DestinationCIDRBlock)

	// The IPv6 CIDR address block used for the destination match. Routing
	// decisions are based on the most specific match.
	destinationIpv6CidrBlock?: string @go(DestinationIPV6CIDRBlock)

	// The ID of an internet gateway or virtual private gateway attached to your
	// VPC.
	gatewayId?: string @go(GatewayID)

	// The ID of a NAT instance in your VPC. The operation fails if you specify
	// an instance ID unless exactly one network interface is attached.
	instanceId?: string @go(InstanceID)

	// The ID of the local gateway.
	localGatewayId?: string @go(LocalGatewayID)

	// [IPv4 traffic only] The ID of a NAT gateway.
	natGatewayId?: string @go(NatGatewayID)

	// The ID of a network interface.
	networkInterfaceId?: string @go(NetworkInterfaceID)

	// The ID of a transit gateway.
	transitGatewayId?: string @go(TransitGatewayID)

	// The ID of a VPC peering connection.
	vpcPeeringConnectionId?: string @go(VpcPeeringConnectionID)
}

// Association describes an association between a route table and a subnet.
#Association: {
	// The ID of the subnet. A subnet ID is not returned for an implicit
	// association.
	// +optional
	// +crossplane:generate:reference:type=Subnet
	subnetId?: null | string @go(SubnetID,*string)
}

// AssociationState describes an association state in the route table.
#AssociationState: {
	// Indicates whether this is the main route table.
	main?: null | bool @go(Main,*bool)

	// The ID of the association between a route table and a subnet.
	associationId?: string @go(AssociationID)

	// The state of the association.
	state?: string @go(State)

	// The ID of the subnet. A subnet ID is not returned for an implicit
	// association.
	subnetId?: string @go(SubnetID)
}

// RouteTableParameters define the desired state of an AWS VPC Route Table.
#RouteTableParameters: {
	// Region is the region you'd like your VPC to be created in.
	region: string @go(Region)

	// Indicates whether we reconcile inline routes
	// +optional
	ignoreRoutes?: null | bool @go(IgnoreRoutes,*bool)

	// The associations between the route table and one or more subnets.
	associations: [...#Association] @go(Associations,[]Association)

	// inline routes in the route table
	// Deprecated: Routes inline exists for historical compatibility
	// and should not be used. Please use separate route resource.
	// +optional
	routes?: [...#RouteBeta] @go(Routes,[]RouteBeta)

	// Tags represents to current ec2 tags.
	// +optional
	tags?: [...#Tag] @go(Tags,[]Tag)

	// VPCID is the ID of the VPC.
	// +optional
	// +immutable
	// +crossplane:generate:reference:type=VPC
	vpcId?: null | string @go(VPCID,*string)
}

// A RouteTableSpec defines the desired state of a RouteTable.
#RouteTableSpec: {
	forProvider: #RouteTableParameters @go(ForProvider)
}

// RouteTableObservation keeps the state for the external resource
#RouteTableObservation: {
	// The ID of the AWS account that owns the route table.
	ownerId?: string @go(OwnerID)

	// RouteTableID is the ID of the RouteTable.
	routeTableId?: string @go(RouteTableID)

	// The actual routes created for the route table.
	routes?: [...#RouteState] @go(Routes,[]RouteState)

	// The actual associations created for the route table.
	associations?: [...#AssociationState] @go(Associations,[]AssociationState)
}

// A RouteTableStatus represents the observed state of a RouteTable.
#RouteTableStatus: {
	atProvider?: #RouteTableObservation @go(AtProvider)
}

// A RouteTable is a managed resource that represents an AWS VPC Route Table.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="ID",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="VPC",type="string",JSONPath=".spec.forProvider.vpcId"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
// +kubebuilder:storageversion
#RouteTable: {
	spec:    #RouteTableSpec   @go(Spec)
	status?: #RouteTableStatus @go(Status)
}

// RouteTableList contains a list of RouteTables
#RouteTableList: {
	items: [...#RouteTable] @go(Items,[]RouteTable)
}
