// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/ec2/v1beta1

package v1beta1

// VPCCIDRBlockState represents the state of a CIDR Block
#VPCCIDRBlockState: {
	// The state of the CIDR block.
	state?: string @go(State)

	// A message about the status of the CIDR block, if applicable.
	statusMessage?: string @go(StatusMessage)
}

// VPCCIDRBlockAssociation represents the association of IPv4 CIDR blocks with the VPC.
#VPCCIDRBlockAssociation: {
	// The association ID for the IPv4 CIDR block.
	associationId?: string @go(AssociationID)

	// The IPv4 CIDR block.
	cidrBlock?: string @go(CIDRBlock)

	// Information about the state of the CIDR block.
	cidrBlockState?: #VPCCIDRBlockState @go(CIDRBlockState)
}

// VPCIPv6CidrBlockAssociation represents the association of IPv6 CIDR blocks with the VPC.
#VPCIPv6CidrBlockAssociation: {
	// The association ID for the IPv6 CIDR block.
	associationId?: string @go(AssociationID)

	// The IPv6 CIDR block.
	ipv6CidrBlock?: string @go(IPv6CIDRBlock)

	// Information about the state of the CIDR block.
	ipv6CidrBlockState?: #VPCCIDRBlockState @go(IPv6CIDRBlockState)

	// The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.
	ipv6Pool?: string @go(IPv6Pool)

	// The name of the location from which we advertise the IPV6 CIDR block.
	networkBorderGroup?: string @go(NetworkBorderGroup)
}

// VPCParameters define the desired state of an AWS Virtual Private Cloud.
#VPCParameters: {
	// Region is the region you'd like your VPC to be created in.
	// +optional
	region?: null | string @go(Region,*string)

	// CIDRBlock is the IPv4 network range for the VPC, in CIDR notation. For
	// example, 10.0.0.0/16.
	// +kubebuilder:validation:Required
	// +immutable
	cidrBlock: string @go(CIDRBlock)

	// The IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool
	// in the request. To let Amazon choose the IPv6 CIDR block for you, omit this
	// parameter.
	// +optional
	// +immutable
	ipv6CidrBlock?: null | string @go(Ipv6CIDRBlock,*string)

	// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the
	// VPC. You cannot specify the range of IP addresses, or the size of the CIDR
	// block.
	// +optional
	// +immutable
	amazonProvidedIpv6CidrBlock?: null | bool @go(AmazonProvidedIpv6CIDRBlock,*bool)

	// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
	// +optional
	// +immutable
	ipv6Pool?: null | string @go(Ipv6Pool,*string)

	// A boolean flag to enable/disable DNS support in the VPC
	// +optional
	enableDnsSupport?: null | bool @go(EnableDNSSupport,*bool)

	// Tags are used as identification helpers between AWS resources.
	// +optional
	tags?: [...#Tag] @go(Tags,[]Tag)

	// Indicates whether the instances launched in the VPC get DNS hostnames.
	// +optional
	enableDnsHostNames?: null | bool @go(EnableDNSHostNames,*bool)

	// The allowed tenancy of instances launched into the VPC.
	// +optional
	instanceTenancy?: null | string @go(InstanceTenancy,*string)
}

// A VPCSpec defines the desired state of a VPC.
#VPCSpec: {
	forProvider: #VPCParameters @go(ForProvider)
}

// VPCObservation keeps the state for the external resource
#VPCObservation: {
	// Information about the IPv4 CIDR blocks associated with the VPC.
	cidrBlockAssociationSet?: [...#VPCCIDRBlockAssociation] @go(CIDRBlockAssociationSet,[]VPCCIDRBlockAssociation)

	// The ID of the set of DHCP options you've associated with the VPC.
	dhcpOptionsId?: string @go(DHCPOptionsID)

	// Information about the IPv6 CIDR blocks associated with the VPC.
	ipv6CidrBlockAssociationSet?: [...#VPCIPv6CidrBlockAssociation] @go(IPv6CIDRBlockAssociationSet,[]VPCIPv6CidrBlockAssociation)

	// Indicates whether the VPC is the default VPC.
	isDefault?: bool @go(IsDefault)

	// The ID of the AWS account that owns the VPC.
	ownerId?: string @go(OwnerID)

	// VPCState is the current state of the VPC.
	vpcState?: string @go(VPCState)

	// The ID of the VPC.
	vpcId?: string @go(VPCID)
}

// A VPCStatus represents the observed state of a VPC.
#VPCStatus: {
	atProvider?: #VPCObservation @go(AtProvider)
}

// A VPC is a managed resource that represents an AWS Virtual Private Cloud.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="ID",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="CIDR",type="string",JSONPath=".spec.forProvider.cidrBlock"
// +kubebuilder:printcolumn:name="IPV6CIDR",type="string",JSONPath=".spec.forProvider.ipv6CidrBlock"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
// +kubebuilder:storageversion
#VPC: {
	spec:    #VPCSpec   @go(Spec)
	status?: #VPCStatus @go(Status)
}

// VPCList contains a list of VPCs
#VPCList: {
	items: [...#VPC] @go(Items,[]VPC)
}
