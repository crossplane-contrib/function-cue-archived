// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/ec2/v1alpha1

package v1alpha1

// FlowLogParameters defines the desired state of FlowLog
#FlowLogParameters: {
	// Region is which region the FlowLog will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to ensure idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	clientToken?: null | string @go(ClientToken,*string)

	// The ARN of the IAM role that allows Amazon EC2 to publish flow logs across
	// accounts.
	deliverCrossAccountRole?: null | string @go(DeliverCrossAccountRole,*string)

	// The destination options.
	destinationOptions?: null | #DestinationOptionsRequest @go(DestinationOptions,*DestinationOptionsRequest)

	// The destination for the flow log data. The meaning of this parameter depends
	// on the destination type.
	//
	//    * If the destination type is cloud-watch-logs, specify the ARN of a CloudWatch
	//    Logs log group. For example: arn:aws:logs:region:account_id:log-group:my_group
	//    Alternatively, use the LogGroupName parameter.
	//
	//    * If the destination type is s3, specify the ARN of an S3 bucket. For
	//    example: arn:aws:s3:::my_bucket/my_subfolder/ The subfolder is optional.
	//    Note that you can't use AWSLogs as a subfolder name.
	//
	//    * If the destination type is kinesis-data-firehose, specify the ARN of
	//    a Kinesis Data Firehose delivery stream. For example: arn:aws:firehose:region:account_id:deliverystream:my_stream
	logDestination?: null | string @go(LogDestination,*string)

	// The type of destination for the flow log data.
	//
	// Default: cloud-watch-logs
	logDestinationType?: null | string @go(LogDestinationType,*string)

	// The fields to include in the flow log record. List the fields in the order
	// in which they should appear. If you omit this parameter, the flow log is
	// created using the default format. If you specify this parameter, you must
	// include at least one field. For more information about the available fields,
	// see Flow log records (https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records)
	// in the Amazon VPC User Guide or Transit Gateway Flow Log records (https://docs.aws.amazon.com/vpc/latest/tgw/tgw-flow-logs.html#flow-log-records)
	// in the Amazon Web Services Transit Gateway Guide.
	//
	// Specify the fields using the ${field-id} format, separated by spaces.
	logFormat?: null | string @go(LogFormat,*string)

	// The name of a new or existing CloudWatch Logs log group where Amazon EC2
	// publishes your flow logs.
	//
	// This parameter is valid only if the destination type is cloud-watch-logs.
	logGroupName?: null | string @go(LogGroupName,*string)

	// The maximum interval of time during which a flow of packets is captured and
	// aggregated into a flow log record. The possible values are 60 seconds (1
	// minute) or 600 seconds (10 minutes). This parameter must be 60 seconds for
	// transit gateway resource types.
	//
	// When a network interface is attached to a Nitro-based instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances),
	// the aggregation interval is always 60 seconds or less, regardless of the
	// value that you specify.
	//
	// Default: 600
	maxAggregationInterval?: null | int64 @go(MaxAggregationInterval,*int64)

	// The type of traffic to monitor (accepted traffic, rejected traffic, or all
	// traffic). This parameter is not supported for transit gateway resource types.
	// It is required for the other resource types.
	trafficType?: null | string @go(TrafficType,*string)

	#CustomFlowLogParameters
}

// FlowLogSpec defines the desired state of FlowLog
#FlowLogSpec: {
	forProvider: #FlowLogParameters @go(ForProvider)
}

// FlowLogObservation defines the observed state of FlowLog
#FlowLogObservation: {
	// The status of the logs delivery (SUCCESS | FAILED).
	deliverLogsStatus?: null | string @go(DeliverLogsStatus,*string)

	// The ID of the flow log.
	flowLogID?: null | string @go(FlowLogID,*string)

	// The status of the flow log (ACTIVE).
	flowLogStatus?: null | string @go(FlowLogStatus,*string)

	// The ID of the resource being monitored.
	resourceID?: null | string @go(ResourceID,*string)

	// The tags for the flow log.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)
}

// FlowLogStatus defines the observed state of FlowLog.
#FlowLogStatus: {
	atProvider?: #FlowLogObservation @go(AtProvider)
}

// FlowLog is the Schema for the FlowLogs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#FlowLog: {
	spec:    #FlowLogSpec   @go(Spec)
	status?: #FlowLogStatus @go(Status)
}

// FlowLogList contains a list of FlowLogs
#FlowLogList: {
	items: [...#FlowLog] @go(Items,[]FlowLog)
}
