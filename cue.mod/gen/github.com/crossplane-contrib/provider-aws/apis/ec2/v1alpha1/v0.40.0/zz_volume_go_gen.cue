// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/ec2/v1alpha1

package v1alpha1

// VolumeParameters defines the desired state of Volume
#VolumeParameters: {
	// Region is which region the Volume will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The Availability Zone in which to create the volume.
	// +kubebuilder:validation:Required
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// Indicates whether the volume should be encrypted. The effect of setting the
	// encryption state to true depends on the volume origin (new or from a snapshot),
	// starting encryption state, ownership, and whether encryption by default is
	// enabled. For more information, see Encryption by default (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default)
	// in the Amazon Elastic Compute Cloud User Guide.
	//
	// Encrypted Amazon EBS volumes must be attached to instances that support Amazon
	// EBS encryption. For more information, see Supported instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances).
	encrypted?: null | bool @go(Encrypted,*bool)

	// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes,
	// this represents the number of IOPS that are provisioned for the volume. For
	// gp2 volumes, this represents the baseline performance of the volume and the
	// rate at which the volume accumulates I/O credits for bursting.
	//
	// The following are the supported values for each volume type:
	//
	//    * gp3: 3,000-16,000 IOPS
	//
	//    * io1: 100-64,000 IOPS
	//
	//    * io2: 100-64,000 IOPS
	//
	// io1 and io2 volumes support up to 64,000 IOPS only on Instances built on
	// the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).
	// Other instance families support performance up to 32,000 IOPS.
	//
	// This parameter is required for io1 and io2 volumes. The default for gp3 volumes
	// is 3,000 IOPS. This parameter is not supported for gp2, st1, sc1, or standard
	// volumes.
	iops?: null | int64 @go(IOPS,*int64)

	// Indicates whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach,
	// you can attach the volume to up to 16 Instances built on the Nitro System
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances)
	// in the same Availability Zone. This parameter is supported with io1 and io2
	// volumes only. For more information, see Amazon EBS Multi-Attach (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	multiAttachEnabled?: null | bool @go(MultiAttachEnabled,*bool)

	// The Amazon Resource Name (ARN) of the Outpost.
	outpostARN?: null | string @go(OutpostARN,*string)

	// The size of the volume, in GiBs. You must specify either a snapshot ID or
	// a volume size. If you specify a snapshot, the default is the snapshot size.
	// You can specify a volume size that is equal to or larger than the snapshot
	// size.
	//
	// The following are the supported volumes sizes for each volume type:
	//
	//    * gp2 and gp3: 1-16,384
	//
	//    * io1 and io2: 4-16,384
	//
	//    * st1 and sc1: 125-16,384
	//
	//    * standard: 1-1,024
	size?: null | int64 @go(Size,*int64)

	// The snapshot from which to create the volume. You must specify either a snapshot
	// ID or a volume size.
	snapshotID?: null | string @go(SnapshotID,*string)

	// The tags to apply to the volume during creation.
	tagSpecifications?: [...null | #TagSpecification] @go(TagSpecifications,[]*TagSpecification)

	// The throughput to provision for a volume, with a maximum of 1,000 MiB/s.
	//
	// This parameter is valid only for gp3 volumes.
	//
	// Valid Range: Minimum value of 125. Maximum value of 1000.
	throughput?: null | int64 @go(Throughput,*int64)

	// The volume type. This parameter can be one of the following values:
	//
	//    * General Purpose SSD: gp2 | gp3
	//
	//    * Provisioned IOPS SSD: io1 | io2
	//
	//    * Throughput Optimized HDD: st1
	//
	//    * Cold HDD: sc1
	//
	//    * Magnetic: standard
	//
	// For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	//
	// Default: gp2
	volumeType?: null | string @go(VolumeType,*string)

	#CustomVolumeParameters
}

// VolumeSpec defines the desired state of Volume
#VolumeSpec: {
	forProvider: #VolumeParameters @go(ForProvider)
}

// VolumeObservation defines the observed state of Volume
#VolumeObservation: {
	// Information about the volume attachments.
	attachments?: [...null | #VolumeAttachment] @go(Attachments,[]*VolumeAttachment)

	// Indicates whether the volume was created using fast snapshot restore.
	fastRestored?: null | bool @go(FastRestored,*bool)

	// The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key
	// that was used to protect the volume encryption key for the volume.
	kmsKeyID?: null | string @go(KMSKeyID,*string)

	// The volume state.
	state?: null | string @go(State,*string)

	// Any tags assigned to the volume.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	// The ID of the volume.
	volumeID?: null | string @go(VolumeID,*string)
}

// VolumeStatus defines the observed state of Volume.
#VolumeStatus: {
	atProvider?: #VolumeObservation @go(AtProvider)
}

// Volume is the Schema for the Volumes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Volume: {
	spec:    #VolumeSpec   @go(Spec)
	status?: #VolumeStatus @go(Status)
}

// VolumeList contains a list of Volumes
#VolumeList: {
	items: [...#Volume] @go(Items,[]Volume)
}
