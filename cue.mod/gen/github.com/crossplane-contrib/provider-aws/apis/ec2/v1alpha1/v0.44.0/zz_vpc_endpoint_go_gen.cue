// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/ec2/v1alpha1

package v1alpha1

// VPCEndpointParameters defines the desired state of VPCEndpoint
#VPCEndpointParameters: {
	// Region is which region the VPCEndpoint will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The DNS options for the endpoint.
	dnsOptions?: null | #DNSOptionsSpecification @go(DNSOptions,*DNSOptionsSpecification)

	// The IP address type for the endpoint.
	ipAddressType?: null | string @go(IPAddressType,*string)

	// (Interface and gateway endpoints) A policy to attach to the endpoint that
	// controls access to the service. The policy must be in valid JSON format.
	// If this parameter is not specified, we attach a default policy that allows
	// full access to the service.
	policyDocument?: null | string @go(PolicyDocument,*string)

	// (Interface endpoint) Indicates whether to associate a private hosted zone
	// with the specified VPC. The private hosted zone contains a record set for
	// the default public DNS name for the service for the Region (for example,
	// kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses
	// of the endpoint network interfaces in the VPC. This enables you to make requests
	// to the default public DNS name for the service instead of the public DNS
	// names that are automatically generated by the VPC endpoint service.
	//
	// To use a private hosted zone, you must set the following VPC attributes to
	// true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to
	// set the VPC attributes.
	//
	// Default: true
	privateDNSEnabled?: null | bool @go(PrivateDNSEnabled,*bool)

	// The name of the endpoint service.
	// +kubebuilder:validation:Required
	serviceName?: null | string @go(ServiceName,*string)

	// The subnet configurations for the endpoint.
	subnetConfigurations?: [...null | #SubnetConfiguration] @go(SubnetConfigurations,[]*SubnetConfiguration)

	// The tags to associate with the endpoint.
	tagSpecifications?: [...null | #TagSpecification] @go(TagSpecifications,[]*TagSpecification)

	// The type of endpoint.
	//
	// Default: Gateway
	vpcEndpointType?: null | string @go(VPCEndpointType,*string)

	#CustomVPCEndpointParameters
}

// VPCEndpointSpec defines the desired state of VPCEndpoint
#VPCEndpointSpec: {
	forProvider: #VPCEndpointParameters @go(ForProvider)
}

// VPCEndpointObservation defines the observed state of VPCEndpoint
#VPCEndpointObservation: {
	// (Interface endpoint) The DNS entries for the endpoint.
	dnsEntries?: [...null | #DNSEntry] @go(DNSEntries,[]*DNSEntry)

	// (Interface endpoint) Information about the security groups that are associated
	// with the network interface.
	groups?: [...null | #SecurityGroupIdentifier] @go(Groups,[]*SecurityGroupIdentifier)

	// The last error that occurred for endpoint.
	lastError?: null | #LastError @go(LastError,*LastError)

	// (Interface endpoint) The network interfaces for the endpoint.
	networkInterfaceIDs?: [...null | string] @go(NetworkInterfaceIDs,[]*string)

	// The ID of the Amazon Web Services account that owns the endpoint.
	ownerID?: null | string @go(OwnerID,*string)

	// Indicates whether the endpoint is being managed by its service.
	requesterManaged?: null | bool @go(RequesterManaged,*bool)

	// (Gateway endpoint) The IDs of the route tables associated with the endpoint.
	routeTableIDs?: [...null | string] @go(RouteTableIDs,[]*string)

	// The state of the endpoint.
	state?: null | string @go(State,*string)

	// (Interface endpoint) The subnets for the endpoint.
	subnetIDs?: [...null | string] @go(SubnetIDs,[]*string)

	// The tags assigned to the endpoint.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	// The ID of the endpoint.
	vpcEndpointID?: null | string @go(VPCEndpointID,*string)

	// The ID of the VPC to which the endpoint is associated.
	vpcID?: null | string @go(VPCID,*string)
}

// VPCEndpointStatus defines the observed state of VPCEndpoint.
#VPCEndpointStatus: {
	atProvider?: #VPCEndpointObservation @go(AtProvider)
}

// VPCEndpoint is the Schema for the VPCEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPCEndpoint: {
	spec:    #VPCEndpointSpec   @go(Spec)
	status?: #VPCEndpointStatus @go(Status)
}

// VPCEndpointList contains a list of VPCEndpoints
#VPCEndpointList: {
	items: [...#VPCEndpoint] @go(Items,[]VPCEndpoint)
}
