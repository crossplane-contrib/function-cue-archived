// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/ec2/manualv1alpha1

package manualv1alpha1

// SecurityGroupRuleParameters define the desired state of the SecurityGroupRule
#SecurityGroupRuleParameters: {
	// +kubebuilder:validation:Required
	fromPort?: null | int32 @go(FromPort,*int32)

	// +kubebuilder:validation:Required
	toPort?: null | int32 @go(ToPort,*int32)

	// Type of rule, ingress (inbound) or egress (outbound).
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)

	// +kubebuilder:validation:Required
	protocol?: null | string @go(Protocol,*string)

	// +kubebuilder:validation:Optional
	cidrBlock?: null | string @go(CidrBlock,*string)

	// +kubebuilder:validation:Optional
	ipv6cidrBlock?: null | string @go(Ipv6CidrBlock,*string)

	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// +kubebuilder:validation:Optional
	prefixListId?: null | string @go(PrefixListID,*string)

	// Region is the region you'd like your resource to be created in.
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// If using a SecurityGroup managed by crossplane as reference,
	// enable ignoreIngress or ignoreEgress on the sg to prevent the
	// rules to be constantly created and deleted
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +kubebuilder:validation:Optional
	// +immutable
	securityGroupId?: null | string @go(SecurityGroupID,*string)

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +kubebuilder:validation:Optional
	sourceSecurityGroupId?: null | string @go(SourceSecurityGroupID,*string)
}

// A SecurityGroupRuleSpec defines the desired state of a SecurityGroupRule.
#SecurityGroupRuleSpec: {
	forProvider: #SecurityGroupRuleParameters @go(ForProvider)
}

// SecurityGroupRuleObservation keeps the state for the external resource
#SecurityGroupRuleObservation: {
	// The association ID for the SecurityGroupRule block.
	SecurityGroupRuleId?: null | string @go(SecurityGroupRuleID,*string)
}

// SecurityGroupRuleState represents the state of a SecurityGroupRule Block
#SecurityGroupRuleState: {
	// The state of the SecurityGroupRule block.
	state?: null | string @go(State,*string)

	// A message about the status of the SecurityGroupRule block, if applicable.
	statusMessage?: null | string @go(StatusMessage,*string)
}

// A SecurityGroupRuleStatus represents the observed state of a SecurityGroupRule.
#SecurityGroupRuleStatus: {
	atProvider?: #SecurityGroupRuleObservation @go(AtProvider)
}

// A SecurityGroupRule is a managed resource that represents an SecurityGroupRule
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="ID",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="SG",type="string",JSONPath=".spec.forProvider.securityGroupId"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SecurityGroupRule: {
	spec:    #SecurityGroupRuleSpec   @go(Spec)
	status?: #SecurityGroupRuleStatus @go(Status)
}

// SecurityGroupRuleList contains a list of SecurityGroupRules
#SecurityGroupRuleList: {
	items: [...#SecurityGroupRule] @go(Items,[]SecurityGroupRule)
}
