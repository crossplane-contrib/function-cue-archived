// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/transfer/v1alpha1

package v1alpha1

// UserParameters defines the desired state of User
#UserParameters: {
	// Region is which region the User will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The landing directory (folder) for a user when they log in to the server
	// using the client.
	//
	// A HomeDirectory example is /bucket_name/home/mydirectory.
	homeDirectory?: null | string @go(HomeDirectory,*string)

	// Logical directory mappings that specify what Amazon S3 or Amazon EFS paths
	// and keys should be visible to your user and how you want to make them visible.
	// You must specify the Entry and Target pair, where Entry shows how the path
	// is made visible and Target is the actual Amazon S3 or Amazon EFS path. If
	// you only specify a target, it is displayed as is. You also must ensure that
	// your Identity and Access Management (IAM) role provides access to paths in
	// Target. This value can be set only when HomeDirectoryType is set to LOGICAL.
	//
	// The following is an Entry and Target pair example.
	//
	// [ { "Entry": "/directory1", "Target": "/bucket_name/home/mydirectory" } ]
	//
	// In most cases, you can use this value instead of the session policy to lock
	// your user down to the designated home directory ("chroot"). To do this, you
	// can set Entry to / and set Target to the value the user should see for their
	// home directory when they log in.
	//
	// The following is an Entry and Target pair example for chroot.
	//
	// [ { "Entry": "/", "Target": "/bucket_name/home/mydirectory" } ]
	homeDirectoryMappings?: [...null | #HomeDirectoryMapEntry] @go(HomeDirectoryMappings,[]*HomeDirectoryMapEntry)

	// The type of landing directory (folder) that you want your users' home directory
	// to be when they log in to the server. If you set it to PATH, the user will
	// see the absolute Amazon S3 bucket or EFS paths as is in their file transfer
	// protocol clients. If you set it LOGICAL, you need to provide mappings in
	// the HomeDirectoryMappings for how you want to make Amazon S3 or Amazon EFS
	// paths visible to your users.
	homeDirectoryType?: null | string @go(HomeDirectoryType,*string)

	// A session policy for your user so that you can use the same Identity and
	// Access Management (IAM) role across multiple users. This policy scopes down
	// a user's access to portions of their Amazon S3 bucket. Variables that you
	// can use inside this policy include ${Transfer:UserName}, ${Transfer:HomeDirectory},
	// and ${Transfer:HomeBucket}.
	//
	// This policy applies only when the domain of ServerId is Amazon S3. Amazon
	// EFS does not use session policies.
	//
	// For session policies, Transfer Family stores the policy as a JSON blob, instead
	// of the Amazon Resource Name (ARN) of the policy. You save the policy as a
	// JSON blob and pass it in the Policy argument.
	//
	// For an example of a session policy, see Example session policy (https://docs.aws.amazon.com/transfer/latest/userguide/session-policy.html).
	//
	// For more information, see AssumeRole (https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html)
	// in the Amazon Web Services Security Token Service API Reference.
	policy?: null | string @go(Policy,*string)

	// Specifies the full POSIX identity, including user ID (Uid), group ID (Gid),
	// and any secondary groups IDs (SecondaryGids), that controls your users' access
	// to your Amazon EFS file systems. The POSIX permissions that are set on files
	// and directories in Amazon EFS determine the level of access your users get
	// when transferring files into and out of your Amazon EFS file systems.
	posixProfile?: null | #PosixProfile @go(PosixProfile,*PosixProfile)

	// Key-value pairs that can be used to group and search for users. Tags are
	// metadata attached to users for any purpose.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	#CustomUserParameters
}

// UserSpec defines the desired state of User
#UserSpec: {
	forProvider: #UserParameters @go(ForProvider)
}

// UserObservation defines the observed state of User
#UserObservation: {
	// Specifies the unique Amazon Resource Name (ARN) for the user that was requested
	// to be described.
	arn?: null | string @go(ARN,*string)

	// The identifier of the server that the user is attached to.
	serverID?: null | string @go(ServerID,*string)

	// Specifies the public key portion of the Secure Shell (SSH) keys stored for
	// the described user.
	sshPublicKeys?: [...null | #SshPublicKey] @go(SshPublicKeys,[]*SshPublicKey)

	// A unique string that identifies a Transfer Family user.
	userName?: null | string @go(UserName,*string)
}

// UserStatus defines the observed state of User.
#UserStatus: {
	atProvider?: #UserObservation @go(AtProvider)
}

// User is the Schema for the Users API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#User: {
	spec:    #UserSpec   @go(Spec)
	status?: #UserStatus @go(Status)
}

// UserList contains a list of Users
#UserList: {
	items: [...#User] @go(Items,[]User)
}
