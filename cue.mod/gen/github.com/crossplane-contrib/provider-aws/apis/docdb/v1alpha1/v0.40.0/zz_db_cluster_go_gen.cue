// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/docdb/v1alpha1

package v1alpha1

// DBClusterParameters defines the desired state of DBCluster
#DBClusterParameters: {
	// Region is which region the DBCluster will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// A list of Amazon EC2 Availability Zones that instances in the cluster can
	// be created in.
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)

	// The number of days for which automated backups are retained. You must specify
	// a minimum value of 1.
	//
	// Default: 1
	//
	// Constraints:
	//
	//    * Must be a value from 1 to 35.
	backupRetentionPeriod?: null | int64 @go(BackupRetentionPeriod,*int64)

	// The name of the cluster parameter group to associate with this cluster.
	dbClusterParameterGroupName?: null | string @go(DBClusterParameterGroupName,*string)

	// A subnet group to associate with this cluster.
	//
	// Constraints: Must match the name of an existing DBSubnetGroup. Must not be
	// default.
	//
	// Example: mySubnetgroup
	dbSubnetGroupName?: null | string @go(DBSubnetGroupName,*string)

	// Specifies whether this cluster can be deleted. If DeletionProtection is enabled,
	// the cluster cannot be deleted unless it is modified and DeletionProtection
	// is disabled. DeletionProtection protects clusters from being accidentally
	// deleted.
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// DestinationRegion is used for presigning the request to a given region.
	destinationRegion?: null | string @go(DestinationRegion,*string)

	// A list of log types that need to be enabled for exporting to Amazon CloudWatch
	// Logs. You can enable audit logs or profiler logs. For more information, see
	// Auditing Amazon DocumentDB Events (https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html)
	// and Profiling Amazon DocumentDB Operations (https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html).
	enableCloudwatchLogsExports?: [...null | string] @go(EnableCloudwatchLogsExports,[]*string)

	// The name of the database engine to be used for this cluster.
	//
	// Valid values: docdb
	// +kubebuilder:validation:Required
	engine?: null | string @go(Engine,*string)

	// The version number of the database engine to use. The --engine-version will
	// default to the latest major engine version. For production workloads, we
	// recommend explicitly declaring this parameter with the intended major engine
	// version.
	engineVersion?: null | string @go(EngineVersion,*string)

	// The cluster identifier of the new global cluster.
	globalClusterIdentifier?: null | string @go(GlobalClusterIdentifier,*string)

	// The KMS key identifier for an encrypted cluster.
	//
	// The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption
	// key. If you are creating a cluster using the same Amazon Web Services account
	// that owns the KMS encryption key that is used to encrypt the new cluster,
	// you can use the KMS key alias instead of the ARN for the KMS encryption key.
	//
	// If an encryption key is not specified in KmsKeyId:
	//
	//    * If the StorageEncrypted parameter is true, Amazon DocumentDB uses your
	//    default encryption key.
	//
	// KMS creates the default encryption key for your Amazon Web Services account.
	// Your Amazon Web Services account has a different default encryption key for
	// each Amazon Web Services Regions.
	kmsKeyID?: null | string @go(KMSKeyID,*string)

	// The name of the master user for the cluster.
	//
	// Constraints:
	//
	//    * Must be from 1 to 63 letters or numbers.
	//
	//    * The first character must be a letter.
	//
	//    * Cannot be a reserved word for the chosen database engine.
	masterUsername?: null | string @go(MasterUsername,*string)

	// The port number on which the instances in the cluster accept connections.
	port?: null | int64 @go(Port,*int64)

	// Not currently supported.
	preSignedURL?: null | string @go(PreSignedURL,*string)

	// The daily time range during which automated backups are created if automated
	// backups are enabled using the BackupRetentionPeriod parameter.
	//
	// The default is a 30-minute window selected at random from an 8-hour block
	// of time for each Amazon Web Services Region.
	//
	// Constraints:
	//
	//    * Must be in the format hh24:mi-hh24:mi.
	//
	//    * Must be in Universal Coordinated Time (UTC).
	//
	//    * Must not conflict with the preferred maintenance window.
	//
	//    * Must be at least 30 minutes.
	preferredBackupWindow?: null | string @go(PreferredBackupWindow,*string)

	// The weekly time range during which system maintenance can occur, in Universal
	// Coordinated Time (UTC).
	//
	// Format: ddd:hh24:mi-ddd:hh24:mi
	//
	// The default is a 30-minute window selected at random from an 8-hour block
	// of time for each Amazon Web Services Region, occurring on a random day of
	// the week.
	//
	// Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun
	//
	// Constraints: Minimum 30-minute window.
	preferredMaintenanceWindow?: null | string @go(PreferredMaintenanceWindow,*string)

	// SourceRegion is the source region where the resource exists. This is not
	// sent over the wire and is only used for presigning. This value should always
	// have the same region as the source ARN.
	sourceRegion?: null | string @go(SourceRegion,*string)

	// Specifies whether the cluster is encrypted.
	storageEncrypted?: null | bool @go(StorageEncrypted,*bool)

	// The tags to be assigned to the cluster.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	// A list of EC2 VPC security groups to associate with this cluster.
	vpcSecurityGroupIDs?: [...null | string] @go(VPCSecurityGroupIDs,[]*string)

	#CustomDBClusterParameters
}

// DBClusterSpec defines the desired state of DBCluster
#DBClusterSpec: {
	forProvider: #DBClusterParameters @go(ForProvider)
}

// DBClusterObservation defines the observed state of DBCluster
#DBClusterObservation: {
	// Provides a list of the Identity and Access Management (IAM) roles that are
	// associated with the cluster. (IAM) roles that are associated with a cluster
	// grant permission for the cluster to access other Amazon Web Services services
	// on your behalf.
	associatedRoles?: [...null | #DBClusterRole] @go(AssociatedRoles,[]*DBClusterRole)

	// Identifies the clone group to which the DB cluster is associated.
	cloneGroupID?: null | string @go(CloneGroupID,*string)

	// The Amazon Resource Name (ARN) for the cluster.
	dbClusterARN?: null | string @go(DBClusterARN,*string)

	// Contains a user-supplied cluster identifier. This identifier is the unique
	// key that identifies a cluster.
	dbClusterIdentifier?: null | string @go(DBClusterIdentifier,*string)

	// Provides the list of instances that make up the cluster.
	dbClusterMembers?: [...null | #DBClusterMember] @go(DBClusterMembers,[]*DBClusterMember)

	// Specifies the name of the cluster parameter group for the cluster.
	dbClusterParameterGroup?: null | string @go(DBClusterParameterGroup,*string)

	// Specifies information on the subnet group that is associated with the cluster,
	// including the name, description, and subnets in the subnet group.
	dbSubnetGroup?: null | string @go(DBSubnetGroup,*string)

	// The Amazon Web Services Region-unique, immutable identifier for the cluster.
	// This identifier is found in CloudTrail log entries whenever the KMS key for
	// the cluster is accessed.
	dbClusterResourceID?: null | string @go(DBClusterResourceID,*string)

	// A list of log types that this cluster is configured to export to Amazon CloudWatch
	// Logs.
	enabledCloudwatchLogsExports?: [...null | string] @go(EnabledCloudwatchLogsExports,[]*string)

	// Specifies the connection endpoint for the primary instance of the cluster.
	endpoint?: null | string @go(Endpoint,*string)

	// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
	hostedZoneID?: null | string @go(HostedZoneID,*string)

	// Specifies whether the cluster has instances in multiple Availability Zones.
	multiAZ?: null | bool @go(MultiAZ,*bool)

	// Specifies the progress of the operation as a percentage.
	percentProgress?: null | string @go(PercentProgress,*string)

	// Contains one or more identifiers of the secondary clusters that are associated
	// with this cluster.
	readReplicaIdentifiers?: [...null | string] @go(ReadReplicaIdentifiers,[]*string)

	// The reader endpoint for the cluster. The reader endpoint for a cluster load
	// balances connections across the Amazon DocumentDB replicas that are available
	// in a cluster. As clients request new connections to the reader endpoint,
	// Amazon DocumentDB distributes the connection requests among the Amazon DocumentDB
	// replicas in the cluster. This functionality can help balance your read workload
	// across multiple Amazon DocumentDB replicas in your cluster.
	//
	// If a failover occurs, and the Amazon DocumentDB replica that you are connected
	// to is promoted to be the primary instance, your connection is dropped. To
	// continue sending your read workload to other Amazon DocumentDB replicas in
	// the cluster, you can then reconnect to the reader endpoint.
	readerEndpoint?: null | string @go(ReaderEndpoint,*string)

	// Contains the identifier of the source cluster if this cluster is a secondary
	// cluster.
	replicationSourceIdentifier?: null | string @go(ReplicationSourceIdentifier,*string)

	// Specifies the current state of this cluster.
	status?: null | string @go(Status,*string)

	// Provides a list of virtual private cloud (VPC) security groups that the cluster
	// belongs to.
	vpcSecurityGroups?: [...null | #VPCSecurityGroupMembership] @go(VPCSecurityGroups,[]*VPCSecurityGroupMembership)
}

// DBClusterStatus defines the observed state of DBCluster.
#DBClusterStatus: {
	atProvider?: #DBClusterObservation @go(AtProvider)
}

// DBCluster is the Schema for the DBClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DBCluster: {
	spec:    #DBClusterSpec   @go(Spec)
	status?: #DBClusterStatus @go(Status)
}

// DBClusterList contains a list of DBClusters
#DBClusterList: {
	items: [...#DBCluster] @go(Items,[]DBCluster)
}
