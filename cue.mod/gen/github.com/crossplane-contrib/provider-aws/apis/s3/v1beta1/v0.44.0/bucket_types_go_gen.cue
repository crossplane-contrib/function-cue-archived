// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/s3/v1beta1

package v1beta1

import "github.com/crossplane-contrib/provider-aws/apis/s3/common"

// ResourceCredentialsSecretRegionKey is the key for region that the S3 bucket is located
#ResourceCredentialsSecretRegionKey: "region"

// BucketParameters are parameters for configuring the calls made to AWS Bucket API.
#BucketParameters: {
	// The canned ACL to apply to the bucket.
	// +kubebuilder:validation:Enum=private;public-read;public-read-write;authenticated-read;aws-exec-read;bucket-owner-read;bucket-owner-full-control;log-delivery-write
	// +optional
	acl?: null | string @go(ACL,*string)

	// LocationConstraint specifies the Region where the bucket will be created.
	// It is a required field.
	// Due to AWS API limitations lacking on a proper response, when this field is set to a wrong value,
	// or to non-existent region on bucket creation, it's impossible forwarding a meaningful status message to the user
	// about the problem, producing connection errors instead.
	locationConstraint: string @go(LocationConstraint)

	// Allows grantee the read, write, read ACP, and write ACP permissions on the
	// bucket.
	// +optional
	grantFullControl?: null | string @go(GrantFullControl,*string)

	// Allows grantee to list the objects in the bucket.
	// +optional
	grantRead?: null | string @go(GrantRead,*string)

	// Allows grantee to read the bucket ACL.
	// +optional
	grantReadAcp?: null | string @go(GrantReadACP,*string)

	// Allows grantee to create, overwrite, and delete any object in the bucket.
	// +optional
	grantWrite?: null | string @go(GrantWrite,*string)

	// Allows grantee to write the ACL for the applicable bucket.
	// +optional
	grantWriteAcp?: null | string @go(GrantWriteACP,*string)

	// Specifies whether you want S3 Object Lock to be enabled for the new bucket.
	// +optional
	objectLockEnabledForBucket?: null | bool @go(ObjectLockEnabledForBucket,*bool)

	// The container element for object ownership for a bucket's ownership controls.
	// BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the
	// bucket owner if the objects are uploaded with the bucket-owner-full-control
	// canned ACL. ObjectWriter - The uploading account will own the object if the
	// object is uploaded with the bucket-owner-full-control canned ACL.
	// BucketOwnerEnforced - Access control lists (ACLs) are disabled and no longer
	// affect permissions. The bucket owner automatically owns and has full control
	// over every object in the bucket. The bucket only accepts PUT requests that don't
	// specify an ACL or bucket owner full control ACLs, such as the
	// bucket-owner-full-control canned ACL or an equivalent form of this ACL expressed
	// in the XML format.
	// +kubebuilder:validation:Enum=BucketOwnerPreferred;ObjectWriter;BucketOwnerEnforced
	// +optional
	objectOwnership?: null | string @go(ObjectOwnership,*string)

	// Specifies default encryption for a bucket using server-side encryption with
	// Amazon S3-managed keys (SSE-S3) or customer master keys stored in AWS KMS
	// (SSE-KMS). For information about the Amazon S3 default encryption feature,
	// see Amazon S3 Default Bucket Encryption (https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html)
	// in the Amazon Simple Storage Service Developer Guide.
	// +optional
	serverSideEncryptionConfiguration?: null | #ServerSideEncryptionConfiguration @go(ServerSideEncryptionConfiguration,*ServerSideEncryptionConfiguration)

	// VersioningConfiguration describes the versioning state of an Amazon S3 bucket.
	// See the AWS API reference guide for Amazon Simple Storage Service's API operation PutBucketVersioning for usage
	// and error information. See also, https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketVersioning
	// +optional
	versioningConfiguration?: null | #VersioningConfiguration @go(VersioningConfiguration,*VersioningConfiguration)

	// AccelerateConfiguration configures the transfer acceleration state for an
	// Amazon S3 bucket. For more information, see Amazon S3 Transfer Acceleration
	// (https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html)
	// in the Amazon Simple Storage Service Developer Guide.
	// +optional
	accelerateConfiguration?: null | #AccelerateConfiguration @go(AccelerateConfiguration,*AccelerateConfiguration)

	// Describes the cross-origin access configuration for objects in an Amazon
	// S3 bucket. For more information, see Enabling Cross-Origin Resource Sharing
	// (https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the Amazon
	// Simple Storage Service Developer Guide.
	// +optional
	corsConfiguration?: null | #CORSConfiguration @go(CORSConfiguration,*CORSConfiguration)

	// Specifies website configuration parameters for an Amazon S3 bucket.
	// See the AWS API reference guide for Amazon Simple Storage Service's API operation PutBucketWebsite for usage
	// and error information. See also, https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketWebsite
	// +optional
	websiteConfiguration?: null | #WebsiteConfiguration @go(WebsiteConfiguration,*WebsiteConfiguration)

	// Specifies logging parameters for an Amazon S3 bucket. Set the logging parameters for a bucket and
	// to specify permissions for who can view and modify the logging parameters. See the AWS API
	// reference guide for Amazon Simple Storage Service's API operation PutBucketLogging for usage
	// and error information. See also, https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/PutBucketLogging
	// +optional
	loggingConfiguration?: null | #LoggingConfiguration @go(LoggingConfiguration,*LoggingConfiguration)

	// Specifies payer parameters for an Amazon S3 bucket.
	// For more information, see Request Pays buckets
	// (https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html) in the Amazon
	// Simple Storage Service Developer Guide.
	// +optional
	paymentConfiguration?: null | #PaymentConfiguration @go(PayerConfiguration,*PaymentConfiguration)

	// Sets the tags for a bucket.
	// Use tags to organize your AWS bill to reflect your own cost structure.
	// For more information, see Billing and usage reporting for S3 buckets.
	// (https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketBilling.html) in the Amazon
	// Simple Storage Service Developer Guide.
	// +optional
	tagging?: null | #Tagging @go(BucketTagging,*Tagging)

	// Creates a replication configuration or replaces an existing one.
	// For more information, see Replication (https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html)
	// in the Amazon S3 Developer Guide.
	// +optional
	replicationConfiguration?: null | #ReplicationConfiguration @go(ReplicationConfiguration,*ReplicationConfiguration)

	// Creates a new lifecycle configuration for the bucket or replaces an existing
	// lifecycle configuration. For information about lifecycle configuration, see
	// Managing Access Permissions to Your Amazon S3 Resources
	// (https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html).
	// +optional
	lifecycleConfiguration?: null | #BucketLifecycleConfiguration @go(LifecycleConfiguration,*BucketLifecycleConfiguration)

	// Enables notifications of specified events for a bucket.
	// For more information about event notifications, see Configuring Event Notifications
	// (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).
	// +optional
	notificationConfiguration?: null | #NotificationConfiguration @go(NotificationConfiguration,*NotificationConfiguration)

	// PublicAccessBlockConfiguration that you want to apply to this Amazon
	// S3 bucket.
	publicAccessBlockConfiguration?: null | #PublicAccessBlockConfiguration @go(PublicAccessBlockConfiguration,*PublicAccessBlockConfiguration)

	// Policy is a well defined type which can be parsed into an JSON S3 Bucket
	// Policy.
	//
	// By default, to ensure compatibility with previous APIs, a bucket policy
	// is never deleted from a bucket if this field is set to null.
	// To change this behaviour, see `policyUpdatePolicy`.
	//
	// +optional
	policy?: null | common.#BucketPolicyBody @go(Policy,*common.BucketPolicyBody)

	// PolicyUpdatePolicy specifies the update behaviour of `policy`.
	policyUpdatePolicy?: null | #BucketPolicyUpdatePolicy @go(PolicyUpdatePolicy,*BucketPolicyUpdatePolicy)
}

// BucketPolicyUpdatePolicy specifies the update behaviour of a bucket policy.
#BucketPolicyUpdatePolicy: {
	// DeletionPolicy specifies how and if the bucket policy should be deleted
	// from the bucket.
	//
	// * `Never`: The bucket policy is never deleted, but only overwritten. If a
	// change is detected.
	//
	// * `IfNull`: The bucket policy is deleted if the `policy` field is set to
	// null.
	//
	// The default is `Never`.
	//
	// +kubebuilder:default="Never"
	// +kubebuilder:Enum=Never;IfNull
	deletionPolicy?: #BucketPolicyDeletionPolicy @go(DeletionPolicy)
}

// BucketPolicyDeletionPolicy determines how a bucket policy should be deleted
// from a bucket.
#BucketPolicyDeletionPolicy: string // #enumBucketPolicyDeletionPolicy

#enumBucketPolicyDeletionPolicy:
	#BucketPolicyDeletionPolicyNever |
	#BucketPolicyDeletionPolicyIfNull

// BucketPolicyDeletionPolicyNever specifies that a bucket policy is never
// deleted but only overwritten.
#BucketPolicyDeletionPolicyNever: #BucketPolicyDeletionPolicy & "Never"

// BucketPolicyDeletionPolicyIfNull specifies that a bucket policy is
// deleted if the corresponding spec field is null.
#BucketPolicyDeletionPolicyIfNull: #BucketPolicyDeletionPolicy & "IfNull"

// BucketSpec represents the desired state of the Bucket.
#BucketSpec: {
	forProvider: #BucketParameters @go(ForProvider)
}

// BucketExternalStatus keeps the state for the external resource
#BucketExternalStatus: {
	// ARN is the Amazon Resource Name (ARN) specifying the S3 Bucket. For more information
	// about ARNs and how to use them, see S3 Resources (https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)
	// in the Amazon Simple Storage Service guide.
	arn: string @go(ARN)
}

// BucketStatus represents the observed state of the Bucket.
#BucketStatus: {
	atProvider?: #BucketExternalStatus @go(AtProvider)
}

// An Bucket is a managed resource that represents an AWS S3 Bucket.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Bucket: {
	spec:    #BucketSpec   @go(Spec)
	status?: #BucketStatus @go(Status)
}

// BucketList contains a list of Buckets
#BucketList: {
	items: [...#Bucket] @go(Items,[]Bucket)
}
