// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/s3/v1beta1

package v1beta1

// WebsiteConfiguration specifies website configuration parameters for an Amazon S3 bucket.
#WebsiteConfiguration: {
	// The name of the error document for the website.
	// +optional
	errorDocument?: null | #ErrorDocument @go(ErrorDocument,*ErrorDocument)

	// The name of the index document for the website.
	// +optional
	indexDocument?: null | #IndexDocument @go(IndexDocument,*IndexDocument)

	// The redirect behavior for every request to this bucket's website endpoint.
	// If you specify this property, you can't specify any other property.
	// +optional
	redirectAllRequestsTo?: null | #RedirectAllRequestsTo @go(RedirectAllRequestsTo,*RedirectAllRequestsTo)

	// Rules that define when a redirect is applied and the redirect behavior.
	// +optional
	routingRules?: [...#RoutingRule] @go(RoutingRules,[]RoutingRule)
}

// ErrorDocument is the error information.
#ErrorDocument: {
	// The object key name to use when a 4XX class error occurs.
	key: string @go(Key)
}

// IndexDocument is container for the Suffix element.
#IndexDocument: {
	// A suffix that is appended to a request that is for a directory on the website
	// endpoint (for example,if the suffix is index.html and you make a request
	// to samplebucket/images/ the data that is returned will be for the object
	// with the key name images/index.html) The suffix must not be empty and must
	// not include a slash character.
	suffix: string @go(Suffix)
}

// RedirectAllRequestsTo specifies the redirect behavior of all requests to a
// website endpoint of an Amazon S3 bucket.
#RedirectAllRequestsTo: {
	// Name of the host where requests are redirected.
	hostName: string @go(HostName)

	// Protocol to use when redirecting requests. The default is the protocol that
	// is used in the original request.
	// +kubebuilder:validation:Enum=http;https
	protocol?: string @go(Protocol)
}

// RoutingRule specifies the redirect behavior and when a redirect is applied.
#RoutingRule: {
	// A container for describing a condition that must be met for the specified
	// redirect to apply. For example, 1. If request is for pages in the /docs folder,
	// redirect to the /documents folder. 2. If request results in HTTP error 4xx,
	// redirect request to another host where you might process the error.
	// +optional
	condition?: null | #Condition @go(Condition,*Condition)

	// Container for redirect information. You can redirect requests to another
	// host, to another page, or with another protocol. In the event of an error,
	// you can specify a different error code to return.
	redirect: #Redirect @go(Redirect)
}

// Condition is a container for describing a condition that must be met for the specified
// redirect to apply. For example, 1. If request is for pages in the /docs folder,
// redirect to the /documents folder. 2. If request results in HTTP error 4xx,
// redirect request to another host where you might process the error.
#Condition: {
	// The HTTP error code when the redirect is applied. In the event of an error,
	// if the error code equals this value, then the specified redirect is applied.
	// Required when parent element Condition is specified and sibling KeyPrefixEquals
	// is not specified. If both are specified, then both must be true for the redirect
	// to be applied.
	httpErrorCodeReturnedEquals?: null | string @go(HTTPErrorCodeReturnedEquals,*string)

	// The object key name prefix when the redirect is applied. For example, to
	// redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html.
	// To redirect request for all pages with the prefix docs/, the key prefix will
	// be /docs, which identifies all objects in the docs/ folder. Required when
	// the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals
	// is not specified. If both conditions are specified, both must be true for
	// the redirect to be applied.
	keyPrefixEquals?: null | string @go(KeyPrefixEquals,*string)
}

// Redirect specifies how requests are redirected. In the event of an error, you can
// specify a different error code to return.
#Redirect: {
	// The host name to use in the redirect request.
	// +optional
	keyPrefixEquals?: null | string @go(HostName,*string)

	// The HTTP redirect code to use on the response. Not required if one of the
	// siblings is present.
	httpRedirectCode?: null | string @go(HTTPRedirectCode,*string)

	// Protocol to use when redirecting requests. The default is the protocol that
	// is used in the original request.
	protocol?: string @go(Protocol)

	// The object key prefix to use in the redirect request. For example, to redirect
	// requests for all pages with prefix docs/ (objects in the docs/ folder) to
	// documents/, you can set a condition block with KeyPrefixEquals set to docs/
	// and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required
	// if one of the siblings is present. Can be present only if ReplaceKeyWith
	// is not provided.
	replaceKeyPrefixWith?: null | string @go(ReplaceKeyPrefixWith,*string)

	// The specific object key to use in the redirect request. For example, redirect
	// request to error.html. Not required if one of the siblings is present. Can
	// be present only if ReplaceKeyPrefixWith is not provided.
	replaceKeyWith?: null | string @go(ReplaceKeyWith,*string)
}
