// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/s3/v1beta1

package v1beta1

// NotificationConfiguration specifies the notification configuration of the bucket.
// If this element is empty, notifications are turned off for the bucket.
#NotificationConfiguration: {
	// Describes the AWS Lambda functions to invoke and the events for which to
	// invoke them.
	// +optional
	lambdaFunctionConfigurations?: [...#LambdaFunctionConfiguration] @go(LambdaFunctionConfigurations,[]LambdaFunctionConfiguration)

	// The Amazon Simple Queue Service queues to publish messages to and the events
	// for which to publish messages.
	// +optional
	queueConfigurations?: [...#QueueConfiguration] @go(QueueConfigurations,[]QueueConfiguration)

	// The topic to which notifications are sent and the events for which notifications
	// are generated.
	// +optional
	topicConfigurations?: [...#TopicConfiguration] @go(TopicConfigurations,[]TopicConfiguration)
}

// PublicAccessBlockConfiguration that you want to apply to this Amazon
// S3 bucket. You can enable the configuration options in any combination. For
// more information about when Amazon S3 considers a bucket or object public,
// see The Meaning of "Public" (https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status)
// in the Amazon Simple Storage Service Developer Guide.
#PublicAccessBlockConfiguration: {
	// Specifies whether Amazon S3 should block public access control lists (ACLs)
	// for this bucket and objects in this bucket. Setting this element to TRUE
	// causes the following behavior:
	//
	//    * PUT Bucket acl and PUT Object acl calls fail if the specified ACL is
	//    public.
	//
	//    * PUT Object calls fail if the request includes a public ACL.
	//
	//    * PUT Bucket calls fail if the request includes a public ACL.
	//
	// Enabling this setting doesn't affect existing policies or ACLs.
	blockPublicAcls?: null | bool @go(BlockPublicAcls,*bool)

	// Specifies whether Amazon S3 should block public bucket policies for this
	// bucket. Setting this element to TRUE causes Amazon S3 to reject calls to
	// PUT Bucket policy if the specified bucket policy allows public access.
	//
	// Enabling this setting doesn't affect existing bucket policies.
	blockPublicPolicy?: null | bool @go(BlockPublicPolicy,*bool)

	// Specifies whether Amazon S3 should ignore public ACLs for this bucket and
	// objects in this bucket. Setting this element to TRUE causes Amazon S3 to
	// ignore all public ACLs on this bucket and objects in this bucket.
	//
	// Enabling this setting doesn't affect the persistence of any existing ACLs
	// and doesn't prevent new public ACLs from being set.
	ignorePublicAcls?: null | bool @go(IgnorePublicAcls,*bool)

	// Specifies whether Amazon S3 should restrict public bucket policies for this
	// bucket. Setting this element to TRUE restricts access to this bucket to only
	// AWS services and authorized users within this account if the bucket has a
	// public policy.
	//
	// Enabling this setting doesn't affect previously stored bucket policies, except
	// that public and cross-account access within any public bucket policy, including
	// non-public delegation to specific accounts, is blocked.
	restrictPublicBuckets?: null | bool @go(RestrictPublicBuckets,*bool)
}

// LambdaFunctionConfiguration contains the configuration for AWS Lambda notifications.
#LambdaFunctionConfiguration: {
	// The Amazon S3 bucket event for which to invoke the AWS Lambda function. For
	// more information, see Supported Event Types (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html)
	// in the Amazon Simple Storage Service Developer Guide.
	//
	// Events is a required field
	// A full list of valid events can be found in the Amazon S3 Developer guide
	// https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations
	events: [...string] @go(Events,[]string)

	// Specifies object key name filtering rules. For information about key name
	// filtering, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html)
	// in the Amazon Simple Storage Service Developer Guide.
	filter?: null | #NotificationConfigurationFilter @go(Filter,*NotificationConfigurationFilter)

	// An optional unique identifier for configurations in a notification configuration.
	// If you don't provide one, Amazon S3 will assign an ID.
	// +optional
	ID?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon S3
	// invokes when the specified event type occurs.
	//
	// LambdaFunctionArn is a required field
	lambdaFunctionArn: string @go(LambdaFunctionArn)
}

// QueueConfiguration specifies the configuration for publishing messages to an Amazon Simple Queue
// Service (Amazon SQS) queue when Amazon S3 detects specified events.
#QueueConfiguration: {
	// A collection of bucket events for which to send notifications
	//
	// Events is a required field
	// A full list of valid events can be found in the Amazon S3 Developer guide
	// https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations
	events: [...string] @go(Events,[]string)

	// Specifies object key name filtering rules. For information about key name
	// filtering, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html)
	// in the Amazon Simple Storage Service Developer Guide.
	filter?: null | #NotificationConfigurationFilter @go(Filter,*NotificationConfigurationFilter)

	// An optional unique identifier for configurations in a notification configuration.
	// If you don't provide one, Amazon S3 will assign an ID.
	// +optional
	ID?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3
	// publishes a message when it detects events of the specified type.
	//
	// QueueArn is a required field
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-aws/apis/sqs/v1beta1.QueueARN()
	queueArn?: null | string @go(QueueArn,*string)
}

// TopicConfiguration specifies the configuration for publication of messages
// to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3
// detects specified events.
#TopicConfiguration: {
	// The Amazon S3 bucket event about which to send notifications. For more information,
	// see Supported Event Types (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html)
	// in the Amazon Simple Storage Service Developer Guide.
	//
	// Events is a required field
	// A full list of valid events can be found in the Amazon S3 Developer guide
	// https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations
	events: [...string] @go(Events,[]string)

	// Specifies object key name filtering rules. For information about key name
	// filtering, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html)
	// in the Amazon Simple Storage Service Developer Guide.
	filter?: null | #NotificationConfigurationFilter @go(Filter,*NotificationConfigurationFilter)

	// An optional unique identifier for configurations in a notification configuration.
	// If you don't provide one, Amazon S3 will assign an ID.
	// +optional
	ID?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3
	// publishes a message when it detects events of the specified type.
	// At least one of topicArn, topicArnRef or topicSelector is required.
	// +optional
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-aws/apis/sns/v1beta1.SNSTopicARN()
	topicArn?: null | string @go(TopicArn,*string)
}

// NotificationConfigurationFilter specifies object key name filtering rules. For information about key name
// filtering, see Configuring Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html)
// in the Amazon Simple Storage Service Developer Guide.
#NotificationConfigurationFilter: {
	// A container for object key name prefix and suffix filtering rules.
	key?: null | #S3KeyFilter @go(Key,*S3KeyFilter)
}

// S3KeyFilter contains the object key name prefix and suffix filtering rules.
#S3KeyFilter: {
	// A list of containers for the key-value pair that defines the criteria for
	// the filter rule.
	filterRules: [...#FilterRule] @go(FilterRules,[]FilterRule)
}

// FilterRule specifies the Amazon S3 object key name to filter on and whether to filter
// on the suffix or prefix of the key name.
#FilterRule: {
	// The object key name prefix or suffix identifying one or more objects to which
	// the filtering rule applies. The maximum length is 1,024 characters. Overlapping
	// prefixes and suffixes are not supported. For more information, see Configuring
	// Event Notifications (https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html)
	// in the Amazon Simple Storage Service Developer Guide.
	// Valid values are "prefix" or "suffix"
	// +kubebuilder:validation:Enum=prefix;suffix
	name: string @go(Name)

	// The value that the filter searches for in object key names.
	value?: null | string @go(Value,*string)
}
