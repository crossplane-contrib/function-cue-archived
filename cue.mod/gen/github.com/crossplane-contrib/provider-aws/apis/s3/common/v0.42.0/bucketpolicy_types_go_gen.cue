// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/s3/common

package common

// BucketPolicyBody represents an S3 bucket policy in the manifest
#BucketPolicyBody: {
	// Version is the current IAM policy version
	// +kubebuilder:validation:Enum="2012-10-17";"2008-10-17"
	// +kubebuilder:default:="2012-10-17"
	version: string @go(Version)

	// ID is the policy's optional identifier
	// +immutable
	// +optional
	id?: string @go(ID)

	// Statements is the list of statement this policy applies
	// either jsonStatements or statements must be specified in the policy
	// +optional
	statements?: [...#BucketPolicyStatement] @go(Statements,[]BucketPolicyStatement)
}

// BucketPolicyStatement defines an individual statement within the
// BucketPolicyBody
#BucketPolicyStatement: {
	// Optional identifier for this statement, must be unique within the
	// policy if provided.
	// +optional
	sid?: null | string @go(SID,*string)

	// The effect is required and specifies whether the statement results
	// in an allow or an explicit deny. Valid values for Effect are Allow and Deny.
	// +kubebuilder:validation:Enum=Allow;Deny
	effect: string @go(Effect)

	// Used with the S3 policy to specify the principal that is allowed
	// or denied access to a resource.
	// +optional
	principal?: null | #BucketPrincipal @go(Principal,*BucketPrincipal)

	// Used with the S3 policy to specify the users which are not included
	// in this policy
	// +optional
	notPrincipal?: null | #BucketPrincipal @go(NotPrincipal,*BucketPrincipal)

	// Each element of the PolicyAction array describes the specific
	// action or actions that will be allowed or denied with this PolicyStatement.
	// +optional
	action?: [...string] @go(Action,[]string)

	// Each element of the NotPolicyAction array will allow the property to match
	// all but the listed actions.
	// +optional
	notAction?: [...string] @go(NotAction,[]string)

	// The paths on which this resource will apply
	// +optional
	resource?: [...string] @go(Resource,[]string)

	// This will explicitly match all resource paths except the ones
	// specified in this array
	// +optional
	notResource?: [...string] @go(NotResource,[]string)

	// Condition specifies where conditions for policy are in effect.
	// https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html
	// +optional
	condition?: [...#Condition] @go(Condition,[]Condition)
}

// BucketPrincipal defines the principal users affected by
// the BucketPolicyStatement
// Please see the AWS S3 docs for more information
// https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html
#BucketPrincipal: {
	// This flag indicates if the policy should be made available
	// to all anonymous users.
	// +optional
	allowAnon?: bool @go(AllowAnon)

	// This list contains the all of the AWS IAM users which are affected
	// by the policy statement.
	// +optional
	awsPrincipals?: [...#AWSPrincipal] @go(AWSPrincipals,[]AWSPrincipal)

	// This string contains the identifier for any federated web identity
	// provider.
	// +optional
	federated?: null | string @go(Federated,*string)

	// Service define the services which can have access to this bucket
	// +optional
	service?: [...string] @go(Service,[]string)
}

// AWSPrincipal wraps the potential values a policy
// principal can take. Only one of the values should be set.
#AWSPrincipal: {
	// UserARN contains the ARN of an IAM user
	// +optional
	// +immutable
	iamUserArn?: null | string @go(UserARN,*string)

	// AWSAccountID identifies an AWS account as the principal
	// +optional
	// +immutable
	awsAccountId?: null | string @go(AWSAccountID,*string)

	// IAMRoleARN contains the ARN of an IAM role
	// +optional
	// +immutable
	iamRoleArn?: null | string @go(IAMRoleARN,*string)
}

// Condition represents a set of condition pairs for a bucket policy
#Condition: {
	// OperatorKey matches the condition key and value in the policy against values in the request context
	operatorKey: string @go(OperatorKey)

	// Conditions represents each of the key/value pairs for the operator key
	conditions: [...#ConditionPair] @go(Conditions,[]ConditionPair)
}

// ConditionPair represents one condition inside of the set of conditions for
// a bucket policy
#ConditionPair: {
	// ConditionKey is the key condition being applied to the parent condition
	key: string @go(ConditionKey)

	// ConditionStringValue is the expected string value of the key from the parent condition
	// +optional
	stringValue?: null | string @go(ConditionStringValue,*string)

	// ConditionNumericValue is the expected string value of the key from the parent condition
	// +optional
	numericValue?: null | int64 @go(ConditionNumericValue,*int64)

	// ConditionBooleanValue is the expected boolean value of the key from the parent condition
	// +optional
	booleanValue?: null | bool @go(ConditionBooleanValue,*bool)

	// ConditionListValue is the list value of the key from the parent condition
	// +optional
	listValue?: [...string] @go(ConditionListValue,[]string)
}
