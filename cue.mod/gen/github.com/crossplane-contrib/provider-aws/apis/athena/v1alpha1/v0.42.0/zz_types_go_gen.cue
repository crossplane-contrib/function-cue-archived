// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/athena/v1alpha1

package v1alpha1

// +kubebuilder:skipversion
#ACLConfiguration: {
	s3ACLOption?: null | string @go(S3ACLOption,*string)
}

// +kubebuilder:skipversion
#ApplicationDPUSizes: {
	applicationRuntimeID?: null | string @go(ApplicationRuntimeID,*string)
}

// +kubebuilder:skipversion
#AthenaError: {
	errorMessage?: null | string @go(ErrorMessage,*string)
}

// +kubebuilder:skipversion
#Column: {
	name?: null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#ColumnInfo: {
	catalogName?: null | string @go(CatalogName,*string)
	label?:       null | string @go(Label,*string)
	name?:        null | string @go(Name,*string)
	schemaName?:  null | string @go(SchemaName,*string)
	tableName?:   null | string @go(TableName,*string)
	type_?:       null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#CustomerContentEncryptionConfiguration: {
	kmsKey?: null | string @go(KMSKey,*string)
}

// +kubebuilder:skipversion
#Database: {
	name?: null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#EncryptionConfiguration: {
	encryptionOption?: null | string @go(EncryptionOption,*string)
	kmsKey?:           null | string @go(KMSKey,*string)
}

// +kubebuilder:skipversion
#EngineVersion: {
	effectiveEngineVersion?: null | string @go(EffectiveEngineVersion,*string)
	selectedEngineVersion?:  null | string @go(SelectedEngineVersion,*string)
}

// +kubebuilder:skipversion
#NamedQuery: {
	name?:      null | string @go(Name,*string)
	workGroup?: null | string @go(WorkGroup,*string)
}

// +kubebuilder:skipversion
#NotebookMetadata: {
	workGroup?: null | string @go(WorkGroup,*string)
}

// +kubebuilder:skipversion
#PreparedStatement: {
	workGroupName?: null | string @go(WorkGroupName,*string)
}

// +kubebuilder:skipversion
#QueryExecution: {
	// The Athena engine version for running queries, or the PySpark engine version
	// for running sessions.
	engineVersion?: null | #EngineVersion @go(EngineVersion,*EngineVersion)

	// The location in Amazon S3 where query results are stored and the encryption
	// option, if any, used for query results. These are known as "client-side settings".
	// If workgroup settings override client-side settings, then the query uses
	// the workgroup settings.
	resultConfiguration?: null | #ResultConfiguration @go(ResultConfiguration,*ResultConfiguration)
	workGroup?:           null | string               @go(WorkGroup,*string)
}

// +kubebuilder:skipversion
#QueryExecutionStatistics: {
	dataManifestLocation?: null | string @go(DataManifestLocation,*string)
}

// +kubebuilder:skipversion
#QueryExecutionStatus: {
	stateChangeReason?: null | string @go(StateChangeReason,*string)
}

// +kubebuilder:skipversion
#QueryStage: {
	state?: null | string @go(State,*string)
}

// +kubebuilder:skipversion
#QueryStagePlanNode: {
	identifier?: null | string @go(Identifier,*string)
	name?:       null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#ResultConfiguration: {
	// Indicates that an Amazon S3 canned ACL should be set to control ownership
	// of stored query results. When Athena stores query results in Amazon S3, the
	// canned ACL is set with the x-amz-acl request header. For more information
	// about S3 Object Ownership, see Object Ownership settings (https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html#object-ownership-overview)
	// in the Amazon S3 User Guide.
	aclConfiguration?: null | #ACLConfiguration @go(ACLConfiguration,*ACLConfiguration)

	// If query results are encrypted in Amazon S3, indicates the encryption option
	// used (for example, SSE_KMS or CSE_KMS) and key information.
	encryptionConfiguration?: null | #EncryptionConfiguration @go(EncryptionConfiguration,*EncryptionConfiguration)
	expectedBucketOwner?:     null | string                   @go(ExpectedBucketOwner,*string)
	outputLocation?:          null | string                   @go(OutputLocation,*string)
}

// +kubebuilder:skipversion
#ResultConfigurationUpdates: {
	// Indicates that an Amazon S3 canned ACL should be set to control ownership
	// of stored query results. When Athena stores query results in Amazon S3, the
	// canned ACL is set with the x-amz-acl request header. For more information
	// about S3 Object Ownership, see Object Ownership settings (https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html#object-ownership-overview)
	// in the Amazon S3 User Guide.
	aclConfiguration?: null | #ACLConfiguration @go(ACLConfiguration,*ACLConfiguration)

	// If query results are encrypted in Amazon S3, indicates the encryption option
	// used (for example, SSE_KMS or CSE_KMS) and key information.
	encryptionConfiguration?:       null | #EncryptionConfiguration @go(EncryptionConfiguration,*EncryptionConfiguration)
	expectedBucketOwner?:           null | string                   @go(ExpectedBucketOwner,*string)
	outputLocation?:                null | string                   @go(OutputLocation,*string)
	removeACLConfiguration?:        null | bool                     @go(RemoveACLConfiguration,*bool)
	removeEncryptionConfiguration?: null | bool                     @go(RemoveEncryptionConfiguration,*bool)
	removeExpectedBucketOwner?:     null | bool                     @go(RemoveExpectedBucketOwner,*bool)
	removeOutputLocation?:          null | bool                     @go(RemoveOutputLocation,*bool)
}

// +kubebuilder:skipversion
#SessionConfiguration: {
	// If query results are encrypted in Amazon S3, indicates the encryption option
	// used (for example, SSE_KMS or CSE_KMS) and key information.
	encryptionConfiguration?: null | #EncryptionConfiguration @go(EncryptionConfiguration,*EncryptionConfiguration)
	executionRole?:           null | string                   @go(ExecutionRole,*string)
	workingDirectory?:        null | string                   @go(WorkingDirectory,*string)
}

// +kubebuilder:skipversion
#SessionSummary: {
	// The Athena engine version for running queries, or the PySpark engine version
	// for running sessions.
	engineVersion?:   null | #EngineVersion @go(EngineVersion,*EngineVersion)
	notebookVersion?: null | string         @go(NotebookVersion,*string)
}

// +kubebuilder:skipversion
#TableMetadata: {
	name?: null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#Tag: {
	key?:   null | string @go(Key,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#WorkGroupConfiguration: {
	additionalConfiguration?:    null | string @go(AdditionalConfiguration,*string)
	bytesScannedCutoffPerQuery?: null | int64  @go(BytesScannedCutoffPerQuery,*int64)

	// Specifies the KMS key that is used to encrypt the user's data stores in Athena.
	customerContentEncryptionConfiguration?: null | #CustomerContentEncryptionConfiguration @go(CustomerContentEncryptionConfiguration,*CustomerContentEncryptionConfiguration)
	enforceWorkGroupConfiguration?:          null | bool                                    @go(EnforceWorkGroupConfiguration,*bool)

	// The Athena engine version for running queries, or the PySpark engine version
	// for running sessions.
	engineVersion?:                   null | #EngineVersion @go(EngineVersion,*EngineVersion)
	executionRole?:                   null | string         @go(ExecutionRole,*string)
	publishCloudWatchMetricsEnabled?: null | bool           @go(PublishCloudWatchMetricsEnabled,*bool)
	requesterPaysEnabled?:            null | bool           @go(RequesterPaysEnabled,*bool)

	// The location in Amazon S3 where query results are stored and the encryption
	// option, if any, used for query results. These are known as "client-side settings".
	// If workgroup settings override client-side settings, then the query uses
	// the workgroup settings.
	resultConfiguration?: null | #ResultConfiguration @go(ResultConfiguration,*ResultConfiguration)
}

// +kubebuilder:skipversion
#WorkGroupConfigurationUpdates: {
	additionalConfiguration?:    null | string @go(AdditionalConfiguration,*string)
	bytesScannedCutoffPerQuery?: null | int64  @go(BytesScannedCutoffPerQuery,*int64)

	// Specifies the KMS key that is used to encrypt the user's data stores in Athena.
	customerContentEncryptionConfiguration?: null | #CustomerContentEncryptionConfiguration @go(CustomerContentEncryptionConfiguration,*CustomerContentEncryptionConfiguration)
	enforceWorkGroupConfiguration?:          null | bool                                    @go(EnforceWorkGroupConfiguration,*bool)

	// The Athena engine version for running queries, or the PySpark engine version
	// for running sessions.
	engineVersion?:                                null | #EngineVersion @go(EngineVersion,*EngineVersion)
	executionRole?:                                null | string         @go(ExecutionRole,*string)
	publishCloudWatchMetricsEnabled?:              null | bool           @go(PublishCloudWatchMetricsEnabled,*bool)
	removeBytesScannedCutoffPerQuery?:             null | bool           @go(RemoveBytesScannedCutoffPerQuery,*bool)
	removeCustomerContentEncryptionConfiguration?: null | bool           @go(RemoveCustomerContentEncryptionConfiguration,*bool)
	requesterPaysEnabled?:                         null | bool           @go(RequesterPaysEnabled,*bool)

	// The information about the updates in the query results, such as output location
	// and encryption configuration for the query results.
	resultConfigurationUpdates?: null | #ResultConfigurationUpdates @go(ResultConfigurationUpdates,*ResultConfigurationUpdates)
}

// +kubebuilder:skipversion
#WorkGroupSummary: {
	description?: null | string @go(Description,*string)

	// The Athena engine version for running queries, or the PySpark engine version
	// for running sessions.
	engineVersion?: null | #EngineVersion @go(EngineVersion,*EngineVersion)
	name?:          null | string         @go(Name,*string)
	state?:         null | string         @go(State,*string)
}

// +kubebuilder:skipversion
#WorkGroup_SDK: {
	// The configuration of the workgroup, which includes the location in Amazon
	// S3 where query results are stored, the encryption option, if any, used for
	// query results, whether the Amazon CloudWatch Metrics are enabled for the
	// workgroup and whether workgroup settings override query settings, and the
	// data usage limits for the amount of data scanned per query or per workgroup.
	// The workgroup settings override is specified in EnforceWorkGroupConfiguration
	// (true/false) in the WorkGroupConfiguration. See WorkGroupConfiguration$EnforceWorkGroupConfiguration.
	configuration?: null | #WorkGroupConfiguration @go(Configuration,*WorkGroupConfiguration)
	description?:   null | string                  @go(Description,*string)
	name?:          null | string                  @go(Name,*string)
	state?:         null | string                  @go(State,*string)
}
