// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/ecs/v1alpha1

package v1alpha1

// ServiceParameters defines the desired state of Service
#ServiceParameters: {
	// Region is which region the Service will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The capacity provider strategy to use for the service.
	//
	// If a capacityProviderStrategy is specified, the launchType parameter must
	// be omitted. If no capacityProviderStrategy or launchType is specified, the
	// defaultCapacityProviderStrategy for the cluster is used.
	//
	// A capacity provider strategy may contain a maximum of 6 capacity providers.
	capacityProviderStrategy?: [...null | #CapacityProviderStrategyItem] @go(CapacityProviderStrategy,[]*CapacityProviderStrategyItem)

	// Optional deployment parameters that control how many tasks run during the
	// deployment and the ordering of stopping and starting tasks.
	deploymentConfiguration?: null | #DeploymentConfiguration @go(DeploymentConfiguration,*DeploymentConfiguration)

	// The deployment controller to use for the service. If no deployment controller
	// is specified, the default value of ECS is used.
	deploymentController?: null | #DeploymentController @go(DeploymentController,*DeploymentController)

	// The number of instantiations of the specified task definition to place and
	// keep running in your service.
	//
	// This is required if schedulingStrategy is REPLICA or isn't specified. If
	// schedulingStrategy is DAEMON then this isn't required.
	desiredCount?: null | int64 @go(DesiredCount,*int64)

	// Specifies whether to turn on Amazon ECS managed tags for the tasks within
	// the service. For more information, see Tagging your Amazon ECS resources
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// When you use Amazon ECS managed tags, you need to set the propagateTags request
	// parameter.
	enableECSManagedTags?: null | bool @go(EnableECSManagedTags,*bool)

	// Determines whether the execute command functionality is turned on for the
	// service. If true, this enables execute command functionality on all containers
	// in the service tasks.
	enableExecuteCommand?: null | bool @go(EnableExecuteCommand,*bool)

	// The period of time, in seconds, that the Amazon ECS service scheduler ignores
	// unhealthy Elastic Load Balancing target health checks after a task has first
	// started. This is only used when your service is configured to use a load
	// balancer. If your service has a load balancer defined and you don't specify
	// a health check grace period value, the default value of 0 is used.
	//
	// If you do not use an Elastic Load Balancing, we recommend that you use the
	// startPeriod in the task definition health check parameters. For more information,
	// see Health check (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html).
	//
	// If your service's tasks take a while to start and respond to Elastic Load
	// Balancing health checks, you can specify a health check grace period of up
	// to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS
	// service scheduler ignores health check status. This grace period can prevent
	// the service scheduler from marking tasks as unhealthy and stopping them before
	// they have time to come up.
	healthCheckGracePeriodSeconds?: null | int64 @go(HealthCheckGracePeriodSeconds,*int64)

	// The infrastructure that you run your service on. For more information, see
	// Amazon ECS launch types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// The FARGATE launch type runs your tasks on Fargate On-Demand infrastructure.
	//
	// Fargate Spot infrastructure is available for use but a capacity provider
	// strategy must be used. For more information, see Fargate capacity providers
	// (https://docs.aws.amazon.com/AmazonECS/latest/userguide/fargate-capacity-providers.html)
	// in the Amazon ECS User Guide for Fargate.
	//
	// The EC2 launch type runs your tasks on Amazon EC2 instances registered to
	// your cluster.
	//
	// The EXTERNAL launch type runs your tasks on your on-premises server or virtual
	// machine (VM) capacity registered to your cluster.
	//
	// A service can use either a launch type or a capacity provider strategy. If
	// a launchType is specified, the capacityProviderStrategy parameter must be
	// omitted.
	launchType?: null | string @go(LaunchType,*string)

	// An array of placement constraint objects to use for tasks in your service.
	// You can specify a maximum of 10 constraints for each task. This limit includes
	// constraints in the task definition and those specified at runtime.
	placementConstraints?: [...null | #PlacementConstraint] @go(PlacementConstraints,[]*PlacementConstraint)

	// The placement strategy objects to use for tasks in your service. You can
	// specify a maximum of 5 strategy rules for each service.
	placementStrategy?: [...null | #PlacementStrategy] @go(PlacementStrategy,[]*PlacementStrategy)

	// The platform version that your tasks in the service are running on. A platform
	// version is specified only for tasks using the Fargate launch type. If one
	// isn't specified, the LATEST platform version is used. For more information,
	// see Fargate platform versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
	// in the Amazon Elastic Container Service Developer Guide.
	platformVersion?: null | string @go(PlatformVersion,*string)

	// Specifies whether to propagate the tags from the task definition to the task.
	// If no value is specified, the tags aren't propagated. Tags can only be propagated
	// to the task during task creation. To add tags to a task after task creation,
	// use the TagResource (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html)
	// API action.
	//
	// The default is NONE.
	propagateTags?: null | string @go(PropagateTags,*string)

	// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon
	// ECS to make calls to your load balancer on your behalf. This parameter is
	// only permitted if you are using a load balancer with your service and your
	// task definition doesn't use the awsvpc network mode. If you specify the role
	// parameter, you must also specify a load balancer object with the loadBalancers
	// parameter.
	//
	// If your account has already created the Amazon ECS service-linked role, that
	// role is used for your service unless you specify a role here. The service-linked
	// role is required if your task definition uses the awsvpc network mode or
	// if the service is configured to use service discovery, an external deployment
	// controller, multiple target groups, or Elastic Inference accelerators in
	// which case you don't specify a role here. For more information, see Using
	// service-linked roles for Amazon ECS (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// If your specified role has a path other than /, then you must either specify
	// the full role ARN (this is recommended) or prefix the role name with the
	// path. For example, if a role with the name bar has a path of /foo/ then you
	// would specify /foo/bar as the role name. For more information, see Friendly
	// names and paths (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names)
	// in the IAM User Guide.
	role?: null | string @go(Role,*string)

	// The scheduling strategy to use for the service. For more information, see
	// Services (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
	//
	// There are two service scheduler strategies available:
	//
	//    * REPLICA-The replica scheduling strategy places and maintains the desired
	//    number of tasks across your cluster. By default, the service scheduler
	//    spreads tasks across Availability Zones. You can use task placement strategies
	//    and constraints to customize task placement decisions. This scheduler
	//    strategy is required if the service uses the CODE_DEPLOY or EXTERNAL deployment
	//    controller types.
	//
	//    * DAEMON-The daemon scheduling strategy deploys exactly one task on each
	//    active container instance that meets all of the task placement constraints
	//    that you specify in your cluster. The service scheduler also evaluates
	//    the task placement constraints for running tasks and will stop tasks that
	//    don't meet the placement constraints. When you're using this strategy,
	//    you don't need to specify a desired number of tasks, a task placement
	//    strategy, or use Service Auto Scaling policies. Tasks using the Fargate
	//    launch type or the CODE_DEPLOY or EXTERNAL deployment controller types
	//    don't support the DAEMON scheduling strategy.
	schedulingStrategy?: null | string @go(SchedulingStrategy,*string)

	// The configuration for this service to discover and connect to services, and
	// be discovered by, and connected from, other services within a namespace.
	//
	// Tasks that run in a namespace can use short names to connect to services
	// in the namespace. Tasks can connect to services across all of the clusters
	// in the namespace. Tasks connect through a managed proxy container that collects
	// logs and metrics for increased visibility. Only the tasks that Amazon ECS
	// services create are supported with Service Connect. For more information,
	// see Service Connect (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
	// in the Amazon Elastic Container Service Developer Guide.
	serviceConnectConfiguration?: null | #ServiceConnectConfiguration @go(ServiceConnectConfiguration,*ServiceConnectConfiguration)

	// The details of the service discovery registry to associate with this service.
	// For more information, see Service discovery (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
	//
	// Each service may be associated with one service registry. Multiple service
	// registries for each service isn't supported.
	serviceRegistries?: [...null | #ServiceRegistry] @go(ServiceRegistries,[]*ServiceRegistry)

	// The metadata that you apply to the service to help you categorize and organize
	// them. Each tag consists of a key and an optional value, both of which you
	// define. When a service is deleted, the tags are deleted as well.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	#CustomServiceParameters
}

// ServiceSpec defines the desired state of Service
#ServiceSpec: {
	forProvider: #ServiceParameters @go(ForProvider)
}

// ServiceObservation defines the observed state of Service
#ServiceObservation: {
	// The Amazon Resource Name (ARN) of the cluster that hosts the service.
	clusterARN?: null | string @go(ClusterARN,*string)

	// The principal that created the service.
	createdBy?: null | string @go(CreatedBy,*string)

	// The current state of deployments for the service.
	deployments?: [...null | #Deployment] @go(Deployments,[]*Deployment)

	// The event stream for your service. A maximum of 100 of the latest events
	// are displayed.
	events?: [...null | #ServiceEvent] @go(Events,[]*ServiceEvent)

	// A list of Elastic Load Balancing load balancer objects. It contains the load
	// balancer name, the container name, and the container port to access from
	// the load balancer. The container name is as it appears in a container definition.
	loadBalancers?: [...null | #LoadBalancer] @go(LoadBalancers,[]*LoadBalancer)

	// The VPC subnet and security group configuration for tasks that receive their
	// own elastic network interface by using the awsvpc networking mode.
	networkConfiguration?: null | #NetworkConfiguration @go(NetworkConfiguration,*NetworkConfiguration)

	// The number of tasks in the cluster that are in the PENDING state.
	pendingCount?: null | int64 @go(PendingCount,*int64)

	// The operating system that your tasks in the service run on. A platform family
	// is specified only for tasks using the Fargate launch type.
	//
	// All tasks that run as part of this service must use the same platformFamily
	// value as the service (for example, LINUX).
	platformFamily?: null | string @go(PlatformFamily,*string)

	// The ARN of the IAM role that's associated with the service. It allows the
	// Amazon ECS container agent to register container instances with an Elastic
	// Load Balancing load balancer.
	roleARN?: null | string @go(RoleARN,*string)

	// The number of tasks in the cluster that are in the RUNNING state.
	runningCount?: null | int64 @go(RunningCount,*int64)

	// The ARN that identifies the service. For more information about the ARN format,
	// see Amazon Resource Name (ARN) (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids)
	// in the Amazon ECS Developer Guide.
	serviceARN?: null | string @go(ServiceARN,*string)

	// The name of your service. Up to 255 letters (uppercase and lowercase), numbers,
	// underscores, and hyphens are allowed. Service names must be unique within
	// a cluster. However, you can have similarly named services in multiple clusters
	// within a Region or across multiple Regions.
	serviceName?: null | string @go(ServiceName,*string)

	// The status of the service. The valid values are ACTIVE, DRAINING, or INACTIVE.
	status?: null | string @go(Status,*string)

	// The task definition to use for tasks in the service. This value is specified
	// when the service is created with CreateService, and it can be modified with
	// UpdateService.
	taskDefinition?: null | string @go(TaskDefinition,*string)

	// Information about a set of Amazon ECS tasks in either an CodeDeploy or an
	// EXTERNAL deployment. An Amazon ECS task set includes details such as the
	// desired number of tasks, how many tasks are running, and whether the task
	// set serves production traffic.
	taskSets?: [...null | #TaskSet] @go(TaskSets,[]*TaskSet)
}

// ServiceStatus defines the observed state of Service.
#ServiceStatus: {
	atProvider?: #ServiceObservation @go(AtProvider)
}

// Service is the Schema for the Services API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Service: {
	spec:    #ServiceSpec   @go(Spec)
	status?: #ServiceStatus @go(Status)
}

// ServiceList contains a list of Services
#ServiceList: {
	items: [...#Service] @go(Items,[]Service)
}
