// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/ecs/v1alpha1

package v1alpha1

// +kubebuilder:skipversion
#AWSVPCConfiguration: {
	assignPublicIP?: null | string @go(AssignPublicIP,*string)
	securityGroups?: [...null | string] @go(SecurityGroups,[]*string)
	subnets?: [...null | string] @go(Subnets,[]*string)
}

// +kubebuilder:skipversion
#Attachment: {
	details?: [...null | #KeyValuePair] @go(Details,[]*KeyValuePair)
	id?:     null | string @go(ID,*string)
	status?: null | string @go(Status,*string)
	type_?:  null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#AttachmentStateChange: {
	attachmentARN?: null | string @go(AttachmentARN,*string)
	status?:        null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#Attribute: {
	name?:       null | string @go(Name,*string)
	targetID?:   null | string @go(TargetID,*string)
	targetType?: null | string @go(TargetType,*string)
	value?:      null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#AutoScalingGroupProvider: {
	autoScalingGroupARN?: null | string @go(AutoScalingGroupARN,*string)
}

// +kubebuilder:skipversion
#CapacityProvider: {
	capacityProviderARN?: null | string @go(CapacityProviderARN,*string)
	name?:                null | string @go(Name,*string)
	tags?: [...null | #Tag] @go(Tags,[]*Tag)
	updateStatusReason?: null | string @go(UpdateStatusReason,*string)
}

// +kubebuilder:skipversion
#CapacityProviderStrategyItem: {
	base?:             null | int64  @go(Base,*int64)
	capacityProvider?: null | string @go(CapacityProvider,*string)
	weight?:           null | int64  @go(Weight,*int64)
}

// +kubebuilder:skipversion
#ClusterConfiguration: {
	// The details of the execute command configuration.
	executeCommandConfiguration?: null | #ExecuteCommandConfiguration @go(ExecuteCommandConfiguration,*ExecuteCommandConfiguration)
}

// +kubebuilder:skipversion
#ClusterServiceConnectDefaults: {
	namespace?: null | string @go(Namespace,*string)
}

// +kubebuilder:skipversion
#ClusterServiceConnectDefaultsRequest: {
	namespace?: null | string @go(Namespace,*string)
}

// +kubebuilder:skipversion
#ClusterSetting: {
	name?:  null | string @go(Name,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#Cluster_SDK: {
	activeServicesCount?: null | int64 @go(ActiveServicesCount,*int64)
	attachments?: [...null | #Attachment] @go(Attachments,[]*Attachment)
	attachmentsStatus?: null | string @go(AttachmentsStatus,*string)
	capacityProviders?: [...null | string] @go(CapacityProviders,[]*string)
	clusterARN?:  null | string @go(ClusterARN,*string)
	clusterName?: null | string @go(ClusterName,*string)

	// The execute command configuration for the cluster.
	configuration?: null | #ClusterConfiguration @go(Configuration,*ClusterConfiguration)
	defaultCapacityProviderStrategy?: [...null | #CapacityProviderStrategyItem] @go(DefaultCapacityProviderStrategy,[]*CapacityProviderStrategyItem)
	pendingTasksCount?:                 null | int64 @go(PendingTasksCount,*int64)
	registeredContainerInstancesCount?: null | int64 @go(RegisteredContainerInstancesCount,*int64)
	runningTasksCount?:                 null | int64 @go(RunningTasksCount,*int64)

	// Use this parameter to set a default Service Connect namespace. After you
	// set a default Service Connect namespace, any new services with Service Connect
	// turned on that are created in the cluster are added as client services in
	// the namespace. This setting only applies to new services that set the enabled
	// parameter to true in the ServiceConnectConfiguration. You can set the namespace
	// of each service individually in the ServiceConnectConfiguration to override
	// this default parameter.
	//
	// Tasks that run in a namespace can use short names to connect to services
	// in the namespace. Tasks can connect to services across all of the clusters
	// in the namespace. Tasks connect through a managed proxy container that collects
	// logs and metrics for increased visibility. Only the tasks that Amazon ECS
	// services create are supported with Service Connect. For more information,
	// see Service Connect (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
	// in the Amazon Elastic Container Service Developer Guide.
	serviceConnectDefaults?: null | #ClusterServiceConnectDefaults @go(ServiceConnectDefaults,*ClusterServiceConnectDefaults)
	settings?: [...null | #ClusterSetting] @go(Settings,[]*ClusterSetting)
	statistics?: [...null | #KeyValuePair] @go(Statistics,[]*KeyValuePair)
	status?: null | string @go(Status,*string)
	tags?: [...null | #Tag] @go(Tags,[]*Tag)
}

// +kubebuilder:skipversion
#Container: {
	containerARN?:      null | string @go(ContainerARN,*string)
	cpu?:               null | string @go(CPU,*string)
	exitCode?:          null | int64  @go(ExitCode,*int64)
	image?:             null | string @go(Image,*string)
	imageDigest?:       null | string @go(ImageDigest,*string)
	lastStatus?:        null | string @go(LastStatus,*string)
	memory?:            null | string @go(Memory,*string)
	memoryReservation?: null | string @go(MemoryReservation,*string)
	name?:              null | string @go(Name,*string)
	reason?:            null | string @go(Reason,*string)
	runtimeID?:         null | string @go(RuntimeID,*string)
	taskARN?:           null | string @go(TaskARN,*string)
}

// +kubebuilder:skipversion
#ContainerDefinition: {
	command?: [...null | string] @go(Command,[]*string)
	cpu?: null | int64 @go(CPU,*int64)
	credentialSpecs?: [...null | string] @go(CredentialSpecs,[]*string)
	dependsOn?: [...null | #ContainerDependency] @go(DependsOn,[]*ContainerDependency)
	disableNetworking?: null | bool @go(DisableNetworking,*bool)
	dnsSearchDomains?: [...null | string] @go(DNSSearchDomains,[]*string)
	dnsServers?: [...null | string] @go(DNSServers,[]*string)
	dockerLabels?: {[string]: null | string} @go(DockerLabels,map[string]*string)
	dockerSecurityOptions?: [...null | string] @go(DockerSecurityOptions,[]*string)
	entryPoint?: [...null | string] @go(EntryPoint,[]*string)
	environment?: [...null | #KeyValuePair] @go(Environment,[]*KeyValuePair)
	environmentFiles?: [...null | #EnvironmentFile] @go(EnvironmentFiles,[]*EnvironmentFile)
	essential?: null | bool @go(Essential,*bool)
	extraHosts?: [...null | #HostEntry] @go(ExtraHosts,[]*HostEntry)

	// The FireLens configuration for the container. This is used to specify and
	// configure a log router for container logs. For more information, see Custom
	// log routing (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)
	// in the Amazon Elastic Container Service Developer Guide.
	firelensConfiguration?: null | #FirelensConfiguration @go(FirelensConfiguration,*FirelensConfiguration)

	// An object representing a container health check. Health check parameters
	// that are specified in a container definition override any Docker health checks
	// that exist in the container image (such as those specified in a parent image
	// or from the image's Dockerfile). This configuration maps to the HEALTHCHECK
	// parameter of docker run (https://docs.docker.com/engine/reference/run/).
	//
	// The Amazon ECS container agent only monitors and reports on the health checks
	// specified in the task definition. Amazon ECS does not monitor Docker health
	// checks that are embedded in a container image and not specified in the container
	// definition. Health check parameters that are specified in a container definition
	// override any Docker health checks that exist in the container image.
	//
	// You can view the health status of both individual containers and a task with
	// the DescribeTasks API operation or when viewing the task details in the console.
	//
	// The health check is designed to make sure that your containers survive agent
	// restarts, upgrades, or temporary unavailability.
	//
	// The following describes the possible healthStatus values for a container:
	//
	//    * HEALTHY-The container health check has passed successfully.
	//
	//    * UNHEALTHY-The container health check has failed.
	//
	//    * UNKNOWN-The container health check is being evaluated or there's no
	//    container health check defined.
	//
	// The following describes the possible healthStatus values for a task. The
	// container health check status of non-essential containers don't have an effect
	// on the health status of a task.
	//
	//    * HEALTHY-All essential containers within the task have passed their health
	//    checks.
	//
	//    * UNHEALTHY-One or more essential containers have failed their health
	//    check.
	//
	//    * UNKNOWN-The essential containers within the task are still having their
	//    health checks evaluated, there are only nonessential containers with health
	//    checks defined, or there are no container health checks defined.
	//
	// If a task is run manually, and not as part of a service, the task will continue
	// its lifecycle regardless of its health status. For tasks that are part of
	// a service, if the task reports as unhealthy then the task will be stopped
	// and the service scheduler will replace it.
	//
	// The following are notes about container health check support:
	//
	//    * When the Amazon ECS agent cannot connect to the Amazon ECS service,
	//    the service reports the container as UNHEALTHY.
	//
	//    * The health check statuses are the "last heard from" response from the
	//    Amazon ECS agent. There are no assumptions made about the status of the
	//    container health checks.
	//
	//    * Container health checks require version 1.17.0 or greater of the Amazon
	//    ECS container agent. For more information, see Updating the Amazon ECS
	//    container agent (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html).
	//
	//    * Container health checks are supported for Fargate tasks if you're using
	//    platform version 1.1.0 or greater. For more information, see Fargate platform
	//    versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
	//
	//    * Container health checks aren't supported for tasks that are part of
	//    a service that's configured to use a Classic Load Balancer.
	healthCheck?: null | #HealthCheck @go(HealthCheck,*HealthCheck)
	hostname?:    null | string       @go(Hostname,*string)
	image?:       null | string       @go(Image,*string)
	interactive?: null | bool         @go(Interactive,*bool)
	links?: [...null | string] @go(Links,[]*string)

	// The Linux-specific options that are applied to the container, such as Linux
	// KernelCapabilities (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
	linuxParameters?: null | #LinuxParameters @go(LinuxParameters,*LinuxParameters)

	// The log configuration for the container. This parameter maps to LogConfig
	// in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --log-driver option to docker run (https://docs.docker.com/engine/reference/commandline/run/).
	//
	// By default, containers use the same logging driver that the Docker daemon
	// uses. However, the container might use a different logging driver than the
	// Docker daemon by specifying a log driver configuration in the container definition.
	// For more information about the options for different supported log drivers,
	// see Configure logging drivers (https://docs.docker.com/engine/admin/logging/overview/)
	// in the Docker documentation.
	//
	// Understand the following when specifying a log configuration for your containers.
	//
	//    * Amazon ECS currently supports a subset of the logging drivers available
	//    to the Docker daemon. Additional log drivers may be available in future
	//    releases of the Amazon ECS container agent. For tasks on Fargate, the
	//    supported log drivers are awslogs, splunk, and awsfirelens. For tasks
	//    hosted on Amazon EC2 instances, the supported log drivers are awslogs,
	//    fluentd, gelf, json-file, journald, logentries,syslog, splunk, and awsfirelens.
	//
	//    * This parameter requires version 1.18 of the Docker Remote API or greater
	//    on your container instance.
	//
	//    * For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container
	//    agent must register the available logging drivers with the ECS_AVAILABLE_LOGGING_DRIVERS
	//    environment variable before containers placed on that instance can use
	//    these log configuration options. For more information, see Amazon ECS
	//    container agent configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
	//    in the Amazon Elastic Container Service Developer Guide.
	//
	//    * For tasks that are on Fargate, because you don't have access to the
	//    underlying infrastructure your tasks are hosted on, any additional software
	//    needed must be installed outside of the task. For example, the Fluentd
	//    output aggregators or a remote host running Logstash to send Gelf logs
	//    to.
	logConfiguration?:  null | #LogConfiguration @go(LogConfiguration,*LogConfiguration)
	memory?:            null | int64             @go(Memory,*int64)
	memoryReservation?: null | int64             @go(MemoryReservation,*int64)
	mountPoints?: [...null | #MountPoint] @go(MountPoints,[]*MountPoint)
	name?: null | string @go(Name,*string)
	portMappings?: [...null | #PortMapping] @go(PortMappings,[]*PortMapping)
	privileged?:             null | bool @go(Privileged,*bool)
	pseudoTerminal?:         null | bool @go(PseudoTerminal,*bool)
	readonlyRootFilesystem?: null | bool @go(ReadonlyRootFilesystem,*bool)

	// The repository credentials for private registry authentication.
	repositoryCredentials?: null | #RepositoryCredentials @go(RepositoryCredentials,*RepositoryCredentials)
	resourceRequirements?: [...null | #ResourceRequirement] @go(ResourceRequirements,[]*ResourceRequirement)
	secrets?: [...null | #Secret] @go(Secrets,[]*Secret)
	startTimeout?: null | int64 @go(StartTimeout,*int64)
	stopTimeout?:  null | int64 @go(StopTimeout,*int64)
	systemControls?: [...null | #SystemControl] @go(SystemControls,[]*SystemControl)
	ulimits?: [...null | #Ulimit] @go(Ulimits,[]*Ulimit)
	user?: null | string @go(User,*string)
	volumesFrom?: [...null | #VolumeFrom] @go(VolumesFrom,[]*VolumeFrom)
	workingDirectory?: null | string @go(WorkingDirectory,*string)
}

// +kubebuilder:skipversion
#ContainerDependency: {
	condition?:     null | string @go(Condition,*string)
	containerName?: null | string @go(ContainerName,*string)
}

// +kubebuilder:skipversion
#ContainerInstance: {
	agentConnected?: null | bool @go(AgentConnected,*bool)
	attachments?: [...null | #Attachment] @go(Attachments,[]*Attachment)
	capacityProviderName?: null | string @go(CapacityProviderName,*string)
	containerInstanceARN?: null | string @go(ContainerInstanceARN,*string)
	ec2InstanceID?:        null | string @go(EC2InstanceID,*string)
	pendingTasksCount?:    null | int64  @go(PendingTasksCount,*int64)
	runningTasksCount?:    null | int64  @go(RunningTasksCount,*int64)
	status?:               null | string @go(Status,*string)
	statusReason?:         null | string @go(StatusReason,*string)
	tags?: [...null | #Tag] @go(Tags,[]*Tag)
}

// +kubebuilder:skipversion
#ContainerOverride: {
	command?: [...null | string] @go(Command,[]*string)
	cpu?: null | int64 @go(CPU,*int64)
	environment?: [...null | #KeyValuePair] @go(Environment,[]*KeyValuePair)
	environmentFiles?: [...null | #EnvironmentFile] @go(EnvironmentFiles,[]*EnvironmentFile)
	memory?:            null | int64  @go(Memory,*int64)
	memoryReservation?: null | int64  @go(MemoryReservation,*int64)
	name?:              null | string @go(Name,*string)
	resourceRequirements?: [...null | #ResourceRequirement] @go(ResourceRequirements,[]*ResourceRequirement)
}

// +kubebuilder:skipversion
#ContainerStateChange: {
	containerName?: null | string @go(ContainerName,*string)
	exitCode?:      null | int64  @go(ExitCode,*int64)
	imageDigest?:   null | string @go(ImageDigest,*string)
	reason?:        null | string @go(Reason,*string)
	runtimeID?:     null | string @go(RuntimeID,*string)
	status?:        null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#Deployment: {
	capacityProviderStrategy?: [...null | #CapacityProviderStrategyItem] @go(CapacityProviderStrategy,[]*CapacityProviderStrategyItem)
	desiredCount?: null | int64  @go(DesiredCount,*int64)
	failedTasks?:  null | int64  @go(FailedTasks,*int64)
	id?:           null | string @go(ID,*string)
	launchType?:   null | string @go(LaunchType,*string)

	// The network configuration for a task or service.
	networkConfiguration?: null | #NetworkConfiguration @go(NetworkConfiguration,*NetworkConfiguration)
	pendingCount?:         null | int64                 @go(PendingCount,*int64)
	platformFamily?:       null | string                @go(PlatformFamily,*string)
	platformVersion?:      null | string                @go(PlatformVersion,*string)
	rolloutState?:         null | string                @go(RolloutState,*string)
	rolloutStateReason?:   null | string                @go(RolloutStateReason,*string)
	runningCount?:         null | int64                 @go(RunningCount,*int64)

	// The Service Connect configuration of your Amazon ECS service. The configuration
	// for this service to discover and connect to services, and be discovered by,
	// and connected from, other services within a namespace.
	//
	// Tasks that run in a namespace can use short names to connect to services
	// in the namespace. Tasks can connect to services across all of the clusters
	// in the namespace. Tasks connect through a managed proxy container that collects
	// logs and metrics for increased visibility. Only the tasks that Amazon ECS
	// services create are supported with Service Connect. For more information,
	// see Service Connect (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)
	// in the Amazon Elastic Container Service Developer Guide.
	serviceConnectConfiguration?: null | #ServiceConnectConfiguration @go(ServiceConnectConfiguration,*ServiceConnectConfiguration)
	serviceConnectResources?: [...null | #ServiceConnectServiceResource] @go(ServiceConnectResources,[]*ServiceConnectServiceResource)
	status?:         null | string @go(Status,*string)
	taskDefinition?: null | string @go(TaskDefinition,*string)
}

// +kubebuilder:skipversion
#DeploymentAlarms: {
	alarmNames?: [...null | string] @go(AlarmNames,[]*string)
	enable?:   null | bool @go(Enable,*bool)
	rollback?: null | bool @go(Rollback,*bool)
}

// +kubebuilder:skipversion
#DeploymentCircuitBreaker: {
	enable?:   null | bool @go(Enable,*bool)
	rollback?: null | bool @go(Rollback,*bool)
}

// +kubebuilder:skipversion
#DeploymentConfiguration: {
	// One of the methods which provide a way for you to quickly identify when a
	// deployment has failed, and then to optionally roll back the failure to the
	// last working deployment.
	//
	// When the alarms are generated, Amazon ECS sets the service deployment to
	// failed. Set the rollback parameter to have Amazon ECS to roll back your service
	// to the last completed deployment after a failure.
	//
	// You can only use the DeploymentAlarms method to detect failures when the
	// DeploymentController is set to ECS (rolling update).
	//
	// For more information, see Rolling update (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html)
	// in the Amazon Elastic Container Service Developer Guide .
	alarms?: null | #DeploymentAlarms @go(Alarms,*DeploymentAlarms)

	//
	// The deployment circuit breaker can only be used for services using the rolling
	// update (ECS) deployment type.
	//
	// The deployment circuit breaker determines whether a service deployment will
	// fail if the service can't reach a steady state. If it is turned on, a service
	// deployment will transition to a failed state and stop launching new tasks.
	// You can also configure Amazon ECS to roll back your service to the last completed
	// deployment after a failure. For more information, see Rolling update (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// For more information about API failure reasons, see API failure reasons (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html)
	// in the Amazon Elastic Container Service Developer Guide.
	deploymentCircuitBreaker?: null | #DeploymentCircuitBreaker @go(DeploymentCircuitBreaker,*DeploymentCircuitBreaker)
	maximumPercent?:           null | int64                     @go(MaximumPercent,*int64)
	minimumHealthyPercent?:    null | int64                     @go(MinimumHealthyPercent,*int64)
}

// +kubebuilder:skipversion
#DeploymentController: {
	type_?: null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#Device: {
	containerPath?: null | string @go(ContainerPath,*string)
	hostPath?:      null | string @go(HostPath,*string)
	permissions?: [...null | string] @go(Permissions,[]*string)
}

// +kubebuilder:skipversion
#DockerVolumeConfiguration: {
	autoprovision?: null | bool   @go(Autoprovision,*bool)
	driver?:        null | string @go(Driver,*string)
	driverOpts?: {[string]: null | string} @go(DriverOpts,map[string]*string)
	labels?: {[string]: null | string} @go(Labels,map[string]*string)
	scope?: null | string @go(Scope,*string)
}

// +kubebuilder:skipversion
#EFSAuthorizationConfig: {
	accessPointID?: null | string @go(AccessPointID,*string)
	iam?:           null | string @go(IAM,*string)
}

// +kubebuilder:skipversion
#EFSVolumeConfiguration: {
	// The authorization configuration details for the Amazon EFS file system.
	authorizationConfig?:   null | #EFSAuthorizationConfig @go(AuthorizationConfig,*EFSAuthorizationConfig)
	fileSystemID?:          null | string                  @go(FileSystemID,*string)
	rootDirectory?:         null | string                  @go(RootDirectory,*string)
	transitEncryption?:     null | string                  @go(TransitEncryption,*string)
	transitEncryptionPort?: null | int64                   @go(TransitEncryptionPort,*int64)
}

// +kubebuilder:skipversion
#EnvironmentFile: {
	type_?: null | string @go(Type,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#EphemeralStorage: {
	sizeInGiB?: null | int64 @go(SizeInGiB,*int64)
}

// +kubebuilder:skipversion
#ExecuteCommandConfiguration: {
	kmsKeyID?: null | string @go(KMSKeyID,*string)

	// The log configuration for the results of the execute command actions. The
	// logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
	logConfiguration?: null | #ExecuteCommandLogConfiguration @go(LogConfiguration,*ExecuteCommandLogConfiguration)
	logging?:          null | string                          @go(Logging,*string)
}

// +kubebuilder:skipversion
#ExecuteCommandLogConfiguration: {
	cloudWatchEncryptionEnabled?: null | bool   @go(CloudWatchEncryptionEnabled,*bool)
	cloudWatchLogGroupName?:      null | string @go(CloudWatchLogGroupName,*string)
	s3BucketName?:                null | string @go(S3BucketName,*string)
	s3EncryptionEnabled?:         null | bool   @go(S3EncryptionEnabled,*bool)
	s3KeyPrefix?:                 null | string @go(S3KeyPrefix,*string)
}

// +kubebuilder:skipversion
#FSxWindowsFileServerAuthorizationConfig: {
	credentialsParameter?: null | string @go(CredentialsParameter,*string)
	domain?:               null | string @go(Domain,*string)
}

// +kubebuilder:skipversion
#FSxWindowsFileServerVolumeConfiguration: {
	// The authorization configuration details for Amazon FSx for Windows File Server
	// file system. See FSxWindowsFileServerVolumeConfiguration (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_FSxWindowsFileServerVolumeConfiguration.html)
	// in the Amazon ECS API Reference.
	//
	// For more information and the input format, see Amazon FSx for Windows File
	// Server Volumes (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html)
	// in the Amazon Elastic Container Service Developer Guide.
	authorizationConfig?: null | #FSxWindowsFileServerAuthorizationConfig @go(AuthorizationConfig,*FSxWindowsFileServerAuthorizationConfig)
	fileSystemID?:        null | string                                   @go(FileSystemID,*string)
	rootDirectory?:       null | string                                   @go(RootDirectory,*string)
}

// +kubebuilder:skipversion
#Failure: {
	arn?:    null | string @go(ARN,*string)
	detail?: null | string @go(Detail,*string)
	reason?: null | string @go(Reason,*string)
}

// +kubebuilder:skipversion
#FirelensConfiguration: {
	options?: {[string]: null | string} @go(Options,map[string]*string)
	type_?: null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#HealthCheck: {
	command?: [...null | string] @go(Command,[]*string)
	interval?:    null | int64 @go(Interval,*int64)
	retries?:     null | int64 @go(Retries,*int64)
	startPeriod?: null | int64 @go(StartPeriod,*int64)
	timeout?:     null | int64 @go(Timeout,*int64)
}

// +kubebuilder:skipversion
#HostEntry: {
	hostname?:  null | string @go(Hostname,*string)
	ipAddress?: null | string @go(IPAddress,*string)
}

// +kubebuilder:skipversion
#HostVolumeProperties: {
	sourcePath?: null | string @go(SourcePath,*string)
}

// +kubebuilder:skipversion
#InferenceAccelerator: {
	deviceName?: null | string @go(DeviceName,*string)
	deviceType?: null | string @go(DeviceType,*string)
}

// +kubebuilder:skipversion
#InferenceAcceleratorOverride: {
	deviceName?: null | string @go(DeviceName,*string)
	deviceType?: null | string @go(DeviceType,*string)
}

// +kubebuilder:skipversion
#KernelCapabilities: {
	add?: [...null | string] @go(Add,[]*string)
	drop?: [...null | string] @go(Drop,[]*string)
}

// +kubebuilder:skipversion
#KeyValuePair: {
	name?:  null | string @go(Name,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#LinuxParameters: {
	// The Linux capabilities for the container that are added to or dropped from
	// the default configuration provided by Docker. For more information about
	// the default capabilities and the non-default available capabilities, see
	// Runtime privilege and Linux capabilities (https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities)
	// in the Docker run reference. For more detailed information about these Linux
	// capabilities, see the capabilities(7) (http://man7.org/linux/man-pages/man7/capabilities.7.html)
	// Linux manual page.
	capabilities?: null | #KernelCapabilities @go(Capabilities,*KernelCapabilities)
	devices?: [...null | #Device] @go(Devices,[]*Device)
	initProcessEnabled?: null | bool  @go(InitProcessEnabled,*bool)
	maxSwap?:            null | int64 @go(MaxSwap,*int64)
	sharedMemorySize?:   null | int64 @go(SharedMemorySize,*int64)
	swappiness?:         null | int64 @go(Swappiness,*int64)
	tmpfs?: [...null | #Tmpfs] @go(Tmpfs,[]*Tmpfs)
}

// +kubebuilder:skipversion
#LoadBalancer: {
	containerName?:    null | string @go(ContainerName,*string)
	containerPort?:    null | int64  @go(ContainerPort,*int64)
	loadBalancerName?: null | string @go(LoadBalancerName,*string)
	targetGroupARN?:   null | string @go(TargetGroupARN,*string)
}

// +kubebuilder:skipversion
#LogConfiguration: {
	logDriver?: null | string @go(LogDriver,*string)
	options?: {[string]: null | string} @go(Options,map[string]*string)
	secretOptions?: [...null | #Secret] @go(SecretOptions,[]*Secret)
}

// +kubebuilder:skipversion
#ManagedAgent: {
	lastStatus?: null | string @go(LastStatus,*string)
	reason?:     null | string @go(Reason,*string)
}

// +kubebuilder:skipversion
#ManagedAgentStateChange: {
	containerName?: null | string @go(ContainerName,*string)
	reason?:        null | string @go(Reason,*string)
	status?:        null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#MountPoint: {
	containerPath?: null | string @go(ContainerPath,*string)
	readOnly?:      null | bool   @go(ReadOnly,*bool)
	sourceVolume?:  null | string @go(SourceVolume,*string)
}

// +kubebuilder:skipversion
#NetworkBinding: {
	bindIP?:             null | string @go(BindIP,*string)
	containerPort?:      null | int64  @go(ContainerPort,*int64)
	containerPortRange?: null | string @go(ContainerPortRange,*string)
	hostPort?:           null | int64  @go(HostPort,*int64)
	hostPortRange?:      null | string @go(HostPortRange,*string)
	protocol?:           null | string @go(Protocol,*string)
}

// +kubebuilder:skipversion
#NetworkConfiguration: {
	// An object representing the networking details for a task or service.
	awsVPCConfiguration?: null | #AWSVPCConfiguration @go(AWSVPCConfiguration,*AWSVPCConfiguration)
}

// +kubebuilder:skipversion
#NetworkInterface: {
	attachmentID?:       null | string @go(AttachmentID,*string)
	ipv6Address?:        null | string @go(IPv6Address,*string)
	privateIPv4Address?: null | string @go(PrivateIPv4Address,*string)
}

// +kubebuilder:skipversion
#PlacementConstraint: {
	expression?: null | string @go(Expression,*string)
	type_?:      null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#PlacementStrategy: {
	field?: null | string @go(Field,*string)
	type_?: null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#PlatformDevice: {
	id?: null | string @go(ID,*string)
}

// +kubebuilder:skipversion
#PortMapping: {
	appProtocol?:        null | string @go(AppProtocol,*string)
	containerPort?:      null | int64  @go(ContainerPort,*int64)
	containerPortRange?: null | string @go(ContainerPortRange,*string)
	hostPort?:           null | int64  @go(HostPort,*int64)
	name?:               null | string @go(Name,*string)
	protocol?:           null | string @go(Protocol,*string)
}

// +kubebuilder:skipversion
#ProtectedTask: {
	protectionEnabled?: null | bool   @go(ProtectionEnabled,*bool)
	taskARN?:           null | string @go(TaskARN,*string)
}

// +kubebuilder:skipversion
#ProxyConfiguration: {
	containerName?: null | string @go(ContainerName,*string)
	properties?: [...null | #KeyValuePair] @go(Properties,[]*KeyValuePair)
	type_?: null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#RepositoryCredentials: {
	credentialsParameter?: null | string @go(CredentialsParameter,*string)
}

// +kubebuilder:skipversion
#Resource: {
	doubleValue?:  null | float64 @go(DoubleValue,*float64)
	integerValue?: null | int64   @go(IntegerValue,*int64)
	name?:         null | string  @go(Name,*string)
	stringSetValue?: [...null | string] @go(StringSetValue,[]*string)
	type_?: null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#ResourceRequirement: {
	type_?: null | string @go(Type,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#RuntimePlatform: {
	cpuArchitecture?:       null | string @go(CPUArchitecture,*string)
	operatingSystemFamily?: null | string @go(OperatingSystemFamily,*string)
}

// +kubebuilder:skipversion
#Scale: {
	unit?:  null | string  @go(Unit,*string)
	value?: null | float64 @go(Value,*float64)
}

// +kubebuilder:skipversion
#Secret: {
	name?:      null | string @go(Name,*string)
	valueFrom?: null | string @go(ValueFrom,*string)
}

// +kubebuilder:skipversion
#ServiceConnectClientAlias: {
	dnsName?: null | string @go(DNSName,*string)
	port?:    null | int64  @go(Port,*int64)
}

// +kubebuilder:skipversion
#ServiceConnectConfiguration: {
	enabled?: null | bool @go(Enabled,*bool)

	// The log configuration for the container. This parameter maps to LogConfig
	// in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --log-driver option to docker run (https://docs.docker.com/engine/reference/commandline/run/).
	//
	// By default, containers use the same logging driver that the Docker daemon
	// uses. However, the container might use a different logging driver than the
	// Docker daemon by specifying a log driver configuration in the container definition.
	// For more information about the options for different supported log drivers,
	// see Configure logging drivers (https://docs.docker.com/engine/admin/logging/overview/)
	// in the Docker documentation.
	//
	// Understand the following when specifying a log configuration for your containers.
	//
	//    * Amazon ECS currently supports a subset of the logging drivers available
	//    to the Docker daemon. Additional log drivers may be available in future
	//    releases of the Amazon ECS container agent. For tasks on Fargate, the
	//    supported log drivers are awslogs, splunk, and awsfirelens. For tasks
	//    hosted on Amazon EC2 instances, the supported log drivers are awslogs,
	//    fluentd, gelf, json-file, journald, logentries,syslog, splunk, and awsfirelens.
	//
	//    * This parameter requires version 1.18 of the Docker Remote API or greater
	//    on your container instance.
	//
	//    * For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container
	//    agent must register the available logging drivers with the ECS_AVAILABLE_LOGGING_DRIVERS
	//    environment variable before containers placed on that instance can use
	//    these log configuration options. For more information, see Amazon ECS
	//    container agent configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
	//    in the Amazon Elastic Container Service Developer Guide.
	//
	//    * For tasks that are on Fargate, because you don't have access to the
	//    underlying infrastructure your tasks are hosted on, any additional software
	//    needed must be installed outside of the task. For example, the Fluentd
	//    output aggregators or a remote host running Logstash to send Gelf logs
	//    to.
	logConfiguration?: null | #LogConfiguration @go(LogConfiguration,*LogConfiguration)
	namespace?:        null | string            @go(Namespace,*string)
	services?: [...null | #ServiceConnectService] @go(Services,[]*ServiceConnectService)
}

// +kubebuilder:skipversion
#ServiceConnectService: {
	clientAliases?: [...null | #ServiceConnectClientAlias] @go(ClientAliases,[]*ServiceConnectClientAlias)
	discoveryName?:       null | string @go(DiscoveryName,*string)
	ingressPortOverride?: null | int64  @go(IngressPortOverride,*int64)
	portName?:            null | string @go(PortName,*string)
}

// +kubebuilder:skipversion
#ServiceConnectServiceResource: {
	discoveryARN?:  null | string @go(DiscoveryARN,*string)
	discoveryName?: null | string @go(DiscoveryName,*string)
}

// +kubebuilder:skipversion
#ServiceEvent: {
	id?:      null | string @go(ID,*string)
	message?: null | string @go(Message,*string)
}

// +kubebuilder:skipversion
#ServiceRegistry: {
	containerName?: null | string @go(ContainerName,*string)
	containerPort?: null | int64  @go(ContainerPort,*int64)
	port?:          null | int64  @go(Port,*int64)
	registryARN?:   null | string @go(RegistryARN,*string)
}

// +kubebuilder:skipversion
#Service_SDK: {
	capacityProviderStrategy?: [...null | #CapacityProviderStrategyItem] @go(CapacityProviderStrategy,[]*CapacityProviderStrategyItem)
	clusterARN?: null | string @go(ClusterARN,*string)
	createdBy?:  null | string @go(CreatedBy,*string)

	// Optional deployment parameters that control how many tasks run during a deployment
	// and the ordering of stopping and starting tasks.
	deploymentConfiguration?: null | #DeploymentConfiguration @go(DeploymentConfiguration,*DeploymentConfiguration)

	// The deployment controller to use for the service. For more information, see
	// Amazon ECS deployment types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html)
	// in the Amazon Elastic Container Service Developer Guide.
	deploymentController?: null | #DeploymentController @go(DeploymentController,*DeploymentController)
	deployments?: [...null | #Deployment] @go(Deployments,[]*Deployment)
	desiredCount?:         null | int64 @go(DesiredCount,*int64)
	enableECSManagedTags?: null | bool  @go(EnableECSManagedTags,*bool)
	enableExecuteCommand?: null | bool  @go(EnableExecuteCommand,*bool)
	events?: [...null | #ServiceEvent] @go(Events,[]*ServiceEvent)
	healthCheckGracePeriodSeconds?: null | int64  @go(HealthCheckGracePeriodSeconds,*int64)
	launchType?:                    null | string @go(LaunchType,*string)
	loadBalancers?: [...null | #LoadBalancer] @go(LoadBalancers,[]*LoadBalancer)

	// The network configuration for a task or service.
	networkConfiguration?: null | #NetworkConfiguration @go(NetworkConfiguration,*NetworkConfiguration)
	pendingCount?:         null | int64                 @go(PendingCount,*int64)
	placementConstraints?: [...null | #PlacementConstraint] @go(PlacementConstraints,[]*PlacementConstraint)
	placementStrategy?: [...null | #PlacementStrategy] @go(PlacementStrategy,[]*PlacementStrategy)
	platformFamily?:     null | string @go(PlatformFamily,*string)
	platformVersion?:    null | string @go(PlatformVersion,*string)
	propagateTags?:      null | string @go(PropagateTags,*string)
	roleARN?:            null | string @go(RoleARN,*string)
	runningCount?:       null | int64  @go(RunningCount,*int64)
	schedulingStrategy?: null | string @go(SchedulingStrategy,*string)
	serviceARN?:         null | string @go(ServiceARN,*string)
	serviceName?:        null | string @go(ServiceName,*string)
	serviceRegistries?: [...null | #ServiceRegistry] @go(ServiceRegistries,[]*ServiceRegistry)
	status?: null | string @go(Status,*string)
	tags?: [...null | #Tag] @go(Tags,[]*Tag)
	taskDefinition?: null | string @go(TaskDefinition,*string)
	taskSets?: [...null | #TaskSet] @go(TaskSets,[]*TaskSet)
}

// +kubebuilder:skipversion
#Session: {
	sessionID?: null | string @go(SessionID,*string)
	streamURL?: null | string @go(StreamURL,*string)
}

// +kubebuilder:skipversion
#Setting: {
	principalARN?: null | string @go(PrincipalARN,*string)
	value?:        null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#SystemControl: {
	namespace?: null | string @go(Namespace,*string)
	value?:     null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#Tag: {
	key?:   null | string @go(Key,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#Task: {
	attachments?: [...null | #Attachment] @go(Attachments,[]*Attachment)
	availabilityZone?:     null | string @go(AvailabilityZone,*string)
	capacityProviderName?: null | string @go(CapacityProviderName,*string)
	clusterARN?:           null | string @go(ClusterARN,*string)
	containerInstanceARN?: null | string @go(ContainerInstanceARN,*string)
	cpu?:                  null | string @go(CPU,*string)
	desiredStatus?:        null | string @go(DesiredStatus,*string)
	enableExecuteCommand?: null | bool   @go(EnableExecuteCommand,*bool)

	// The amount of ephemeral storage to allocate for the task. This parameter
	// is used to expand the total amount of ephemeral storage available, beyond
	// the default amount, for tasks hosted on Fargate. For more information, see
	// Fargate task storage (https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html)
	// in the Amazon ECS User Guide for Fargate.
	//
	// For tasks using the Fargate launch type, the task requires the following
	// platforms:
	//
	//    * Linux platform version 1.4.0 or later.
	//
	//    * Windows platform version 1.0.0 or later.
	ephemeralStorage?: null | #EphemeralStorage @go(EphemeralStorage,*EphemeralStorage)
	group?:            null | string            @go(Group,*string)
	inferenceAccelerators?: [...null | #InferenceAccelerator] @go(InferenceAccelerators,[]*InferenceAccelerator)
	lastStatus?:      null | string @go(LastStatus,*string)
	launchType?:      null | string @go(LaunchType,*string)
	memory?:          null | string @go(Memory,*string)
	platformFamily?:  null | string @go(PlatformFamily,*string)
	platformVersion?: null | string @go(PlatformVersion,*string)
	startedBy?:       null | string @go(StartedBy,*string)
	stoppedReason?:   null | string @go(StoppedReason,*string)
	tags?: [...null | #Tag] @go(Tags,[]*Tag)
	taskARN?:           null | string @go(TaskARN,*string)
	taskDefinitionARN?: null | string @go(TaskDefinitionARN,*string)
}

// +kubebuilder:skipversion
#TaskDefinitionPlacementConstraint: {
	expression?: null | string @go(Expression,*string)
	type_?:      null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#TaskDefinition_SDK: {
	compatibilities?: [...null | string] @go(Compatibilities,[]*string)
	containerDefinitions?: [...null | #ContainerDefinition] @go(ContainerDefinitions,[]*ContainerDefinition)
	cpu?: null | string @go(CPU,*string)

	// The amount of ephemeral storage to allocate for the task. This parameter
	// is used to expand the total amount of ephemeral storage available, beyond
	// the default amount, for tasks hosted on Fargate. For more information, see
	// Fargate task storage (https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html)
	// in the Amazon ECS User Guide for Fargate.
	//
	// For tasks using the Fargate launch type, the task requires the following
	// platforms:
	//
	//    * Linux platform version 1.4.0 or later.
	//
	//    * Windows platform version 1.0.0 or later.
	ephemeralStorage?: null | #EphemeralStorage @go(EphemeralStorage,*EphemeralStorage)
	executionRoleARN?: null | string            @go(ExecutionRoleARN,*string)
	family?:           null | string            @go(Family,*string)
	inferenceAccelerators?: [...null | #InferenceAccelerator] @go(InferenceAccelerators,[]*InferenceAccelerator)
	ipcMode?:     null | string @go(IPCMode,*string)
	memory?:      null | string @go(Memory,*string)
	networkMode?: null | string @go(NetworkMode,*string)
	pidMode?:     null | string @go(PIDMode,*string)
	placementConstraints?: [...null | #TaskDefinitionPlacementConstraint] @go(PlacementConstraints,[]*TaskDefinitionPlacementConstraint)

	// The configuration details for the App Mesh proxy.
	//
	// For tasks that use the EC2 launch type, the container instances require at
	// least version 1.26.0 of the container agent and at least version 1.26.0-1
	// of the ecs-init package to use a proxy configuration. If your container instances
	// are launched from the Amazon ECS optimized AMI version 20190301 or later,
	// then they contain the required versions of the container agent and ecs-init.
	// For more information, see Amazon ECS-optimized Linux AMI (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
	proxyConfiguration?: null | #ProxyConfiguration @go(ProxyConfiguration,*ProxyConfiguration)
	registeredBy?:       null | string              @go(RegisteredBy,*string)
	requiresAttributes?: [...null | #Attribute] @go(RequiresAttributes,[]*Attribute)
	requiresCompatibilities?: [...null | string] @go(RequiresCompatibilities,[]*string)
	revision?: null | int64 @go(Revision,*int64)

	// Information about the platform for the Amazon ECS service or task.
	//
	// For more information about RuntimePlatform, see RuntimePlatform (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)
	// in the Amazon Elastic Container Service Developer Guide.
	runtimePlatform?:   null | #RuntimePlatform @go(RuntimePlatform,*RuntimePlatform)
	status?:            null | string           @go(Status,*string)
	taskDefinitionARN?: null | string           @go(TaskDefinitionARN,*string)
	taskRoleARN?:       null | string           @go(TaskRoleARN,*string)
	volumes?: [...null | #Volume] @go(Volumes,[]*Volume)
}

// +kubebuilder:skipversion
#TaskOverride: {
	cpu?: null | string @go(CPU,*string)

	// The amount of ephemeral storage to allocate for the task. This parameter
	// is used to expand the total amount of ephemeral storage available, beyond
	// the default amount, for tasks hosted on Fargate. For more information, see
	// Fargate task storage (https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html)
	// in the Amazon ECS User Guide for Fargate.
	//
	// For tasks using the Fargate launch type, the task requires the following
	// platforms:
	//
	//    * Linux platform version 1.4.0 or later.
	//
	//    * Windows platform version 1.0.0 or later.
	ephemeralStorage?: null | #EphemeralStorage @go(EphemeralStorage,*EphemeralStorage)
	executionRoleARN?: null | string            @go(ExecutionRoleARN,*string)
	memory?:           null | string            @go(Memory,*string)
	taskRoleARN?:      null | string            @go(TaskRoleARN,*string)
}

// +kubebuilder:skipversion
#TaskSet: {
	capacityProviderStrategy?: [...null | #CapacityProviderStrategyItem] @go(CapacityProviderStrategy,[]*CapacityProviderStrategyItem)
	clusterARN?:           null | string @go(ClusterARN,*string)
	computedDesiredCount?: null | int64  @go(ComputedDesiredCount,*int64)
	externalID?:           null | string @go(ExternalID,*string)
	id?:                   null | string @go(ID,*string)
	launchType?:           null | string @go(LaunchType,*string)
	loadBalancers?: [...null | #LoadBalancer] @go(LoadBalancers,[]*LoadBalancer)

	// The network configuration for a task or service.
	networkConfiguration?: null | #NetworkConfiguration @go(NetworkConfiguration,*NetworkConfiguration)
	pendingCount?:         null | int64                 @go(PendingCount,*int64)
	platformFamily?:       null | string                @go(PlatformFamily,*string)
	platformVersion?:      null | string                @go(PlatformVersion,*string)
	runningCount?:         null | int64                 @go(RunningCount,*int64)

	// A floating-point percentage of the desired number of tasks to place and keep
	// running in the task set.
	scale?:      null | #Scale @go(Scale,*Scale)
	serviceARN?: null | string @go(ServiceARN,*string)
	serviceRegistries?: [...null | #ServiceRegistry] @go(ServiceRegistries,[]*ServiceRegistry)
	stabilityStatus?: null | string @go(StabilityStatus,*string)
	startedBy?:       null | string @go(StartedBy,*string)
	status?:          null | string @go(Status,*string)
	tags?: [...null | #Tag] @go(Tags,[]*Tag)
	taskDefinition?: null | string @go(TaskDefinition,*string)
	taskSetARN?:     null | string @go(TaskSetARN,*string)
}

// +kubebuilder:skipversion
#Tmpfs: {
	containerPath?: null | string @go(ContainerPath,*string)
	mountOptions?: [...null | string] @go(MountOptions,[]*string)
	size?: null | int64 @go(Size,*int64)
}

// +kubebuilder:skipversion
#Ulimit: {
	hardLimit?: null | int64  @go(HardLimit,*int64)
	name?:      null | string @go(Name,*string)
	softLimit?: null | int64  @go(SoftLimit,*int64)
}

// +kubebuilder:skipversion
#VersionInfo: {
	agentHash?:     null | string @go(AgentHash,*string)
	agentVersion?:  null | string @go(AgentVersion,*string)
	dockerVersion?: null | string @go(DockerVersion,*string)
}

// +kubebuilder:skipversion
#Volume: {
	// This parameter is specified when you're using Docker volumes. Docker volumes
	// are only supported when you're using the EC2 launch type. Windows containers
	// only support the use of the local driver. To use bind mounts, specify a host
	// instead.
	dockerVolumeConfiguration?: null | #DockerVolumeConfiguration @go(DockerVolumeConfiguration,*DockerVolumeConfiguration)

	// This parameter is specified when you're using an Amazon Elastic File System
	// file system for task storage. For more information, see Amazon EFS volumes
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html)
	// in the Amazon Elastic Container Service Developer Guide.
	efsVolumeConfiguration?: null | #EFSVolumeConfiguration @go(EFSVolumeConfiguration,*EFSVolumeConfiguration)

	// This parameter is specified when you're using Amazon FSx for Windows File
	// Server (https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html)
	// file system for task storage.
	//
	// For more information and the input format, see Amazon FSx for Windows File
	// Server volumes (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html)
	// in the Amazon Elastic Container Service Developer Guide.
	fsxWindowsFileServerVolumeConfiguration?: null | #FSxWindowsFileServerVolumeConfiguration @go(FsxWindowsFileServerVolumeConfiguration,*FSxWindowsFileServerVolumeConfiguration)

	// Details on a container instance bind mount host volume.
	host?: null | #HostVolumeProperties @go(Host,*HostVolumeProperties)
	name?: null | string                @go(Name,*string)
}

// +kubebuilder:skipversion
#VolumeFrom: {
	readOnly?:        null | bool   @go(ReadOnly,*bool)
	sourceContainer?: null | string @go(SourceContainer,*string)
}
