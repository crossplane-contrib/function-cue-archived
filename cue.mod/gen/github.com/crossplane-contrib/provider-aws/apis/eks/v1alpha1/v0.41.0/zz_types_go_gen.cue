// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/eks/v1alpha1

package v1alpha1

// +kubebuilder:skipversion
#AddonHealth: {
	issues?: [...null | #AddonIssue] @go(Issues,[]*AddonIssue)
}

// +kubebuilder:skipversion
#AddonInfo: {
	addonName?: null | string @go(AddonName,*string)

	// Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.
	marketplaceInformation?: null | #MarketplaceInformation @go(MarketplaceInformation,*MarketplaceInformation)
	owner?:                  null | string                  @go(Owner,*string)
	publisher?:              null | string                  @go(Publisher,*string)
	type_?:                  null | string                  @go(Type,*string)
}

// +kubebuilder:skipversion
#AddonIssue: {
	code?:    null | string @go(Code,*string)
	message?: null | string @go(Message,*string)
	resourceIDs?: [...null | string] @go(ResourceIDs,[]*string)
}

// +kubebuilder:skipversion
#AddonVersionInfo: {
	addonVersion?: null | string @go(AddonVersion,*string)
	architecture?: [...null | string] @go(Architecture,[]*string)
	requiresConfiguration?: null | bool @go(RequiresConfiguration,*bool)
}

// +kubebuilder:skipversion
#Addon_SDK: {
	addonARN?:            null | string @go(AddonARN,*string)
	addonName?:           null | string @go(AddonName,*string)
	addonVersion?:        null | string @go(AddonVersion,*string)
	clusterName?:         null | string @go(ClusterName,*string)
	configurationValues?: null | string @go(ConfigurationValues,*string)

	// The health of the add-on.
	health?: null | #AddonHealth @go(Health,*AddonHealth)

	// Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.
	marketplaceInformation?: null | #MarketplaceInformation @go(MarketplaceInformation,*MarketplaceInformation)
	owner?:                  null | string                  @go(Owner,*string)
	publisher?:              null | string                  @go(Publisher,*string)
	serviceAccountRoleARN?:  null | string                  @go(ServiceAccountRoleARN,*string)
	status?:                 null | string                  @go(Status,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// +kubebuilder:skipversion
#AutoScalingGroup: {
	name?: null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#Certificate: {
	data?: null | string @go(Data,*string)
}

// +kubebuilder:skipversion
#ClusterIssue: {
	message?: null | string @go(Message,*string)
	resourceIDs?: [...null | string] @go(ResourceIDs,[]*string)
}

// +kubebuilder:skipversion
#Compatibility: {
	clusterVersion?: null | string @go(ClusterVersion,*string)
	defaultVersion?: null | bool   @go(DefaultVersion,*bool)
	platformVersions?: [...null | string] @go(PlatformVersions,[]*string)
}

// +kubebuilder:skipversion
#ConnectorConfigRequest: {
	roleARN?: null | string @go(RoleARN,*string)
}

// +kubebuilder:skipversion
#ConnectorConfigResponse: {
	activationCode?: null | string @go(ActivationCode,*string)
	activationID?:   null | string @go(ActivationID,*string)
	provider?:       null | string @go(Provider,*string)
	roleARN?:        null | string @go(RoleARN,*string)
}

// +kubebuilder:skipversion
#ControlPlanePlacementRequest: {
	groupName?: null | string @go(GroupName,*string)
}

// +kubebuilder:skipversion
#ControlPlanePlacementResponse: {
	groupName?: null | string @go(GroupName,*string)
}

// +kubebuilder:skipversion
#EncryptionConfig: {
	resources?: [...null | string] @go(Resources,[]*string)
}

// +kubebuilder:skipversion
#ErrorDetail: {
	errorCode?:    null | string @go(ErrorCode,*string)
	errorMessage?: null | string @go(ErrorMessage,*string)
	resourceIDs?: [...null | string] @go(ResourceIDs,[]*string)
}

// +kubebuilder:skipversion
#FargateProfileSelector: {
	namespace?: null | string @go(Namespace,*string)
}

// +kubebuilder:skipversion
#Issue: {
	message?: null | string @go(Message,*string)
	resourceIDs?: [...null | string] @go(ResourceIDs,[]*string)
}

// +kubebuilder:skipversion
#KubernetesNetworkConfigRequest: {
	serviceIPv4CIDR?: null | string @go(ServiceIPv4CIDR,*string)
}

// +kubebuilder:skipversion
#KubernetesNetworkConfigResponse: {
	serviceIPv4CIDR?: null | string @go(ServiceIPv4CIDR,*string)
	serviceIPv6CIDR?: null | string @go(ServiceIPv6CIDR,*string)
}

// +kubebuilder:skipversion
#LaunchTemplateSpecification: {
	id?:      null | string @go(ID,*string)
	name?:    null | string @go(Name,*string)
	version?: null | string @go(Version,*string)
}

// +kubebuilder:skipversion
#MarketplaceInformation: {
	productID?:  null | string @go(ProductID,*string)
	productURL?: null | string @go(ProductURL,*string)
}

// +kubebuilder:skipversion
#NodegroupResources: {
	remoteAccessSecurityGroup?: null | string @go(RemoteAccessSecurityGroup,*string)
}

// +kubebuilder:skipversion
#OIDC: {
	issuer?: null | string @go(Issuer,*string)
}

// +kubebuilder:skipversion
#OIDCIdentityProviderConfig: {
	clientID?:                   null | string @go(ClientID,*string)
	clusterName?:                null | string @go(ClusterName,*string)
	groupsClaim?:                null | string @go(GroupsClaim,*string)
	groupsPrefix?:               null | string @go(GroupsPrefix,*string)
	identityProviderConfigARN?:  null | string @go(IdentityProviderConfigARN,*string)
	identityProviderConfigName?: null | string @go(IdentityProviderConfigName,*string)
	issuerURL?:                  null | string @go(IssuerURL,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	usernameClaim?:  null | string @go(UsernameClaim,*string)
	usernamePrefix?: null | string @go(UsernamePrefix,*string)
}

// +kubebuilder:skipversion
#OIDCIdentityProviderConfigRequest: {
	clientID?:                   null | string @go(ClientID,*string)
	groupsClaim?:                null | string @go(GroupsClaim,*string)
	groupsPrefix?:               null | string @go(GroupsPrefix,*string)
	identityProviderConfigName?: null | string @go(IdentityProviderConfigName,*string)
	issuerURL?:                  null | string @go(IssuerURL,*string)
	usernameClaim?:              null | string @go(UsernameClaim,*string)
	usernamePrefix?:             null | string @go(UsernamePrefix,*string)
}

// +kubebuilder:skipversion
#OutpostConfigRequest: {
	controlPlaneInstanceType?: null | string @go(ControlPlaneInstanceType,*string)
	outpostARNs?: [...null | string] @go(OutpostARNs,[]*string)
}

// +kubebuilder:skipversion
#OutpostConfigResponse: {
	controlPlaneInstanceType?: null | string @go(ControlPlaneInstanceType,*string)
	outpostARNs?: [...null | string] @go(OutpostARNs,[]*string)
}

// +kubebuilder:skipversion
#Provider: {
	keyARN?: null | string @go(KeyARN,*string)
}

// +kubebuilder:skipversion
#RemoteAccessConfig: {
	ec2SshKey?: null | string @go(EC2SshKey,*string)
	sourceSecurityGroups?: [...null | string] @go(SourceSecurityGroups,[]*string)
}

// +kubebuilder:skipversion
#Update: {
	errors?: [...null | #ErrorDetail] @go(Errors,[]*ErrorDetail)
	id?: null | string @go(ID,*string)
	params?: [...null | #UpdateParam] @go(Params,[]*UpdateParam)
	status?: null | string @go(Status,*string)
	type_?:  null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#UpdateParam: {
	type_?: null | string @go(Type,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#VPCConfigRequest: {
	publicAccessCIDRs?: [...null | string] @go(PublicAccessCIDRs,[]*string)
	securityGroupIDs?: [...null | string] @go(SecurityGroupIDs,[]*string)
	subnetIDs?: [...null | string] @go(SubnetIDs,[]*string)
}

// +kubebuilder:skipversion
#VPCConfigResponse: {
	clusterSecurityGroupID?: null | string @go(ClusterSecurityGroupID,*string)
	endpointPrivateAccess?:  null | bool   @go(EndpointPrivateAccess,*bool)
	endpointPublicAccess?:   null | bool   @go(EndpointPublicAccess,*bool)
	publicAccessCIDRs?: [...null | string] @go(PublicAccessCIDRs,[]*string)
	securityGroupIDs?: [...null | string] @go(SecurityGroupIDs,[]*string)
	subnetIDs?: [...null | string] @go(SubnetIDs,[]*string)
	vpcID?: null | string @go(VPCID,*string)
}
