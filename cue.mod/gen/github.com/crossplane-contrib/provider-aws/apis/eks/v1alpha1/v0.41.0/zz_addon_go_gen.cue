// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/eks/v1alpha1

package v1alpha1

// AddonParameters defines the desired state of Addon
#AddonParameters: {
	// Region is which region the Addon will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The name of the add-on. The name must match one of the names that DescribeAddonVersions
	// (https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html)
	// returns.
	// +kubebuilder:validation:Required
	addonName?: null | string @go(AddonName,*string)

	// The version of the add-on. The version must match one of the versions returned
	// by DescribeAddonVersions (https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html).
	addonVersion?: null | string @go(AddonVersion,*string)

	// The set of configuration values for the add-on that's created. The values
	// that you provide are validated against the schema in DescribeAddonConfiguration
	// (https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonConfiguration.html).
	configurationValues?: null | string @go(ConfigurationValues,*string)

	// How to resolve field value conflicts for an Amazon EKS add-on. Conflicts
	// are handled based on the value you choose:
	//
	//    * None – If the self-managed version of the add-on is installed on your
	//    cluster, Amazon EKS doesn't change the value. Creation of the add-on might
	//    fail.
	//
	//    * Overwrite – If the self-managed version of the add-on is installed
	//    on your cluster and the Amazon EKS default value is different than the
	//    existing value, Amazon EKS changes the value to the Amazon EKS default
	//    value.
	//
	//    * Preserve – Not supported. You can set this value when updating an
	//    add-on though. For more information, see UpdateAddon (https://docs.aws.amazon.com/eks/latest/APIReference/API_UpdateAddon.html).
	//
	// If you don't currently have the self-managed version of the add-on installed
	// on your cluster, the Amazon EKS add-on is installed. Amazon EKS sets all
	// values to default values, regardless of the option that you specify.
	resolveConflicts?: null | string @go(ResolveConflicts,*string)

	// The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's
	// service account. The role must be assigned the IAM permissions required by
	// the add-on. If you don't specify an existing IAM role, then the add-on uses
	// the permissions assigned to the node IAM role. For more information, see
	// Amazon EKS node IAM role (https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html)
	// in the Amazon EKS User Guide.
	//
	// To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC)
	// provider created for your cluster. For more information, see Enabling IAM
	// roles for service accounts on your cluster (https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html)
	// in the Amazon EKS User Guide.
	serviceAccountRoleARN?: null | string @go(ServiceAccountRoleARN,*string)

	// The metadata to apply to the cluster to assist with categorization and organization.
	// Each tag consists of a key and an optional value. You define both.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	#CustomAddonParameters
}

// AddonSpec defines the desired state of Addon
#AddonSpec: {
	forProvider: #AddonParameters @go(ForProvider)
}

// AddonObservation defines the observed state of Addon
#AddonObservation: {
	// The Amazon Resource Name (ARN) of the add-on.
	addonARN?: null | string @go(AddonARN,*string)

	// The name of the cluster.
	clusterName?: null | string @go(ClusterName,*string)

	// An object that represents the health of the add-on.
	health?: null | #AddonHealth @go(Health,*AddonHealth)

	// Information about an Amazon EKS add-on from the Amazon Web Services Marketplace.
	marketplaceInformation?: null | #MarketplaceInformation @go(MarketplaceInformation,*MarketplaceInformation)

	// The owner of the add-on.
	owner?: null | string @go(Owner,*string)

	// The publisher of the add-on.
	publisher?: null | string @go(Publisher,*string)

	// The status of the add-on.
	status?: null | string @go(Status,*string)
}

// AddonStatus defines the observed state of Addon.
#AddonStatus: {
	atProvider?: #AddonObservation @go(AtProvider)
}

// Addon is the Schema for the Addons API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Addon: {
	spec:    #AddonSpec   @go(Spec)
	status?: #AddonStatus @go(Status)
}

// AddonList contains a list of Addons
#AddonList: {
	items: [...#Addon] @go(Items,[]Addon)
}
