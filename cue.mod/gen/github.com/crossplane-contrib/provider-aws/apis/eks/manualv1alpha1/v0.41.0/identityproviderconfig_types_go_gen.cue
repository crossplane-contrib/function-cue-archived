// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/eks/manualv1alpha1

package manualv1alpha1

// IdentityProviderConfigType is a type of IdentityProviderConfig
#IdentityProviderConfigType: string // #enumIdentityProviderConfigType

#enumIdentityProviderConfigType:
	#OidcIdentityProviderConfigType

// OidcIdentityProviderConfigType represent an OpenID Connect identity provider.
#OidcIdentityProviderConfigType: #IdentityProviderConfigType & "oidc"

// IdentityProviderConfigStatusType is a type of IdentityProviderConfig status.
#IdentityProviderConfigStatusType: string // #enumIdentityProviderConfigStatusType

#enumIdentityProviderConfigStatusType:
	#IdentityProviderConfigStatusCreating |
	#IdentityProviderConfigStatusActive |
	#IdentityProviderConfigStatusDeleting |
	#IdentityProviderConfigStatusCreateFailed |
	#IdentityProviderConfigStatusDeleteFailed

#IdentityProviderConfigStatusCreating:     #IdentityProviderConfigStatusType & "CREATING"
#IdentityProviderConfigStatusActive:       #IdentityProviderConfigStatusType & "ACTIVE"
#IdentityProviderConfigStatusDeleting:     #IdentityProviderConfigStatusType & "DELETING"
#IdentityProviderConfigStatusCreateFailed: #IdentityProviderConfigStatusType & "CREATE_FAILED"
#IdentityProviderConfigStatusDeleteFailed: #IdentityProviderConfigStatusType & "DELETE_FAILED"

// OIDCIdentityProvider describes an OpenID identity provider configuration
#OIDCIdentityProvider: {
	// This is also known as audience. The ID for the client application that makes
	// authentication requests to the OpenID identity provider.
	// +immutable
	clientId: string @go(ClientID)

	// The URL of the OpenID identity provider that allows the API server to discover
	// public signing keys for verifying tokens. The URL must begin with https:// and
	// should correspond to the iss claim in the provider's OIDC ID tokens. Per the
	// OIDC standard, path components are allowed but query parameters are not.
	// Typically the URL consists of only a hostname, like https://server.example.org
	// or https://example.com. This URL should point to the level below
	// .well-known/openid-configuration and must be publicly accessible over the
	// internet.
	// +immutable
	issuerUrl: string @go(IssuerURL)

	// The JWT claim that the provider uses to return your groups.
	// +immutable
	// +optional
	groupsClaim?: string @go(GroupsClaim)

	// The prefix that is prepended to group claims to prevent clashes with existing
	// names (such as system: groups). For example, the value oidc: will create group
	// names like oidc:engineering and oidc:infra.
	// +immutable
	// +optional
	groupsPrefix?: string @go(GroupsPrefix)

	// The key value pairs that describe required claims in the identity token. If set,
	// each claim is verified to be present in the token with a matching value. For the
	// maximum number of claims that you can require, see Amazon EKS service quotas
	// (https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the
	// Amazon EKS User Guide.
	// +immutable
	// +optional
	requiredClaims?: {[string]: string} @go(RequiredClaims,map[string]string)

	// The JSON Web Token (JWT) claim to use as the username. The default is sub, which
	// is expected to be a unique identifier of the end user. You can choose other
	// claims, such as email or name, depending on the OpenID identity provider. Claims
	// other than email are prefixed with the issuer URL to prevent naming clashes with
	// other plug-ins.
	// +immutable
	// +optional
	usernameClaim?: string @go(UsernameClaim)

	// The prefix that is prepended to username claims to prevent clashes with existing
	// names. If you do not provide this field, and username is a value other than
	// email, the prefix defaults to issuerurl#. You can use the value - to disable all
	// prefixing.
	// +optional
	usernamePrefix?: string @go(UsernamePrefix)
}

// IdentityProviderConfigParameters define the desired state of an AWS Elastic Kubernetes
// Service Identity Provider.
#IdentityProviderConfigParameters: {
	// Region is the region you'd like the identity provider to be created in.
	// +immutable
	region: string @go(Region)

	// The name of the cluster to associate the identity provider with.
	// +immutable
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/eks/v1beta1.Cluster
	clusterName?: string @go(ClusterName)

	// An object that represents an OpenID Connect (OIDC) identity provider
	// configuration.
	// +immutable
	oidc?: null | #OIDCIdentityProvider @go(Oidc,*OIDCIdentityProvider)

	// The metadata to apply to the configuration to assist with categorization and
	// organization. Each tag consists of a key and an optional value, both of which
	// you define.
	// +optional
	tags?: {[string]: string} @go(Tags,map[string]string)
}

// IdentityProviderConfigObservation is the observed state of an identity provider.
#IdentityProviderConfigObservation: {
	// The current status of the managed identity provider config.
	status?:                    #IdentityProviderConfigStatusType @go(Status)
	identityProviderConfigArn?: string                            @go(IdentityProviderConfigArn)
}

// A IdentityProviderConfigSpec defines the desired state of an EKS identity provider.
#IdentityProviderConfigSpec: {
	forProvider: #IdentityProviderConfigParameters @go(ForProvider)
}

// An IdentityProviderConfigStatus represents the observed state of an EKS associated identity provider.
#IdentityProviderConfigStatus: {
	atProvider?: #IdentityProviderConfigObservation @go(AtProvider)
}

// An IdentityProviderConfig is a managed resource that represents an AWS Elastic Kubernetes
// Service IdentityProviderConfig.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="CLUSTER",type="string",JSONPath=".spec.forProvider.clusterName"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#IdentityProviderConfig: {
	spec:    #IdentityProviderConfigSpec   @go(Spec)
	status?: #IdentityProviderConfigStatus @go(Status)
}

// IdentityProviderConfigList contains a list of IdentityProviderConfig items
#IdentityProviderConfigList: {
	items: [...#IdentityProviderConfig] @go(Items,[]IdentityProviderConfig)
}
