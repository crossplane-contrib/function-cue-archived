// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/eks/v1beta1

package v1beta1

// ClusterStatusType is the status of an EKS cluster.
#ClusterStatusType: string // #enumClusterStatusType

#enumClusterStatusType:
	#ClusterStatusCreating |
	#ClusterStatusActive |
	#ClusterStatusDeleting |
	#ClusterStatusFailed |
	#ClusterStatusUpdating

#ClusterStatusCreating: #ClusterStatusType & "CREATING"
#ClusterStatusActive:   #ClusterStatusType & "ACTIVE"
#ClusterStatusDeleting: #ClusterStatusType & "DELETING"
#ClusterStatusFailed:   #ClusterStatusType & "FAILED"
#ClusterStatusUpdating: #ClusterStatusType & "UPDATING"

// LogType is a type of logging.
#LogType: string // #enumLogType

#enumLogType:
	#LogTypeAPI |
	#LogTypeAudit |
	#LogTypeAuthenticator |
	#LogTypeControllerManager |
	#LogTypeScheduler

#LogTypeAPI:               #LogType & "api"
#LogTypeAudit:             #LogType & "audit"
#LogTypeAuthenticator:     #LogType & "authenticator"
#LogTypeControllerManager: #LogType & "controllerManager"
#LogTypeScheduler:         #LogType & "scheduler"

// ClusterParameters define the desired state of an AWS Elastic Kubernetes
// Service cluster.
#ClusterParameters: {
	// Region is the region you'd like your Cluster to be created in.
	// +optional
	region?: null | string @go(Region,*string)

	// The encryption configuration for the cluster.
	// +immutable
	// +optional
	encryptionConfig?: [...#EncryptionConfig] @go(EncryptionConfig,[]EncryptionConfig)

	// The Kubernetes network configuration for the cluster.
	// +immutable
	// +optional
	kubernetesNetworkConfig?: null | #KubernetesNetworkConfigRequest @go(KubernetesNetworkConfig,*KubernetesNetworkConfigRequest)

	// Enable or disable exporting the Kubernetes control plane logs for your cluster
	// to CloudWatch Logs. By default, cluster control plane logs aren't exported
	// to CloudWatch Logs. For more information, see Amazon EKS Cluster Control
	// Plane Logs (https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html)
	// in the Amazon EKS User Guide .
	//
	// CloudWatch Logs ingestion, archive storage, and data scanning rates apply
	// to exported control plane logs. For more information, see Amazon CloudWatch
	// Pricing (http://aws.amazon.com/cloudwatch/pricing/).
	// +optional
	logging?: null | #Logging @go(Logging,*Logging)

	// An object representing the configuration of your local Amazon EKS cluster on an
	// Amazon Web Services Outpost. Before creating a local cluster on an Outpost,
	// review Creating an Amazon EKS cluster on an Amazon Web Services Outpost
	// (https://docs.aws.amazon.com/eks/latest/userguide/create-cluster-outpost.html)
	// in the Amazon EKS User Guide. This object isn't available for creating Amazon
	// EKS clusters on the Amazon Web Services cloud.
	// +optional
	outpostConfig?: null | #OutpostConfigRequest @go(OutpostConfig,*OutpostConfigRequest)

	// The VPC configuration used by the cluster control plane. Amazon EKS VPC resources
	// have specific requirements to work properly with Kubernetes. For more information,
	// see Cluster VPC Considerations (https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html)
	// and Cluster Security Group Considerations (https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html)
	// in the Amazon EKS User Guide. You must specify at least two subnets. You
	// can specify up to five security groups, but we recommend that you use a dedicated
	// security group for your cluster control plane.
	//
	// ResourcesVpcConfig is a required field
	resourcesVpcConfig: #VpcConfigRequest @go(ResourcesVpcConfig)

	// The Amazon Resource Name (ARN) of the IAM role that provides permissions
	// for Amazon EKS to make calls to other AWS API operations on your behalf.
	// For more information, see Amazon EKS Service IAM Role (https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html)
	// in the Amazon EKS User Guide .
	//
	// RoleArn is a required field
	// +immutable
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-aws/apis/iam/v1beta1.RoleARN()
	roleArn?: string @go(RoleArn)

	// The metadata to apply to the cluster to assist with categorization and organization.
	// Each tag consists of a key and an optional value, both of which you define.
	// +optional
	tags?: {[string]: string} @go(Tags,map[string]string)

	// The desired Kubernetes version for your cluster. If you don't specify a value
	// here, the latest version available in Amazon EKS is used.
	// Example: 1.15
	// +optional
	version?: null | string @go(Version,*string)
}

// EncryptionConfig is the encryption configuration for a cluster.
#EncryptionConfig: {
	// AWS Key Management Service (AWS KMS) customer master key (CMK). Either the
	// ARN or the alias can be used.
	provider: #Provider @go(Provider)

	// Specifies the resources to be encrypted. The only supported value is "secrets".
	resources: [...string] @go(Resources,[]string)
}

// Provider is an encryption provider.
#Provider: {
	// Amazon Resource Name (ARN) or alias of the customer master key (CMK). The
	// CMK must be symmetric, created in the same region as the cluster, and if
	// the CMK was created in a different account, the user must have access to
	// the CMK. For more information, see Allowing Users in Other Accounts to Use
	// a CMK (https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html)
	// in the AWS Key Management Service Developer Guide.
	keyArn: string @go(KeyArn)
}

// IPFamily specifies the ip family
#IPFamily: string // #enumIPFamily

#enumIPFamily:
	#IPFamilyIpv4 |
	#IPFamilyIpv6

// IPFamilyIpv4 means ipv4
#IPFamilyIpv4: #IPFamily & "ipv4"

// IPFamilyIpv6 means ipv6
#IPFamilyIpv6: #IPFamily & "ipv6"

// KubernetesNetworkConfigRequest specifies the Kubernetes network configuration for the cluster.
#KubernetesNetworkConfigRequest: {
	// Specify which IP family is used to assign Kubernetes pod and service IP
	// addresses. If you don't specify a value, ipv4 is used by default. You can only
	// specify an IP family when you create a cluster and can't change this value once
	// the cluster is created. If you specify ipv6, the VPC and subnets that you
	// specify for cluster creation must have both IPv4 and IPv6 CIDR blocks assigned
	// to them. You can't specify ipv6 for clusters in China Regions. You can only
	// specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the
	// Amazon VPC CNI add-on. If you specify ipv6, then ensure that your VPC meets the
	// requirements listed in the considerations listed in Assigning IPv6 addresses to
	// pods and services
	// (https://docs.aws.amazon.com/eks/latest/userguide/cni-ipv6.html) in the Amazon
	// EKS User Guide. Kubernetes assigns services IPv6 addresses from the unique local
	// address range (fc00::/7). You can't specify a custom IPv6 CIDR block. Pod
	// addresses are assigned from the subnet's IPv6 CIDR.
	ipFamily: #IPFamily @go(IPFamily)

	// Don't specify a value if you select ipv6 for ipFamily. The CIDR block to assign
	// Kubernetes service IP addresses from. If you don't specify a block, Kubernetes
	// assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We
	// recommend that you specify a block that does not overlap with resources in other
	// networks that are peered or connected to your VPC. The block must meet the
	// following requirements:
	//
	// * Within one of the following private IP address
	// blocks: 10.0.0.0/8, 172.16.0.0/12, or 192.168.0.0/16.
	//
	// * Doesn't overlap with
	// any CIDR block assigned to the VPC that you selected for VPC.
	//
	// * Between /24 and
	// /12.
	//
	// You can only specify a custom CIDR block when you create a cluster and
	// can't change this value once the cluster is created.
	serviceIpv4Cidr?: string @go(ServiceIpv4Cidr)
}

// Logging in the logging configuration for a cluster.
#Logging: {
	// The cluster control plane logging configuration for your cluster.
	clusterLogging: [...#LogSetup] @go(ClusterLogging,[]LogSetup)
}

// LogSetup specifies the logging types that are enabled.
#LogSetup: {
	// If a log type is enabled, that log type exports its control plane logs to
	// CloudWatch Logs. If a log type isn't enabled, that log type doesn't export
	// its control plane logs. Each individual log type can be enabled or disabled
	// independently.
	// +optional
	enabled?: null | bool @go(Enabled,*bool)

	// The available cluster control plane log types.
	types?: [...#LogType] @go(Types,[]LogType)
}

// VpcConfigRequest specifies the VPC configuration for a cluster.
#VpcConfigRequest: {
	// Set this value to true to enable private access for your cluster's Kubernetes
	// API server endpoint. If you enable private access, Kubernetes API requests
	// from within your cluster's VPC use the private VPC endpoint. The default
	// value for this parameter is false, which disables private access for your
	// Kubernetes API server. For more information, see Amazon EKS Cluster Endpoint
	// Access Control (https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html)
	// in the Amazon EKS User Guide.
	// +optional
	endpointPrivateAccess?: null | bool @go(EndpointPrivateAccess,*bool)

	// Set this value to false to disable public access for your cluster's Kubernetes
	// API server endpoint. If you disable public access, your cluster's Kubernetes
	// API server can receive only requests from within the cluster VPC. The default
	// value for this parameter is true, which enables public access for your Kubernetes
	// API server. For more information, see Amazon EKS Cluster Endpoint Access
	// Control (https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html)
	// in the Amazon EKS User Guide.
	// +optional
	endpointPublicAccess?: null | bool @go(EndpointPublicAccess,*bool)

	// The CIDR blocks that are allowed access to your cluster's public Kubernetes
	// API server endpoint. Communication to the endpoint from addresses outside
	// of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0.
	// If you've disabled private endpoint access and you have worker nodes or AWS
	// Fargate pods in the cluster, then ensure that you specify the necessary CIDR
	// blocks. For more information, see Amazon EKS Cluster Endpoint Access Control
	// (https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html)
	// in the Amazon EKS User Guide.
	// +optional
	publicAccessCidrs?: [...string] @go(PublicAccessCidrs,[]string)

	// Specify one or more security groups for the cross-account elastic network
	// interfaces that Amazon EKS creates to use to allow communication between
	// your worker nodes and the Kubernetes control plane. If you don't specify
	// a security group, the default security group for your VPC is used.
	// +immutable
	// +optional
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=SecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIDSelector
	securityGroupIds?: [...string] @go(SecurityGroupIDs,[]string)

	// Specify subnets for your Amazon EKS worker nodes. Amazon EKS creates cross-account
	// elastic network interfaces in these subnets to allow communication between
	// your worker nodes and the Kubernetes control plane.
	// +immutable
	// +optional
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:refFieldName=SubnetIDRefs
	// +crossplane:generate:reference:selectorFieldName=SubnetIDSelector
	subnetIds?: [...string] @go(SubnetIDs,[]string)
}

// ClusterObservation is the observed state of a cluster.
#ClusterObservation: {
	// The Amazon Resource Name (ARN) of the cluster.
	arn?: string @go(Arn)

	// The endpoint for your Kubernetes API server.
	endpoint?: string @go(Endpoint)

	// The Base64-encoded certificate data required to communicate with your cluster.
	certificateAuthorityData?: string @go(CertificateAuthorityData)

	// The identity provider information for the cluster.
	identity?: #Identity @go(Identity)

	// The kubernetes version of your Amazon EKS cluster. For more information, see
	// Kubernetes Versions (https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html)
	// in the Amazon EKS User Guide .
	version?: string @go(Version)

	// The platform version of your Amazon EKS cluster. For more information, see
	// Platform Versions (https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html)
	// in the Amazon EKS User Guide .
	platformVersion?: string @go(PlatformVersion)

	// An object representing the configuration of your local Amazon EKS cluster on an
	// Amazon Web Services Outpost. This object isn't available for clusters on the
	// Amazon Web Services cloud.
	outpostConfig?: #OutpostConfigResponse @go(OutpostConfig)

	// The Kubernetes network configuration for the cluster.
	kubernetesNetworkConfig?: #KubernetesNetworkConfigResponse @go(KubernetesNetworkConfig)

	// The VPC configuration used by the cluster control plane. Amazon EKS VPC resources
	// have specific requirements to work properly with Kubernetes. For more information,
	// see Cluster VPC Considerations (https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html)
	// and Cluster Security Group Considerations (https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html)
	// in the Amazon EKS User Guide.
	resourcesVpcConfig?: #VpcConfigResponse @go(ResourcesVpcConfig)

	// The current status of the cluster.
	status?: #ClusterStatusType @go(Status)
}

// Identity is the identity information for a cluster.
#Identity: {
	// The OpenID Connect (https://openid.net/connect/) identity provider information
	// for the cluster.
	oidc?: #OIDC @go(OIDC)
}

// OIDC is the OpenID Connect issuer URL.
#OIDC: {
	// The issuer URL for the OpenID Connect identity provider.
	issuer?: string @go(Issuer)
}

// OutpostConfigRequest describes the Outposts configuration for eks
#OutpostConfigRequest: {
	// The Amazon EC2 instance type that you want to use for your local Amazon EKS
	// cluster on Outposts. The instance type that you specify is used for all
	// Kubernetes control plane instances. The instance type can't be changed after
	// cluster creation. Choose an instance type based on the number of nodes that your
	// cluster will have. If your cluster will have:
	//
	// * 1–20 nodes, then we recommend
	// specifying a large instance type.
	//
	// * 21–100 nodes, then we recommend specifying
	// an xlarge instance type.
	//
	// * 101–250 nodes, then we recommend specifying a
	// 2xlarge instance type.
	//
	// For a list of the available Amazon EC2 instance types,
	// see Compute and storage in Outposts rack features
	// (http://aws.amazon.com/outposts/rack/features/). The control plane is not
	// automatically scaled by Amazon EKS.
	//
	// This member is required.
	controlPlaneInstanceType: string @go(ControlPlaneInstanceType)

	// The ARN of the Outpost that you want to use for your local Amazon EKS cluster on
	// Outposts. Only a single Outpost ARN is supported.
	//
	// This member is required.
	outpostArns: [...string] @go(OutpostArns,[]string)
}

// OutpostConfigResponse describse the observed Outposts configuration for a cluster
#OutpostConfigResponse: {
	// The Amazon EC2 instance type used for the control plane. The instance type is
	// the same for all control plane instances.
	//
	// This member is required.
	controlPlaneInstanceType?: string @go(ControlPlaneInstanceType)

	// The ARN of the Outpost that you specified for use with your local Amazon EKS
	// cluster on Outposts.
	//
	// This member is required.
	outpostArns?: [...string] @go(OutpostArns,[]string)
}

// KubernetesNetworkConfigResponse specifies the Kubernetes network configuration for the cluster.
// The response contains a value for serviceIpv6Cidr or serviceIpv4Cidr, but not both.
#KubernetesNetworkConfigResponse: {
	// The IP family used to assign Kubernetes pod and service IP addresses. The IP
	// family is always ipv4, unless you have a 1.21 or later cluster running version
	// 1.10.1 or later of the Amazon VPC CNI add-on and specified ipv6 when you created
	// the cluster.
	ipFamily?: #IPFamily @go(IPFamily)

	// The CIDR block that Kubernetes pod and service IP addresses are assigned from.
	// Kubernetes assigns addresses from an IPv4 CIDR block assigned to a subnet that
	// the node is in. If you didn't specify a CIDR block when you created the cluster,
	// then Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16
	// CIDR blocks. If this was specified, then it was specified when the cluster was
	// created and it can't be changed.
	serviceIpv4Cidr?: string @go(ServiceIpv4Cidr)

	// The CIDR block that Kubernetes pod and service IP addresses are assigned from if
	// you created a 1.21 or later cluster with version 1.10.1 or later of the Amazon
	// VPC CNI add-on and specified ipv6 for ipFamily when you created the cluster.
	// Kubernetes assigns service addresses from the unique local address range
	// (fc00::/7) because you can't specify a custom IPv6 CIDR block when you create
	// the cluster.
	serviceIpv6Cidr?: string @go(ServiceIpv6Cidr)
}

// VpcConfigResponse is the observed VPC configuration for a cluster.
#VpcConfigResponse: {
	// The cluster security group that was created by Amazon EKS for the cluster.
	// Managed node groups use this security group for control-plane-to-data-plane
	// communication.
	clusterSecurityGroupId?: string @go(ClusterSecurityGroupID)

	// The VPC associated with your cluster.
	vpcId?: string @go(VpcID)
}

// A ClusterSpec defines the desired state of an EKS Cluster.
#ClusterSpec: {
	forProvider: #ClusterParameters @go(ForProvider)
}

// A ClusterStatus represents the observed state of an EKS Cluster.
#ClusterStatus: {
	atProvider?: #ClusterObservation @go(AtProvider)
}

// A Cluster is a managed resource that represents an AWS Elastic Kubernetes
// Service cluster.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Cluster: {
	spec:    #ClusterSpec   @go(Spec)
	status?: #ClusterStatus @go(Status)
}

// ClusterList contains a list of Cluster items
#ClusterList: {
	items: [...#Cluster] @go(Items,[]Cluster)
}
