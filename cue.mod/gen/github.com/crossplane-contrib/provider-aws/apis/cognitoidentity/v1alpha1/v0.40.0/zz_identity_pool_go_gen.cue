// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/cognitoidentity/v1alpha1

package v1alpha1

// IdentityPoolParameters defines the desired state of IdentityPool
#IdentityPoolParameters: {
	// Region is which region the IdentityPool will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// Enables or disables the Basic (Classic) authentication flow. For more information,
	// see Identity Pools (Federated Identities) Authentication Flow (https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html)
	// in the Amazon Cognito Developer Guide.
	allowClassicFlow?: null | bool @go(AllowClassicFlow,*bool)

	// The "domain" by which Cognito will refer to your users. This name acts as
	// a placeholder that allows your backend and the Cognito service to communicate
	// about the developer provider. For the DeveloperProviderName, you can use
	// letters as well as period (.), underscore (_), and dash (-).
	//
	// Once you have set a developer provider name, you cannot change it. Please
	// take care in setting this parameter.
	developerProviderName?: null | string @go(DeveloperProviderName,*string)

	// A string that you provide.
	// +kubebuilder:validation:Required
	identityPoolName?: null | string @go(IdentityPoolName,*string)

	// Tags to assign to the identity pool. A tag is a label that you can apply
	// to identity pools to categorize and manage them in different ways, such as
	// by purpose, owner, environment, or other criteria.
	identityPoolTags?: {[string]: null | string} @go(IdentityPoolTags,map[string]*string)

	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity
	// pool.
	samlProviderARNs?: [...null | string] @go(SamlProviderARNs,[]*string)

	// Optional key:value pairs mapping provider names to provider app IDs.
	supportedLoginProviders?: {[string]: null | string} @go(SupportedLoginProviders,map[string]*string)

	#CustomIdentityPoolParameters
}

// IdentityPoolSpec defines the desired state of IdentityPool
#IdentityPoolSpec: {
	forProvider: #IdentityPoolParameters @go(ForProvider)
}

// IdentityPoolObservation defines the observed state of IdentityPool
#IdentityPoolObservation: {
	// TRUE if the identity pool supports unauthenticated logins.
	allowUnauthenticatedIDentities?: null | bool @go(AllowUnauthenticatedIDentities,*bool)

	// A list representing an Amazon Cognito user pool and its client ID.
	cognitoIdentityProviders?: [...null | #Provider] @go(CognitoIdentityProviders,[]*Provider)

	// An identity pool ID in the format REGION:GUID.
	identityPoolID?: null | string @go(IdentityPoolID,*string)

	// The ARNs of the OpenID Connect providers.
	openIDConnectProviderARNs?: [...null | string] @go(OpenIDConnectProviderARNs,[]*string)
}

// IdentityPoolStatus defines the observed state of IdentityPool.
#IdentityPoolStatus: {
	atProvider?: #IdentityPoolObservation @go(AtProvider)
}

// IdentityPool is the Schema for the IdentityPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#IdentityPool: {
	spec:    #IdentityPoolSpec   @go(Spec)
	status?: #IdentityPoolStatus @go(Status)
}

// IdentityPoolList contains a list of IdentityPools
#IdentityPoolList: {
	items: [...#IdentityPool] @go(Items,[]IdentityPool)
}
