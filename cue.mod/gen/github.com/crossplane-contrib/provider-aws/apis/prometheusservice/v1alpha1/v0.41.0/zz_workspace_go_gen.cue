// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/prometheusservice/v1alpha1

package v1alpha1

// WorkspaceParameters defines the desired state of Workspace
#WorkspaceParameters: {
	// Region is which region the Workspace will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// An optional user-assigned alias for this workspace. This alias is for user
	// reference and does not need to be unique.
	alias?: null | string @go(Alias,*string)

	// Optional, user-provided tags for this workspace.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	#CustomWorkspaceParameters
}

// WorkspaceSpec defines the desired state of Workspace
#WorkspaceSpec: {
	forProvider: #WorkspaceParameters @go(ForProvider)
}

// WorkspaceObservation defines the observed state of Workspace
#WorkspaceObservation: {
	// The ARN of the workspace that was just created.
	arn?: null | string @go(ARN,*string)

	// Prometheus endpoint URI.
	prometheusEndpoint?: null | string @go(PrometheusEndpoint,*string)

	// The status of the workspace that was just created (usually CREATING).
	status?: null | #WorkspaceStatus_SDK @go(Status,*WorkspaceStatus_SDK)

	// The generated ID of the workspace that was just created.
	workspaceID?: null | string @go(WorkspaceID,*string)
}

// WorkspaceStatus defines the observed state of Workspace.
#WorkspaceStatus: {
	atProvider?: #WorkspaceObservation @go(AtProvider)
}

// Workspace is the Schema for the Workspaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Workspace: {
	spec:    #WorkspaceSpec   @go(Spec)
	status?: #WorkspaceStatus @go(Status)
}

// WorkspaceList contains a list of Workspaces
#WorkspaceList: {
	items: [...#Workspace] @go(Items,[]Workspace)
}
