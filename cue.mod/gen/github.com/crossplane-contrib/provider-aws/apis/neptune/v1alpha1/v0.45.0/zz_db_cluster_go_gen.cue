// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/neptune/v1alpha1

package v1alpha1

// DBClusterParameters defines the desired state of DBCluster
#DBClusterParameters: {
	// Region is which region the DBCluster will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// A list of EC2 Availability Zones that instances in the DB cluster can be
	// created in.
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)

	// The number of days for which automated backups are retained. You must specify
	// a minimum value of 1.
	//
	// Default: 1
	//
	// Constraints:
	//
	//    * Must be a value from 1 to 35
	backupRetentionPeriod?: null | int64 @go(BackupRetentionPeriod,*int64)

	// (Not supported by Neptune)
	characterSetName?: null | string @go(CharacterSetName,*string)

	// If set to true, tags are copied to any snapshot of the DB cluster that is
	// created.
	copyTagsToSnapshot?: null | bool @go(CopyTagsToSnapshot,*bool)

	// The name of the DB cluster parameter group to associate with this DB cluster.
	// If this argument is omitted, the default is used.
	//
	// Constraints:
	//
	//    * If supplied, must match the name of an existing DBClusterParameterGroup.
	dbClusterParameterGroupName?: null | string @go(DBClusterParameterGroupName,*string)

	// A DB subnet group to associate with this DB cluster.
	//
	// Constraints: Must match the name of an existing DBSubnetGroup. Must not be
	// default.
	//
	// Example: mySubnetgroup
	dbSubnetGroupName?: null | string @go(DBSubnetGroupName,*string)

	// The name for your database of up to 64 alpha-numeric characters. If you do
	// not provide a name, Amazon Neptune will not create a database in the DB cluster
	// you are creating.
	databaseName?: null | string @go(DatabaseName,*string)

	// A value that indicates whether the DB cluster has deletion protection enabled.
	// The database can't be deleted when deletion protection is enabled. By default,
	// deletion protection is enabled.
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// DestinationRegion is used for presigning the request to a given region.
	destinationRegion?: null | string @go(DestinationRegion,*string)

	// The list of log types that need to be enabled for exporting to CloudWatch
	// Logs.
	enableCloudwatchLogsExports?: [...null | string] @go(EnableCloudwatchLogsExports,[]*string)

	// If set to true, enables Amazon Identity and Access Management (IAM) authentication
	// for the entire DB cluster (this cannot be set at an instance level).
	//
	// Default: false.
	enableIAMDatabaseAuthentication?: null | bool @go(EnableIAMDatabaseAuthentication,*bool)

	// The name of the database engine to be used for this DB cluster.
	//
	// Valid Values: neptune
	// +kubebuilder:validation:Required
	engine?: null | string @go(Engine,*string)

	// The version number of the database engine to use for the new DB cluster.
	//
	// Example: 1.0.2.1
	engineVersion?: null | string @go(EngineVersion,*string)

	// The ID of the Neptune global database to which this new DB cluster should
	// be added.
	globalClusterIdentifier?: null | string @go(GlobalClusterIdentifier,*string)

	// The Amazon KMS key identifier for an encrypted DB cluster.
	//
	// The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption
	// key. If you are creating a DB cluster with the same Amazon account that owns
	// the KMS encryption key used to encrypt the new DB cluster, then you can use
	// the KMS key alias instead of the ARN for the KMS encryption key.
	//
	// If an encryption key is not specified in KmsKeyId:
	//
	//    * If ReplicationSourceIdentifier identifies an encrypted source, then
	//    Amazon Neptune will use the encryption key used to encrypt the source.
	//    Otherwise, Amazon Neptune will use your default encryption key.
	//
	//    * If the StorageEncrypted parameter is true and ReplicationSourceIdentifier
	//    is not specified, then Amazon Neptune will use your default encryption
	//    key.
	//
	// Amazon KMS creates the default encryption key for your Amazon account. Your
	// Amazon account has a different default encryption key for each Amazon Region.
	//
	// If you create a Read Replica of an encrypted DB cluster in another Amazon
	// Region, you must set KmsKeyId to a KMS key ID that is valid in the destination
	// Amazon Region. This key is used to encrypt the Read Replica in that Amazon
	// Region.
	kmsKeyID?: null | string @go(KMSKeyID,*string)

	// Not supported by Neptune.
	masterUserPassword?: null | string @go(MasterUserPassword,*string)

	// Not supported by Neptune.
	masterUsername?: null | string @go(MasterUsername,*string)

	// (Not supported by Neptune)
	optionGroupName?: null | string @go(OptionGroupName,*string)

	// The port number on which the instances in the DB cluster accept connections.
	//
	// Default: 8182
	port?: null | int64 @go(Port,*int64)

	// This parameter is not currently supported.
	preSignedURL?: null | string @go(PreSignedURL,*string)

	// The daily time range during which automated backups are created if automated
	// backups are enabled using the BackupRetentionPeriod parameter.
	//
	// The default is a 30-minute window selected at random from an 8-hour block
	// of time for each Amazon Region. To see the time blocks available, see Adjusting
	// the Preferred Maintenance Window (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html)
	// in the Amazon Neptune User Guide.
	//
	// Constraints:
	//
	//    * Must be in the format hh24:mi-hh24:mi.
	//
	//    * Must be in Universal Coordinated Time (UTC).
	//
	//    * Must not conflict with the preferred maintenance window.
	//
	//    * Must be at least 30 minutes.
	preferredBackupWindow?: null | string @go(PreferredBackupWindow,*string)

	// The weekly time range during which system maintenance can occur, in Universal
	// Coordinated Time (UTC).
	//
	// Format: ddd:hh24:mi-ddd:hh24:mi
	//
	// The default is a 30-minute window selected at random from an 8-hour block
	// of time for each Amazon Region, occurring on a random day of the week. To
	// see the time blocks available, see Adjusting the Preferred Maintenance Window
	// (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html)
	// in the Amazon Neptune User Guide.
	//
	// Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
	//
	// Constraints: Minimum 30-minute window.
	preferredMaintenanceWindow?: null | string @go(PreferredMaintenanceWindow,*string)

	// The Amazon Resource Name (ARN) of the source DB instance or DB cluster if
	// this DB cluster is created as a Read Replica.
	replicationSourceIdentifier?:      null | string                            @go(ReplicationSourceIdentifier,*string)
	serverlessV2ScalingConfiguration?: null | #ServerlessV2ScalingConfiguration @go(ServerlessV2ScalingConfiguration,*ServerlessV2ScalingConfiguration)

	// SourceRegion is the source region where the resource exists. This is not
	// sent over the wire and is only used for presigning. This value should always
	// have the same region as the source ARN.
	sourceRegion?: null | string @go(SourceRegion,*string)

	// Specifies whether the DB cluster is encrypted.
	storageEncrypted?: null | bool @go(StorageEncrypted,*bool)

	// The tags to assign to the new DB cluster.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	// A list of EC2 VPC security groups to associate with this DB cluster.
	vpcSecurityGroupIDs?: [...null | string] @go(VPCSecurityGroupIDs,[]*string)

	#CustomDBClusterParameters
}

// DBClusterSpec defines the desired state of DBCluster
#DBClusterSpec: {
	forProvider: #DBClusterParameters @go(ForProvider)
}

// DBClusterObservation defines the observed state of DBCluster
#DBClusterObservation: {
	// AllocatedStorage always returns 1, because Neptune DB cluster storage size
	// is not fixed, but instead automatically adjusts as needed.
	allocatedStorage?: null | int64 @go(AllocatedStorage,*int64)

	// Provides a list of the Amazon Identity and Access Management (IAM) roles
	// that are associated with the DB cluster. IAM roles that are associated with
	// a DB cluster grant permission for the DB cluster to access other Amazon services
	// on your behalf.
	associatedRoles?: [...null | #DBClusterRole] @go(AssociatedRoles,[]*DBClusterRole)

	// Identifies the clone group to which the DB cluster is associated.
	cloneGroupID?: null | string @go(CloneGroupID,*string)

	// If set to true, the DB cluster can be cloned across accounts.
	crossAccountClone?: null | bool @go(CrossAccountClone,*bool)

	// The Amazon Resource Name (ARN) for the DB cluster.
	dbClusterARN?: null | string @go(DBClusterARN,*string)

	// Contains a user-supplied DB cluster identifier. This identifier is the unique
	// key that identifies a DB cluster.
	dbClusterIdentifier?: null | string @go(DBClusterIdentifier,*string)

	// Provides the list of instances that make up the DB cluster.
	dbClusterMembers?: [...null | #DBClusterMember] @go(DBClusterMembers,[]*DBClusterMember)

	// Not supported by Neptune.
	dbClusterOptionGroupMemberships?: [...null | #DBClusterOptionGroupStatus] @go(DBClusterOptionGroupMemberships,[]*DBClusterOptionGroupStatus)

	// Specifies the name of the DB cluster parameter group for the DB cluster.
	dbClusterParameterGroup?: null | string @go(DBClusterParameterGroup,*string)

	// Specifies information on the subnet group associated with the DB cluster,
	// including the name, description, and subnets in the subnet group.
	dbSubnetGroup?: null | string @go(DBSubnetGroup,*string)

	// The Amazon Region-unique, immutable identifier for the DB cluster. This identifier
	// is found in Amazon CloudTrail log entries whenever the Amazon KMS key for
	// the DB cluster is accessed.
	dbClusterResourceID?: null | string @go(DBClusterResourceID,*string)

	// A list of log types that this DB cluster is configured to export to CloudWatch
	// Logs.
	enabledCloudwatchLogsExports?: [...null | string] @go(EnabledCloudwatchLogsExports,[]*string)

	// Specifies the connection endpoint for the primary instance of the DB cluster.
	endpoint?: null | string @go(Endpoint,*string)

	// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
	hostedZoneID?: null | string @go(HostedZoneID,*string)

	// True if mapping of Amazon Identity and Access Management (IAM) accounts to
	// database accounts is enabled, and otherwise false.
	iamDatabaseAuthenticationEnabled?: null | bool @go(IAMDatabaseAuthenticationEnabled,*bool)

	// Specifies whether the DB cluster has instances in multiple Availability Zones.
	multiAZ?: null | bool @go(MultiAZ,*bool)

	// This data type is used as a response element in the ModifyDBCluster operation
	// and contains changes that will be applied during the next maintenance window.
	pendingModifiedValues?: null | #ClusterPendingModifiedValues @go(PendingModifiedValues,*ClusterPendingModifiedValues)

	// Specifies the progress of the operation as a percentage.
	percentProgress?: null | string @go(PercentProgress,*string)

	// Contains one or more identifiers of the Read Replicas associated with this
	// DB cluster.
	readReplicaIdentifiers?: [...null | string] @go(ReadReplicaIdentifiers,[]*string)

	// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster
	// load-balances connections across the Read Replicas that are available in
	// a DB cluster. As clients request new connections to the reader endpoint,
	// Neptune distributes the connection requests among the Read Replicas in the
	// DB cluster. This functionality can help balance your read workload across
	// multiple Read Replicas in your DB cluster.
	//
	// If a failover occurs, and the Read Replica that you are connected to is promoted
	// to be the primary instance, your connection is dropped. To continue sending
	// your read workload to other Read Replicas in the cluster, you can then reconnect
	// to the reader endpoint.
	readerEndpoint?: null | string @go(ReaderEndpoint,*string)

	// Specifies the current state of this DB cluster.
	status?: null | string @go(Status,*string)

	// Provides a list of VPC security groups that the DB cluster belongs to.
	vpcSecurityGroups?: [...null | #VPCSecurityGroupMembership] @go(VPCSecurityGroups,[]*VPCSecurityGroupMembership)
}

// DBClusterStatus defines the observed state of DBCluster.
#DBClusterStatus: {
	atProvider?: #DBClusterObservation @go(AtProvider)
}

// DBCluster is the Schema for the DBClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DBCluster: {
	spec:    #DBClusterSpec   @go(Spec)
	status?: #DBClusterStatus @go(Status)
}

// DBClusterList contains a list of DBClusters
#DBClusterList: {
	items: [...#DBCluster] @go(Items,[]DBCluster)
}
