// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/neptune/v1alpha1

package v1alpha1

// +kubebuilder:skipversion
#AvailabilityZone: {
	name?: null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#CharacterSet: {
	characterSetDescription?: null | string @go(CharacterSetDescription,*string)
	characterSetName?:        null | string @go(CharacterSetName,*string)
}

// +kubebuilder:skipversion
#CloudwatchLogsExportConfiguration: {
	disableLogTypes?: [...null | string] @go(DisableLogTypes,[]*string)
	enableLogTypes?: [...null | string] @go(EnableLogTypes,[]*string)
}

// +kubebuilder:skipversion
#DBClusterEndpoint: {
	customEndpointType?:                  null | string @go(CustomEndpointType,*string)
	dbClusterEndpointARN?:                null | string @go(DBClusterEndpointARN,*string)
	dbClusterEndpointIdentifier?:         null | string @go(DBClusterEndpointIdentifier,*string)
	dbClusterEndpointResourceIdentifier?: null | string @go(DBClusterEndpointResourceIdentifier,*string)
	dbClusterIdentifier?:                 null | string @go(DBClusterIdentifier,*string)
	endpoint?:                            null | string @go(Endpoint,*string)
	endpointType?:                        null | string @go(EndpointType,*string)
	status?:                              null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#DBClusterMember: {
	dbClusterParameterGroupStatus?: null | string @go(DBClusterParameterGroupStatus,*string)
	dbInstanceIdentifier?:          null | string @go(DBInstanceIdentifier,*string)
	isClusterWriter?:               null | bool   @go(IsClusterWriter,*bool)
	promotionTier?:                 null | int64  @go(PromotionTier,*int64)
}

// +kubebuilder:skipversion
#DBClusterOptionGroupStatus: {
	dbClusterOptionGroupName?: null | string @go(DBClusterOptionGroupName,*string)
	status?:                   null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#DBClusterParameterGroup: {
	dbClusterParameterGroupARN?:  null | string @go(DBClusterParameterGroupARN,*string)
	dbClusterParameterGroupName?: null | string @go(DBClusterParameterGroupName,*string)
	dbParameterGroupFamily?:      null | string @go(DBParameterGroupFamily,*string)
	description?:                 null | string @go(Description,*string)
}

// +kubebuilder:skipversion
#DBClusterRole: {
	featureName?: null | string @go(FeatureName,*string)
	roleARN?:     null | string @go(RoleARN,*string)
	status?:      null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#DBClusterSnapshot: {
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)
	dbClusterIdentifier?:              null | string @go(DBClusterIdentifier,*string)
	dbClusterSnapshotARN?:             null | string @go(DBClusterSnapshotARN,*string)
	dbClusterSnapshotIdentifier?:      null | string @go(DBClusterSnapshotIdentifier,*string)
	engine?:                           null | string @go(Engine,*string)
	engineVersion?:                    null | string @go(EngineVersion,*string)
	iamDatabaseAuthenticationEnabled?: null | bool   @go(IAMDatabaseAuthenticationEnabled,*bool)
	kmsKeyID?:                         null | string @go(KMSKeyID,*string)
	licenseModel?:                     null | string @go(LicenseModel,*string)
	masterUsername?:                   null | string @go(MasterUsername,*string)
	snapshotType?:                     null | string @go(SnapshotType,*string)
	sourceDBClusterSnapshotARN?:       null | string @go(SourceDBClusterSnapshotARN,*string)
	status?:                           null | string @go(Status,*string)
	storageEncrypted?:                 null | bool   @go(StorageEncrypted,*bool)
	vpcID?:                            null | string @go(VPCID,*string)
}

// +kubebuilder:skipversion
#DBClusterSnapshotAttribute: {
	attributeName?: null | string @go(AttributeName,*string)
}

// +kubebuilder:skipversion
#DBClusterSnapshotAttributesResult: {
	dbClusterSnapshotIdentifier?: null | string @go(DBClusterSnapshotIdentifier,*string)
}

// +kubebuilder:skipversion
#DBCluster_SDK: {
	allocatedStorage?: null | int64 @go(AllocatedStorage,*int64)
	associatedRoles?: [...null | #DBClusterRole] @go(AssociatedRoles,[]*DBClusterRole)
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)
	backupRetentionPeriod?: null | int64  @go(BackupRetentionPeriod,*int64)
	characterSetName?:      null | string @go(CharacterSetName,*string)
	cloneGroupID?:          null | string @go(CloneGroupID,*string)
	copyTagsToSnapshot?:    null | bool   @go(CopyTagsToSnapshot,*bool)
	crossAccountClone?:     null | bool   @go(CrossAccountClone,*bool)
	dbClusterARN?:          null | string @go(DBClusterARN,*string)
	dbClusterIdentifier?:   null | string @go(DBClusterIdentifier,*string)
	dbClusterMembers?: [...null | #DBClusterMember] @go(DBClusterMembers,[]*DBClusterMember)
	dbClusterOptionGroupMemberships?: [...null | #DBClusterOptionGroupStatus] @go(DBClusterOptionGroupMemberships,[]*DBClusterOptionGroupStatus)
	dbClusterParameterGroup?: null | string @go(DBClusterParameterGroup,*string)
	dbSubnetGroup?:           null | string @go(DBSubnetGroup,*string)
	databaseName?:            null | string @go(DatabaseName,*string)
	dbClusterResourceID?:     null | string @go(DBClusterResourceID,*string)
	deletionProtection?:      null | bool   @go(DeletionProtection,*bool)
	enabledCloudwatchLogsExports?: [...null | string] @go(EnabledCloudwatchLogsExports,[]*string)
	endpoint?:                         null | string @go(Endpoint,*string)
	engine?:                           null | string @go(Engine,*string)
	engineVersion?:                    null | string @go(EngineVersion,*string)
	hostedZoneID?:                     null | string @go(HostedZoneID,*string)
	iamDatabaseAuthenticationEnabled?: null | bool   @go(IAMDatabaseAuthenticationEnabled,*bool)
	kmsKeyID?:                         null | string @go(KMSKeyID,*string)
	masterUsername?:                   null | string @go(MasterUsername,*string)
	multiAZ?:                          null | bool   @go(MultiAZ,*bool)
	percentProgress?:                  null | string @go(PercentProgress,*string)
	port?:                             null | int64  @go(Port,*int64)
	preferredBackupWindow?:            null | string @go(PreferredBackupWindow,*string)
	preferredMaintenanceWindow?:       null | string @go(PreferredMaintenanceWindow,*string)
	readReplicaIdentifiers?: [...null | string] @go(ReadReplicaIdentifiers,[]*string)
	readerEndpoint?:              null | string @go(ReaderEndpoint,*string)
	replicationSourceIdentifier?: null | string @go(ReplicationSourceIdentifier,*string)

	// Shows the scaling configuration for a Neptune Serverless DB cluster.
	//
	// For more information, see Using Amazon Neptune Serverless (https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-using.html)
	// in the Amazon Neptune User Guide.
	serverlessV2ScalingConfiguration?: null | #ServerlessV2ScalingConfigurationInfo @go(ServerlessV2ScalingConfiguration,*ServerlessV2ScalingConfigurationInfo)
	status?:                           null | string                                @go(Status,*string)
	storageEncrypted?:                 null | bool                                  @go(StorageEncrypted,*bool)
	vpcSecurityGroups?: [...null | #VPCSecurityGroupMembership] @go(VPCSecurityGroups,[]*VPCSecurityGroupMembership)
}

// +kubebuilder:skipversion
#DBEngineVersion: {
	dbEngineDescription?:        null | string @go(DBEngineDescription,*string)
	dbEngineVersionDescription?: null | string @go(DBEngineVersionDescription,*string)
	dbParameterGroupFamily?:     null | string @go(DBParameterGroupFamily,*string)
	engine?:                     null | string @go(Engine,*string)
	engineVersion?:              null | string @go(EngineVersion,*string)
	exportableLogTypes?: [...null | string] @go(ExportableLogTypes,[]*string)
	supportsGlobalDatabases?:            null | bool @go(SupportsGlobalDatabases,*bool)
	supportsLogExportsToCloudwatchLogs?: null | bool @go(SupportsLogExportsToCloudwatchLogs,*bool)
	supportsReadReplica?:                null | bool @go(SupportsReadReplica,*bool)
}

// +kubebuilder:skipversion
#DBInstance: {
	autoMinorVersionUpgrade?: null | bool   @go(AutoMinorVersionUpgrade,*bool)
	availabilityZone?:        null | string @go(AvailabilityZone,*string)
	caCertificateIdentifier?: null | string @go(CACertificateIdentifier,*string)
	characterSetName?:        null | string @go(CharacterSetName,*string)
	copyTagsToSnapshot?:      null | bool   @go(CopyTagsToSnapshot,*bool)
	dbClusterIdentifier?:     null | string @go(DBClusterIdentifier,*string)
	dbInstanceARN?:           null | string @go(DBInstanceARN,*string)
	dbInstanceClass?:         null | string @go(DBInstanceClass,*string)
	dbInstanceIdentifier?:    null | string @go(DBInstanceIdentifier,*string)
	dbInstanceStatus?:        null | string @go(DBInstanceStatus,*string)
	dbName?:                  null | string @go(DBName,*string)
	dbiResourceID?:           null | string @go(DBIResourceID,*string)
	deletionProtection?:      null | bool   @go(DeletionProtection,*bool)
	enabledCloudwatchLogsExports?: [...null | string] @go(EnabledCloudwatchLogsExports,[]*string)
	engine?:                                null | string @go(Engine,*string)
	engineVersion?:                         null | string @go(EngineVersion,*string)
	enhancedMonitoringResourceARN?:         null | string @go(EnhancedMonitoringResourceARN,*string)
	iamDatabaseAuthenticationEnabled?:      null | bool   @go(IAMDatabaseAuthenticationEnabled,*bool)
	iops?:                                  null | int64  @go(IOPS,*int64)
	kmsKeyID?:                              null | string @go(KMSKeyID,*string)
	licenseModel?:                          null | string @go(LicenseModel,*string)
	masterUsername?:                        null | string @go(MasterUsername,*string)
	monitoringInterval?:                    null | int64  @go(MonitoringInterval,*int64)
	monitoringRoleARN?:                     null | string @go(MonitoringRoleARN,*string)
	multiAZ?:                               null | bool   @go(MultiAZ,*bool)
	performanceInsightsEnabled?:            null | bool   @go(PerformanceInsightsEnabled,*bool)
	performanceInsightsKMSKeyID?:           null | string @go(PerformanceInsightsKMSKeyID,*string)
	preferredBackupWindow?:                 null | string @go(PreferredBackupWindow,*string)
	preferredMaintenanceWindow?:            null | string @go(PreferredMaintenanceWindow,*string)
	promotionTier?:                         null | int64  @go(PromotionTier,*int64)
	publiclyAccessible?:                    null | bool   @go(PubliclyAccessible,*bool)
	readReplicaSourceDBInstanceIdentifier?: null | string @go(ReadReplicaSourceDBInstanceIdentifier,*string)
	secondaryAvailabilityZone?:             null | string @go(SecondaryAvailabilityZone,*string)
	storageEncrypted?:                      null | bool   @go(StorageEncrypted,*bool)
	storageType?:                           null | string @go(StorageType,*string)
	tdeCredentialARN?:                      null | string @go(TDECredentialARN,*string)
	timezone?:                              null | string @go(Timezone,*string)
	vpcSecurityGroups?: [...null | #VPCSecurityGroupMembership] @go(VPCSecurityGroups,[]*VPCSecurityGroupMembership)
}

// +kubebuilder:skipversion
#DBInstanceStatusInfo: {
	message?:    null | string @go(Message,*string)
	normal?:     null | bool   @go(Normal,*bool)
	status?:     null | string @go(Status,*string)
	statusType?: null | string @go(StatusType,*string)
}

// +kubebuilder:skipversion
#DBParameterGroup: {
	dbParameterGroupARN?:    null | string @go(DBParameterGroupARN,*string)
	dbParameterGroupFamily?: null | string @go(DBParameterGroupFamily,*string)
	dbParameterGroupName?:   null | string @go(DBParameterGroupName,*string)
	description?:            null | string @go(Description,*string)
}

// +kubebuilder:skipversion
#DBParameterGroupStatus: {
	dbParameterGroupName?: null | string @go(DBParameterGroupName,*string)
	parameterApplyStatus?: null | string @go(ParameterApplyStatus,*string)
}

// +kubebuilder:skipversion
#DBSecurityGroupMembership: {
	dbSecurityGroupName?: null | string @go(DBSecurityGroupName,*string)
	status?:              null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#DBSubnetGroup: {
	dbSubnetGroupARN?:         null | string @go(DBSubnetGroupARN,*string)
	dbSubnetGroupDescription?: null | string @go(DBSubnetGroupDescription,*string)
	dbSubnetGroupName?:        null | string @go(DBSubnetGroupName,*string)
	subnetGroupStatus?:        null | string @go(SubnetGroupStatus,*string)
	vpcID?:                    null | string @go(VPCID,*string)
}

// +kubebuilder:skipversion
#DomainMembership: {
	domain?:      null | string @go(Domain,*string)
	fQDN?:        null | string @go(FQDN,*string)
	iamRoleName?: null | string @go(IAMRoleName,*string)
	status?:      null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#Endpoint: {
	address?:      null | string @go(Address,*string)
	hostedZoneID?: null | string @go(HostedZoneID,*string)
}

// +kubebuilder:skipversion
#EngineDefaults: {
	dbParameterGroupFamily?: null | string @go(DBParameterGroupFamily,*string)
	marker?:                 null | string @go(Marker,*string)
}

// +kubebuilder:skipversion
#Event: {
	message?:          null | string @go(Message,*string)
	sourceARN?:        null | string @go(SourceARN,*string)
	sourceIdentifier?: null | string @go(SourceIdentifier,*string)
}

// +kubebuilder:skipversion
#EventCategoriesMap: {
	sourceType?: null | string @go(SourceType,*string)
}

// +kubebuilder:skipversion
#EventSubscription: {
	custSubscriptionID?:       null | string @go(CustSubscriptionID,*string)
	customerAWSID?:            null | string @go(CustomerAWSID,*string)
	enabled?:                  null | bool   @go(Enabled,*bool)
	eventSubscriptionARN?:     null | string @go(EventSubscriptionARN,*string)
	snsTopicARN?:              null | string @go(SNSTopicARN,*string)
	sourceType?:               null | string @go(SourceType,*string)
	status?:                   null | string @go(Status,*string)
	subscriptionCreationTime?: null | string @go(SubscriptionCreationTime,*string)
}

// +kubebuilder:skipversion
#Filter: {
	name?: null | string @go(Name,*string)
	values?: [...null | string] @go(Values,[]*string)
}

// +kubebuilder:skipversion
#GlobalCluster: {
	deletionProtection?:      null | bool   @go(DeletionProtection,*bool)
	engine?:                  null | string @go(Engine,*string)
	engineVersion?:           null | string @go(EngineVersion,*string)
	globalClusterARN?:        null | string @go(GlobalClusterARN,*string)
	globalClusterIdentifier?: null | string @go(GlobalClusterIdentifier,*string)
	globalClusterResourceID?: null | string @go(GlobalClusterResourceID,*string)
	status?:                  null | string @go(Status,*string)
	storageEncrypted?:        null | bool   @go(StorageEncrypted,*bool)
}

// +kubebuilder:skipversion
#GlobalClusterMember: {
	dbClusterARN?: null | string @go(DBClusterARN,*string)
	isWriter?:     null | bool   @go(IsWriter,*bool)
}

// +kubebuilder:skipversion
#OptionGroupMembership: {
	optionGroupName?: null | string @go(OptionGroupName,*string)
	status?:          null | string @go(Status,*string)
}

// +kubebuilder:skipversion
#OrderableDBInstanceOption: {
	dbInstanceClass?:                   null | string  @go(DBInstanceClass,*string)
	engine?:                            null | string  @go(Engine,*string)
	engineVersion?:                     null | string  @go(EngineVersion,*string)
	licenseModel?:                      null | string  @go(LicenseModel,*string)
	maxIOPSPerDBInstance?:              null | int64   @go(MaxIOPSPerDBInstance,*int64)
	maxIOPSPerGib?:                     null | float64 @go(MaxIOPSPerGib,*float64)
	maxStorageSize?:                    null | int64   @go(MaxStorageSize,*int64)
	minIOPSPerDBInstance?:              null | int64   @go(MinIOPSPerDBInstance,*int64)
	minIOPSPerGib?:                     null | float64 @go(MinIOPSPerGib,*float64)
	minStorageSize?:                    null | int64   @go(MinStorageSize,*int64)
	multiAZCapable?:                    null | bool    @go(MultiAZCapable,*bool)
	readReplicaCapable?:                null | bool    @go(ReadReplicaCapable,*bool)
	storageType?:                       null | string  @go(StorageType,*string)
	supportsEnhancedMonitoring?:        null | bool    @go(SupportsEnhancedMonitoring,*bool)
	supportsGlobalDatabases?:           null | bool    @go(SupportsGlobalDatabases,*bool)
	supportsIAMDatabaseAuthentication?: null | bool    @go(SupportsIAMDatabaseAuthentication,*bool)
	supportsIOPS?:                      null | bool    @go(SupportsIOPS,*bool)
	supportsPerformanceInsights?:       null | bool    @go(SupportsPerformanceInsights,*bool)
	supportsStorageEncryption?:         null | bool    @go(SupportsStorageEncryption,*bool)
	vpc?:                               null | bool    @go(VPC,*bool)
}

// +kubebuilder:skipversion
#Parameter: {
	allowedValues?:        null | string @go(AllowedValues,*string)
	applyType?:            null | string @go(ApplyType,*string)
	dataType?:             null | string @go(DataType,*string)
	description?:          null | string @go(Description,*string)
	isModifiable?:         null | bool   @go(IsModifiable,*bool)
	minimumEngineVersion?: null | string @go(MinimumEngineVersion,*string)
	parameterName?:        null | string @go(ParameterName,*string)
	parameterValue?:       null | string @go(ParameterValue,*string)
	source?:               null | string @go(Source,*string)
}

// +kubebuilder:skipversion
#PendingCloudwatchLogsExports: {
	logTypesToDisable?: [...null | string] @go(LogTypesToDisable,[]*string)
	logTypesToEnable?: [...null | string] @go(LogTypesToEnable,[]*string)
}

// +kubebuilder:skipversion
#PendingMaintenanceAction: {
	action?:      null | string @go(Action,*string)
	description?: null | string @go(Description,*string)
	optInStatus?: null | string @go(OptInStatus,*string)
}

// +kubebuilder:skipversion
#PendingModifiedValues: {
	allocatedStorage?:        null | int64  @go(AllocatedStorage,*int64)
	backupRetentionPeriod?:   null | int64  @go(BackupRetentionPeriod,*int64)
	caCertificateIdentifier?: null | string @go(CACertificateIdentifier,*string)
	dbInstanceClass?:         null | string @go(DBInstanceClass,*string)
	dbInstanceIdentifier?:    null | string @go(DBInstanceIdentifier,*string)
	dbSubnetGroupName?:       null | string @go(DBSubnetGroupName,*string)
	engineVersion?:           null | string @go(EngineVersion,*string)
	iops?:                    null | int64  @go(IOPS,*int64)
	licenseModel?:            null | string @go(LicenseModel,*string)
	masterUserPassword?:      null | string @go(MasterUserPassword,*string)
	multiAZ?:                 null | bool   @go(MultiAZ,*bool)
	port?:                    null | int64  @go(Port,*int64)
	storageType?:             null | string @go(StorageType,*string)
}

// +kubebuilder:skipversion
#Range: {
	step?: null | int64 @go(Step,*int64)
}

// +kubebuilder:skipversion
#ResourcePendingMaintenanceActions: {
	resourceIdentifier?: null | string @go(ResourceIdentifier,*string)
}

// +kubebuilder:skipversion
#ServerlessV2ScalingConfiguration: {
	maxCapacity?: null | float64 @go(MaxCapacity,*float64)
	minCapacity?: null | float64 @go(MinCapacity,*float64)
}

// +kubebuilder:skipversion
#ServerlessV2ScalingConfigurationInfo: {
	maxCapacity?: null | float64 @go(MaxCapacity,*float64)
	minCapacity?: null | float64 @go(MinCapacity,*float64)
}

// +kubebuilder:skipversion
#Subnet: {
	subnetIdentifier?: null | string @go(SubnetIdentifier,*string)
	subnetStatus?:     null | string @go(SubnetStatus,*string)
}

// +kubebuilder:skipversion
#Tag: {
	key?:   null | string @go(Key,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#Timezone: {
	timezoneName?: null | string @go(TimezoneName,*string)
}

// +kubebuilder:skipversion
#UpgradeTarget: {
	autoUpgrade?:             null | bool   @go(AutoUpgrade,*bool)
	description?:             null | string @go(Description,*string)
	engine?:                  null | string @go(Engine,*string)
	engineVersion?:           null | string @go(EngineVersion,*string)
	isMajorVersionUpgrade?:   null | bool   @go(IsMajorVersionUpgrade,*bool)
	supportsGlobalDatabases?: null | bool   @go(SupportsGlobalDatabases,*bool)
}

// +kubebuilder:skipversion
#VPCSecurityGroupMembership: {
	status?:             null | string @go(Status,*string)
	vpcSecurityGroupID?: null | string @go(VPCSecurityGroupID,*string)
}

// +kubebuilder:skipversion
#ValidStorageOptions: {
	storageType?: null | string @go(StorageType,*string)
}
