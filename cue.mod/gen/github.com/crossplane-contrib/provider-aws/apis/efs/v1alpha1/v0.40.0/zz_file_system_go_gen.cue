// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/efs/v1alpha1

package v1alpha1

// FileSystemParameters defines the desired state of FileSystem
#FileSystemParameters: {
	// Region is which region the FileSystem will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// Used to create a file system that uses One Zone storage classes. It specifies
	// the Amazon Web Services Availability Zone in which to create the file system.
	// Use the format us-east-1a to specify the Availability Zone. For more information
	// about One Zone storage classes, see Using EFS storage classes (https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html)
	// in the Amazon EFS User Guide.
	//
	// One Zone storage classes are not available in all Availability Zones in Amazon
	// Web Services Regions where Amazon EFS is available.
	availabilityZoneName?: null | string @go(AvailabilityZoneName,*string)

	// Specifies whether automatic backups are enabled on the file system that you
	// are creating. Set the value to true to enable automatic backups. If you are
	// creating a file system that uses One Zone storage classes, automatic backups
	// are enabled by default. For more information, see Automatic backups (https://docs.aws.amazon.com/efs/latest/ug/awsbackup.html#automatic-backups)
	// in the Amazon EFS User Guide.
	//
	// Default is false. However, if you specify an AvailabilityZoneName, the default
	// is true.
	//
	// Backup is not available in all Amazon Web Services Regions where Amazon EFS
	// is available.
	backup?: null | bool @go(Backup,*bool)

	// A Boolean value that, if true, creates an encrypted file system. When creating
	// an encrypted file system, you have the option of specifying an existing Key
	// Management Service key (KMS key). If you don't specify a KMS key, then the
	// default KMS key for Amazon EFS, /aws/elasticfilesystem, is used to protect
	// the encrypted file system.
	encrypted?: null | bool @go(Encrypted,*bool)

	// The ID of the KMS key that you want to use to protect the encrypted file
	// system. This parameter is required only if you want to use a non-default
	// KMS key. If this parameter is not specified, the default KMS key for Amazon
	// EFS is used. You can specify a KMS key ID using the following formats:
	//
	//    * Key ID - A unique identifier of the key, for example 1234abcd-12ab-34cd-56ef-1234567890ab.
	//
	//    * ARN - An Amazon Resource Name (ARN) for the key, for example arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab.
	//
	//    * Key alias - A previously created display name for a key, for example
	//    alias/projectKey1.
	//
	//    * Key alias ARN - An ARN for a key alias, for example arn:aws:kms:us-west-2:444455556666:alias/projectKey1.
	//
	// If you use KmsKeyId, you must set the CreateFileSystemRequest$Encrypted parameter
	// to true.
	//
	// EFS accepts only symmetric KMS keys. You cannot use asymmetric KMS keys with
	// Amazon EFS file systems.
	kmsKeyID?: null | string @go(KMSKeyID,*string)

	// The performance mode of the file system. We recommend generalPurpose performance
	// mode for most file systems. File systems using the maxIO performance mode
	// can scale to higher levels of aggregate throughput and operations per second
	// with a tradeoff of slightly higher latencies for most file operations. The
	// performance mode can't be changed after the file system has been created.
	//
	// The maxIO mode is not supported on file systems using One Zone storage classes.
	performanceMode?: null | string @go(PerformanceMode,*string)

	// Use to create one or more tags associated with the file system. Each tag
	// is a user-defined key-value pair. Name your file system on creation by including
	// a "Key":"Name","Value":"{value}" key-value pair. Each key must be unique.
	// For more information, see Tagging Amazon Web Services resources (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
	// in the Amazon Web Services General Reference Guide.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	// Specifies the throughput mode for the file system. The mode can be bursting,
	// provisioned, or elastic. If you set ThroughputMode to provisioned, you must
	// also set a value for ProvisionedThroughputInMibps. After you create the file
	// system, you can decrease your file system's throughput in Provisioned Throughput
	// mode or change between the throughput modes, with certain time restrictions.
	// For more information, see Specifying throughput with provisioned mode (https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput)
	// in the Amazon EFS User Guide.
	//
	// Default is bursting.
	throughputMode?: null | string @go(ThroughputMode,*string)

	#CustomFileSystemParameters
}

// FileSystemSpec defines the desired state of FileSystem
#FileSystemSpec: {
	forProvider: #FileSystemParameters @go(ForProvider)
}

// FileSystemObservation defines the observed state of FileSystem
#FileSystemObservation: {
	// The unique and consistent identifier of the Availability Zone in which the
	// file system's One Zone storage classes exist. For example, use1-az1 is an
	// Availability Zone ID for the us-east-1 Amazon Web Services Region, and it
	// has the same location in every Amazon Web Services account.
	availabilityZoneID?: null | string @go(AvailabilityZoneID,*string)

	// The opaque string specified in the request.
	creationToken?: null | string @go(CreationToken,*string)

	// The Amazon Resource Name (ARN) for the EFS file system, in the format arn:aws:elasticfilesystem:region:account-id:file-system/file-system-id
	// . Example with sample data: arn:aws:elasticfilesystem:us-west-2:1111333322228888:file-system/fs-01234567
	fileSystemARN?: null | string @go(FileSystemARN,*string)

	// The ID of the file system, assigned by Amazon EFS.
	fileSystemID?: null | string @go(FileSystemID,*string)

	// The lifecycle phase of the file system.
	lifeCycleState?: null | string @go(LifeCycleState,*string)

	// You can add tags to a file system, including a Name tag. For more information,
	// see CreateFileSystem. If the file system has a Name tag, Amazon EFS returns
	// the value in this field.
	name?: null | string @go(Name,*string)

	// The current number of mount targets that the file system has. For more information,
	// see CreateMountTarget.
	numberOfMountTargets?: null | int64 @go(NumberOfMountTargets,*int64)

	// The Amazon Web Services account that created the file system. If the file
	// system was created by an IAM user, the parent account to which the user belongs
	// is the owner.
	ownerID?: null | string @go(OwnerID,*string)

	// The latest known metered size (in bytes) of data stored in the file system,
	// in its Value field, and the time at which that size was determined in its
	// Timestamp field. The Timestamp value is the integer number of seconds since
	// 1970-01-01T00:00:00Z. The SizeInBytes value doesn't represent the size of
	// a consistent snapshot of the file system, but it is eventually consistent
	// when there are no writes to the file system. That is, SizeInBytes represents
	// actual size only if the file system is not modified for a period longer than
	// a couple of hours. Otherwise, the value is not the exact size that the file
	// system was at any point in time.
	sizeInBytes?: null | #FileSystemSize @go(SizeInBytes,*FileSystemSize)
}

// FileSystemStatus defines the observed state of FileSystem.
#FileSystemStatus: {
	atProvider?: #FileSystemObservation @go(AtProvider)
}

// FileSystem is the Schema for the FileSystems API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#FileSystem: {
	spec:    #FileSystemSpec   @go(Spec)
	status?: #FileSystemStatus @go(Status)
}

// FileSystemList contains a list of FileSystems
#FileSystemList: {
	items: [...#FileSystem] @go(Items,[]FileSystem)
}
