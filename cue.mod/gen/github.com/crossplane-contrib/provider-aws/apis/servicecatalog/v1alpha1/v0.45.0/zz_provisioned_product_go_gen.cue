// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/servicecatalog/v1alpha1

package v1alpha1

// ProvisionedProductParameters defines the desired state of ProvisionedProduct
#ProvisionedProductParameters: {
	// Region is which region the ProvisionedProduct will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The language code.
	//
	//    * jp - Japanese
	//
	//    * zh - Chinese
	acceptLanguage?: null | string @go(AcceptLanguage,*string)

	// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related
	// events.
	notificationARNs?: [...null | string] @go(NotificationARNs,[]*string)

	// The path identifier of the product. This value is optional if the product
	// has a default path, and required if the product has more than one path. To
	// list the paths for a product, use ListLaunchPaths. You must provide the name
	// or ID, but not both.
	pathID?: null | string @go(PathID,*string)

	// The name of the path. You must provide the name or ID, but not both.
	pathName?: null | string @go(PathName,*string)

	// The product identifier. You must provide the name or ID, but not both.
	productID?: null | string @go(ProductID,*string)

	// The name of the product. You must provide the name or ID, but not both.
	productName?: null | string @go(ProductName,*string)

	// The identifier of the provisioning artifact. You must provide the name or
	// ID, but not both.
	provisioningArtifactID?: null | string @go(ProvisioningArtifactID,*string)

	// The name of the provisioning artifact. You must provide the name or ID, but
	// not both.
	provisioningArtifactName?: null | string @go(ProvisioningArtifactName,*string)

	// Parameters specified by the administrator that are required for provisioning
	// the product.
	provisioningParameters?: [...null | #ProvisioningParameter] @go(ProvisioningParameters,[]*ProvisioningParameter)

	// An object that contains information about the provisioning preferences for
	// a stack set.
	provisioningPreferences?: null | #ProvisioningPreferences @go(ProvisioningPreferences,*ProvisioningPreferences)

	// One or more tags.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	#CustomProvisionedProductParameters
}

// ProvisionedProductSpec defines the desired state of ProvisionedProduct
#ProvisionedProductSpec: {
	forProvider: #ProvisionedProductParameters @go(ForProvider)
}

// ProvisionedProductObservation defines the observed state of ProvisionedProduct
#ProvisionedProductObservation: {
	// The ARN of the provisioned product.
	arn?: null | string @go(ARN,*string)

	// The product identifier. For example, prod-abcdzk7xy33qa.
	lastProductID?: null | string @go(LastProductID,*string)

	// The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.
	lastProvisioningArtifactID?: null | string @go(LastProvisioningArtifactID,*string)
	lastProvisioningParameters?: [...null | #ProvisioningParameter] @go(LastProvisioningParameters,[]*ProvisioningParameter)

	// The record identifier of the last request performed on this provisioned product
	// of the following types:
	//
	//    * ProvisionProduct
	//
	//    * UpdateProvisionedProduct
	//
	//    * ExecuteProvisionedProductPlan
	//
	//    * TerminateProvisionedProduct
	lastProvisioningRecordID?: null | string @go(LastProvisioningRecordID,*string)

	// The ARN of the launch role associated with the provisioned product.
	launchRoleARN?: null | string @go(LaunchRoleARN,*string)
	outputs?: {[string]: null | #RecordOutput} @go(Outputs,map[string]*RecordOutput)

	// The identifier of the provisioned product.
	provisionedProductID?: null | string @go(ProvisionedProductID,*string)

	// The user-friendly name of the provisioned product.
	provisionedProductName?: null | string @go(ProvisionedProductName,*string)

	// The type of provisioned product. The supported values are CFN_STACK, CFN_STACKSET,
	// TERRAFORM_OPEN_SOURCE, and TERRAFORM_CLOUD.
	provisionedProductType?: null | string @go(ProvisionedProductType,*string)

	// The errors that occurred.
	recordErrors?: [...null | #RecordError] @go(RecordErrors,[]*RecordError)

	// The identifier of the record.
	recordID?: null | string @go(RecordID,*string)

	// One or more tags.
	recordTags?: [...null | #RecordTag] @go(RecordTags,[]*RecordTag)

	// The record type.
	//
	//    * PROVISION_PRODUCT
	//
	//    * UPDATE_PROVISIONED_PRODUCT
	//
	//    * TERMINATE_PROVISIONED_PRODUCT
	recordType?: null | string @go(RecordType,*string)

	// The current status of the provisioned product.
	//
	//    * AVAILABLE - Stable state, ready to perform any operation. The most recent
	//    operation succeeded and completed.
	//
	//    * UNDER_CHANGE - Transitive state. Operations performed might not have
	//    valid results. Wait for an AVAILABLE status before performing operations.
	//
	//    * TAINTED - Stable state, ready to perform any operation. The stack has
	//    completed the requested operation but is not exactly what was requested.
	//    For example, a request to update to a new version failed and the stack
	//    rolled back to the current version.
	//
	//    * ERROR - An unexpected error occurred. The provisioned product exists
	//    but the stack is not running. For example, CloudFormation received a parameter
	//    value that was not valid and could not launch the stack.
	//
	//    * PLAN_IN_PROGRESS - Transitive state. The plan operations were performed
	//    to provision a new product, but resources have not yet been created. After
	//    reviewing the list of resources to be created, execute the plan. Wait
	//    for an AVAILABLE status before performing operations.
	status?: null | string @go(Status,*string)

	// The current status message of the provisioned product.
	statusMessage?: null | string @go(StatusMessage,*string)
}

// ProvisionedProductStatus defines the observed state of ProvisionedProduct.
#ProvisionedProductStatus: {
	atProvider?: #ProvisionedProductObservation @go(AtProvider)
}

// ProvisionedProduct is the Schema for the ProvisionedProducts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ProvisionedProduct: {
	spec:    #ProvisionedProductSpec   @go(Spec)
	status?: #ProvisionedProductStatus @go(Status)
}

// ProvisionedProductList contains a list of ProvisionedProducts
#ProvisionedProductList: {
	items: [...#ProvisionedProduct] @go(Items,[]ProvisionedProduct)
}
