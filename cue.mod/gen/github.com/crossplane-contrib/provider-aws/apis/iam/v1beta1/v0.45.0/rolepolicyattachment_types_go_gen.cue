// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/iam/v1beta1

package v1beta1

// RolePolicyAttachmentParameters define the desired state of an AWS IAM
// Role policy attachment.
#RolePolicyAttachmentParameters: {
	// PolicyARN is the Amazon Resource Name (ARN) of the IAM policy you want to
	// attach.
	// +immutable
	// +crossplane:generate:reference:type=Policy
	// +crossplane:generate:reference:extractor=PolicyARN()
	policyArn?: string @go(PolicyARN)

	// RoleName presents the name of the IAM role.
	// +immutable
	// +crossplane:generate:reference:type=Role
	roleName?: string @go(RoleName)
}

// A RolePolicyAttachmentSpec defines the desired state of an
// RolePolicyAttachment.
#RolePolicyAttachmentSpec: {
	forProvider: #RolePolicyAttachmentParameters @go(ForProvider)
}

// RolePolicyAttachmentExternalStatus keeps the state for the external resource
#RolePolicyAttachmentExternalStatus: {
	// AttachedPolicyARN is the arn for the attached policy. If nil, the policy
	// is not yet attached
	attachedPolicyArn: string @go(AttachedPolicyARN)
}

// A RolePolicyAttachmentStatus represents the observed state of an
// RolePolicyAttachment.
#RolePolicyAttachmentStatus: {
	atProvider?: #RolePolicyAttachmentExternalStatus @go(AtProvider)
}

// A RolePolicyAttachment is a managed resource that represents an AWS IAM
// Role policy attachment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="ROLENAME",type="string",JSONPath=".spec.forProvider.roleName"
// +kubebuilder:printcolumn:name="POLICYARN",type="string",JSONPath=".spec.forProvider.policyArn"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RolePolicyAttachment: {
	spec:    #RolePolicyAttachmentSpec   @go(Spec)
	status?: #RolePolicyAttachmentStatus @go(Status)
}

// RolePolicyAttachmentList contains a list of RolePolicyAttachments
#RolePolicyAttachmentList: {
	items: [...#RolePolicyAttachment] @go(Items,[]RolePolicyAttachment)
}
