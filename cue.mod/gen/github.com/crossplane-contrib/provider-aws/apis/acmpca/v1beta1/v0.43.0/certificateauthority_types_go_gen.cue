// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/acmpca/v1beta1

package v1beta1

// CertificateAuthorityParameters defines the desired state of an AWS CertificateAuthority.
#CertificateAuthorityParameters: {
	// Region is the region you'd like your CertificateAuthority to be created in.
	region: string @go(Region)

	// RevocationConfiguration to associate with the certificateAuthority.
	// +optional
	revocationConfiguration?: null | #RevocationConfiguration @go(RevocationConfiguration,*RevocationConfiguration)

	// CertificateAuthorityConfiguration to associate with the certificateAuthority.
	certificateAuthorityConfiguration: #CertificateAuthorityConfiguration @go(CertificateAuthorityConfiguration)

	// The number of days to make a CA restorable after it has been deleted
	// +optional
	permanentDeletionTimeInDays?: null | int32 @go(PermanentDeletionTimeInDays,*int32)

	// Status of the certificate authority.
	// This value cannot be configured at creation, but can be updated to set a
	// CA to ACTIVE or DISABLED.
	// +optional
	// +kubebuilder:validation:Enum=ACTIVE;DISABLED
	status?: null | string @go(Status,*string)

	// One or more resource tags to associate with the certificateAuthority.
	tags: [...#Tag] @go(Tags,[]Tag)
}

// Tag represents user-provided metadata that can be associated
#Tag: {
	// The key name that can be used to look up or retrieve the associated value.
	key: string @go(Key)

	// The value associated with this tag.
	value: string @go(Value)
}

// RevocationConfiguration is configuration of the certificate revocation list
#RevocationConfiguration: {
	// Boolean value that specifies certificate revocation
	enabled: bool @go(Enabled)

	// Name of the S3 bucket that contains the CRL
	// +optional
	s3BucketName?: null | string @go(S3BucketName,*string)

	// Alias for the CRL distribution point
	// +optional
	customCname?: null | string @go(CustomCname,*string)

	// Number of days until a certificate expires
	// +optional
	expirationInDays?: null | int32 @go(ExpirationInDays,*int32)
}

// CertificateAuthorityConfiguration is
#CertificateAuthorityConfiguration: {
	// Subject is information of Certificate Authority
	subject: #Subject @go(Subject)
}

// Subject is
#Subject: {
	// Organization legal name
	// +immutable
	organization: string @go(Organization)

	// Organization's subdivision or unit
	// +immutable
	organizationalUnit: string @go(OrganizationalUnit)

	// Two-digit code that specifies the country
	// +immutable
	country: string @go(Country)

	// State in which the subject of the certificate is located
	// +immutable
	state: string @go(State)

	// The locality such as a city or town
	// +immutable
	locality: string @go(Locality)

	// FQDN associated with the certificate subject
	// +immutable
	commonName: string @go(CommonName)

	// Disambiguating information for the certificate subject.
	// +optional
	// +immutable
	distinguishedNameQualifier?: null | string @go(DistinguishedNameQualifier,*string)

	// Typically a qualifier appended to the name of an individual
	// +optional
	// +immutable
	generationQualifier?: null | string @go(GenerationQualifier,*string)

	// Concatenation of first letter of the GivenName, Middle name and SurName.
	// +optional
	// +immutable
	initials?: null | string @go(Initials,*string)

	// First name
	// +optional
	// +immutable
	givenName?: null | string @go(GivenName,*string)

	// Shortened version of a longer GivenName
	// +optional
	// +immutable
	pseudonym?: null | string @go(Pseudonym,*string)

	// The certificate serial number.
	// +optional
	// +immutable
	serialNumber?: null | string @go(SerialNumber,*string)

	// Surname
	// +optional
	// +immutable
	surname?: null | string @go(Surname,*string)

	// Title
	// +optional
	// +immutable
	title?: null | string @go(Title,*string)
}

// CertificateAuthorityExternalStatus keeps the state of external resource
#CertificateAuthorityExternalStatus: {
	// String that contains the ARN of the issued certificate Authority
	certificateAuthorityARN?: string @go(CertificateAuthorityARN)

	// Serial of the Certificate Authority
	serial?: string @go(Serial)

	// Status is the current status of the CertificateAuthority.
	status?: string @go(Status)
}

// CertificateAuthoritySpec defines the desired state of CertificateAuthority
#CertificateAuthoritySpec: {
	forProvider: #CertificateAuthorityParameters @go(ForProvider)
}

// An CertificateAuthorityStatus represents the observed state of an CertificateAuthority manager.
#CertificateAuthorityStatus: {
	atProvider?: #CertificateAuthorityExternalStatus @go(AtProvider)
}

// CertificateAuthority is a managed resource that represents an AWS CertificateAuthority Manager.
// +kubebuilder:printcolumn:name="TYPE",type="string",JSONPath=".spec.forProvider.type"
// +kubebuilder:printcolumn:name="STATUS",type="string",JSONPath=".spec.forProvider.status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#CertificateAuthority: {
	spec:    #CertificateAuthoritySpec   @go(Spec)
	status?: #CertificateAuthorityStatus @go(Status)
}

// CertificateAuthorityList contains a list of CertificateAuthority
#CertificateAuthorityList: {
	items: [...#CertificateAuthority] @go(Items,[]CertificateAuthority)
}
