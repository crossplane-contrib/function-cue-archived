// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/batch/v1alpha1

package v1alpha1

// +kubebuilder:skipversion
#ArrayProperties: {
	size?: null | int64 @go(Size,*int64)
}

// +kubebuilder:skipversion
#ArrayPropertiesDetail: {
	index?: null | int64 @go(Index,*int64)
	size?:  null | int64 @go(Size,*int64)
}

// +kubebuilder:skipversion
#ArrayPropertiesSummary: {
	index?: null | int64 @go(Index,*int64)
	size?:  null | int64 @go(Size,*int64)
}

// +kubebuilder:skipversion
#AttemptContainerDetail: {
	containerInstanceARN?: null | string @go(ContainerInstanceARN,*string)
	exitCode?:             null | int64  @go(ExitCode,*int64)
	logStreamName?:        null | string @go(LogStreamName,*string)
	reason?:               null | string @go(Reason,*string)
	taskARN?:              null | string @go(TaskARN,*string)
}

// +kubebuilder:skipversion
#AttemptDetail: {
	statusReason?: null | string @go(StatusReason,*string)
}

// +kubebuilder:skipversion
#ComputeEnvironmentDetail: {
	computeEnvironmentARN?:  null | string @go(ComputeEnvironmentARN,*string)
	computeEnvironmentName?: null | string @go(ComputeEnvironmentName,*string)

	// An object that represents an Batch compute resource. For more information,
	// see Compute environments (https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html)
	// in the Batch User Guide.
	computeResources?:           null | #ComputeResource @go(ComputeResources,*ComputeResource)
	containerOrchestrationType?: null | string           @go(ContainerOrchestrationType,*string)
	ecsClusterARN?:              null | string           @go(ECSClusterARN,*string)

	// Configuration for the Amazon EKS cluster that supports the Batch compute
	// environment. The cluster must exist before the compute environment can be
	// created.
	eksConfiguration?: null | #EKSConfiguration @go(EKSConfiguration,*EKSConfiguration)
	serviceRole?:      null | string            @go(ServiceRole,*string)
	state?:            null | string            @go(State,*string)
	status?:           null | string            @go(Status,*string)
	statusReason?:     null | string            @go(StatusReason,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	type_?:          null | string @go(Type,*string)
	unmanagedvCPUs?: null | int64  @go(UnmanagedvCPUs,*int64)

	// Specifies the infrastructure update policy for the compute environment. For
	// more information about infrastructure updates, see Updating compute environments
	// (https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
	// in the Batch User Guide.
	updatePolicy?: null | #UpdatePolicy @go(UpdatePolicy,*UpdatePolicy)
	uuid?:         null | string        @go(UUID,*string)
}

// +kubebuilder:skipversion
#ComputeEnvironmentOrder: {
	computeEnvironment?: null | string @go(ComputeEnvironment,*string)
	order?:              null | int64  @go(Order,*int64)
}

// +kubebuilder:skipversion
#ComputeResource: {
	allocationStrategy?: null | string @go(AllocationStrategy,*string)
	bidPercentage?:      null | int64  @go(BidPercentage,*int64)
	ec2Configuration?: [...null | #EC2Configuration] @go(EC2Configuration,[]*EC2Configuration)
	ec2KeyPair?: null | string @go(EC2KeyPair,*string)
	instanceTypes?: [...null | string] @go(InstanceTypes,[]*string)

	// An object that represents a launch template that's associated with a compute
	// resource. You must specify either the launch template ID or launch template
	// name in the request, but not both.
	//
	// If security groups are specified using both the securityGroupIds parameter
	// of CreateComputeEnvironment and the launch template, the values in the securityGroupIds
	// parameter of CreateComputeEnvironment will be used.
	//
	// This object isn't applicable to jobs that are running on Fargate resources.
	launchTemplate?: null | #LaunchTemplateSpecification @go(LaunchTemplate,*LaunchTemplateSpecification)
	maxvCPUs?:       null | int64                        @go(MaxvCPUs,*int64)
	minvCPUs?:       null | int64                        @go(MinvCPUs,*int64)
	placementGroup?: null | string                       @go(PlacementGroup,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	type_?: null | string @go(Type,*string)
}

// +kubebuilder:skipversion
#ComputeResourceUpdate: {
	maxvCPUs?: null | int64 @go(MaxvCPUs,*int64)
	minvCPUs?: null | int64 @go(MinvCPUs,*int64)
}

// +kubebuilder:skipversion
#ContainerDetail: {
	command?: [...null | string] @go(Command,[]*string)
	containerInstanceARN?:   null | string @go(ContainerInstanceARN,*string)
	executionRoleARN?:       null | string @go(ExecutionRoleARN,*string)
	exitCode?:               null | int64  @go(ExitCode,*int64)
	image?:                  null | string @go(Image,*string)
	instanceType?:           null | string @go(InstanceType,*string)
	jobRoleARN?:             null | string @go(JobRoleARN,*string)
	logStreamName?:          null | string @go(LogStreamName,*string)
	memory?:                 null | int64  @go(Memory,*int64)
	privileged?:             null | bool   @go(Privileged,*bool)
	readonlyRootFilesystem?: null | bool   @go(ReadonlyRootFilesystem,*bool)
	reason?:                 null | string @go(Reason,*string)
	taskARN?:                null | string @go(TaskARN,*string)
	user?:                   null | string @go(User,*string)
	vcpus?:                  null | int64  @go(Vcpus,*int64)
}

// +kubebuilder:skipversion
#ContainerOverrides: {
	command?: [...null | string] @go(Command,[]*string)
	instanceType?: null | string @go(InstanceType,*string)
	memory?:       null | int64  @go(Memory,*int64)
	vcpus?:        null | int64  @go(Vcpus,*int64)
}

// +kubebuilder:skipversion
#ContainerProperties: {
	command?: [...null | string] @go(Command,[]*string)
	executionRoleARN?:       null | string @go(ExecutionRoleARN,*string)
	image?:                  null | string @go(Image,*string)
	instanceType?:           null | string @go(InstanceType,*string)
	jobRoleARN?:             null | string @go(JobRoleARN,*string)
	memory?:                 null | int64  @go(Memory,*int64)
	privileged?:             null | bool   @go(Privileged,*bool)
	readonlyRootFilesystem?: null | bool   @go(ReadonlyRootFilesystem,*bool)
	user?:                   null | string @go(User,*string)
	vcpus?:                  null | int64  @go(Vcpus,*int64)
}

// +kubebuilder:skipversion
#ContainerSummary: {
	exitCode?: null | int64  @go(ExitCode,*int64)
	reason?:   null | string @go(Reason,*string)
}

// +kubebuilder:skipversion
#Device: {
	containerPath?: null | string @go(ContainerPath,*string)
	hostPath?:      null | string @go(HostPath,*string)
}

// +kubebuilder:skipversion
#EC2Configuration: {
	imageIDOverride?:        null | string @go(ImageIDOverride,*string)
	imageKubernetesVersion?: null | string @go(ImageKubernetesVersion,*string)
	imageType?:              null | string @go(ImageType,*string)
}

// +kubebuilder:skipversion
#EFSAuthorizationConfig: {
	accessPointID?: null | string @go(AccessPointID,*string)
}

// +kubebuilder:skipversion
#EFSVolumeConfiguration: {
	fileSystemID?:          null | string @go(FileSystemID,*string)
	rootDirectory?:         null | string @go(RootDirectory,*string)
	transitEncryptionPort?: null | int64  @go(TransitEncryptionPort,*int64)
}

// +kubebuilder:skipversion
#EKSAttemptContainerDetail: {
	exitCode?: null | int64  @go(ExitCode,*int64)
	reason?:   null | string @go(Reason,*string)
}

// +kubebuilder:skipversion
#EKSAttemptDetail: {
	nodeName?:     null | string @go(NodeName,*string)
	podName?:      null | string @go(PodName,*string)
	statusReason?: null | string @go(StatusReason,*string)
}

// +kubebuilder:skipversion
#EKSConfiguration: {
	eksClusterARN?:       null | string @go(EKSClusterARN,*string)
	kubernetesNamespace?: null | string @go(KubernetesNamespace,*string)
}

// +kubebuilder:skipversion
#EKSContainer: {
	args?: [...null | string] @go(Args,[]*string)
	command?: [...null | string] @go(Command,[]*string)
	image?:           null | string @go(Image,*string)
	imagePullPolicy?: null | string @go(ImagePullPolicy,*string)
	name?:            null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#EKSContainerDetail: {
	args?: [...null | string] @go(Args,[]*string)
	command?: [...null | string] @go(Command,[]*string)
	exitCode?:        null | int64  @go(ExitCode,*int64)
	image?:           null | string @go(Image,*string)
	imagePullPolicy?: null | string @go(ImagePullPolicy,*string)
	name?:            null | string @go(Name,*string)
	reason?:          null | string @go(Reason,*string)
}

// +kubebuilder:skipversion
#EKSContainerEnvironmentVariable: {
	name?:  null | string @go(Name,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#EKSContainerOverride: {
	args?: [...null | string] @go(Args,[]*string)
	command?: [...null | string] @go(Command,[]*string)
	image?: null | string @go(Image,*string)
}

// +kubebuilder:skipversion
#EKSContainerSecurityContext: {
	privileged?:             null | bool @go(Privileged,*bool)
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)
	runAsNonRoot?:           null | bool @go(RunAsNonRoot,*bool)
}

// +kubebuilder:skipversion
#EKSContainerVolumeMount: {
	mountPath?: null | string @go(MountPath,*string)
	name?:      null | string @go(Name,*string)
	readOnly?:  null | bool   @go(ReadOnly,*bool)
}

// +kubebuilder:skipversion
#EKSEmptyDir: {
	medium?: null | string @go(Medium,*string)
}

// +kubebuilder:skipversion
#EKSHostPath: {
	path?: null | string @go(Path,*string)
}

// +kubebuilder:skipversion
#EKSPodProperties: {
	dnsPolicy?:          null | string @go(DNSPolicy,*string)
	hostNetwork?:        null | bool   @go(HostNetwork,*bool)
	serviceAccountName?: null | string @go(ServiceAccountName,*string)
}

// +kubebuilder:skipversion
#EKSPodPropertiesDetail: {
	dnsPolicy?:          null | string @go(DNSPolicy,*string)
	hostNetwork?:        null | bool   @go(HostNetwork,*bool)
	nodeName?:           null | string @go(NodeName,*string)
	podName?:            null | string @go(PodName,*string)
	serviceAccountName?: null | string @go(ServiceAccountName,*string)
}

// +kubebuilder:skipversion
#EKSSecret: {
	optional?:   null | bool   @go(Optional,*bool)
	secretName?: null | string @go(SecretName,*string)
}

// +kubebuilder:skipversion
#EKSVolume: {
	name?: null | string @go(Name,*string)
}

// +kubebuilder:skipversion
#EphemeralStorage: {
	sizeInGiB?: null | int64 @go(SizeInGiB,*int64)
}

// +kubebuilder:skipversion
#EvaluateOnExit: {
	onExitCode?:     null | string @go(OnExitCode,*string)
	onReason?:       null | string @go(OnReason,*string)
	onStatusReason?: null | string @go(OnStatusReason,*string)
}

// +kubebuilder:skipversion
#FairsharePolicy: {
	computeReservation?: null | int64 @go(ComputeReservation,*int64)
	shareDecaySeconds?:  null | int64 @go(ShareDecaySeconds,*int64)
}

// +kubebuilder:skipversion
#FargatePlatformConfiguration: {
	platformVersion?: null | string @go(PlatformVersion,*string)
}

// +kubebuilder:skipversion
#Host: {
	sourcePath?: null | string @go(SourcePath,*string)
}

// +kubebuilder:skipversion
#JobDependency: {
	jobID?: null | string @go(JobID,*string)
}

// +kubebuilder:skipversion
#JobDetail: {
	isCancelled?:        null | bool   @go(IsCancelled,*bool)
	isTerminated?:       null | bool   @go(IsTerminated,*bool)
	jobARN?:             null | string @go(JobARN,*string)
	jobDefinition?:      null | string @go(JobDefinition,*string)
	jobID?:              null | string @go(JobID,*string)
	jobName?:            null | string @go(JobName,*string)
	jobQueue?:           null | string @go(JobQueue,*string)
	propagateTags?:      null | bool   @go(PropagateTags,*bool)
	schedulingPriority?: null | int64  @go(SchedulingPriority,*int64)
	shareIdentifier?:    null | string @go(ShareIdentifier,*string)
	statusReason?:       null | string @go(StatusReason,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// +kubebuilder:skipversion
#JobQueueDetail: {
	computeEnvironmentOrder?: [...null | #ComputeEnvironmentOrder] @go(ComputeEnvironmentOrder,[]*ComputeEnvironmentOrder)
	jobQueueARN?:         null | string @go(JobQueueARN,*string)
	jobQueueName?:        null | string @go(JobQueueName,*string)
	priority?:            null | int64  @go(Priority,*int64)
	schedulingPolicyARN?: null | string @go(SchedulingPolicyARN,*string)
	state?:               null | string @go(State,*string)
	status?:              null | string @go(Status,*string)
	statusReason?:        null | string @go(StatusReason,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// +kubebuilder:skipversion
#JobSummary: {
	jobARN?:        null | string @go(JobARN,*string)
	jobDefinition?: null | string @go(JobDefinition,*string)
	jobID?:         null | string @go(JobID,*string)
	jobName?:       null | string @go(JobName,*string)
	statusReason?:  null | string @go(StatusReason,*string)
}

// +kubebuilder:skipversion
#JobTimeout: {
	attemptDurationSeconds?: null | int64 @go(AttemptDurationSeconds,*int64)
}

// +kubebuilder:skipversion
#KeyValuePair: {
	name?:  null | string @go(Name,*string)
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#KeyValuesPair: {
	name?: null | string @go(Name,*string)
	values?: [...null | string] @go(Values,[]*string)
}

// +kubebuilder:skipversion
#LaunchTemplateSpecification: {
	launchTemplateID?:   null | string @go(LaunchTemplateID,*string)
	launchTemplateName?: null | string @go(LaunchTemplateName,*string)
	version?:            null | string @go(Version,*string)
}

// +kubebuilder:skipversion
#LinuxParameters: {
	initProcessEnabled?: null | bool  @go(InitProcessEnabled,*bool)
	maxSwap?:            null | int64 @go(MaxSwap,*int64)
	sharedMemorySize?:   null | int64 @go(SharedMemorySize,*int64)
	swappiness?:         null | int64 @go(Swappiness,*int64)
}

// +kubebuilder:skipversion
#MountPoint: {
	containerPath?: null | string @go(ContainerPath,*string)
	readOnly?:      null | bool   @go(ReadOnly,*bool)
	sourceVolume?:  null | string @go(SourceVolume,*string)
}

// +kubebuilder:skipversion
#NetworkInterface: {
	attachmentID?:       null | string @go(AttachmentID,*string)
	ipv6Address?:        null | string @go(IPv6Address,*string)
	privateIPv4Address?: null | string @go(PrivateIPv4Address,*string)
}

// +kubebuilder:skipversion
#NodeDetails: {
	isMainNode?: null | bool  @go(IsMainNode,*bool)
	nodeIndex?:  null | int64 @go(NodeIndex,*int64)
}

// +kubebuilder:skipversion
#NodeOverrides: {
	numNodes?: null | int64 @go(NumNodes,*int64)
}

// +kubebuilder:skipversion
#NodeProperties: {
	mainNode?: null | int64 @go(MainNode,*int64)
	numNodes?: null | int64 @go(NumNodes,*int64)
}

// +kubebuilder:skipversion
#NodePropertiesSummary: {
	isMainNode?: null | bool  @go(IsMainNode,*bool)
	nodeIndex?:  null | int64 @go(NodeIndex,*int64)
	numNodes?:   null | int64 @go(NumNodes,*int64)
}

// +kubebuilder:skipversion
#NodePropertyOverride: {
	targetNodes?: null | string @go(TargetNodes,*string)
}

// +kubebuilder:skipversion
#NodeRangeProperty: {
	targetNodes?: null | string @go(TargetNodes,*string)
}

// +kubebuilder:skipversion
#ResourceRequirement: {
	value?: null | string @go(Value,*string)
}

// +kubebuilder:skipversion
#RetryStrategy: {
	attempts?: null | int64 @go(Attempts,*int64)
}

// +kubebuilder:skipversion
#RuntimePlatform: {
	cpuArchitecture?:       null | string @go(CPUArchitecture,*string)
	operatingSystemFamily?: null | string @go(OperatingSystemFamily,*string)
}

// +kubebuilder:skipversion
#SchedulingPolicyDetail: {
	arn?:  null | string @go(ARN,*string)
	name?: null | string @go(Name,*string)
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// +kubebuilder:skipversion
#SchedulingPolicyListingDetail: {
	arn?: null | string @go(ARN,*string)
}

// +kubebuilder:skipversion
#Secret: {
	name?:      null | string @go(Name,*string)
	valueFrom?: null | string @go(ValueFrom,*string)
}

// +kubebuilder:skipversion
#ShareAttributes: {
	shareIdentifier?: null | string @go(ShareIdentifier,*string)
}

// +kubebuilder:skipversion
#Tmpfs: {
	containerPath?: null | string @go(ContainerPath,*string)
	mountOptions?: [...null | string] @go(MountOptions,[]*string)
	size?: null | int64 @go(Size,*int64)
}

// +kubebuilder:skipversion
#Ulimit: {
	hardLimit?: null | int64  @go(HardLimit,*int64)
	name?:      null | string @go(Name,*string)
	softLimit?: null | int64  @go(SoftLimit,*int64)
}

// +kubebuilder:skipversion
#UpdatePolicy: {
	jobExecutionTimeoutMinutes?: null | int64 @go(JobExecutionTimeoutMinutes,*int64)
	terminateJobsOnUpdate?:      null | bool  @go(TerminateJobsOnUpdate,*bool)
}

// +kubebuilder:skipversion
#Volume: {
	name?: null | string @go(Name,*string)
}
