// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/elasticloadbalancing/v1alpha1

package v1alpha1

// Tag defines a key value pair that can be attached to an ELB
#Tag: {
	// The key of the tag.
	key: string @go(Key)

	// The value of the tag.
	// +optional
	value?: null | string @go(Value,*string)
}

// Listener represents the port binding(s) between the ELB and EC2 instances.
#Listener: {
	// The port on which the instance is listening.
	instancePort: int32 @go(InstancePort)

	// The protocol to use for routing traffic to instances: HTTP, HTTPS, TCP, or
	// SSL. If not specified, the value is same as for Protocol.
	// +optional
	instanceProtocol?: null | string @go(InstanceProtocol,*string)

	// The port on which the load balancer is listening.
	loadBalancerPort: int32 @go(LoadBalancerPort)

	// The load balancer transport protocol to use for routing: HTTP, HTTPS, TCP,
	// or SSL.
	protocol: string @go(Protocol)

	// The Amazon Resource Name (ARN) of the server certificate.
	// +optional
	sslCertificateId?: null | string @go(SSLCertificateID,*string)
}

// BackendServerDescription provides information about the instances attached to the ELB.
#BackendServerDescription: {
	// The port on which the EC2 instance is listening.
	instancePort?: int32 @go(InstancePort)

	// The names of the policies enabled for the EC2 instance.
	policyNames?: [...string] @go(PolicyNames,[]string)
}

// HealthCheck defines the rules that the ELB uses to decide if an attached instance is healthy.
#HealthCheck: {
	// The number of consecutive health checks successes required before moving
	// the instance to the Healthy state.
	healthyThreshold: int32 @go(HealthyThreshold)

	// The approximate interval, in seconds, between health checks of an individual
	// instance.
	interval: int32 @go(Interval)

	// The instance being checked.
	target: string @go(Target)

	// The amount of time, in seconds, during which no response means a failed health
	// check.
	timeout: int32 @go(Timeout)

	// The number of consecutive health check failures required before moving the
	// instance to the Unhealthy state.
	unhealthyThreshold: int32 @go(UnhealthyThreshold)
}

// ELBParameters define the desired state of an AWS ELB.
#ELBParameters: {
	// Region is the region you'd like your ELB to be created in.
	region: string @go(Region)

	// One or more Availability Zones from the same region as the load balancer.
	// +optional
	availabilityZones?: [...string] @go(AvailabilityZones,[]string)

	// Information about the health checks conducted on the load balancer.
	healthCheck?: null | #HealthCheck @go(HealthCheck,*HealthCheck)

	// The listeners for this ELB.
	listeners: [...#Listener] @go(Listeners,[]Listener)

	// The type of a load balancer. Valid only for load balancers in a VPC.
	// +optional
	// +immutable
	scheme?: null | string @go(Scheme,*string)

	// The IDs of the security groups to assign to the load balancer.
	// +optional
	securityGroupIds?: [...string] @go(SecurityGroupIDs,[]string)

	// The IDs of the subnets in your VPC to attach to the load balancer. Specify
	// one subnet per Availability Zone specified in AvailabilityZones.
	// +optional
	subnetIds?: [...string] @go(SubnetIDs,[]string)

	// A list of tags to assign to the load balancer.
	// +optional
	tags?: [...#Tag] @go(Tags,[]Tag)
}

// An ELBSpec defines the desired state of an ELB.
#ELBSpec: {
	forProvider: #ELBParameters @go(ForProvider)
}

// ELBObservation keeps the state for the external resource
#ELBObservation: {
	// Information about the EC2 instances for this ELB.
	backendServerDescriptions?: [...#BackendServerDescription] @go(BackendServerDescriptions,[]BackendServerDescription)

	// The DNS name of the load balancer.
	canonicalHostedZoneName?: string @go(CanonicalHostedZoneName)

	// The ID of the Amazon Route 53 hosted zone for the load balancer.
	canonicalHostedZoneNameId?: string @go(CanonicalHostedZoneNameID)

	// The DNS name of the load balancer.
	dnsName?: string @go(DNSName)

	// The ID of the VPC for the load balancer.
	vpcId?: string @go(VPCID)
}

// An ELBStatus represents the observed state of an ELB.
#ELBStatus: {
	atProvider?: #ELBObservation @go(AtProvider)
}

// An ELB is a managed resource that represents an AWS Classic Load Balancer.
// +kubebuilder:printcolumn:name="ELBNAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="DNSNAME",type="string",JSONPath=".status.atProvider.dnsName"
// +kubebuilder:printcolumn:name="VPCID",type="string",JSONPath=".status.atProvider.vpcId"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ELB: {
	spec:    #ELBSpec   @go(Spec)
	status?: #ELBStatus @go(Status)
}

// ELBList contains a list of ELBs
#ELBList: {
	items: [...#ELB] @go(Items,[]ELB)
}
