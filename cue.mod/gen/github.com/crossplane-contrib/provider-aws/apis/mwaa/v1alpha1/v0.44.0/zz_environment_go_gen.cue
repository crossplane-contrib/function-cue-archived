// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/mwaa/v1alpha1

package v1alpha1

// EnvironmentParameters defines the desired state of Environment
#EnvironmentParameters: {
	// Region is which region the Environment will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// A list of key-value pairs containing the Apache Airflow configuration options
	// you want to attach to your environment. For more information, see Apache
	// Airflow configuration options (https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html).
	airflowConfigurationOptions?: {[string]: null | string} @go(AirflowConfigurationOptions,map[string]*string)

	// The Apache Airflow version for your environment. If no value is specified,
	// it defaults to the latest version. Valid values: 1.10.12, 2.0.2, 2.2.2, 2.4.3,
	// and 2.5.1. For more information, see Apache Airflow versions on Amazon Managed
	// Workflows for Apache Airflow (MWAA) (https://docs.aws.amazon.com/mwaa/latest/userguide/airflow-versions.html).
	airflowVersion?: null | string @go(AirflowVersion,*string)

	// The relative path to the DAGs folder on your Amazon S3 bucket. For example,
	// dags. For more information, see Adding or updating DAGs (https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html).
	// +kubebuilder:validation:Required
	dagS3Path?: null | string @go(DagS3Path,*string)

	// The environment class type. Valid values: mw1.small, mw1.medium, mw1.large.
	// For more information, see Amazon MWAA environment class (https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html).
	environmentClass?: null | string @go(EnvironmentClass,*string)

	// Defines the Apache Airflow logs to send to CloudWatch Logs.
	loggingConfiguration?: null | #LoggingConfigurationInput @go(LoggingConfiguration,*LoggingConfigurationInput)

	// The maximum number of workers that you want to run in your environment. MWAA
	// scales the number of Apache Airflow workers up to the number you specify
	// in the MaxWorkers field. For example, 20. When there are no more tasks running,
	// and no more in the queue, MWAA disposes of the extra workers leaving the
	// one worker that is included with your environment, or the number you specify
	// in MinWorkers.
	maxWorkers?: null | int64 @go(MaxWorkers,*int64)

	// The minimum number of workers that you want to run in your environment. MWAA
	// scales the number of Apache Airflow workers up to the number you specify
	// in the MaxWorkers field. When there are no more tasks running, and no more
	// in the queue, MWAA disposes of the extra workers leaving the worker count
	// you specify in the MinWorkers field. For example, 2.
	minWorkers?: null | int64 @go(MinWorkers,*int64)

	// The version of the plugins.zip file on your Amazon S3 bucket. You must specify
	// a version each time a plugins.zip file is updated. For more information,
	// see How S3 Versioning works (https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html).
	pluginsS3ObjectVersion?: null | string @go(PluginsS3ObjectVersion,*string)

	// The relative path to the plugins.zip file on your Amazon S3 bucket. For example,
	// plugins.zip. If specified, then the plugins.zip version is required. For
	// more information, see Installing custom plugins (https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html).
	pluginsS3Path?: null | string @go(PluginsS3Path,*string)

	// The version of the requirements.txt file on your Amazon S3 bucket. You must
	// specify a version each time a requirements.txt file is updated. For more
	// information, see How S3 Versioning works (https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html).
	requirementsS3ObjectVersion?: null | string @go(RequirementsS3ObjectVersion,*string)

	// The relative path to the requirements.txt file on your Amazon S3 bucket.
	// For example, requirements.txt. If specified, then a version is required.
	// For more information, see Installing Python dependencies (https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html).
	requirementsS3Path?: null | string @go(RequirementsS3Path,*string)

	// The number of Apache Airflow schedulers to run in your environment. Valid
	// values:
	//
	//    * v2 - Accepts between 2 to 5. Defaults to 2.
	//
	//    * v1 - Accepts 1.
	schedulers?: null | int64 @go(Schedulers,*int64)

	// The version of the startup shell script in your Amazon S3 bucket. You must
	// specify the version ID (https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html)
	// that Amazon S3 assigns to the file every time you update the script.
	//
	// Version IDs are Unicode, UTF-8 encoded, URL-ready, opaque strings that are
	// no more than 1,024 bytes long. The following is an example:
	//
	// 3sL4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo
	//
	// For more information, see Using a startup script (https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html).
	startupScriptS3ObjectVersion?: null | string @go(StartupScriptS3ObjectVersion,*string)

	// The relative path to the startup shell script in your Amazon S3 bucket. For
	// example, s3://mwaa-environment/startup.sh.
	//
	// Amazon MWAA runs the script as your environment starts, and before running
	// the Apache Airflow process. You can use this script to install dependencies,
	// modify Apache Airflow configuration options, and set environment variables.
	// For more information, see Using a startup script (https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html).
	startupScriptS3Path?: null | string @go(StartupScriptS3Path,*string)

	// The key-value tag pairs you want to associate to your environment. For example,
	// "Environment": "Staging". For more information, see Tagging Amazon Web Services
	// resources (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The Apache Airflow Web server access mode. For more information, see Apache
	// Airflow access modes (https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html).
	webserverAccessMode?: null | string @go(WebserverAccessMode,*string)

	// The day and time of the week in Coordinated Universal Time (UTC) 24-hour
	// standard time to start weekly maintenance updates of your environment in
	// the following format: DAY:HH:MM. For example: TUE:03:30. You can specify
	// a start time in 30 minute increments only.
	weeklyMaintenanceWindowStart?: null | string @go(WeeklyMaintenanceWindowStart,*string)

	#CustomEnvironmentParameters
}

// EnvironmentSpec defines the desired state of Environment
#EnvironmentSpec: {
	forProvider: #EnvironmentParameters @go(ForProvider)
}

// EnvironmentObservation defines the observed state of Environment
#EnvironmentObservation: {
	// The Amazon Resource Name (ARN) returned in the response for the environment.
	arn?: null | string @go(ARN,*string)

	// The status of the last update on the environment.
	lastUpdate?: null | #LastUpdate @go(LastUpdate,*LastUpdate)

	// The status of the Amazon MWAA environment. Valid values:
	//
	//    * CREATING - Indicates the request to create the environment is in progress.
	//
	//    * CREATING_SNAPSHOT - Indicates the request to update environment details,
	//    or upgrade the environment version, is in progress and Amazon MWAA is
	//    creating a storage volume snapshot of the Amazon RDS database cluster
	//    associated with the environment. A database snapshot is a backup created
	//    at a specific point in time. Amazon MWAA uses snapshots to recover environment
	//    metadata if the process to update or upgrade an environment fails.
	//
	//    * CREATE_FAILED - Indicates the request to create the environment failed,
	//    and the environment could not be created.
	//
	//    * AVAILABLE - Indicates the request was successful and the environment
	//    is ready to use.
	//
	//    * UPDATING - Indicates the request to update the environment is in progress.
	//
	//    * ROLLING_BACK - Indicates the request to update environment details,
	//    or upgrade the environment version, failed and Amazon MWAA is restoring
	//    the environment using the latest storage volume snapshot.
	//
	//    * DELETING - Indicates the request to delete the environment is in progress.
	//
	//    * DELETED - Indicates the request to delete the environment is complete,
	//    and the environment has been deleted.
	//
	//    * UNAVAILABLE - Indicates the request failed, but the environment was
	//    unable to rollback and is not in a stable state.
	//
	//    * UPDATE_FAILED - Indicates the request to update the environment failed,
	//    and the environment has rolled back successfully and is ready to use.
	//
	// We recommend reviewing our troubleshooting guide for a list of common errors
	// and their solutions. For more information, see Amazon MWAA troubleshooting
	// (https://docs.aws.amazon.com/mwaa/latest/userguide/troubleshooting.html).
	status?: null | string @go(Status,*string)
}

// EnvironmentStatus defines the observed state of Environment.
#EnvironmentStatus: {
	atProvider?: #EnvironmentObservation @go(AtProvider)
}

// Environment is the Schema for the Environments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Environment: {
	spec:    #EnvironmentSpec   @go(Spec)
	status?: #EnvironmentStatus @go(Status)
}

// EnvironmentList contains a list of Environments
#EnvironmentList: {
	items: [...#Environment] @go(Items,[]Environment)
}
