// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/cloudwatchlogs/v1alpha1

package v1alpha1

// LogGroupParameters defines the desired state of LogGroup
#LogGroupParameters: {
	// Region is which region the LogGroup will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The name of the log group.
	// +kubebuilder:validation:Required
	logGroupName?: null | string @go(LogGroupName,*string)

	// The key-value pairs to use for the tags.
	//
	// You can grant users access to certain log groups while preventing them from
	// accessing other log groups. To do so, tag your groups and use IAM policies
	// that refer to those tags. To assign tags when you create a log group, you
	// must have either the logs:TagResource or logs:TagLogGroup permission. For
	// more information about tagging, see Tagging Amazon Web Services resources
	// (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). For more
	// information about using tags to control access, see Controlling access to
	// Amazon Web Services resources using tags (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html).
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	#CustomLogGroupParameters
}

// LogGroupSpec defines the desired state of LogGroup
#LogGroupSpec: {
	forProvider: #LogGroupParameters @go(ForProvider)
}

// LogGroupObservation defines the observed state of LogGroup
#LogGroupObservation: {
	// The Amazon Resource Name (ARN) of the log group.
	arn?: null | string @go(ARN,*string)

	// The creation time of the log group, expressed as the number of milliseconds
	// after Jan 1, 1970 00:00:00 UTC.
	creationTime?: null | int64 @go(CreationTime,*int64)

	// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log
	// data.
	kmsKeyID?: null | string @go(KMSKeyID,*string)

	// The name of the log group.
	logGroupName?: null | string @go(LogGroupName,*string)

	// The number of metric filters.
	metricFilterCount?: null | int64 @go(MetricFilterCount,*int64)
	retentionInDays?:   null | int64 @go(RetentionInDays,*int64)

	// The number of bytes stored.
	storedBytes?: null | int64 @go(StoredBytes,*int64)
}

// LogGroupStatus defines the observed state of LogGroup.
#LogGroupStatus: {
	atProvider?: #LogGroupObservation @go(AtProvider)
}

// LogGroup is the Schema for the LogGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LogGroup: {
	spec:    #LogGroupSpec   @go(Spec)
	status?: #LogGroupStatus @go(Status)
}

// LogGroupList contains a list of LogGroups
#LogGroupList: {
	items: [...#LogGroup] @go(Items,[]LogGroup)
}
