// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/sfn/v1alpha1

package v1alpha1

// ActivityParameters defines the desired state of Activity
#ActivityParameters: {
	// Region is which region the Activity will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The name of the activity to create. This name must be unique for your Amazon
	// Web Services account and region for 90 days. For more information, see Limits
	// Related to State Machine Executions (https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions)
	// in the Step Functions Developer Guide.
	//
	// A name must not contain:
	//
	//    * white space
	//
	//    * brackets < > { } [ ]
	//
	//    * wildcard characters ? *
	//
	//    * special characters " # % \ ^ | ~ ` $ & , ; : /
	//
	//    * control characters (U+0000-001F, U+007F-009F)
	//
	// To enable logging with CloudWatch Logs, the name should only contain 0-9,
	// A-Z, a-z, - and _.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The list of tags to add to a resource.
	//
	// An array of key-value pairs. For more information, see Using Cost Allocation
	// Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
	// in the Amazon Web Services Billing and Cost Management User Guide, and Controlling
	// Access Using IAM Tags (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html).
	//
	// Tags may only contain Unicode letters, digits, white space, or these symbols:
	// _ . : / = + - @.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	#CustomActivityParameters
}

// ActivitySpec defines the desired state of Activity
#ActivitySpec: {
	forProvider: #ActivityParameters @go(ForProvider)
}

// ActivityObservation defines the observed state of Activity
#ActivityObservation: {
	// The Amazon Resource Name (ARN) that identifies the created activity.
	activityARN?: null | string @go(ActivityARN,*string)
}

// ActivityStatus defines the observed state of Activity.
#ActivityStatus: {
	atProvider?: #ActivityObservation @go(AtProvider)
}

// Activity is the Schema for the Activities API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Activity: {
	spec:    #ActivitySpec   @go(Spec)
	status?: #ActivityStatus @go(Status)
}

// ActivityList contains a list of Activities
#ActivityList: {
	items: [...#Activity] @go(Items,[]Activity)
}
