// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/sfn/v1alpha1

package v1alpha1

// StateMachineParameters defines the desired state of StateMachine
#StateMachineParameters: {
	// Region is which region the StateMachine will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// The Amazon States Language definition of the state machine. See Amazon States
	// Language (https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html).
	// +kubebuilder:validation:Required
	definition?: null | string @go(Definition,*string)

	// Defines what execution history events are logged and where they are logged.
	//
	// By default, the level is set to OFF. For more information see Log Levels
	// (https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html)
	// in the Step Functions User Guide.
	loggingConfiguration?: null | #LoggingConfiguration @go(LoggingConfiguration,*LoggingConfiguration)

	// The name of the state machine.
	//
	// A name must not contain:
	//
	//    * white space
	//
	//    * brackets < > { } [ ]
	//
	//    * wildcard characters ? *
	//
	//    * special characters " # % \ ^ | ~ ` $ & , ; : /
	//
	//    * control characters (U+0000-001F, U+007F-009F)
	//
	// To enable logging with CloudWatch Logs, the name should only contain 0-9,
	// A-Z, a-z, - and _.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Set to true to publish the first version of the state machine during creation.
	// The default is false.
	publish?: null | bool @go(Publish,*bool)

	// Tags to be added when creating a state machine.
	//
	// An array of key-value pairs. For more information, see Using Cost Allocation
	// Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
	// in the Amazon Web Services Billing and Cost Management User Guide, and Controlling
	// Access Using IAM Tags (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html).
	//
	// Tags may only contain Unicode letters, digits, white space, or these symbols:
	// _ . : / = + - @.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	// Selects whether X-Ray tracing is enabled.
	tracingConfiguration?: null | #TracingConfiguration @go(TracingConfiguration,*TracingConfiguration)

	// Sets description about the state machine version. You can only set the description
	// if the publish parameter is set to true. Otherwise, if you set versionDescription,
	// but publish to false, this API action throws ValidationException.
	versionDescription?: null | string @go(VersionDescription,*string)

	#CustomStateMachineParameters
}

// StateMachineSpec defines the desired state of StateMachine
#StateMachineSpec: {
	forProvider: #StateMachineParameters @go(ForProvider)
}

// StateMachineObservation defines the observed state of StateMachine
#StateMachineObservation: {
	// The Amazon Resource Name (ARN) that identifies the created state machine.
	stateMachineARN?: null | string @go(StateMachineARN,*string)

	// The Amazon Resource Name (ARN) that identifies the created state machine
	// version. If you do not set the publish parameter to true, this field returns
	// null value.
	stateMachineVersionARN?: null | string @go(StateMachineVersionARN,*string)
}

// StateMachineStatus defines the observed state of StateMachine.
#StateMachineStatus: {
	atProvider?: #StateMachineObservation @go(AtProvider)
}

// StateMachine is the Schema for the StateMachines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#StateMachine: {
	spec:    #StateMachineSpec   @go(Spec)
	status?: #StateMachineStatus @go(Status)
}

// StateMachineList contains a list of StateMachines
#StateMachineList: {
	items: [...#StateMachine] @go(Items,[]StateMachine)
}
