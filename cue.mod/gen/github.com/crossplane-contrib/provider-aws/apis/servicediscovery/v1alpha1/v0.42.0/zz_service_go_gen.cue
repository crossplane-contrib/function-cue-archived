// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-aws/apis/servicediscovery/v1alpha1

package v1alpha1

// ServiceParameters defines the desired state of Service
#ServiceParameters: {
	// Region is which region the Service will be created.
	// +kubebuilder:validation:Required
	region: string @go(Region)

	// A unique string that identifies the request and that allows failed CreateService
	// requests to be retried without the risk of running the operation twice. CreatorRequestId
	// can be any unique string (for example, a date/timestamp).
	creatorRequestID?: null | string @go(CreatorRequestID,*string)

	// A description for the service.
	description?: null | string @go(Description,*string)

	// A complex type that contains information about the Amazon Route 53 records
	// that you want Cloud Map to create when you register an instance.
	dnsConfig?: null | #DNSConfig @go(DNSConfig,*DNSConfig)

	// Public DNS and HTTP namespaces only. A complex type that contains settings
	// for an optional Route 53 health check. If you specify settings for a health
	// check, Cloud Map associates the health check with all the Route 53 DNS records
	// that you specify in DnsConfig.
	//
	// If you specify a health check configuration, you can specify either HealthCheckCustomConfig
	// or HealthCheckConfig but not both.
	//
	// For information about the charges for health checks, see Cloud Map Pricing
	// (http://aws.amazon.com/cloud-map/pricing/).
	healthCheckConfig?: null | #HealthCheckConfig @go(HealthCheckConfig,*HealthCheckConfig)

	// A complex type that contains information about an optional custom health
	// check.
	//
	// If you specify a health check configuration, you can specify either HealthCheckCustomConfig
	// or HealthCheckConfig but not both.
	//
	// You can't add, update, or delete a HealthCheckCustomConfig configuration
	// from an existing service.
	healthCheckCustomConfig?: null | #HealthCheckCustomConfig @go(HealthCheckCustomConfig,*HealthCheckCustomConfig)

	// The name that you want to assign to the service.
	//
	// Do not include sensitive information in the name if the namespace is discoverable
	// by public DNS queries.
	//
	// If you want Cloud Map to create an SRV record when you register an instance
	// and you're using a system that requires a specific SRV format, such as HAProxy
	// (http://www.haproxy.org/), specify the following for Name:
	//
	//    * Start the name with an underscore (_), such as _exampleservice.
	//
	//    * End the name with ._protocol, such as ._tcp.
	//
	// When you register an instance, Cloud Map creates an SRV record and assigns
	// a name to the record by concatenating the service name and the namespace
	// name (for example,
	//
	// _exampleservice._tcp.example.com).
	//
	// For services that are accessible by DNS queries, you can't create multiple
	// services with names that differ only by case (such as EXAMPLE and example).
	// Otherwise, these services have the same DNS name and can't be distinguished.
	// However, if you use a namespace that's only accessible by API calls, then
	// you can create services that with names that differ only by case.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The ID of the namespace that you want to use to create the service. The namespace
	// ID must be specified, but it can be specified either here or in the DnsConfig
	// object.
	namespaceID?: null | string @go(NamespaceID,*string)

	// The tags to add to the service. Each tag consists of a key and an optional
	// value that you define. Tags keys can be up to 128 characters in length, and
	// tag values can be up to 256 characters in length.
	tags?: [...null | #Tag] @go(Tags,[]*Tag)

	// If present, specifies that the service instances are only discoverable using
	// the DiscoverInstances API operation. No DNS records is registered for the
	// service instances. The only valid value is HTTP.
	type_?: null | string @go(Type,*string)

	#CustomServiceParameters
}

// ServiceSpec defines the desired state of Service
#ServiceSpec: {
	forProvider: #ServiceParameters @go(ForProvider)
}

// ServiceObservation defines the observed state of Service
#ServiceObservation: {
	// The Amazon Resource Name (ARN) that Cloud Map assigns to the service when
	// you create it.
	arn?: null | string @go(ARN,*string)

	// The ID that Cloud Map assigned to the service when you created it.
	id?: null | string @go(ID,*string)

	// The number of instances that are currently associated with the service. Instances
	// that were previously associated with the service but that are deleted aren't
	// included in the count. The count might not reflect pending registrations
	// and deregistrations.
	instanceCount?: null | int64 @go(InstanceCount,*int64)
}

// ServiceStatus defines the observed state of Service.
#ServiceStatus: {
	atProvider?: #ServiceObservation @go(AtProvider)
}

// Service is the Schema for the Services API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Service: {
	spec:    #ServiceSpec   @go(Spec)
	status?: #ServiceStatus @go(Status)
}

// ServiceList contains a list of Services
#ServiceList: {
	items: [...#Service] @go(Items,[]Service)
}
