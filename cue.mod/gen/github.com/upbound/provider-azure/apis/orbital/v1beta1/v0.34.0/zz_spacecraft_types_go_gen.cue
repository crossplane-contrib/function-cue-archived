// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/orbital/v1beta1

package v1beta1

#SpacecraftLinksObservation: {
	// Bandwidth in Mhz.
	bandwidthMhz?: null | float64 @go(BandwidthMhz,*float64)

	// Center frequency in Mhz.
	centerFrequencyMhz?: null | float64 @go(CenterFrequencyMhz,*float64)

	// Direction if the communication. Possible values are Uplink and Downlink.
	direction?: null | string @go(Direction,*string)

	// Name of the link.
	name?: null | string @go(Name,*string)

	// Polarization. Possible values are RHCP, LHCP, linearVertical and linearHorizontal.
	polarization?: null | string @go(Polarization,*string)
}

#SpacecraftLinksParameters: {
	// Bandwidth in Mhz.
	// +kubebuilder:validation:Required
	bandwidthMhz?: null | float64 @go(BandwidthMhz,*float64)

	// Center frequency in Mhz.
	// +kubebuilder:validation:Required
	centerFrequencyMhz?: null | float64 @go(CenterFrequencyMhz,*float64)

	// Direction if the communication. Possible values are Uplink and Downlink.
	// +kubebuilder:validation:Required
	direction?: null | string @go(Direction,*string)

	// Name of the link.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Polarization. Possible values are RHCP, LHCP, linearVertical and linearHorizontal.
	// +kubebuilder:validation:Required
	polarization?: null | string @go(Polarization,*string)
}

#SpacecraftObservation: {
	// The ID of the Spacecraft.
	id?: null | string @go(ID,*string)

	// A links block as defined below. Changing this forces a new resource to be created.
	links?: [...#SpacecraftLinksObservation] @go(Links,[]SpacecraftLinksObservation)

	// The location where the Spacecraft exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// NORAD ID of the Spacecraft.
	noradId?: null | string @go(NoradID,*string)

	// The name of the Resource Group where the Spacecraft exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Title of the two line elements (TLE).
	titleLine?: null | string @go(TitleLine,*string)

	// A list of the two line elements (TLE), the first string being the first of the TLE, the second string being the second line of the TLE. Changing this forces a new resource to be created.
	twoLineElements?: [...null | string] @go(TwoLineElements,[]*string)
}

#SpacecraftParameters: {
	// A links block as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	links?: [...#SpacecraftLinksParameters] @go(Links,[]SpacecraftLinksParameters)

	// The location where the Spacecraft exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// NORAD ID of the Spacecraft.
	// +kubebuilder:validation:Optional
	noradId?: null | string @go(NoradID,*string)

	// The name of the Resource Group where the Spacecraft exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Title of the two line elements (TLE).
	// +kubebuilder:validation:Optional
	titleLine?: null | string @go(TitleLine,*string)

	// A list of the two line elements (TLE), the first string being the first of the TLE, the second string being the second line of the TLE. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	twoLineElements?: [...null | string] @go(TwoLineElements,[]*string)
}

// SpacecraftSpec defines the desired state of Spacecraft
#SpacecraftSpec: {
	forProvider: #SpacecraftParameters @go(ForProvider)
}

// SpacecraftStatus defines the observed state of Spacecraft.
#SpacecraftStatus: {
	atProvider?: #SpacecraftObservation @go(AtProvider)
}

// Spacecraft is the Schema for the Spacecrafts API. Manages a Spacecraft resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Spacecraft: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.links)",message="links is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.noradId)",message="noradId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.titleLine)",message="titleLine is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.twoLineElements)",message="twoLineElements is a required parameter"
	spec:    #SpacecraftSpec   @go(Spec)
	status?: #SpacecraftStatus @go(Status)
}

// SpacecraftList contains a list of Spacecrafts
#SpacecraftList: {
	items: [...#Spacecraft] @go(Items,[]Spacecraft)
}
