// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/notificationhubs/v1beta1

package v1beta1

#AuthorizationRuleObservation: {
	// The ID of the Authorization Rule.
	id?: null | string @go(ID,*string)

	// Does this Authorization Rule have Listen access to the Notification Hub? Defaults to false.
	listen?: null | bool @go(Listen,*bool)

	// Does this Authorization Rule have Manage access to the Notification Hub? Defaults to false.
	manage?: null | bool @go(Manage,*bool)

	// The name of the Notification Hub Namespace in which the Notification Hub exists. Changing this forces a new resource to be created.
	namespaceName?: null | string @go(NamespaceName,*string)

	// The name of the Notification Hub for which the Authorization Rule should be created. Changing this forces a new resource to be created.
	notificationHubName?: null | string @go(NotificationHubName,*string)

	// The Primary Access Key associated with this Authorization Rule.
	primaryAccessKey?: null | string @go(PrimaryAccessKey,*string)

	// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The Secondary Access Key associated with this Authorization Rule.
	secondaryAccessKey?: null | string @go(SecondaryAccessKey,*string)

	// Does this Authorization Rule have Send access to the Notification Hub? Defaults to false.
	send?: null | bool @go(Send,*bool)
}

#AuthorizationRuleParameters: {
	// Does this Authorization Rule have Listen access to the Notification Hub? Defaults to false.
	// +kubebuilder:validation:Optional
	listen?: null | bool @go(Listen,*bool)

	// Does this Authorization Rule have Manage access to the Notification Hub? Defaults to false.
	// +kubebuilder:validation:Optional
	manage?: null | bool @go(Manage,*bool)

	// The name of the Notification Hub Namespace in which the Notification Hub exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/notificationhubs/v1beta1.NotificationHubNamespace
	// +kubebuilder:validation:Optional
	namespaceName?: null | string @go(NamespaceName,*string)

	// The name of the Notification Hub for which the Authorization Rule should be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/notificationhubs/v1beta1.NotificationHub
	// +kubebuilder:validation:Optional
	notificationHubName?: null | string @go(NotificationHubName,*string)

	// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Does this Authorization Rule have Send access to the Notification Hub? Defaults to false.
	// +kubebuilder:validation:Optional
	send?: null | bool @go(Send,*bool)
}

// AuthorizationRuleSpec defines the desired state of AuthorizationRule
#AuthorizationRuleSpec: {
	forProvider: #AuthorizationRuleParameters @go(ForProvider)
}

// AuthorizationRuleStatus defines the observed state of AuthorizationRule.
#AuthorizationRuleStatus: {
	atProvider?: #AuthorizationRuleObservation @go(AtProvider)
}

// AuthorizationRule is the Schema for the AuthorizationRules API. Manages an Authorization Rule associated with a Notification Hub within a Notification Hub Namespace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#AuthorizationRule: {
	spec:    #AuthorizationRuleSpec   @go(Spec)
	status?: #AuthorizationRuleStatus @go(Status)
}

// AuthorizationRuleList contains a list of AuthorizationRules
#AuthorizationRuleList: {
	items: [...#AuthorizationRule] @go(Items,[]AuthorizationRule)
}
