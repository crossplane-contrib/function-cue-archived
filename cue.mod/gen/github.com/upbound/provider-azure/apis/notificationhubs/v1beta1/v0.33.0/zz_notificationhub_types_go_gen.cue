// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/notificationhubs/v1beta1

package v1beta1

#APNSCredentialObservation: {
	// The Application Mode which defines which server the APNS Messages should be sent to. Possible values are Production and Sandbox.
	applicationMode?: null | string @go(ApplicationMode,*string)

	// The Bundle ID of the iOS/macOS application to send push notifications for, such as com.hashicorp.example.
	bundleId?: null | string @go(BundleID,*string)

	// The Apple Push Notifications Service (APNS) Key.
	keyId?: null | string @go(KeyID,*string)

	// The ID of the team the Token.
	teamId?: null | string @go(TeamID,*string)
}

#APNSCredentialParameters: {
	// The Application Mode which defines which server the APNS Messages should be sent to. Possible values are Production and Sandbox.
	// +kubebuilder:validation:Required
	applicationMode?: null | string @go(ApplicationMode,*string)

	// The Bundle ID of the iOS/macOS application to send push notifications for, such as com.hashicorp.example.
	// +kubebuilder:validation:Required
	bundleId?: null | string @go(BundleID,*string)

	// The Apple Push Notifications Service (APNS) Key.
	// +kubebuilder:validation:Required
	keyId?: null | string @go(KeyID,*string)

	// The ID of the team the Token.
	// +kubebuilder:validation:Required
	teamId?: null | string @go(TeamID,*string)
}

#GCMCredentialObservation: {
}

#NotificationHubObservation: {
	// A apns_credential block as defined below.
	apnsCredential?: [...#APNSCredentialObservation] @go(APNSCredential,[]APNSCredentialObservation)

	// The ID of the Notification Hub.
	id?: null | string @go(ID,*string)

	// The Azure Region in which this Notification Hub Namespace exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The name of the Notification Hub Namespace in which to create this Notification Hub. Changing this forces a new resource to be created.
	namespaceName?: null | string @go(NamespaceName,*string)

	// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#NotificationHubParameters: {
	// A apns_credential block as defined below.
	// +kubebuilder:validation:Optional
	apnsCredential?: [...#APNSCredentialParameters] @go(APNSCredential,[]APNSCredentialParameters)

	// The Azure Region in which this Notification Hub Namespace exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The name of the Notification Hub Namespace in which to create this Notification Hub. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/notificationhubs/v1beta1.NotificationHubNamespace
	// +kubebuilder:validation:Optional
	namespaceName?: null | string @go(NamespaceName,*string)

	// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// NotificationHubSpec defines the desired state of NotificationHub
#NotificationHubSpec: {
	forProvider: #NotificationHubParameters @go(ForProvider)
}

// NotificationHubStatus defines the observed state of NotificationHub.
#NotificationHubStatus: {
	atProvider?: #NotificationHubObservation @go(AtProvider)
}

// NotificationHub is the Schema for the NotificationHubs API. Manages a Notification Hub within a Notification Hub Namespace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#NotificationHub: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",message="location is a required parameter"
	spec:    #NotificationHubSpec   @go(Spec)
	status?: #NotificationHubStatus @go(Status)
}

// NotificationHubList contains a list of NotificationHubs
#NotificationHubList: {
	items: [...#NotificationHub] @go(Items,[]NotificationHub)
}
