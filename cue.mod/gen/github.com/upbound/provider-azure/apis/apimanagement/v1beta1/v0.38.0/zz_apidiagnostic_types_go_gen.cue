// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/apimanagement/v1beta1

package v1beta1

#APIDiagnosticInitParameters: {
	// Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
	alwaysLogErrors?: null | bool @go(AlwaysLogErrors,*bool)

	// A backend_request block as defined below.
	backendRequest?: [...#BackendRequestInitParameters] @go(BackendRequest,[]BackendRequestInitParameters)

	// A backend_response block as defined below.
	backendResponse?: [...#BackendResponseInitParameters] @go(BackendResponse,[]BackendResponseInitParameters)

	// A frontend_request block as defined below.
	frontendRequest?: [...#FrontendRequestInitParameters] @go(FrontendRequest,[]FrontendRequestInitParameters)

	// A frontend_response block as defined below.
	frontendResponse?: [...#FrontendResponseInitParameters] @go(FrontendResponse,[]FrontendResponseInitParameters)

	// The HTTP Correlation Protocol to use. Possible values are None, Legacy or W3C.
	httpCorrelationProtocol?: null | string @go(HTTPCorrelationProtocol,*string)

	// Log client IP address.
	logClientIp?: null | bool @go(LogClientIP,*bool)

	// The format of the Operation Name for Application Insights telemetries. Possible values are Name, and Url. Defaults to Name.
	operationNameFormat?: null | string @go(OperationNameFormat,*string)

	// Sampling (%). For high traffic APIs, please read this documentation to understand performance implications and log sampling. Valid values are between 0.0 and 100.0.
	samplingPercentage?: null | float64 @go(SamplingPercentage,*float64)

	// Logging verbosity. Possible values are verbose, information or error.
	verbosity?: null | string @go(Verbosity,*string)
}

#APIDiagnosticObservation: {
	// The ID (name) of the Diagnostics Logger.
	apiManagementLoggerId?: null | string @go(APIManagementLoggerID,*string)

	// The name of the API Management Service instance. Changing this forces a new API Management Service API Diagnostics Logs to be created.
	apiManagementName?: null | string @go(APIManagementName,*string)

	// The name of the API on which to configure the Diagnostics Logs. Changing this forces a new API Management Service API Diagnostics Logs to be created.
	apiName?: null | string @go(APIName,*string)

	// Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
	alwaysLogErrors?: null | bool @go(AlwaysLogErrors,*bool)

	// A backend_request block as defined below.
	backendRequest?: [...#BackendRequestObservation] @go(BackendRequest,[]BackendRequestObservation)

	// A backend_response block as defined below.
	backendResponse?: [...#BackendResponseObservation] @go(BackendResponse,[]BackendResponseObservation)

	// A frontend_request block as defined below.
	frontendRequest?: [...#FrontendRequestObservation] @go(FrontendRequest,[]FrontendRequestObservation)

	// A frontend_response block as defined below.
	frontendResponse?: [...#FrontendResponseObservation] @go(FrontendResponse,[]FrontendResponseObservation)

	// The HTTP Correlation Protocol to use. Possible values are None, Legacy or W3C.
	httpCorrelationProtocol?: null | string @go(HTTPCorrelationProtocol,*string)

	// The ID of the API Management Service API Diagnostics Logs.
	id?: null | string @go(ID,*string)

	// Log client IP address.
	logClientIp?: null | bool @go(LogClientIP,*bool)

	// The format of the Operation Name for Application Insights telemetries. Possible values are Name, and Url. Defaults to Name.
	operationNameFormat?: null | string @go(OperationNameFormat,*string)

	// The name of the Resource Group where the API Management Service API Diagnostics Logs should exist. Changing this forces a new API Management Service API Diagnostics Logs to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Sampling (%). For high traffic APIs, please read this documentation to understand performance implications and log sampling. Valid values are between 0.0 and 100.0.
	samplingPercentage?: null | float64 @go(SamplingPercentage,*float64)

	// Logging verbosity. Possible values are verbose, information or error.
	verbosity?: null | string @go(Verbosity,*string)
}

#APIDiagnosticParameters: {
	// The ID (name) of the Diagnostics Logger.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/apimanagement/v1beta1.Logger
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	apiManagementLoggerId?: null | string @go(APIManagementLoggerID,*string)

	// The name of the API Management Service instance. Changing this forces a new API Management Service API Diagnostics Logs to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/apimanagement/v1beta1.Management
	// +kubebuilder:validation:Optional
	apiManagementName?: null | string @go(APIManagementName,*string)

	// The name of the API on which to configure the Diagnostics Logs. Changing this forces a new API Management Service API Diagnostics Logs to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/apimanagement/v1beta1.API
	// +kubebuilder:validation:Optional
	apiName?: null | string @go(APIName,*string)

	// Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
	// +kubebuilder:validation:Optional
	alwaysLogErrors?: null | bool @go(AlwaysLogErrors,*bool)

	// A backend_request block as defined below.
	// +kubebuilder:validation:Optional
	backendRequest?: [...#BackendRequestParameters] @go(BackendRequest,[]BackendRequestParameters)

	// A backend_response block as defined below.
	// +kubebuilder:validation:Optional
	backendResponse?: [...#BackendResponseParameters] @go(BackendResponse,[]BackendResponseParameters)

	// A frontend_request block as defined below.
	// +kubebuilder:validation:Optional
	frontendRequest?: [...#FrontendRequestParameters] @go(FrontendRequest,[]FrontendRequestParameters)

	// A frontend_response block as defined below.
	// +kubebuilder:validation:Optional
	frontendResponse?: [...#FrontendResponseParameters] @go(FrontendResponse,[]FrontendResponseParameters)

	// The HTTP Correlation Protocol to use. Possible values are None, Legacy or W3C.
	// +kubebuilder:validation:Optional
	httpCorrelationProtocol?: null | string @go(HTTPCorrelationProtocol,*string)

	// Log client IP address.
	// +kubebuilder:validation:Optional
	logClientIp?: null | bool @go(LogClientIP,*bool)

	// The format of the Operation Name for Application Insights telemetries. Possible values are Name, and Url. Defaults to Name.
	// +kubebuilder:validation:Optional
	operationNameFormat?: null | string @go(OperationNameFormat,*string)

	// The name of the Resource Group where the API Management Service API Diagnostics Logs should exist. Changing this forces a new API Management Service API Diagnostics Logs to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Sampling (%). For high traffic APIs, please read this documentation to understand performance implications and log sampling. Valid values are between 0.0 and 100.0.
	// +kubebuilder:validation:Optional
	samplingPercentage?: null | float64 @go(SamplingPercentage,*float64)

	// Logging verbosity. Possible values are verbose, information or error.
	// +kubebuilder:validation:Optional
	verbosity?: null | string @go(Verbosity,*string)
}

#BackendRequestInitParameters: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#DataMaskingInitParameters] @go(DataMasking,[]DataMaskingInitParameters)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#BackendRequestObservation: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#DataMaskingObservation] @go(DataMasking,[]DataMaskingObservation)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#BackendRequestParameters: {
	// Number of payload bytes to log (up to 8192).
	// +kubebuilder:validation:Optional
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	// +kubebuilder:validation:Optional
	dataMasking?: [...#DataMaskingParameters] @go(DataMasking,[]DataMaskingParameters)

	// Specifies a list of headers to log.
	// +kubebuilder:validation:Optional
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#BackendResponseDataMaskingInitParameters: {
	// A headers block as defined below.
	headers?: [...#DataMaskingHeadersInitParameters] @go(Headers,[]DataMaskingHeadersInitParameters)

	// A query_params block as defined below.
	queryParams?: [...#DataMaskingQueryParamsInitParameters] @go(QueryParams,[]DataMaskingQueryParamsInitParameters)
}

#BackendResponseDataMaskingObservation: {
	// A headers block as defined below.
	headers?: [...#DataMaskingHeadersObservation] @go(Headers,[]DataMaskingHeadersObservation)

	// A query_params block as defined below.
	queryParams?: [...#DataMaskingQueryParamsObservation] @go(QueryParams,[]DataMaskingQueryParamsObservation)
}

#BackendResponseDataMaskingParameters: {
	// A headers block as defined below.
	// +kubebuilder:validation:Optional
	headers?: [...#DataMaskingHeadersParameters] @go(Headers,[]DataMaskingHeadersParameters)

	// A query_params block as defined below.
	// +kubebuilder:validation:Optional
	queryParams?: [...#DataMaskingQueryParamsParameters] @go(QueryParams,[]DataMaskingQueryParamsParameters)
}

#BackendResponseInitParameters: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#BackendResponseDataMaskingInitParameters] @go(DataMasking,[]BackendResponseDataMaskingInitParameters)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#BackendResponseObservation: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#BackendResponseDataMaskingObservation] @go(DataMasking,[]BackendResponseDataMaskingObservation)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#BackendResponseParameters: {
	// Number of payload bytes to log (up to 8192).
	// +kubebuilder:validation:Optional
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	// +kubebuilder:validation:Optional
	dataMasking?: [...#BackendResponseDataMaskingParameters] @go(DataMasking,[]BackendResponseDataMaskingParameters)

	// Specifies a list of headers to log.
	// +kubebuilder:validation:Optional
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#DataMaskingHeadersInitParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#DataMaskingHeadersObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#DataMaskingHeadersParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#DataMaskingInitParameters: {
	// A headers block as defined below.
	headers?: [...#HeadersInitParameters] @go(Headers,[]HeadersInitParameters)

	// A query_params block as defined below.
	queryParams?: [...#QueryParamsInitParameters] @go(QueryParams,[]QueryParamsInitParameters)
}

#DataMaskingObservation: {
	// A headers block as defined below.
	headers?: [...#HeadersObservation] @go(Headers,[]HeadersObservation)

	// A query_params block as defined below.
	queryParams?: [...#QueryParamsObservation] @go(QueryParams,[]QueryParamsObservation)
}

#DataMaskingParameters: {
	// A headers block as defined below.
	// +kubebuilder:validation:Optional
	headers?: [...#HeadersParameters] @go(Headers,[]HeadersParameters)

	// A query_params block as defined below.
	// +kubebuilder:validation:Optional
	queryParams?: [...#QueryParamsParameters] @go(QueryParams,[]QueryParamsParameters)
}

#DataMaskingQueryParamsInitParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#DataMaskingQueryParamsObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#DataMaskingQueryParamsParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#FrontendRequestDataMaskingHeadersInitParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#FrontendRequestDataMaskingHeadersObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#FrontendRequestDataMaskingHeadersParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#FrontendRequestDataMaskingInitParameters: {
	// A headers block as defined below.
	headers?: [...#FrontendRequestDataMaskingHeadersInitParameters] @go(Headers,[]FrontendRequestDataMaskingHeadersInitParameters)

	// A query_params block as defined below.
	queryParams?: [...#FrontendRequestDataMaskingQueryParamsInitParameters] @go(QueryParams,[]FrontendRequestDataMaskingQueryParamsInitParameters)
}

#FrontendRequestDataMaskingObservation: {
	// A headers block as defined below.
	headers?: [...#FrontendRequestDataMaskingHeadersObservation] @go(Headers,[]FrontendRequestDataMaskingHeadersObservation)

	// A query_params block as defined below.
	queryParams?: [...#FrontendRequestDataMaskingQueryParamsObservation] @go(QueryParams,[]FrontendRequestDataMaskingQueryParamsObservation)
}

#FrontendRequestDataMaskingParameters: {
	// A headers block as defined below.
	// +kubebuilder:validation:Optional
	headers?: [...#FrontendRequestDataMaskingHeadersParameters] @go(Headers,[]FrontendRequestDataMaskingHeadersParameters)

	// A query_params block as defined below.
	// +kubebuilder:validation:Optional
	queryParams?: [...#FrontendRequestDataMaskingQueryParamsParameters] @go(QueryParams,[]FrontendRequestDataMaskingQueryParamsParameters)
}

#FrontendRequestDataMaskingQueryParamsInitParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#FrontendRequestDataMaskingQueryParamsObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#FrontendRequestDataMaskingQueryParamsParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#FrontendRequestInitParameters: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#FrontendRequestDataMaskingInitParameters] @go(DataMasking,[]FrontendRequestDataMaskingInitParameters)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#FrontendRequestObservation: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#FrontendRequestDataMaskingObservation] @go(DataMasking,[]FrontendRequestDataMaskingObservation)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#FrontendRequestParameters: {
	// Number of payload bytes to log (up to 8192).
	// +kubebuilder:validation:Optional
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	// +kubebuilder:validation:Optional
	dataMasking?: [...#FrontendRequestDataMaskingParameters] @go(DataMasking,[]FrontendRequestDataMaskingParameters)

	// Specifies a list of headers to log.
	// +kubebuilder:validation:Optional
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#FrontendResponseDataMaskingHeadersInitParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#FrontendResponseDataMaskingHeadersObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#FrontendResponseDataMaskingHeadersParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#FrontendResponseDataMaskingInitParameters: {
	// A headers block as defined below.
	headers?: [...#FrontendResponseDataMaskingHeadersInitParameters] @go(Headers,[]FrontendResponseDataMaskingHeadersInitParameters)

	// A query_params block as defined below.
	queryParams?: [...#FrontendResponseDataMaskingQueryParamsInitParameters] @go(QueryParams,[]FrontendResponseDataMaskingQueryParamsInitParameters)
}

#FrontendResponseDataMaskingObservation: {
	// A headers block as defined below.
	headers?: [...#FrontendResponseDataMaskingHeadersObservation] @go(Headers,[]FrontendResponseDataMaskingHeadersObservation)

	// A query_params block as defined below.
	queryParams?: [...#FrontendResponseDataMaskingQueryParamsObservation] @go(QueryParams,[]FrontendResponseDataMaskingQueryParamsObservation)
}

#FrontendResponseDataMaskingParameters: {
	// A headers block as defined below.
	// +kubebuilder:validation:Optional
	headers?: [...#FrontendResponseDataMaskingHeadersParameters] @go(Headers,[]FrontendResponseDataMaskingHeadersParameters)

	// A query_params block as defined below.
	// +kubebuilder:validation:Optional
	queryParams?: [...#FrontendResponseDataMaskingQueryParamsParameters] @go(QueryParams,[]FrontendResponseDataMaskingQueryParamsParameters)
}

#FrontendResponseDataMaskingQueryParamsInitParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#FrontendResponseDataMaskingQueryParamsObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#FrontendResponseDataMaskingQueryParamsParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#FrontendResponseInitParameters: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#FrontendResponseDataMaskingInitParameters] @go(DataMasking,[]FrontendResponseDataMaskingInitParameters)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#FrontendResponseObservation: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#FrontendResponseDataMaskingObservation] @go(DataMasking,[]FrontendResponseDataMaskingObservation)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#FrontendResponseParameters: {
	// Number of payload bytes to log (up to 8192).
	// +kubebuilder:validation:Optional
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	// +kubebuilder:validation:Optional
	dataMasking?: [...#FrontendResponseDataMaskingParameters] @go(DataMasking,[]FrontendResponseDataMaskingParameters)

	// Specifies a list of headers to log.
	// +kubebuilder:validation:Optional
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#HeadersInitParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#HeadersObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#HeadersParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#QueryParamsInitParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#QueryParamsObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#QueryParamsParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

// APIDiagnosticSpec defines the desired state of APIDiagnostic
#APIDiagnosticSpec: {
	forProvider: #APIDiagnosticParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #APIDiagnosticInitParameters @go(InitProvider)
}

// APIDiagnosticStatus defines the observed state of APIDiagnostic.
#APIDiagnosticStatus: {
	atProvider?: #APIDiagnosticObservation @go(AtProvider)
}

// APIDiagnostic is the Schema for the APIDiagnostics API. Manages a API Management Service API Diagnostics Logs.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#APIDiagnostic: {
	spec:    #APIDiagnosticSpec   @go(Spec)
	status?: #APIDiagnosticStatus @go(Status)
}

// APIDiagnosticList contains a list of APIDiagnostics
#APIDiagnosticList: {
	items: [...#APIDiagnostic] @go(Items,[]APIDiagnostic)
}
