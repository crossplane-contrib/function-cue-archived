// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/apimanagement/v1beta1

package v1beta1

#GlobalSchemaObservation: {
	// The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
	apiManagementName?: null | string @go(APIManagementName,*string)

	// The description of the schema.
	description?: null | string @go(Description,*string)

	// The ID of the API Management API Schema.
	id?: null | string @go(ID,*string)

	// The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The content type of the Schema. Possible values are xml and json.
	type?: null | string @go(Type,*string)

	// The string defining the document representing the Schema.
	value?: null | string @go(Value,*string)
}

#GlobalSchemaParameters: {
	// The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/apimanagement/v1beta1.Management
	// +kubebuilder:validation:Optional
	apiManagementName?: null | string @go(APIManagementName,*string)

	// The description of the schema.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The content type of the Schema. Possible values are xml and json.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// The string defining the document representing the Schema.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

// GlobalSchemaSpec defines the desired state of GlobalSchema
#GlobalSchemaSpec: {
	forProvider: #GlobalSchemaParameters @go(ForProvider)
}

// GlobalSchemaStatus defines the observed state of GlobalSchema.
#GlobalSchemaStatus: {
	atProvider?: #GlobalSchemaObservation @go(AtProvider)
}

// GlobalSchema is the Schema for the GlobalSchemas API. Manages a Global Schema within an API Management Service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#GlobalSchema: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.value)",message="value is a required parameter"
	spec:    #GlobalSchemaSpec   @go(Spec)
	status?: #GlobalSchemaStatus @go(Status)
}

// GlobalSchemaList contains a list of GlobalSchemas
#GlobalSchemaList: {
	items: [...#GlobalSchema] @go(Items,[]GlobalSchema)
}
