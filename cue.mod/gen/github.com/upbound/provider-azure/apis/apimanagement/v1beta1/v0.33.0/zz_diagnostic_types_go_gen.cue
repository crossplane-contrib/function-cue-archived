// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/apimanagement/v1beta1

package v1beta1

#BackendRequestDataMaskingHeadersObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#BackendRequestDataMaskingHeadersParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#BackendRequestDataMaskingObservation: {
	// A headers block as defined below.
	headers?: [...#BackendRequestDataMaskingHeadersObservation] @go(Headers,[]BackendRequestDataMaskingHeadersObservation)

	// A query_params block as defined below.
	queryParams?: [...#BackendRequestDataMaskingQueryParamsObservation] @go(QueryParams,[]BackendRequestDataMaskingQueryParamsObservation)
}

#BackendRequestDataMaskingParameters: {
	// A headers block as defined below.
	// +kubebuilder:validation:Optional
	headers?: [...#BackendRequestDataMaskingHeadersParameters] @go(Headers,[]BackendRequestDataMaskingHeadersParameters)

	// A query_params block as defined below.
	// +kubebuilder:validation:Optional
	queryParams?: [...#BackendRequestDataMaskingQueryParamsParameters] @go(QueryParams,[]BackendRequestDataMaskingQueryParamsParameters)
}

#BackendRequestDataMaskingQueryParamsObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#BackendRequestDataMaskingQueryParamsParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#BackendResponseDataMaskingHeadersObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#BackendResponseDataMaskingHeadersParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#BackendResponseDataMaskingQueryParamsObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#BackendResponseDataMaskingQueryParamsParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#DiagnosticBackendRequestObservation: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#BackendRequestDataMaskingObservation] @go(DataMasking,[]BackendRequestDataMaskingObservation)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#DiagnosticBackendRequestParameters: {
	// Number of payload bytes to log (up to 8192).
	// +kubebuilder:validation:Optional
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	// +kubebuilder:validation:Optional
	dataMasking?: [...#BackendRequestDataMaskingParameters] @go(DataMasking,[]BackendRequestDataMaskingParameters)

	// Specifies a list of headers to log.
	// +kubebuilder:validation:Optional
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#DiagnosticBackendResponseDataMaskingObservation: {
	// A headers block as defined below.
	headers?: [...#BackendResponseDataMaskingHeadersObservation] @go(Headers,[]BackendResponseDataMaskingHeadersObservation)

	// A query_params block as defined below.
	queryParams?: [...#BackendResponseDataMaskingQueryParamsObservation] @go(QueryParams,[]BackendResponseDataMaskingQueryParamsObservation)
}

#DiagnosticBackendResponseDataMaskingParameters: {
	// A headers block as defined below.
	// +kubebuilder:validation:Optional
	headers?: [...#BackendResponseDataMaskingHeadersParameters] @go(Headers,[]BackendResponseDataMaskingHeadersParameters)

	// A query_params block as defined below.
	// +kubebuilder:validation:Optional
	queryParams?: [...#BackendResponseDataMaskingQueryParamsParameters] @go(QueryParams,[]BackendResponseDataMaskingQueryParamsParameters)
}

#DiagnosticBackendResponseObservation: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#DiagnosticBackendResponseDataMaskingObservation] @go(DataMasking,[]DiagnosticBackendResponseDataMaskingObservation)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#DiagnosticBackendResponseParameters: {
	// Number of payload bytes to log (up to 8192).
	// +kubebuilder:validation:Optional
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	// +kubebuilder:validation:Optional
	dataMasking?: [...#DiagnosticBackendResponseDataMaskingParameters] @go(DataMasking,[]DiagnosticBackendResponseDataMaskingParameters)

	// Specifies a list of headers to log.
	// +kubebuilder:validation:Optional
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#DiagnosticFrontendRequestDataMaskingHeadersObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#DiagnosticFrontendRequestDataMaskingHeadersParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#DiagnosticFrontendRequestDataMaskingObservation: {
	// A headers block as defined below.
	headers?: [...#DiagnosticFrontendRequestDataMaskingHeadersObservation] @go(Headers,[]DiagnosticFrontendRequestDataMaskingHeadersObservation)

	// A query_params block as defined below.
	queryParams?: [...#DiagnosticFrontendRequestDataMaskingQueryParamsObservation] @go(QueryParams,[]DiagnosticFrontendRequestDataMaskingQueryParamsObservation)
}

#DiagnosticFrontendRequestDataMaskingParameters: {
	// A headers block as defined below.
	// +kubebuilder:validation:Optional
	headers?: [...#DiagnosticFrontendRequestDataMaskingHeadersParameters] @go(Headers,[]DiagnosticFrontendRequestDataMaskingHeadersParameters)

	// A query_params block as defined below.
	// +kubebuilder:validation:Optional
	queryParams?: [...#DiagnosticFrontendRequestDataMaskingQueryParamsParameters] @go(QueryParams,[]DiagnosticFrontendRequestDataMaskingQueryParamsParameters)
}

#DiagnosticFrontendRequestDataMaskingQueryParamsObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#DiagnosticFrontendRequestDataMaskingQueryParamsParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#DiagnosticFrontendRequestObservation: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#DiagnosticFrontendRequestDataMaskingObservation] @go(DataMasking,[]DiagnosticFrontendRequestDataMaskingObservation)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#DiagnosticFrontendRequestParameters: {
	// Number of payload bytes to log (up to 8192).
	// +kubebuilder:validation:Optional
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	// +kubebuilder:validation:Optional
	dataMasking?: [...#DiagnosticFrontendRequestDataMaskingParameters] @go(DataMasking,[]DiagnosticFrontendRequestDataMaskingParameters)

	// Specifies a list of headers to log.
	// +kubebuilder:validation:Optional
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#DiagnosticFrontendResponseDataMaskingHeadersObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#DiagnosticFrontendResponseDataMaskingHeadersParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#DiagnosticFrontendResponseDataMaskingObservation: {
	// A headers block as defined below.
	headers?: [...#DiagnosticFrontendResponseDataMaskingHeadersObservation] @go(Headers,[]DiagnosticFrontendResponseDataMaskingHeadersObservation)

	// A query_params block as defined below.
	queryParams?: [...#DiagnosticFrontendResponseDataMaskingQueryParamsObservation] @go(QueryParams,[]DiagnosticFrontendResponseDataMaskingQueryParamsObservation)
}

#DiagnosticFrontendResponseDataMaskingParameters: {
	// A headers block as defined below.
	// +kubebuilder:validation:Optional
	headers?: [...#DiagnosticFrontendResponseDataMaskingHeadersParameters] @go(Headers,[]DiagnosticFrontendResponseDataMaskingHeadersParameters)

	// A query_params block as defined below.
	// +kubebuilder:validation:Optional
	queryParams?: [...#DiagnosticFrontendResponseDataMaskingQueryParamsParameters] @go(QueryParams,[]DiagnosticFrontendResponseDataMaskingQueryParamsParameters)
}

#DiagnosticFrontendResponseDataMaskingQueryParamsObservation: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	value?: null | string @go(Value,*string)
}

#DiagnosticFrontendResponseDataMaskingQueryParamsParameters: {
	// The data masking mode. Possible values are Mask and Hide for query_params. The only possible value is Mask for headers.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)

	// The name of the header or the query parameter to mask.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#DiagnosticFrontendResponseObservation: {
	// Number of payload bytes to log (up to 8192).
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	dataMasking?: [...#DiagnosticFrontendResponseDataMaskingObservation] @go(DataMasking,[]DiagnosticFrontendResponseDataMaskingObservation)

	// Specifies a list of headers to log.
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#DiagnosticFrontendResponseParameters: {
	// Number of payload bytes to log (up to 8192).
	// +kubebuilder:validation:Optional
	bodyBytes?: null | float64 @go(BodyBytes,*float64)

	// A data_masking block as defined below.
	// +kubebuilder:validation:Optional
	dataMasking?: [...#DiagnosticFrontendResponseDataMaskingParameters] @go(DataMasking,[]DiagnosticFrontendResponseDataMaskingParameters)

	// Specifies a list of headers to log.
	// +kubebuilder:validation:Optional
	headersToLog?: [...null | string] @go(HeadersToLog,[]*string)
}

#DiagnosticObservation: {
	// The id of the target API Management Logger where the API Management Diagnostic should be saved.
	apiManagementLoggerId?: null | string @go(APIManagementLoggerID,*string)

	// The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
	apiManagementName?: null | string @go(APIManagementName,*string)

	// Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
	alwaysLogErrors?: null | bool @go(AlwaysLogErrors,*bool)

	// A backend_request block as defined below.
	backendRequest?: [...#DiagnosticBackendRequestObservation] @go(BackendRequest,[]DiagnosticBackendRequestObservation)

	// A backend_response block as defined below.
	backendResponse?: [...#DiagnosticBackendResponseObservation] @go(BackendResponse,[]DiagnosticBackendResponseObservation)

	// A frontend_request block as defined below.
	frontendRequest?: [...#DiagnosticFrontendRequestObservation] @go(FrontendRequest,[]DiagnosticFrontendRequestObservation)

	// A frontend_response block as defined below.
	frontendResponse?: [...#DiagnosticFrontendResponseObservation] @go(FrontendResponse,[]DiagnosticFrontendResponseObservation)

	// The HTTP Correlation Protocol to use. Possible values are None, Legacy or W3C.
	httpCorrelationProtocol?: null | string @go(HTTPCorrelationProtocol,*string)

	// The ID of the API Management Diagnostic.
	id?: null | string @go(ID,*string)

	// Log client IP address.
	logClientIp?: null | bool @go(LogClientIP,*bool)

	// The format of the Operation Name for Application Insights telemetries. Possible values are Name, and Url. Defaults to Name.
	operationNameFormat?: null | string @go(OperationNameFormat,*string)

	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Sampling (%). For high traffic APIs, please read this documentation to understand performance implications and log sampling. Valid values are between 0.0 and 100.0.
	samplingPercentage?: null | float64 @go(SamplingPercentage,*float64)

	// Logging verbosity. Possible values are verbose, information or error.
	verbosity?: null | string @go(Verbosity,*string)
}

#DiagnosticParameters: {
	// The id of the target API Management Logger where the API Management Diagnostic should be saved.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/apimanagement/v1beta1.Logger
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	apiManagementLoggerId?: null | string @go(APIManagementLoggerID,*string)

	// The Name of the API Management Service where this Diagnostic should be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/apimanagement/v1beta1.Management
	// +kubebuilder:validation:Optional
	apiManagementName?: null | string @go(APIManagementName,*string)

	// Always log errors. Send telemetry if there is an erroneous condition, regardless of sampling settings.
	// +kubebuilder:validation:Optional
	alwaysLogErrors?: null | bool @go(AlwaysLogErrors,*bool)

	// A backend_request block as defined below.
	// +kubebuilder:validation:Optional
	backendRequest?: [...#DiagnosticBackendRequestParameters] @go(BackendRequest,[]DiagnosticBackendRequestParameters)

	// A backend_response block as defined below.
	// +kubebuilder:validation:Optional
	backendResponse?: [...#DiagnosticBackendResponseParameters] @go(BackendResponse,[]DiagnosticBackendResponseParameters)

	// A frontend_request block as defined below.
	// +kubebuilder:validation:Optional
	frontendRequest?: [...#DiagnosticFrontendRequestParameters] @go(FrontendRequest,[]DiagnosticFrontendRequestParameters)

	// A frontend_response block as defined below.
	// +kubebuilder:validation:Optional
	frontendResponse?: [...#DiagnosticFrontendResponseParameters] @go(FrontendResponse,[]DiagnosticFrontendResponseParameters)

	// The HTTP Correlation Protocol to use. Possible values are None, Legacy or W3C.
	// +kubebuilder:validation:Optional
	httpCorrelationProtocol?: null | string @go(HTTPCorrelationProtocol,*string)

	// Log client IP address.
	// +kubebuilder:validation:Optional
	logClientIp?: null | bool @go(LogClientIP,*bool)

	// The format of the Operation Name for Application Insights telemetries. Possible values are Name, and Url. Defaults to Name.
	// +kubebuilder:validation:Optional
	operationNameFormat?: null | string @go(OperationNameFormat,*string)

	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Sampling (%). For high traffic APIs, please read this documentation to understand performance implications and log sampling. Valid values are between 0.0 and 100.0.
	// +kubebuilder:validation:Optional
	samplingPercentage?: null | float64 @go(SamplingPercentage,*float64)

	// Logging verbosity. Possible values are verbose, information or error.
	// +kubebuilder:validation:Optional
	verbosity?: null | string @go(Verbosity,*string)
}

// DiagnosticSpec defines the desired state of Diagnostic
#DiagnosticSpec: {
	forProvider: #DiagnosticParameters @go(ForProvider)
}

// DiagnosticStatus defines the observed state of Diagnostic.
#DiagnosticStatus: {
	atProvider?: #DiagnosticObservation @go(AtProvider)
}

// Diagnostic is the Schema for the Diagnostics API. Manages an API Management Service Diagnostic.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Diagnostic: {
	spec:    #DiagnosticSpec   @go(Spec)
	status?: #DiagnosticStatus @go(Status)
}

// DiagnosticList contains a list of Diagnostics
#DiagnosticList: {
	items: [...#Diagnostic] @go(Items,[]Diagnostic)
}
