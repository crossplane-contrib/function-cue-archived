// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/apimanagement/v1beta1

package v1beta1

#RedisCacheInitParameters: {
	// The location where to use cache from. Possible values are default and valid Azure regions. Defaults to default.
	cacheLocation?: null | string @go(CacheLocation,*string)

	// The description of the API Management Redis Cache.
	description?: null | string @go(Description,*string)
}

#RedisCacheObservation: {
	// The resource ID of the API Management Service from which to create this external cache. Changing this forces a new API Management Redis Cache to be created.
	apiManagementId?: null | string @go(APIManagementID,*string)

	// The location where to use cache from. Possible values are default and valid Azure regions. Defaults to default.
	cacheLocation?: null | string @go(CacheLocation,*string)

	// The description of the API Management Redis Cache.
	description?: null | string @go(Description,*string)

	// The ID of the API Management Redis Cache.
	id?: null | string @go(ID,*string)

	// The resource ID of the Cache for Redis.
	redisCacheId?: null | string @go(RedisCacheID,*string)
}

#RedisCacheParameters: {
	// The resource ID of the API Management Service from which to create this external cache. Changing this forces a new API Management Redis Cache to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/apimanagement/v1beta1.Management
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	apiManagementId?: null | string @go(APIManagementID,*string)

	// The location where to use cache from. Possible values are default and valid Azure regions. Defaults to default.
	// +kubebuilder:validation:Optional
	cacheLocation?: null | string @go(CacheLocation,*string)

	// The description of the API Management Redis Cache.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The resource ID of the Cache for Redis.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cache/v1beta1.RedisCache
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	redisCacheId?: null | string @go(RedisCacheID,*string)
}

// RedisCacheSpec defines the desired state of RedisCache
#RedisCacheSpec: {
	forProvider: #RedisCacheParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RedisCacheInitParameters @go(InitProvider)
}

// RedisCacheStatus defines the observed state of RedisCache.
#RedisCacheStatus: {
	atProvider?: #RedisCacheObservation @go(AtProvider)
}

// RedisCache is the Schema for the RedisCaches API. Manages a API Management Redis Cache.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#RedisCache: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connectionStringSecretRef)",message="spec.forProvider.connectionStringSecretRef is a required parameter"
	spec:    #RedisCacheSpec   @go(Spec)
	status?: #RedisCacheStatus @go(Status)
}

// RedisCacheList contains a list of RedisCaches
#RedisCacheList: {
	items: [...#RedisCache] @go(Items,[]RedisCache)
}
