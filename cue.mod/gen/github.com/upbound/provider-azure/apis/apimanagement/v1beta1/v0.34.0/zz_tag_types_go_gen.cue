// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/apimanagement/v1beta1

package v1beta1

#TagObservation: {
	// The ID of the API Management. Changing this forces a new API Management Tag to be created.
	apiManagementId?: null | string @go(APIManagementID,*string)

	// The display name of the API Management Tag. Defaults to the name.
	displayName?: null | string @go(DisplayName,*string)

	// The ID of the API Management Tag.
	id?: null | string @go(ID,*string)
}

#TagParameters: {
	// The ID of the API Management. Changing this forces a new API Management Tag to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/apimanagement/v1beta1.Management
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	apiManagementId?: null | string @go(APIManagementID,*string)

	// The display name of the API Management Tag. Defaults to the name.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)
}

// TagSpec defines the desired state of Tag
#TagSpec: {
	forProvider: #TagParameters @go(ForProvider)
}

// TagStatus defines the observed state of Tag.
#TagStatus: {
	atProvider?: #TagObservation @go(AtProvider)
}

// Tag is the Schema for the Tags API. Manages a API Management Tag.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Tag: {
	spec:    #TagSpec   @go(Spec)
	status?: #TagStatus @go(Status)
}

// TagList contains a list of Tags
#TagList: {
	items: [...#Tag] @go(Items,[]Tag)
}
