// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/apimanagement/v1beta1

package v1beta1

#EmailTemplateInitParameters: {
	// The body of the Email. Its format has to be a well-formed HTML document.
	body?: null | string @go(Body,*string)

	// The subject of the Email.
	subject?: null | string @go(Subject,*string)
}

#EmailTemplateObservation: {
	// The name of the API Management Service in which the Email Template should exist. Changing this forces a new API Management Email Template to be created.
	apiManagementName?: null | string @go(APIManagementName,*string)

	// The body of the Email. Its format has to be a well-formed HTML document.
	body?: null | string @go(Body,*string)

	// The description of the Email Template.
	description?: null | string @go(Description,*string)

	// The ID of the API Management Email Template.
	id?: null | string @go(ID,*string)

	// The name of the Resource Group where the API Management Email Template should exist. Changing this forces a new API Management Email Template to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The subject of the Email.
	subject?: null | string @go(Subject,*string)

	// The name of the Email Template. Possible values are AccountClosedDeveloper, ApplicationApprovedNotificationMessage, ConfirmSignUpIdentityDefault, EmailChangeIdentityDefault, InviteUserNotificationMessage, NewCommentNotificationMessage, NewDeveloperNotificationMessage, NewIssueNotificationMessage, PasswordResetByAdminNotificationMessage, PasswordResetIdentityDefault, PurchaseDeveloperNotificationMessage, QuotaLimitApproachingDeveloperNotificationMessage, RejectDeveloperNotificationMessage, RequestDeveloperNotificationMessage. Changing this forces a new API Management Email Template to be created.
	templateName?: null | string @go(TemplateName,*string)

	// The title of the Email Template.
	title?: null | string @go(Title,*string)
}

#EmailTemplateParameters: {
	// The name of the API Management Service in which the Email Template should exist. Changing this forces a new API Management Email Template to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/apimanagement/v1beta1.Management
	// +kubebuilder:validation:Optional
	apiManagementName?: null | string @go(APIManagementName,*string)

	// The body of the Email. Its format has to be a well-formed HTML document.
	// +kubebuilder:validation:Optional
	body?: null | string @go(Body,*string)

	// The name of the Resource Group where the API Management Email Template should exist. Changing this forces a new API Management Email Template to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The subject of the Email.
	// +kubebuilder:validation:Optional
	subject?: null | string @go(Subject,*string)

	// The name of the Email Template. Possible values are AccountClosedDeveloper, ApplicationApprovedNotificationMessage, ConfirmSignUpIdentityDefault, EmailChangeIdentityDefault, InviteUserNotificationMessage, NewCommentNotificationMessage, NewDeveloperNotificationMessage, NewIssueNotificationMessage, PasswordResetByAdminNotificationMessage, PasswordResetIdentityDefault, PurchaseDeveloperNotificationMessage, QuotaLimitApproachingDeveloperNotificationMessage, RejectDeveloperNotificationMessage, RequestDeveloperNotificationMessage. Changing this forces a new API Management Email Template to be created.
	// +kubebuilder:validation:Required
	templateName?: null | string @go(TemplateName,*string)
}

// EmailTemplateSpec defines the desired state of EmailTemplate
#EmailTemplateSpec: {
	forProvider: #EmailTemplateParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EmailTemplateInitParameters @go(InitProvider)
}

// EmailTemplateStatus defines the observed state of EmailTemplate.
#EmailTemplateStatus: {
	atProvider?: #EmailTemplateObservation @go(AtProvider)
}

// EmailTemplate is the Schema for the EmailTemplates API. Manages a API Management Email Template.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#EmailTemplate: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.body) || (has(self.initProvider) && has(self.initProvider.body))",message="spec.forProvider.body is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subject) || (has(self.initProvider) && has(self.initProvider.subject))",message="spec.forProvider.subject is a required parameter"
	spec:    #EmailTemplateSpec   @go(Spec)
	status?: #EmailTemplateStatus @go(Status)
}

// EmailTemplateList contains a list of EmailTemplates
#EmailTemplateList: {
	items: [...#EmailTemplate] @go(Items,[]EmailTemplate)
}
