// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/apimanagement/v1beta1

package v1beta1

#UserInitParameters: {
	// The kind of confirmation email which will be sent to this user. Possible values are invite and signup. Changing this forces a new resource to be created.
	confirmation?: null | string @go(Confirmation,*string)

	// The email address associated with this user.
	email?: null | string @go(Email,*string)

	// The first name for this user.
	firstName?: null | string @go(FirstName,*string)

	// The last name for this user.
	lastName?: null | string @go(LastName,*string)

	// A note about this user.
	note?: null | string @go(Note,*string)

	// The state of this user. Possible values are active, blocked and pending.
	state?: null | string @go(State,*string)
}

#UserObservation: {
	// The name of the API Management Service in which the User should be created. Changing this forces a new resource to be created.
	apiManagementName?: null | string @go(APIManagementName,*string)

	// The kind of confirmation email which will be sent to this user. Possible values are invite and signup. Changing this forces a new resource to be created.
	confirmation?: null | string @go(Confirmation,*string)

	// The email address associated with this user.
	email?: null | string @go(Email,*string)

	// The first name for this user.
	firstName?: null | string @go(FirstName,*string)

	// The ID of the API Management User.
	id?: null | string @go(ID,*string)

	// The last name for this user.
	lastName?: null | string @go(LastName,*string)

	// A note about this user.
	note?: null | string @go(Note,*string)

	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The state of this user. Possible values are active, blocked and pending.
	state?: null | string @go(State,*string)
}

#UserParameters: {
	// The name of the API Management Service in which the User should be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/apimanagement/v1beta1.Management
	// +kubebuilder:validation:Optional
	apiManagementName?: null | string @go(APIManagementName,*string)

	// The kind of confirmation email which will be sent to this user. Possible values are invite and signup. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	confirmation?: null | string @go(Confirmation,*string)

	// The email address associated with this user.
	// +kubebuilder:validation:Optional
	email?: null | string @go(Email,*string)

	// The first name for this user.
	// +kubebuilder:validation:Optional
	firstName?: null | string @go(FirstName,*string)

	// The last name for this user.
	// +kubebuilder:validation:Optional
	lastName?: null | string @go(LastName,*string)

	// A note about this user.
	// +kubebuilder:validation:Optional
	note?: null | string @go(Note,*string)

	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The state of this user. Possible values are active, blocked and pending.
	// +kubebuilder:validation:Optional
	state?: null | string @go(State,*string)
}

// UserSpec defines the desired state of User
#UserSpec: {
	forProvider: #UserParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #UserInitParameters @go(InitProvider)
}

// UserStatus defines the observed state of User.
#UserStatus: {
	atProvider?: #UserObservation @go(AtProvider)
}

// User is the Schema for the Users API. Manages an API Management User.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#User: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.email) || has(self.initProvider.email)",message="email is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.firstName) || has(self.initProvider.firstName)",message="firstName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lastName) || has(self.initProvider.lastName)",message="lastName is a required parameter"
	spec:    #UserSpec   @go(Spec)
	status?: #UserStatus @go(Status)
}

// UserList contains a list of Users
#UserList: {
	items: [...#User] @go(Items,[]User)
}
