// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/dbformysql/v1beta1

package v1beta1

#ActiveDirectoryAdministratorObservation: {
	// The ID of the MySQL Active Directory Administrator.
	id?: null | string @go(ID,*string)

	// The login name of the principal to set as the server administrator
	login?: null | string @go(Login,*string)

	// The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
	objectId?: null | string @go(ObjectID,*string)

	// The name of the resource group for the MySQL server. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name of the MySQL Server on which to set the administrator. Changing this forces a new resource to be created.
	serverName?: null | string @go(ServerName,*string)

	// The Azure Tenant ID
	tenantId?: null | string @go(TenantID,*string)
}

#ActiveDirectoryAdministratorParameters: {
	// The login name of the principal to set as the server administrator
	// +kubebuilder:validation:Optional
	login?: null | string @go(Login,*string)

	// The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
	// +kubebuilder:validation:Optional
	objectId?: null | string @go(ObjectID,*string)

	// The name of the resource group for the MySQL server. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name of the MySQL Server on which to set the administrator. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/dbformysql/v1beta1.Server
	// +kubebuilder:validation:Optional
	serverName?: null | string @go(ServerName,*string)

	// The Azure Tenant ID
	// +kubebuilder:validation:Optional
	tenantId?: null | string @go(TenantID,*string)
}

// ActiveDirectoryAdministratorSpec defines the desired state of ActiveDirectoryAdministrator
#ActiveDirectoryAdministratorSpec: {
	forProvider: #ActiveDirectoryAdministratorParameters @go(ForProvider)
}

// ActiveDirectoryAdministratorStatus defines the observed state of ActiveDirectoryAdministrator.
#ActiveDirectoryAdministratorStatus: {
	atProvider?: #ActiveDirectoryAdministratorObservation @go(AtProvider)
}

// ActiveDirectoryAdministrator is the Schema for the ActiveDirectoryAdministrators API. Manages an Active Directory administrator on a MySQL server
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ActiveDirectoryAdministrator: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.login)",message="login is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.objectId)",message="objectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.tenantId)",message="tenantId is a required parameter"
	spec:    #ActiveDirectoryAdministratorSpec   @go(Spec)
	status?: #ActiveDirectoryAdministratorStatus @go(Status)
}

// ActiveDirectoryAdministratorList contains a list of ActiveDirectoryAdministrators
#ActiveDirectoryAdministratorList: {
	items: [...#ActiveDirectoryAdministrator] @go(Items,[]ActiveDirectoryAdministrator)
}
