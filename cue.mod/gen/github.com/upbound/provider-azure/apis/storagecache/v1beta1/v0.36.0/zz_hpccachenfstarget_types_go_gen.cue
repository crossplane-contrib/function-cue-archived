// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/storagecache/v1beta1

package v1beta1

#HPCCacheNFSTargetInitParameters: {
	// Can be specified multiple times to define multiple namespace_junction. Each namespace_juntion block supports fields documented below.
	namespaceJunction?: [...#NamespaceJunctionInitParameters] @go(NamespaceJunction,[]NamespaceJunctionInitParameters)

	// The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
	targetHostName?: null | string @go(TargetHostName,*string)

	// The type of usage of the HPC Cache NFS Target. Possible values are: READ_HEAVY_INFREQ, READ_HEAVY_CHECK_180, WRITE_WORKLOAD_15, WRITE_AROUND, WRITE_WORKLOAD_CHECK_30, WRITE_WORKLOAD_CHECK_60 and WRITE_WORKLOAD_CLOUDWS.
	usageModel?: null | string @go(UsageModel,*string)
}

#HPCCacheNFSTargetObservation: {
	// The name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
	cacheName?: null | string @go(CacheName,*string)

	// The ID of the HPC Cache NFS Target.
	id?: null | string @go(ID,*string)

	// Can be specified multiple times to define multiple namespace_junction. Each namespace_juntion block supports fields documented below.
	namespaceJunction?: [...#NamespaceJunctionObservation] @go(NamespaceJunction,[]NamespaceJunctionObservation)

	// The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
	targetHostName?: null | string @go(TargetHostName,*string)

	// The type of usage of the HPC Cache NFS Target. Possible values are: READ_HEAVY_INFREQ, READ_HEAVY_CHECK_180, WRITE_WORKLOAD_15, WRITE_AROUND, WRITE_WORKLOAD_CHECK_30, WRITE_WORKLOAD_CHECK_60 and WRITE_WORKLOAD_CLOUDWS.
	usageModel?: null | string @go(UsageModel,*string)
}

#HPCCacheNFSTargetParameters: {
	// The name HPC Cache, which the HPC Cache NFS Target will be added to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storagecache/v1beta1.HPCCache
	// +kubebuilder:validation:Optional
	cacheName?: null | string @go(CacheName,*string)

	// Can be specified multiple times to define multiple namespace_junction. Each namespace_juntion block supports fields documented below.
	// +kubebuilder:validation:Optional
	namespaceJunction?: [...#NamespaceJunctionParameters] @go(NamespaceJunction,[]NamespaceJunctionParameters)

	// The name of the Resource Group in which to create the HPC Cache NFS Target. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The IP address or fully qualified domain name (FQDN) of the HPC Cache NFS target. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	targetHostName?: null | string @go(TargetHostName,*string)

	// The type of usage of the HPC Cache NFS Target. Possible values are: READ_HEAVY_INFREQ, READ_HEAVY_CHECK_180, WRITE_WORKLOAD_15, WRITE_AROUND, WRITE_WORKLOAD_CHECK_30, WRITE_WORKLOAD_CHECK_60 and WRITE_WORKLOAD_CLOUDWS.
	// +kubebuilder:validation:Optional
	usageModel?: null | string @go(UsageModel,*string)
}

#NamespaceJunctionInitParameters: {
	// The name of the access policy applied to this target. Defaults to default.
	accessPolicyName?: null | string @go(AccessPolicyName,*string)

	// The NFS export of this NFS target within the HPC Cache NFS Target.
	nfsExport?: null | string @go(NFSExport,*string)

	// The client-facing file path of this NFS target within the HPC Cache NFS Target.
	namespacePath?: null | string @go(NamespacePath,*string)

	// The relative subdirectory path from the nfs_export to map to the namespace_path. Defaults to "", in which case the whole nfs_export is exported.
	targetPath?: null | string @go(TargetPath,*string)
}

#NamespaceJunctionObservation: {
	// The name of the access policy applied to this target. Defaults to default.
	accessPolicyName?: null | string @go(AccessPolicyName,*string)

	// The NFS export of this NFS target within the HPC Cache NFS Target.
	nfsExport?: null | string @go(NFSExport,*string)

	// The client-facing file path of this NFS target within the HPC Cache NFS Target.
	namespacePath?: null | string @go(NamespacePath,*string)

	// The relative subdirectory path from the nfs_export to map to the namespace_path. Defaults to "", in which case the whole nfs_export is exported.
	targetPath?: null | string @go(TargetPath,*string)
}

#NamespaceJunctionParameters: {
	// The name of the access policy applied to this target. Defaults to default.
	// +kubebuilder:validation:Optional
	accessPolicyName?: null | string @go(AccessPolicyName,*string)

	// The NFS export of this NFS target within the HPC Cache NFS Target.
	// +kubebuilder:validation:Optional
	nfsExport?: null | string @go(NFSExport,*string)

	// The client-facing file path of this NFS target within the HPC Cache NFS Target.
	// +kubebuilder:validation:Optional
	namespacePath?: null | string @go(NamespacePath,*string)

	// The relative subdirectory path from the nfs_export to map to the namespace_path. Defaults to "", in which case the whole nfs_export is exported.
	// +kubebuilder:validation:Optional
	targetPath?: null | string @go(TargetPath,*string)
}

// HPCCacheNFSTargetSpec defines the desired state of HPCCacheNFSTarget
#HPCCacheNFSTargetSpec: {
	forProvider: #HPCCacheNFSTargetParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #HPCCacheNFSTargetInitParameters @go(InitProvider)
}

// HPCCacheNFSTargetStatus defines the observed state of HPCCacheNFSTarget.
#HPCCacheNFSTargetStatus: {
	atProvider?: #HPCCacheNFSTargetObservation @go(AtProvider)
}

// HPCCacheNFSTarget is the Schema for the HPCCacheNFSTargets API. Manages a NFS Target within a HPC Cache.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#HPCCacheNFSTarget: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.namespaceJunction) || has(self.initProvider.namespaceJunction)",message="namespaceJunction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetHostName) || has(self.initProvider.targetHostName)",message="targetHostName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.usageModel) || has(self.initProvider.usageModel)",message="usageModel is a required parameter"
	spec:    #HPCCacheNFSTargetSpec   @go(Spec)
	status?: #HPCCacheNFSTargetStatus @go(Status)
}

// HPCCacheNFSTargetList contains a list of HPCCacheNFSTargets
#HPCCacheNFSTargetList: {
	items: [...#HPCCacheNFSTarget] @go(Items,[]HPCCacheNFSTarget)
}
