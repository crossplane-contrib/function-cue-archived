// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/storagecache/v1beta1

package v1beta1

#AccessRuleInitParameters: {
	// The access level for this rule. Possible values are: rw, ro, no.
	access?: null | string @go(Access,*string)

	// The anonymous GID used when root_squash_enabled is true.
	anonymousGid?: null | float64 @go(AnonymousGID,*float64)

	// The anonymous UID used when root_squash_enabled is true.
	anonymousUid?: null | float64 @go(AnonymousUID,*float64)

	// The filter applied to the scope for this rule. The filter's format depends on its scope: default scope matches all clients and has no filter value; network scope takes a CIDR format; host takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
	filter?: null | string @go(Filter,*string)

	// Whether to enable root squash?
	rootSquashEnabled?: null | bool @go(RootSquashEnabled,*bool)

	// The scope of this rule. The scope and (potentially) the filter determine which clients match the rule. Possible values are: default, network, host.
	scope?: null | string @go(Scope,*string)

	// Whether allow access to subdirectories under the root export?
	submountAccessEnabled?: null | bool @go(SubmountAccessEnabled,*bool)

	// Whether SUID is allowed?
	suidEnabled?: null | bool @go(SuidEnabled,*bool)
}

#AccessRuleObservation: {
	// The access level for this rule. Possible values are: rw, ro, no.
	access?: null | string @go(Access,*string)

	// The anonymous GID used when root_squash_enabled is true.
	anonymousGid?: null | float64 @go(AnonymousGID,*float64)

	// The anonymous UID used when root_squash_enabled is true.
	anonymousUid?: null | float64 @go(AnonymousUID,*float64)

	// The filter applied to the scope for this rule. The filter's format depends on its scope: default scope matches all clients and has no filter value; network scope takes a CIDR format; host takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
	filter?: null | string @go(Filter,*string)

	// Whether to enable root squash?
	rootSquashEnabled?: null | bool @go(RootSquashEnabled,*bool)

	// The scope of this rule. The scope and (potentially) the filter determine which clients match the rule. Possible values are: default, network, host.
	scope?: null | string @go(Scope,*string)

	// Whether allow access to subdirectories under the root export?
	submountAccessEnabled?: null | bool @go(SubmountAccessEnabled,*bool)

	// Whether SUID is allowed?
	suidEnabled?: null | bool @go(SuidEnabled,*bool)
}

#AccessRuleParameters: {
	// The access level for this rule. Possible values are: rw, ro, no.
	// +kubebuilder:validation:Optional
	access?: null | string @go(Access,*string)

	// The anonymous GID used when root_squash_enabled is true.
	// +kubebuilder:validation:Optional
	anonymousGid?: null | float64 @go(AnonymousGID,*float64)

	// The anonymous UID used when root_squash_enabled is true.
	// +kubebuilder:validation:Optional
	anonymousUid?: null | float64 @go(AnonymousUID,*float64)

	// The filter applied to the scope for this rule. The filter's format depends on its scope: default scope matches all clients and has no filter value; network scope takes a CIDR format; host takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
	// +kubebuilder:validation:Optional
	filter?: null | string @go(Filter,*string)

	// Whether to enable root squash?
	// +kubebuilder:validation:Optional
	rootSquashEnabled?: null | bool @go(RootSquashEnabled,*bool)

	// The scope of this rule. The scope and (potentially) the filter determine which clients match the rule. Possible values are: default, network, host.
	// +kubebuilder:validation:Optional
	scope?: null | string @go(Scope,*string)

	// Whether allow access to subdirectories under the root export?
	// +kubebuilder:validation:Optional
	submountAccessEnabled?: null | bool @go(SubmountAccessEnabled,*bool)

	// Whether SUID is allowed?
	// +kubebuilder:validation:Optional
	suidEnabled?: null | bool @go(SuidEnabled,*bool)
}

#BindInitParameters: {
	// The Bind Distinguished Name (DN) identity to be used in the secure LDAP connection.
	dn?: null | string @go(Dn,*string)
}

#BindObservation: {
	// The Bind Distinguished Name (DN) identity to be used in the secure LDAP connection.
	dn?: null | string @go(Dn,*string)
}

#BindParameters: {
	// The Bind Distinguished Name (DN) identity to be used in the secure LDAP connection.
	// +kubebuilder:validation:Optional
	dn?: null | string @go(Dn,*string)
}

#DNSInitParameters: {
	// The DNS search domain for the HPC Cache.
	searchDomain?: null | string @go(SearchDomain,*string)

	// A list of DNS servers for the HPC Cache. At most three IP(s) are allowed to set.
	servers?: [...null | string] @go(Servers,[]*string)
}

#DNSObservation: {
	// The DNS search domain for the HPC Cache.
	searchDomain?: null | string @go(SearchDomain,*string)

	// A list of DNS servers for the HPC Cache. At most three IP(s) are allowed to set.
	servers?: [...null | string] @go(Servers,[]*string)
}

#DNSParameters: {
	// The DNS search domain for the HPC Cache.
	// +kubebuilder:validation:Optional
	searchDomain?: null | string @go(SearchDomain,*string)

	// A list of DNS servers for the HPC Cache. At most three IP(s) are allowed to set.
	// +kubebuilder:validation:Optional
	servers: [...null | string] @go(Servers,[]*string)
}

#DefaultAccessPolicyInitParameters: {
	// One to three access_rule blocks as defined above.
	accessRule?: [...#AccessRuleInitParameters] @go(AccessRule,[]AccessRuleInitParameters)
}

#DefaultAccessPolicyObservation: {
	// One to three access_rule blocks as defined above.
	accessRule?: [...#AccessRuleObservation] @go(AccessRule,[]AccessRuleObservation)
}

#DefaultAccessPolicyParameters: {
	// One to three access_rule blocks as defined above.
	// +kubebuilder:validation:Optional
	accessRule: [...#AccessRuleParameters] @go(AccessRule,[]AccessRuleParameters)
}

#DirectoryActiveDirectoryInitParameters: {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
	cacheNetbiosName?: null | string @go(CacheNetbiosName,*string)

	// The primary DNS IP address used to resolve the Active Directory domain controller's FQDN.
	dnsPrimaryIp?: null | string @go(DNSPrimaryIP,*string)

	// The secondary DNS IP address used to resolve the Active Directory domain controller's FQDN.
	dnsSecondaryIp?: null | string @go(DNSSecondaryIP,*string)

	// The fully qualified domain name of the Active Directory domain controller.
	domainName?: null | string @go(DomainName,*string)

	// The Active Directory domain's NetBIOS name.
	domainNetbiosName?: null | string @go(DomainNetbiosName,*string)

	// The username of the Active Directory domain administrator.
	username?: null | string @go(Username,*string)
}

#DirectoryActiveDirectoryObservation: {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
	cacheNetbiosName?: null | string @go(CacheNetbiosName,*string)

	// The primary DNS IP address used to resolve the Active Directory domain controller's FQDN.
	dnsPrimaryIp?: null | string @go(DNSPrimaryIP,*string)

	// The secondary DNS IP address used to resolve the Active Directory domain controller's FQDN.
	dnsSecondaryIp?: null | string @go(DNSSecondaryIP,*string)

	// The fully qualified domain name of the Active Directory domain controller.
	domainName?: null | string @go(DomainName,*string)

	// The Active Directory domain's NetBIOS name.
	domainNetbiosName?: null | string @go(DomainNetbiosName,*string)

	// The username of the Active Directory domain administrator.
	username?: null | string @go(Username,*string)
}

#DirectoryActiveDirectoryParameters: {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
	// +kubebuilder:validation:Optional
	cacheNetbiosName?: null | string @go(CacheNetbiosName,*string)

	// The primary DNS IP address used to resolve the Active Directory domain controller's FQDN.
	// +kubebuilder:validation:Optional
	dnsPrimaryIp?: null | string @go(DNSPrimaryIP,*string)

	// The secondary DNS IP address used to resolve the Active Directory domain controller's FQDN.
	// +kubebuilder:validation:Optional
	dnsSecondaryIp?: null | string @go(DNSSecondaryIP,*string)

	// The fully qualified domain name of the Active Directory domain controller.
	// +kubebuilder:validation:Optional
	domainName?: null | string @go(DomainName,*string)

	// The Active Directory domain's NetBIOS name.
	// +kubebuilder:validation:Optional
	domainNetbiosName?: null | string @go(DomainNetbiosName,*string)

	// The username of the Active Directory domain administrator.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#DirectoryFlatFileInitParameters: {
	// The URI of the file containing group information (/etc/group file format in Unix-like OS).
	groupFileUri?: null | string @go(GroupFileURI,*string)

	// The URI of the file containing user information (/etc/passwd file format in Unix-like OS).
	passwordFileUri?: null | string @go(PasswordFileURI,*string)
}

#DirectoryFlatFileObservation: {
	// The URI of the file containing group information (/etc/group file format in Unix-like OS).
	groupFileUri?: null | string @go(GroupFileURI,*string)

	// The URI of the file containing user information (/etc/passwd file format in Unix-like OS).
	passwordFileUri?: null | string @go(PasswordFileURI,*string)
}

#DirectoryFlatFileParameters: {
	// The URI of the file containing group information (/etc/group file format in Unix-like OS).
	// +kubebuilder:validation:Optional
	groupFileUri?: null | string @go(GroupFileURI,*string)

	// The URI of the file containing user information (/etc/passwd file format in Unix-like OS).
	// +kubebuilder:validation:Optional
	passwordFileUri?: null | string @go(PasswordFileURI,*string)
}

#DirectoryLdapInitParameters: {
	// The base distinguished name (DN) for the LDAP domain.
	baseDn?: null | string @go(BaseDn,*string)

	// A bind block as defined above.
	bind?: [...#BindInitParameters] @go(Bind,[]BindInitParameters)

	// The URI of the CA certificate to validate the LDAP secure connection.
	certificateValidationUri?: null | string @go(CertificateValidationURI,*string)

	// Whether the certificate should be automatically downloaded. This can be set to true only when certificate_validation_uri is provided.
	downloadCertificateAutomatically?: null | bool @go(DownloadCertificateAutomatically,*bool)

	// Whether the LDAP connection should be encrypted?
	encrypted?: null | bool @go(Encrypted,*bool)

	// The FQDN or IP address of the LDAP server.
	server?: null | string @go(Server,*string)
}

#DirectoryLdapObservation: {
	// The base distinguished name (DN) for the LDAP domain.
	baseDn?: null | string @go(BaseDn,*string)

	// A bind block as defined above.
	bind?: [...#BindObservation] @go(Bind,[]BindObservation)

	// The URI of the CA certificate to validate the LDAP secure connection.
	certificateValidationUri?: null | string @go(CertificateValidationURI,*string)

	// Whether the certificate should be automatically downloaded. This can be set to true only when certificate_validation_uri is provided.
	downloadCertificateAutomatically?: null | bool @go(DownloadCertificateAutomatically,*bool)

	// Whether the LDAP connection should be encrypted?
	encrypted?: null | bool @go(Encrypted,*bool)

	// The FQDN or IP address of the LDAP server.
	server?: null | string @go(Server,*string)
}

#DirectoryLdapParameters: {
	// The base distinguished name (DN) for the LDAP domain.
	// +kubebuilder:validation:Optional
	baseDn?: null | string @go(BaseDn,*string)

	// A bind block as defined above.
	// +kubebuilder:validation:Optional
	bind?: [...#BindParameters] @go(Bind,[]BindParameters)

	// The URI of the CA certificate to validate the LDAP secure connection.
	// +kubebuilder:validation:Optional
	certificateValidationUri?: null | string @go(CertificateValidationURI,*string)

	// Whether the certificate should be automatically downloaded. This can be set to true only when certificate_validation_uri is provided.
	// +kubebuilder:validation:Optional
	downloadCertificateAutomatically?: null | bool @go(DownloadCertificateAutomatically,*bool)

	// Whether the LDAP connection should be encrypted?
	// +kubebuilder:validation:Optional
	encrypted?: null | bool @go(Encrypted,*bool)

	// The FQDN or IP address of the LDAP server.
	// +kubebuilder:validation:Optional
	server?: null | string @go(Server,*string)
}

#HPCCacheInitParameters: {
	// Specifies whether the HPC Cache automatically rotates Encryption Key to the latest version.
	automaticallyRotateKeyToLatestEnabled?: null | bool @go(AutomaticallyRotateKeyToLatestEnabled,*bool)

	// The size of the HPC Cache, in GB. Possible values are 3072, 6144, 12288, 21623, 24576, 43246, 49152 and 86491. Changing this forces a new resource to be created.
	cacheSizeInGb?: null | float64 @go(CacheSizeInGb,*float64)

	// A dns block as defined below.
	dns?: [...#DNSInitParameters] @go(DNS,[]DNSInitParameters)

	// A default_access_policy block as defined below.
	defaultAccessPolicy?: [...#DefaultAccessPolicyInitParameters] @go(DefaultAccessPolicy,[]DefaultAccessPolicyInitParameters)

	// A directory_active_directory block as defined below.
	directoryActiveDirectory?: [...#DirectoryActiveDirectoryInitParameters] @go(DirectoryActiveDirectory,[]DirectoryActiveDirectoryInitParameters)

	// A directory_flat_file block as defined below.
	directoryFlatFile?: [...#DirectoryFlatFileInitParameters] @go(DirectoryFlatFile,[]DirectoryFlatFileInitParameters)

	// A directory_ldap block as defined below.
	directoryLdap?: [...#DirectoryLdapInitParameters] @go(DirectoryLdap,[]DirectoryLdapInitParameters)

	// An identity block as defined below. Changing this forces a new resource to be created.
	identity?: [...#IdentityInitParameters] @go(Identity,[]IdentityInitParameters)

	// The ID of the Key Vault Key which should be used to encrypt the data in this HPC Cache.
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)

	// Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.
	mtu?: null | float64 @go(Mtu,*float64)

	// The NTP server IP Address or FQDN for the HPC Cache. Defaults to time.windows.com.
	ntpServer?: null | string @go(NtpServer,*string)

	// The SKU of HPC Cache to use. Possible values are (ReadWrite) - Standard_2G, Standard_4G Standard_8G or (ReadOnly) - Standard_L4_5G, Standard_L9G, and Standard_L16G. Changing this forces a new resource to be created.
	skuName?: null | string @go(SkuName,*string)

	// A mapping of tags to assign to the HPC Cache.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#HPCCacheObservation: {
	// Specifies whether the HPC Cache automatically rotates Encryption Key to the latest version.
	automaticallyRotateKeyToLatestEnabled?: null | bool @go(AutomaticallyRotateKeyToLatestEnabled,*bool)

	// The size of the HPC Cache, in GB. Possible values are 3072, 6144, 12288, 21623, 24576, 43246, 49152 and 86491. Changing this forces a new resource to be created.
	cacheSizeInGb?: null | float64 @go(CacheSizeInGb,*float64)

	// A dns block as defined below.
	dns?: [...#DNSObservation] @go(DNS,[]DNSObservation)

	// A default_access_policy block as defined below.
	defaultAccessPolicy?: [...#DefaultAccessPolicyObservation] @go(DefaultAccessPolicy,[]DefaultAccessPolicyObservation)

	// A directory_active_directory block as defined below.
	directoryActiveDirectory?: [...#DirectoryActiveDirectoryObservation] @go(DirectoryActiveDirectory,[]DirectoryActiveDirectoryObservation)

	// A directory_flat_file block as defined below.
	directoryFlatFile?: [...#DirectoryFlatFileObservation] @go(DirectoryFlatFile,[]DirectoryFlatFileObservation)

	// A directory_ldap block as defined below.
	directoryLdap?: [...#DirectoryLdapObservation] @go(DirectoryLdap,[]DirectoryLdapObservation)

	// The id of the HPC Cache.
	id?: null | string @go(ID,*string)

	// An identity block as defined below. Changing this forces a new resource to be created.
	identity?: [...#IdentityObservation] @go(Identity,[]IdentityObservation)

	// The ID of the Key Vault Key which should be used to encrypt the data in this HPC Cache.
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)

	// Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A list of IP Addresses where the HPC Cache can be mounted.
	mountAddresses?: [...null | string] @go(MountAddresses,[]*string)

	// The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.
	mtu?: null | float64 @go(Mtu,*float64)

	// The NTP server IP Address or FQDN for the HPC Cache. Defaults to time.windows.com.
	ntpServer?: null | string @go(NtpServer,*string)

	// The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The SKU of HPC Cache to use. Possible values are (ReadWrite) - Standard_2G, Standard_4G Standard_8G or (ReadOnly) - Standard_L4_5G, Standard_L9G, and Standard_L16G. Changing this forces a new resource to be created.
	skuName?: null | string @go(SkuName,*string)

	// The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
	subnetId?: null | string @go(SubnetID,*string)

	// A mapping of tags to assign to the HPC Cache.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#HPCCacheParameters: {
	// Specifies whether the HPC Cache automatically rotates Encryption Key to the latest version.
	// +kubebuilder:validation:Optional
	automaticallyRotateKeyToLatestEnabled?: null | bool @go(AutomaticallyRotateKeyToLatestEnabled,*bool)

	// The size of the HPC Cache, in GB. Possible values are 3072, 6144, 12288, 21623, 24576, 43246, 49152 and 86491. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	cacheSizeInGb?: null | float64 @go(CacheSizeInGb,*float64)

	// A dns block as defined below.
	// +kubebuilder:validation:Optional
	dns?: [...#DNSParameters] @go(DNS,[]DNSParameters)

	// A default_access_policy block as defined below.
	// +kubebuilder:validation:Optional
	defaultAccessPolicy?: [...#DefaultAccessPolicyParameters] @go(DefaultAccessPolicy,[]DefaultAccessPolicyParameters)

	// A directory_active_directory block as defined below.
	// +kubebuilder:validation:Optional
	directoryActiveDirectory?: [...#DirectoryActiveDirectoryParameters] @go(DirectoryActiveDirectory,[]DirectoryActiveDirectoryParameters)

	// A directory_flat_file block as defined below.
	// +kubebuilder:validation:Optional
	directoryFlatFile?: [...#DirectoryFlatFileParameters] @go(DirectoryFlatFile,[]DirectoryFlatFileParameters)

	// A directory_ldap block as defined below.
	// +kubebuilder:validation:Optional
	directoryLdap?: [...#DirectoryLdapParameters] @go(DirectoryLdap,[]DirectoryLdapParameters)

	// An identity block as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	identity?: [...#IdentityParameters] @go(Identity,[]IdentityParameters)

	// The ID of the Key Vault Key which should be used to encrypt the data in this HPC Cache.
	// +kubebuilder:validation:Optional
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)

	// Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to 1500.
	// +kubebuilder:validation:Optional
	mtu?: null | float64 @go(Mtu,*float64)

	// The NTP server IP Address or FQDN for the HPC Cache. Defaults to time.windows.com.
	// +kubebuilder:validation:Optional
	ntpServer?: null | string @go(NtpServer,*string)

	// The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The SKU of HPC Cache to use. Possible values are (ReadWrite) - Standard_2G, Standard_4G Standard_8G or (ReadOnly) - Standard_L4_5G, Standard_L9G, and Standard_L16G. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	skuName?: null | string @go(SkuName,*string)

	// The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// A mapping of tags to assign to the HPC Cache.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#IdentityInitParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this HPC Cache. Changing this forces a new resource to be created.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this HPC Cache. Only possible value is UserAssigned. Changing this forces a new resource to be created.
	type?: null | string @go(Type,*string)
}

#IdentityObservation: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this HPC Cache. Changing this forces a new resource to be created.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this HPC Cache. Only possible value is UserAssigned. Changing this forces a new resource to be created.
	type?: null | string @go(Type,*string)
}

#IdentityParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this HPC Cache. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	identityIds: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this HPC Cache. Only possible value is UserAssigned. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// HPCCacheSpec defines the desired state of HPCCache
#HPCCacheSpec: {
	forProvider: #HPCCacheParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #HPCCacheInitParameters @go(InitProvider)
}

// HPCCacheStatus defines the observed state of HPCCache.
#HPCCacheStatus: {
	atProvider?: #HPCCacheObservation @go(AtProvider)
}

// HPCCache is the Schema for the HPCCaches API. Manages a HPC Cache.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#HPCCache: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cacheSizeInGb) || (has(self.initProvider) && has(self.initProvider.cacheSizeInGb))",message="spec.forProvider.cacheSizeInGb is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.skuName) || (has(self.initProvider) && has(self.initProvider.skuName))",message="spec.forProvider.skuName is a required parameter"
	spec:    #HPCCacheSpec   @go(Spec)
	status?: #HPCCacheStatus @go(Status)
}

// HPCCacheList contains a list of HPCCaches
#HPCCacheList: {
	items: [...#HPCCache] @go(Items,[]HPCCache)
}
