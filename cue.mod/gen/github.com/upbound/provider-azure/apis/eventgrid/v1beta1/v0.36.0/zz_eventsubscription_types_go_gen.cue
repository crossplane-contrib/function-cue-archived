// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/eventgrid/v1beta1

package v1beta1

#AdvancedFilterInitParameters: {
	// Compares a value of an event using a single boolean value.
	boolEquals?: [...#BoolEqualsInitParameters] @go(BoolEquals,[]BoolEqualsInitParameters)

	// Evaluates if a value of an event isn't NULL or undefined.
	isNotNull?: [...#IsNotNullInitParameters] @go(IsNotNull,[]IsNotNullInitParameters)

	// Evaluates if a value of an event is NULL or undefined.
	isNullOrUndefined?: [...#IsNullOrUndefinedInitParameters] @go(IsNullOrUndefined,[]IsNullOrUndefinedInitParameters)

	// Compares a value of an event using a single floating point number.
	numberGreaterThan?: [...#NumberGreaterThanInitParameters] @go(NumberGreaterThan,[]NumberGreaterThanInitParameters)

	// Compares a value of an event using a single floating point number.
	numberGreaterThanOrEquals?: [...#NumberGreaterThanOrEqualsInitParameters] @go(NumberGreaterThanOrEquals,[]NumberGreaterThanOrEqualsInitParameters)

	// Compares a value of an event using multiple floating point numbers.
	numberIn?: [...#NumberInInitParameters] @go(NumberIn,[]NumberInInitParameters)

	// Compares a value of an event using multiple floating point number ranges.
	numberInRange?: [...#NumberInRangeInitParameters] @go(NumberInRange,[]NumberInRangeInitParameters)

	// Compares a value of an event using a single floating point number.
	numberLessThan?: [...#NumberLessThanInitParameters] @go(NumberLessThan,[]NumberLessThanInitParameters)

	// Compares a value of an event using a single floating point number.
	numberLessThanOrEquals?: [...#NumberLessThanOrEqualsInitParameters] @go(NumberLessThanOrEquals,[]NumberLessThanOrEqualsInitParameters)

	// Compares a value of an event using multiple floating point numbers.
	numberNotIn?: [...#NumberNotInInitParameters] @go(NumberNotIn,[]NumberNotInInitParameters)

	// Compares a value of an event using multiple floating point number ranges.
	numberNotInRange?: [...#NumberNotInRangeInitParameters] @go(NumberNotInRange,[]NumberNotInRangeInitParameters)

	// Compares a value of an event using multiple string values.
	stringBeginsWith?: [...#StringBeginsWithInitParameters] @go(StringBeginsWith,[]StringBeginsWithInitParameters)

	// Compares a value of an event using multiple string values.
	stringContains?: [...#StringContainsInitParameters] @go(StringContains,[]StringContainsInitParameters)

	// Compares a value of an event using multiple string values.
	stringEndsWith?: [...#StringEndsWithInitParameters] @go(StringEndsWith,[]StringEndsWithInitParameters)

	// Compares a value of an event using multiple string values.
	stringIn?: [...#StringInInitParameters] @go(StringIn,[]StringInInitParameters)

	// Compares a value of an event using multiple string values.
	stringNotBeginsWith?: [...#StringNotBeginsWithInitParameters] @go(StringNotBeginsWith,[]StringNotBeginsWithInitParameters)

	// Compares a value of an event using multiple string values.
	stringNotContains?: [...#StringNotContainsInitParameters] @go(StringNotContains,[]StringNotContainsInitParameters)

	// Compares a value of an event using multiple string values.
	stringNotEndsWith?: [...#StringNotEndsWithInitParameters] @go(StringNotEndsWith,[]StringNotEndsWithInitParameters)

	// Compares a value of an event using multiple string values.
	stringNotIn?: [...#StringNotInInitParameters] @go(StringNotIn,[]StringNotInInitParameters)
}

#AdvancedFilterObservation: {
	// Compares a value of an event using a single boolean value.
	boolEquals?: [...#BoolEqualsObservation] @go(BoolEquals,[]BoolEqualsObservation)

	// Evaluates if a value of an event isn't NULL or undefined.
	isNotNull?: [...#IsNotNullObservation] @go(IsNotNull,[]IsNotNullObservation)

	// Evaluates if a value of an event is NULL or undefined.
	isNullOrUndefined?: [...#IsNullOrUndefinedObservation] @go(IsNullOrUndefined,[]IsNullOrUndefinedObservation)

	// Compares a value of an event using a single floating point number.
	numberGreaterThan?: [...#NumberGreaterThanObservation] @go(NumberGreaterThan,[]NumberGreaterThanObservation)

	// Compares a value of an event using a single floating point number.
	numberGreaterThanOrEquals?: [...#NumberGreaterThanOrEqualsObservation] @go(NumberGreaterThanOrEquals,[]NumberGreaterThanOrEqualsObservation)

	// Compares a value of an event using multiple floating point numbers.
	numberIn?: [...#NumberInObservation] @go(NumberIn,[]NumberInObservation)

	// Compares a value of an event using multiple floating point number ranges.
	numberInRange?: [...#NumberInRangeObservation] @go(NumberInRange,[]NumberInRangeObservation)

	// Compares a value of an event using a single floating point number.
	numberLessThan?: [...#NumberLessThanObservation] @go(NumberLessThan,[]NumberLessThanObservation)

	// Compares a value of an event using a single floating point number.
	numberLessThanOrEquals?: [...#NumberLessThanOrEqualsObservation] @go(NumberLessThanOrEquals,[]NumberLessThanOrEqualsObservation)

	// Compares a value of an event using multiple floating point numbers.
	numberNotIn?: [...#NumberNotInObservation] @go(NumberNotIn,[]NumberNotInObservation)

	// Compares a value of an event using multiple floating point number ranges.
	numberNotInRange?: [...#NumberNotInRangeObservation] @go(NumberNotInRange,[]NumberNotInRangeObservation)

	// Compares a value of an event using multiple string values.
	stringBeginsWith?: [...#StringBeginsWithObservation] @go(StringBeginsWith,[]StringBeginsWithObservation)

	// Compares a value of an event using multiple string values.
	stringContains?: [...#StringContainsObservation] @go(StringContains,[]StringContainsObservation)

	// Compares a value of an event using multiple string values.
	stringEndsWith?: [...#StringEndsWithObservation] @go(StringEndsWith,[]StringEndsWithObservation)

	// Compares a value of an event using multiple string values.
	stringIn?: [...#StringInObservation] @go(StringIn,[]StringInObservation)

	// Compares a value of an event using multiple string values.
	stringNotBeginsWith?: [...#StringNotBeginsWithObservation] @go(StringNotBeginsWith,[]StringNotBeginsWithObservation)

	// Compares a value of an event using multiple string values.
	stringNotContains?: [...#StringNotContainsObservation] @go(StringNotContains,[]StringNotContainsObservation)

	// Compares a value of an event using multiple string values.
	stringNotEndsWith?: [...#StringNotEndsWithObservation] @go(StringNotEndsWith,[]StringNotEndsWithObservation)

	// Compares a value of an event using multiple string values.
	stringNotIn?: [...#StringNotInObservation] @go(StringNotIn,[]StringNotInObservation)
}

#AdvancedFilterParameters: {
	// Compares a value of an event using a single boolean value.
	// +kubebuilder:validation:Optional
	boolEquals?: [...#BoolEqualsParameters] @go(BoolEquals,[]BoolEqualsParameters)

	// Evaluates if a value of an event isn't NULL or undefined.
	// +kubebuilder:validation:Optional
	isNotNull?: [...#IsNotNullParameters] @go(IsNotNull,[]IsNotNullParameters)

	// Evaluates if a value of an event is NULL or undefined.
	// +kubebuilder:validation:Optional
	isNullOrUndefined?: [...#IsNullOrUndefinedParameters] @go(IsNullOrUndefined,[]IsNullOrUndefinedParameters)

	// Compares a value of an event using a single floating point number.
	// +kubebuilder:validation:Optional
	numberGreaterThan?: [...#NumberGreaterThanParameters] @go(NumberGreaterThan,[]NumberGreaterThanParameters)

	// Compares a value of an event using a single floating point number.
	// +kubebuilder:validation:Optional
	numberGreaterThanOrEquals?: [...#NumberGreaterThanOrEqualsParameters] @go(NumberGreaterThanOrEquals,[]NumberGreaterThanOrEqualsParameters)

	// Compares a value of an event using multiple floating point numbers.
	// +kubebuilder:validation:Optional
	numberIn?: [...#NumberInParameters] @go(NumberIn,[]NumberInParameters)

	// Compares a value of an event using multiple floating point number ranges.
	// +kubebuilder:validation:Optional
	numberInRange?: [...#NumberInRangeParameters] @go(NumberInRange,[]NumberInRangeParameters)

	// Compares a value of an event using a single floating point number.
	// +kubebuilder:validation:Optional
	numberLessThan?: [...#NumberLessThanParameters] @go(NumberLessThan,[]NumberLessThanParameters)

	// Compares a value of an event using a single floating point number.
	// +kubebuilder:validation:Optional
	numberLessThanOrEquals?: [...#NumberLessThanOrEqualsParameters] @go(NumberLessThanOrEquals,[]NumberLessThanOrEqualsParameters)

	// Compares a value of an event using multiple floating point numbers.
	// +kubebuilder:validation:Optional
	numberNotIn?: [...#NumberNotInParameters] @go(NumberNotIn,[]NumberNotInParameters)

	// Compares a value of an event using multiple floating point number ranges.
	// +kubebuilder:validation:Optional
	numberNotInRange?: [...#NumberNotInRangeParameters] @go(NumberNotInRange,[]NumberNotInRangeParameters)

	// Compares a value of an event using multiple string values.
	// +kubebuilder:validation:Optional
	stringBeginsWith?: [...#StringBeginsWithParameters] @go(StringBeginsWith,[]StringBeginsWithParameters)

	// Compares a value of an event using multiple string values.
	// +kubebuilder:validation:Optional
	stringContains?: [...#StringContainsParameters] @go(StringContains,[]StringContainsParameters)

	// Compares a value of an event using multiple string values.
	// +kubebuilder:validation:Optional
	stringEndsWith?: [...#StringEndsWithParameters] @go(StringEndsWith,[]StringEndsWithParameters)

	// Compares a value of an event using multiple string values.
	// +kubebuilder:validation:Optional
	stringIn?: [...#StringInParameters] @go(StringIn,[]StringInParameters)

	// Compares a value of an event using multiple string values.
	// +kubebuilder:validation:Optional
	stringNotBeginsWith?: [...#StringNotBeginsWithParameters] @go(StringNotBeginsWith,[]StringNotBeginsWithParameters)

	// Compares a value of an event using multiple string values.
	// +kubebuilder:validation:Optional
	stringNotContains?: [...#StringNotContainsParameters] @go(StringNotContains,[]StringNotContainsParameters)

	// Compares a value of an event using multiple string values.
	// +kubebuilder:validation:Optional
	stringNotEndsWith?: [...#StringNotEndsWithParameters] @go(StringNotEndsWith,[]StringNotEndsWithParameters)

	// Compares a value of an event using multiple string values.
	// +kubebuilder:validation:Optional
	stringNotIn?: [...#StringNotInParameters] @go(StringNotIn,[]StringNotInParameters)
}

#AzureFunctionEndpointInitParameters: {
	// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
	functionId?: null | string @go(FunctionID,*string)

	// Maximum number of events per batch.
	maxEventsPerBatch?: null | float64 @go(MaxEventsPerBatch,*float64)

	// Preferred batch size in Kilobytes.
	preferredBatchSizeInKilobytes?: null | float64 @go(PreferredBatchSizeInKilobytes,*float64)
}

#AzureFunctionEndpointObservation: {
	// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
	functionId?: null | string @go(FunctionID,*string)

	// Maximum number of events per batch.
	maxEventsPerBatch?: null | float64 @go(MaxEventsPerBatch,*float64)

	// Preferred batch size in Kilobytes.
	preferredBatchSizeInKilobytes?: null | float64 @go(PreferredBatchSizeInKilobytes,*float64)
}

#AzureFunctionEndpointParameters: {
	// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
	// +kubebuilder:validation:Optional
	functionId?: null | string @go(FunctionID,*string)

	// Maximum number of events per batch.
	// +kubebuilder:validation:Optional
	maxEventsPerBatch?: null | float64 @go(MaxEventsPerBatch,*float64)

	// Preferred batch size in Kilobytes.
	// +kubebuilder:validation:Optional
	preferredBatchSizeInKilobytes?: null | float64 @go(PreferredBatchSizeInKilobytes,*float64)
}

#BoolEqualsInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	value?: null | bool @go(Value,*bool)
}

#BoolEqualsObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	value?: null | bool @go(Value,*bool)
}

#BoolEqualsParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	// +kubebuilder:validation:Optional
	value?: null | bool @go(Value,*bool)
}

#DeadLetterIdentityInitParameters: {
	// Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is SystemAssigned, UserAssigned.
	type?: null | string @go(Type,*string)

	// The user identity associated with the resource.
	userAssignedIdentity?: null | string @go(UserAssignedIdentity,*string)
}

#DeadLetterIdentityObservation: {
	// Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is SystemAssigned, UserAssigned.
	type?: null | string @go(Type,*string)

	// The user identity associated with the resource.
	userAssignedIdentity?: null | string @go(UserAssignedIdentity,*string)
}

#DeadLetterIdentityParameters: {
	// Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is SystemAssigned, UserAssigned.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// The user identity associated with the resource.
	// +kubebuilder:validation:Optional
	userAssignedIdentity?: null | string @go(UserAssignedIdentity,*string)
}

#DeliveryIdentityInitParameters: {
	// Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is SystemAssigned, UserAssigned.
	type?: null | string @go(Type,*string)

	// The user identity associated with the resource.
	userAssignedIdentity?: null | string @go(UserAssignedIdentity,*string)
}

#DeliveryIdentityObservation: {
	// Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is SystemAssigned, UserAssigned.
	type?: null | string @go(Type,*string)

	// The user identity associated with the resource.
	userAssignedIdentity?: null | string @go(UserAssignedIdentity,*string)
}

#DeliveryIdentityParameters: {
	// Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is SystemAssigned, UserAssigned.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// The user identity associated with the resource.
	// +kubebuilder:validation:Optional
	userAssignedIdentity?: null | string @go(UserAssignedIdentity,*string)
}

#DeliveryPropertyInitParameters: {
	// The name of the header to send on to the destination
	headerName?: null | string @go(HeaderName,*string)

	// True if the value is a secret and should be protected, otherwise false. If True, then this value won't be returned from Azure API calls
	secret?: null | bool @go(Secret,*bool)

	// If the type is Dynamic, then provide the payload field to be used as the value. Valid source fields differ by subscription type.
	sourceField?: null | string @go(SourceField,*string)

	// Either Static or Dynamic
	type?: null | string @go(Type,*string)
}

#DeliveryPropertyObservation: {
	// The name of the header to send on to the destination
	headerName?: null | string @go(HeaderName,*string)

	// True if the value is a secret and should be protected, otherwise false. If True, then this value won't be returned from Azure API calls
	secret?: null | bool @go(Secret,*bool)

	// If the type is Dynamic, then provide the payload field to be used as the value. Valid source fields differ by subscription type.
	sourceField?: null | string @go(SourceField,*string)

	// Either Static or Dynamic
	type?: null | string @go(Type,*string)
}

#DeliveryPropertyParameters: {
	// The name of the header to send on to the destination
	// +kubebuilder:validation:Optional
	headerName?: null | string @go(HeaderName,*string)

	// True if the value is a secret and should be protected, otherwise false. If True, then this value won't be returned from Azure API calls
	// +kubebuilder:validation:Optional
	secret?: null | bool @go(Secret,*bool)

	// If the type is Dynamic, then provide the payload field to be used as the value. Valid source fields differ by subscription type.
	// +kubebuilder:validation:Optional
	sourceField?: null | string @go(SourceField,*string)

	// Either Static or Dynamic
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#EventSubscriptionInitParameters: {
	// A advanced_filter block as defined below.
	advancedFilter?: [...#AdvancedFilterInitParameters] @go(AdvancedFilter,[]AdvancedFilterInitParameters)

	// Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to false.
	advancedFilteringOnArraysEnabled?: null | bool @go(AdvancedFilteringOnArraysEnabled,*bool)

	// An azure_function_endpoint block as defined below.
	azureFunctionEndpoint?: [...#AzureFunctionEndpointInitParameters] @go(AzureFunctionEndpoint,[]AzureFunctionEndpointInitParameters)

	// A dead_letter_identity block as defined below.
	deadLetterIdentity?: [...#DeadLetterIdentityInitParameters] @go(DeadLetterIdentity,[]DeadLetterIdentityInitParameters)

	// A delivery_identity block as defined below.
	deliveryIdentity?: [...#DeliveryIdentityInitParameters] @go(DeliveryIdentity,[]DeliveryIdentityInitParameters)

	// One or more delivery_property blocks as defined below.
	deliveryProperty?: [...#DeliveryPropertyInitParameters] @go(DeliveryProperty,[]DeliveryPropertyInitParameters)

	// Specifies the event delivery schema for the event subscription. Possible values include: EventGridSchema, CloudEventSchemaV1_0, CustomInputSchema. Defaults to EventGridSchema. Changing this forces a new resource to be created.
	eventDeliverySchema?: null | string @go(EventDeliverySchema,*string)

	// Specifies the id where the Event Hub is located.
	eventhubEndpointId?: null | string @go(EventHubEndpointID,*string)

	// Specifies the expiration time of the event subscription (Datetime Format RFC 3339).
	expirationTimeUtc?: null | string @go(ExpirationTimeUtc,*string)

	// Specifies the id where the Hybrid Connection is located.
	hybridConnectionEndpointId?: null | string @go(HybridConnectionEndpointID,*string)

	// A list of applicable event types that need to be part of the event subscription.
	includedEventTypes?: [...null | string] @go(IncludedEventTypes,[]*string)

	// A list of labels to assign to the event subscription.
	labels?: [...null | string] @go(Labels,[]*string)

	// Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// A retry_policy block as defined below.
	retryPolicy?: [...#RetryPolicyInitParameters] @go(RetryPolicy,[]RetryPolicyInitParameters)

	// Specifies the id where the Service Bus Queue is located.
	serviceBusQueueEndpointId?: null | string @go(ServiceBusQueueEndpointID,*string)

	// Specifies the id where the Service Bus Topic is located.
	serviceBusTopicEndpointId?: null | string @go(ServiceBusTopicEndpointID,*string)

	// A storage_blob_dead_letter_destination block as defined below.
	storageBlobDeadLetterDestination?: [...#StorageBlobDeadLetterDestinationInitParameters] @go(StorageBlobDeadLetterDestination,[]StorageBlobDeadLetterDestinationInitParameters)

	// A storage_queue_endpoint block as defined below.
	storageQueueEndpoint?: [...#StorageQueueEndpointInitParameters] @go(StorageQueueEndpoint,[]StorageQueueEndpointInitParameters)

	// A subject_filter block as defined below.
	subjectFilter?: [...#SubjectFilterInitParameters] @go(SubjectFilter,[]SubjectFilterInitParameters)

	// A webhook_endpoint block as defined below.
	webhookEndpoint?: [...#WebhookEndpointInitParameters] @go(WebhookEndpoint,[]WebhookEndpointInitParameters)
}

#EventSubscriptionObservation: {
	// A advanced_filter block as defined below.
	advancedFilter?: [...#AdvancedFilterObservation] @go(AdvancedFilter,[]AdvancedFilterObservation)

	// Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to false.
	advancedFilteringOnArraysEnabled?: null | bool @go(AdvancedFilteringOnArraysEnabled,*bool)

	// An azure_function_endpoint block as defined below.
	azureFunctionEndpoint?: [...#AzureFunctionEndpointObservation] @go(AzureFunctionEndpoint,[]AzureFunctionEndpointObservation)

	// A dead_letter_identity block as defined below.
	deadLetterIdentity?: [...#DeadLetterIdentityObservation] @go(DeadLetterIdentity,[]DeadLetterIdentityObservation)

	// A delivery_identity block as defined below.
	deliveryIdentity?: [...#DeliveryIdentityObservation] @go(DeliveryIdentity,[]DeliveryIdentityObservation)

	// One or more delivery_property blocks as defined below.
	deliveryProperty?: [...#DeliveryPropertyObservation] @go(DeliveryProperty,[]DeliveryPropertyObservation)

	// Specifies the event delivery schema for the event subscription. Possible values include: EventGridSchema, CloudEventSchemaV1_0, CustomInputSchema. Defaults to EventGridSchema. Changing this forces a new resource to be created.
	eventDeliverySchema?: null | string @go(EventDeliverySchema,*string)

	// Specifies the id where the Event Hub is located.
	eventhubEndpointId?: null | string @go(EventHubEndpointID,*string)

	// Specifies the expiration time of the event subscription (Datetime Format RFC 3339).
	expirationTimeUtc?: null | string @go(ExpirationTimeUtc,*string)

	// Specifies the id where the Hybrid Connection is located.
	hybridConnectionEndpointId?: null | string @go(HybridConnectionEndpointID,*string)

	// The ID of the EventGrid Event Subscription.
	id?: null | string @go(ID,*string)

	// A list of applicable event types that need to be part of the event subscription.
	includedEventTypes?: [...null | string] @go(IncludedEventTypes,[]*string)

	// A list of labels to assign to the event subscription.
	labels?: [...null | string] @go(Labels,[]*string)

	// Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// A retry_policy block as defined below.
	retryPolicy?: [...#RetryPolicyObservation] @go(RetryPolicy,[]RetryPolicyObservation)

	// Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.
	scope?: null | string @go(Scope,*string)

	// Specifies the id where the Service Bus Queue is located.
	serviceBusQueueEndpointId?: null | string @go(ServiceBusQueueEndpointID,*string)

	// Specifies the id where the Service Bus Topic is located.
	serviceBusTopicEndpointId?: null | string @go(ServiceBusTopicEndpointID,*string)

	// A storage_blob_dead_letter_destination block as defined below.
	storageBlobDeadLetterDestination?: [...#StorageBlobDeadLetterDestinationObservation] @go(StorageBlobDeadLetterDestination,[]StorageBlobDeadLetterDestinationObservation)

	// A storage_queue_endpoint block as defined below.
	storageQueueEndpoint?: [...#StorageQueueEndpointObservation] @go(StorageQueueEndpoint,[]StorageQueueEndpointObservation)

	// A subject_filter block as defined below.
	subjectFilter?: [...#SubjectFilterObservation] @go(SubjectFilter,[]SubjectFilterObservation)

	// A webhook_endpoint block as defined below.
	webhookEndpoint?: [...#WebhookEndpointObservation] @go(WebhookEndpoint,[]WebhookEndpointObservation)
}

#EventSubscriptionParameters: {
	// A advanced_filter block as defined below.
	// +kubebuilder:validation:Optional
	advancedFilter?: [...#AdvancedFilterParameters] @go(AdvancedFilter,[]AdvancedFilterParameters)

	// Specifies whether advanced filters should be evaluated against an array of values instead of expecting a singular value. Defaults to false.
	// +kubebuilder:validation:Optional
	advancedFilteringOnArraysEnabled?: null | bool @go(AdvancedFilteringOnArraysEnabled,*bool)

	// An azure_function_endpoint block as defined below.
	// +kubebuilder:validation:Optional
	azureFunctionEndpoint?: [...#AzureFunctionEndpointParameters] @go(AzureFunctionEndpoint,[]AzureFunctionEndpointParameters)

	// A dead_letter_identity block as defined below.
	// +kubebuilder:validation:Optional
	deadLetterIdentity?: [...#DeadLetterIdentityParameters] @go(DeadLetterIdentity,[]DeadLetterIdentityParameters)

	// A delivery_identity block as defined below.
	// +kubebuilder:validation:Optional
	deliveryIdentity?: [...#DeliveryIdentityParameters] @go(DeliveryIdentity,[]DeliveryIdentityParameters)

	// One or more delivery_property blocks as defined below.
	// +kubebuilder:validation:Optional
	deliveryProperty?: [...#DeliveryPropertyParameters] @go(DeliveryProperty,[]DeliveryPropertyParameters)

	// Specifies the event delivery schema for the event subscription. Possible values include: EventGridSchema, CloudEventSchemaV1_0, CustomInputSchema. Defaults to EventGridSchema. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	eventDeliverySchema?: null | string @go(EventDeliverySchema,*string)

	// Specifies the id where the Event Hub is located.
	// +kubebuilder:validation:Optional
	eventhubEndpointId?: null | string @go(EventHubEndpointID,*string)

	// Specifies the expiration time of the event subscription (Datetime Format RFC 3339).
	// +kubebuilder:validation:Optional
	expirationTimeUtc?: null | string @go(ExpirationTimeUtc,*string)

	// Specifies the id where the Hybrid Connection is located.
	// +kubebuilder:validation:Optional
	hybridConnectionEndpointId?: null | string @go(HybridConnectionEndpointID,*string)

	// A list of applicable event types that need to be part of the event subscription.
	// +kubebuilder:validation:Optional
	includedEventTypes?: [...null | string] @go(IncludedEventTypes,[]*string)

	// A list of labels to assign to the event subscription.
	// +kubebuilder:validation:Optional
	labels?: [...null | string] @go(Labels,[]*string)

	// Specifies the name of the EventGrid Event Subscription resource. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A retry_policy block as defined below.
	// +kubebuilder:validation:Optional
	retryPolicy?: [...#RetryPolicyParameters] @go(RetryPolicy,[]RetryPolicyParameters)

	// Specifies the scope at which the EventGrid Event Subscription should be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	scope?: null | string @go(Scope,*string)

	// Specifies the id where the Service Bus Queue is located.
	// +kubebuilder:validation:Optional
	serviceBusQueueEndpointId?: null | string @go(ServiceBusQueueEndpointID,*string)

	// Specifies the id where the Service Bus Topic is located.
	// +kubebuilder:validation:Optional
	serviceBusTopicEndpointId?: null | string @go(ServiceBusTopicEndpointID,*string)

	// A storage_blob_dead_letter_destination block as defined below.
	// +kubebuilder:validation:Optional
	storageBlobDeadLetterDestination?: [...#StorageBlobDeadLetterDestinationParameters] @go(StorageBlobDeadLetterDestination,[]StorageBlobDeadLetterDestinationParameters)

	// A storage_queue_endpoint block as defined below.
	// +kubebuilder:validation:Optional
	storageQueueEndpoint?: [...#StorageQueueEndpointParameters] @go(StorageQueueEndpoint,[]StorageQueueEndpointParameters)

	// A subject_filter block as defined below.
	// +kubebuilder:validation:Optional
	subjectFilter?: [...#SubjectFilterParameters] @go(SubjectFilter,[]SubjectFilterParameters)

	// A webhook_endpoint block as defined below.
	// +kubebuilder:validation:Optional
	webhookEndpoint?: [...#WebhookEndpointParameters] @go(WebhookEndpoint,[]WebhookEndpointParameters)
}

#IsNotNullInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)
}

#IsNotNullObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)
}

#IsNotNullParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#IsNullOrUndefinedInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)
}

#IsNullOrUndefinedObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)
}

#IsNullOrUndefinedParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#NumberGreaterThanInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	value?: null | float64 @go(Value,*float64)
}

#NumberGreaterThanObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	value?: null | float64 @go(Value,*float64)
}

#NumberGreaterThanOrEqualsInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	value?: null | float64 @go(Value,*float64)
}

#NumberGreaterThanOrEqualsObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	value?: null | float64 @go(Value,*float64)
}

#NumberGreaterThanOrEqualsParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	// +kubebuilder:validation:Optional
	value?: null | float64 @go(Value,*float64)
}

#NumberGreaterThanParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	// +kubebuilder:validation:Optional
	value?: null | float64 @go(Value,*float64)
}

#NumberInInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | float64] @go(Values,[]*float64)
}

#NumberInObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | float64] @go(Values,[]*float64)
}

#NumberInParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...null | float64] @go(Values,[]*float64)
}

#NumberInRangeInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...[...null | float64]] @go(Values,[][]*float64)
}

#NumberInRangeObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...[...null | float64]] @go(Values,[][]*float64)
}

#NumberInRangeParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...[...null | float64]] @go(Values,[][]*float64)
}

#NumberLessThanInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	value?: null | float64 @go(Value,*float64)
}

#NumberLessThanObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	value?: null | float64 @go(Value,*float64)
}

#NumberLessThanOrEqualsInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	value?: null | float64 @go(Value,*float64)
}

#NumberLessThanOrEqualsObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	value?: null | float64 @go(Value,*float64)
}

#NumberLessThanOrEqualsParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	// +kubebuilder:validation:Optional
	value?: null | float64 @go(Value,*float64)
}

#NumberLessThanParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies a single value to compare to when using a single value operator.
	// +kubebuilder:validation:Optional
	value?: null | float64 @go(Value,*float64)
}

#NumberNotInInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | float64] @go(Values,[]*float64)
}

#NumberNotInObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | float64] @go(Values,[]*float64)
}

#NumberNotInParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...null | float64] @go(Values,[]*float64)
}

#NumberNotInRangeInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...[...null | float64]] @go(Values,[][]*float64)
}

#NumberNotInRangeObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...[...null | float64]] @go(Values,[][]*float64)
}

#NumberNotInRangeParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...[...null | float64]] @go(Values,[][]*float64)
}

#RetryPolicyInitParameters: {
	// Specifies the time to live (in minutes) for events. Supported range is 1 to 1440. See official documentation for more details.
	eventTimeToLive?: null | float64 @go(EventTimeToLive,*float64)

	// Specifies the maximum number of delivery retry attempts for events.
	maxDeliveryAttempts?: null | float64 @go(MaxDeliveryAttempts,*float64)
}

#RetryPolicyObservation: {
	// Specifies the time to live (in minutes) for events. Supported range is 1 to 1440. See official documentation for more details.
	eventTimeToLive?: null | float64 @go(EventTimeToLive,*float64)

	// Specifies the maximum number of delivery retry attempts for events.
	maxDeliveryAttempts?: null | float64 @go(MaxDeliveryAttempts,*float64)
}

#RetryPolicyParameters: {
	// Specifies the time to live (in minutes) for events. Supported range is 1 to 1440. See official documentation for more details.
	// +kubebuilder:validation:Optional
	eventTimeToLive?: null | float64 @go(EventTimeToLive,*float64)

	// Specifies the maximum number of delivery retry attempts for events.
	// +kubebuilder:validation:Optional
	maxDeliveryAttempts?: null | float64 @go(MaxDeliveryAttempts,*float64)
}

#StorageBlobDeadLetterDestinationInitParameters: {
	// Specifies the id of the storage account id where the storage blob is located.
	storageAccountId?: null | string @go(StorageAccountID,*string)

	// Specifies the name of the Storage blob container that is the destination of the deadletter events.
	storageBlobContainerName?: null | string @go(StorageBlobContainerName,*string)
}

#StorageBlobDeadLetterDestinationObservation: {
	// Specifies the id of the storage account id where the storage blob is located.
	storageAccountId?: null | string @go(StorageAccountID,*string)

	// Specifies the name of the Storage blob container that is the destination of the deadletter events.
	storageBlobContainerName?: null | string @go(StorageBlobContainerName,*string)
}

#StorageBlobDeadLetterDestinationParameters: {
	// Specifies the id of the storage account id where the storage blob is located.
	// +kubebuilder:validation:Optional
	storageAccountId?: null | string @go(StorageAccountID,*string)

	// Specifies the name of the Storage blob container that is the destination of the deadletter events.
	// +kubebuilder:validation:Optional
	storageBlobContainerName?: null | string @go(StorageBlobContainerName,*string)
}

#StorageQueueEndpointInitParameters: {
	// Storage queue message time to live in seconds.
	queueMessageTimeToLiveInSeconds?: null | float64 @go(QueueMessageTimeToLiveInSeconds,*float64)
}

#StorageQueueEndpointObservation: {
	// Storage queue message time to live in seconds.
	queueMessageTimeToLiveInSeconds?: null | float64 @go(QueueMessageTimeToLiveInSeconds,*float64)

	// Specifies the name of the storage queue where the Event Subscription will receive events.
	queueName?: null | string @go(QueueName,*string)

	// Specifies the id of the storage account id where the storage queue is located.
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

#StorageQueueEndpointParameters: {
	// Storage queue message time to live in seconds.
	// +kubebuilder:validation:Optional
	queueMessageTimeToLiveInSeconds?: null | float64 @go(QueueMessageTimeToLiveInSeconds,*float64)

	// Specifies the name of the storage queue where the Event Subscription will receive events.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Queue
	// +kubebuilder:validation:Optional
	queueName?: null | string @go(QueueName,*string)

	// Specifies the id of the storage account id where the storage queue is located.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

#StringBeginsWithInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringBeginsWithObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringBeginsWithParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...null | string] @go(Values,[]*string)
}

#StringContainsInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringContainsObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringContainsParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...null | string] @go(Values,[]*string)
}

#StringEndsWithInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringEndsWithObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringEndsWithParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...null | string] @go(Values,[]*string)
}

#StringInInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringInObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringInParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...null | string] @go(Values,[]*string)
}

#StringNotBeginsWithInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringNotBeginsWithObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringNotBeginsWithParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...null | string] @go(Values,[]*string)
}

#StringNotContainsInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringNotContainsObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringNotContainsParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...null | string] @go(Values,[]*string)
}

#StringNotEndsWithInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringNotEndsWithObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringNotEndsWithParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...null | string] @go(Values,[]*string)
}

#StringNotInInitParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringNotInObservation: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	values?: [...null | string] @go(Values,[]*string)
}

#StringNotInParameters: {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Specifies an array of values to compare to when using a multiple values operator.
	// +kubebuilder:validation:Optional
	values: [...null | string] @go(Values,[]*string)
}

#SubjectFilterInitParameters: {
	// Specifies if subject_begins_with and subject_ends_with case sensitive. This value
	caseSensitive?: null | bool @go(CaseSensitive,*bool)

	// A string to filter events for an event subscription based on a resource path prefix.
	subjectBeginsWith?: null | string @go(SubjectBeginsWith,*string)

	// A string to filter events for an event subscription based on a resource path suffix.
	subjectEndsWith?: null | string @go(SubjectEndsWith,*string)
}

#SubjectFilterObservation: {
	// Specifies if subject_begins_with and subject_ends_with case sensitive. This value
	caseSensitive?: null | bool @go(CaseSensitive,*bool)

	// A string to filter events for an event subscription based on a resource path prefix.
	subjectBeginsWith?: null | string @go(SubjectBeginsWith,*string)

	// A string to filter events for an event subscription based on a resource path suffix.
	subjectEndsWith?: null | string @go(SubjectEndsWith,*string)
}

#SubjectFilterParameters: {
	// Specifies if subject_begins_with and subject_ends_with case sensitive. This value
	// +kubebuilder:validation:Optional
	caseSensitive?: null | bool @go(CaseSensitive,*bool)

	// A string to filter events for an event subscription based on a resource path prefix.
	// +kubebuilder:validation:Optional
	subjectBeginsWith?: null | string @go(SubjectBeginsWith,*string)

	// A string to filter events for an event subscription based on a resource path suffix.
	// +kubebuilder:validation:Optional
	subjectEndsWith?: null | string @go(SubjectEndsWith,*string)
}

#WebhookEndpointInitParameters: {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	activeDirectoryAppIdOrUri?: null | string @go(ActiveDirectoryAppIDOrURI,*string)

	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	activeDirectoryTenantId?: null | string @go(ActiveDirectoryTenantID,*string)

	// Maximum number of events per batch.
	maxEventsPerBatch?: null | float64 @go(MaxEventsPerBatch,*float64)

	// Preferred batch size in Kilobytes.
	preferredBatchSizeInKilobytes?: null | float64 @go(PreferredBatchSizeInKilobytes,*float64)

	// Specifies the url of the webhook where the Event Subscription will receive events.
	url?: null | string @go(URL,*string)
}

#WebhookEndpointObservation: {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	activeDirectoryAppIdOrUri?: null | string @go(ActiveDirectoryAppIDOrURI,*string)

	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	activeDirectoryTenantId?: null | string @go(ActiveDirectoryTenantID,*string)

	// (Computed) The base url of the webhook where the Event Subscription will receive events.
	baseUrl?: null | string @go(BaseURL,*string)

	// Maximum number of events per batch.
	maxEventsPerBatch?: null | float64 @go(MaxEventsPerBatch,*float64)

	// Preferred batch size in Kilobytes.
	preferredBatchSizeInKilobytes?: null | float64 @go(PreferredBatchSizeInKilobytes,*float64)

	// Specifies the url of the webhook where the Event Subscription will receive events.
	url?: null | string @go(URL,*string)
}

#WebhookEndpointParameters: {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	// +kubebuilder:validation:Optional
	activeDirectoryAppIdOrUri?: null | string @go(ActiveDirectoryAppIDOrURI,*string)

	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	// +kubebuilder:validation:Optional
	activeDirectoryTenantId?: null | string @go(ActiveDirectoryTenantID,*string)

	// Maximum number of events per batch.
	// +kubebuilder:validation:Optional
	maxEventsPerBatch?: null | float64 @go(MaxEventsPerBatch,*float64)

	// Preferred batch size in Kilobytes.
	// +kubebuilder:validation:Optional
	preferredBatchSizeInKilobytes?: null | float64 @go(PreferredBatchSizeInKilobytes,*float64)

	// Specifies the url of the webhook where the Event Subscription will receive events.
	// +kubebuilder:validation:Optional
	url?: null | string @go(URL,*string)
}

// EventSubscriptionSpec defines the desired state of EventSubscription
#EventSubscriptionSpec: {
	forProvider: #EventSubscriptionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EventSubscriptionInitParameters @go(InitProvider)
}

// EventSubscriptionStatus defines the observed state of EventSubscription.
#EventSubscriptionStatus: {
	atProvider?: #EventSubscriptionObservation @go(AtProvider)
}

// EventSubscription is the Schema for the EventSubscriptions API. Manages an EventGrid Event Subscription
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#EventSubscription: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	spec:    #EventSubscriptionSpec   @go(Spec)
	status?: #EventSubscriptionStatus @go(Status)
}

// EventSubscriptionList contains a list of EventSubscriptions
#EventSubscriptionList: {
	items: [...#EventSubscription] @go(Items,[]EventSubscription)
}
