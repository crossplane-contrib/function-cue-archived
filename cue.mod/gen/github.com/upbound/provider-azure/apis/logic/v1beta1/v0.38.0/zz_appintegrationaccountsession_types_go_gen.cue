// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/logic/v1beta1

package v1beta1

#AppIntegrationAccountSessionInitParameters: {
	// The content of the Logic App Integration Account Session.
	content?: null | string @go(Content,*string)
}

#AppIntegrationAccountSessionObservation: {
	// The content of the Logic App Integration Account Session.
	content?: null | string @go(Content,*string)

	// The ID of the Logic App Integration Account Session.
	id?: null | string @go(ID,*string)

	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Session to be created.
	integrationAccountName?: null | string @go(IntegrationAccountName,*string)

	// The name of the Resource Group where the Logic App Integration Account Session should exist. Changing this forces a new Logic App Integration Account Session to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

#AppIntegrationAccountSessionParameters: {
	// The content of the Logic App Integration Account Session.
	// +kubebuilder:validation:Optional
	content?: null | string @go(Content,*string)

	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Session to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/logic/v1beta1.AppIntegrationAccount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	integrationAccountName?: null | string @go(IntegrationAccountName,*string)

	// The name of the Resource Group where the Logic App Integration Account Session should exist. Changing this forces a new Logic App Integration Account Session to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

// AppIntegrationAccountSessionSpec defines the desired state of AppIntegrationAccountSession
#AppIntegrationAccountSessionSpec: {
	forProvider: #AppIntegrationAccountSessionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AppIntegrationAccountSessionInitParameters @go(InitProvider)
}

// AppIntegrationAccountSessionStatus defines the observed state of AppIntegrationAccountSession.
#AppIntegrationAccountSessionStatus: {
	atProvider?: #AppIntegrationAccountSessionObservation @go(AtProvider)
}

// AppIntegrationAccountSession is the Schema for the AppIntegrationAccountSessions API. Manages a Logic App Integration Account Session.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#AppIntegrationAccountSession: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	spec:    #AppIntegrationAccountSessionSpec   @go(Spec)
	status?: #AppIntegrationAccountSessionStatus @go(Status)
}

// AppIntegrationAccountSessionList contains a list of AppIntegrationAccountSessions
#AppIntegrationAccountSessionList: {
	items: [...#AppIntegrationAccountSession] @go(Items,[]AppIntegrationAccountSession)
}
