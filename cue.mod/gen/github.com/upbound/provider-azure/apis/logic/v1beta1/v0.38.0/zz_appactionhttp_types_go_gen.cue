// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/logic/v1beta1

package v1beta1

#AppActionHTTPInitParameters: {
	// Specifies the HTTP Body that should be sent to the uri when this HTTP Action is triggered.
	body?: null | string @go(Body,*string)

	// Specifies a Map of Key-Value Pairs that should be sent to the uri when this HTTP Action is triggered.
	headers?: {[string]: null | string} @go(Headers,map[string]*string)

	// Specifies the HTTP Method which should be used for this HTTP Action. Possible values include DELETE, GET, PATCH, POST and PUT.
	method?: null | string @go(Method,*string)

	// Specifies a Map of Key-Value Pairs that should be sent to the uri when this HTTP Action is triggered.
	queries?: {[string]: null | string} @go(Queries,map[string]*string)

	// Specifies the place of the HTTP Action in the Logic App Workflow. If not specified, the HTTP Action is right after the Trigger. A run_after block is as defined below.
	runAfter?: [...#RunAfterInitParameters] @go(RunAfter,[]RunAfterInitParameters)

	// Specifies the URI which will be called when this HTTP Action is triggered.
	uri?: null | string @go(URI,*string)
}

#AppActionHTTPObservation: {
	// Specifies the HTTP Body that should be sent to the uri when this HTTP Action is triggered.
	body?: null | string @go(Body,*string)

	// Specifies a Map of Key-Value Pairs that should be sent to the uri when this HTTP Action is triggered.
	headers?: {[string]: null | string} @go(Headers,map[string]*string)

	// The ID of the HTTP Action within the Logic App Workflow.
	id?: null | string @go(ID,*string)

	// Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
	logicAppId?: null | string @go(LogicAppID,*string)

	// Specifies the HTTP Method which should be used for this HTTP Action. Possible values include DELETE, GET, PATCH, POST and PUT.
	method?: null | string @go(Method,*string)

	// Specifies a Map of Key-Value Pairs that should be sent to the uri when this HTTP Action is triggered.
	queries?: {[string]: null | string} @go(Queries,map[string]*string)

	// Specifies the place of the HTTP Action in the Logic App Workflow. If not specified, the HTTP Action is right after the Trigger. A run_after block is as defined below.
	runAfter?: [...#RunAfterObservation] @go(RunAfter,[]RunAfterObservation)

	// Specifies the URI which will be called when this HTTP Action is triggered.
	uri?: null | string @go(URI,*string)
}

#AppActionHTTPParameters: {
	// Specifies the HTTP Body that should be sent to the uri when this HTTP Action is triggered.
	// +kubebuilder:validation:Optional
	body?: null | string @go(Body,*string)

	// Specifies a Map of Key-Value Pairs that should be sent to the uri when this HTTP Action is triggered.
	// +kubebuilder:validation:Optional
	headers?: {[string]: null | string} @go(Headers,map[string]*string)

	// Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/logic/v1beta1.AppWorkflow
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	logicAppId?: null | string @go(LogicAppID,*string)

	// Specifies the HTTP Method which should be used for this HTTP Action. Possible values include DELETE, GET, PATCH, POST and PUT.
	// +kubebuilder:validation:Optional
	method?: null | string @go(Method,*string)

	// Specifies a Map of Key-Value Pairs that should be sent to the uri when this HTTP Action is triggered.
	// +kubebuilder:validation:Optional
	queries?: {[string]: null | string} @go(Queries,map[string]*string)

	// Specifies the place of the HTTP Action in the Logic App Workflow. If not specified, the HTTP Action is right after the Trigger. A run_after block is as defined below.
	// +kubebuilder:validation:Optional
	runAfter?: [...#RunAfterParameters] @go(RunAfter,[]RunAfterParameters)

	// Specifies the URI which will be called when this HTTP Action is triggered.
	// +kubebuilder:validation:Optional
	uri?: null | string @go(URI,*string)
}

#RunAfterInitParameters: {
	// Specifies the name of the precedent HTTP Action.
	actionName?: null | string @go(ActionName,*string)

	// Specifies the expected result of the precedent HTTP Action, only after which the current HTTP Action will be triggered. Possible values include Succeeded, Failed, Skipped and TimedOut.
	actionResult?: null | string @go(ActionResult,*string)
}

#RunAfterObservation: {
	// Specifies the name of the precedent HTTP Action.
	actionName?: null | string @go(ActionName,*string)

	// Specifies the expected result of the precedent HTTP Action, only after which the current HTTP Action will be triggered. Possible values include Succeeded, Failed, Skipped and TimedOut.
	actionResult?: null | string @go(ActionResult,*string)
}

#RunAfterParameters: {
	// Specifies the name of the precedent HTTP Action.
	// +kubebuilder:validation:Optional
	actionName?: null | string @go(ActionName,*string)

	// Specifies the expected result of the precedent HTTP Action, only after which the current HTTP Action will be triggered. Possible values include Succeeded, Failed, Skipped and TimedOut.
	// +kubebuilder:validation:Optional
	actionResult?: null | string @go(ActionResult,*string)
}

// AppActionHTTPSpec defines the desired state of AppActionHTTP
#AppActionHTTPSpec: {
	forProvider: #AppActionHTTPParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AppActionHTTPInitParameters @go(InitProvider)
}

// AppActionHTTPStatus defines the observed state of AppActionHTTP.
#AppActionHTTPStatus: {
	atProvider?: #AppActionHTTPObservation @go(AtProvider)
}

// AppActionHTTP is the Schema for the AppActionHTTPs API. Manages an HTTP Action within a Logic App Workflow
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#AppActionHTTP: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.method) || (has(self.initProvider) && has(self.initProvider.method))",message="spec.forProvider.method is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.uri) || (has(self.initProvider) && has(self.initProvider.uri))",message="spec.forProvider.uri is a required parameter"
	spec:    #AppActionHTTPSpec   @go(Spec)
	status?: #AppActionHTTPStatus @go(Status)
}

// AppActionHTTPList contains a list of AppActionHTTPs
#AppActionHTTPList: {
	items: [...#AppActionHTTP] @go(Items,[]AppActionHTTP)
}
