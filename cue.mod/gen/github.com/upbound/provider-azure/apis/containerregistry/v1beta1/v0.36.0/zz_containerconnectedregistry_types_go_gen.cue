// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/containerregistry/v1beta1

package v1beta1

#ContainerConnectedRegistryInitParameters: {
	// Should the log auditing be enabled?
	auditLogEnabled?: null | bool @go(AuditLogEnabled,*bool)

	// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
	clientTokenIds?: [...null | string] @go(ClientTokenIds,[]*string)

	// The verbosity of the logs. Possible values are None, Debug, Information, Warning and Error.
	logLevel?: null | string @go(LogLevel,*string)

	// The mode of the Connected Registry. Possible values are Mirror, ReadOnly, ReadWrite and Registry. Changing this forces a new Container Connected Registry to be created.
	mode?: null | string @go(Mode,*string)

	// One or more notification blocks as defined below.
	notification?: [...#NotificationInitParameters] @go(Notification,[]NotificationInitParameters)

	// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
	parentRegistryId?: null | string @go(ParentRegistryID,*string)

	// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from P1D to P90D.
	syncMessageTtl?: null | string @go(SyncMessageTTL,*string)

	// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to * * * * *.
	syncSchedule?: null | string @go(SyncSchedule,*string)

	// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from PT3H to P7D.
	syncWindow?: null | string @go(SyncWindow,*string)
}

#ContainerConnectedRegistryObservation: {
	// Should the log auditing be enabled?
	auditLogEnabled?: null | bool @go(AuditLogEnabled,*bool)

	// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
	clientTokenIds?: [...null | string] @go(ClientTokenIds,[]*string)

	// The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
	containerRegistryId?: null | string @go(ContainerRegistryID,*string)

	// The ID of the Container Connected Registry.
	id?: null | string @go(ID,*string)

	// The verbosity of the logs. Possible values are None, Debug, Information, Warning and Error.
	logLevel?: null | string @go(LogLevel,*string)

	// The mode of the Connected Registry. Possible values are Mirror, ReadOnly, ReadWrite and Registry. Changing this forces a new Container Connected Registry to be created.
	mode?: null | string @go(Mode,*string)

	// One or more notification blocks as defined below.
	notification?: [...#NotificationObservation] @go(Notification,[]NotificationObservation)

	// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
	parentRegistryId?: null | string @go(ParentRegistryID,*string)

	// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from P1D to P90D.
	syncMessageTtl?: null | string @go(SyncMessageTTL,*string)

	// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to * * * * *.
	syncSchedule?: null | string @go(SyncSchedule,*string)

	// The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
	syncTokenId?: null | string @go(SyncTokenID,*string)

	// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from PT3H to P7D.
	syncWindow?: null | string @go(SyncWindow,*string)
}

#ContainerConnectedRegistryParameters: {
	// Should the log auditing be enabled?
	// +kubebuilder:validation:Optional
	auditLogEnabled?: null | bool @go(AuditLogEnabled,*bool)

	// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
	// +kubebuilder:validation:Optional
	clientTokenIds?: [...null | string] @go(ClientTokenIds,[]*string)

	// The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
	// +crossplane:generate:reference:type=Registry
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	containerRegistryId?: null | string @go(ContainerRegistryID,*string)

	// The verbosity of the logs. Possible values are None, Debug, Information, Warning and Error.
	// +kubebuilder:validation:Optional
	logLevel?: null | string @go(LogLevel,*string)

	// The mode of the Connected Registry. Possible values are Mirror, ReadOnly, ReadWrite and Registry. Changing this forces a new Container Connected Registry to be created.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// One or more notification blocks as defined below.
	// +kubebuilder:validation:Optional
	notification?: [...#NotificationParameters] @go(Notification,[]NotificationParameters)

	// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
	// +kubebuilder:validation:Optional
	parentRegistryId?: null | string @go(ParentRegistryID,*string)

	// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from P1D to P90D.
	// +kubebuilder:validation:Optional
	syncMessageTtl?: null | string @go(SyncMessageTTL,*string)

	// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to * * * * *.
	// +kubebuilder:validation:Optional
	syncSchedule?: null | string @go(SyncSchedule,*string)

	// The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
	// +crossplane:generate:reference:type=Token
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	syncTokenId?: null | string @go(SyncTokenID,*string)

	// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from PT3H to P7D.
	// +kubebuilder:validation:Optional
	syncWindow?: null | string @go(SyncWindow,*string)
}

#NotificationInitParameters: {
	// The action of the artifact that wants to be subscribed for the Connected Registry. Possible values are push, delete and * (i.e. any).
	action?: null | string @go(Action,*string)

	// The digest of the artifact that wants to be subscribed for the Connected Registry.
	digest?: null | string @go(Digest,*string)

	// The name of the artifact that wants to be subscribed for the Connected Registry.
	name?: null | string @go(Name,*string)

	// The tag of the artifact that wants to be subscribed for the Connected Registry.
	tag?: null | string @go(Tag,*string)
}

#NotificationObservation: {
	// The action of the artifact that wants to be subscribed for the Connected Registry. Possible values are push, delete and * (i.e. any).
	action?: null | string @go(Action,*string)

	// The digest of the artifact that wants to be subscribed for the Connected Registry.
	digest?: null | string @go(Digest,*string)

	// The name of the artifact that wants to be subscribed for the Connected Registry.
	name?: null | string @go(Name,*string)

	// The tag of the artifact that wants to be subscribed for the Connected Registry.
	tag?: null | string @go(Tag,*string)
}

#NotificationParameters: {
	// The action of the artifact that wants to be subscribed for the Connected Registry. Possible values are push, delete and * (i.e. any).
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// The digest of the artifact that wants to be subscribed for the Connected Registry.
	// +kubebuilder:validation:Optional
	digest?: null | string @go(Digest,*string)

	// The name of the artifact that wants to be subscribed for the Connected Registry.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The tag of the artifact that wants to be subscribed for the Connected Registry.
	// +kubebuilder:validation:Optional
	tag?: null | string @go(Tag,*string)
}

// ContainerConnectedRegistrySpec defines the desired state of ContainerConnectedRegistry
#ContainerConnectedRegistrySpec: {
	forProvider: #ContainerConnectedRegistryParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ContainerConnectedRegistryInitParameters @go(InitProvider)
}

// ContainerConnectedRegistryStatus defines the observed state of ContainerConnectedRegistry.
#ContainerConnectedRegistryStatus: {
	atProvider?: #ContainerConnectedRegistryObservation @go(AtProvider)
}

// ContainerConnectedRegistry is the Schema for the ContainerConnectedRegistrys API. Manages a Container Connected Registry.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ContainerConnectedRegistry: {
	spec:    #ContainerConnectedRegistrySpec   @go(Spec)
	status?: #ContainerConnectedRegistryStatus @go(Status)
}

// ContainerConnectedRegistryList contains a list of ContainerConnectedRegistrys
#ContainerConnectedRegistryList: {
	items: [...#ContainerConnectedRegistry] @go(Items,[]ContainerConnectedRegistry)
}
