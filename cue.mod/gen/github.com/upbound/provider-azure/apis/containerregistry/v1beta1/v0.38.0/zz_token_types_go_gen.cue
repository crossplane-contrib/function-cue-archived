// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/containerregistry/v1beta1

package v1beta1

#TokenInitParameters: {
	// Should the Container Registry token be enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)
}

#TokenObservation: {
	// The name of the Container Registry. Changing this forces a new resource to be created.
	containerRegistryName?: null | string @go(ContainerRegistryName,*string)

	// Should the Container Registry token be enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// The ID of the Container Registry token.
	id?: null | string @go(ID,*string)

	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The ID of the Container Registry Scope Map associated with the token.
	scopeMapId?: null | string @go(ScopeMapID,*string)
}

#TokenParameters: {
	// The name of the Container Registry. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/containerregistry/v1beta1.Registry
	// +kubebuilder:validation:Optional
	containerRegistryName?: null | string @go(ContainerRegistryName,*string)

	// Should the Container Registry token be enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The ID of the Container Registry Scope Map associated with the token.
	// +crossplane:generate:reference:type=ScopeMap
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	scopeMapId?: null | string @go(ScopeMapID,*string)
}

// TokenSpec defines the desired state of Token
#TokenSpec: {
	forProvider: #TokenParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TokenInitParameters @go(InitProvider)
}

// TokenStatus defines the observed state of Token.
#TokenStatus: {
	atProvider?: #TokenObservation @go(AtProvider)
}

// Token is the Schema for the Tokens API. Manages an Azure Container Registry token.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Token: {
	spec:    #TokenSpec   @go(Spec)
	status?: #TokenStatus @go(Status)
}

// TokenList contains a list of Tokens
#TokenList: {
	items: [...#Token] @go(Items,[]Token)
}
