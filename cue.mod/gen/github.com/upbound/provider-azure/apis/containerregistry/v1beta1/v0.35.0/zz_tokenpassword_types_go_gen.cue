// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/containerregistry/v1beta1

package v1beta1

#Password1InitParameters: {
	// The expiration date of the password in RFC3339 format. Changing this forces a new resource to be created.
	expiry?: null | string @go(Expiry,*string)
}

#Password1Observation: {
	// The expiration date of the password in RFC3339 format. Changing this forces a new resource to be created.
	expiry?: null | string @go(Expiry,*string)
}

#Password1Parameters: {
	// The expiration date of the password in RFC3339 format. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	expiry?: null | string @go(Expiry,*string)
}

#Password2InitParameters: {
	// The expiration date of the password in RFC3339 format. Changing this forces a new resource to be created.
	expiry?: null | string @go(Expiry,*string)
}

#Password2Observation: {
	// The expiration date of the password in RFC3339 format. Changing this forces a new resource to be created.
	expiry?: null | string @go(Expiry,*string)
}

#Password2Parameters: {
	// The expiration date of the password in RFC3339 format. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	expiry?: null | string @go(Expiry,*string)
}

#TokenPasswordInitParameters: {
	// One password block as defined below.
	password1?: [...#Password1InitParameters] @go(Password1,[]Password1InitParameters)

	// One password block as defined below.
	password2?: [...#Password2InitParameters] @go(Password2,[]Password2InitParameters)
}

#TokenPasswordObservation: {
	// The ID of the Container Registry Token that this Container Registry Token Password resides in. Changing this forces a new Container Registry Token Password to be created.
	containerRegistryTokenId?: null | string @go(ContainerRegistryTokenID,*string)

	// The ID of the Container Registry Token Password.
	id?: null | string @go(ID,*string)

	// One password block as defined below.
	password1?: [...#Password1Observation] @go(Password1,[]Password1Observation)

	// One password block as defined below.
	password2?: [...#Password2Observation] @go(Password2,[]Password2Observation)
}

#TokenPasswordParameters: {
	// The ID of the Container Registry Token that this Container Registry Token Password resides in. Changing this forces a new Container Registry Token Password to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/containerregistry/v1beta1.Token
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	containerRegistryTokenId?: null | string @go(ContainerRegistryTokenID,*string)

	// One password block as defined below.
	// +kubebuilder:validation:Optional
	password1?: [...#Password1Parameters] @go(Password1,[]Password1Parameters)

	// One password block as defined below.
	// +kubebuilder:validation:Optional
	password2?: [...#Password2Parameters] @go(Password2,[]Password2Parameters)
}

// TokenPasswordSpec defines the desired state of TokenPassword
#TokenPasswordSpec: {
	forProvider: #TokenPasswordParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TokenPasswordInitParameters @go(InitProvider)
}

// TokenPasswordStatus defines the observed state of TokenPassword.
#TokenPasswordStatus: {
	atProvider?: #TokenPasswordObservation @go(AtProvider)
}

// TokenPassword is the Schema for the TokenPasswords API. Manages a Container Registry Token Password.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#TokenPassword: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.password1) || has(self.initProvider.password1)",message="password1 is a required parameter"
	spec:    #TokenPasswordSpec   @go(Spec)
	status?: #TokenPasswordStatus @go(Status)
}

// TokenPasswordList contains a list of TokenPasswords
#TokenPasswordList: {
	items: [...#TokenPassword] @go(Items,[]TokenPassword)
}
