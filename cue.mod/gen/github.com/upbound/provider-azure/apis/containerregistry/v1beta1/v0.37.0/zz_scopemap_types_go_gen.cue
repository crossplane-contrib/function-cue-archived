// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/containerregistry/v1beta1

package v1beta1

#ScopeMapInitParameters: {
	// A list of actions to attach to the scope map (e.g. repo/content/read, repo2/content/delete).
	actions?: [...null | string] @go(Actions,[]*string)

	// The description of the Container Registry.
	description?: null | string @go(Description,*string)
}

#ScopeMapObservation: {
	// A list of actions to attach to the scope map (e.g. repo/content/read, repo2/content/delete).
	actions?: [...null | string] @go(Actions,[]*string)

	// The name of the Container Registry. Changing this forces a new resource to be created.
	containerRegistryName?: null | string @go(ContainerRegistryName,*string)

	// The description of the Container Registry.
	description?: null | string @go(Description,*string)

	// The ID of the Container Registry scope map.
	id?: null | string @go(ID,*string)

	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

#ScopeMapParameters: {
	// A list of actions to attach to the scope map (e.g. repo/content/read, repo2/content/delete).
	// +kubebuilder:validation:Optional
	actions?: [...null | string] @go(Actions,[]*string)

	// The name of the Container Registry. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/containerregistry/v1beta1.Registry
	// +kubebuilder:validation:Optional
	containerRegistryName?: null | string @go(ContainerRegistryName,*string)

	// The description of the Container Registry.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

// ScopeMapSpec defines the desired state of ScopeMap
#ScopeMapSpec: {
	forProvider: #ScopeMapParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ScopeMapInitParameters @go(InitProvider)
}

// ScopeMapStatus defines the observed state of ScopeMap.
#ScopeMapStatus: {
	atProvider?: #ScopeMapObservation @go(AtProvider)
}

// ScopeMap is the Schema for the ScopeMaps API. Manages an Azure Container Registry scope map.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ScopeMap: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actions) || (has(self.initProvider) && has(self.initProvider.actions))",message="spec.forProvider.actions is a required parameter"
	spec:    #ScopeMapSpec   @go(Spec)
	status?: #ScopeMapStatus @go(Status)
}

// ScopeMapList contains a list of ScopeMaps
#ScopeMapList: {
	items: [...#ScopeMap] @go(Items,[]ScopeMap)
}
