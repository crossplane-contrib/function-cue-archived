// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/appplatform/v1beta1

package v1beta1

#RepositoryInitParameters: {
	// Specifies the SSH public key of git repository.
	hostKey?: null | string @go(HostKey,*string)

	// Specifies the SSH key algorithm of git repository.
	hostKeyAlgorithm?: null | string @go(HostKeyAlgorithm,*string)

	// Specifies the label of the repository.
	label?: null | string @go(Label,*string)

	// Specifies the name which should be used for this repository.
	name?: null | string @go(Name,*string)

	// Specifies the collection of patterns of the repository.
	patterns?: [...null | string] @go(Patterns,[]*string)

	// Specifies a list of searching path of the repository
	searchPaths?: [...null | string] @go(SearchPaths,[]*string)

	// Specifies whether enable the strict host key checking.
	strictHostKeyChecking?: null | bool @go(StrictHostKeyChecking,*bool)

	// Specifies the URI of the repository.
	uri?: null | string @go(URI,*string)

	// Specifies the username of git repository basic auth.
	username?: null | string @go(Username,*string)
}

#RepositoryObservation: {
	// Specifies the SSH public key of git repository.
	hostKey?: null | string @go(HostKey,*string)

	// Specifies the SSH key algorithm of git repository.
	hostKeyAlgorithm?: null | string @go(HostKeyAlgorithm,*string)

	// Specifies the label of the repository.
	label?: null | string @go(Label,*string)

	// Specifies the name which should be used for this repository.
	name?: null | string @go(Name,*string)

	// Specifies the collection of patterns of the repository.
	patterns?: [...null | string] @go(Patterns,[]*string)

	// Specifies a list of searching path of the repository
	searchPaths?: [...null | string] @go(SearchPaths,[]*string)

	// Specifies whether enable the strict host key checking.
	strictHostKeyChecking?: null | bool @go(StrictHostKeyChecking,*bool)

	// Specifies the URI of the repository.
	uri?: null | string @go(URI,*string)

	// Specifies the username of git repository basic auth.
	username?: null | string @go(Username,*string)
}

#RepositoryParameters: {
	// Specifies the SSH public key of git repository.
	// +kubebuilder:validation:Optional
	hostKey?: null | string @go(HostKey,*string)

	// Specifies the SSH key algorithm of git repository.
	// +kubebuilder:validation:Optional
	hostKeyAlgorithm?: null | string @go(HostKeyAlgorithm,*string)

	// Specifies the label of the repository.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// Specifies the name which should be used for this repository.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies the collection of patterns of the repository.
	// +kubebuilder:validation:Optional
	patterns?: [...null | string] @go(Patterns,[]*string)

	// Specifies a list of searching path of the repository
	// +kubebuilder:validation:Optional
	searchPaths?: [...null | string] @go(SearchPaths,[]*string)

	// Specifies whether enable the strict host key checking.
	// +kubebuilder:validation:Optional
	strictHostKeyChecking?: null | bool @go(StrictHostKeyChecking,*bool)

	// Specifies the URI of the repository.
	// +kubebuilder:validation:Optional
	uri?: null | string @go(URI,*string)

	// Specifies the username of git repository basic auth.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#SpringCloudConfigurationServiceInitParameters: {
	// One or more repository blocks as defined below.
	repository?: [...#RepositoryInitParameters] @go(Repository,[]RepositoryInitParameters)
}

#SpringCloudConfigurationServiceObservation: {
	// The ID of the Spring Cloud Configuration Service.
	id?: null | string @go(ID,*string)

	// One or more repository blocks as defined below.
	repository?: [...#RepositoryObservation] @go(Repository,[]RepositoryObservation)

	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
	springCloudServiceId?: null | string @go(SpringCloudServiceID,*string)
}

#SpringCloudConfigurationServiceParameters: {
	// One or more repository blocks as defined below.
	// +kubebuilder:validation:Optional
	repository?: [...#RepositoryParameters] @go(Repository,[]RepositoryParameters)

	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/appplatform/v1beta1.SpringCloudService
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	springCloudServiceId?: null | string @go(SpringCloudServiceID,*string)
}

// SpringCloudConfigurationServiceSpec defines the desired state of SpringCloudConfigurationService
#SpringCloudConfigurationServiceSpec: {
	forProvider: #SpringCloudConfigurationServiceParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SpringCloudConfigurationServiceInitParameters @go(InitProvider)
}

// SpringCloudConfigurationServiceStatus defines the observed state of SpringCloudConfigurationService.
#SpringCloudConfigurationServiceStatus: {
	atProvider?: #SpringCloudConfigurationServiceObservation @go(AtProvider)
}

// SpringCloudConfigurationService is the Schema for the SpringCloudConfigurationServices API. Manages a Spring Cloud Configuration Service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#SpringCloudConfigurationService: {
	spec:    #SpringCloudConfigurationServiceSpec   @go(Spec)
	status?: #SpringCloudConfigurationServiceStatus @go(Status)
}

// SpringCloudConfigurationServiceList contains a list of SpringCloudConfigurationServices
#SpringCloudConfigurationServiceList: {
	items: [...#SpringCloudConfigurationService] @go(Items,[]SpringCloudConfigurationService)
}
