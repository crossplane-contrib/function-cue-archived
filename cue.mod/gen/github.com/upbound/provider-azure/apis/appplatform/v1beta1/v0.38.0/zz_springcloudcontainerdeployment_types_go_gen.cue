// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/appplatform/v1beta1

package v1beta1

#SpringCloudContainerDeploymentInitParameters: {
	// A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
	addonJson?: null | string @go(AddonJSON,*string)

	// Specifies the arguments to the entrypoint. The docker image's CMD is used if not specified.
	arguments?: [...null | string] @go(Arguments,[]*string)

	// Specifies the entrypoint array. It will not be executed within a shell. The docker image's ENTRYPOINT is used if not specified.
	commands?: [...null | string] @go(Commands,[]*string)

	// Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
	environmentVariables?: {[string]: null | string} @go(EnvironmentVariables,map[string]*string)

	// Container image of the custom container. This should be in the form of <repository>:<tag> without the server name of the registry.
	image?: null | string @go(Image,*string)

	// Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between 1 and 500. Defaults to 1 if not specified.
	instanceCount?: null | float64 @go(InstanceCount,*float64)

	// Specifies the language framework of the container image. The only possible value is springboot.
	languageFramework?: null | string @go(LanguageFramework,*string)

	// A quota block as defined below.
	quota?: [...#SpringCloudContainerDeploymentQuotaInitParameters] @go(Quota,[]SpringCloudContainerDeploymentQuotaInitParameters)

	// The name of the registry that contains the container image.
	server?: null | string @go(Server,*string)
}

#SpringCloudContainerDeploymentObservation: {
	// A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
	addonJson?: null | string @go(AddonJSON,*string)

	// Specifies the arguments to the entrypoint. The docker image's CMD is used if not specified.
	arguments?: [...null | string] @go(Arguments,[]*string)

	// Specifies the entrypoint array. It will not be executed within a shell. The docker image's ENTRYPOINT is used if not specified.
	commands?: [...null | string] @go(Commands,[]*string)

	// Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
	environmentVariables?: {[string]: null | string} @go(EnvironmentVariables,map[string]*string)

	// The ID of the Spring Cloud Container Deployment.
	id?: null | string @go(ID,*string)

	// Container image of the custom container. This should be in the form of <repository>:<tag> without the server name of the registry.
	image?: null | string @go(Image,*string)

	// Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between 1 and 500. Defaults to 1 if not specified.
	instanceCount?: null | float64 @go(InstanceCount,*float64)

	// Specifies the language framework of the container image. The only possible value is springboot.
	languageFramework?: null | string @go(LanguageFramework,*string)

	// A quota block as defined below.
	quota?: [...#SpringCloudContainerDeploymentQuotaObservation] @go(Quota,[]SpringCloudContainerDeploymentQuotaObservation)

	// The name of the registry that contains the container image.
	server?: null | string @go(Server,*string)

	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
	springCloudAppId?: null | string @go(SpringCloudAppID,*string)
}

#SpringCloudContainerDeploymentParameters: {
	// A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
	// +kubebuilder:validation:Optional
	addonJson?: null | string @go(AddonJSON,*string)

	// Specifies the arguments to the entrypoint. The docker image's CMD is used if not specified.
	// +kubebuilder:validation:Optional
	arguments?: [...null | string] @go(Arguments,[]*string)

	// Specifies the entrypoint array. It will not be executed within a shell. The docker image's ENTRYPOINT is used if not specified.
	// +kubebuilder:validation:Optional
	commands?: [...null | string] @go(Commands,[]*string)

	// Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
	// +kubebuilder:validation:Optional
	environmentVariables?: {[string]: null | string} @go(EnvironmentVariables,map[string]*string)

	// Container image of the custom container. This should be in the form of <repository>:<tag> without the server name of the registry.
	// +kubebuilder:validation:Optional
	image?: null | string @go(Image,*string)

	// Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between 1 and 500. Defaults to 1 if not specified.
	// +kubebuilder:validation:Optional
	instanceCount?: null | float64 @go(InstanceCount,*float64)

	// Specifies the language framework of the container image. The only possible value is springboot.
	// +kubebuilder:validation:Optional
	languageFramework?: null | string @go(LanguageFramework,*string)

	// A quota block as defined below.
	// +kubebuilder:validation:Optional
	quota?: [...#SpringCloudContainerDeploymentQuotaParameters] @go(Quota,[]SpringCloudContainerDeploymentQuotaParameters)

	// The name of the registry that contains the container image.
	// +kubebuilder:validation:Optional
	server?: null | string @go(Server,*string)

	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/appplatform/v1beta1.SpringCloudApp
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	springCloudAppId?: null | string @go(SpringCloudAppID,*string)
}

#SpringCloudContainerDeploymentQuotaInitParameters: {
	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are 500m, 1, 2, 3 and 4. Defaults to 1 if not specified.
	cpu?: null | string @go(CPU,*string)

	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are 512Mi, 1Gi, 2Gi, 3Gi, 4Gi, 5Gi, 6Gi, 7Gi, and 8Gi. Defaults to 1Gi if not specified.
	memory?: null | string @go(Memory,*string)
}

#SpringCloudContainerDeploymentQuotaObservation: {
	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are 500m, 1, 2, 3 and 4. Defaults to 1 if not specified.
	cpu?: null | string @go(CPU,*string)

	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are 512Mi, 1Gi, 2Gi, 3Gi, 4Gi, 5Gi, 6Gi, 7Gi, and 8Gi. Defaults to 1Gi if not specified.
	memory?: null | string @go(Memory,*string)
}

#SpringCloudContainerDeploymentQuotaParameters: {
	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are 500m, 1, 2, 3 and 4. Defaults to 1 if not specified.
	// +kubebuilder:validation:Optional
	cpu?: null | string @go(CPU,*string)

	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are 512Mi, 1Gi, 2Gi, 3Gi, 4Gi, 5Gi, 6Gi, 7Gi, and 8Gi. Defaults to 1Gi if not specified.
	// +kubebuilder:validation:Optional
	memory?: null | string @go(Memory,*string)
}

// SpringCloudContainerDeploymentSpec defines the desired state of SpringCloudContainerDeployment
#SpringCloudContainerDeploymentSpec: {
	forProvider: #SpringCloudContainerDeploymentParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SpringCloudContainerDeploymentInitParameters @go(InitProvider)
}

// SpringCloudContainerDeploymentStatus defines the observed state of SpringCloudContainerDeployment.
#SpringCloudContainerDeploymentStatus: {
	atProvider?: #SpringCloudContainerDeploymentObservation @go(AtProvider)
}

// SpringCloudContainerDeployment is the Schema for the SpringCloudContainerDeployments API. Manages a Spring Cloud Container Deployment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#SpringCloudContainerDeployment: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.image) || (has(self.initProvider) && has(self.initProvider.image))",message="spec.forProvider.image is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.server) || (has(self.initProvider) && has(self.initProvider.server))",message="spec.forProvider.server is a required parameter"
	spec:    #SpringCloudContainerDeploymentSpec   @go(Spec)
	status?: #SpringCloudContainerDeploymentStatus @go(Status)
}

// SpringCloudContainerDeploymentList contains a list of SpringCloudContainerDeployments
#SpringCloudContainerDeploymentList: {
	items: [...#SpringCloudContainerDeployment] @go(Items,[]SpringCloudContainerDeployment)
}
