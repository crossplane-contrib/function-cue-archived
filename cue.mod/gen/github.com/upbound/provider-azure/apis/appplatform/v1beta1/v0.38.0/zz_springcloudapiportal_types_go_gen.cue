// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/appplatform/v1beta1

package v1beta1

#SpringCloudAPIPortalInitParameters: {
	// is only https is allowed?
	httpsOnlyEnabled?: null | bool @go(HTTPSOnlyEnabled,*bool)

	// Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between 1 and 500. Defaults to 1 if not specified.
	instanceCount?: null | float64 @go(InstanceCount,*float64)

	// Is the public network access enabled?
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// A sso block as defined below.
	sso?: [...#SsoInitParameters] @go(Sso,[]SsoInitParameters)
}

#SpringCloudAPIPortalObservation: {
	// Specifies a list of Spring Cloud Gateway.
	gatewayIds?: [...null | string] @go(GatewayIds,[]*string)

	// is only https is allowed?
	httpsOnlyEnabled?: null | bool @go(HTTPSOnlyEnabled,*bool)

	// The ID of the Spring Cloud API Portal.
	id?: null | string @go(ID,*string)

	// Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between 1 and 500. Defaults to 1 if not specified.
	instanceCount?: null | float64 @go(InstanceCount,*float64)

	// Is the public network access enabled?
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
	springCloudServiceId?: null | string @go(SpringCloudServiceID,*string)

	// A sso block as defined below.
	sso?: [...#SsoObservation] @go(Sso,[]SsoObservation)

	// TODO.
	url?: null | string @go(URL,*string)
}

#SpringCloudAPIPortalParameters: {
	// Specifies a list of Spring Cloud Gateway.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/appplatform/v1beta1.SpringCloudGateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	gatewayIds?: [...null | string] @go(GatewayIds,[]*string)

	// is only https is allowed?
	// +kubebuilder:validation:Optional
	httpsOnlyEnabled?: null | bool @go(HTTPSOnlyEnabled,*bool)

	// Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between 1 and 500. Defaults to 1 if not specified.
	// +kubebuilder:validation:Optional
	instanceCount?: null | float64 @go(InstanceCount,*float64)

	// Is the public network access enabled?
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/appplatform/v1beta1.SpringCloudService
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	springCloudServiceId?: null | string @go(SpringCloudServiceID,*string)

	// A sso block as defined below.
	// +kubebuilder:validation:Optional
	sso?: [...#SsoParameters] @go(Sso,[]SsoParameters)
}

#SsoInitParameters: {
	// The public identifier for the application.
	clientId?: null | string @go(ClientID,*string)

	// The secret known only to the application and the authorization server.
	clientSecret?: null | string @go(ClientSecret,*string)

	// The URI of Issuer Identifier.
	issuerUri?: null | string @go(IssuerURI,*string)

	// It defines the specific actions applications can be allowed to do on a user's behalf.
	scope?: [...null | string] @go(Scope,[]*string)
}

#SsoObservation: {
	// The public identifier for the application.
	clientId?: null | string @go(ClientID,*string)

	// The secret known only to the application and the authorization server.
	clientSecret?: null | string @go(ClientSecret,*string)

	// The URI of Issuer Identifier.
	issuerUri?: null | string @go(IssuerURI,*string)

	// It defines the specific actions applications can be allowed to do on a user's behalf.
	scope?: [...null | string] @go(Scope,[]*string)
}

#SsoParameters: {
	// The public identifier for the application.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The secret known only to the application and the authorization server.
	// +kubebuilder:validation:Optional
	clientSecret?: null | string @go(ClientSecret,*string)

	// The URI of Issuer Identifier.
	// +kubebuilder:validation:Optional
	issuerUri?: null | string @go(IssuerURI,*string)

	// It defines the specific actions applications can be allowed to do on a user's behalf.
	// +kubebuilder:validation:Optional
	scope?: [...null | string] @go(Scope,[]*string)
}

// SpringCloudAPIPortalSpec defines the desired state of SpringCloudAPIPortal
#SpringCloudAPIPortalSpec: {
	forProvider: #SpringCloudAPIPortalParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SpringCloudAPIPortalInitParameters @go(InitProvider)
}

// SpringCloudAPIPortalStatus defines the observed state of SpringCloudAPIPortal.
#SpringCloudAPIPortalStatus: {
	atProvider?: #SpringCloudAPIPortalObservation @go(AtProvider)
}

// SpringCloudAPIPortal is the Schema for the SpringCloudAPIPortals API. Manages a Spring Cloud API Portal.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#SpringCloudAPIPortal: {
	spec:    #SpringCloudAPIPortalSpec   @go(Spec)
	status?: #SpringCloudAPIPortalStatus @go(Status)
}

// SpringCloudAPIPortalList contains a list of SpringCloudAPIPortals
#SpringCloudAPIPortalList: {
	items: [...#SpringCloudAPIPortal] @go(Items,[]SpringCloudAPIPortal)
}
