// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/datamigration/v1beta1

package v1beta1

#DatabaseMigrationProjectInitParameters: {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Specify the name of the database migration project. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The platform type of the migration source. Currently only support: SQL(on-premises SQL Server). Changing this forces a new resource to be created.
	sourcePlatform?: null | string @go(SourcePlatform,*string)

	// A mapping of tags to assigned to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The platform type of the migration target. Currently only support: SQLDB(Azure SQL Database). Changing this forces a new resource to be created.
	targetPlatform?: null | string @go(TargetPlatform,*string)
}

#DatabaseMigrationProjectObservation: {
	// The ID of Database Migration Project.
	id?: null | string @go(ID,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Specify the name of the database migration project. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// Name of the resource group in which to create the database migration project. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Name of the database migration service where resource belongs to. Changing this forces a new resource to be created.
	serviceName?: null | string @go(ServiceName,*string)

	// The platform type of the migration source. Currently only support: SQL(on-premises SQL Server). Changing this forces a new resource to be created.
	sourcePlatform?: null | string @go(SourcePlatform,*string)

	// A mapping of tags to assigned to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The platform type of the migration target. Currently only support: SQLDB(Azure SQL Database). Changing this forces a new resource to be created.
	targetPlatform?: null | string @go(TargetPlatform,*string)
}

#DatabaseMigrationProjectParameters: {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Specify the name of the database migration project. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Name of the resource group in which to create the database migration project. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Name of the database migration service where resource belongs to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datamigration/v1beta1.DatabaseMigrationService
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)

	// The platform type of the migration source. Currently only support: SQL(on-premises SQL Server). Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	sourcePlatform?: null | string @go(SourcePlatform,*string)

	// A mapping of tags to assigned to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The platform type of the migration target. Currently only support: SQLDB(Azure SQL Database). Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	targetPlatform?: null | string @go(TargetPlatform,*string)
}

// DatabaseMigrationProjectSpec defines the desired state of DatabaseMigrationProject
#DatabaseMigrationProjectSpec: {
	forProvider: #DatabaseMigrationProjectParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DatabaseMigrationProjectInitParameters @go(InitProvider)
}

// DatabaseMigrationProjectStatus defines the observed state of DatabaseMigrationProject.
#DatabaseMigrationProjectStatus: {
	atProvider?: #DatabaseMigrationProjectObservation @go(AtProvider)
}

// DatabaseMigrationProject is the Schema for the DatabaseMigrationProjects API. Manage Azure Database Migration Project instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#DatabaseMigrationProject: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourcePlatform) || (has(self.initProvider) && has(self.initProvider.sourcePlatform))",message="spec.forProvider.sourcePlatform is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetPlatform) || (has(self.initProvider) && has(self.initProvider.targetPlatform))",message="spec.forProvider.targetPlatform is a required parameter"
	spec:    #DatabaseMigrationProjectSpec   @go(Spec)
	status?: #DatabaseMigrationProjectStatus @go(Status)
}

// DatabaseMigrationProjectList contains a list of DatabaseMigrationProjects
#DatabaseMigrationProjectList: {
	items: [...#DatabaseMigrationProject] @go(Items,[]DatabaseMigrationProject)
}
