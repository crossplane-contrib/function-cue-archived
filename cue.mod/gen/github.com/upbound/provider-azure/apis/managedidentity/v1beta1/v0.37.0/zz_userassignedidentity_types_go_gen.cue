// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/managedidentity/v1beta1

package v1beta1

#UserAssignedIdentityInitParameters: {
	// The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	location?: null | string @go(Location,*string)

	// Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
	name?: null | string @go(Name,*string)

	// A mapping of tags which should be assigned to the User Assigned Identity.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#UserAssignedIdentityObservation: {
	// The ID of the app associated with the Identity.
	clientId?: null | string @go(ClientID,*string)

	// The ID of the User Assigned Identity.
	id?: null | string @go(ID,*string)

	// The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	location?: null | string @go(Location,*string)

	// Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
	name?: null | string @go(Name,*string)

	// The ID of the Service Principal object associated with the created Identity.
	principalId?: null | string @go(PrincipalID,*string)

	// Specifies the name of the Resource Group within which this User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags which should be assigned to the User Assigned Identity.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The ID of the Tenant which the Identity belongs to.
	tenantId?: null | string @go(TenantID,*string)
}

#UserAssignedIdentityParameters: {
	// The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies the name of the Resource Group within which this User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags which should be assigned to the User Assigned Identity.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// UserAssignedIdentitySpec defines the desired state of UserAssignedIdentity
#UserAssignedIdentitySpec: {
	forProvider: #UserAssignedIdentityParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #UserAssignedIdentityInitParameters @go(InitProvider)
}

// UserAssignedIdentityStatus defines the observed state of UserAssignedIdentity.
#UserAssignedIdentityStatus: {
	atProvider?: #UserAssignedIdentityObservation @go(AtProvider)
}

// UserAssignedIdentity is the Schema for the UserAssignedIdentitys API. Manages a User Assigned Identity.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#UserAssignedIdentity: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #UserAssignedIdentitySpec   @go(Spec)
	status?: #UserAssignedIdentityStatus @go(Status)
}

// UserAssignedIdentityList contains a list of UserAssignedIdentitys
#UserAssignedIdentityList: {
	items: [...#UserAssignedIdentity] @go(Items,[]UserAssignedIdentity)
}
