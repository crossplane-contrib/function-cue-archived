// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/managedidentity/v1beta1

package v1beta1

#FederatedIdentityCredentialInitParameters: {
	// Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	audience?: [...null | string] @go(Audience,[]*string)

	// Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	issuer?: null | string @go(Issuer,*string)

	// Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	subject?: null | string @go(Subject,*string)
}

#FederatedIdentityCredentialObservation: {
	// Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	audience?: [...null | string] @go(Audience,[]*string)

	// The ID of the Federated Identity Credential.
	id?: null | string @go(ID,*string)

	// Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	issuer?: null | string @go(Issuer,*string)

	// Specifies parent ID of User Assigned Identity for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	parentId?: null | string @go(ParentID,*string)

	// Specifies the name of the Resource Group within which this Federated Identity Credential should exist. Changing this forces a new Federated Identity Credential to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	subject?: null | string @go(Subject,*string)
}

#FederatedIdentityCredentialParameters: {
	// Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	// +kubebuilder:validation:Optional
	audience?: [...null | string] @go(Audience,[]*string)

	// Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	// +kubebuilder:validation:Optional
	issuer?: null | string @go(Issuer,*string)

	// Specifies parent ID of User Assigned Identity for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/managedidentity/v1beta1.UserAssignedIdentity
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	parentId?: null | string @go(ParentID,*string)

	// Specifies the name of the Resource Group within which this Federated Identity Credential should exist. Changing this forces a new Federated Identity Credential to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	// +kubebuilder:validation:Optional
	subject?: null | string @go(Subject,*string)
}

// FederatedIdentityCredentialSpec defines the desired state of FederatedIdentityCredential
#FederatedIdentityCredentialSpec: {
	forProvider: #FederatedIdentityCredentialParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FederatedIdentityCredentialInitParameters @go(InitProvider)
}

// FederatedIdentityCredentialStatus defines the observed state of FederatedIdentityCredential.
#FederatedIdentityCredentialStatus: {
	atProvider?: #FederatedIdentityCredentialObservation @go(AtProvider)
}

// FederatedIdentityCredential is the Schema for the FederatedIdentityCredentials API. Manages a Federated Identity Credential.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#FederatedIdentityCredential: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.audience) || (has(self.initProvider) && has(self.initProvider.audience))",message="spec.forProvider.audience is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.issuer) || (has(self.initProvider) && has(self.initProvider.issuer))",message="spec.forProvider.issuer is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subject) || (has(self.initProvider) && has(self.initProvider.subject))",message="spec.forProvider.subject is a required parameter"
	spec:    #FederatedIdentityCredentialSpec   @go(Spec)
	status?: #FederatedIdentityCredentialStatus @go(Status)
}

// FederatedIdentityCredentialList contains a list of FederatedIdentityCredentials
#FederatedIdentityCredentialList: {
	items: [...#FederatedIdentityCredential] @go(Items,[]FederatedIdentityCredential)
}
