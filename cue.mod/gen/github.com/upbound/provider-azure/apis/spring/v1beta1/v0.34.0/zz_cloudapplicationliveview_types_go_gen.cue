// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/spring/v1beta1

package v1beta1

#CloudApplicationLiveViewObservation: {
	// The ID of the Spring Cloud Application Live View.
	id?: null | string @go(ID,*string)

	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
	springCloudServiceId?: null | string @go(SpringCloudServiceID,*string)
}

#CloudApplicationLiveViewParameters: {
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/appplatform/v1beta1.SpringCloudService
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	springCloudServiceId?: null | string @go(SpringCloudServiceID,*string)
}

// CloudApplicationLiveViewSpec defines the desired state of CloudApplicationLiveView
#CloudApplicationLiveViewSpec: {
	forProvider: #CloudApplicationLiveViewParameters @go(ForProvider)
}

// CloudApplicationLiveViewStatus defines the observed state of CloudApplicationLiveView.
#CloudApplicationLiveViewStatus: {
	atProvider?: #CloudApplicationLiveViewObservation @go(AtProvider)
}

// CloudApplicationLiveView is the Schema for the CloudApplicationLiveViews API. Manages a Spring Cloud Application Live View.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#CloudApplicationLiveView: {
	spec:    #CloudApplicationLiveViewSpec   @go(Spec)
	status?: #CloudApplicationLiveViewStatus @go(Status)
}

// CloudApplicationLiveViewList contains a list of CloudApplicationLiveViews
#CloudApplicationLiveViewList: {
	items: [...#CloudApplicationLiveView] @go(Items,[]CloudApplicationLiveView)
}
