// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/storagepool/v1beta1

package v1beta1

#DiskPoolObservation: {
	// The ID of the Disk Pool.
	id?: null | string @go(ID,*string)

	// The Azure Region where the Disk Pool should exist. Changing this forces a new Disk Pool to be created.
	location?: null | string @go(Location,*string)

	// The name of the Resource Group where the Disk Pool should exist. Changing this forces a new Disk Pool to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The SKU of the Disk Pool. Possible values are Basic_B1, Standard_S1 and Premium_P1. Changing this forces a new Disk Pool to be created.
	skuName?: null | string @go(SkuName,*string)

	// The ID of the Subnet where the Disk Pool should be created. Changing this forces a new Disk Pool to be created.
	subnetId?: null | string @go(SubnetID,*string)

	// A mapping of tags which should be assigned to the Disk Pool.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies a list of Availability Zones in which this Disk Pool should be located. Changing this forces a new Disk Pool to be created.
	zones?: [...null | string] @go(Zones,[]*string)
}

#DiskPoolParameters: {
	// The Azure Region where the Disk Pool should exist. Changing this forces a new Disk Pool to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The name of the Resource Group where the Disk Pool should exist. Changing this forces a new Disk Pool to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The SKU of the Disk Pool. Possible values are Basic_B1, Standard_S1 and Premium_P1. Changing this forces a new Disk Pool to be created.
	// +kubebuilder:validation:Optional
	skuName?: null | string @go(SkuName,*string)

	// The ID of the Subnet where the Disk Pool should be created. Changing this forces a new Disk Pool to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// A mapping of tags which should be assigned to the Disk Pool.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies a list of Availability Zones in which this Disk Pool should be located. Changing this forces a new Disk Pool to be created.
	// +kubebuilder:validation:Optional
	zones?: [...null | string] @go(Zones,[]*string)
}

// DiskPoolSpec defines the desired state of DiskPool
#DiskPoolSpec: {
	forProvider: #DiskPoolParameters @go(ForProvider)
}

// DiskPoolStatus defines the observed state of DiskPool.
#DiskPoolStatus: {
	atProvider?: #DiskPoolObservation @go(AtProvider)
}

// DiskPool is the Schema for the DiskPools API. Manages a Disk Pool.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#DiskPool: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.skuName)",message="skuName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.zones)",message="zones is a required parameter"
	spec:    #DiskPoolSpec   @go(Spec)
	status?: #DiskPoolStatus @go(Status)
}

// DiskPoolList contains a list of DiskPools
#DiskPoolList: {
	items: [...#DiskPool] @go(Items,[]DiskPool)
}
