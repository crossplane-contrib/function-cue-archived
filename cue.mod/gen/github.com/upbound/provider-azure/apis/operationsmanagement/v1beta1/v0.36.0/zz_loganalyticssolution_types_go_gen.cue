// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/operationsmanagement/v1beta1

package v1beta1

#LogAnalyticsSolutionInitParameters: {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A plan block as documented below.
	plan?: [...#PlanInitParameters] @go(Plan,[]PlanInitParameters)

	// Specifies the name of the solution to be deployed. See here for options.Changing this forces a new resource to be created.
	solutionName?: null | string @go(SolutionName,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#LogAnalyticsSolutionObservation: {
	id?: null | string @go(ID,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A plan block as documented below.
	plan?: [...#PlanObservation] @go(Plan,[]PlanObservation)

	// The name of the resource group in which the Log Analytics solution is created. Changing this forces a new resource to be created. Note: The solution and its related workspace can only exist in the same resource group.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Specifies the name of the solution to be deployed. See here for options.Changing this forces a new resource to be created.
	solutionName?: null | string @go(SolutionName,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The full name of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	workspaceName?: null | string @go(WorkspaceName,*string)

	// The full resource ID of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	workspaceResourceId?: null | string @go(WorkspaceResourceID,*string)
}

#LogAnalyticsSolutionParameters: {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// A plan block as documented below.
	// +kubebuilder:validation:Optional
	plan?: [...#PlanParameters] @go(Plan,[]PlanParameters)

	// The name of the resource group in which the Log Analytics solution is created. Changing this forces a new resource to be created. Note: The solution and its related workspace can only exist in the same resource group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Specifies the name of the solution to be deployed. See here for options.Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	solutionName?: null | string @go(SolutionName,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The full name of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/operationalinsights/v1beta1.Workspace
	// +kubebuilder:validation:Optional
	workspaceName?: null | string @go(WorkspaceName,*string)

	// The full resource ID of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/operationalinsights/v1beta1.Workspace
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	workspaceResourceId?: null | string @go(WorkspaceResourceID,*string)
}

#PlanInitParameters: {
	// The product name of the solution. For example OMSGallery/Containers. Changing this forces a new resource to be created.
	product?: null | string @go(Product,*string)

	// A promotion code to be used with the solution. Changing this forces a new resource to be created.
	promotionCode?: null | string @go(PromotionCode,*string)

	// The publisher of the solution. For example Microsoft. Changing this forces a new resource to be created.
	publisher?: null | string @go(Publisher,*string)
}

#PlanObservation: {
	name?: null | string @go(Name,*string)

	// The product name of the solution. For example OMSGallery/Containers. Changing this forces a new resource to be created.
	product?: null | string @go(Product,*string)

	// A promotion code to be used with the solution. Changing this forces a new resource to be created.
	promotionCode?: null | string @go(PromotionCode,*string)

	// The publisher of the solution. For example Microsoft. Changing this forces a new resource to be created.
	publisher?: null | string @go(Publisher,*string)
}

#PlanParameters: {
	// The product name of the solution. For example OMSGallery/Containers. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	product?: null | string @go(Product,*string)

	// A promotion code to be used with the solution. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	promotionCode?: null | string @go(PromotionCode,*string)

	// The publisher of the solution. For example Microsoft. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	publisher?: null | string @go(Publisher,*string)
}

// LogAnalyticsSolutionSpec defines the desired state of LogAnalyticsSolution
#LogAnalyticsSolutionSpec: {
	forProvider: #LogAnalyticsSolutionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LogAnalyticsSolutionInitParameters @go(InitProvider)
}

// LogAnalyticsSolutionStatus defines the observed state of LogAnalyticsSolution.
#LogAnalyticsSolutionStatus: {
	atProvider?: #LogAnalyticsSolutionObservation @go(AtProvider)
}

// LogAnalyticsSolution is the Schema for the LogAnalyticsSolutions API. Manages a Log Analytics (formally Operational Insights) Solution.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LogAnalyticsSolution: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || has(self.initProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.plan) || has(self.initProvider.plan)",message="plan is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.solutionName) || has(self.initProvider.solutionName)",message="solutionName is a required parameter"
	spec:    #LogAnalyticsSolutionSpec   @go(Spec)
	status?: #LogAnalyticsSolutionStatus @go(Status)
}

// LogAnalyticsSolutionList contains a list of LogAnalyticsSolutions
#LogAnalyticsSolutionList: {
	items: [...#LogAnalyticsSolution] @go(Items,[]LogAnalyticsSolution)
}
