// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/resources/v1beta1

package v1beta1

#SubscriptionTemplateDeploymentObservation: {
	// The Debug Level which should be used for this Subscription Template Deployment. Possible values are none, requestContent, responseContent and requestContent, responseContent.
	debugLevel?: null | string @go(DebugLevel,*string)

	// The ID of the Subscription Template Deployment.
	id?: null | string @go(ID,*string)

	// The Azure Region where the Subscription Template Deployment should exist. Changing this forces a new Subscription Template Deployment to be created.
	location?: null | string @go(Location,*string)

	// The JSON Content of the Outputs of the ARM Template Deployment.
	outputContent?: null | string @go(OutputContent,*string)

	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	parametersContent?: null | string @go(ParametersContent,*string)

	// A mapping of tags which should be assigned to the Subscription Template Deployment.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The contents of the ARM Template which should be deployed into this Subscription.
	templateContent?: null | string @go(TemplateContent,*string)

	// The ID of the Template Spec Version to deploy into the Subscription. Cannot be specified with template_content.
	templateSpecVersionId?: null | string @go(TemplateSpecVersionID,*string)
}

#SubscriptionTemplateDeploymentParameters: {
	// The Debug Level which should be used for this Subscription Template Deployment. Possible values are none, requestContent, responseContent and requestContent, responseContent.
	// +kubebuilder:validation:Optional
	debugLevel?: null | string @go(DebugLevel,*string)

	// The Azure Region where the Subscription Template Deployment should exist. Changing this forces a new Subscription Template Deployment to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	// +kubebuilder:validation:Optional
	parametersContent?: null | string @go(ParametersContent,*string)

	// A mapping of tags which should be assigned to the Subscription Template Deployment.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The contents of the ARM Template which should be deployed into this Subscription.
	// +kubebuilder:validation:Optional
	templateContent?: null | string @go(TemplateContent,*string)

	// The ID of the Template Spec Version to deploy into the Subscription. Cannot be specified with template_content.
	// +kubebuilder:validation:Optional
	templateSpecVersionId?: null | string @go(TemplateSpecVersionID,*string)
}

// SubscriptionTemplateDeploymentSpec defines the desired state of SubscriptionTemplateDeployment
#SubscriptionTemplateDeploymentSpec: {
	forProvider: #SubscriptionTemplateDeploymentParameters @go(ForProvider)
}

// SubscriptionTemplateDeploymentStatus defines the observed state of SubscriptionTemplateDeployment.
#SubscriptionTemplateDeploymentStatus: {
	atProvider?: #SubscriptionTemplateDeploymentObservation @go(AtProvider)
}

// SubscriptionTemplateDeployment is the Schema for the SubscriptionTemplateDeployments API. Manages a Subscription Template Deployment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#SubscriptionTemplateDeployment: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",message="location is a required parameter"
	spec:    #SubscriptionTemplateDeploymentSpec   @go(Spec)
	status?: #SubscriptionTemplateDeploymentStatus @go(Status)
}

// SubscriptionTemplateDeploymentList contains a list of SubscriptionTemplateDeployments
#SubscriptionTemplateDeploymentList: {
	items: [...#SubscriptionTemplateDeployment] @go(Items,[]SubscriptionTemplateDeployment)
}
