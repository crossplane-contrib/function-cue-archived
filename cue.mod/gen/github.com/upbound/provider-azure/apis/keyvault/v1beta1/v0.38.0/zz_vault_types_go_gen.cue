// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/keyvault/v1beta1

package v1beta1

#AccessPolicyInitParameters: {
}

#AccessPolicyObservation: {
	// The object ID of an Application in Azure Active Directory.
	applicationId?: null | string @go(ApplicationID,*string)

	// List of certificate permissions, must be one or more from the following: Backup, Create, Delete, DeleteIssuers, Get, GetIssuers, Import, List, ListIssuers, ManageContacts, ManageIssuers, Purge, Recover, Restore, SetIssuers and Update.
	certificatePermissions?: [...null | string] @go(CertificatePermissions,[]*string)

	// List of key permissions. Possible values are Backup, Create, Decrypt, Delete, Encrypt, Get, Import, List, Purge, Recover, Restore, Sign, UnwrapKey, Update, Verify, WrapKey, Release, Rotate, GetRotationPolicy and SetRotationPolicy.
	keyPermissions?: [...null | string] @go(KeyPermissions,[]*string)

	// The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
	objectId?: null | string @go(ObjectID,*string)

	// List of secret permissions, must be one or more from the following: Backup, Delete, Get, List, Purge, Recover, Restore and Set.
	secretPermissions?: [...null | string] @go(SecretPermissions,[]*string)

	// List of storage permissions, must be one or more from the following: Backup, Delete, DeleteSAS, Get, GetSAS, List, ListSAS, Purge, Recover, RegenerateKey, Restore, Set, SetSAS and Update.
	storagePermissions?: [...null | string] @go(StoragePermissions,[]*string)

	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Must match the tenant_id used above.
	tenantId?: null | string @go(TenantID,*string)
}

#AccessPolicyParameters: {
}

#ContactInitParameters: {
	// E-mail address of the contact.
	email?: null | string @go(Email,*string)

	// Name of the contact.
	name?: null | string @go(Name,*string)

	// Phone number of the contact.
	phone?: null | string @go(Phone,*string)
}

#ContactObservation: {
	// E-mail address of the contact.
	email?: null | string @go(Email,*string)

	// Name of the contact.
	name?: null | string @go(Name,*string)

	// Phone number of the contact.
	phone?: null | string @go(Phone,*string)
}

#ContactParameters: {
	// E-mail address of the contact.
	// +kubebuilder:validation:Optional
	email?: null | string @go(Email,*string)

	// Name of the contact.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Phone number of the contact.
	// +kubebuilder:validation:Optional
	phone?: null | string @go(Phone,*string)
}

#NetworkAclsInitParameters: {
	// Specifies which traffic can bypass the network rules. Possible values are AzureServices and None.
	bypass?: null | string @go(Bypass,*string)

	// The Default Action to use when no rules match from ip_rules / virtual_network_subnet_ids. Possible values are Allow and Deny.
	defaultAction?: null | string @go(DefaultAction,*string)

	// One or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
	ipRules?: [...null | string] @go(IPRules,[]*string)

	// One or more Subnet IDs which should be able to access this Key Vault.
	virtualNetworkSubnetIds?: [...null | string] @go(VirtualNetworkSubnetIds,[]*string)
}

#NetworkAclsObservation: {
	// Specifies which traffic can bypass the network rules. Possible values are AzureServices and None.
	bypass?: null | string @go(Bypass,*string)

	// The Default Action to use when no rules match from ip_rules / virtual_network_subnet_ids. Possible values are Allow and Deny.
	defaultAction?: null | string @go(DefaultAction,*string)

	// One or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
	ipRules?: [...null | string] @go(IPRules,[]*string)

	// One or more Subnet IDs which should be able to access this Key Vault.
	virtualNetworkSubnetIds?: [...null | string] @go(VirtualNetworkSubnetIds,[]*string)
}

#NetworkAclsParameters: {
	// Specifies which traffic can bypass the network rules. Possible values are AzureServices and None.
	// +kubebuilder:validation:Optional
	bypass?: null | string @go(Bypass,*string)

	// The Default Action to use when no rules match from ip_rules / virtual_network_subnet_ids. Possible values are Allow and Deny.
	// +kubebuilder:validation:Optional
	defaultAction?: null | string @go(DefaultAction,*string)

	// One or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
	// +kubebuilder:validation:Optional
	ipRules?: [...null | string] @go(IPRules,[]*string)

	// One or more Subnet IDs which should be able to access this Key Vault.
	// +kubebuilder:validation:Optional
	virtualNetworkSubnetIds?: [...null | string] @go(VirtualNetworkSubnetIds,[]*string)
}

#VaultInitParameters: {
	// One or more contact block as defined below.
	contact?: [...#ContactInitParameters] @go(Contact,[]ContactInitParameters)

	// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
	enableRbacAuthorization?: null | bool @go(EnableRbacAuthorization,*bool)

	// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
	enabledForDeployment?: null | bool @go(EnabledForDeployment,*bool)

	// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	enabledForDiskEncryption?: null | bool @go(EnabledForDiskEncryption,*bool)

	// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
	enabledForTemplateDeployment?: null | bool @go(EnabledForTemplateDeployment,*bool)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A network_acls block as defined below.
	networkAcls?: [...#NetworkAclsInitParameters] @go(NetworkAcls,[]NetworkAclsInitParameters)

	// Whether public network access is allowed for this Key Vault. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// Is Purge Protection enabled for this Key Vault?
	purgeProtectionEnabled?: null | bool @go(PurgeProtectionEnabled,*bool)

	// The Name of the SKU used for this Key Vault. Possible values are standard and premium.
	skuName?: null | string @go(SkuName,*string)

	// The number of days that items should be retained for once soft-deleted. This value can be between 7 and 90 (the default) days.
	softDeleteRetentionDays?: null | float64 @go(SoftDeleteRetentionDays,*float64)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	tenantId?: null | string @go(TenantID,*string)
}

#VaultObservation: {
	// A list of up to 1024 objects describing access policies, as described below.
	accessPolicy?: [...#AccessPolicyObservation] @go(AccessPolicy,[]AccessPolicyObservation)

	// One or more contact block as defined below.
	contact?: [...#ContactObservation] @go(Contact,[]ContactObservation)

	// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
	enableRbacAuthorization?: null | bool @go(EnableRbacAuthorization,*bool)

	// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
	enabledForDeployment?: null | bool @go(EnabledForDeployment,*bool)

	// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	enabledForDiskEncryption?: null | bool @go(EnabledForDiskEncryption,*bool)

	// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
	enabledForTemplateDeployment?: null | bool @go(EnabledForTemplateDeployment,*bool)

	// The ID of the Key Vault.
	id?: null | string @go(ID,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A network_acls block as defined below.
	networkAcls?: [...#NetworkAclsObservation] @go(NetworkAcls,[]NetworkAclsObservation)

	// Whether public network access is allowed for this Key Vault. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// Is Purge Protection enabled for this Key Vault?
	purgeProtectionEnabled?: null | bool @go(PurgeProtectionEnabled,*bool)

	// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The Name of the SKU used for this Key Vault. Possible values are standard and premium.
	skuName?: null | string @go(SkuName,*string)

	// The number of days that items should be retained for once soft-deleted. This value can be between 7 and 90 (the default) days.
	softDeleteRetentionDays?: null | float64 @go(SoftDeleteRetentionDays,*float64)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	tenantId?: null | string @go(TenantID,*string)

	// The URI of the Key Vault, used for performing operations on keys and secrets.
	vaultUri?: null | string @go(VaultURI,*string)
}

#VaultParameters: {
	// One or more contact block as defined below.
	// +kubebuilder:validation:Optional
	contact?: [...#ContactParameters] @go(Contact,[]ContactParameters)

	// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
	// +kubebuilder:validation:Optional
	enableRbacAuthorization?: null | bool @go(EnableRbacAuthorization,*bool)

	// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
	// +kubebuilder:validation:Optional
	enabledForDeployment?: null | bool @go(EnabledForDeployment,*bool)

	// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	// +kubebuilder:validation:Optional
	enabledForDiskEncryption?: null | bool @go(EnabledForDiskEncryption,*bool)

	// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
	// +kubebuilder:validation:Optional
	enabledForTemplateDeployment?: null | bool @go(EnabledForTemplateDeployment,*bool)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// A network_acls block as defined below.
	// +kubebuilder:validation:Optional
	networkAcls?: [...#NetworkAclsParameters] @go(NetworkAcls,[]NetworkAclsParameters)

	// Whether public network access is allowed for this Key Vault. Defaults to true.
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// Is Purge Protection enabled for this Key Vault?
	// +kubebuilder:validation:Optional
	purgeProtectionEnabled?: null | bool @go(PurgeProtectionEnabled,*bool)

	// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The Name of the SKU used for this Key Vault. Possible values are standard and premium.
	// +kubebuilder:validation:Optional
	skuName?: null | string @go(SkuName,*string)

	// The number of days that items should be retained for once soft-deleted. This value can be between 7 and 90 (the default) days.
	// +kubebuilder:validation:Optional
	softDeleteRetentionDays?: null | float64 @go(SoftDeleteRetentionDays,*float64)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	// +kubebuilder:validation:Optional
	tenantId?: null | string @go(TenantID,*string)
}

// VaultSpec defines the desired state of Vault
#VaultSpec: {
	forProvider: #VaultParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VaultInitParameters @go(InitProvider)
}

// VaultStatus defines the observed state of Vault.
#VaultStatus: {
	atProvider?: #VaultObservation @go(AtProvider)
}

// Vault is the Schema for the Vaults API. Manages a Key Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Vault: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.skuName) || (has(self.initProvider) && has(self.initProvider.skuName))",message="spec.forProvider.skuName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tenantId) || (has(self.initProvider) && has(self.initProvider.tenantId))",message="spec.forProvider.tenantId is a required parameter"
	spec:    #VaultSpec   @go(Spec)
	status?: #VaultStatus @go(Status)
}

// VaultList contains a list of Vaults
#VaultList: {
	items: [...#Vault] @go(Items,[]Vault)
}
