// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/keyvault/v1beta1

package v1beta1

#ActionInitParameters: {
	// The Type of action to be performed when the lifetime trigger is triggerec. Possible values include AutoRenew and EmailContacts. Changing this forces a new resource to be created.
	actionType?: null | string @go(ActionType,*string)
}

#ActionObservation: {
	// The Type of action to be performed when the lifetime trigger is triggerec. Possible values include AutoRenew and EmailContacts. Changing this forces a new resource to be created.
	actionType?: null | string @go(ActionType,*string)
}

#ActionParameters: {
	// The Type of action to be performed when the lifetime trigger is triggerec. Possible values include AutoRenew and EmailContacts. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	actionType?: null | string @go(ActionType,*string)
}

#CertificateAttributeInitParameters: {
}

#CertificateAttributeObservation: {
	// The create time of the Key Vault Certificate.
	created?: null | string @go(Created,*string)

	// whether the Key Vault Certificate is enabled.
	enabled?: null | bool @go(Enabled,*bool)

	// The expires time of the Key Vault Certificate.
	expires?: null | string @go(Expires,*string)

	// The not before valid time of the Key Vault Certificate.
	notBefore?: null | string @go(NotBefore,*string)

	// The deletion recovery level of the Key Vault Certificate.
	recoveryLevel?: null | string @go(RecoveryLevel,*string)

	// The recent update time of the Key Vault Certificate.
	updated?: null | string @go(Updated,*string)
}

#CertificateAttributeParameters: {
}

#CertificateCertificateInitParameters: {
}

#CertificateCertificateObservation: {
}

#CertificateInitParameters: {
	// A certificate block as defined below, used to Import an existing certificate.
	certificate?: [...#CertificateCertificateInitParameters] @go(Certificate,[]CertificateCertificateInitParameters)

	// A certificate_policy block as defined below. Changing this forces a new resource to be created.
	certificatePolicy?: [...#CertificatePolicyInitParameters] @go(CertificatePolicy,[]CertificatePolicyInitParameters)

	// Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#CertificateObservation: {
	// A certificate_attribute block as defined below.
	certificateAttribute?: [...#CertificateAttributeObservation] @go(CertificateAttribute,[]CertificateAttributeObservation)

	// The raw Key Vault Certificate data represented as a hexadecimal string.
	certificateData?: null | string @go(CertificateData,*string)

	// The Base64 encoded Key Vault Certificate data.
	certificateDataBase64?: null | string @go(CertificateDataBase64,*string)

	// A certificate_policy block as defined below. Changing this forces a new resource to be created.
	certificatePolicy?: [...#CertificatePolicyObservation] @go(CertificatePolicy,[]CertificatePolicyObservation)

	// The Key Vault Certificate ID.
	id?: null | string @go(ID,*string)

	// The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
	keyVaultId?: null | string @go(KeyVaultID,*string)

	// Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.
	resourceManagerId?: null | string @go(ResourceManagerID,*string)

	// The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
	resourceManagerVersionlessId?: null | string @go(ResourceManagerVersionlessID,*string)

	// The ID of the associated Key Vault Secret.
	secretId?: null | string @go(SecretID,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
	thumbprint?: null | string @go(Thumbprint,*string)

	// The current version of the Key Vault Certificate.
	version?: null | string @go(Version,*string)

	// The Base ID of the Key Vault Certificate.
	versionlessId?: null | string @go(VersionlessID,*string)

	// The Base ID of the Key Vault Secret.
	versionlessSecretId?: null | string @go(VersionlessSecretID,*string)
}

#CertificateParameters: {
	// A certificate_policy block as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	certificatePolicy?: [...#CertificatePolicyParameters] @go(CertificatePolicy,[]CertificatePolicyParameters)

	// The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Vault
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	keyVaultId?: null | string @go(KeyVaultID,*string)

	// Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#CertificatePolicyInitParameters: {
	// A issuer_parameters block as defined below.
	issuerParameters?: [...#IssuerParametersInitParameters] @go(IssuerParameters,[]IssuerParametersInitParameters)

	// A key_properties block as defined below.
	keyProperties?: [...#KeyPropertiesInitParameters] @go(KeyProperties,[]KeyPropertiesInitParameters)

	// A lifetime_action block as defined below.
	lifetimeAction?: [...#LifetimeActionInitParameters] @go(LifetimeAction,[]LifetimeActionInitParameters)

	// A secret_properties block as defined below.
	secretProperties?: [...#SecretPropertiesInitParameters] @go(SecretProperties,[]SecretPropertiesInitParameters)

	// A x509_certificate_properties block as defined below. Required when certificate block is not specified.
	x509CertificateProperties?: [...#X509CertificatePropertiesInitParameters] @go(X509CertificateProperties,[]X509CertificatePropertiesInitParameters)
}

#CertificatePolicyObservation: {
	// A issuer_parameters block as defined below.
	issuerParameters?: [...#IssuerParametersObservation] @go(IssuerParameters,[]IssuerParametersObservation)

	// A key_properties block as defined below.
	keyProperties?: [...#KeyPropertiesObservation] @go(KeyProperties,[]KeyPropertiesObservation)

	// A lifetime_action block as defined below.
	lifetimeAction?: [...#LifetimeActionObservation] @go(LifetimeAction,[]LifetimeActionObservation)

	// A secret_properties block as defined below.
	secretProperties?: [...#SecretPropertiesObservation] @go(SecretProperties,[]SecretPropertiesObservation)

	// A x509_certificate_properties block as defined below. Required when certificate block is not specified.
	x509CertificateProperties?: [...#X509CertificatePropertiesObservation] @go(X509CertificateProperties,[]X509CertificatePropertiesObservation)
}

#CertificatePolicyParameters: {
	// A issuer_parameters block as defined below.
	// +kubebuilder:validation:Optional
	issuerParameters: [...#IssuerParametersParameters] @go(IssuerParameters,[]IssuerParametersParameters)

	// A key_properties block as defined below.
	// +kubebuilder:validation:Optional
	keyProperties: [...#KeyPropertiesParameters] @go(KeyProperties,[]KeyPropertiesParameters)

	// A lifetime_action block as defined below.
	// +kubebuilder:validation:Optional
	lifetimeAction?: [...#LifetimeActionParameters] @go(LifetimeAction,[]LifetimeActionParameters)

	// A secret_properties block as defined below.
	// +kubebuilder:validation:Optional
	secretProperties: [...#SecretPropertiesParameters] @go(SecretProperties,[]SecretPropertiesParameters)

	// A x509_certificate_properties block as defined below. Required when certificate block is not specified.
	// +kubebuilder:validation:Optional
	x509CertificateProperties?: [...#X509CertificatePropertiesParameters] @go(X509CertificateProperties,[]X509CertificatePropertiesParameters)
}

#IssuerParametersInitParameters: {
	// The name of the Certificate Issuer. Possible values include Self (for self-signed certificate), or Unknown (for a certificate issuing authority like Let's Encrypt and Azure direct supported ones). Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)
}

#IssuerParametersObservation: {
	// The name of the Certificate Issuer. Possible values include Self (for self-signed certificate), or Unknown (for a certificate issuing authority like Let's Encrypt and Azure direct supported ones). Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)
}

#IssuerParametersParameters: {
	// The name of the Certificate Issuer. Possible values include Self (for self-signed certificate), or Unknown (for a certificate issuing authority like Let's Encrypt and Azure direct supported ones). Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#KeyPropertiesInitParameters: {
	// Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM. Changing this forces a new resource to be created.
	curve?: null | string @go(Curve,*string)

	// Is this certificate exportable? Changing this forces a new resource to be created.
	exportable?: null | bool @go(Exportable,*bool)

	// The size of the key used in the certificate. Possible values include 2048, 3072, and 4096 for RSA keys, or 256, 384, and 521 for EC keys. This property is required when using RSA keys. Changing this forces a new resource to be created.
	keySize?: null | float64 @go(KeySize,*float64)

	// Specifies the type of key. Possible values are EC, EC-HSM, RSA, RSA-HSM and oct. Changing this forces a new resource to be created.
	keyType?: null | string @go(KeyType,*string)

	// Is the key reusable? Changing this forces a new resource to be created.
	reuseKey?: null | bool @go(ReuseKey,*bool)
}

#KeyPropertiesObservation: {
	// Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM. Changing this forces a new resource to be created.
	curve?: null | string @go(Curve,*string)

	// Is this certificate exportable? Changing this forces a new resource to be created.
	exportable?: null | bool @go(Exportable,*bool)

	// The size of the key used in the certificate. Possible values include 2048, 3072, and 4096 for RSA keys, or 256, 384, and 521 for EC keys. This property is required when using RSA keys. Changing this forces a new resource to be created.
	keySize?: null | float64 @go(KeySize,*float64)

	// Specifies the type of key. Possible values are EC, EC-HSM, RSA, RSA-HSM and oct. Changing this forces a new resource to be created.
	keyType?: null | string @go(KeyType,*string)

	// Is the key reusable? Changing this forces a new resource to be created.
	reuseKey?: null | bool @go(ReuseKey,*bool)
}

#KeyPropertiesParameters: {
	// Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	curve?: null | string @go(Curve,*string)

	// Is this certificate exportable? Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	exportable?: null | bool @go(Exportable,*bool)

	// The size of the key used in the certificate. Possible values include 2048, 3072, and 4096 for RSA keys, or 256, 384, and 521 for EC keys. This property is required when using RSA keys. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	keySize?: null | float64 @go(KeySize,*float64)

	// Specifies the type of key. Possible values are EC, EC-HSM, RSA, RSA-HSM and oct. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	keyType?: null | string @go(KeyType,*string)

	// Is the key reusable? Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	reuseKey?: null | bool @go(ReuseKey,*bool)
}

#LifetimeActionInitParameters: {
	// A action block as defined below.
	action?: [...#ActionInitParameters] @go(Action,[]ActionInitParameters)

	// A trigger block as defined below.
	trigger?: [...#TriggerInitParameters] @go(Trigger,[]TriggerInitParameters)
}

#LifetimeActionObservation: {
	// A action block as defined below.
	action?: [...#ActionObservation] @go(Action,[]ActionObservation)

	// A trigger block as defined below.
	trigger?: [...#TriggerObservation] @go(Trigger,[]TriggerObservation)
}

#LifetimeActionParameters: {
	// A action block as defined below.
	// +kubebuilder:validation:Optional
	action: [...#ActionParameters] @go(Action,[]ActionParameters)

	// A trigger block as defined below.
	// +kubebuilder:validation:Optional
	trigger: [...#TriggerParameters] @go(Trigger,[]TriggerParameters)
}

#SecretPropertiesInitParameters: {
	// The Content-Type of the Certificate, such as application/x-pkcs12 for a PFX or application/x-pem-file for a PEM. Changing this forces a new resource to be created.
	contentType?: null | string @go(ContentType,*string)
}

#SecretPropertiesObservation: {
	// The Content-Type of the Certificate, such as application/x-pkcs12 for a PFX or application/x-pem-file for a PEM. Changing this forces a new resource to be created.
	contentType?: null | string @go(ContentType,*string)
}

#SecretPropertiesParameters: {
	// The Content-Type of the Certificate, such as application/x-pkcs12 for a PFX or application/x-pem-file for a PEM. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	contentType?: null | string @go(ContentType,*string)
}

#SubjectAlternativeNamesInitParameters: {
	// A list of alternative DNS names (FQDNs) identified by the Certificate. Changing this forces a new resource to be created.
	dnsNames?: [...null | string] @go(DNSNames,[]*string)

	// A list of email addresses identified by this Certificate. Changing this forces a new resource to be created.
	emails?: [...null | string] @go(Emails,[]*string)

	// A list of User Principal Names identified by the Certificate. Changing this forces a new resource to be created.
	upns?: [...null | string] @go(Upns,[]*string)
}

#SubjectAlternativeNamesObservation: {
	// A list of alternative DNS names (FQDNs) identified by the Certificate. Changing this forces a new resource to be created.
	dnsNames?: [...null | string] @go(DNSNames,[]*string)

	// A list of email addresses identified by this Certificate. Changing this forces a new resource to be created.
	emails?: [...null | string] @go(Emails,[]*string)

	// A list of User Principal Names identified by the Certificate. Changing this forces a new resource to be created.
	upns?: [...null | string] @go(Upns,[]*string)
}

#SubjectAlternativeNamesParameters: {
	// A list of alternative DNS names (FQDNs) identified by the Certificate. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	dnsNames?: [...null | string] @go(DNSNames,[]*string)

	// A list of email addresses identified by this Certificate. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	emails?: [...null | string] @go(Emails,[]*string)

	// A list of User Principal Names identified by the Certificate. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	upns?: [...null | string] @go(Upns,[]*string)
}

#TriggerInitParameters: {
	// The number of days before the Certificate expires that the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with lifetime_percentage.
	daysBeforeExpiry?: null | float64 @go(DaysBeforeExpiry,*float64)

	// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with days_before_expiry.
	lifetimePercentage?: null | float64 @go(LifetimePercentage,*float64)
}

#TriggerObservation: {
	// The number of days before the Certificate expires that the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with lifetime_percentage.
	daysBeforeExpiry?: null | float64 @go(DaysBeforeExpiry,*float64)

	// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with days_before_expiry.
	lifetimePercentage?: null | float64 @go(LifetimePercentage,*float64)
}

#TriggerParameters: {
	// The number of days before the Certificate expires that the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with lifetime_percentage.
	// +kubebuilder:validation:Optional
	daysBeforeExpiry?: null | float64 @go(DaysBeforeExpiry,*float64)

	// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Changing this forces a new resource to be created. Conflicts with days_before_expiry.
	// +kubebuilder:validation:Optional
	lifetimePercentage?: null | float64 @go(LifetimePercentage,*float64)
}

#X509CertificatePropertiesInitParameters: {
	// A list of Extended/Enhanced Key Usages. Changing this forces a new resource to be created.
	extendedKeyUsage?: [...null | string] @go(ExtendedKeyUsage,[]*string)

	// A list of uses associated with this Key. Possible values include cRLSign, dataEncipherment, decipherOnly, digitalSignature, encipherOnly, keyAgreement, keyCertSign, keyEncipherment and nonRepudiation and are case-sensitive. Changing this forces a new resource to be created.
	keyUsage?: [...null | string] @go(KeyUsage,[]*string)

	// The Certificate's Subject. Changing this forces a new resource to be created.
	subject?: null | string @go(Subject,*string)

	// A subject_alternative_names block as defined below. Changing this forces a new resource to be created.
	subjectAlternativeNames?: [...#SubjectAlternativeNamesInitParameters] @go(SubjectAlternativeNames,[]SubjectAlternativeNamesInitParameters)

	// The Certificates Validity Period in Months. Changing this forces a new resource to be created.
	validityInMonths?: null | float64 @go(ValidityInMonths,*float64)
}

#X509CertificatePropertiesObservation: {
	// A list of Extended/Enhanced Key Usages. Changing this forces a new resource to be created.
	extendedKeyUsage?: [...null | string] @go(ExtendedKeyUsage,[]*string)

	// A list of uses associated with this Key. Possible values include cRLSign, dataEncipherment, decipherOnly, digitalSignature, encipherOnly, keyAgreement, keyCertSign, keyEncipherment and nonRepudiation and are case-sensitive. Changing this forces a new resource to be created.
	keyUsage?: [...null | string] @go(KeyUsage,[]*string)

	// The Certificate's Subject. Changing this forces a new resource to be created.
	subject?: null | string @go(Subject,*string)

	// A subject_alternative_names block as defined below. Changing this forces a new resource to be created.
	subjectAlternativeNames?: [...#SubjectAlternativeNamesObservation] @go(SubjectAlternativeNames,[]SubjectAlternativeNamesObservation)

	// The Certificates Validity Period in Months. Changing this forces a new resource to be created.
	validityInMonths?: null | float64 @go(ValidityInMonths,*float64)
}

#X509CertificatePropertiesParameters: {
	// A list of Extended/Enhanced Key Usages. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	extendedKeyUsage?: [...null | string] @go(ExtendedKeyUsage,[]*string)

	// A list of uses associated with this Key. Possible values include cRLSign, dataEncipherment, decipherOnly, digitalSignature, encipherOnly, keyAgreement, keyCertSign, keyEncipherment and nonRepudiation and are case-sensitive. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	keyUsage: [...null | string] @go(KeyUsage,[]*string)

	// The Certificate's Subject. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	subject?: null | string @go(Subject,*string)

	// A subject_alternative_names block as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	subjectAlternativeNames?: [...#SubjectAlternativeNamesParameters] @go(SubjectAlternativeNames,[]SubjectAlternativeNamesParameters)

	// The Certificates Validity Period in Months. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	validityInMonths?: null | float64 @go(ValidityInMonths,*float64)
}

// CertificateSpec defines the desired state of Certificate
#CertificateSpec: {
	forProvider: #CertificateParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CertificateInitParameters @go(InitProvider)
}

// CertificateStatus defines the observed state of Certificate.
#CertificateStatus: {
	atProvider?: #CertificateObservation @go(AtProvider)
}

// Certificate is the Schema for the Certificates API. Manages a Key Vault Certificate.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Certificate: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #CertificateSpec   @go(Spec)
	status?: #CertificateStatus @go(Status)
}

// CertificateList contains a list of Certificates
#CertificateList: {
	items: [...#Certificate] @go(Items,[]Certificate)
}
