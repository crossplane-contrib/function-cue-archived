// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/keyvault/v1beta1

package v1beta1

#AdminInitParameters: {
	// E-mail address of the admin.
	emailAddress?: null | string @go(EmailAddress,*string)

	// First name of the admin.
	firstName?: null | string @go(FirstName,*string)

	// Last name of the admin.
	lastName?: null | string @go(LastName,*string)

	// Phone number of the admin.
	phone?: null | string @go(Phone,*string)
}

#AdminObservation: {
	// E-mail address of the admin.
	emailAddress?: null | string @go(EmailAddress,*string)

	// First name of the admin.
	firstName?: null | string @go(FirstName,*string)

	// Last name of the admin.
	lastName?: null | string @go(LastName,*string)

	// Phone number of the admin.
	phone?: null | string @go(Phone,*string)
}

#AdminParameters: {
	// E-mail address of the admin.
	// +kubebuilder:validation:Optional
	emailAddress?: null | string @go(EmailAddress,*string)

	// First name of the admin.
	// +kubebuilder:validation:Optional
	firstName?: null | string @go(FirstName,*string)

	// Last name of the admin.
	// +kubebuilder:validation:Optional
	lastName?: null | string @go(LastName,*string)

	// Phone number of the admin.
	// +kubebuilder:validation:Optional
	phone?: null | string @go(Phone,*string)
}

#CertificateIssuerInitParameters: {
	// The account number with the third-party Certificate Issuer.
	accountId?: null | string @go(AccountID,*string)

	// One or more admin blocks as defined below.
	admin?: [...#AdminInitParameters] @go(Admin,[]AdminInitParameters)

	// The ID of the organization as provided to the issuer.
	orgId?: null | string @go(OrgID,*string)

	// The name of the third-party Certificate Issuer. Possible values are: DigiCert, GlobalSign, OneCertV2-PrivateCA, OneCertV2-PublicCA and SslAdminV2.
	providerName?: null | string @go(ProviderName,*string)
}

#CertificateIssuerObservation: {
	// The account number with the third-party Certificate Issuer.
	accountId?: null | string @go(AccountID,*string)

	// One or more admin blocks as defined below.
	admin?: [...#AdminObservation] @go(Admin,[]AdminObservation)

	// The ID of the Key Vault Certificate Issuer.
	id?: null | string @go(ID,*string)

	// The ID of the Key Vault in which to create the Certificate Issuer. Changing this forces a new resource to be created.
	keyVaultId?: null | string @go(KeyVaultID,*string)

	// The ID of the organization as provided to the issuer.
	orgId?: null | string @go(OrgID,*string)

	// The name of the third-party Certificate Issuer. Possible values are: DigiCert, GlobalSign, OneCertV2-PrivateCA, OneCertV2-PublicCA and SslAdminV2.
	providerName?: null | string @go(ProviderName,*string)
}

#CertificateIssuerParameters: {
	// The account number with the third-party Certificate Issuer.
	// +kubebuilder:validation:Optional
	accountId?: null | string @go(AccountID,*string)

	// One or more admin blocks as defined below.
	// +kubebuilder:validation:Optional
	admin?: [...#AdminParameters] @go(Admin,[]AdminParameters)

	// The ID of the Key Vault in which to create the Certificate Issuer. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Vault
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	keyVaultId?: null | string @go(KeyVaultID,*string)

	// The ID of the organization as provided to the issuer.
	// +kubebuilder:validation:Optional
	orgId?: null | string @go(OrgID,*string)

	// The name of the third-party Certificate Issuer. Possible values are: DigiCert, GlobalSign, OneCertV2-PrivateCA, OneCertV2-PublicCA and SslAdminV2.
	// +kubebuilder:validation:Optional
	providerName?: null | string @go(ProviderName,*string)
}

// CertificateIssuerSpec defines the desired state of CertificateIssuer
#CertificateIssuerSpec: {
	forProvider: #CertificateIssuerParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CertificateIssuerInitParameters @go(InitProvider)
}

// CertificateIssuerStatus defines the observed state of CertificateIssuer.
#CertificateIssuerStatus: {
	atProvider?: #CertificateIssuerObservation @go(AtProvider)
}

// CertificateIssuer is the Schema for the CertificateIssuers API. Manages a Key Vault Certificate Issuer.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#CertificateIssuer: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerName) || (has(self.initProvider) && has(self.initProvider.providerName))",message="spec.forProvider.providerName is a required parameter"
	spec:    #CertificateIssuerSpec   @go(Spec)
	status?: #CertificateIssuerStatus @go(Status)
}

// CertificateIssuerList contains a list of CertificateIssuers
#CertificateIssuerList: {
	items: [...#CertificateIssuer] @go(Items,[]CertificateIssuer)
}
