// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/keyvault/v1beta1

package v1beta1

#AutomaticInitParameters: {
	// Rotate automatically at a duration after create as an ISO 8601 duration.
	timeAfterCreation?: null | string @go(TimeAfterCreation,*string)

	// Rotate automatically at a duration before expiry as an ISO 8601 duration.
	timeBeforeExpiry?: null | string @go(TimeBeforeExpiry,*string)
}

#AutomaticObservation: {
	// Rotate automatically at a duration after create as an ISO 8601 duration.
	timeAfterCreation?: null | string @go(TimeAfterCreation,*string)

	// Rotate automatically at a duration before expiry as an ISO 8601 duration.
	timeBeforeExpiry?: null | string @go(TimeBeforeExpiry,*string)
}

#AutomaticParameters: {
	// Rotate automatically at a duration after create as an ISO 8601 duration.
	// +kubebuilder:validation:Optional
	timeAfterCreation?: null | string @go(TimeAfterCreation,*string)

	// Rotate automatically at a duration before expiry as an ISO 8601 duration.
	// +kubebuilder:validation:Optional
	timeBeforeExpiry?: null | string @go(TimeBeforeExpiry,*string)
}

#KeyInitParameters: {
	// Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM. The API will default to P-256 if nothing is specified. Changing this forces a new resource to be created.
	curve?: null | string @go(Curve,*string)

	// Expiration UTC datetime (Y-m-d'T'H:M:S'Z').
	expirationDate?: null | string @go(ExpirationDate,*string)

	// A list of JSON web key operations. Possible values include: decrypt, encrypt, sign, unwrapKey, verify and wrapKey. Please note these values are case sensitive.
	keyOpts?: [...null | string] @go(KeyOpts,[]*string)

	// Specifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. Note: This field is required if key_type is RSA or RSA-HSM. Changing this forces a new resource to be created.
	keySize?: null | float64 @go(KeySize,*float64)

	// Specifies the Key Type to use for this Key Vault Key. Possible values are EC (Elliptic Curve), EC-HSM, RSA and RSA-HSM. Changing this forces a new resource to be created.
	keyType?: null | string @go(KeyType,*string)

	// Key not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').
	notBeforeDate?: null | string @go(NotBeforeDate,*string)

	// A rotation_policy block as defined below.
	rotationPolicy?: [...#RotationPolicyInitParameters] @go(RotationPolicy,[]RotationPolicyInitParameters)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#KeyObservation: {
	// Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM. The API will default to P-256 if nothing is specified. Changing this forces a new resource to be created.
	curve?: null | string @go(Curve,*string)

	// The RSA public exponent of this Key Vault Key.
	e?: null | string @go(E,*string)

	// Expiration UTC datetime (Y-m-d'T'H:M:S'Z').
	expirationDate?: null | string @go(ExpirationDate,*string)

	// The Key Vault Key ID.
	id?: null | string @go(ID,*string)

	// A list of JSON web key operations. Possible values include: decrypt, encrypt, sign, unwrapKey, verify and wrapKey. Please note these values are case sensitive.
	keyOpts?: [...null | string] @go(KeyOpts,[]*string)

	// Specifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. Note: This field is required if key_type is RSA or RSA-HSM. Changing this forces a new resource to be created.
	keySize?: null | float64 @go(KeySize,*float64)

	// Specifies the Key Type to use for this Key Vault Key. Possible values are EC (Elliptic Curve), EC-HSM, RSA and RSA-HSM. Changing this forces a new resource to be created.
	keyType?: null | string @go(KeyType,*string)

	// The ID of the Key Vault where the Key should be created. Changing this forces a new resource to be created.
	keyVaultId?: null | string @go(KeyVaultID,*string)

	// The RSA modulus of this Key Vault Key.
	n?: null | string @go(N,*string)

	// Key not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').
	notBeforeDate?: null | string @go(NotBeforeDate,*string)

	// The OpenSSH encoded public key of this Key Vault Key.
	publicKeyOpenssh?: null | string @go(PublicKeyOpenssh,*string)

	// The PEM encoded public key of this Key Vault Key.
	publicKeyPem?: null | string @go(PublicKeyPem,*string)

	// The (Versioned) ID for this Key Vault Key. This property points to a specific version of a Key Vault Key, as such using this won't auto-rotate values if used in other Azure Services.
	resourceId?: null | string @go(ResourceID,*string)

	// The Versionless ID of the Key Vault Key. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Key is updated.
	resourceVersionlessId?: null | string @go(ResourceVersionlessID,*string)

	// A rotation_policy block as defined below.
	rotationPolicy?: [...#RotationPolicyObservation] @go(RotationPolicy,[]RotationPolicyObservation)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The current version of the Key Vault Key.
	version?: null | string @go(Version,*string)

	// The Base ID of the Key Vault Key.
	versionlessId?: null | string @go(VersionlessID,*string)

	// The EC X component of this Key Vault Key.
	x?: null | string @go(X,*string)

	// The EC Y component of this Key Vault Key.
	y?: null | string @go(Y,*string)
}

#KeyParameters: {
	// Specifies the curve to use when creating an EC key. Possible values are P-256, P-256K, P-384, and P-521. This field will be required in a future release if key_type is EC or EC-HSM. The API will default to P-256 if nothing is specified. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	curve?: null | string @go(Curve,*string)

	// Expiration UTC datetime (Y-m-d'T'H:M:S'Z').
	// +kubebuilder:validation:Optional
	expirationDate?: null | string @go(ExpirationDate,*string)

	// A list of JSON web key operations. Possible values include: decrypt, encrypt, sign, unwrapKey, verify and wrapKey. Please note these values are case sensitive.
	// +kubebuilder:validation:Optional
	keyOpts?: [...null | string] @go(KeyOpts,[]*string)

	// Specifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. Note: This field is required if key_type is RSA or RSA-HSM. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	keySize?: null | float64 @go(KeySize,*float64)

	// Specifies the Key Type to use for this Key Vault Key. Possible values are EC (Elliptic Curve), EC-HSM, RSA and RSA-HSM. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	keyType?: null | string @go(KeyType,*string)

	// The ID of the Key Vault where the Key should be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Vault
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	keyVaultId?: null | string @go(KeyVaultID,*string)

	// Key not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').
	// +kubebuilder:validation:Optional
	notBeforeDate?: null | string @go(NotBeforeDate,*string)

	// A rotation_policy block as defined below.
	// +kubebuilder:validation:Optional
	rotationPolicy?: [...#RotationPolicyParameters] @go(RotationPolicy,[]RotationPolicyParameters)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#RotationPolicyInitParameters: {
	// An automatic block as defined below.
	automatic?: [...#AutomaticInitParameters] @go(Automatic,[]AutomaticInitParameters)

	// Expire a Key Vault Key after given duration as an ISO 8601 duration.
	expireAfter?: null | string @go(ExpireAfter,*string)

	// Notify at a given duration before expiry as an ISO 8601 duration. Default is P30D.
	notifyBeforeExpiry?: null | string @go(NotifyBeforeExpiry,*string)
}

#RotationPolicyObservation: {
	// An automatic block as defined below.
	automatic?: [...#AutomaticObservation] @go(Automatic,[]AutomaticObservation)

	// Expire a Key Vault Key after given duration as an ISO 8601 duration.
	expireAfter?: null | string @go(ExpireAfter,*string)

	// Notify at a given duration before expiry as an ISO 8601 duration. Default is P30D.
	notifyBeforeExpiry?: null | string @go(NotifyBeforeExpiry,*string)
}

#RotationPolicyParameters: {
	// An automatic block as defined below.
	// +kubebuilder:validation:Optional
	automatic?: [...#AutomaticParameters] @go(Automatic,[]AutomaticParameters)

	// Expire a Key Vault Key after given duration as an ISO 8601 duration.
	// +kubebuilder:validation:Optional
	expireAfter?: null | string @go(ExpireAfter,*string)

	// Notify at a given duration before expiry as an ISO 8601 duration. Default is P30D.
	// +kubebuilder:validation:Optional
	notifyBeforeExpiry?: null | string @go(NotifyBeforeExpiry,*string)
}

// KeySpec defines the desired state of Key
#KeySpec: {
	forProvider: #KeyParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #KeyInitParameters @go(InitProvider)
}

// KeyStatus defines the observed state of Key.
#KeyStatus: {
	atProvider?: #KeyObservation @go(AtProvider)
}

// Key is the Schema for the Keys API. Manages a Key Vault Key.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Key: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keyOpts) || has(self.initProvider.keyOpts)",message="keyOpts is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keyType) || has(self.initProvider.keyType)",message="keyType is a required parameter"
	spec:    #KeySpec   @go(Spec)
	status?: #KeyStatus @go(Status)
}

// KeyList contains a list of Keys
#KeyList: {
	items: [...#Key] @go(Items,[]Key)
}
