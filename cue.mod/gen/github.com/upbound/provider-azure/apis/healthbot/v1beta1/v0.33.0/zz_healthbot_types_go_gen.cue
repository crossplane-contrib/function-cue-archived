// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/healthbot/v1beta1

package v1beta1

#HealthBotObservation: {
	// The management portal url.
	botManagementPortalUrl?: null | string @go(BotManagementPortalURL,*string)

	// The ID of the resource.
	id?: null | string @go(ID,*string)

	// Specifies The Azure Region where the resource exists. Changing this force a new resource to be created.
	location?: null | string @go(Location,*string)

	// Specifies The name of the Resource Group in which to create the Healthbot Service. changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name which should be used for the SKU of the service. Possible values are C0, F0 and S1.
	skuName?: null | string @go(SkuName,*string)

	// A mapping of tags which should be assigned to the service.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#HealthBotParameters: {
	// Specifies The Azure Region where the resource exists. Changing this force a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Specifies The name of the Resource Group in which to create the Healthbot Service. changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name which should be used for the SKU of the service. Possible values are C0, F0 and S1.
	// +kubebuilder:validation:Optional
	skuName?: null | string @go(SkuName,*string)

	// A mapping of tags which should be assigned to the service.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// HealthBotSpec defines the desired state of HealthBot
#HealthBotSpec: {
	forProvider: #HealthBotParameters @go(ForProvider)
}

// HealthBotStatus defines the observed state of HealthBot.
#HealthBotStatus: {
	atProvider?: #HealthBotObservation @go(AtProvider)
}

// HealthBot is the Schema for the HealthBots API. Manages a Healthbot Service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#HealthBot: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.skuName)",message="skuName is a required parameter"
	spec:    #HealthBotSpec   @go(Spec)
	status?: #HealthBotStatus @go(Status)
}

// HealthBotList contains a list of HealthBots
#HealthBotList: {
	items: [...#HealthBot] @go(Items,[]HealthBot)
}
