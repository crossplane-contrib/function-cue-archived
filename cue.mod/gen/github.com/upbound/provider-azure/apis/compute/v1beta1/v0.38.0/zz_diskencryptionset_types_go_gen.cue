// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/compute/v1beta1

package v1beta1

#DiskEncryptionSetInitParameters: {
	// Boolean flag to specify whether Azure Disk Encryption Set automatically rotates encryption Key to latest version.
	autoKeyRotationEnabled?: null | bool @go(AutoKeyRotationEnabled,*bool)

	// The type of key used to encrypt the data of the disk. Possible values are EncryptionAtRestWithCustomerKey, EncryptionAtRestWithPlatformAndCustomerKeys and ConfidentialVmEncryptedWithCustomerKey. Defaults to EncryptionAtRestWithCustomerKey. Changing this forces a new resource to be created.
	encryptionType?: null | string @go(EncryptionType,*string)

	// Multi-tenant application client id to access key vault in a different tenant.
	federatedClientId?: null | string @go(FederatedClientID,*string)

	// An identity block as defined below.
	identity?: [...#IdentityInitParameters] @go(Identity,[]IdentityInitParameters)

	// Specifies the Azure Region where the Disk Encryption Set exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A mapping of tags to assign to the Disk Encryption Set.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#DiskEncryptionSetObservation: {
	// Boolean flag to specify whether Azure Disk Encryption Set automatically rotates encryption Key to latest version.
	autoKeyRotationEnabled?: null | bool @go(AutoKeyRotationEnabled,*bool)

	// The type of key used to encrypt the data of the disk. Possible values are EncryptionAtRestWithCustomerKey, EncryptionAtRestWithPlatformAndCustomerKeys and ConfidentialVmEncryptedWithCustomerKey. Defaults to EncryptionAtRestWithCustomerKey. Changing this forces a new resource to be created.
	encryptionType?: null | string @go(EncryptionType,*string)

	// Multi-tenant application client id to access key vault in a different tenant.
	federatedClientId?: null | string @go(FederatedClientID,*string)

	// The ID of the Disk Encryption Set.
	id?: null | string @go(ID,*string)

	// An identity block as defined below.
	identity?: [...#IdentityObservation] @go(Identity,[]IdentityObservation)

	// Specifies the URL to a Key Vault Key (either from a Key Vault Key, or the Key URL for the Key Vault Secret).
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)

	// Specifies the Azure Region where the Disk Encryption Set exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Specifies the name of the Resource Group where the Disk Encryption Set should exist. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the Disk Encryption Set.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#DiskEncryptionSetParameters: {
	// Boolean flag to specify whether Azure Disk Encryption Set automatically rotates encryption Key to latest version.
	// +kubebuilder:validation:Optional
	autoKeyRotationEnabled?: null | bool @go(AutoKeyRotationEnabled,*bool)

	// The type of key used to encrypt the data of the disk. Possible values are EncryptionAtRestWithCustomerKey, EncryptionAtRestWithPlatformAndCustomerKeys and ConfidentialVmEncryptedWithCustomerKey. Defaults to EncryptionAtRestWithCustomerKey. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	encryptionType?: null | string @go(EncryptionType,*string)

	// Multi-tenant application client id to access key vault in a different tenant.
	// +kubebuilder:validation:Optional
	federatedClientId?: null | string @go(FederatedClientID,*string)

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	identity?: [...#IdentityParameters] @go(Identity,[]IdentityParameters)

	// Specifies the URL to a Key Vault Key (either from a Key Vault Key, or the Key URL for the Key Vault Secret).
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/keyvault/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)

	// Specifies the Azure Region where the Disk Encryption Set exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Specifies the name of the Resource Group where the Disk Encryption Set should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the Disk Encryption Set.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#IdentityInitParameters: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Disk Encryption Set.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The type of Managed Service Identity that is configured on this Disk Encryption Set. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#IdentityObservation: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Disk Encryption Set.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The (Client) ID of the Service Principal.
	principalId?: null | string @go(PrincipalID,*string)

	// The ID of the Tenant the Service Principal is assigned in.
	tenantId?: null | string @go(TenantID,*string)

	// The type of Managed Service Identity that is configured on this Disk Encryption Set. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#IdentityParameters: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Disk Encryption Set.
	// +kubebuilder:validation:Optional
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The type of Managed Service Identity that is configured on this Disk Encryption Set. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// DiskEncryptionSetSpec defines the desired state of DiskEncryptionSet
#DiskEncryptionSetSpec: {
	forProvider: #DiskEncryptionSetParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DiskEncryptionSetInitParameters @go(InitProvider)
}

// DiskEncryptionSetStatus defines the observed state of DiskEncryptionSet.
#DiskEncryptionSetStatus: {
	atProvider?: #DiskEncryptionSetObservation @go(AtProvider)
}

// DiskEncryptionSet is the Schema for the DiskEncryptionSets API. Manages a Disk Encryption Set.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#DiskEncryptionSet: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.identity) || (has(self.initProvider) && has(self.initProvider.identity))",message="spec.forProvider.identity is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	spec:    #DiskEncryptionSetSpec   @go(Spec)
	status?: #DiskEncryptionSetStatus @go(Status)
}

// DiskEncryptionSetList contains a list of DiskEncryptionSets
#DiskEncryptionSetList: {
	items: [...#DiskEncryptionSet] @go(Items,[]DiskEncryptionSet)
}
