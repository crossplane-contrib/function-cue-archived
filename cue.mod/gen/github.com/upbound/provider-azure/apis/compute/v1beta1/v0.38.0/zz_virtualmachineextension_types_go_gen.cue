// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/compute/v1beta1

package v1beta1

#VirtualMachineExtensionInitParameters: {
	// Specifies if the platform deploys the latest minor version update to the type_handler_version specified.
	autoUpgradeMinorVersion?: null | bool @go(AutoUpgradeMinorVersion,*bool)

	// Should the Extension be automatically updated whenever the Publisher releases a new version of this VM Extension?
	automaticUpgradeEnabled?: null | bool @go(AutomaticUpgradeEnabled,*bool)

	// Should failures from the extension be suppressed? Possible values are true or false. Defaults to false.
	failureSuppressionEnabled?: null | bool @go(FailureSuppressionEnabled,*bool)

	// A protected_settings_from_key_vault block as defined below.
	protectedSettingsFromKeyVault?: [...#VirtualMachineExtensionProtectedSettingsFromKeyVaultInitParameters] @go(ProtectedSettingsFromKeyVault,[]VirtualMachineExtensionProtectedSettingsFromKeyVaultInitParameters)

	// The publisher of the extension, available publishers can be found by using the Azure CLI. Changing this forces a new resource to be created.
	publisher?: null | string @go(Publisher,*string)

	// The settings passed to the extension, these are specified as a JSON object in a string.
	settings?: null | string @go(Settings,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The type of extension, available types for a publisher can be found using the Azure CLI.
	type?: null | string @go(Type,*string)

	// Specifies the version of the extension to use, available versions can be found using the Azure CLI.
	typeHandlerVersion?: null | string @go(TypeHandlerVersion,*string)
}

#VirtualMachineExtensionObservation: {
	// Specifies if the platform deploys the latest minor version update to the type_handler_version specified.
	autoUpgradeMinorVersion?: null | bool @go(AutoUpgradeMinorVersion,*bool)

	// Should the Extension be automatically updated whenever the Publisher releases a new version of this VM Extension?
	automaticUpgradeEnabled?: null | bool @go(AutomaticUpgradeEnabled,*bool)

	// Should failures from the extension be suppressed? Possible values are true or false. Defaults to false.
	failureSuppressionEnabled?: null | bool @go(FailureSuppressionEnabled,*bool)

	// The ID of the Virtual Machine Extension.
	id?: null | string @go(ID,*string)

	// A protected_settings_from_key_vault block as defined below.
	protectedSettingsFromKeyVault?: [...#VirtualMachineExtensionProtectedSettingsFromKeyVaultObservation] @go(ProtectedSettingsFromKeyVault,[]VirtualMachineExtensionProtectedSettingsFromKeyVaultObservation)

	// The publisher of the extension, available publishers can be found by using the Azure CLI. Changing this forces a new resource to be created.
	publisher?: null | string @go(Publisher,*string)

	// The settings passed to the extension, these are specified as a JSON object in a string.
	settings?: null | string @go(Settings,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The type of extension, available types for a publisher can be found using the Azure CLI.
	type?: null | string @go(Type,*string)

	// Specifies the version of the extension to use, available versions can be found using the Azure CLI.
	typeHandlerVersion?: null | string @go(TypeHandlerVersion,*string)

	// The ID of the Virtual Machine. Changing this forces a new resource to be created
	virtualMachineId?: null | string @go(VirtualMachineID,*string)
}

#VirtualMachineExtensionParameters: {
	// Specifies if the platform deploys the latest minor version update to the type_handler_version specified.
	// +kubebuilder:validation:Optional
	autoUpgradeMinorVersion?: null | bool @go(AutoUpgradeMinorVersion,*bool)

	// Should the Extension be automatically updated whenever the Publisher releases a new version of this VM Extension?
	// +kubebuilder:validation:Optional
	automaticUpgradeEnabled?: null | bool @go(AutomaticUpgradeEnabled,*bool)

	// Should failures from the extension be suppressed? Possible values are true or false. Defaults to false.
	// +kubebuilder:validation:Optional
	failureSuppressionEnabled?: null | bool @go(FailureSuppressionEnabled,*bool)

	// A protected_settings_from_key_vault block as defined below.
	// +kubebuilder:validation:Optional
	protectedSettingsFromKeyVault?: [...#VirtualMachineExtensionProtectedSettingsFromKeyVaultParameters] @go(ProtectedSettingsFromKeyVault,[]VirtualMachineExtensionProtectedSettingsFromKeyVaultParameters)

	// The publisher of the extension, available publishers can be found by using the Azure CLI. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	publisher?: null | string @go(Publisher,*string)

	// The settings passed to the extension, these are specified as a JSON object in a string.
	// +kubebuilder:validation:Optional
	settings?: null | string @go(Settings,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The type of extension, available types for a publisher can be found using the Azure CLI.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// Specifies the version of the extension to use, available versions can be found using the Azure CLI.
	// +kubebuilder:validation:Optional
	typeHandlerVersion?: null | string @go(TypeHandlerVersion,*string)

	// The ID of the Virtual Machine. Changing this forces a new resource to be created
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/compute/v1beta1.LinuxVirtualMachine
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	virtualMachineId?: null | string @go(VirtualMachineID,*string)
}

#VirtualMachineExtensionProtectedSettingsFromKeyVaultInitParameters: {
	// The URL to the Key Vault Secret which stores the protected settings.
	secretUrl?: null | string @go(SecretURL,*string)

	// The ID of the source Key Vault.
	sourceVaultId?: null | string @go(SourceVaultID,*string)
}

#VirtualMachineExtensionProtectedSettingsFromKeyVaultObservation: {
	// The URL to the Key Vault Secret which stores the protected settings.
	secretUrl?: null | string @go(SecretURL,*string)

	// The ID of the source Key Vault.
	sourceVaultId?: null | string @go(SourceVaultID,*string)
}

#VirtualMachineExtensionProtectedSettingsFromKeyVaultParameters: {
	// The URL to the Key Vault Secret which stores the protected settings.
	// +kubebuilder:validation:Optional
	secretUrl?: null | string @go(SecretURL,*string)

	// The ID of the source Key Vault.
	// +kubebuilder:validation:Optional
	sourceVaultId?: null | string @go(SourceVaultID,*string)
}

// VirtualMachineExtensionSpec defines the desired state of VirtualMachineExtension
#VirtualMachineExtensionSpec: {
	forProvider: #VirtualMachineExtensionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VirtualMachineExtensionInitParameters @go(InitProvider)
}

// VirtualMachineExtensionStatus defines the observed state of VirtualMachineExtension.
#VirtualMachineExtensionStatus: {
	atProvider?: #VirtualMachineExtensionObservation @go(AtProvider)
}

// VirtualMachineExtension is the Schema for the VirtualMachineExtensions API. Manages a Virtual Machine Extension to provide post deployment configuration and run automated tasks.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#VirtualMachineExtension: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.publisher) || (has(self.initProvider) && has(self.initProvider.publisher))",message="spec.forProvider.publisher is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.typeHandlerVersion) || (has(self.initProvider) && has(self.initProvider.typeHandlerVersion))",message="spec.forProvider.typeHandlerVersion is a required parameter"
	spec:    #VirtualMachineExtensionSpec   @go(Spec)
	status?: #VirtualMachineExtensionStatus @go(Status)
}

// VirtualMachineExtensionList contains a list of VirtualMachineExtensions
#VirtualMachineExtensionList: {
	items: [...#VirtualMachineExtension] @go(Items,[]VirtualMachineExtension)
}
