// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/compute/v1beta1

package v1beta1

#ProximityPlacementGroupInitParameters: {
	// Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group.
	allowedVmSizes?: [...null | string] @go(AllowedVMSizes,[]*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
	zone?: null | string @go(Zone,*string)
}

#ProximityPlacementGroupObservation: {
	// Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group.
	allowedVmSizes?: [...null | string] @go(AllowedVMSizes,[]*string)

	// The ID of the Proximity Placement Group.
	id?: null | string @go(ID,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
	zone?: null | string @go(Zone,*string)
}

#ProximityPlacementGroupParameters: {
	// Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group.
	// +kubebuilder:validation:Optional
	allowedVmSizes?: [...null | string] @go(AllowedVMSizes,[]*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	zone?: null | string @go(Zone,*string)
}

// ProximityPlacementGroupSpec defines the desired state of ProximityPlacementGroup
#ProximityPlacementGroupSpec: {
	forProvider: #ProximityPlacementGroupParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ProximityPlacementGroupInitParameters @go(InitProvider)
}

// ProximityPlacementGroupStatus defines the observed state of ProximityPlacementGroup.
#ProximityPlacementGroupStatus: {
	atProvider?: #ProximityPlacementGroupObservation @go(AtProvider)
}

// ProximityPlacementGroup is the Schema for the ProximityPlacementGroups API. Manages a proximity placement group for virtual machines, virtual machine scale sets and availability sets.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ProximityPlacementGroup: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	spec:    #ProximityPlacementGroupSpec   @go(Spec)
	status?: #ProximityPlacementGroupStatus @go(Status)
}

// ProximityPlacementGroupList contains a list of ProximityPlacementGroups
#ProximityPlacementGroupList: {
	items: [...#ProximityPlacementGroup] @go(Items,[]ProximityPlacementGroup)
}
