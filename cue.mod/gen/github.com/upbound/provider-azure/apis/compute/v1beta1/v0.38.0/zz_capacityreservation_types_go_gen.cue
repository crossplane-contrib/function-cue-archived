// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/compute/v1beta1

package v1beta1

#CapacityReservationInitParameters: {
	// A sku block as defined below.
	sku?: [...#SkuInitParameters] @go(Sku,[]SkuInitParameters)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the Availability Zone for this Capacity Reservation. Changing this forces a new resource to be created.
	zone?: null | string @go(Zone,*string)
}

#CapacityReservationObservation: {
	// The ID of the Capacity Reservation Group where the Capacity Reservation exists. Changing this forces a new resource to be created.
	capacityReservationGroupId?: null | string @go(CapacityReservationGroupID,*string)

	// The ID of the Capacity Reservation.
	id?: null | string @go(ID,*string)

	// A sku block as defined below.
	sku?: [...#SkuObservation] @go(Sku,[]SkuObservation)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the Availability Zone for this Capacity Reservation. Changing this forces a new resource to be created.
	zone?: null | string @go(Zone,*string)
}

#CapacityReservationParameters: {
	// The ID of the Capacity Reservation Group where the Capacity Reservation exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/compute/v1beta1.CapacityReservationGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	capacityReservationGroupId?: null | string @go(CapacityReservationGroupID,*string)

	// A sku block as defined below.
	// +kubebuilder:validation:Optional
	sku?: [...#SkuParameters] @go(Sku,[]SkuParameters)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the Availability Zone for this Capacity Reservation. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	zone?: null | string @go(Zone,*string)
}

#SkuInitParameters: {
	// Specifies the number of instances to be reserved. It must be a positive integer and not exceed the quota in the subscription.
	capacity?: null | float64 @go(Capacity,*float64)

	// Name of the sku, such as Standard_F2. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)
}

#SkuObservation: {
	// Specifies the number of instances to be reserved. It must be a positive integer and not exceed the quota in the subscription.
	capacity?: null | float64 @go(Capacity,*float64)

	// Name of the sku, such as Standard_F2. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)
}

#SkuParameters: {
	// Specifies the number of instances to be reserved. It must be a positive integer and not exceed the quota in the subscription.
	// +kubebuilder:validation:Optional
	capacity?: null | float64 @go(Capacity,*float64)

	// Name of the sku, such as Standard_F2. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

// CapacityReservationSpec defines the desired state of CapacityReservation
#CapacityReservationSpec: {
	forProvider: #CapacityReservationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CapacityReservationInitParameters @go(InitProvider)
}

// CapacityReservationStatus defines the observed state of CapacityReservation.
#CapacityReservationStatus: {
	atProvider?: #CapacityReservationObservation @go(AtProvider)
}

// CapacityReservation is the Schema for the CapacityReservations API. Manages a Capacity Reservation within a Capacity Reservation Group.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#CapacityReservation: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sku) || (has(self.initProvider) && has(self.initProvider.sku))",message="spec.forProvider.sku is a required parameter"
	spec:    #CapacityReservationSpec   @go(Spec)
	status?: #CapacityReservationStatus @go(Status)
}

// CapacityReservationList contains a list of CapacityReservations
#CapacityReservationList: {
	items: [...#CapacityReservation] @go(Items,[]CapacityReservation)
}
