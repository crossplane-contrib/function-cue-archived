// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/compute/v1beta1

package v1beta1

#ManagedDiskSASTokenInitParameters: {
	// The level of access required on the disk. Supported are Read, Write. Changing this forces a new resource to be created.
	accessLevel?: null | string @go(AccessLevel,*string)

	// The duration for which the export should be allowed. Should be between 30 & 4294967295 seconds. Changing this forces a new resource to be created.
	durationInSeconds?: null | float64 @go(DurationInSeconds,*float64)
}

#ManagedDiskSASTokenObservation: {
	// The level of access required on the disk. Supported are Read, Write. Changing this forces a new resource to be created.
	accessLevel?: null | string @go(AccessLevel,*string)

	// The duration for which the export should be allowed. Should be between 30 & 4294967295 seconds. Changing this forces a new resource to be created.
	durationInSeconds?: null | float64 @go(DurationInSeconds,*float64)

	// The ID of the Disk Export resource.
	id?: null | string @go(ID,*string)

	// The ID of an existing Managed Disk which should be exported. Changing this forces a new resource to be created.
	managedDiskId?: null | string @go(ManagedDiskID,*string)
}

#ManagedDiskSASTokenParameters: {
	// The level of access required on the disk. Supported are Read, Write. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	accessLevel?: null | string @go(AccessLevel,*string)

	// The duration for which the export should be allowed. Should be between 30 & 4294967295 seconds. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	durationInSeconds?: null | float64 @go(DurationInSeconds,*float64)

	// The ID of an existing Managed Disk which should be exported. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/compute/v1beta1.ManagedDisk
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	managedDiskId?: null | string @go(ManagedDiskID,*string)
}

// ManagedDiskSASTokenSpec defines the desired state of ManagedDiskSASToken
#ManagedDiskSASTokenSpec: {
	forProvider: #ManagedDiskSASTokenParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ManagedDiskSASTokenInitParameters @go(InitProvider)
}

// ManagedDiskSASTokenStatus defines the observed state of ManagedDiskSASToken.
#ManagedDiskSASTokenStatus: {
	atProvider?: #ManagedDiskSASTokenObservation @go(AtProvider)
}

// ManagedDiskSASToken is the Schema for the ManagedDiskSASTokens API. Manages a Disk SAS Token.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ManagedDiskSASToken: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessLevel) || (has(self.initProvider) && has(self.initProvider.accessLevel))",message="spec.forProvider.accessLevel is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.durationInSeconds) || (has(self.initProvider) && has(self.initProvider.durationInSeconds))",message="spec.forProvider.durationInSeconds is a required parameter"
	spec:    #ManagedDiskSASTokenSpec   @go(Spec)
	status?: #ManagedDiskSASTokenStatus @go(Status)
}

// ManagedDiskSASTokenList contains a list of ManagedDiskSASTokens
#ManagedDiskSASTokenList: {
	items: [...#ManagedDiskSASToken] @go(Items,[]ManagedDiskSASToken)
}
