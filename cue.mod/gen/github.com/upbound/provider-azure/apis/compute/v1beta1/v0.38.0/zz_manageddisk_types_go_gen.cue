// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/compute/v1beta1

package v1beta1

#DiskEncryptionKeyInitParameters: {
	// The URL to the Key Vault Secret used as the Disk Encryption Key. This can be found as id on the azurerm_key_vault_secret resource.
	secretUrl?: null | string @go(SecretURL,*string)

	// The ID of the source Key Vault. This can be found as id on the azurerm_key_vault resource.
	sourceVaultId?: null | string @go(SourceVaultID,*string)
}

#DiskEncryptionKeyObservation: {
	// The URL to the Key Vault Secret used as the Disk Encryption Key. This can be found as id on the azurerm_key_vault_secret resource.
	secretUrl?: null | string @go(SecretURL,*string)

	// The ID of the source Key Vault. This can be found as id on the azurerm_key_vault resource.
	sourceVaultId?: null | string @go(SourceVaultID,*string)
}

#DiskEncryptionKeyParameters: {
	// The URL to the Key Vault Secret used as the Disk Encryption Key. This can be found as id on the azurerm_key_vault_secret resource.
	// +kubebuilder:validation:Optional
	secretUrl?: null | string @go(SecretURL,*string)

	// The ID of the source Key Vault. This can be found as id on the azurerm_key_vault resource.
	// +kubebuilder:validation:Optional
	sourceVaultId?: null | string @go(SourceVaultID,*string)
}

#EncryptionSettingsInitParameters: {
	// A disk_encryption_key block as defined above.
	diskEncryptionKey?: [...#DiskEncryptionKeyInitParameters] @go(DiskEncryptionKey,[]DiskEncryptionKeyInitParameters)
	enabled?: null | bool @go(Enabled,*bool)

	// A key_encryption_key block as defined below.
	keyEncryptionKey?: [...#KeyEncryptionKeyInitParameters] @go(KeyEncryptionKey,[]KeyEncryptionKeyInitParameters)
}

#EncryptionSettingsObservation: {
	// A disk_encryption_key block as defined above.
	diskEncryptionKey?: [...#DiskEncryptionKeyObservation] @go(DiskEncryptionKey,[]DiskEncryptionKeyObservation)
	enabled?: null | bool @go(Enabled,*bool)

	// A key_encryption_key block as defined below.
	keyEncryptionKey?: [...#KeyEncryptionKeyObservation] @go(KeyEncryptionKey,[]KeyEncryptionKeyObservation)
}

#EncryptionSettingsParameters: {
	// A disk_encryption_key block as defined above.
	// +kubebuilder:validation:Optional
	diskEncryptionKey?: [...#DiskEncryptionKeyParameters] @go(DiskEncryptionKey,[]DiskEncryptionKeyParameters)

	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// A key_encryption_key block as defined below.
	// +kubebuilder:validation:Optional
	keyEncryptionKey?: [...#KeyEncryptionKeyParameters] @go(KeyEncryptionKey,[]KeyEncryptionKeyParameters)
}

#KeyEncryptionKeyInitParameters: {
	// The URL to the Key Vault Key used as the Key Encryption Key. This can be found as id on the azurerm_key_vault_key resource.
	keyUrl?: null | string @go(KeyURL,*string)

	// The ID of the source Key Vault. This can be found as id on the azurerm_key_vault resource.
	sourceVaultId?: null | string @go(SourceVaultID,*string)
}

#KeyEncryptionKeyObservation: {
	// The URL to the Key Vault Key used as the Key Encryption Key. This can be found as id on the azurerm_key_vault_key resource.
	keyUrl?: null | string @go(KeyURL,*string)

	// The ID of the source Key Vault. This can be found as id on the azurerm_key_vault resource.
	sourceVaultId?: null | string @go(SourceVaultID,*string)
}

#KeyEncryptionKeyParameters: {
	// The URL to the Key Vault Key used as the Key Encryption Key. This can be found as id on the azurerm_key_vault_key resource.
	// +kubebuilder:validation:Optional
	keyUrl?: null | string @go(KeyURL,*string)

	// The ID of the source Key Vault. This can be found as id on the azurerm_key_vault resource.
	// +kubebuilder:validation:Optional
	sourceVaultId?: null | string @go(SourceVaultID,*string)
}

#ManagedDiskInitParameters: {
	// The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
	createOption?: null | string @go(CreateOption,*string)

	// The ID of the disk access resource for using private endpoints on disks.
	diskAccessId?: null | string @go(DiskAccessID,*string)

	// The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with secure_vm_disk_encryption_set_id.
	diskEncryptionSetId?: null | string @go(DiskEncryptionSetID,*string)

	// The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
	diskIopsReadOnly?: null | float64 @go(DiskIopsReadOnly,*float64)

	// The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
	diskIopsReadWrite?: null | float64 @go(DiskIopsReadWrite,*float64)

	// The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
	diskMbpsReadOnly?: null | float64 @go(DiskMbpsReadOnly,*float64)

	// The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
	diskMbpsReadWrite?: null | float64 @go(DiskMbpsReadWrite,*float64)

	// Specifies the size of the managed disk to create in gigabytes. If create_option is Copy or FromImage, then the value must be equal to or greater than the source's size. The size can only be increased.
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
	edgeZone?: null | string @go(EdgeZone,*string)

	// A encryption_settings block as defined below.
	encryptionSettings?: [...#EncryptionSettingsInitParameters] @go(EncryptionSettings,[]EncryptionSettingsInitParameters)

	// ID of a Gallery Image Version to copy when create_option is FromImage. This field cannot be specified if image_reference_id is specified. Changing this forces a new resource to be created.
	galleryImageReferenceId?: null | string @go(GalleryImageReferenceID,*string)

	// The HyperV Generation of the Disk when the source of an Import or Copy operation targets a source that contains an operating system. Possible values are V1 and V2. For ImportSecure it must be set to V2. Changing this forces a new resource to be created.
	hyperVGeneration?: null | string @go(HyperVGeneration,*string)

	// ID of an existing platform/marketplace disk image to copy when create_option is FromImage. This field cannot be specified if gallery_image_reference_id is specified. Changing this forces a new resource to be created.
	imageReferenceId?: null | string @go(ImageReferenceID,*string)

	// Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Logical Sector Size. Possible values are: 512 and 4096. Defaults to 4096. Changing this forces a new resource to be created.
	logicalSectorSize?: null | float64 @go(LogicalSectorSize,*float64)

	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
	maxShares?: null | float64 @go(MaxShares,*float64)

	// Policy for accessing the disk via network. Allowed values are AllowAll, AllowPrivate, and DenyAll.
	networkAccessPolicy?: null | string @go(NetworkAccessPolicy,*string)

	// Specifies if On-Demand Bursting is enabled for the Managed Disk.
	onDemandBurstingEnabled?: null | bool @go(OnDemandBurstingEnabled,*bool)

	// Specify a value when the source of an Import, ImportSecure or Copy operation targets a source that contains an operating system. Valid values are Linux or Windows.
	osType?: null | string @go(OsType,*string)

	// Whether it is allowed to access the disk via public network. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with disk_encryption_set_id. Changing this forces a new resource to be created.
	secureVmDiskEncryptionSetId?: null | string @go(SecureVMDiskEncryptionSetID,*string)

	// Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey, ConfidentialVM_DiskEncryptedWithPlatformKey and ConfidentialVM_DiskEncryptedWithCustomerKey. Changing this forces a new resource to be created.
	securityType?: null | string @go(SecurityType,*string)

	// URI to a valid VHD file to be used when create_option is Import or ImportSecure. Changing this forces a new resource to be created.
	sourceUri?: null | string @go(SourceURI,*string)

	// The ID of the Storage Account where the source_uri is located. Required when create_option is set to Import or ImportSecure. Changing this forces a new resource to be created.
	storageAccountId?: null | string @go(StorageAccountID,*string)

	// The type of storage to use for the managed disk. Possible values are Standard_LRS, StandardSSD_ZRS, Premium_LRS, PremiumV2_LRS, Premium_ZRS, StandardSSD_LRS or UltraSSD_LRS.
	storageAccountType?: null | string @go(StorageAccountType,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The disk performance tier to use. Possible values are documented here. This feature is currently supported only for premium SSDs.
	tier?: null | string @go(Tier,*string)

	// Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
	trustedLaunchEnabled?: null | bool @go(TrustedLaunchEnabled,*bool)

	// Specifies the size of the managed disk to create in bytes. Required when create_option is Upload. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with ls -l or wc -c. More information can be found at Copy a managed disk. Changing this forces a new resource to be created.
	uploadSizeBytes?: null | float64 @go(UploadSizeBytes,*float64)

	// Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
	zone?: null | string @go(Zone,*string)
}

#ManagedDiskObservation: {
	// The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
	createOption?: null | string @go(CreateOption,*string)

	// The ID of the disk access resource for using private endpoints on disks.
	diskAccessId?: null | string @go(DiskAccessID,*string)

	// The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with secure_vm_disk_encryption_set_id.
	diskEncryptionSetId?: null | string @go(DiskEncryptionSetID,*string)

	// The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
	diskIopsReadOnly?: null | float64 @go(DiskIopsReadOnly,*float64)

	// The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
	diskIopsReadWrite?: null | float64 @go(DiskIopsReadWrite,*float64)

	// The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
	diskMbpsReadOnly?: null | float64 @go(DiskMbpsReadOnly,*float64)

	// The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
	diskMbpsReadWrite?: null | float64 @go(DiskMbpsReadWrite,*float64)

	// Specifies the size of the managed disk to create in gigabytes. If create_option is Copy or FromImage, then the value must be equal to or greater than the source's size. The size can only be increased.
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
	edgeZone?: null | string @go(EdgeZone,*string)

	// A encryption_settings block as defined below.
	encryptionSettings?: [...#EncryptionSettingsObservation] @go(EncryptionSettings,[]EncryptionSettingsObservation)

	// ID of a Gallery Image Version to copy when create_option is FromImage. This field cannot be specified if image_reference_id is specified. Changing this forces a new resource to be created.
	galleryImageReferenceId?: null | string @go(GalleryImageReferenceID,*string)

	// The HyperV Generation of the Disk when the source of an Import or Copy operation targets a source that contains an operating system. Possible values are V1 and V2. For ImportSecure it must be set to V2. Changing this forces a new resource to be created.
	hyperVGeneration?: null | string @go(HyperVGeneration,*string)

	// The ID of the Managed Disk.
	id?: null | string @go(ID,*string)

	// ID of an existing platform/marketplace disk image to copy when create_option is FromImage. This field cannot be specified if gallery_image_reference_id is specified. Changing this forces a new resource to be created.
	imageReferenceId?: null | string @go(ImageReferenceID,*string)

	// Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Logical Sector Size. Possible values are: 512 and 4096. Defaults to 4096. Changing this forces a new resource to be created.
	logicalSectorSize?: null | float64 @go(LogicalSectorSize,*float64)

	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
	maxShares?: null | float64 @go(MaxShares,*float64)

	// Policy for accessing the disk via network. Allowed values are AllowAll, AllowPrivate, and DenyAll.
	networkAccessPolicy?: null | string @go(NetworkAccessPolicy,*string)

	// Specifies if On-Demand Bursting is enabled for the Managed Disk.
	onDemandBurstingEnabled?: null | bool @go(OnDemandBurstingEnabled,*bool)

	// Specify a value when the source of an Import, ImportSecure or Copy operation targets a source that contains an operating system. Valid values are Linux or Windows.
	osType?: null | string @go(OsType,*string)

	// Whether it is allowed to access the disk via public network. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The name of the Resource Group where the Managed Disk should exist. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with disk_encryption_set_id. Changing this forces a new resource to be created.
	secureVmDiskEncryptionSetId?: null | string @go(SecureVMDiskEncryptionSetID,*string)

	// Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey, ConfidentialVM_DiskEncryptedWithPlatformKey and ConfidentialVM_DiskEncryptedWithCustomerKey. Changing this forces a new resource to be created.
	securityType?: null | string @go(SecurityType,*string)

	// The ID of an existing Managed Disk or Snapshot to copy when create_option is Copy or the recovery point to restore when create_option is Restore. Changing this forces a new resource to be created.
	sourceResourceId?: null | string @go(SourceResourceID,*string)

	// URI to a valid VHD file to be used when create_option is Import or ImportSecure. Changing this forces a new resource to be created.
	sourceUri?: null | string @go(SourceURI,*string)

	// The ID of the Storage Account where the source_uri is located. Required when create_option is set to Import or ImportSecure. Changing this forces a new resource to be created.
	storageAccountId?: null | string @go(StorageAccountID,*string)

	// The type of storage to use for the managed disk. Possible values are Standard_LRS, StandardSSD_ZRS, Premium_LRS, PremiumV2_LRS, Premium_ZRS, StandardSSD_LRS or UltraSSD_LRS.
	storageAccountType?: null | string @go(StorageAccountType,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The disk performance tier to use. Possible values are documented here. This feature is currently supported only for premium SSDs.
	tier?: null | string @go(Tier,*string)

	// Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
	trustedLaunchEnabled?: null | bool @go(TrustedLaunchEnabled,*bool)

	// Specifies the size of the managed disk to create in bytes. Required when create_option is Upload. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with ls -l or wc -c. More information can be found at Copy a managed disk. Changing this forces a new resource to be created.
	uploadSizeBytes?: null | float64 @go(UploadSizeBytes,*float64)

	// Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
	zone?: null | string @go(Zone,*string)
}

#ManagedDiskParameters: {
	// The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
	// +kubebuilder:validation:Optional
	createOption?: null | string @go(CreateOption,*string)

	// The ID of the disk access resource for using private endpoints on disks.
	// +kubebuilder:validation:Optional
	diskAccessId?: null | string @go(DiskAccessID,*string)

	// The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with secure_vm_disk_encryption_set_id.
	// +kubebuilder:validation:Optional
	diskEncryptionSetId?: null | string @go(DiskEncryptionSetID,*string)

	// The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
	// +kubebuilder:validation:Optional
	diskIopsReadOnly?: null | float64 @go(DiskIopsReadOnly,*float64)

	// The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
	// +kubebuilder:validation:Optional
	diskIopsReadWrite?: null | float64 @go(DiskIopsReadWrite,*float64)

	// The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
	// +kubebuilder:validation:Optional
	diskMbpsReadOnly?: null | float64 @go(DiskMbpsReadOnly,*float64)

	// The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
	// +kubebuilder:validation:Optional
	diskMbpsReadWrite?: null | float64 @go(DiskMbpsReadWrite,*float64)

	// Specifies the size of the managed disk to create in gigabytes. If create_option is Copy or FromImage, then the value must be equal to or greater than the source's size. The size can only be increased.
	// +kubebuilder:validation:Optional
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
	// +kubebuilder:validation:Optional
	edgeZone?: null | string @go(EdgeZone,*string)

	// A encryption_settings block as defined below.
	// +kubebuilder:validation:Optional
	encryptionSettings?: [...#EncryptionSettingsParameters] @go(EncryptionSettings,[]EncryptionSettingsParameters)

	// ID of a Gallery Image Version to copy when create_option is FromImage. This field cannot be specified if image_reference_id is specified. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	galleryImageReferenceId?: null | string @go(GalleryImageReferenceID,*string)

	// The HyperV Generation of the Disk when the source of an Import or Copy operation targets a source that contains an operating system. Possible values are V1 and V2. For ImportSecure it must be set to V2. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	hyperVGeneration?: null | string @go(HyperVGeneration,*string)

	// ID of an existing platform/marketplace disk image to copy when create_option is FromImage. This field cannot be specified if gallery_image_reference_id is specified. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	imageReferenceId?: null | string @go(ImageReferenceID,*string)

	// Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Logical Sector Size. Possible values are: 512 and 4096. Defaults to 4096. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	logicalSectorSize?: null | float64 @go(LogicalSectorSize,*float64)

	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
	// +kubebuilder:validation:Optional
	maxShares?: null | float64 @go(MaxShares,*float64)

	// Policy for accessing the disk via network. Allowed values are AllowAll, AllowPrivate, and DenyAll.
	// +kubebuilder:validation:Optional
	networkAccessPolicy?: null | string @go(NetworkAccessPolicy,*string)

	// Specifies if On-Demand Bursting is enabled for the Managed Disk.
	// +kubebuilder:validation:Optional
	onDemandBurstingEnabled?: null | bool @go(OnDemandBurstingEnabled,*bool)

	// Specify a value when the source of an Import, ImportSecure or Copy operation targets a source that contains an operating system. Valid values are Linux or Windows.
	// +kubebuilder:validation:Optional
	osType?: null | string @go(OsType,*string)

	// Whether it is allowed to access the disk via public network. Defaults to true.
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The name of the Resource Group where the Managed Disk should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with disk_encryption_set_id. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	secureVmDiskEncryptionSetId?: null | string @go(SecureVMDiskEncryptionSetID,*string)

	// Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey, ConfidentialVM_DiskEncryptedWithPlatformKey and ConfidentialVM_DiskEncryptedWithCustomerKey. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	securityType?: null | string @go(SecurityType,*string)

	// The ID of an existing Managed Disk or Snapshot to copy when create_option is Copy or the recovery point to restore when create_option is Restore. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/compute/v1beta1.ManagedDisk
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	sourceResourceId?: null | string @go(SourceResourceID,*string)

	// URI to a valid VHD file to be used when create_option is Import or ImportSecure. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	sourceUri?: null | string @go(SourceURI,*string)

	// The ID of the Storage Account where the source_uri is located. Required when create_option is set to Import or ImportSecure. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	storageAccountId?: null | string @go(StorageAccountID,*string)

	// The type of storage to use for the managed disk. Possible values are Standard_LRS, StandardSSD_ZRS, Premium_LRS, PremiumV2_LRS, Premium_ZRS, StandardSSD_LRS or UltraSSD_LRS.
	// +kubebuilder:validation:Optional
	storageAccountType?: null | string @go(StorageAccountType,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The disk performance tier to use. Possible values are documented here. This feature is currently supported only for premium SSDs.
	// +kubebuilder:validation:Optional
	tier?: null | string @go(Tier,*string)

	// Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	trustedLaunchEnabled?: null | bool @go(TrustedLaunchEnabled,*bool)

	// Specifies the size of the managed disk to create in bytes. Required when create_option is Upload. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with ls -l or wc -c. More information can be found at Copy a managed disk. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	uploadSizeBytes?: null | float64 @go(UploadSizeBytes,*float64)

	// Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
	// +kubebuilder:validation:Optional
	zone?: null | string @go(Zone,*string)
}

// ManagedDiskSpec defines the desired state of ManagedDisk
#ManagedDiskSpec: {
	forProvider: #ManagedDiskParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ManagedDiskInitParameters @go(InitProvider)
}

// ManagedDiskStatus defines the observed state of ManagedDisk.
#ManagedDiskStatus: {
	atProvider?: #ManagedDiskObservation @go(AtProvider)
}

// ManagedDisk is the Schema for the ManagedDisks API. Manages a Managed Disk.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ManagedDisk: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.createOption) || (has(self.initProvider) && has(self.initProvider.createOption))",message="spec.forProvider.createOption is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storageAccountType) || (has(self.initProvider) && has(self.initProvider.storageAccountType))",message="spec.forProvider.storageAccountType is a required parameter"
	spec:    #ManagedDiskSpec   @go(Spec)
	status?: #ManagedDiskStatus @go(Status)
}

// ManagedDiskList contains a list of ManagedDisks
#ManagedDiskList: {
	items: [...#ManagedDisk] @go(Items,[]ManagedDisk)
}
