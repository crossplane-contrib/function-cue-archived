// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cache/v1beta1

package v1beta1

#RedisFirewallRuleInitParameters: {
	// The highest IP address included in the range.
	endIp?: null | string @go(EndIP,*string)

	// The lowest IP address included in the range
	startIp?: null | string @go(StartIP,*string)
}

#RedisFirewallRuleObservation: {
	// The highest IP address included in the range.
	endIp?: null | string @go(EndIP,*string)

	// The ID of the Redis Firewall Rule.
	id?: null | string @go(ID,*string)

	// The name of the Redis Cache. Changing this forces a new resource to be created.
	redisCacheName?: null | string @go(RedisCacheName,*string)

	// The name of the resource group in which this Redis Cache exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The lowest IP address included in the range
	startIp?: null | string @go(StartIP,*string)
}

#RedisFirewallRuleParameters: {
	// The highest IP address included in the range.
	// +kubebuilder:validation:Optional
	endIp?: null | string @go(EndIP,*string)

	// The name of the Redis Cache. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cache/v1beta1.RedisCache
	// +kubebuilder:validation:Optional
	redisCacheName?: null | string @go(RedisCacheName,*string)

	// The name of the resource group in which this Redis Cache exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The lowest IP address included in the range
	// +kubebuilder:validation:Optional
	startIp?: null | string @go(StartIP,*string)
}

// RedisFirewallRuleSpec defines the desired state of RedisFirewallRule
#RedisFirewallRuleSpec: {
	forProvider: #RedisFirewallRuleParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RedisFirewallRuleInitParameters @go(InitProvider)
}

// RedisFirewallRuleStatus defines the observed state of RedisFirewallRule.
#RedisFirewallRuleStatus: {
	atProvider?: #RedisFirewallRuleObservation @go(AtProvider)
}

// RedisFirewallRule is the Schema for the RedisFirewallRules API. Manages a Firewall Rule associated with a Redis Cache.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#RedisFirewallRule: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endIp) || (has(self.initProvider) && has(self.initProvider.endIp))",message="spec.forProvider.endIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.startIp) || (has(self.initProvider) && has(self.initProvider.startIp))",message="spec.forProvider.startIp is a required parameter"
	spec:    #RedisFirewallRuleSpec   @go(Spec)
	status?: #RedisFirewallRuleStatus @go(Status)
}

// RedisFirewallRuleList contains a list of RedisFirewallRules
#RedisFirewallRuleList: {
	items: [...#RedisFirewallRule] @go(Items,[]RedisFirewallRule)
}
