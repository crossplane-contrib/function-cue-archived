// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cache/v1beta1

package v1beta1

#ModuleObservation: {
	// Configuration options for the module (e.g. ERROR_RATE 0.00 INITIAL_SIZE 400). Changing this forces a new resource to be created. Defaults to "".
	args?: null | string @go(Args,*string)

	// The name which should be used for this module. Possible values are RedisBloom, RedisTimeSeries, RediSearch and RedisJSON. Changing this forces a new Redis Enterprise Database to be created.
	name?:    null | string @go(Name,*string)
	version?: null | string @go(Version,*string)
}

#ModuleParameters: {
	// Configuration options for the module (e.g. ERROR_RATE 0.00 INITIAL_SIZE 400). Changing this forces a new resource to be created. Defaults to "".
	// +kubebuilder:validation:Optional
	args?: null | string @go(Args,*string)

	// The name which should be used for this module. Possible values are RedisBloom, RedisTimeSeries, RediSearch and RedisJSON. Changing this forces a new Redis Enterprise Database to be created.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)
}

#RedisEnterpriseDatabaseObservation: {
	// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted. Possible values are Encrypted and Plaintext. Defaults to Encrypted. Changing this forces a new Redis Enterprise Database to be created.
	clientProtocol?: null | string @go(ClientProtocol,*string)

	// The resource id of the Redis Enterprise Cluster to deploy this Redis Enterprise Database. Changing this forces a new Redis Enterprise Database to be created.
	clusterId?: null | string @go(ClusterID,*string)

	// Clustering policy - default is OSSCluster. Specified at create time. Possible values are EnterpriseCluster and OSSCluster. Defaults to OSSCluster. Changing this forces a new Redis Enterprise Database to be created.
	clusteringPolicy?: null | string @go(ClusteringPolicy,*string)

	// Redis eviction policy - default is VolatileLRU. Possible values are AllKeysLFU, AllKeysLRU, AllKeysRandom, VolatileLRU, VolatileLFU, VolatileTTL, VolatileRandom and NoEviction. Changing this forces a new Redis Enterprise Database to be created.
	evictionPolicy?: null | string @go(EvictionPolicy,*string)

	// The ID of the Redis Enterprise Database.
	id?: null | string @go(ID,*string)

	// Nickname of the group of linked databases. Changing this force a new Redis Enterprise Geo Database to be created.
	linkedDatabaseGroupNickname?: null | string @go(LinkedDatabaseGroupNickname,*string)

	// A list of database resources to link with this database with a maximum of 5.
	linkedDatabaseId?: [...null | string] @go(LinkedDatabaseID,[]*string)

	// A module block as defined below. Changing this forces a new resource to be created.
	module?: [...#ModuleObservation] @go(Module,[]ModuleObservation)

	// TCP port of the database endpoint. Specified at create time. Defaults to an available port. Changing this forces a new Redis Enterprise Database to be created. Defaults to 10000.
	port?: null | float64 @go(Port,*float64)

	// The name of the Resource Group where the Redis Enterprise Database should exist. Changing this forces a new Redis Enterprise Database to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

#RedisEnterpriseDatabaseParameters: {
	// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted. Possible values are Encrypted and Plaintext. Defaults to Encrypted. Changing this forces a new Redis Enterprise Database to be created.
	// +kubebuilder:validation:Optional
	clientProtocol?: null | string @go(ClientProtocol,*string)

	// The resource id of the Redis Enterprise Cluster to deploy this Redis Enterprise Database. Changing this forces a new Redis Enterprise Database to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cache/v1beta1.RedisEnterpriseCluster
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	clusterId?: null | string @go(ClusterID,*string)

	// Clustering policy - default is OSSCluster. Specified at create time. Possible values are EnterpriseCluster and OSSCluster. Defaults to OSSCluster. Changing this forces a new Redis Enterprise Database to be created.
	// +kubebuilder:validation:Optional
	clusteringPolicy?: null | string @go(ClusteringPolicy,*string)

	// Redis eviction policy - default is VolatileLRU. Possible values are AllKeysLFU, AllKeysLRU, AllKeysRandom, VolatileLRU, VolatileLFU, VolatileTTL, VolatileRandom and NoEviction. Changing this forces a new Redis Enterprise Database to be created.
	// +kubebuilder:validation:Optional
	evictionPolicy?: null | string @go(EvictionPolicy,*string)

	// Nickname of the group of linked databases. Changing this force a new Redis Enterprise Geo Database to be created.
	// +kubebuilder:validation:Optional
	linkedDatabaseGroupNickname?: null | string @go(LinkedDatabaseGroupNickname,*string)

	// A list of database resources to link with this database with a maximum of 5.
	// +kubebuilder:validation:Optional
	linkedDatabaseId?: [...null | string] @go(LinkedDatabaseID,[]*string)

	// A module block as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	module?: [...#ModuleParameters] @go(Module,[]ModuleParameters)

	// TCP port of the database endpoint. Specified at create time. Defaults to an available port. Changing this forces a new Redis Enterprise Database to be created. Defaults to 10000.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// The name of the Resource Group where the Redis Enterprise Database should exist. Changing this forces a new Redis Enterprise Database to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

// RedisEnterpriseDatabaseSpec defines the desired state of RedisEnterpriseDatabase
#RedisEnterpriseDatabaseSpec: {
	forProvider: #RedisEnterpriseDatabaseParameters @go(ForProvider)
}

// RedisEnterpriseDatabaseStatus defines the observed state of RedisEnterpriseDatabase.
#RedisEnterpriseDatabaseStatus: {
	atProvider?: #RedisEnterpriseDatabaseObservation @go(AtProvider)
}

// RedisEnterpriseDatabase is the Schema for the RedisEnterpriseDatabases API. Manages a Redis Enterprise Database.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#RedisEnterpriseDatabase: {
	spec:    #RedisEnterpriseDatabaseSpec   @go(Spec)
	status?: #RedisEnterpriseDatabaseStatus @go(Status)
}

// RedisEnterpriseDatabaseList contains a list of RedisEnterpriseDatabases
#RedisEnterpriseDatabaseList: {
	items: [...#RedisEnterpriseDatabase] @go(Items,[]RedisEnterpriseDatabase)
}
