// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cache/v1beta1

package v1beta1

#IdentityInitParameters: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Redis Cluster.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Redis Cluster. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#IdentityObservation: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Redis Cluster.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The Route ID.
	principalId?: null | string @go(PrincipalID,*string)

	// The Route ID.
	tenantId?: null | string @go(TenantID,*string)

	// Specifies the type of Managed Service Identity that should be configured on this Redis Cluster. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#IdentityParameters: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Redis Cluster.
	// +kubebuilder:validation:Optional
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Redis Cluster. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#PatchScheduleInitParameters: {
	// the Weekday name - possible values include Monday, Tuesday, Wednesday etc.
	dayOfWeek?: null | string @go(DayOfWeek,*string)

	// The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated. Defaults to PT5H.
	maintenanceWindow?: null | string @go(MaintenanceWindow,*string)

	// the Start Hour for maintenance in UTC - possible values range from 0 - 23.
	startHourUtc?: null | float64 @go(StartHourUtc,*float64)
}

#PatchScheduleObservation: {
	// the Weekday name - possible values include Monday, Tuesday, Wednesday etc.
	dayOfWeek?: null | string @go(DayOfWeek,*string)

	// The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated. Defaults to PT5H.
	maintenanceWindow?: null | string @go(MaintenanceWindow,*string)

	// the Start Hour for maintenance in UTC - possible values range from 0 - 23.
	startHourUtc?: null | float64 @go(StartHourUtc,*float64)
}

#PatchScheduleParameters: {
	// the Weekday name - possible values include Monday, Tuesday, Wednesday etc.
	// +kubebuilder:validation:Optional
	dayOfWeek?: null | string @go(DayOfWeek,*string)

	// The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated. Defaults to PT5H.
	// +kubebuilder:validation:Optional
	maintenanceWindow?: null | string @go(MaintenanceWindow,*string)

	// the Start Hour for maintenance in UTC - possible values range from 0 - 23.
	// +kubebuilder:validation:Optional
	startHourUtc?: null | float64 @go(StartHourUtc,*float64)
}

#RedisCacheInitParameters: {
	// The size of the Redis cache to deploy. Valid values for a SKU family of C (Basic/Standard) are 0, 1, 2, 3, 4, 5, 6, and for P (Premium) family are 1, 2, 3, 4, 5.
	capacity?: null | float64 @go(Capacity,*float64)

	// Enable the non-SSL port (6379) - disabled by default.
	enableNonSslPort?: null | bool @go(EnableNonSSLPort,*bool)

	// The SKU family/pricing group to use. Valid values are C (for Basic/Standard SKU family) and P (for Premium)
	family?: null | string @go(Family,*string)

	// An identity block as defined below.
	identity?: [...#IdentityInitParameters] @go(Identity,[]IdentityInitParameters)

	// The location of the resource group. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The minimum TLS version. Possible values are 1.0, 1.1 and 1.2. Defaults to 1.0.
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// A list of patch_schedule blocks as defined below.
	patchSchedule?: [...#PatchScheduleInitParameters] @go(PatchSchedule,[]PatchScheduleInitParameters)

	// The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of subnet_id. Changing this forces a new resource to be created.
	privateStaticIpAddress?: null | string @go(PrivateStaticIPAddress,*string)

	// Whether or not public network access is allowed for this Redis Cache. true means this resource could be accessed by both public and private endpoint. false means only private endpoint access is allowed. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// A redis_configuration as defined below - with some limitations by SKU - defaults/details are shown below.
	redisConfiguration?: [...#RedisConfigurationInitParameters] @go(RedisConfiguration,[]RedisConfigurationInitParameters)

	// Redis version. Only major version needed. Valid values: 4, 6.
	redisVersion?: null | string @go(RedisVersion,*string)

	// Amount of replicas to create per master for this Redis Cache.
	replicasPerMaster?: null | float64 @go(ReplicasPerMaster,*float64)

	// Amount of replicas to create per primary for this Redis Cache. If both replicas_per_primary and replicas_per_master are set, they need to be equal.
	replicasPerPrimary?: null | float64 @go(ReplicasPerPrimary,*float64)

	// Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
	shardCount?: null | float64 @go(ShardCount,*float64)

	// The SKU of Redis to use. Possible values are Basic, Standard and Premium.
	skuName?: null | string @go(SkuName,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A mapping of tenant settings to assign to the resource.
	tenantSettings?: {[string]: null | string} @go(TenantSettings,map[string]*string)

	// Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.
	zones?: [...null | string] @go(Zones,[]*string)
}

#RedisCacheObservation: {
	// The size of the Redis cache to deploy. Valid values for a SKU family of C (Basic/Standard) are 0, 1, 2, 3, 4, 5, 6, and for P (Premium) family are 1, 2, 3, 4, 5.
	capacity?: null | float64 @go(Capacity,*float64)

	// Enable the non-SSL port (6379) - disabled by default.
	enableNonSslPort?: null | bool @go(EnableNonSSLPort,*bool)

	// The SKU family/pricing group to use. Valid values are C (for Basic/Standard SKU family) and P (for Premium)
	family?: null | string @go(Family,*string)

	// The Hostname of the Redis Instance
	hostname?: null | string @go(HostName,*string)

	// The Route ID.
	id?: null | string @go(ID,*string)

	// An identity block as defined below.
	identity?: [...#IdentityObservation] @go(Identity,[]IdentityObservation)

	// The location of the resource group. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The minimum TLS version. Possible values are 1.0, 1.1 and 1.2. Defaults to 1.0.
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// A list of patch_schedule blocks as defined below.
	patchSchedule?: [...#PatchScheduleObservation] @go(PatchSchedule,[]PatchScheduleObservation)

	// The non-SSL Port of the Redis Instance
	port?: null | float64 @go(Port,*float64)

	// The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of subnet_id. Changing this forces a new resource to be created.
	privateStaticIpAddress?: null | string @go(PrivateStaticIPAddress,*string)

	// Whether or not public network access is allowed for this Redis Cache. true means this resource could be accessed by both public and private endpoint. false means only private endpoint access is allowed. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// A redis_configuration as defined below - with some limitations by SKU - defaults/details are shown below.
	redisConfiguration?: [...#RedisConfigurationObservation] @go(RedisConfiguration,[]RedisConfigurationObservation)

	// Redis version. Only major version needed. Valid values: 4, 6.
	redisVersion?: null | string @go(RedisVersion,*string)

	// Amount of replicas to create per master for this Redis Cache.
	replicasPerMaster?: null | float64 @go(ReplicasPerMaster,*float64)

	// Amount of replicas to create per primary for this Redis Cache. If both replicas_per_primary and replicas_per_master are set, they need to be equal.
	replicasPerPrimary?: null | float64 @go(ReplicasPerPrimary,*float64)

	// The name of the resource group in which to create the Redis instance. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The SSL Port of the Redis Instance
	sslPort?: null | float64 @go(SSLPort,*float64)

	// Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
	shardCount?: null | float64 @go(ShardCount,*float64)

	// The SKU of Redis to use. Possible values are Basic, Standard and Premium.
	skuName?: null | string @go(SkuName,*string)

	// Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.
	subnetId?: null | string @go(SubnetID,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A mapping of tenant settings to assign to the resource.
	tenantSettings?: {[string]: null | string} @go(TenantSettings,map[string]*string)

	// Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.
	zones?: [...null | string] @go(Zones,[]*string)
}

#RedisCacheParameters: {
	// The size of the Redis cache to deploy. Valid values for a SKU family of C (Basic/Standard) are 0, 1, 2, 3, 4, 5, 6, and for P (Premium) family are 1, 2, 3, 4, 5.
	// +kubebuilder:validation:Optional
	capacity?: null | float64 @go(Capacity,*float64)

	// Enable the non-SSL port (6379) - disabled by default.
	// +kubebuilder:validation:Optional
	enableNonSslPort?: null | bool @go(EnableNonSSLPort,*bool)

	// The SKU family/pricing group to use. Valid values are C (for Basic/Standard SKU family) and P (for Premium)
	// +kubebuilder:validation:Optional
	family?: null | string @go(Family,*string)

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	identity?: [...#IdentityParameters] @go(Identity,[]IdentityParameters)

	// The location of the resource group. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The minimum TLS version. Possible values are 1.0, 1.1 and 1.2. Defaults to 1.0.
	// +kubebuilder:validation:Optional
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// A list of patch_schedule blocks as defined below.
	// +kubebuilder:validation:Optional
	patchSchedule?: [...#PatchScheduleParameters] @go(PatchSchedule,[]PatchScheduleParameters)

	// The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. This argument implies the use of subnet_id. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	privateStaticIpAddress?: null | string @go(PrivateStaticIPAddress,*string)

	// Whether or not public network access is allowed for this Redis Cache. true means this resource could be accessed by both public and private endpoint. false means only private endpoint access is allowed. Defaults to true.
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// A redis_configuration as defined below - with some limitations by SKU - defaults/details are shown below.
	// +kubebuilder:validation:Optional
	redisConfiguration?: [...#RedisConfigurationParameters] @go(RedisConfiguration,[]RedisConfigurationParameters)

	// Redis version. Only major version needed. Valid values: 4, 6.
	// +kubebuilder:validation:Optional
	redisVersion?: null | string @go(RedisVersion,*string)

	// Amount of replicas to create per master for this Redis Cache.
	// +kubebuilder:validation:Optional
	replicasPerMaster?: null | float64 @go(ReplicasPerMaster,*float64)

	// Amount of replicas to create per primary for this Redis Cache. If both replicas_per_primary and replicas_per_master are set, they need to be equal.
	// +kubebuilder:validation:Optional
	replicasPerPrimary?: null | float64 @go(ReplicasPerPrimary,*float64)

	// The name of the resource group in which to create the Redis instance. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Only available when using the Premium SKU The number of Shards to create on the Redis Cluster.
	// +kubebuilder:validation:Optional
	shardCount?: null | float64 @go(ShardCount,*float64)

	// The SKU of Redis to use. Possible values are Basic, Standard and Premium.
	// +kubebuilder:validation:Optional
	skuName?: null | string @go(SkuName,*string)

	// Only available when using the Premium SKU The ID of the Subnet within which the Redis Cache should be deployed. This Subnet must only contain Azure Cache for Redis instances without any other type of resources. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A mapping of tenant settings to assign to the resource.
	// +kubebuilder:validation:Optional
	tenantSettings?: {[string]: null | string} @go(TenantSettings,map[string]*string)

	// Specifies a list of Availability Zones in which this Redis Cache should be located. Changing this forces a new Redis Cache to be created.
	// +kubebuilder:validation:Optional
	zones?: [...null | string] @go(Zones,[]*string)
}

#RedisConfigurationInitParameters: {
	// Enable or disable AOF persistence for this Redis Cache. Defaults to false.
	aofBackupEnabled?: null | bool @go(AofBackupEnabled,*bool)

	// If set to false, the Redis instance will be accessible without authentication. Defaults to true.
	enableAuthentication?: null | bool @go(EnableAuthentication,*bool)

	// Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
	maxfragmentationmemoryReserved?: null | float64 @go(MaxfragmentationmemoryReserved,*float64)

	// The max-memory delta for this Redis instance. Defaults are shown below.
	maxmemoryDelta?: null | float64 @go(MaxmemoryDelta,*float64)

	// How Redis will select what to remove when maxmemory is reached. Defaults are shown below. Defaults to volatile-lru.
	maxmemoryPolicy?: null | string @go(MaxmemoryPolicy,*string)

	// Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
	maxmemoryReserved?: null | float64 @go(MaxmemoryReserved,*float64)

	// Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. Reference
	notifyKeyspaceEvents?: null | string @go(NotifyKeySpaceEvents,*string)

	// Is Backup Enabled? Only supported on Premium SKUs. Defaults to false.
	rdbBackupEnabled?: null | bool @go(RdbBackupEnabled,*bool)

	// The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: 15, 30, 60, 360, 720 and 1440.
	rdbBackupFrequency?: null | float64 @go(RdbBackupFrequency,*float64)

	// The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.
	rdbBackupMaxSnapshotCount?: null | float64 @go(RdbBackupMaxSnapshotCount,*float64)
}

#RedisConfigurationObservation: {
	// Enable or disable AOF persistence for this Redis Cache. Defaults to false.
	aofBackupEnabled?: null | bool @go(AofBackupEnabled,*bool)

	// If set to false, the Redis instance will be accessible without authentication. Defaults to true.
	enableAuthentication?: null | bool @go(EnableAuthentication,*bool)

	// Returns the max number of connected clients at the same time.
	maxclients?: null | float64 @go(Maxclients,*float64)

	// Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
	maxfragmentationmemoryReserved?: null | float64 @go(MaxfragmentationmemoryReserved,*float64)

	// The max-memory delta for this Redis instance. Defaults are shown below.
	maxmemoryDelta?: null | float64 @go(MaxmemoryDelta,*float64)

	// How Redis will select what to remove when maxmemory is reached. Defaults are shown below. Defaults to volatile-lru.
	maxmemoryPolicy?: null | string @go(MaxmemoryPolicy,*string)

	// Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
	maxmemoryReserved?: null | float64 @go(MaxmemoryReserved,*float64)

	// Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. Reference
	notifyKeyspaceEvents?: null | string @go(NotifyKeySpaceEvents,*string)

	// Is Backup Enabled? Only supported on Premium SKUs. Defaults to false.
	rdbBackupEnabled?: null | bool @go(RdbBackupEnabled,*bool)

	// The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: 15, 30, 60, 360, 720 and 1440.
	rdbBackupFrequency?: null | float64 @go(RdbBackupFrequency,*float64)

	// The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.
	rdbBackupMaxSnapshotCount?: null | float64 @go(RdbBackupMaxSnapshotCount,*float64)
}

#RedisConfigurationParameters: {
	// Enable or disable AOF persistence for this Redis Cache. Defaults to false.
	// +kubebuilder:validation:Optional
	aofBackupEnabled?: null | bool @go(AofBackupEnabled,*bool)

	// If set to false, the Redis instance will be accessible without authentication. Defaults to true.
	// +kubebuilder:validation:Optional
	enableAuthentication?: null | bool @go(EnableAuthentication,*bool)

	// Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
	// +kubebuilder:validation:Optional
	maxfragmentationmemoryReserved?: null | float64 @go(MaxfragmentationmemoryReserved,*float64)

	// The max-memory delta for this Redis instance. Defaults are shown below.
	// +kubebuilder:validation:Optional
	maxmemoryDelta?: null | float64 @go(MaxmemoryDelta,*float64)

	// How Redis will select what to remove when maxmemory is reached. Defaults are shown below. Defaults to volatile-lru.
	// +kubebuilder:validation:Optional
	maxmemoryPolicy?: null | string @go(MaxmemoryPolicy,*string)

	// Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
	// +kubebuilder:validation:Optional
	maxmemoryReserved?: null | float64 @go(MaxmemoryReserved,*float64)

	// Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. Reference
	// +kubebuilder:validation:Optional
	notifyKeyspaceEvents?: null | string @go(NotifyKeySpaceEvents,*string)

	// Is Backup Enabled? Only supported on Premium SKUs. Defaults to false.
	// +kubebuilder:validation:Optional
	rdbBackupEnabled?: null | bool @go(RdbBackupEnabled,*bool)

	// The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: 15, 30, 60, 360, 720 and 1440.
	// +kubebuilder:validation:Optional
	rdbBackupFrequency?: null | float64 @go(RdbBackupFrequency,*float64)

	// The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.
	// +kubebuilder:validation:Optional
	rdbBackupMaxSnapshotCount?: null | float64 @go(RdbBackupMaxSnapshotCount,*float64)
}

// RedisCacheSpec defines the desired state of RedisCache
#RedisCacheSpec: {
	forProvider: #RedisCacheParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RedisCacheInitParameters @go(InitProvider)
}

// RedisCacheStatus defines the observed state of RedisCache.
#RedisCacheStatus: {
	atProvider?: #RedisCacheObservation @go(AtProvider)
}

// RedisCache is the Schema for the RedisCaches API. Manages a Redis Cache
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#RedisCache: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.capacity) || (has(self.initProvider) && has(self.initProvider.capacity))",message="spec.forProvider.capacity is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.family) || (has(self.initProvider) && has(self.initProvider.family))",message="spec.forProvider.family is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.redisVersion) || (has(self.initProvider) && has(self.initProvider.redisVersion))",message="spec.forProvider.redisVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.skuName) || (has(self.initProvider) && has(self.initProvider.skuName))",message="spec.forProvider.skuName is a required parameter"
	spec:    #RedisCacheSpec   @go(Spec)
	status?: #RedisCacheStatus @go(Status)
}

// RedisCacheList contains a list of RedisCaches
#RedisCacheList: {
	items: [...#RedisCache] @go(Items,[]RedisCache)
}
