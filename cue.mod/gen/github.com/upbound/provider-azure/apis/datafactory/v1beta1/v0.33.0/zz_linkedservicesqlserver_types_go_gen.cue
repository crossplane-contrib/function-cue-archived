// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/datafactory/v1beta1

package v1beta1

#LinkedServiceSQLServerKeyVaultConnectionStringObservation: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores SQL Server connection string.
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceSQLServerKeyVaultConnectionStringParameters: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	// +kubebuilder:validation:Required
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores SQL Server connection string.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceSQLServerKeyVaultPasswordObservation: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores SQL Server password.
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceSQLServerKeyVaultPasswordParameters: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.LinkedServiceKeyVault
	// +kubebuilder:validation:Optional
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores SQL Server password.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceSQLServerObservation: {
	// A map of additional properties to associate with the Data Factory Linked Service SQL Server.
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service SQL Server.
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The connection string in which to authenticate with the SQL Server. Exactly one of either connection_string or key_vault_connection_string is required.
	connectionString?: null | string @go(ConnectionString,*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service SQL Server.
	description?: null | string @go(Description,*string)

	// The ID of the Data Factory SQL Server Linked Service.
	id?: null | string @go(ID,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service SQL Server.
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// A key_vault_connection_string block as defined below. Use this argument to store SQL Server connection string in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either connection_string or key_vault_connection_string is required.
	keyVaultConnectionString?: [...#LinkedServiceSQLServerKeyVaultConnectionStringObservation] @go(KeyVaultConnectionString,[]LinkedServiceSQLServerKeyVaultConnectionStringObservation)

	// A key_vault_password block as defined below. Use this argument to store SQL Server password in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	keyVaultPassword?: [...#LinkedServiceSQLServerKeyVaultPasswordObservation] @go(KeyVaultPassword,[]LinkedServiceSQLServerKeyVaultPasswordObservation)

	// A map of parameters to associate with the Data Factory Linked Service SQL Server.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The on-premises Windows authentication user name.
	userName?: null | string @go(UserName,*string)
}

#LinkedServiceSQLServerParameters: {
	// A map of additional properties to associate with the Data Factory Linked Service SQL Server.
	// +kubebuilder:validation:Optional
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service SQL Server.
	// +kubebuilder:validation:Optional
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The connection string in which to authenticate with the SQL Server. Exactly one of either connection_string or key_vault_connection_string is required.
	// +kubebuilder:validation:Optional
	connectionString?: null | string @go(ConnectionString,*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service SQL Server.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service SQL Server.
	// +kubebuilder:validation:Optional
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// A key_vault_connection_string block as defined below. Use this argument to store SQL Server connection string in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either connection_string or key_vault_connection_string is required.
	// +kubebuilder:validation:Optional
	keyVaultConnectionString?: [...#LinkedServiceSQLServerKeyVaultConnectionStringParameters] @go(KeyVaultConnectionString,[]LinkedServiceSQLServerKeyVaultConnectionStringParameters)

	// A key_vault_password block as defined below. Use this argument to store SQL Server password in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	keyVaultPassword?: [...#LinkedServiceSQLServerKeyVaultPasswordParameters] @go(KeyVaultPassword,[]LinkedServiceSQLServerKeyVaultPasswordParameters)

	// A map of parameters to associate with the Data Factory Linked Service SQL Server.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The on-premises Windows authentication user name.
	// +kubebuilder:validation:Optional
	userName?: null | string @go(UserName,*string)
}

// LinkedServiceSQLServerSpec defines the desired state of LinkedServiceSQLServer
#LinkedServiceSQLServerSpec: {
	forProvider: #LinkedServiceSQLServerParameters @go(ForProvider)
}

// LinkedServiceSQLServerStatus defines the observed state of LinkedServiceSQLServer.
#LinkedServiceSQLServerStatus: {
	atProvider?: #LinkedServiceSQLServerObservation @go(AtProvider)
}

// LinkedServiceSQLServer is the Schema for the LinkedServiceSQLServers API. Manages a Linked Service (connection) between a SQL Server and Azure Data Factory.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LinkedServiceSQLServer: {
	spec:    #LinkedServiceSQLServerSpec   @go(Spec)
	status?: #LinkedServiceSQLServerStatus @go(Status)
}

// LinkedServiceSQLServerList contains a list of LinkedServiceSQLServers
#LinkedServiceSQLServerList: {
	items: [...#LinkedServiceSQLServer] @go(Items,[]LinkedServiceSQLServer)
}
