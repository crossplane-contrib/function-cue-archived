// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/datafactory/v1beta1

package v1beta1

#LinkedServiceCosmosDBObservation: {
	// The endpoint of the Azure CosmosDB account. Required if connection_string is unspecified.
	accountEndpoint?: null | string @go(AccountEndpoint,*string)

	// A map of additional properties to associate with the Data Factory Linked Service.
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service.
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The name of the database. Required if connection_string is unspecified.
	database?: null | string @go(Database,*string)

	// The description for the Data Factory Linked Service.
	description?: null | string @go(Description,*string)

	// The ID of the Data Factory Linked Service.
	id?: null | string @go(ID,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service.
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// A map of parameters to associate with the Data Factory Linked Service.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)
}

#LinkedServiceCosmosDBParameters: {
	// The endpoint of the Azure CosmosDB account. Required if connection_string is unspecified.
	// +kubebuilder:validation:Optional
	accountEndpoint?: null | string @go(AccountEndpoint,*string)

	// A map of additional properties to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The name of the database. Required if connection_string is unspecified.
	// +kubebuilder:validation:Optional
	database?: null | string @go(Database,*string)

	// The description for the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// A map of parameters to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)
}

// LinkedServiceCosmosDBSpec defines the desired state of LinkedServiceCosmosDB
#LinkedServiceCosmosDBSpec: {
	forProvider: #LinkedServiceCosmosDBParameters @go(ForProvider)
}

// LinkedServiceCosmosDBStatus defines the observed state of LinkedServiceCosmosDB.
#LinkedServiceCosmosDBStatus: {
	atProvider?: #LinkedServiceCosmosDBObservation @go(AtProvider)
}

// LinkedServiceCosmosDB is the Schema for the LinkedServiceCosmosDBs API. Manages a Linked Service (connection) between a CosmosDB and Azure Data Factory using SQL API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LinkedServiceCosmosDB: {
	spec:    #LinkedServiceCosmosDBSpec   @go(Spec)
	status?: #LinkedServiceCosmosDBStatus @go(Status)
}

// LinkedServiceCosmosDBList contains a list of LinkedServiceCosmosDBs
#LinkedServiceCosmosDBList: {
	items: [...#LinkedServiceCosmosDB] @go(Items,[]LinkedServiceCosmosDB)
}
