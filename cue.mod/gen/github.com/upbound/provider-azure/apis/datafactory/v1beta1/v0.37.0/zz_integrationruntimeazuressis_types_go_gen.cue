// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/datafactory/v1beta1

package v1beta1

#CatalogInfoInitParameters: {
	// Administrator login name for the SQL Server.
	administratorLogin?: null | string @go(AdministratorLogin,*string)

	// The dual standby Azure-SSIS Integration Runtime pair with SSISDB failover.
	dualStandbyPairName?: null | string @go(DualStandbyPairName,*string)

	// The name of SQL elastic pool where the database will be created for the SSIS catalog. Mutually exclusive with pricing_tier.
	elasticPoolName?: null | string @go(ElasticPoolName,*string)

	// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: Basic, S0, S1, S2, S3, S4, S6, S7, S9, S12, P1, P2, P4, P6, P11, P15, GP_S_Gen5_1, GP_S_Gen5_2, GP_S_Gen5_4, GP_S_Gen5_6, GP_S_Gen5_8, GP_S_Gen5_10, GP_S_Gen5_12, GP_S_Gen5_14, GP_S_Gen5_16, GP_S_Gen5_18, GP_S_Gen5_20, GP_S_Gen5_24, GP_S_Gen5_32, GP_S_Gen5_40, GP_Gen5_2, GP_Gen5_4, GP_Gen5_6, GP_Gen5_8, GP_Gen5_10, GP_Gen5_12, GP_Gen5_14, GP_Gen5_16, GP_Gen5_18, GP_Gen5_20, GP_Gen5_24, GP_Gen5_32, GP_Gen5_40, GP_Gen5_80, BC_Gen5_2, BC_Gen5_4, BC_Gen5_6, BC_Gen5_8, BC_Gen5_10, BC_Gen5_12, BC_Gen5_14, BC_Gen5_16, BC_Gen5_18, BC_Gen5_20, BC_Gen5_24, BC_Gen5_32, BC_Gen5_40, BC_Gen5_80, HS_Gen5_2, HS_Gen5_4, HS_Gen5_6, HS_Gen5_8, HS_Gen5_10, HS_Gen5_12, HS_Gen5_14, HS_Gen5_16, HS_Gen5_18, HS_Gen5_20, HS_Gen5_24, HS_Gen5_32, HS_Gen5_40 and HS_Gen5_80. Mutually exclusive with elastic_pool_name.
	pricingTier?: null | string @go(PricingTier,*string)

	// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
	serverEndpoint?: null | string @go(ServerEndpoint,*string)
}

#CatalogInfoObservation: {
	// Administrator login name for the SQL Server.
	administratorLogin?: null | string @go(AdministratorLogin,*string)

	// The dual standby Azure-SSIS Integration Runtime pair with SSISDB failover.
	dualStandbyPairName?: null | string @go(DualStandbyPairName,*string)

	// The name of SQL elastic pool where the database will be created for the SSIS catalog. Mutually exclusive with pricing_tier.
	elasticPoolName?: null | string @go(ElasticPoolName,*string)

	// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: Basic, S0, S1, S2, S3, S4, S6, S7, S9, S12, P1, P2, P4, P6, P11, P15, GP_S_Gen5_1, GP_S_Gen5_2, GP_S_Gen5_4, GP_S_Gen5_6, GP_S_Gen5_8, GP_S_Gen5_10, GP_S_Gen5_12, GP_S_Gen5_14, GP_S_Gen5_16, GP_S_Gen5_18, GP_S_Gen5_20, GP_S_Gen5_24, GP_S_Gen5_32, GP_S_Gen5_40, GP_Gen5_2, GP_Gen5_4, GP_Gen5_6, GP_Gen5_8, GP_Gen5_10, GP_Gen5_12, GP_Gen5_14, GP_Gen5_16, GP_Gen5_18, GP_Gen5_20, GP_Gen5_24, GP_Gen5_32, GP_Gen5_40, GP_Gen5_80, BC_Gen5_2, BC_Gen5_4, BC_Gen5_6, BC_Gen5_8, BC_Gen5_10, BC_Gen5_12, BC_Gen5_14, BC_Gen5_16, BC_Gen5_18, BC_Gen5_20, BC_Gen5_24, BC_Gen5_32, BC_Gen5_40, BC_Gen5_80, HS_Gen5_2, HS_Gen5_4, HS_Gen5_6, HS_Gen5_8, HS_Gen5_10, HS_Gen5_12, HS_Gen5_14, HS_Gen5_16, HS_Gen5_18, HS_Gen5_20, HS_Gen5_24, HS_Gen5_32, HS_Gen5_40 and HS_Gen5_80. Mutually exclusive with elastic_pool_name.
	pricingTier?: null | string @go(PricingTier,*string)

	// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
	serverEndpoint?: null | string @go(ServerEndpoint,*string)
}

#CatalogInfoParameters: {
	// Administrator login name for the SQL Server.
	// +kubebuilder:validation:Optional
	administratorLogin?: null | string @go(AdministratorLogin,*string)

	// The dual standby Azure-SSIS Integration Runtime pair with SSISDB failover.
	// +kubebuilder:validation:Optional
	dualStandbyPairName?: null | string @go(DualStandbyPairName,*string)

	// The name of SQL elastic pool where the database will be created for the SSIS catalog. Mutually exclusive with pricing_tier.
	// +kubebuilder:validation:Optional
	elasticPoolName?: null | string @go(ElasticPoolName,*string)

	// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: Basic, S0, S1, S2, S3, S4, S6, S7, S9, S12, P1, P2, P4, P6, P11, P15, GP_S_Gen5_1, GP_S_Gen5_2, GP_S_Gen5_4, GP_S_Gen5_6, GP_S_Gen5_8, GP_S_Gen5_10, GP_S_Gen5_12, GP_S_Gen5_14, GP_S_Gen5_16, GP_S_Gen5_18, GP_S_Gen5_20, GP_S_Gen5_24, GP_S_Gen5_32, GP_S_Gen5_40, GP_Gen5_2, GP_Gen5_4, GP_Gen5_6, GP_Gen5_8, GP_Gen5_10, GP_Gen5_12, GP_Gen5_14, GP_Gen5_16, GP_Gen5_18, GP_Gen5_20, GP_Gen5_24, GP_Gen5_32, GP_Gen5_40, GP_Gen5_80, BC_Gen5_2, BC_Gen5_4, BC_Gen5_6, BC_Gen5_8, BC_Gen5_10, BC_Gen5_12, BC_Gen5_14, BC_Gen5_16, BC_Gen5_18, BC_Gen5_20, BC_Gen5_24, BC_Gen5_32, BC_Gen5_40, BC_Gen5_80, HS_Gen5_2, HS_Gen5_4, HS_Gen5_6, HS_Gen5_8, HS_Gen5_10, HS_Gen5_12, HS_Gen5_14, HS_Gen5_16, HS_Gen5_18, HS_Gen5_20, HS_Gen5_24, HS_Gen5_32, HS_Gen5_40 and HS_Gen5_80. Mutually exclusive with elastic_pool_name.
	// +kubebuilder:validation:Optional
	pricingTier?: null | string @go(PricingTier,*string)

	// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
	// +kubebuilder:validation:Optional
	serverEndpoint?: null | string @go(ServerEndpoint,*string)
}

#CommandKeyInitParameters: {
	// A key_vault_secret_reference block as defined below.
	keyVaultPassword?: [...#KeyVaultPasswordInitParameters] @go(KeyVaultPassword,[]KeyVaultPasswordInitParameters)

	// The target computer or domain name.
	targetName?: null | string @go(TargetName,*string)

	// The username for the target device.
	userName?: null | string @go(UserName,*string)
}

#CommandKeyObservation: {
	// A key_vault_secret_reference block as defined below.
	keyVaultPassword?: [...#KeyVaultPasswordObservation] @go(KeyVaultPassword,[]KeyVaultPasswordObservation)

	// The target computer or domain name.
	targetName?: null | string @go(TargetName,*string)

	// The username for the target device.
	userName?: null | string @go(UserName,*string)
}

#CommandKeyParameters: {
	// A key_vault_secret_reference block as defined below.
	// +kubebuilder:validation:Optional
	keyVaultPassword?: [...#KeyVaultPasswordParameters] @go(KeyVaultPassword,[]KeyVaultPasswordParameters)

	// The target computer or domain name.
	// +kubebuilder:validation:Optional
	targetName?: null | string @go(TargetName,*string)

	// The username for the target device.
	// +kubebuilder:validation:Optional
	userName?: null | string @go(UserName,*string)
}

#ComponentInitParameters: {
	// A key_vault_secret_reference block as defined below.
	keyVaultLicense?: [...#KeyVaultLicenseInitParameters] @go(KeyVaultLicense,[]KeyVaultLicenseInitParameters)

	// Name of the package store.
	name?: null | string @go(Name,*string)
}

#ComponentObservation: {
	// A key_vault_secret_reference block as defined below.
	keyVaultLicense?: [...#KeyVaultLicenseObservation] @go(KeyVaultLicense,[]KeyVaultLicenseObservation)

	// Name of the package store.
	name?: null | string @go(Name,*string)
}

#ComponentParameters: {
	// A key_vault_secret_reference block as defined below.
	// +kubebuilder:validation:Optional
	keyVaultLicense?: [...#KeyVaultLicenseParameters] @go(KeyVaultLicense,[]KeyVaultLicenseParameters)

	// Name of the package store.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#CustomSetupScriptInitParameters: {
	// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup for more information.
	blobContainerUri?: null | string @go(BlobContainerURI,*string)
}

#CustomSetupScriptObservation: {
	// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup for more information.
	blobContainerUri?: null | string @go(BlobContainerURI,*string)
}

#CustomSetupScriptParameters: {
	// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See https://docs.microsoft.com/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup for more information.
	// +kubebuilder:validation:Optional
	blobContainerUri?: null | string @go(BlobContainerURI,*string)
}

#ExpressCustomSetupInitParameters: {
	// One or more command_key blocks as defined below.
	commandKey?: [...#CommandKeyInitParameters] @go(CommandKey,[]CommandKeyInitParameters)

	// One or more component blocks as defined below.
	component?: [...#ComponentInitParameters] @go(Component,[]ComponentInitParameters)

	// The Environment Variables for the Azure-SSIS Integration Runtime.
	environment?: {[string]: null | string} @go(Environment,map[string]*string)

	// The version of Azure Powershell installed for the Azure-SSIS Integration Runtime.
	powershellVersion?: null | string @go(PowershellVersion,*string)
}

#ExpressCustomSetupObservation: {
	// One or more command_key blocks as defined below.
	commandKey?: [...#CommandKeyObservation] @go(CommandKey,[]CommandKeyObservation)

	// One or more component blocks as defined below.
	component?: [...#ComponentObservation] @go(Component,[]ComponentObservation)

	// The Environment Variables for the Azure-SSIS Integration Runtime.
	environment?: {[string]: null | string} @go(Environment,map[string]*string)

	// The version of Azure Powershell installed for the Azure-SSIS Integration Runtime.
	powershellVersion?: null | string @go(PowershellVersion,*string)
}

#ExpressCustomSetupParameters: {
	// One or more command_key blocks as defined below.
	// +kubebuilder:validation:Optional
	commandKey?: [...#CommandKeyParameters] @go(CommandKey,[]CommandKeyParameters)

	// One or more component blocks as defined below.
	// +kubebuilder:validation:Optional
	component?: [...#ComponentParameters] @go(Component,[]ComponentParameters)

	// The Environment Variables for the Azure-SSIS Integration Runtime.
	// +kubebuilder:validation:Optional
	environment?: {[string]: null | string} @go(Environment,map[string]*string)

	// The version of Azure Powershell installed for the Azure-SSIS Integration Runtime.
	// +kubebuilder:validation:Optional
	powershellVersion?: null | string @go(PowershellVersion,*string)
}

#ExpressVnetIntegrationInitParameters: {
}

#ExpressVnetIntegrationObservation: {
	// id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
	subnetId?: null | string @go(SubnetID,*string)
}

#ExpressVnetIntegrationParameters: {
	// id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)
}

#IntegrationRuntimeAzureSSISInitParameters: {
	// A catalog_info block as defined below.
	catalogInfo?: [...#CatalogInfoInitParameters] @go(CatalogInfo,[]CatalogInfoInitParameters)

	// A custom_setup_script block as defined below.
	customSetupScript?: [...#CustomSetupScriptInitParameters] @go(CustomSetupScript,[]CustomSetupScriptInitParameters)

	// Integration runtime description.
	description?: null | string @go(Description,*string)

	// The Azure-SSIS Integration Runtime edition. Valid values are Standard and Enterprise. Defaults to Standard.
	edition?: null | string @go(Edition,*string)

	// An express_custom_setup block as defined below.
	expressCustomSetup?: [...#ExpressCustomSetupInitParameters] @go(ExpressCustomSetup,[]ExpressCustomSetupInitParameters)

	// A express_vnet_integration block as defined below.
	expressVnetIntegration?: [...#ExpressVnetIntegrationInitParameters] @go(ExpressVnetIntegration,[]ExpressVnetIntegrationInitParameters)

	// The type of the license that is used. Valid values are LicenseIncluded and BasePrice. Defaults to LicenseIncluded.
	licenseType?: null | string @go(LicenseType,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Defines the maximum parallel executions per node. Defaults to 1. Max is 16.
	maxParallelExecutionsPerNode?: null | float64 @go(MaxParallelExecutionsPerNode,*float64)

	// The size of the nodes on which the Azure-SSIS Integration Runtime runs. Valid values are: Standard_D2_v3, Standard_D4_v3, Standard_D8_v3, Standard_D16_v3, Standard_D32_v3, Standard_D64_v3, Standard_E2_v3, Standard_E4_v3, Standard_E8_v3, Standard_E16_v3, Standard_E32_v3, Standard_E64_v3, Standard_D1_v2, Standard_D2_v2, Standard_D3_v2, Standard_D4_v2, Standard_A4_v2 and Standard_A8_v2
	nodeSize?: null | string @go(NodeSize,*string)

	// Number of nodes for the Azure-SSIS Integration Runtime. Max is 10. Defaults to 1.
	numberOfNodes?: null | float64 @go(NumberOfNodes,*float64)

	// One or more package_store block as defined below.
	packageStore?: [...#PackageStoreInitParameters] @go(PackageStore,[]PackageStoreInitParameters)

	// A proxy block as defined below.
	proxy?: [...#ProxyInitParameters] @go(Proxy,[]ProxyInitParameters)

	// A vnet_integration block as defined below.
	vnetIntegration?: [...#VnetIntegrationInitParameters] @go(VnetIntegration,[]VnetIntegrationInitParameters)
}

#IntegrationRuntimeAzureSSISObservation: {
	// A catalog_info block as defined below.
	catalogInfo?: [...#CatalogInfoObservation] @go(CatalogInfo,[]CatalogInfoObservation)

	// A custom_setup_script block as defined below.
	customSetupScript?: [...#CustomSetupScriptObservation] @go(CustomSetupScript,[]CustomSetupScriptObservation)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// Integration runtime description.
	description?: null | string @go(Description,*string)

	// The Azure-SSIS Integration Runtime edition. Valid values are Standard and Enterprise. Defaults to Standard.
	edition?: null | string @go(Edition,*string)

	// An express_custom_setup block as defined below.
	expressCustomSetup?: [...#ExpressCustomSetupObservation] @go(ExpressCustomSetup,[]ExpressCustomSetupObservation)

	// A express_vnet_integration block as defined below.
	expressVnetIntegration?: [...#ExpressVnetIntegrationObservation] @go(ExpressVnetIntegration,[]ExpressVnetIntegrationObservation)

	// The ID of the Data Factory Azure-SSIS Integration Runtime.
	id?: null | string @go(ID,*string)

	// The type of the license that is used. Valid values are LicenseIncluded and BasePrice. Defaults to LicenseIncluded.
	licenseType?: null | string @go(LicenseType,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Defines the maximum parallel executions per node. Defaults to 1. Max is 16.
	maxParallelExecutionsPerNode?: null | float64 @go(MaxParallelExecutionsPerNode,*float64)

	// The size of the nodes on which the Azure-SSIS Integration Runtime runs. Valid values are: Standard_D2_v3, Standard_D4_v3, Standard_D8_v3, Standard_D16_v3, Standard_D32_v3, Standard_D64_v3, Standard_E2_v3, Standard_E4_v3, Standard_E8_v3, Standard_E16_v3, Standard_E32_v3, Standard_E64_v3, Standard_D1_v2, Standard_D2_v2, Standard_D3_v2, Standard_D4_v2, Standard_A4_v2 and Standard_A8_v2
	nodeSize?: null | string @go(NodeSize,*string)

	// Number of nodes for the Azure-SSIS Integration Runtime. Max is 10. Defaults to 1.
	numberOfNodes?: null | float64 @go(NumberOfNodes,*float64)

	// One or more package_store block as defined below.
	packageStore?: [...#PackageStoreObservation] @go(PackageStore,[]PackageStoreObservation)

	// A proxy block as defined below.
	proxy?: [...#ProxyObservation] @go(Proxy,[]ProxyObservation)

	// A vnet_integration block as defined below.
	vnetIntegration?: [...#VnetIntegrationObservation] @go(VnetIntegration,[]VnetIntegrationObservation)
}

#IntegrationRuntimeAzureSSISParameters: {
	// A catalog_info block as defined below.
	// +kubebuilder:validation:Optional
	catalogInfo?: [...#CatalogInfoParameters] @go(CatalogInfo,[]CatalogInfoParameters)

	// A custom_setup_script block as defined below.
	// +kubebuilder:validation:Optional
	customSetupScript?: [...#CustomSetupScriptParameters] @go(CustomSetupScript,[]CustomSetupScriptParameters)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// Integration runtime description.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The Azure-SSIS Integration Runtime edition. Valid values are Standard and Enterprise. Defaults to Standard.
	// +kubebuilder:validation:Optional
	edition?: null | string @go(Edition,*string)

	// An express_custom_setup block as defined below.
	// +kubebuilder:validation:Optional
	expressCustomSetup?: [...#ExpressCustomSetupParameters] @go(ExpressCustomSetup,[]ExpressCustomSetupParameters)

	// A express_vnet_integration block as defined below.
	// +kubebuilder:validation:Optional
	expressVnetIntegration?: [...#ExpressVnetIntegrationParameters] @go(ExpressVnetIntegration,[]ExpressVnetIntegrationParameters)

	// The type of the license that is used. Valid values are LicenseIncluded and BasePrice. Defaults to LicenseIncluded.
	// +kubebuilder:validation:Optional
	licenseType?: null | string @go(LicenseType,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Defines the maximum parallel executions per node. Defaults to 1. Max is 16.
	// +kubebuilder:validation:Optional
	maxParallelExecutionsPerNode?: null | float64 @go(MaxParallelExecutionsPerNode,*float64)

	// The size of the nodes on which the Azure-SSIS Integration Runtime runs. Valid values are: Standard_D2_v3, Standard_D4_v3, Standard_D8_v3, Standard_D16_v3, Standard_D32_v3, Standard_D64_v3, Standard_E2_v3, Standard_E4_v3, Standard_E8_v3, Standard_E16_v3, Standard_E32_v3, Standard_E64_v3, Standard_D1_v2, Standard_D2_v2, Standard_D3_v2, Standard_D4_v2, Standard_A4_v2 and Standard_A8_v2
	// +kubebuilder:validation:Optional
	nodeSize?: null | string @go(NodeSize,*string)

	// Number of nodes for the Azure-SSIS Integration Runtime. Max is 10. Defaults to 1.
	// +kubebuilder:validation:Optional
	numberOfNodes?: null | float64 @go(NumberOfNodes,*float64)

	// One or more package_store block as defined below.
	// +kubebuilder:validation:Optional
	packageStore?: [...#PackageStoreParameters] @go(PackageStore,[]PackageStoreParameters)

	// A proxy block as defined below.
	// +kubebuilder:validation:Optional
	proxy?: [...#ProxyParameters] @go(Proxy,[]ProxyParameters)

	// A vnet_integration block as defined below.
	// +kubebuilder:validation:Optional
	vnetIntegration?: [...#VnetIntegrationParameters] @go(VnetIntegration,[]VnetIntegrationParameters)
}

#KeyVaultLicenseInitParameters: {
	// Name of the Linked Service to associate with the packages.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// A map of parameters to associate with the Key Vault Data Factory Linked Service.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Specifies the secret name in Azure Key Vault.
	secretName?: null | string @go(SecretName,*string)

	// Specifies the secret version in Azure Key Vault.
	secretVersion?: null | string @go(SecretVersion,*string)
}

#KeyVaultLicenseObservation: {
	// Name of the Linked Service to associate with the packages.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// A map of parameters to associate with the Key Vault Data Factory Linked Service.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Specifies the secret name in Azure Key Vault.
	secretName?: null | string @go(SecretName,*string)

	// Specifies the secret version in Azure Key Vault.
	secretVersion?: null | string @go(SecretVersion,*string)
}

#KeyVaultLicenseParameters: {
	// Name of the Linked Service to associate with the packages.
	// +kubebuilder:validation:Optional
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// A map of parameters to associate with the Key Vault Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Specifies the secret name in Azure Key Vault.
	// +kubebuilder:validation:Optional
	secretName?: null | string @go(SecretName,*string)

	// Specifies the secret version in Azure Key Vault.
	// +kubebuilder:validation:Optional
	secretVersion?: null | string @go(SecretVersion,*string)
}

#KeyVaultPasswordInitParameters: {
	// Name of the Linked Service to associate with the packages.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// A map of parameters to associate with the Key Vault Data Factory Linked Service.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Specifies the secret name in Azure Key Vault.
	secretName?: null | string @go(SecretName,*string)

	// Specifies the secret version in Azure Key Vault.
	secretVersion?: null | string @go(SecretVersion,*string)
}

#KeyVaultPasswordObservation: {
	// Name of the Linked Service to associate with the packages.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// A map of parameters to associate with the Key Vault Data Factory Linked Service.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Specifies the secret name in Azure Key Vault.
	secretName?: null | string @go(SecretName,*string)

	// Specifies the secret version in Azure Key Vault.
	secretVersion?: null | string @go(SecretVersion,*string)
}

#KeyVaultPasswordParameters: {
	// Name of the Linked Service to associate with the packages.
	// +kubebuilder:validation:Optional
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// A map of parameters to associate with the Key Vault Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Specifies the secret name in Azure Key Vault.
	// +kubebuilder:validation:Optional
	secretName?: null | string @go(SecretName,*string)

	// Specifies the secret version in Azure Key Vault.
	// +kubebuilder:validation:Optional
	secretVersion?: null | string @go(SecretVersion,*string)
}

#PackageStoreInitParameters: {
	// Name of the Linked Service to associate with the packages.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Name of the package store.
	name?: null | string @go(Name,*string)
}

#PackageStoreObservation: {
	// Name of the Linked Service to associate with the packages.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Name of the package store.
	name?: null | string @go(Name,*string)
}

#PackageStoreParameters: {
	// Name of the Linked Service to associate with the packages.
	// +kubebuilder:validation:Optional
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Name of the package store.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#ProxyInitParameters: {
	// The path in the data store to be used when moving data between Self-Hosted and Azure-SSIS Integration Runtimes.
	path?: null | string @go(Path,*string)

	// Name of Self Hosted Integration Runtime as a proxy.
	selfHostedIntegrationRuntimeName?: null | string @go(SelfHostedIntegrationRuntimeName,*string)

	// Name of Azure Blob Storage linked service to reference the staging data store to be used when moving data between self-hosted and Azure-SSIS integration runtimes.
	stagingStorageLinkedServiceName?: null | string @go(StagingStorageLinkedServiceName,*string)
}

#ProxyObservation: {
	// The path in the data store to be used when moving data between Self-Hosted and Azure-SSIS Integration Runtimes.
	path?: null | string @go(Path,*string)

	// Name of Self Hosted Integration Runtime as a proxy.
	selfHostedIntegrationRuntimeName?: null | string @go(SelfHostedIntegrationRuntimeName,*string)

	// Name of Azure Blob Storage linked service to reference the staging data store to be used when moving data between self-hosted and Azure-SSIS integration runtimes.
	stagingStorageLinkedServiceName?: null | string @go(StagingStorageLinkedServiceName,*string)
}

#ProxyParameters: {
	// The path in the data store to be used when moving data between Self-Hosted and Azure-SSIS Integration Runtimes.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Name of Self Hosted Integration Runtime as a proxy.
	// +kubebuilder:validation:Optional
	selfHostedIntegrationRuntimeName?: null | string @go(SelfHostedIntegrationRuntimeName,*string)

	// Name of Azure Blob Storage linked service to reference the staging data store to be used when moving data between self-hosted and Azure-SSIS integration runtimes.
	// +kubebuilder:validation:Optional
	stagingStorageLinkedServiceName?: null | string @go(StagingStorageLinkedServiceName,*string)
}

#VnetIntegrationInitParameters: {
	// Static public IP addresses for the Azure-SSIS Integration Runtime. The size must be 2.
	publicIps?: [...null | string] @go(PublicIps,[]*string)

	// ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
	vnetId?: null | string @go(VnetID,*string)
}

#VnetIntegrationObservation: {
	// Static public IP addresses for the Azure-SSIS Integration Runtime. The size must be 2.
	publicIps?: [...null | string] @go(PublicIps,[]*string)

	// id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
	subnetId?: null | string @go(SubnetID,*string)

	// Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
	subnetName?: null | string @go(SubnetName,*string)

	// ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
	vnetId?: null | string @go(VnetID,*string)
}

#VnetIntegrationParameters: {
	// Static public IP addresses for the Azure-SSIS Integration Runtime. The size must be 2.
	// +kubebuilder:validation:Optional
	publicIps?: [...null | string] @go(PublicIps,[]*string)

	// id of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +kubebuilder:validation:Optional
	subnetName?: null | string @go(SubnetName,*string)

	// ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
	// +kubebuilder:validation:Optional
	vnetId?: null | string @go(VnetID,*string)
}

// IntegrationRuntimeAzureSSISSpec defines the desired state of IntegrationRuntimeAzureSSIS
#IntegrationRuntimeAzureSSISSpec: {
	forProvider: #IntegrationRuntimeAzureSSISParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #IntegrationRuntimeAzureSSISInitParameters @go(InitProvider)
}

// IntegrationRuntimeAzureSSISStatus defines the observed state of IntegrationRuntimeAzureSSIS.
#IntegrationRuntimeAzureSSISStatus: {
	atProvider?: #IntegrationRuntimeAzureSSISObservation @go(AtProvider)
}

// IntegrationRuntimeAzureSSIS is the Schema for the IntegrationRuntimeAzureSSISs API. Manages a Data Factory Azure-SSIS Integration Runtime.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure},path=integrationruntimeazuressis
#IntegrationRuntimeAzureSSIS: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeSize) || (has(self.initProvider) && has(self.initProvider.nodeSize))",message="spec.forProvider.nodeSize is a required parameter"
	spec:    #IntegrationRuntimeAzureSSISSpec   @go(Spec)
	status?: #IntegrationRuntimeAzureSSISStatus @go(Status)
}

// IntegrationRuntimeAzureSSISList contains a list of IntegrationRuntimeAzureSSISs
#IntegrationRuntimeAzureSSISList: {
	items: [...#IntegrationRuntimeAzureSSIS] @go(Items,[]IntegrationRuntimeAzureSSIS)
}
