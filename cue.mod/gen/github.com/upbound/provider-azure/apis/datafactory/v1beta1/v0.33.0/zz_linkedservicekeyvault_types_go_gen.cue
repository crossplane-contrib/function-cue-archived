// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/datafactory/v1beta1

package v1beta1

#LinkedServiceKeyVaultObservation: {
	// A map of additional properties to associate with the Data Factory Linked Service Key Vault.
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service Key Vault.
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service Key Vault.
	description?: null | string @go(Description,*string)

	// The ID of the Data Factory Key Vault Linked Service.
	id?: null | string @go(ID,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service Key Vault.
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// The ID the Azure Key Vault resource.
	keyVaultId?: null | string @go(KeyVaultID,*string)

	// A map of parameters to associate with the Data Factory Linked Service Key Vault.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)
}

#LinkedServiceKeyVaultParameters: {
	// A map of additional properties to associate with the Data Factory Linked Service Key Vault.
	// +kubebuilder:validation:Optional
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service Key Vault.
	// +kubebuilder:validation:Optional
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service Key Vault.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service Key Vault.
	// +kubebuilder:validation:Optional
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// The ID the Azure Key Vault resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/keyvault/v1beta1.Vault
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	keyVaultId?: null | string @go(KeyVaultID,*string)

	// A map of parameters to associate with the Data Factory Linked Service Key Vault.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)
}

// LinkedServiceKeyVaultSpec defines the desired state of LinkedServiceKeyVault
#LinkedServiceKeyVaultSpec: {
	forProvider: #LinkedServiceKeyVaultParameters @go(ForProvider)
}

// LinkedServiceKeyVaultStatus defines the observed state of LinkedServiceKeyVault.
#LinkedServiceKeyVaultStatus: {
	atProvider?: #LinkedServiceKeyVaultObservation @go(AtProvider)
}

// LinkedServiceKeyVault is the Schema for the LinkedServiceKeyVaults API. Manages a Linked Service (connection) between Key Vault and Azure Data Factory.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LinkedServiceKeyVault: {
	spec:    #LinkedServiceKeyVaultSpec   @go(Spec)
	status?: #LinkedServiceKeyVaultStatus @go(Status)
}

// LinkedServiceKeyVaultList contains a list of LinkedServiceKeyVaults
#LinkedServiceKeyVaultList: {
	items: [...#LinkedServiceKeyVault] @go(Items,[]LinkedServiceKeyVault)
}
