// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/datafactory/v1beta1

package v1beta1

#KeyVaultConnectionStringInitParameters: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores SQL Server connection string.
	secretName?: null | string @go(SecretName,*string)
}

#KeyVaultConnectionStringObservation: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores SQL Server connection string.
	secretName?: null | string @go(SecretName,*string)
}

#KeyVaultConnectionStringParameters: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores SQL Server connection string.
	// +kubebuilder:validation:Optional
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceAzureSQLDatabaseInitParameters: {
	// A map of additional properties to associate with the Data Factory Linked Service Azure SQL Database.
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service Azure SQL Database.
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The connection string in which to authenticate with Azure SQL Database. Exactly one of either connection_string or key_vault_connection_string is required.
	connectionString?: null | string @go(ConnectionString,*string)

	// The description for the Data Factory Linked Service Azure SQL Database.
	description?: null | string @go(Description,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service Azure SQL Database.
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// A key_vault_connection_string block as defined below. Use this argument to store Azure SQL Database connection string in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either connection_string or key_vault_connection_string is required.
	keyVaultConnectionString?: [...#KeyVaultConnectionStringInitParameters] @go(KeyVaultConnectionString,[]KeyVaultConnectionStringInitParameters)

	// A key_vault_password block as defined below. Use this argument to store SQL Server password in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	keyVaultPassword?: [...#LinkedServiceAzureSQLDatabaseKeyVaultPasswordInitParameters] @go(KeyVaultPassword,[]LinkedServiceAzureSQLDatabaseKeyVaultPasswordInitParameters)

	// A map of parameters to associate with the Data Factory Linked Service Azure SQL Database.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The service principal id in which to authenticate against the Azure SQL Database. Required if service_principal_key is set.
	servicePrincipalId?: null | string @go(ServicePrincipalID,*string)

	// The service principal key in which to authenticate against the Azure SQL Database. Required if service_principal_id is set.
	servicePrincipalKey?: null | string @go(ServicePrincipalKey,*string)

	// The tenant id or name in which to authenticate against the Azure SQL Database.
	tenantId?: null | string @go(TenantID,*string)

	// Whether to use the Data Factory's managed identity to authenticate against the Azure SQL Database. Incompatible with service_principal_id and service_principal_key
	useManagedIdentity?: null | bool @go(UseManagedIdentity,*bool)
}

#LinkedServiceAzureSQLDatabaseKeyVaultPasswordInitParameters: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores SQL Server password.
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceAzureSQLDatabaseKeyVaultPasswordObservation: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores SQL Server password.
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceAzureSQLDatabaseKeyVaultPasswordParameters: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores SQL Server password.
	// +kubebuilder:validation:Optional
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceAzureSQLDatabaseObservation: {
	// A map of additional properties to associate with the Data Factory Linked Service Azure SQL Database.
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service Azure SQL Database.
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The connection string in which to authenticate with Azure SQL Database. Exactly one of either connection_string or key_vault_connection_string is required.
	connectionString?: null | string @go(ConnectionString,*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service Azure SQL Database.
	description?: null | string @go(Description,*string)

	// The ID of the Data Factory Azure SQL Database Linked Service.
	id?: null | string @go(ID,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service Azure SQL Database.
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// A key_vault_connection_string block as defined below. Use this argument to store Azure SQL Database connection string in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either connection_string or key_vault_connection_string is required.
	keyVaultConnectionString?: [...#KeyVaultConnectionStringObservation] @go(KeyVaultConnectionString,[]KeyVaultConnectionStringObservation)

	// A key_vault_password block as defined below. Use this argument to store SQL Server password in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	keyVaultPassword?: [...#LinkedServiceAzureSQLDatabaseKeyVaultPasswordObservation] @go(KeyVaultPassword,[]LinkedServiceAzureSQLDatabaseKeyVaultPasswordObservation)

	// A map of parameters to associate with the Data Factory Linked Service Azure SQL Database.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The service principal id in which to authenticate against the Azure SQL Database. Required if service_principal_key is set.
	servicePrincipalId?: null | string @go(ServicePrincipalID,*string)

	// The service principal key in which to authenticate against the Azure SQL Database. Required if service_principal_id is set.
	servicePrincipalKey?: null | string @go(ServicePrincipalKey,*string)

	// The tenant id or name in which to authenticate against the Azure SQL Database.
	tenantId?: null | string @go(TenantID,*string)

	// Whether to use the Data Factory's managed identity to authenticate against the Azure SQL Database. Incompatible with service_principal_id and service_principal_key
	useManagedIdentity?: null | bool @go(UseManagedIdentity,*bool)
}

#LinkedServiceAzureSQLDatabaseParameters: {
	// A map of additional properties to associate with the Data Factory Linked Service Azure SQL Database.
	// +kubebuilder:validation:Optional
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service Azure SQL Database.
	// +kubebuilder:validation:Optional
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The connection string in which to authenticate with Azure SQL Database. Exactly one of either connection_string or key_vault_connection_string is required.
	// +kubebuilder:validation:Optional
	connectionString?: null | string @go(ConnectionString,*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service Azure SQL Database.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service Azure SQL Database.
	// +kubebuilder:validation:Optional
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// A key_vault_connection_string block as defined below. Use this argument to store Azure SQL Database connection string in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either connection_string or key_vault_connection_string is required.
	// +kubebuilder:validation:Optional
	keyVaultConnectionString?: [...#KeyVaultConnectionStringParameters] @go(KeyVaultConnectionString,[]KeyVaultConnectionStringParameters)

	// A key_vault_password block as defined below. Use this argument to store SQL Server password in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	keyVaultPassword?: [...#LinkedServiceAzureSQLDatabaseKeyVaultPasswordParameters] @go(KeyVaultPassword,[]LinkedServiceAzureSQLDatabaseKeyVaultPasswordParameters)

	// A map of parameters to associate with the Data Factory Linked Service Azure SQL Database.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The service principal id in which to authenticate against the Azure SQL Database. Required if service_principal_key is set.
	// +kubebuilder:validation:Optional
	servicePrincipalId?: null | string @go(ServicePrincipalID,*string)

	// The service principal key in which to authenticate against the Azure SQL Database. Required if service_principal_id is set.
	// +kubebuilder:validation:Optional
	servicePrincipalKey?: null | string @go(ServicePrincipalKey,*string)

	// The tenant id or name in which to authenticate against the Azure SQL Database.
	// +kubebuilder:validation:Optional
	tenantId?: null | string @go(TenantID,*string)

	// Whether to use the Data Factory's managed identity to authenticate against the Azure SQL Database. Incompatible with service_principal_id and service_principal_key
	// +kubebuilder:validation:Optional
	useManagedIdentity?: null | bool @go(UseManagedIdentity,*bool)
}

// LinkedServiceAzureSQLDatabaseSpec defines the desired state of LinkedServiceAzureSQLDatabase
#LinkedServiceAzureSQLDatabaseSpec: {
	forProvider: #LinkedServiceAzureSQLDatabaseParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LinkedServiceAzureSQLDatabaseInitParameters @go(InitProvider)
}

// LinkedServiceAzureSQLDatabaseStatus defines the observed state of LinkedServiceAzureSQLDatabase.
#LinkedServiceAzureSQLDatabaseStatus: {
	atProvider?: #LinkedServiceAzureSQLDatabaseObservation @go(AtProvider)
}

// LinkedServiceAzureSQLDatabase is the Schema for the LinkedServiceAzureSQLDatabases API. Manages a Linked Service (connection) between Azure SQL Database and Azure Data Factory.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LinkedServiceAzureSQLDatabase: {
	spec:    #LinkedServiceAzureSQLDatabaseSpec   @go(Spec)
	status?: #LinkedServiceAzureSQLDatabaseStatus @go(Status)
}

// LinkedServiceAzureSQLDatabaseList contains a list of LinkedServiceAzureSQLDatabases
#LinkedServiceAzureSQLDatabaseList: {
	items: [...#LinkedServiceAzureSQLDatabase] @go(Items,[]LinkedServiceAzureSQLDatabase)
}
