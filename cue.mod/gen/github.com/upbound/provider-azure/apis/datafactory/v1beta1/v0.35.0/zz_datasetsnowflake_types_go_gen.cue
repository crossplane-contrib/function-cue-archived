// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/datafactory/v1beta1

package v1beta1

#DataSetSnowflakeInitParameters: {
	// A map of additional properties to associate with the Data Factory Dataset Snowflake.
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Dataset Snowflake.
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The description for the Data Factory Dataset Snowflake.
	description?: null | string @go(Description,*string)

	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	folder?: null | string @go(Folder,*string)

	// A map of parameters to associate with the Data Factory Dataset Snowflake.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// A schema_column block as defined below.
	schemaColumn?: [...#DataSetSnowflakeSchemaColumnInitParameters] @go(SchemaColumn,[]DataSetSnowflakeSchemaColumnInitParameters)

	// The schema name of the Data Factory Dataset Snowflake.
	schemaName?: null | string @go(SchemaName,*string)

	// The table name of the Data Factory Dataset Snowflake.
	tableName?: null | string @go(TableName,*string)
}

#DataSetSnowflakeObservation: {
	// A map of additional properties to associate with the Data Factory Dataset Snowflake.
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Dataset Snowflake.
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Dataset Snowflake.
	description?: null | string @go(Description,*string)

	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	folder?: null | string @go(Folder,*string)

	// The ID of the Data Factory Snowflake Dataset.
	id?: null | string @go(ID,*string)

	// The Data Factory Linked Service name in which to associate the Dataset with.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// A map of parameters to associate with the Data Factory Dataset Snowflake.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// A schema_column block as defined below.
	schemaColumn?: [...#DataSetSnowflakeSchemaColumnObservation] @go(SchemaColumn,[]DataSetSnowflakeSchemaColumnObservation)

	// The schema name of the Data Factory Dataset Snowflake.
	schemaName?: null | string @go(SchemaName,*string)

	// The table name of the Data Factory Dataset Snowflake.
	tableName?: null | string @go(TableName,*string)
}

#DataSetSnowflakeParameters: {
	// A map of additional properties to associate with the Data Factory Dataset Snowflake.
	// +kubebuilder:validation:Optional
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Dataset Snowflake.
	// +kubebuilder:validation:Optional
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Dataset Snowflake.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	// +kubebuilder:validation:Optional
	folder?: null | string @go(Folder,*string)

	// The Data Factory Linked Service name in which to associate the Dataset with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.LinkedServiceSnowflake
	// +kubebuilder:validation:Optional
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// A map of parameters to associate with the Data Factory Dataset Snowflake.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// A schema_column block as defined below.
	// +kubebuilder:validation:Optional
	schemaColumn?: [...#DataSetSnowflakeSchemaColumnParameters] @go(SchemaColumn,[]DataSetSnowflakeSchemaColumnParameters)

	// The schema name of the Data Factory Dataset Snowflake.
	// +kubebuilder:validation:Optional
	schemaName?: null | string @go(SchemaName,*string)

	// The table name of the Data Factory Dataset Snowflake.
	// +kubebuilder:validation:Optional
	tableName?: null | string @go(TableName,*string)
}

#DataSetSnowflakeSchemaColumnInitParameters: {
	// The name of the column.
	name?: null | string @go(Name,*string)

	// The total number of digits allowed.
	precision?: null | float64 @go(Precision,*float64)

	// The number of digits allowed to the right of the decimal point.
	scale?: null | float64 @go(Scale,*float64)

	// Type of the column. Valid values are NUMBER, DECIMAL, NUMERIC, INT, INTEGER, BIGINT, SMALLINT, FLOAT“FLOAT4, FLOAT8, DOUBLE, DOUBLE PRECISION, REAL, VARCHAR, CHAR, CHARACTER, STRING, TEXT, BINARY, VARBINARY, BOOLEAN, DATE, DATETIME, TIME, TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, TIMESTAMP_TZ, VARIANT, OBJECT, ARRAY, GEOGRAPHY. Please note these values are case sensitive.
	type?: null | string @go(Type,*string)
}

#DataSetSnowflakeSchemaColumnObservation: {
	// The name of the column.
	name?: null | string @go(Name,*string)

	// The total number of digits allowed.
	precision?: null | float64 @go(Precision,*float64)

	// The number of digits allowed to the right of the decimal point.
	scale?: null | float64 @go(Scale,*float64)

	// Type of the column. Valid values are NUMBER, DECIMAL, NUMERIC, INT, INTEGER, BIGINT, SMALLINT, FLOAT“FLOAT4, FLOAT8, DOUBLE, DOUBLE PRECISION, REAL, VARCHAR, CHAR, CHARACTER, STRING, TEXT, BINARY, VARBINARY, BOOLEAN, DATE, DATETIME, TIME, TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, TIMESTAMP_TZ, VARIANT, OBJECT, ARRAY, GEOGRAPHY. Please note these values are case sensitive.
	type?: null | string @go(Type,*string)
}

#DataSetSnowflakeSchemaColumnParameters: {
	// The name of the column.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The total number of digits allowed.
	// +kubebuilder:validation:Optional
	precision?: null | float64 @go(Precision,*float64)

	// The number of digits allowed to the right of the decimal point.
	// +kubebuilder:validation:Optional
	scale?: null | float64 @go(Scale,*float64)

	// Type of the column. Valid values are NUMBER, DECIMAL, NUMERIC, INT, INTEGER, BIGINT, SMALLINT, FLOAT“FLOAT4, FLOAT8, DOUBLE, DOUBLE PRECISION, REAL, VARCHAR, CHAR, CHARACTER, STRING, TEXT, BINARY, VARBINARY, BOOLEAN, DATE, DATETIME, TIME, TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, TIMESTAMP_TZ, VARIANT, OBJECT, ARRAY, GEOGRAPHY. Please note these values are case sensitive.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// DataSetSnowflakeSpec defines the desired state of DataSetSnowflake
#DataSetSnowflakeSpec: {
	forProvider: #DataSetSnowflakeParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DataSetSnowflakeInitParameters @go(InitProvider)
}

// DataSetSnowflakeStatus defines the observed state of DataSetSnowflake.
#DataSetSnowflakeStatus: {
	atProvider?: #DataSetSnowflakeObservation @go(AtProvider)
}

// DataSetSnowflake is the Schema for the DataSetSnowflakes API. Manages a Snowflake Dataset inside a Azure Data Factory.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#DataSetSnowflake: {
	spec:    #DataSetSnowflakeSpec   @go(Spec)
	status?: #DataSetSnowflakeStatus @go(Status)
}

// DataSetSnowflakeList contains a list of DataSetSnowflakes
#DataSetSnowflakeList: {
	items: [...#DataSetSnowflake] @go(Items,[]DataSetSnowflake)
}
