// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/datafactory/v1beta1

package v1beta1

#InstancePoolObservation: {
	// Spark version of a the cluster.
	clusterVersion?: null | string @go(ClusterVersion,*string)

	// Identifier of the instance pool within the linked ADB instance.
	instancePoolId?: null | string @go(InstancePoolID,*string)

	// The max number of worker nodes. Set this value if you want to enable autoscaling between the min_number_of_workers and this value. Omit this value to use a fixed number of workers defined in the min_number_of_workers property.
	maxNumberOfWorkers?: null | float64 @go(MaxNumberOfWorkers,*float64)

	// The minimum number of worker nodes. Defaults to 1.
	minNumberOfWorkers?: null | float64 @go(MinNumberOfWorkers,*float64)
}

#InstancePoolParameters: {
	// Spark version of a the cluster.
	// +kubebuilder:validation:Required
	clusterVersion?: null | string @go(ClusterVersion,*string)

	// Identifier of the instance pool within the linked ADB instance.
	// +kubebuilder:validation:Required
	instancePoolId?: null | string @go(InstancePoolID,*string)

	// The max number of worker nodes. Set this value if you want to enable autoscaling between the min_number_of_workers and this value. Omit this value to use a fixed number of workers defined in the min_number_of_workers property.
	// +kubebuilder:validation:Optional
	maxNumberOfWorkers?: null | float64 @go(MaxNumberOfWorkers,*float64)

	// The minimum number of worker nodes. Defaults to 1.
	// +kubebuilder:validation:Optional
	minNumberOfWorkers?: null | float64 @go(MinNumberOfWorkers,*float64)
}

#LinkedServiceAzureDatabricksKeyVaultPasswordObservation: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores ADB access token.
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceAzureDatabricksKeyVaultPasswordParameters: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	// +kubebuilder:validation:Required
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores ADB access token.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceAzureDatabricksObservation: {
	// The domain URL of the databricks instance.
	adbDomain?: null | string @go(AdbDomain,*string)

	// A map of additional properties to associate with the Data Factory Linked Service.
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service.
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service.
	description?: null | string @go(Description,*string)

	// The cluster_id of an existing cluster within the linked ADB instance.
	existingClusterId?: null | string @go(ExistingClusterID,*string)

	// The ID of the Data Factory Linked Service.
	id?: null | string @go(ID,*string)

	// Leverages an instance pool within the linked ADB instance as defined by instance_pool block below.
	instancePool?: [...#InstancePoolObservation] @go(InstancePool,[]InstancePoolObservation)

	// The integration runtime reference to associate with the Data Factory Linked Service.
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// Authenticate to ADB via Azure Key Vault Linked Service as defined in the key_vault_password block below.
	keyVaultPassword?: [...#LinkedServiceAzureDatabricksKeyVaultPasswordObservation] @go(KeyVaultPassword,[]LinkedServiceAzureDatabricksKeyVaultPasswordObservation)

	// Authenticate to ADB via managed service identity.
	msiWorkSpaceResourceId?: null | string @go(MsiWorkSpaceResourceID,*string)

	// Creates new clusters within the linked ADB instance as defined in the new_cluster_config block below.
	newClusterConfig?: [...#NewClusterConfigObservation] @go(NewClusterConfig,[]NewClusterConfigObservation)

	// A map of parameters to associate with the Data Factory Linked Service.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)
}

#LinkedServiceAzureDatabricksParameters: {
	// The domain URL of the databricks instance.
	// +kubebuilder:validation:Optional
	adbDomain?: null | string @go(AdbDomain,*string)

	// A map of additional properties to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The cluster_id of an existing cluster within the linked ADB instance.
	// +kubebuilder:validation:Optional
	existingClusterId?: null | string @go(ExistingClusterID,*string)

	// Leverages an instance pool within the linked ADB instance as defined by instance_pool block below.
	// +kubebuilder:validation:Optional
	instancePool?: [...#InstancePoolParameters] @go(InstancePool,[]InstancePoolParameters)

	// The integration runtime reference to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// Authenticate to ADB via Azure Key Vault Linked Service as defined in the key_vault_password block below.
	// +kubebuilder:validation:Optional
	keyVaultPassword?: [...#LinkedServiceAzureDatabricksKeyVaultPasswordParameters] @go(KeyVaultPassword,[]LinkedServiceAzureDatabricksKeyVaultPasswordParameters)

	// Authenticate to ADB via managed service identity.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/databricks/v1beta1.Workspace
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	msiWorkSpaceResourceId?: null | string @go(MsiWorkSpaceResourceID,*string)

	// Creates new clusters within the linked ADB instance as defined in the new_cluster_config block below.
	// +kubebuilder:validation:Optional
	newClusterConfig?: [...#NewClusterConfigParameters] @go(NewClusterConfig,[]NewClusterConfigParameters)

	// A map of parameters to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)
}

#NewClusterConfigObservation: {
	// Spark version of a the cluster.
	clusterVersion?: null | string @go(ClusterVersion,*string)

	// Tags for the cluster resource.
	customTags?: {[string]: null | string} @go(CustomTags,map[string]*string)

	// Driver node type for the cluster.
	driverNodeType?: null | string @go(DriverNodeType,*string)

	// User defined initialization scripts for the cluster.
	initScripts?: [...null | string] @go(InitScripts,[]*string)

	// Location to deliver Spark driver, worker, and event logs.
	logDestination?: null | string @go(LogDestination,*string)

	// Specifies the maximum number of worker nodes. It should be between 1 and 25000.
	maxNumberOfWorkers?: null | float64 @go(MaxNumberOfWorkers,*float64)

	// Specifies the minimum number of worker nodes. It should be between 1 and 25000. It defaults to 1.
	minNumberOfWorkers?: null | float64 @go(MinNumberOfWorkers,*float64)

	// Node type for the new cluster.
	nodeType?: null | string @go(NodeType,*string)

	// User-specified Spark configuration variables key-value pairs.
	sparkConfig?: {[string]: null | string} @go(SparkConfig,map[string]*string)

	// User-specified Spark environment variables key-value pairs.
	sparkEnvironmentVariables?: {[string]: null | string} @go(SparkEnvironmentVariables,map[string]*string)
}

#NewClusterConfigParameters: {
	// Spark version of a the cluster.
	// +kubebuilder:validation:Required
	clusterVersion?: null | string @go(ClusterVersion,*string)

	// Tags for the cluster resource.
	// +kubebuilder:validation:Optional
	customTags?: {[string]: null | string} @go(CustomTags,map[string]*string)

	// Driver node type for the cluster.
	// +kubebuilder:validation:Optional
	driverNodeType?: null | string @go(DriverNodeType,*string)

	// User defined initialization scripts for the cluster.
	// +kubebuilder:validation:Optional
	initScripts?: [...null | string] @go(InitScripts,[]*string)

	// Location to deliver Spark driver, worker, and event logs.
	// +kubebuilder:validation:Optional
	logDestination?: null | string @go(LogDestination,*string)

	// Specifies the maximum number of worker nodes. It should be between 1 and 25000.
	// +kubebuilder:validation:Optional
	maxNumberOfWorkers?: null | float64 @go(MaxNumberOfWorkers,*float64)

	// Specifies the minimum number of worker nodes. It should be between 1 and 25000. It defaults to 1.
	// +kubebuilder:validation:Optional
	minNumberOfWorkers?: null | float64 @go(MinNumberOfWorkers,*float64)

	// Node type for the new cluster.
	// +kubebuilder:validation:Required
	nodeType?: null | string @go(NodeType,*string)

	// User-specified Spark configuration variables key-value pairs.
	// +kubebuilder:validation:Optional
	sparkConfig?: {[string]: null | string} @go(SparkConfig,map[string]*string)

	// User-specified Spark environment variables key-value pairs.
	// +kubebuilder:validation:Optional
	sparkEnvironmentVariables?: {[string]: null | string} @go(SparkEnvironmentVariables,map[string]*string)
}

// LinkedServiceAzureDatabricksSpec defines the desired state of LinkedServiceAzureDatabricks
#LinkedServiceAzureDatabricksSpec: {
	forProvider: #LinkedServiceAzureDatabricksParameters @go(ForProvider)
}

// LinkedServiceAzureDatabricksStatus defines the observed state of LinkedServiceAzureDatabricks.
#LinkedServiceAzureDatabricksStatus: {
	atProvider?: #LinkedServiceAzureDatabricksObservation @go(AtProvider)
}

// LinkedServiceAzureDatabricks is the Schema for the LinkedServiceAzureDatabrickss API. Manages a Linked Service (connection) between Azure Databricks and Azure Data Factory.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LinkedServiceAzureDatabricks: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.adbDomain)",message="adbDomain is a required parameter"
	spec:    #LinkedServiceAzureDatabricksSpec   @go(Spec)
	status?: #LinkedServiceAzureDatabricksStatus @go(Status)
}

// LinkedServiceAzureDatabricksList contains a list of LinkedServiceAzureDatabrickss
#LinkedServiceAzureDatabricksList: {
	items: [...#LinkedServiceAzureDatabricks] @go(Items,[]LinkedServiceAzureDatabricks)
}
