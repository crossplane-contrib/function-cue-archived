// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/datafactory/v1beta1

package v1beta1

#DataSetParquetAzureBlobStorageLocationObservation: {
	// The container on the Azure Blob Storage Account hosting the file.
	container?: null | string @go(Container,*string)

	// Is the container using dynamic expression, function or system variables? Defaults to false.
	dynamicContainerEnabled?: null | bool @go(DynamicContainerEnabled,*bool)

	// Is the filename using dynamic expression, function or system variables? Defaults to false.
	dynamicFilenameEnabled?: null | bool @go(DynamicFilenameEnabled,*bool)

	// Is the path using dynamic expression, function or system variables? Defaults to false.
	dynamicPathEnabled?: null | bool @go(DynamicPathEnabled,*bool)

	// The filename of the file on the web server.
	filename?: null | string @go(Filename,*string)

	// The folder path to the file on the web server.
	path?: null | string @go(Path,*string)
}

#DataSetParquetAzureBlobStorageLocationParameters: {
	// The container on the Azure Blob Storage Account hosting the file.
	// +kubebuilder:validation:Required
	container?: null | string @go(Container,*string)

	// Is the container using dynamic expression, function or system variables? Defaults to false.
	// +kubebuilder:validation:Optional
	dynamicContainerEnabled?: null | bool @go(DynamicContainerEnabled,*bool)

	// Is the filename using dynamic expression, function or system variables? Defaults to false.
	// +kubebuilder:validation:Optional
	dynamicFilenameEnabled?: null | bool @go(DynamicFilenameEnabled,*bool)

	// Is the path using dynamic expression, function or system variables? Defaults to false.
	// +kubebuilder:validation:Optional
	dynamicPathEnabled?: null | bool @go(DynamicPathEnabled,*bool)

	// The filename of the file on the web server.
	// +kubebuilder:validation:Optional
	filename?: null | string @go(Filename,*string)

	// The folder path to the file on the web server.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#DataSetParquetHTTPServerLocationObservation: {
	// Is the filename using dynamic expression, function or system variables? Defaults to false.
	dynamicFilenameEnabled?: null | bool @go(DynamicFilenameEnabled,*bool)

	// Is the path using dynamic expression, function or system variables? Defaults to false.
	dynamicPathEnabled?: null | bool @go(DynamicPathEnabled,*bool)

	// The filename of the file on the web server.
	filename?: null | string @go(Filename,*string)

	// The folder path to the file on the web server.
	path?: null | string @go(Path,*string)

	// The base URL to the web server hosting the file.
	relativeUrl?: null | string @go(RelativeURL,*string)
}

#DataSetParquetHTTPServerLocationParameters: {
	// Is the filename using dynamic expression, function or system variables? Defaults to false.
	// +kubebuilder:validation:Optional
	dynamicFilenameEnabled?: null | bool @go(DynamicFilenameEnabled,*bool)

	// Is the path using dynamic expression, function or system variables? Defaults to false.
	// +kubebuilder:validation:Optional
	dynamicPathEnabled?: null | bool @go(DynamicPathEnabled,*bool)

	// The filename of the file on the web server.
	// +kubebuilder:validation:Required
	filename?: null | string @go(Filename,*string)

	// The folder path to the file on the web server.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The base URL to the web server hosting the file.
	// +kubebuilder:validation:Required
	relativeUrl?: null | string @go(RelativeURL,*string)
}

#DataSetParquetObservation: {
	// A map of additional properties to associate with the Data Factory Dataset.
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Dataset.
	annotations?: [...null | string] @go(Annotations,[]*string)

	// A azure_blob_storage_location block as defined below.
	azureBlobStorageLocation?: [...#DataSetParquetAzureBlobStorageLocationObservation] @go(AzureBlobStorageLocation,[]DataSetParquetAzureBlobStorageLocationObservation)

	// The compression codec used to read/write text files. Valid values are bzip2, gzip, deflate, ZipDeflate, TarGzip, Tar, snappy, or lz4. Please note these values are case-sensitive.
	compressionCodec?: null | string @go(CompressionCodec,*string)

	// Specifies the compression level. Possible values are Optimal and Fastest,
	compressionLevel?: null | string @go(CompressionLevel,*string)

	// The Data Factory ID in which to associate the Dataset with. Changing this forces a new resource.
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Dataset.
	description?: null | string @go(Description,*string)

	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	folder?: null | string @go(Folder,*string)

	// A http_server_location block as defined below.
	httpServerLocation?: [...#DataSetParquetHTTPServerLocationObservation] @go(HTTPServerLocation,[]DataSetParquetHTTPServerLocationObservation)

	// The ID of the Data Factory Dataset.
	id?: null | string @go(ID,*string)

	// The Data Factory Linked Service name in which to associate the Dataset with.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// A map of parameters to associate with the Data Factory Dataset.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// A schema_column block as defined below.
	schemaColumn?: [...#DataSetParquetSchemaColumnObservation] @go(SchemaColumn,[]DataSetParquetSchemaColumnObservation)
}

#DataSetParquetParameters: {
	// A map of additional properties to associate with the Data Factory Dataset.
	// +kubebuilder:validation:Optional
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Dataset.
	// +kubebuilder:validation:Optional
	annotations?: [...null | string] @go(Annotations,[]*string)

	// A azure_blob_storage_location block as defined below.
	// +kubebuilder:validation:Optional
	azureBlobStorageLocation?: [...#DataSetParquetAzureBlobStorageLocationParameters] @go(AzureBlobStorageLocation,[]DataSetParquetAzureBlobStorageLocationParameters)

	// The compression codec used to read/write text files. Valid values are bzip2, gzip, deflate, ZipDeflate, TarGzip, Tar, snappy, or lz4. Please note these values are case-sensitive.
	// +kubebuilder:validation:Optional
	compressionCodec?: null | string @go(CompressionCodec,*string)

	// Specifies the compression level. Possible values are Optimal and Fastest,
	// +kubebuilder:validation:Optional
	compressionLevel?: null | string @go(CompressionLevel,*string)

	// The Data Factory ID in which to associate the Dataset with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Dataset.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	// +kubebuilder:validation:Optional
	folder?: null | string @go(Folder,*string)

	// A http_server_location block as defined below.
	// +kubebuilder:validation:Optional
	httpServerLocation?: [...#DataSetParquetHTTPServerLocationParameters] @go(HTTPServerLocation,[]DataSetParquetHTTPServerLocationParameters)

	// The Data Factory Linked Service name in which to associate the Dataset with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.LinkedServiceWeb
	// +kubebuilder:validation:Optional
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// A map of parameters to associate with the Data Factory Dataset.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// A schema_column block as defined below.
	// +kubebuilder:validation:Optional
	schemaColumn?: [...#DataSetParquetSchemaColumnParameters] @go(SchemaColumn,[]DataSetParquetSchemaColumnParameters)
}

#DataSetParquetSchemaColumnObservation: {
	// The description of the column.
	description?: null | string @go(Description,*string)

	// The name of the column.
	name?: null | string @go(Name,*string)

	// Type of the column. Valid values are Byte, Byte[], Boolean, Date, DateTime,DateTimeOffset, Decimal, Double, Guid, Int16, Int32, Int64, Single, String, TimeSpan. Please note these values are case sensitive.
	type?: null | string @go(Type,*string)
}

#DataSetParquetSchemaColumnParameters: {
	// The description of the column.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The name of the column.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Type of the column. Valid values are Byte, Byte[], Boolean, Date, DateTime,DateTimeOffset, Decimal, Double, Guid, Int16, Int32, Int64, Single, String, TimeSpan. Please note these values are case sensitive.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// DataSetParquetSpec defines the desired state of DataSetParquet
#DataSetParquetSpec: {
	forProvider: #DataSetParquetParameters @go(ForProvider)
}

// DataSetParquetStatus defines the observed state of DataSetParquet.
#DataSetParquetStatus: {
	atProvider?: #DataSetParquetObservation @go(AtProvider)
}

// DataSetParquet is the Schema for the DataSetParquets API. Manages an Azure Parquet Dataset inside an Azure Data Factory.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#DataSetParquet: {
	spec:    #DataSetParquetSpec   @go(Spec)
	status?: #DataSetParquetStatus @go(Status)
}

// DataSetParquetList contains a list of DataSetParquets
#DataSetParquetList: {
	items: [...#DataSetParquet] @go(Items,[]DataSetParquet)
}
