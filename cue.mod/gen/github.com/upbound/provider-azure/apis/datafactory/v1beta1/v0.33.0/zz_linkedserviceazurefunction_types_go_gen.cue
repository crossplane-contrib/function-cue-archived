// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/datafactory/v1beta1

package v1beta1

#KeyVaultKeyObservation: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores the system key of the Azure Function.
	secretName?: null | string @go(SecretName,*string)
}

#KeyVaultKeyParameters: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	// +kubebuilder:validation:Required
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores the system key of the Azure Function.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceAzureFunctionObservation: {
	// A map of additional properties to associate with the Data Factory Linked Service.
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service.
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service.
	description?: null | string @go(Description,*string)

	// The ID of the Data Factory Linked Service.
	id?: null | string @go(ID,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service.
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// A key_vault_key block as defined below. Use this Argument to store the system key of the Azure Function in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either key or key_vault_key is required.
	keyVaultKey?: [...#KeyVaultKeyObservation] @go(KeyVaultKey,[]KeyVaultKeyObservation)

	// A map of parameters to associate with the Data Factory Linked Service.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The url of the Azure Function.
	url?: null | string @go(URL,*string)
}

#LinkedServiceAzureFunctionParameters: {
	// A map of additional properties to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// A key_vault_key block as defined below. Use this Argument to store the system key of the Azure Function in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either key or key_vault_key is required.
	// +kubebuilder:validation:Optional
	keyVaultKey?: [...#KeyVaultKeyParameters] @go(KeyVaultKey,[]KeyVaultKeyParameters)

	// A map of parameters to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The url of the Azure Function.
	// +kubebuilder:validation:Optional
	url?: null | string @go(URL,*string)
}

// LinkedServiceAzureFunctionSpec defines the desired state of LinkedServiceAzureFunction
#LinkedServiceAzureFunctionSpec: {
	forProvider: #LinkedServiceAzureFunctionParameters @go(ForProvider)
}

// LinkedServiceAzureFunctionStatus defines the observed state of LinkedServiceAzureFunction.
#LinkedServiceAzureFunctionStatus: {
	atProvider?: #LinkedServiceAzureFunctionObservation @go(AtProvider)
}

// LinkedServiceAzureFunction is the Schema for the LinkedServiceAzureFunctions API. Manages a Linked Service (connection) between an Azure Function Account and Azure Data Factory.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LinkedServiceAzureFunction: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.url)",message="url is a required parameter"
	spec:    #LinkedServiceAzureFunctionSpec   @go(Spec)
	status?: #LinkedServiceAzureFunctionStatus @go(Status)
}

// LinkedServiceAzureFunctionList contains a list of LinkedServiceAzureFunctions
#LinkedServiceAzureFunctionList: {
	items: [...#LinkedServiceAzureFunction] @go(Items,[]LinkedServiceAzureFunction)
}
