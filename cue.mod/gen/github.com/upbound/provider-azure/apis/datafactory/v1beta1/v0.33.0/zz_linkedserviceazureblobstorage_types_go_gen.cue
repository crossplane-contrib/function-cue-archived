// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/datafactory/v1beta1

package v1beta1

#KeyVaultSASTokenObservation: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores the SAS token.
	secretName?: null | string @go(SecretName,*string)
}

#KeyVaultSASTokenParameters: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.LinkedServiceKeyVault
	// +kubebuilder:validation:Optional
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores the SAS token.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#LinkedServiceAzureBlobStorageObservation: {
	// A map of additional properties to associate with the Data Factory Linked Service.
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service.
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The connection string sent insecurely. Conflicts with connection_string, sas_uri and service_endpoint.
	connectionStringInsecure?: null | string @go(ConnectionStringInsecure,*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service.
	description?: null | string @go(Description,*string)

	// The ID of the Data Factory Linked Service.
	id?: null | string @go(ID,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service.
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// A key_vault_sas_token block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A sas_uri is required.
	keyVaultSasToken?: [...#KeyVaultSASTokenObservation] @go(KeyVaultSASToken,[]KeyVaultSASTokenObservation)

	// A map of parameters to associate with the Data Factory Linked Service.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The service principal id in which to authenticate against the Azure Blob Storage account.
	servicePrincipalId?: null | string @go(ServicePrincipalID,*string)

	// The service principal key in which to authenticate against the AAzure Blob Storage account.
	servicePrincipalKey?: null | string @go(ServicePrincipalKey,*string)

	// A service_principal_linked_key_vault_key block as defined below. Use this argument to store Service Principal key in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	servicePrincipalLinkedKeyVaultKey?: [...#ServicePrincipalLinkedKeyVaultKeyObservation] @go(ServicePrincipalLinkedKeyVaultKey,[]ServicePrincipalLinkedKeyVaultKeyObservation)

	// Specify the kind of the storage account. Allowed values are Storage, StorageV2, BlobStorage and BlockBlobStorage.
	storageKind?: null | string @go(StorageKind,*string)

	// The tenant id or name in which to authenticate against the Azure Blob Storage account.
	tenantId?: null | string @go(TenantID,*string)

	// Whether to use the Data Factory's managed identity to authenticate against the Azure Blob Storage account. Incompatible with service_principal_id and service_principal_key.
	useManagedIdentity?: null | bool @go(UseManagedIdentity,*bool)
}

#LinkedServiceAzureBlobStorageParameters: {
	// A map of additional properties to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	additionalProperties?: {[string]: null | string} @go(AdditionalProperties,map[string]*string)

	// List of tags that can be used for describing the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	annotations?: [...null | string] @go(Annotations,[]*string)

	// The connection string sent insecurely. Conflicts with connection_string, sas_uri and service_endpoint.
	// +kubebuilder:validation:Optional
	connectionStringInsecure?: null | string @go(ConnectionStringInsecure,*string)

	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.Factory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataFactoryId?: null | string @go(DataFactoryID,*string)

	// The description for the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The integration runtime reference to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	integrationRuntimeName?: null | string @go(IntegrationRuntimeName,*string)

	// A key_vault_sas_token block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A sas_uri is required.
	// +kubebuilder:validation:Optional
	keyVaultSasToken?: [...#KeyVaultSASTokenParameters] @go(KeyVaultSASToken,[]KeyVaultSASTokenParameters)

	// A map of parameters to associate with the Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The service principal id in which to authenticate against the Azure Blob Storage account.
	// +kubebuilder:validation:Optional
	servicePrincipalId?: null | string @go(ServicePrincipalID,*string)

	// The service principal key in which to authenticate against the AAzure Blob Storage account.
	// +kubebuilder:validation:Optional
	servicePrincipalKey?: null | string @go(ServicePrincipalKey,*string)

	// A service_principal_linked_key_vault_key block as defined below. Use this argument to store Service Principal key in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	// +kubebuilder:validation:Optional
	servicePrincipalLinkedKeyVaultKey?: [...#ServicePrincipalLinkedKeyVaultKeyParameters] @go(ServicePrincipalLinkedKeyVaultKey,[]ServicePrincipalLinkedKeyVaultKeyParameters)

	// Specify the kind of the storage account. Allowed values are Storage, StorageV2, BlobStorage and BlockBlobStorage.
	// +kubebuilder:validation:Optional
	storageKind?: null | string @go(StorageKind,*string)

	// The tenant id or name in which to authenticate against the Azure Blob Storage account.
	// +kubebuilder:validation:Optional
	tenantId?: null | string @go(TenantID,*string)

	// Whether to use the Data Factory's managed identity to authenticate against the Azure Blob Storage account. Incompatible with service_principal_id and service_principal_key.
	// +kubebuilder:validation:Optional
	useManagedIdentity?: null | bool @go(UseManagedIdentity,*bool)
}

#ServicePrincipalLinkedKeyVaultKeyObservation: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores the Service Principal key.
	secretName?: null | string @go(SecretName,*string)
}

#ServicePrincipalLinkedKeyVaultKeyParameters: {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/datafactory/v1beta1.LinkedServiceKeyVault
	// +kubebuilder:validation:Optional
	linkedServiceName?: null | string @go(LinkedServiceName,*string)

	// Specifies the secret name in Azure Key Vault that stores the Service Principal key.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

// LinkedServiceAzureBlobStorageSpec defines the desired state of LinkedServiceAzureBlobStorage
#LinkedServiceAzureBlobStorageSpec: {
	forProvider: #LinkedServiceAzureBlobStorageParameters @go(ForProvider)
}

// LinkedServiceAzureBlobStorageStatus defines the observed state of LinkedServiceAzureBlobStorage.
#LinkedServiceAzureBlobStorageStatus: {
	atProvider?: #LinkedServiceAzureBlobStorageObservation @go(AtProvider)
}

// LinkedServiceAzureBlobStorage is the Schema for the LinkedServiceAzureBlobStorages API. Manages a Linked Service (connection) between an Azure Blob Storage Account and Azure Data Factory.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LinkedServiceAzureBlobStorage: {
	spec:    #LinkedServiceAzureBlobStorageSpec   @go(Spec)
	status?: #LinkedServiceAzureBlobStorageStatus @go(Status)
}

// LinkedServiceAzureBlobStorageList contains a list of LinkedServiceAzureBlobStorages
#LinkedServiceAzureBlobStorageList: {
	items: [...#LinkedServiceAzureBlobStorage] @go(Items,[]LinkedServiceAzureBlobStorage)
}
