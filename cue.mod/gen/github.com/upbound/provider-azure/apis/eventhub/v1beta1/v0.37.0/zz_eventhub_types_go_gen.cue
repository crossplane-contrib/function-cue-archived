// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/eventhub/v1beta1

package v1beta1

#CaptureDescriptionInitParameters: {
	// A destination block as defined below.
	destination?: [...#DestinationInitParameters] @go(Destination,[]DestinationInitParameters)

	// Specifies if the Capture Description is Enabled.
	enabled?: null | bool @go(Enabled,*bool)

	// Specifies the Encoding used for the Capture Description. Possible values are Avro and AvroDeflate.
	encoding?: null | string @go(Encoding,*string)

	// Specifies the time interval in seconds at which the capture will happen. Values can be between 60 and 900 seconds. Defaults to 300 seconds.
	intervalInSeconds?: null | float64 @go(IntervalInSeconds,*float64)

	// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between 10485760 and 524288000 bytes. Defaults to 314572800 bytes.
	sizeLimitInBytes?: null | float64 @go(SizeLimitInBytes,*float64)

	// Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to false.
	skipEmptyArchives?: null | bool @go(SkipEmptyArchives,*bool)
}

#CaptureDescriptionObservation: {
	// A destination block as defined below.
	destination?: [...#DestinationObservation] @go(Destination,[]DestinationObservation)

	// Specifies if the Capture Description is Enabled.
	enabled?: null | bool @go(Enabled,*bool)

	// Specifies the Encoding used for the Capture Description. Possible values are Avro and AvroDeflate.
	encoding?: null | string @go(Encoding,*string)

	// Specifies the time interval in seconds at which the capture will happen. Values can be between 60 and 900 seconds. Defaults to 300 seconds.
	intervalInSeconds?: null | float64 @go(IntervalInSeconds,*float64)

	// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between 10485760 and 524288000 bytes. Defaults to 314572800 bytes.
	sizeLimitInBytes?: null | float64 @go(SizeLimitInBytes,*float64)

	// Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to false.
	skipEmptyArchives?: null | bool @go(SkipEmptyArchives,*bool)
}

#CaptureDescriptionParameters: {
	// A destination block as defined below.
	// +kubebuilder:validation:Optional
	destination: [...#DestinationParameters] @go(Destination,[]DestinationParameters)

	// Specifies if the Capture Description is Enabled.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Specifies the Encoding used for the Capture Description. Possible values are Avro and AvroDeflate.
	// +kubebuilder:validation:Optional
	encoding?: null | string @go(Encoding,*string)

	// Specifies the time interval in seconds at which the capture will happen. Values can be between 60 and 900 seconds. Defaults to 300 seconds.
	// +kubebuilder:validation:Optional
	intervalInSeconds?: null | float64 @go(IntervalInSeconds,*float64)

	// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between 10485760 and 524288000 bytes. Defaults to 314572800 bytes.
	// +kubebuilder:validation:Optional
	sizeLimitInBytes?: null | float64 @go(SizeLimitInBytes,*float64)

	// Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to false.
	// +kubebuilder:validation:Optional
	skipEmptyArchives?: null | bool @go(SkipEmptyArchives,*bool)
}

#DestinationInitParameters: {
	// The Blob naming convention for archiving. e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
	archiveNameFormat?: null | string @go(ArchiveNameFormat,*string)

	// The name of the Container within the Blob Storage Account where messages should be archived.
	blobContainerName?: null | string @go(BlobContainerName,*string)

	// Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The ID of the Blob Storage Account where messages should be archived.
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

#DestinationObservation: {
	// The Blob naming convention for archiving. e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
	archiveNameFormat?: null | string @go(ArchiveNameFormat,*string)

	// The name of the Container within the Blob Storage Account where messages should be archived.
	blobContainerName?: null | string @go(BlobContainerName,*string)

	// Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The ID of the Blob Storage Account where messages should be archived.
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

#DestinationParameters: {
	// The Blob naming convention for archiving. e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
	// +kubebuilder:validation:Optional
	archiveNameFormat?: null | string @go(ArchiveNameFormat,*string)

	// The name of the Container within the Blob Storage Account where messages should be archived.
	// +kubebuilder:validation:Optional
	blobContainerName?: null | string @go(BlobContainerName,*string)

	// Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the Blob Storage Account where messages should be archived.
	// +kubebuilder:validation:Optional
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

#EventHubInitParameters: {
	// A capture_description block as defined below.
	captureDescription?: [...#CaptureDescriptionInitParameters] @go(CaptureDescription,[]CaptureDescriptionInitParameters)

	// Specifies the number of days to retain the events for this Event Hub.
	messageRetention?: null | float64 @go(MessageRetention,*float64)

	// Specifies the current number of shards on the Event Hub. Changing this will force-recreate the resource.
	partitionCount?: null | float64 @go(PartitionCount,*float64)

	// Specifies the status of the Event Hub resource. Possible values are Active, Disabled and SendDisabled. Defaults to Active.
	status?: null | string @go(Status,*string)
}

#EventHubObservation: {
	// A capture_description block as defined below.
	captureDescription?: [...#CaptureDescriptionObservation] @go(CaptureDescription,[]CaptureDescriptionObservation)

	// The ID of the EventHub.
	id?: null | string @go(ID,*string)

	// Specifies the number of days to retain the events for this Event Hub.
	messageRetention?: null | float64 @go(MessageRetention,*float64)

	// Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
	namespaceName?: null | string @go(NamespaceName,*string)

	// Specifies the current number of shards on the Event Hub. Changing this will force-recreate the resource.
	partitionCount?: null | float64 @go(PartitionCount,*float64)

	// The identifiers for partitions created for Event Hubs.
	partitionIds?: [...null | string] @go(PartitionIds,[]*string)

	// The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Specifies the status of the Event Hub resource. Possible values are Active, Disabled and SendDisabled. Defaults to Active.
	status?: null | string @go(Status,*string)
}

#EventHubParameters: {
	// A capture_description block as defined below.
	// +kubebuilder:validation:Optional
	captureDescription?: [...#CaptureDescriptionParameters] @go(CaptureDescription,[]CaptureDescriptionParameters)

	// Specifies the number of days to retain the events for this Event Hub.
	// +kubebuilder:validation:Optional
	messageRetention?: null | float64 @go(MessageRetention,*float64)

	// Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=EventHubNamespace
	// +kubebuilder:validation:Optional
	namespaceName?: null | string @go(NamespaceName,*string)

	// Specifies the current number of shards on the Event Hub. Changing this will force-recreate the resource.
	// +kubebuilder:validation:Optional
	partitionCount?: null | float64 @go(PartitionCount,*float64)

	// The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Specifies the status of the Event Hub resource. Possible values are Active, Disabled and SendDisabled. Defaults to Active.
	// +kubebuilder:validation:Optional
	status?: null | string @go(Status,*string)
}

// EventHubSpec defines the desired state of EventHub
#EventHubSpec: {
	forProvider: #EventHubParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EventHubInitParameters @go(InitProvider)
}

// EventHubStatus defines the observed state of EventHub.
#EventHubStatus: {
	atProvider?: #EventHubObservation @go(AtProvider)
}

// EventHub is the Schema for the EventHubs API. Manages a Event Hubs as a nested resource within an Event Hubs namespace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#EventHub: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.messageRetention) || (has(self.initProvider) && has(self.initProvider.messageRetention))",message="spec.forProvider.messageRetention is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.partitionCount) || (has(self.initProvider) && has(self.initProvider.partitionCount))",message="spec.forProvider.partitionCount is a required parameter"
	spec:    #EventHubSpec   @go(Spec)
	status?: #EventHubStatus @go(Status)
}

// EventHubList contains a list of EventHubs
#EventHubList: {
	items: [...#EventHub] @go(Items,[]EventHub)
}
