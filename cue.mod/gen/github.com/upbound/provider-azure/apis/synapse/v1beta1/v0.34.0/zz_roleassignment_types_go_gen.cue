// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/synapse/v1beta1

package v1beta1

#RoleAssignmentObservation: {
	// The Synapse Role Assignment ID.
	id?: null | string @go(ID,*string)

	// The ID of the Principal (User, Group or Service Principal) to assign the Synapse Role Definition to. Changing this forces a new resource to be created.
	principalId?: null | string @go(PrincipalID,*string)

	// The Role Name of the Synapse Built-In Role. Changing this forces a new resource to be created.
	roleName?: null | string @go(RoleName,*string)

	// The Synapse Spark Pool which the Synapse Role Assignment applies to. Changing this forces a new resource to be created.
	synapseSparkPoolId?: null | string @go(SynapseSparkPoolID,*string)

	// The Synapse Workspace which the Synapse Role Assignment applies to. Changing this forces a new resource to be created.
	synapseWorkspaceId?: null | string @go(SynapseWorkspaceID,*string)
}

#RoleAssignmentParameters: {
	// The ID of the Principal (User, Group or Service Principal) to assign the Synapse Role Definition to. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	principalId?: null | string @go(PrincipalID,*string)

	// The Role Name of the Synapse Built-In Role. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	roleName?: null | string @go(RoleName,*string)

	// The Synapse Spark Pool which the Synapse Role Assignment applies to. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	synapseSparkPoolId?: null | string @go(SynapseSparkPoolID,*string)

	// The Synapse Workspace which the Synapse Role Assignment applies to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/synapse/v1beta1.Workspace
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	synapseWorkspaceId?: null | string @go(SynapseWorkspaceID,*string)
}

// RoleAssignmentSpec defines the desired state of RoleAssignment
#RoleAssignmentSpec: {
	forProvider: #RoleAssignmentParameters @go(ForProvider)
}

// RoleAssignmentStatus defines the observed state of RoleAssignment.
#RoleAssignmentStatus: {
	atProvider?: #RoleAssignmentObservation @go(AtProvider)
}

// RoleAssignment is the Schema for the RoleAssignments API. Manages a Synapse Role Assignment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#RoleAssignment: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.principalId)",message="principalId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.roleName)",message="roleName is a required parameter"
	spec:    #RoleAssignmentSpec   @go(Spec)
	status?: #RoleAssignmentStatus @go(Status)
}

// RoleAssignmentList contains a list of RoleAssignments
#RoleAssignmentList: {
	items: [...#RoleAssignment] @go(Items,[]RoleAssignment)
}
