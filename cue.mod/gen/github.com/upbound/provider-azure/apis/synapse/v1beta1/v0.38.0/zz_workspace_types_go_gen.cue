// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/synapse/v1beta1

package v1beta1

#AADAdminInitParameters: {
	// The login name of the Azure AD Administrator of this Synapse Workspace.
	login?: null | string @go(Login,*string)

	// The object id of the Azure AD Administrator of this Synapse Workspace.
	objectId?: null | string @go(ObjectID,*string)

	// The tenant id of the Azure AD Administrator of this Synapse Workspace.
	tenantId?: null | string @go(TenantID,*string)
}

#AADAdminObservation: {
	// The login name of the Azure AD Administrator of this Synapse Workspace.
	login?: null | string @go(Login,*string)

	// The object id of the Azure AD Administrator of this Synapse Workspace.
	objectId?: null | string @go(ObjectID,*string)

	// The tenant id of the Azure AD Administrator of this Synapse Workspace.
	tenantId?: null | string @go(TenantID,*string)
}

#AADAdminParameters: {
	// The login name of the Azure AD Administrator of this Synapse Workspace.
	// +kubebuilder:validation:Optional
	login?: null | string @go(Login,*string)

	// The object id of the Azure AD Administrator of this Synapse Workspace.
	// +kubebuilder:validation:Optional
	objectId?: null | string @go(ObjectID,*string)

	// The tenant id of the Azure AD Administrator of this Synapse Workspace.
	// +kubebuilder:validation:Optional
	tenantId?: null | string @go(TenantID,*string)
}

#AzureDevopsRepoInitParameters: {
	// Specifies the Azure DevOps account name.
	accountName?: null | string @go(AccountName,*string)

	// Specifies the collaboration branch of the repository to get code from.
	branchName?: null | string @go(BranchName,*string)

	// The last commit ID.
	lastCommitId?: null | string @go(LastCommitID,*string)

	// Specifies the name of the Azure DevOps project.
	projectName?: null | string @go(ProjectName,*string)

	// Specifies the name of the git repository.
	repositoryName?: null | string @go(RepositoryName,*string)

	// Specifies the root folder within the repository. Set to / for the top level.
	rootFolder?: null | string @go(RootFolder,*string)

	// the ID of the tenant for the Azure DevOps account.
	tenantId?: null | string @go(TenantID,*string)
}

#AzureDevopsRepoObservation: {
	// Specifies the Azure DevOps account name.
	accountName?: null | string @go(AccountName,*string)

	// Specifies the collaboration branch of the repository to get code from.
	branchName?: null | string @go(BranchName,*string)

	// The last commit ID.
	lastCommitId?: null | string @go(LastCommitID,*string)

	// Specifies the name of the Azure DevOps project.
	projectName?: null | string @go(ProjectName,*string)

	// Specifies the name of the git repository.
	repositoryName?: null | string @go(RepositoryName,*string)

	// Specifies the root folder within the repository. Set to / for the top level.
	rootFolder?: null | string @go(RootFolder,*string)

	// the ID of the tenant for the Azure DevOps account.
	tenantId?: null | string @go(TenantID,*string)
}

#AzureDevopsRepoParameters: {
	// Specifies the Azure DevOps account name.
	// +kubebuilder:validation:Optional
	accountName?: null | string @go(AccountName,*string)

	// Specifies the collaboration branch of the repository to get code from.
	// +kubebuilder:validation:Optional
	branchName?: null | string @go(BranchName,*string)

	// The last commit ID.
	// +kubebuilder:validation:Optional
	lastCommitId?: null | string @go(LastCommitID,*string)

	// Specifies the name of the Azure DevOps project.
	// +kubebuilder:validation:Optional
	projectName?: null | string @go(ProjectName,*string)

	// Specifies the name of the git repository.
	// +kubebuilder:validation:Optional
	repositoryName?: null | string @go(RepositoryName,*string)

	// Specifies the root folder within the repository. Set to / for the top level.
	// +kubebuilder:validation:Optional
	rootFolder?: null | string @go(RootFolder,*string)

	// the ID of the tenant for the Azure DevOps account.
	// +kubebuilder:validation:Optional
	tenantId?: null | string @go(TenantID,*string)
}

#CustomerManagedKeyInitParameters: {
	// An identifier for the key. Name needs to match the name of the key used with the azurerm_synapse_workspace_key resource. Defaults to "cmk" if not specified.
	keyName?: null | string @go(KeyName,*string)
}

#CustomerManagedKeyObservation: {
	// An identifier for the key. Name needs to match the name of the key used with the azurerm_synapse_workspace_key resource. Defaults to "cmk" if not specified.
	keyName?: null | string @go(KeyName,*string)

	// The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption (e.g. https://example-keyvault.vault.azure.net/type/cmk/).
	keyVersionlessId?: null | string @go(KeyVersionlessID,*string)
}

#CustomerManagedKeyParameters: {
	// An identifier for the key. Name needs to match the name of the key used with the azurerm_synapse_workspace_key resource. Defaults to "cmk" if not specified.
	// +kubebuilder:validation:Optional
	keyName?: null | string @go(KeyName,*string)

	// The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption (e.g. https://example-keyvault.vault.azure.net/type/cmk/).
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/keyvault/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("versionless_id",true)
	// +kubebuilder:validation:Optional
	keyVersionlessId?: null | string @go(KeyVersionlessID,*string)
}

#GithubRepoInitParameters: {
	// Specifies the GitHub account name.
	accountName?: null | string @go(AccountName,*string)

	// Specifies the collaboration branch of the repository to get code from.
	branchName?: null | string @go(BranchName,*string)

	// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.
	gitUrl?: null | string @go(GitURL,*string)

	// The last commit ID.
	lastCommitId?: null | string @go(LastCommitID,*string)

	// Specifies the name of the git repository.
	repositoryName?: null | string @go(RepositoryName,*string)

	// Specifies the root folder within the repository. Set to / for the top level.
	rootFolder?: null | string @go(RootFolder,*string)
}

#GithubRepoObservation: {
	// Specifies the GitHub account name.
	accountName?: null | string @go(AccountName,*string)

	// Specifies the collaboration branch of the repository to get code from.
	branchName?: null | string @go(BranchName,*string)

	// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.
	gitUrl?: null | string @go(GitURL,*string)

	// The last commit ID.
	lastCommitId?: null | string @go(LastCommitID,*string)

	// Specifies the name of the git repository.
	repositoryName?: null | string @go(RepositoryName,*string)

	// Specifies the root folder within the repository. Set to / for the top level.
	rootFolder?: null | string @go(RootFolder,*string)
}

#GithubRepoParameters: {
	// Specifies the GitHub account name.
	// +kubebuilder:validation:Optional
	accountName?: null | string @go(AccountName,*string)

	// Specifies the collaboration branch of the repository to get code from.
	// +kubebuilder:validation:Optional
	branchName?: null | string @go(BranchName,*string)

	// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.
	// +kubebuilder:validation:Optional
	gitUrl?: null | string @go(GitURL,*string)

	// The last commit ID.
	// +kubebuilder:validation:Optional
	lastCommitId?: null | string @go(LastCommitID,*string)

	// Specifies the name of the git repository.
	// +kubebuilder:validation:Optional
	repositoryName?: null | string @go(RepositoryName,*string)

	// Specifies the root folder within the repository. Set to / for the top level.
	// +kubebuilder:validation:Optional
	rootFolder?: null | string @go(RootFolder,*string)
}

#IdentityInitParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Synapse Workspace.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be associated with this Synapse Workspace. Possible values are SystemAssigned, UserAssigned and SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#IdentityObservation: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Synapse Workspace.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
	principalId?: null | string @go(PrincipalID,*string)

	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
	tenantId?: null | string @go(TenantID,*string)

	// Specifies the type of Managed Service Identity that should be associated with this Synapse Workspace. Possible values are SystemAssigned, UserAssigned and SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#IdentityParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Synapse Workspace.
	// +kubebuilder:validation:Optional
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be associated with this Synapse Workspace. Possible values are SystemAssigned, UserAssigned and SystemAssigned, UserAssigned (to enable both).
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#SQLAADAdminInitParameters: {
	// The login name of the Azure AD Administrator of this Synapse Workspace SQL.
	login?: null | string @go(Login,*string)

	// The object id of the Azure AD Administrator of this Synapse Workspace SQL.
	objectId?: null | string @go(ObjectID,*string)

	// The tenant id of the Azure AD Administrator of this Synapse Workspace SQL.
	tenantId?: null | string @go(TenantID,*string)
}

#SQLAADAdminObservation: {
	// The login name of the Azure AD Administrator of this Synapse Workspace SQL.
	login?: null | string @go(Login,*string)

	// The object id of the Azure AD Administrator of this Synapse Workspace SQL.
	objectId?: null | string @go(ObjectID,*string)

	// The tenant id of the Azure AD Administrator of this Synapse Workspace SQL.
	tenantId?: null | string @go(TenantID,*string)
}

#SQLAADAdminParameters: {
	// The login name of the Azure AD Administrator of this Synapse Workspace SQL.
	// +kubebuilder:validation:Optional
	login?: null | string @go(Login,*string)

	// The object id of the Azure AD Administrator of this Synapse Workspace SQL.
	// +kubebuilder:validation:Optional
	objectId?: null | string @go(ObjectID,*string)

	// The tenant id of the Azure AD Administrator of this Synapse Workspace SQL.
	// +kubebuilder:validation:Optional
	tenantId?: null | string @go(TenantID,*string)
}

#WorkspaceInitParameters: {
	// An aad_admin block as defined below. Conflicts with customer_managed_key.
	aadAdmin?: [...#AADAdminInitParameters] @go(AADAdmin,[]AADAdminInitParameters)

	// An azure_devops_repo block as defined below.
	azureDevopsRepo?: [...#AzureDevopsRepoInitParameters] @go(AzureDevopsRepo,[]AzureDevopsRepoInitParameters)

	// A customer_managed_key block as defined below. Conflicts with aad_admin.
	customerManagedKey?: [...#CustomerManagedKeyInitParameters] @go(CustomerManagedKey,[]CustomerManagedKeyInitParameters)

	// Is data exfiltration protection enabled in this workspace? If set to true, managed_virtual_network_enabled must also be set to true. Changing this forces a new resource to be created.
	dataExfiltrationProtectionEnabled?: null | bool @go(DataExfiltrationProtectionEnabled,*bool)

	// A github_repo block as defined below.
	githubRepo?: [...#GithubRepoInitParameters] @go(GithubRepo,[]GithubRepoInitParameters)

	// An identity block as defined below.
	identity?: [...#IdentityInitParameters] @go(Identity,[]IdentityInitParameters)

	// Allowed AAD Tenant Ids For Linking.
	linkingAllowedForAadTenantIds?: [...null | string] @go(LinkingAllowedForAADTenantIds,[]*string)

	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.
	managedVirtualNetworkEnabled?: null | bool @go(ManagedVirtualNetworkEnabled,*bool)

	// Whether public network access is allowed for the Cognitive Account. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The ID of purview account.
	purviewId?: null | string @go(PurviewID,*string)

	// An sql_aad_admin block as defined below.
	sqlAadAdmin?: [...#SQLAADAdminInitParameters] @go(SQLAADAdmin,[]SQLAADAdminInitParameters)

	// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided aad_admin or customer_managed_key must be provided.
	sqlAdministratorLogin?: null | string @go(SQLAdministratorLogin,*string)

	// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
	sqlIdentityControlEnabled?: null | bool @go(SQLIdentityControlEnabled,*bool)

	// A mapping of tags which should be assigned to the Synapse Workspace.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#WorkspaceObservation: {
	// An aad_admin block as defined below. Conflicts with customer_managed_key.
	aadAdmin?: [...#AADAdminObservation] @go(AADAdmin,[]AADAdminObservation)

	// An azure_devops_repo block as defined below.
	azureDevopsRepo?: [...#AzureDevopsRepoObservation] @go(AzureDevopsRepo,[]AzureDevopsRepoObservation)

	// Subnet ID used for computes in workspace Changing this forces a new resource to be created.
	computeSubnetId?: null | string @go(ComputeSubnetID,*string)

	// A list of Connectivity endpoints for this Synapse Workspace.
	connectivityEndpoints?: {[string]: null | string} @go(ConnectivityEndpoints,map[string]*string)

	// A customer_managed_key block as defined below. Conflicts with aad_admin.
	customerManagedKey?: [...#CustomerManagedKeyObservation] @go(CustomerManagedKey,[]CustomerManagedKeyObservation)

	// Is data exfiltration protection enabled in this workspace? If set to true, managed_virtual_network_enabled must also be set to true. Changing this forces a new resource to be created.
	dataExfiltrationProtectionEnabled?: null | bool @go(DataExfiltrationProtectionEnabled,*bool)

	// A github_repo block as defined below.
	githubRepo?: [...#GithubRepoObservation] @go(GithubRepo,[]GithubRepoObservation)

	// The ID of the synapse Workspace.
	id?: null | string @go(ID,*string)

	// An identity block as defined below.
	identity?: [...#IdentityObservation] @go(Identity,[]IdentityObservation)

	// Allowed AAD Tenant Ids For Linking.
	linkingAllowedForAadTenantIds?: [...null | string] @go(LinkingAllowedForAADTenantIds,[]*string)

	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Workspace managed resource group. Changing this forces a new resource to be created.
	managedResourceGroupName?: null | string @go(ManagedResourceGroupName,*string)

	// Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.
	managedVirtualNetworkEnabled?: null | bool @go(ManagedVirtualNetworkEnabled,*bool)

	// Whether public network access is allowed for the Cognitive Account. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The ID of purview account.
	purviewId?: null | string @go(PurviewID,*string)

	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// An sql_aad_admin block as defined below.
	sqlAadAdmin?: [...#SQLAADAdminObservation] @go(SQLAADAdmin,[]SQLAADAdminObservation)

	// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided aad_admin or customer_managed_key must be provided.
	sqlAdministratorLogin?: null | string @go(SQLAdministratorLogin,*string)

	// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
	sqlIdentityControlEnabled?: null | bool @go(SQLIdentityControlEnabled,*bool)

	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	storageDataLakeGen2FilesystemId?: null | string @go(StorageDataLakeGen2FileSystemID,*string)

	// A mapping of tags which should be assigned to the Synapse Workspace.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#WorkspaceParameters: {
	// An aad_admin block as defined below. Conflicts with customer_managed_key.
	// +kubebuilder:validation:Optional
	aadAdmin?: [...#AADAdminParameters] @go(AADAdmin,[]AADAdminParameters)

	// An azure_devops_repo block as defined below.
	// +kubebuilder:validation:Optional
	azureDevopsRepo?: [...#AzureDevopsRepoParameters] @go(AzureDevopsRepo,[]AzureDevopsRepoParameters)

	// Subnet ID used for computes in workspace Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	computeSubnetId?: null | string @go(ComputeSubnetID,*string)

	// A customer_managed_key block as defined below. Conflicts with aad_admin.
	// +kubebuilder:validation:Optional
	customerManagedKey?: [...#CustomerManagedKeyParameters] @go(CustomerManagedKey,[]CustomerManagedKeyParameters)

	// Is data exfiltration protection enabled in this workspace? If set to true, managed_virtual_network_enabled must also be set to true. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	dataExfiltrationProtectionEnabled?: null | bool @go(DataExfiltrationProtectionEnabled,*bool)

	// A github_repo block as defined below.
	// +kubebuilder:validation:Optional
	githubRepo?: [...#GithubRepoParameters] @go(GithubRepo,[]GithubRepoParameters)

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	identity?: [...#IdentityParameters] @go(Identity,[]IdentityParameters)

	// Allowed AAD Tenant Ids For Linking.
	// +kubebuilder:validation:Optional
	linkingAllowedForAadTenantIds?: [...null | string] @go(LinkingAllowedForAADTenantIds,[]*string)

	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Workspace managed resource group. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	managedResourceGroupName?: null | string @go(ManagedResourceGroupName,*string)

	// Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	managedVirtualNetworkEnabled?: null | bool @go(ManagedVirtualNetworkEnabled,*bool)

	// Whether public network access is allowed for the Cognitive Account. Defaults to true.
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The ID of purview account.
	// +kubebuilder:validation:Optional
	purviewId?: null | string @go(PurviewID,*string)

	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// An sql_aad_admin block as defined below.
	// +kubebuilder:validation:Optional
	sqlAadAdmin?: [...#SQLAADAdminParameters] @go(SQLAADAdmin,[]SQLAADAdminParameters)

	// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided aad_admin or customer_managed_key must be provided.
	// +kubebuilder:validation:Optional
	sqlAdministratorLogin?: null | string @go(SQLAdministratorLogin,*string)

	// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
	// +kubebuilder:validation:Optional
	sqlIdentityControlEnabled?: null | bool @go(SQLIdentityControlEnabled,*bool)

	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.DataLakeGen2FileSystem
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	storageDataLakeGen2FilesystemId?: null | string @go(StorageDataLakeGen2FileSystemID,*string)

	// A mapping of tags which should be assigned to the Synapse Workspace.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// WorkspaceSpec defines the desired state of Workspace
#WorkspaceSpec: {
	forProvider: #WorkspaceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #WorkspaceInitParameters @go(InitProvider)
}

// WorkspaceStatus defines the observed state of Workspace.
#WorkspaceStatus: {
	atProvider?: #WorkspaceObservation @go(AtProvider)
}

// Workspace is the Schema for the Workspaces API. Manages a Synapse Workspace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Workspace: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	spec:    #WorkspaceSpec   @go(Spec)
	status?: #WorkspaceStatus @go(Status)
}

// WorkspaceList contains a list of Workspaces
#WorkspaceList: {
	items: [...#Workspace] @go(Items,[]Workspace)
}
