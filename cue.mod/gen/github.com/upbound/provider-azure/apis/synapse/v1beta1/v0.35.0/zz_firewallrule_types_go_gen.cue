// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/synapse/v1beta1

package v1beta1

#FirewallRuleInitParameters: {
	// The ending IP address to allow through the firewall for this rule.
	endIpAddress?: null | string @go(EndIPAddress,*string)

	// The starting IP address to allow through the firewall for this rule.
	startIpAddress?: null | string @go(StartIPAddress,*string)
}

#FirewallRuleObservation: {
	// The ending IP address to allow through the firewall for this rule.
	endIpAddress?: null | string @go(EndIPAddress,*string)

	// The Synapse Firewall Rule ID.
	id?: null | string @go(ID,*string)

	// The starting IP address to allow through the firewall for this rule.
	startIpAddress?: null | string @go(StartIPAddress,*string)

	// The ID of the Synapse Workspace on which to create the Firewall Rule. Changing this forces a new resource to be created.
	synapseWorkspaceId?: null | string @go(SynapseWorkspaceID,*string)
}

#FirewallRuleParameters: {
	// The ending IP address to allow through the firewall for this rule.
	// +kubebuilder:validation:Optional
	endIpAddress?: null | string @go(EndIPAddress,*string)

	// The starting IP address to allow through the firewall for this rule.
	// +kubebuilder:validation:Optional
	startIpAddress?: null | string @go(StartIPAddress,*string)

	// The ID of the Synapse Workspace on which to create the Firewall Rule. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/synapse/v1beta1.Workspace
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	synapseWorkspaceId?: null | string @go(SynapseWorkspaceID,*string)
}

// FirewallRuleSpec defines the desired state of FirewallRule
#FirewallRuleSpec: {
	forProvider: #FirewallRuleParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FirewallRuleInitParameters @go(InitProvider)
}

// FirewallRuleStatus defines the observed state of FirewallRule.
#FirewallRuleStatus: {
	atProvider?: #FirewallRuleObservation @go(AtProvider)
}

// FirewallRule is the Schema for the FirewallRules API. Manages a Synapse Firewall Rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#FirewallRule: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endIpAddress) || has(self.initProvider.endIpAddress)",message="endIpAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.startIpAddress) || has(self.initProvider.startIpAddress)",message="startIpAddress is a required parameter"
	spec:    #FirewallRuleSpec   @go(Spec)
	status?: #FirewallRuleStatus @go(Status)
}

// FirewallRuleList contains a list of FirewallRules
#FirewallRuleList: {
	items: [...#FirewallRule] @go(Items,[]FirewallRule)
}
