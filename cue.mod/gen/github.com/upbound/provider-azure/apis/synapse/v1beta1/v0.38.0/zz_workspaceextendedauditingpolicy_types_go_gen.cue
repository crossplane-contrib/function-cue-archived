// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/synapse/v1beta1

package v1beta1

#WorkspaceExtendedAuditingPolicyInitParameters: {
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor. Defaults to true.
	logMonitoringEnabled?: null | bool @go(LogMonitoringEnabled,*bool)

	// The number of days to retain logs for in the storage account. Defaults to 0.
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)

	// Is storage_account_access_key value the storage's secondary key?
	storageAccountAccessKeyIsSecondary?: null | bool @go(StorageAccountAccessKeyIsSecondary,*bool)
}

#WorkspaceExtendedAuditingPolicyObservation: {
	// The ID of the Synapse Workspace Extended Auditing Policy.
	id?: null | string @go(ID,*string)

	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor. Defaults to true.
	logMonitoringEnabled?: null | bool @go(LogMonitoringEnabled,*bool)

	// The number of days to retain logs for in the storage account. Defaults to 0.
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)

	// Is storage_account_access_key value the storage's secondary key?
	storageAccountAccessKeyIsSecondary?: null | bool @go(StorageAccountAccessKeyIsSecondary,*bool)

	// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	storageEndpoint?: null | string @go(StorageEndpoint,*string)

	// The ID of the Synapse workspace to set the extended auditing policy. Changing this forces a new resource to be created.
	synapseWorkspaceId?: null | string @go(SynapseWorkspaceID,*string)
}

#WorkspaceExtendedAuditingPolicyParameters: {
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor. Defaults to true.
	// +kubebuilder:validation:Optional
	logMonitoringEnabled?: null | bool @go(LogMonitoringEnabled,*bool)

	// The number of days to retain logs for in the storage account. Defaults to 0.
	// +kubebuilder:validation:Optional
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)

	// Is storage_account_access_key value the storage's secondary key?
	// +kubebuilder:validation:Optional
	storageAccountAccessKeyIsSecondary?: null | bool @go(StorageAccountAccessKeyIsSecondary,*bool)

	// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("primary_blob_endpoint",true)
	// +kubebuilder:validation:Optional
	storageEndpoint?: null | string @go(StorageEndpoint,*string)

	// The ID of the Synapse workspace to set the extended auditing policy. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/synapse/v1beta1.Workspace
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	synapseWorkspaceId?: null | string @go(SynapseWorkspaceID,*string)
}

// WorkspaceExtendedAuditingPolicySpec defines the desired state of WorkspaceExtendedAuditingPolicy
#WorkspaceExtendedAuditingPolicySpec: {
	forProvider: #WorkspaceExtendedAuditingPolicyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #WorkspaceExtendedAuditingPolicyInitParameters @go(InitProvider)
}

// WorkspaceExtendedAuditingPolicyStatus defines the observed state of WorkspaceExtendedAuditingPolicy.
#WorkspaceExtendedAuditingPolicyStatus: {
	atProvider?: #WorkspaceExtendedAuditingPolicyObservation @go(AtProvider)
}

// WorkspaceExtendedAuditingPolicy is the Schema for the WorkspaceExtendedAuditingPolicys API. Manages a Synapse Workspace Extended Auditing Policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#WorkspaceExtendedAuditingPolicy: {
	spec:    #WorkspaceExtendedAuditingPolicySpec   @go(Spec)
	status?: #WorkspaceExtendedAuditingPolicyStatus @go(Status)
}

// WorkspaceExtendedAuditingPolicyList contains a list of WorkspaceExtendedAuditingPolicys
#WorkspaceExtendedAuditingPolicyList: {
	items: [...#WorkspaceExtendedAuditingPolicy] @go(Items,[]WorkspaceExtendedAuditingPolicy)
}
