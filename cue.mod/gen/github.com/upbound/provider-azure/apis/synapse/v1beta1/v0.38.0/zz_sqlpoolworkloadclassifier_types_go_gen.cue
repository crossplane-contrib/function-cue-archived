// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/synapse/v1beta1

package v1beta1

#SQLPoolWorkloadClassifierInitParameters: {
	// Specifies the session context value that a request can be classified against.
	context?: null | string @go(Context,*string)

	// The workload classifier end time for classification. It's of the HH:MM format in UTC time zone.
	endTime?: null | string @go(EndTime,*string)

	// The workload classifier importance. The allowed values are low, below_normal, normal, above_normal and high.
	importance?: null | string @go(Importance,*string)

	// Specifies the label value that a request can be classified against.
	label?: null | string @go(Label,*string)

	// The workload classifier member name used to classified against.
	memberName?: null | string @go(MemberName,*string)

	// The workload classifier start time for classification. It's of the HH:MM format in UTC time zone.
	startTime?: null | string @go(StartTime,*string)
}

#SQLPoolWorkloadClassifierObservation: {
	// Specifies the session context value that a request can be classified against.
	context?: null | string @go(Context,*string)

	// The workload classifier end time for classification. It's of the HH:MM format in UTC time zone.
	endTime?: null | string @go(EndTime,*string)

	// The ID of the Synapse SQL Pool Workload Classifier.
	id?: null | string @go(ID,*string)

	// The workload classifier importance. The allowed values are low, below_normal, normal, above_normal and high.
	importance?: null | string @go(Importance,*string)

	// Specifies the label value that a request can be classified against.
	label?: null | string @go(Label,*string)

	// The workload classifier member name used to classified against.
	memberName?: null | string @go(MemberName,*string)

	// The workload classifier start time for classification. It's of the HH:MM format in UTC time zone.
	startTime?: null | string @go(StartTime,*string)

	// The ID of the Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	workloadGroupId?: null | string @go(WorkloadGroupID,*string)
}

#SQLPoolWorkloadClassifierParameters: {
	// Specifies the session context value that a request can be classified against.
	// +kubebuilder:validation:Optional
	context?: null | string @go(Context,*string)

	// The workload classifier end time for classification. It's of the HH:MM format in UTC time zone.
	// +kubebuilder:validation:Optional
	endTime?: null | string @go(EndTime,*string)

	// The workload classifier importance. The allowed values are low, below_normal, normal, above_normal and high.
	// +kubebuilder:validation:Optional
	importance?: null | string @go(Importance,*string)

	// Specifies the label value that a request can be classified against.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// The workload classifier member name used to classified against.
	// +kubebuilder:validation:Optional
	memberName?: null | string @go(MemberName,*string)

	// The workload classifier start time for classification. It's of the HH:MM format in UTC time zone.
	// +kubebuilder:validation:Optional
	startTime?: null | string @go(StartTime,*string)

	// The ID of the Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/synapse/v1beta1.SQLPoolWorkloadGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	workloadGroupId?: null | string @go(WorkloadGroupID,*string)
}

// SQLPoolWorkloadClassifierSpec defines the desired state of SQLPoolWorkloadClassifier
#SQLPoolWorkloadClassifierSpec: {
	forProvider: #SQLPoolWorkloadClassifierParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SQLPoolWorkloadClassifierInitParameters @go(InitProvider)
}

// SQLPoolWorkloadClassifierStatus defines the observed state of SQLPoolWorkloadClassifier.
#SQLPoolWorkloadClassifierStatus: {
	atProvider?: #SQLPoolWorkloadClassifierObservation @go(AtProvider)
}

// SQLPoolWorkloadClassifier is the Schema for the SQLPoolWorkloadClassifiers API. Manages a Synapse SQL Pool Workload Classifier.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#SQLPoolWorkloadClassifier: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.memberName) || (has(self.initProvider) && has(self.initProvider.memberName))",message="spec.forProvider.memberName is a required parameter"
	spec:    #SQLPoolWorkloadClassifierSpec   @go(Spec)
	status?: #SQLPoolWorkloadClassifierStatus @go(Status)
}

// SQLPoolWorkloadClassifierList contains a list of SQLPoolWorkloadClassifiers
#SQLPoolWorkloadClassifierList: {
	items: [...#SQLPoolWorkloadClassifier] @go(Items,[]SQLPoolWorkloadClassifier)
}
