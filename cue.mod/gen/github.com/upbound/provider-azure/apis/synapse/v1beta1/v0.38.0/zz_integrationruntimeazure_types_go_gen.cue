// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/synapse/v1beta1

package v1beta1

#IntegrationRuntimeAzureInitParameters: {
	// Compute type of the cluster which will execute data flow job. Valid values are General, ComputeOptimized and MemoryOptimized. Defaults to General.
	computeType?: null | string @go(ComputeType,*string)

	// Core count of the cluster which will execute data flow job. Valid values are 8, 16, 32, 48, 80, 144 and 272. Defaults to 8.
	coreCount?: null | float64 @go(CoreCount,*float64)

	// Integration runtime description.
	description?: null | string @go(Description,*string)

	// The Azure Region where the Synapse Azure Integration Runtime should exist. Use AutoResolve to create an auto-resolve integration runtime. Changing this forces a new Synapse Azure Integration Runtime to be created.
	location?: null | string @go(Location,*string)

	// Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to 0.
	timeToLiveMin?: null | float64 @go(TimeToLiveMin,*float64)
}

#IntegrationRuntimeAzureObservation: {
	// Compute type of the cluster which will execute data flow job. Valid values are General, ComputeOptimized and MemoryOptimized. Defaults to General.
	computeType?: null | string @go(ComputeType,*string)

	// Core count of the cluster which will execute data flow job. Valid values are 8, 16, 32, 48, 80, 144 and 272. Defaults to 8.
	coreCount?: null | float64 @go(CoreCount,*float64)

	// Integration runtime description.
	description?: null | string @go(Description,*string)

	// The ID of the Synapse Azure Integration Runtime.
	id?: null | string @go(ID,*string)

	// The Azure Region where the Synapse Azure Integration Runtime should exist. Use AutoResolve to create an auto-resolve integration runtime. Changing this forces a new Synapse Azure Integration Runtime to be created.
	location?: null | string @go(Location,*string)

	// The Synapse Workspace ID in which to associate the Integration Runtime with. Changing this forces a new Synapse Azure Integration Runtime to be created.
	synapseWorkspaceId?: null | string @go(SynapseWorkspaceID,*string)

	// Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to 0.
	timeToLiveMin?: null | float64 @go(TimeToLiveMin,*float64)
}

#IntegrationRuntimeAzureParameters: {
	// Compute type of the cluster which will execute data flow job. Valid values are General, ComputeOptimized and MemoryOptimized. Defaults to General.
	// +kubebuilder:validation:Optional
	computeType?: null | string @go(ComputeType,*string)

	// Core count of the cluster which will execute data flow job. Valid values are 8, 16, 32, 48, 80, 144 and 272. Defaults to 8.
	// +kubebuilder:validation:Optional
	coreCount?: null | float64 @go(CoreCount,*float64)

	// Integration runtime description.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The Azure Region where the Synapse Azure Integration Runtime should exist. Use AutoResolve to create an auto-resolve integration runtime. Changing this forces a new Synapse Azure Integration Runtime to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The Synapse Workspace ID in which to associate the Integration Runtime with. Changing this forces a new Synapse Azure Integration Runtime to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/synapse/v1beta1.Workspace
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	synapseWorkspaceId?: null | string @go(SynapseWorkspaceID,*string)

	// Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to 0.
	// +kubebuilder:validation:Optional
	timeToLiveMin?: null | float64 @go(TimeToLiveMin,*float64)
}

// IntegrationRuntimeAzureSpec defines the desired state of IntegrationRuntimeAzure
#IntegrationRuntimeAzureSpec: {
	forProvider: #IntegrationRuntimeAzureParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #IntegrationRuntimeAzureInitParameters @go(InitProvider)
}

// IntegrationRuntimeAzureStatus defines the observed state of IntegrationRuntimeAzure.
#IntegrationRuntimeAzureStatus: {
	atProvider?: #IntegrationRuntimeAzureObservation @go(AtProvider)
}

// IntegrationRuntimeAzure is the Schema for the IntegrationRuntimeAzures API. Manages a Synapse Azure Integration Runtime.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#IntegrationRuntimeAzure: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	spec:    #IntegrationRuntimeAzureSpec   @go(Spec)
	status?: #IntegrationRuntimeAzureStatus @go(Status)
}

// IntegrationRuntimeAzureList contains a list of IntegrationRuntimeAzures
#IntegrationRuntimeAzureList: {
	items: [...#IntegrationRuntimeAzure] @go(Items,[]IntegrationRuntimeAzure)
}
