// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/web/v1beta1

package v1beta1

#ApplicationLogsAzureBlobStorageInitParameters: {
	// The level at which to log. Possible values include Error, Warning, Information, Verbose and Off. NOTE: this field is not available for http_logs
	level?: null | string @go(Level,*string)

	// The retention period in days. A values of 0 means no retention.
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)

	// SAS url to an Azure blob container with read/write/list/delete permissions.
	sasUrl?: null | string @go(SASURL,*string)
}

#ApplicationLogsAzureBlobStorageObservation: {
	// The level at which to log. Possible values include Error, Warning, Information, Verbose and Off. NOTE: this field is not available for http_logs
	level?: null | string @go(Level,*string)

	// The retention period in days. A values of 0 means no retention.
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)

	// SAS url to an Azure blob container with read/write/list/delete permissions.
	sasUrl?: null | string @go(SASURL,*string)
}

#ApplicationLogsAzureBlobStorageParameters: {
	// The level at which to log. Possible values include Error, Warning, Information, Verbose and Off. NOTE: this field is not available for http_logs
	// +kubebuilder:validation:Optional
	level?: null | string @go(Level,*string)

	// The retention period in days. A values of 0 means no retention.
	// +kubebuilder:validation:Optional
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)

	// SAS url to an Azure blob container with read/write/list/delete permissions.
	// +kubebuilder:validation:Optional
	sasUrl?: null | string @go(SASURL,*string)
}

#AutoHealSettingActionInitParameters: {
	// Predefined action to be taken to an Auto Heal trigger. Possible values include: Recycle.
	actionType?: null | string @go(ActionType,*string)

	// The minimum amount of time in hh:mm:ss the Linux Web App must have been running before the defined action will be run in the event of a trigger.
	minimumProcessExecutionTime?: null | string @go(MinimumProcessExecutionTime,*string)
}

#AutoHealSettingActionObservation: {
	// Predefined action to be taken to an Auto Heal trigger. Possible values include: Recycle.
	actionType?: null | string @go(ActionType,*string)

	// The minimum amount of time in hh:mm:ss the Linux Web App must have been running before the defined action will be run in the event of a trigger.
	minimumProcessExecutionTime?: null | string @go(MinimumProcessExecutionTime,*string)
}

#AutoHealSettingActionParameters: {
	// Predefined action to be taken to an Auto Heal trigger. Possible values include: Recycle.
	// +kubebuilder:validation:Optional
	actionType?: null | string @go(ActionType,*string)

	// The minimum amount of time in hh:mm:ss the Linux Web App must have been running before the defined action will be run in the event of a trigger.
	// +kubebuilder:validation:Optional
	minimumProcessExecutionTime?: null | string @go(MinimumProcessExecutionTime,*string)
}

#AutoHealSettingTriggerInitParameters: {
	// A requests block as defined above.
	requests?: [...#TriggerRequestsInitParameters] @go(Requests,[]TriggerRequestsInitParameters)

	// One or more slow_request blocks as defined above.
	slowRequest?: [...#TriggerSlowRequestInitParameters] @go(SlowRequest,[]TriggerSlowRequestInitParameters)

	// One or more status_code blocks as defined above.
	statusCode?: [...#TriggerStatusCodeInitParameters] @go(StatusCode,[]TriggerStatusCodeInitParameters)
}

#AutoHealSettingTriggerObservation: {
	// A requests block as defined above.
	requests?: [...#TriggerRequestsObservation] @go(Requests,[]TriggerRequestsObservation)

	// One or more slow_request blocks as defined above.
	slowRequest?: [...#TriggerSlowRequestObservation] @go(SlowRequest,[]TriggerSlowRequestObservation)

	// One or more status_code blocks as defined above.
	statusCode?: [...#TriggerStatusCodeObservation] @go(StatusCode,[]TriggerStatusCodeObservation)
}

#AutoHealSettingTriggerParameters: {
	// A requests block as defined above.
	// +kubebuilder:validation:Optional
	requests?: [...#TriggerRequestsParameters] @go(Requests,[]TriggerRequestsParameters)

	// One or more slow_request blocks as defined above.
	// +kubebuilder:validation:Optional
	slowRequest?: [...#TriggerSlowRequestParameters] @go(SlowRequest,[]TriggerSlowRequestParameters)

	// One or more status_code blocks as defined above.
	// +kubebuilder:validation:Optional
	statusCode?: [...#TriggerStatusCodeParameters] @go(StatusCode,[]TriggerStatusCodeParameters)
}

#HTTPLogsFileSystemInitParameters: {
	// The retention period in days. A values of 0 means no retention.
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)

	// The maximum size in megabytes that log files can use.
	retentionInMb?: null | float64 @go(RetentionInMb,*float64)
}

#HTTPLogsFileSystemObservation: {
	// The retention period in days. A values of 0 means no retention.
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)

	// The maximum size in megabytes that log files can use.
	retentionInMb?: null | float64 @go(RetentionInMb,*float64)
}

#HTTPLogsFileSystemParameters: {
	// The retention period in days. A values of 0 means no retention.
	// +kubebuilder:validation:Optional
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)

	// The maximum size in megabytes that log files can use.
	// +kubebuilder:validation:Optional
	retentionInMb?: null | float64 @go(RetentionInMb,*float64)
}

#LinuxWebAppSlotAuthSettingsActiveDirectoryInitParameters: {
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with Azure Active Directory.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The App Setting name that contains the client secret of the Client. Cannot be used with `client_secret`.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)
}

#LinuxWebAppSlotAuthSettingsActiveDirectoryObservation: {
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with Azure Active Directory.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The App Setting name that contains the client secret of the Client. Cannot be used with `client_secret`.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)
}

#LinuxWebAppSlotAuthSettingsActiveDirectoryParameters: {
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
	// +kubebuilder:validation:Optional
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with Azure Active Directory.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The App Setting name that contains the client secret of the Client. Cannot be used with `client_secret`.
	// +kubebuilder:validation:Optional
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)
}

#LinuxWebAppSlotAuthSettingsFacebookInitParameters: {
	// The App ID of the Facebook app used for login.
	// The App ID of the Facebook app used for login.
	appId?: null | string @go(AppID,*string)

	// The app setting name that contains the app_secret value used for Facebook Login.
	// The app setting name that contains the `app_secret` value used for Facebook Login. Cannot be specified with `app_secret`.
	appSecretSettingName?: null | string @go(AppSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// Specifies a list of OAuth 2.0 scopes to be requested as part of Facebook Login authentication.
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsFacebookObservation: {
	// The App ID of the Facebook app used for login.
	// The App ID of the Facebook app used for login.
	appId?: null | string @go(AppID,*string)

	// The app setting name that contains the app_secret value used for Facebook Login.
	// The app setting name that contains the `app_secret` value used for Facebook Login. Cannot be specified with `app_secret`.
	appSecretSettingName?: null | string @go(AppSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// Specifies a list of OAuth 2.0 scopes to be requested as part of Facebook Login authentication.
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsFacebookParameters: {
	// The App ID of the Facebook app used for login.
	// The App ID of the Facebook app used for login.
	// +kubebuilder:validation:Optional
	appId?: null | string @go(AppID,*string)

	// The app setting name that contains the app_secret value used for Facebook Login.
	// The app setting name that contains the `app_secret` value used for Facebook Login. Cannot be specified with `app_secret`.
	// +kubebuilder:validation:Optional
	appSecretSettingName?: null | string @go(AppSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// Specifies a list of OAuth 2.0 scopes to be requested as part of Facebook Login authentication.
	// +kubebuilder:validation:Optional
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsGithubInitParameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the GitHub app used for login.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for GitHub Login. Cannot be specified with `client_secret`.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// Specifies a list of OAuth 2.0 scopes that will be requested as part of GitHub Login authentication.
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsGithubObservation: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the GitHub app used for login.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for GitHub Login. Cannot be specified with `client_secret`.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// Specifies a list of OAuth 2.0 scopes that will be requested as part of GitHub Login authentication.
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsGithubParameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the GitHub app used for login.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for GitHub Login. Cannot be specified with `client_secret`.
	// +kubebuilder:validation:Optional
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// Specifies a list of OAuth 2.0 scopes that will be requested as part of GitHub Login authentication.
	// +kubebuilder:validation:Optional
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsGoogleInitParameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OpenID Connect Client ID for the Google web application.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for Google Login. Cannot be specified with `client_secret`.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. If not specified, "openid", "profile", and "email" are used as default scopes.
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsGoogleObservation: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OpenID Connect Client ID for the Google web application.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for Google Login. Cannot be specified with `client_secret`.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. If not specified, "openid", "profile", and "email" are used as default scopes.
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsGoogleParameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OpenID Connect Client ID for the Google web application.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for Google Login. Cannot be specified with `client_secret`.
	// +kubebuilder:validation:Optional
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. If not specified, "openid", "profile", and "email" are used as default scopes.
	// +kubebuilder:validation:Optional
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsInitParameters: {
	// An active_directory block as defined above.
	activeDirectory?: [...#LinuxWebAppSlotAuthSettingsActiveDirectoryInitParameters] @go(ActiveDirectory,[]LinuxWebAppSlotAuthSettingsActiveDirectoryInitParameters)

	// Specifies a map of login Parameters to send to the OpenID Connect authorization endpoint when a user logs in.
	// Specifies a map of Login Parameters to send to the OpenID Connect authorization endpoint when a user logs in.
	additionalLoginParameters?: {[string]: null | string} @go(AdditionalLoginParameters,map[string]*string)

	// Specifies a list of External URLs that can be redirected to as part of logging in or logging out of the Linux Web App.
	// Specifies a list of External URLs that can be redirected to as part of logging in or logging out of the Windows Web App.
	allowedExternalRedirectUrls?: [...null | string] @go(AllowedExternalRedirectUrls,[]*string)

	// The default authentication provider to use when multiple providers are configured. Possible values include: BuiltInAuthenticationProviderAzureActiveDirectory, BuiltInAuthenticationProviderFacebook, BuiltInAuthenticationProviderGoogle, BuiltInAuthenticationProviderMicrosoftAccount, BuiltInAuthenticationProviderTwitter, BuiltInAuthenticationProviderGithub
	// The default authentication provider to use when multiple providers are configured. Possible values include: `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount`, `Twitter`, `Github`.
	defaultProvider?: null | string @go(DefaultProvider,*string)

	// Should the Authentication / Authorization feature be enabled for the Linux Web App?
	// Should the Authentication / Authorization feature be enabled?
	enabled?: null | bool @go(Enabled,*bool)

	// A facebook block as defined below.
	facebook?: [...#LinuxWebAppSlotAuthSettingsFacebookInitParameters] @go(Facebook,[]LinuxWebAppSlotAuthSettingsFacebookInitParameters)

	// A github block as defined below.
	github?: [...#LinuxWebAppSlotAuthSettingsGithubInitParameters] @go(Github,[]LinuxWebAppSlotAuthSettingsGithubInitParameters)

	// A google block as defined below.
	google?: [...#LinuxWebAppSlotAuthSettingsGoogleInitParameters] @go(Google,[]LinuxWebAppSlotAuthSettingsGoogleInitParameters)

	// The OpenID Connect Issuer URI that represents the entity that issues access tokens for this Linux Web App.
	// The OpenID Connect Issuer URI that represents the entity which issues access tokens.
	issuer?: null | string @go(Issuer,*string)

	// A microsoft block as defined below.
	microsoft?: [...#LinuxWebAppSlotAuthSettingsMicrosoftInitParameters] @go(Microsoft,[]LinuxWebAppSlotAuthSettingsMicrosoftInitParameters)

	// The RuntimeVersion of the Authentication / Authorization feature in use for the Linux Web App.
	// The RuntimeVersion of the Authentication / Authorization feature in use.
	runtimeVersion?: null | string @go(RuntimeVersion,*string)

	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72 hours.
	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
	tokenRefreshExtensionHours?: null | float64 @go(TokenRefreshExtensionHours,*float64)

	// Should the Linux Web App durably store platform-specific security tokens that are obtained during login flows? Defaults to false.
	// Should the Windows Web App durably store platform-specific security tokens that are obtained during login flows? Defaults to `false`.
	tokenStoreEnabled?: null | bool @go(TokenStoreEnabled,*bool)

	// A twitter block as defined below.
	twitter?: [...#LinuxWebAppSlotAuthSettingsTwitterInitParameters] @go(Twitter,[]LinuxWebAppSlotAuthSettingsTwitterInitParameters)

	// The action to take when an unauthenticated client attempts to access the app. Possible values include: RedirectToLoginPage, AllowAnonymous.
	// The action to take when an unauthenticated client attempts to access the app. Possible values include: `RedirectToLoginPage`, `AllowAnonymous`.
	unauthenticatedClientAction?: null | string @go(UnauthenticatedClientAction,*string)
}

#LinuxWebAppSlotAuthSettingsMicrosoftInitParameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication. Cannot be specified with `client_secret`.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// The list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, `wl.basic` is used as the default scope.
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsMicrosoftObservation: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication. Cannot be specified with `client_secret`.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// The list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, `wl.basic` is used as the default scope.
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsMicrosoftParameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication. Cannot be specified with `client_secret`.
	// +kubebuilder:validation:Optional
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// Specifies a list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, "wl.basic" is used as the default scope.
	// The list of OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. If not specified, `wl.basic` is used as the default scope.
	// +kubebuilder:validation:Optional
	oauthScopes?: [...null | string] @go(OauthScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsObservation: {
	// An active_directory block as defined above.
	activeDirectory?: [...#LinuxWebAppSlotAuthSettingsActiveDirectoryObservation] @go(ActiveDirectory,[]LinuxWebAppSlotAuthSettingsActiveDirectoryObservation)

	// Specifies a map of login Parameters to send to the OpenID Connect authorization endpoint when a user logs in.
	// Specifies a map of Login Parameters to send to the OpenID Connect authorization endpoint when a user logs in.
	additionalLoginParameters?: {[string]: null | string} @go(AdditionalLoginParameters,map[string]*string)

	// Specifies a list of External URLs that can be redirected to as part of logging in or logging out of the Linux Web App.
	// Specifies a list of External URLs that can be redirected to as part of logging in or logging out of the Windows Web App.
	allowedExternalRedirectUrls?: [...null | string] @go(AllowedExternalRedirectUrls,[]*string)

	// The default authentication provider to use when multiple providers are configured. Possible values include: BuiltInAuthenticationProviderAzureActiveDirectory, BuiltInAuthenticationProviderFacebook, BuiltInAuthenticationProviderGoogle, BuiltInAuthenticationProviderMicrosoftAccount, BuiltInAuthenticationProviderTwitter, BuiltInAuthenticationProviderGithub
	// The default authentication provider to use when multiple providers are configured. Possible values include: `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount`, `Twitter`, `Github`.
	defaultProvider?: null | string @go(DefaultProvider,*string)

	// Should the Authentication / Authorization feature be enabled for the Linux Web App?
	// Should the Authentication / Authorization feature be enabled?
	enabled?: null | bool @go(Enabled,*bool)

	// A facebook block as defined below.
	facebook?: [...#LinuxWebAppSlotAuthSettingsFacebookObservation] @go(Facebook,[]LinuxWebAppSlotAuthSettingsFacebookObservation)

	// A github block as defined below.
	github?: [...#LinuxWebAppSlotAuthSettingsGithubObservation] @go(Github,[]LinuxWebAppSlotAuthSettingsGithubObservation)

	// A google block as defined below.
	google?: [...#LinuxWebAppSlotAuthSettingsGoogleObservation] @go(Google,[]LinuxWebAppSlotAuthSettingsGoogleObservation)

	// The OpenID Connect Issuer URI that represents the entity that issues access tokens for this Linux Web App.
	// The OpenID Connect Issuer URI that represents the entity which issues access tokens.
	issuer?: null | string @go(Issuer,*string)

	// A microsoft block as defined below.
	microsoft?: [...#LinuxWebAppSlotAuthSettingsMicrosoftObservation] @go(Microsoft,[]LinuxWebAppSlotAuthSettingsMicrosoftObservation)

	// The RuntimeVersion of the Authentication / Authorization feature in use for the Linux Web App.
	// The RuntimeVersion of the Authentication / Authorization feature in use.
	runtimeVersion?: null | string @go(RuntimeVersion,*string)

	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72 hours.
	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
	tokenRefreshExtensionHours?: null | float64 @go(TokenRefreshExtensionHours,*float64)

	// Should the Linux Web App durably store platform-specific security tokens that are obtained during login flows? Defaults to false.
	// Should the Windows Web App durably store platform-specific security tokens that are obtained during login flows? Defaults to `false`.
	tokenStoreEnabled?: null | bool @go(TokenStoreEnabled,*bool)

	// A twitter block as defined below.
	twitter?: [...#LinuxWebAppSlotAuthSettingsTwitterObservation] @go(Twitter,[]LinuxWebAppSlotAuthSettingsTwitterObservation)

	// The action to take when an unauthenticated client attempts to access the app. Possible values include: RedirectToLoginPage, AllowAnonymous.
	// The action to take when an unauthenticated client attempts to access the app. Possible values include: `RedirectToLoginPage`, `AllowAnonymous`.
	unauthenticatedClientAction?: null | string @go(UnauthenticatedClientAction,*string)
}

#LinuxWebAppSlotAuthSettingsParameters: {
	// An active_directory block as defined above.
	// +kubebuilder:validation:Optional
	activeDirectory?: [...#LinuxWebAppSlotAuthSettingsActiveDirectoryParameters] @go(ActiveDirectory,[]LinuxWebAppSlotAuthSettingsActiveDirectoryParameters)

	// Specifies a map of login Parameters to send to the OpenID Connect authorization endpoint when a user logs in.
	// Specifies a map of Login Parameters to send to the OpenID Connect authorization endpoint when a user logs in.
	// +kubebuilder:validation:Optional
	additionalLoginParameters?: {[string]: null | string} @go(AdditionalLoginParameters,map[string]*string)

	// Specifies a list of External URLs that can be redirected to as part of logging in or logging out of the Linux Web App.
	// Specifies a list of External URLs that can be redirected to as part of logging in or logging out of the Windows Web App.
	// +kubebuilder:validation:Optional
	allowedExternalRedirectUrls?: [...null | string] @go(AllowedExternalRedirectUrls,[]*string)

	// The default authentication provider to use when multiple providers are configured. Possible values include: BuiltInAuthenticationProviderAzureActiveDirectory, BuiltInAuthenticationProviderFacebook, BuiltInAuthenticationProviderGoogle, BuiltInAuthenticationProviderMicrosoftAccount, BuiltInAuthenticationProviderTwitter, BuiltInAuthenticationProviderGithub
	// The default authentication provider to use when multiple providers are configured. Possible values include: `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount`, `Twitter`, `Github`.
	// +kubebuilder:validation:Optional
	defaultProvider?: null | string @go(DefaultProvider,*string)

	// Should the Authentication / Authorization feature be enabled for the Linux Web App?
	// Should the Authentication / Authorization feature be enabled?
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// A facebook block as defined below.
	// +kubebuilder:validation:Optional
	facebook?: [...#LinuxWebAppSlotAuthSettingsFacebookParameters] @go(Facebook,[]LinuxWebAppSlotAuthSettingsFacebookParameters)

	// A github block as defined below.
	// +kubebuilder:validation:Optional
	github?: [...#LinuxWebAppSlotAuthSettingsGithubParameters] @go(Github,[]LinuxWebAppSlotAuthSettingsGithubParameters)

	// A google block as defined below.
	// +kubebuilder:validation:Optional
	google?: [...#LinuxWebAppSlotAuthSettingsGoogleParameters] @go(Google,[]LinuxWebAppSlotAuthSettingsGoogleParameters)

	// The OpenID Connect Issuer URI that represents the entity that issues access tokens for this Linux Web App.
	// The OpenID Connect Issuer URI that represents the entity which issues access tokens.
	// +kubebuilder:validation:Optional
	issuer?: null | string @go(Issuer,*string)

	// A microsoft block as defined below.
	// +kubebuilder:validation:Optional
	microsoft?: [...#LinuxWebAppSlotAuthSettingsMicrosoftParameters] @go(Microsoft,[]LinuxWebAppSlotAuthSettingsMicrosoftParameters)

	// The RuntimeVersion of the Authentication / Authorization feature in use for the Linux Web App.
	// The RuntimeVersion of the Authentication / Authorization feature in use.
	// +kubebuilder:validation:Optional
	runtimeVersion?: null | string @go(RuntimeVersion,*string)

	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72 hours.
	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
	// +kubebuilder:validation:Optional
	tokenRefreshExtensionHours?: null | float64 @go(TokenRefreshExtensionHours,*float64)

	// Should the Linux Web App durably store platform-specific security tokens that are obtained during login flows? Defaults to false.
	// Should the Windows Web App durably store platform-specific security tokens that are obtained during login flows? Defaults to `false`.
	// +kubebuilder:validation:Optional
	tokenStoreEnabled?: null | bool @go(TokenStoreEnabled,*bool)

	// A twitter block as defined below.
	// +kubebuilder:validation:Optional
	twitter?: [...#LinuxWebAppSlotAuthSettingsTwitterParameters] @go(Twitter,[]LinuxWebAppSlotAuthSettingsTwitterParameters)

	// The action to take when an unauthenticated client attempts to access the app. Possible values include: RedirectToLoginPage, AllowAnonymous.
	// The action to take when an unauthenticated client attempts to access the app. Possible values include: `RedirectToLoginPage`, `AllowAnonymous`.
	// +kubebuilder:validation:Optional
	unauthenticatedClientAction?: null | string @go(UnauthenticatedClientAction,*string)
}

#LinuxWebAppSlotAuthSettingsTwitterInitParameters: {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	consumerKey?: null | string @go(ConsumerKey,*string)

	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in.
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in. Cannot be specified with `consumer_secret`.
	consumerSecretSettingName?: null | string @go(ConsumerSecretSettingName,*string)
}

#LinuxWebAppSlotAuthSettingsTwitterObservation: {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	consumerKey?: null | string @go(ConsumerKey,*string)

	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in.
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in. Cannot be specified with `consumer_secret`.
	consumerSecretSettingName?: null | string @go(ConsumerSecretSettingName,*string)
}

#LinuxWebAppSlotAuthSettingsTwitterParameters: {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// +kubebuilder:validation:Optional
	consumerKey?: null | string @go(ConsumerKey,*string)

	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in.
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in. Cannot be specified with `consumer_secret`.
	// +kubebuilder:validation:Optional
	consumerSecretSettingName?: null | string @go(ConsumerSecretSettingName,*string)
}

#LinuxWebAppSlotAuthSettingsV2ActiveDirectoryV2InitParameters: {
	// The list of allowed Applications for the Default Authorisation Policy.
	// The list of allowed Applications for the Default Authorisation Policy.
	allowedApplications?: [...null | string] @go(AllowedApplications,[]*string)

	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The list of allowed Group Names for the Default Authorisation Policy.
	// The list of allowed Group Names for the Default Authorisation Policy.
	allowedGroups?: [...null | string] @go(AllowedGroups,[]*string)

	// The list of allowed Identities for the Default Authorisation Policy.
	// The list of allowed Identities for the Default Authorisation Policy.
	allowedIdentities?: [...null | string] @go(AllowedIdentities,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with Azure Active Directory.
	clientId?: null | string @go(ClientID,*string)

	// The thumbprint of the certificate used for signing purposes.
	// The thumbprint of the certificate used for signing purposes.
	clientSecretCertificateThumbprint?: null | string @go(ClientSecretCertificateThumbprint,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The App Setting name that contains the client secret of the Client.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// A list of Allowed Client Applications in the JWT Claim.
	// A list of Allowed Client Applications in the JWT Claim.
	jwtAllowedClientApplications?: [...null | string] @go(JwtAllowedClientApplications,[]*string)

	// A list of Allowed Groups in the JWT Claim.
	// A list of Allowed Groups in the JWT Claim.
	jwtAllowedGroups?: [...null | string] @go(JwtAllowedGroups,[]*string)

	// A map of key-value pairs to send to the Authorisation Endpoint when a user logs in.
	// A map of key-value pairs to send to the Authorisation Endpoint when a user logs in.
	loginParameters?: {[string]: null | string} @go(LoginParameters,map[string]*string)

	// The Azure Tenant Endpoint for the Authenticating Tenant. e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/
	// The Azure Tenant Endpoint for the Authenticating Tenant. e.g. `https://login.microsoftonline.com/v2.0/{tenant-guid}/`.
	tenantAuthEndpoint?: null | string @go(TenantAuthEndpoint,*string)

	// Should the www-authenticate provider should be omitted from the request? Defaults to false
	// Should the www-authenticate provider should be omitted from the request? Defaults to `false`
	wwwAuthenticationDisabled?: null | bool @go(WwwAuthenticationDisabled,*bool)
}

#LinuxWebAppSlotAuthSettingsV2ActiveDirectoryV2Observation: {
	// The list of allowed Applications for the Default Authorisation Policy.
	// The list of allowed Applications for the Default Authorisation Policy.
	allowedApplications?: [...null | string] @go(AllowedApplications,[]*string)

	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The list of allowed Group Names for the Default Authorisation Policy.
	// The list of allowed Group Names for the Default Authorisation Policy.
	allowedGroups?: [...null | string] @go(AllowedGroups,[]*string)

	// The list of allowed Identities for the Default Authorisation Policy.
	// The list of allowed Identities for the Default Authorisation Policy.
	allowedIdentities?: [...null | string] @go(AllowedIdentities,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with Azure Active Directory.
	clientId?: null | string @go(ClientID,*string)

	// The thumbprint of the certificate used for signing purposes.
	// The thumbprint of the certificate used for signing purposes.
	clientSecretCertificateThumbprint?: null | string @go(ClientSecretCertificateThumbprint,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The App Setting name that contains the client secret of the Client.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// A list of Allowed Client Applications in the JWT Claim.
	// A list of Allowed Client Applications in the JWT Claim.
	jwtAllowedClientApplications?: [...null | string] @go(JwtAllowedClientApplications,[]*string)

	// A list of Allowed Groups in the JWT Claim.
	// A list of Allowed Groups in the JWT Claim.
	jwtAllowedGroups?: [...null | string] @go(JwtAllowedGroups,[]*string)

	// A map of key-value pairs to send to the Authorisation Endpoint when a user logs in.
	// A map of key-value pairs to send to the Authorisation Endpoint when a user logs in.
	loginParameters?: {[string]: null | string} @go(LoginParameters,map[string]*string)

	// The Azure Tenant Endpoint for the Authenticating Tenant. e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/
	// The Azure Tenant Endpoint for the Authenticating Tenant. e.g. `https://login.microsoftonline.com/v2.0/{tenant-guid}/`.
	tenantAuthEndpoint?: null | string @go(TenantAuthEndpoint,*string)

	// Should the www-authenticate provider should be omitted from the request? Defaults to false
	// Should the www-authenticate provider should be omitted from the request? Defaults to `false`
	wwwAuthenticationDisabled?: null | bool @go(WwwAuthenticationDisabled,*bool)
}

#LinuxWebAppSlotAuthSettingsV2ActiveDirectoryV2Parameters: {
	// The list of allowed Applications for the Default Authorisation Policy.
	// The list of allowed Applications for the Default Authorisation Policy.
	// +kubebuilder:validation:Optional
	allowedApplications?: [...null | string] @go(AllowedApplications,[]*string)

	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed audience values to consider when validating JWTs issued by Azure Active Directory.
	// +kubebuilder:validation:Optional
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The list of allowed Group Names for the Default Authorisation Policy.
	// The list of allowed Group Names for the Default Authorisation Policy.
	// +kubebuilder:validation:Optional
	allowedGroups?: [...null | string] @go(AllowedGroups,[]*string)

	// The list of allowed Identities for the Default Authorisation Policy.
	// The list of allowed Identities for the Default Authorisation Policy.
	// +kubebuilder:validation:Optional
	allowedIdentities?: [...null | string] @go(AllowedIdentities,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with Azure Active Directory.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The thumbprint of the certificate used for signing purposes.
	// The thumbprint of the certificate used for signing purposes.
	// +kubebuilder:validation:Optional
	clientSecretCertificateThumbprint?: null | string @go(ClientSecretCertificateThumbprint,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The App Setting name that contains the client secret of the Client.
	// +kubebuilder:validation:Optional
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// A list of Allowed Client Applications in the JWT Claim.
	// A list of Allowed Client Applications in the JWT Claim.
	// +kubebuilder:validation:Optional
	jwtAllowedClientApplications?: [...null | string] @go(JwtAllowedClientApplications,[]*string)

	// A list of Allowed Groups in the JWT Claim.
	// A list of Allowed Groups in the JWT Claim.
	// +kubebuilder:validation:Optional
	jwtAllowedGroups?: [...null | string] @go(JwtAllowedGroups,[]*string)

	// A map of key-value pairs to send to the Authorisation Endpoint when a user logs in.
	// A map of key-value pairs to send to the Authorisation Endpoint when a user logs in.
	// +kubebuilder:validation:Optional
	loginParameters?: {[string]: null | string} @go(LoginParameters,map[string]*string)

	// The Azure Tenant Endpoint for the Authenticating Tenant. e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/
	// The Azure Tenant Endpoint for the Authenticating Tenant. e.g. `https://login.microsoftonline.com/v2.0/{tenant-guid}/`.
	// +kubebuilder:validation:Optional
	tenantAuthEndpoint?: null | string @go(TenantAuthEndpoint,*string)

	// Should the www-authenticate provider should be omitted from the request? Defaults to false
	// Should the www-authenticate provider should be omitted from the request? Defaults to `false`
	// +kubebuilder:validation:Optional
	wwwAuthenticationDisabled?: null | bool @go(WwwAuthenticationDisabled,*bool)
}

#LinuxWebAppSlotAuthSettingsV2AppleV2InitParameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OpenID Connect Client ID for the Apple web application.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for Apple Login.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)
}

#LinuxWebAppSlotAuthSettingsV2AppleV2Observation: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OpenID Connect Client ID for the Apple web application.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for Apple Login.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2AppleV2Parameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OpenID Connect Client ID for the Apple web application.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for Apple Login.
	// +kubebuilder:validation:Optional
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)
}

#LinuxWebAppSlotAuthSettingsV2AzureStaticWebAppV2InitParameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with Azure Static Web App Authentication.
	clientId?: null | string @go(ClientID,*string)
}

#LinuxWebAppSlotAuthSettingsV2AzureStaticWebAppV2Observation: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with Azure Static Web App Authentication.
	clientId?: null | string @go(ClientID,*string)
}

#LinuxWebAppSlotAuthSettingsV2AzureStaticWebAppV2Parameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with Azure Static Web App Authentication.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)
}

#LinuxWebAppSlotAuthSettingsV2CustomOidcV2InitParameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with this Custom OIDC.
	clientId?: null | string @go(ClientID,*string)

	// The name which should be used for this Storage Account.
	// The name of the Custom OIDC Authentication Provider.
	name?: null | string @go(Name,*string)

	// The name of the claim that contains the users name.
	// The name of the claim that contains the users name.
	nameClaimType?: null | string @go(NameClaimType,*string)

	// The app setting name that contains the client_secret value used for the Custom OIDC Login.
	// The endpoint that contains all the configuration endpoints for this Custom OIDC provider.
	openidConfigurationEndpoint?: null | string @go(OpenIDConfigurationEndpoint,*string)

	// The list of the scopes that should be requested while authenticating.
	// The list of the scopes that should be requested while authenticating.
	scopes?: [...null | string] @go(Scopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2CustomOidcV2Observation: {
	// The endpoint to make the Authorisation Request as supplied by openid_configuration_endpoint response.
	// The endpoint to make the Authorisation Request.
	authorisationEndpoint?: null | string @go(AuthorisationEndpoint,*string)

	// The endpoint that provides the keys necessary to validate the token as supplied by openid_configuration_endpoint response.
	// The endpoint that provides the keys necessary to validate the token.
	certificationUri?: null | string @go(CertificationURI,*string)

	// The Client Credential Method used.
	// The Client Credential Method used. Currently the only supported value is `ClientSecretPost`.
	clientCredentialMethod?: null | string @go(ClientCredentialMethod,*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with this Custom OIDC.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The App Setting name that contains the secret for this Custom OIDC Client.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// The endpoint that issued the Token as supplied by openid_configuration_endpoint response.
	// The endpoint that issued the Token.
	issuerEndpoint?: null | string @go(IssuerEndpoint,*string)

	// The name which should be used for this Storage Account.
	// The name of the Custom OIDC Authentication Provider.
	name?: null | string @go(Name,*string)

	// The name of the claim that contains the users name.
	// The name of the claim that contains the users name.
	nameClaimType?: null | string @go(NameClaimType,*string)

	// The app setting name that contains the client_secret value used for the Custom OIDC Login.
	// The endpoint that contains all the configuration endpoints for this Custom OIDC provider.
	openidConfigurationEndpoint?: null | string @go(OpenIDConfigurationEndpoint,*string)

	// The list of the scopes that should be requested while authenticating.
	// The list of the scopes that should be requested while authenticating.
	scopes?: [...null | string] @go(Scopes,[]*string)

	// The endpoint used to request a Token as supplied by openid_configuration_endpoint response.
	// The endpoint used to request a Token.
	tokenEndpoint?: null | string @go(TokenEndpoint,*string)
}

#LinuxWebAppSlotAuthSettingsV2CustomOidcV2Parameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the Client to use to authenticate with this Custom OIDC.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The name which should be used for this Storage Account.
	// The name of the Custom OIDC Authentication Provider.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The name of the claim that contains the users name.
	// The name of the claim that contains the users name.
	// +kubebuilder:validation:Optional
	nameClaimType?: null | string @go(NameClaimType,*string)

	// The app setting name that contains the client_secret value used for the Custom OIDC Login.
	// The endpoint that contains all the configuration endpoints for this Custom OIDC provider.
	// +kubebuilder:validation:Optional
	openidConfigurationEndpoint?: null | string @go(OpenIDConfigurationEndpoint,*string)

	// The list of the scopes that should be requested while authenticating.
	// The list of the scopes that should be requested while authenticating.
	// +kubebuilder:validation:Optional
	scopes?: [...null | string] @go(Scopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2FacebookV2InitParameters: {
	// The App ID of the Facebook app used for login.
	// The App ID of the Facebook app used for login.
	appId?: null | string @go(AppID,*string)

	// The app setting name that contains the app_secret value used for Facebook Login.
	// The app setting name that contains the `app_secret` value used for Facebook Login.
	appSecretSettingName?: null | string @go(AppSecretSettingName,*string)

	// The version of the Facebook API to be used while logging in.
	// The version of the Facebook API to be used while logging in.
	graphApiVersion?: null | string @go(GraphAPIVersion,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// Specifies a list of scopes to be requested as part of Facebook Login authentication.
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2FacebookV2Observation: {
	// The App ID of the Facebook app used for login.
	// The App ID of the Facebook app used for login.
	appId?: null | string @go(AppID,*string)

	// The app setting name that contains the app_secret value used for Facebook Login.
	// The app setting name that contains the `app_secret` value used for Facebook Login.
	appSecretSettingName?: null | string @go(AppSecretSettingName,*string)

	// The version of the Facebook API to be used while logging in.
	// The version of the Facebook API to be used while logging in.
	graphApiVersion?: null | string @go(GraphAPIVersion,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// Specifies a list of scopes to be requested as part of Facebook Login authentication.
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2FacebookV2Parameters: {
	// The App ID of the Facebook app used for login.
	// The App ID of the Facebook app used for login.
	// +kubebuilder:validation:Optional
	appId?: null | string @go(AppID,*string)

	// The app setting name that contains the app_secret value used for Facebook Login.
	// The app setting name that contains the `app_secret` value used for Facebook Login.
	// +kubebuilder:validation:Optional
	appSecretSettingName?: null | string @go(AppSecretSettingName,*string)

	// The version of the Facebook API to be used while logging in.
	// The version of the Facebook API to be used while logging in.
	// +kubebuilder:validation:Optional
	graphApiVersion?: null | string @go(GraphAPIVersion,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// Specifies a list of scopes to be requested as part of Facebook Login authentication.
	// +kubebuilder:validation:Optional
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2GithubV2InitParameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the GitHub app used for login.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for GitHub Login.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// Specifies a list of OAuth 2.0 scopes that will be requested as part of GitHub Login authentication.
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2GithubV2Observation: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the GitHub app used for login.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for GitHub Login.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// Specifies a list of OAuth 2.0 scopes that will be requested as part of GitHub Login authentication.
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2GithubV2Parameters: {
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The ID of the GitHub app used for login.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for GitHub Login.
	// +kubebuilder:validation:Optional
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// Specifies a list of OAuth 2.0 scopes that will be requested as part of GitHub Login authentication.
	// +kubebuilder:validation:Optional
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2GoogleV2InitParameters: {
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed Audiences that will be requested as part of Google Sign-In authentication.
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OpenID Connect Client ID for the Google web application.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for Google Login.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// Specifies a list of Login scopes that will be requested as part of Google Sign-In authentication.
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2GoogleV2Observation: {
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed Audiences that will be requested as part of Google Sign-In authentication.
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OpenID Connect Client ID for the Google web application.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for Google Login.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// Specifies a list of Login scopes that will be requested as part of Google Sign-In authentication.
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2GoogleV2Parameters: {
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed Audiences that will be requested as part of Google Sign-In authentication.
	// +kubebuilder:validation:Optional
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OpenID Connect Client ID for the Google web application.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name that contains the `client_secret` value used for Google Login.
	// +kubebuilder:validation:Optional
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// Specifies a list of Login scopes that will be requested as part of Google Sign-In authentication.
	// +kubebuilder:validation:Optional
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2InitParameters: {
	// An active_directory_v2 block as defined below.
	activeDirectoryV2?: [...#LinuxWebAppSlotAuthSettingsV2ActiveDirectoryV2InitParameters] @go(ActiveDirectoryV2,[]LinuxWebAppSlotAuthSettingsV2ActiveDirectoryV2InitParameters)

	// An apple_v2 block as defined below.
	appleV2?: [...#LinuxWebAppSlotAuthSettingsV2AppleV2InitParameters] @go(AppleV2,[]LinuxWebAppSlotAuthSettingsV2AppleV2InitParameters)

	// Should the AuthV2 Settings be enabled. Defaults to false.
	// Should the AuthV2 Settings be enabled. Defaults to `false`
	authEnabled?: null | bool @go(AuthEnabled,*bool)

	// An azure_static_web_app_v2 block as defined below.
	azureStaticWebAppV2?: [...#LinuxWebAppSlotAuthSettingsV2AzureStaticWebAppV2InitParameters] @go(AzureStaticWebAppV2,[]LinuxWebAppSlotAuthSettingsV2AzureStaticWebAppV2InitParameters)

	// The path to the App Auth settings.
	// The path to the App Auth settings. **Note:** Relative Paths are evaluated from the Site Root directory.
	configFilePath?: null | string @go(ConfigFilePath,*string)

	// Zero or more custom_oidc_v2 blocks as defined below.
	customOidcV2?: [...#LinuxWebAppSlotAuthSettingsV2CustomOidcV2InitParameters] @go(CustomOidcV2,[]LinuxWebAppSlotAuthSettingsV2CustomOidcV2InitParameters)

	// The Default Authentication Provider to use when more than one Authentication Provider is configured and the unauthenticated_action is set to RedirectToLoginPage.
	// The Default Authentication Provider to use when the `unauthenticated_action` is set to `RedirectToLoginPage`.
	defaultProvider?: null | string @go(DefaultProvider,*string)

	// The paths which should be excluded from the unauthenticated_action when it is set to RedirectToLoginPage.
	// The paths which should be excluded from the `unauthenticated_action` when it is set to `RedirectToLoginPage`.
	excludedPaths?: [...null | string] @go(ExcludedPaths,[]*string)

	// A facebook_v2 block as defined below.
	facebookV2?: [...#LinuxWebAppSlotAuthSettingsV2FacebookV2InitParameters] @go(FacebookV2,[]LinuxWebAppSlotAuthSettingsV2FacebookV2InitParameters)

	// The convention used to determine the url of the request made. Possible values include ForwardProxyConventionNoProxy, ForwardProxyConventionStandard, ForwardProxyConventionCustom. Defaults to ForwardProxyConventionNoProxy.
	// The convention used to determine the url of the request made. Possible values include `ForwardProxyConventionNoProxy`, `ForwardProxyConventionStandard`, `ForwardProxyConventionCustom`. Defaults to `ForwardProxyConventionNoProxy`
	forwardProxyConvention?: null | string @go(ForwardProxyConvention,*string)

	// The name of the custom header containing the host of the request.
	// The name of the header containing the host of the request.
	forwardProxyCustomHostHeaderName?: null | string @go(ForwardProxyCustomHostHeaderName,*string)

	// The name of the custom header containing the scheme of the request.
	// The name of the header containing the scheme of the request.
	forwardProxyCustomSchemeHeaderName?: null | string @go(ForwardProxyCustomSchemeHeaderName,*string)

	// A github_v2 block as defined below.
	githubV2?: [...#LinuxWebAppSlotAuthSettingsV2GithubV2InitParameters] @go(GithubV2,[]LinuxWebAppSlotAuthSettingsV2GithubV2InitParameters)

	// A google_v2 block as defined below.
	googleV2?: [...#LinuxWebAppSlotAuthSettingsV2GoogleV2InitParameters] @go(GoogleV2,[]LinuxWebAppSlotAuthSettingsV2GoogleV2InitParameters)

	// The prefix that should precede all the authentication and authorisation paths. Defaults to /.auth.
	// The prefix that should precede all the authentication and authorisation paths. Defaults to `/.auth`
	httpRouteApiPrefix?: null | string @go(HTTPRouteAPIPrefix,*string)

	// A login block as defined below.
	login?: [...#LinuxWebAppSlotAuthSettingsV2LoginInitParameters] @go(Login,[]LinuxWebAppSlotAuthSettingsV2LoginInitParameters)

	// A microsoft_v2 block as defined below.
	microsoftV2?: [...#LinuxWebAppSlotAuthSettingsV2MicrosoftV2InitParameters] @go(MicrosoftV2,[]LinuxWebAppSlotAuthSettingsV2MicrosoftV2InitParameters)

	// Should the authentication flow be used for all requests.
	// Should the authentication flow be used for all requests.
	requireAuthentication?: null | bool @go(RequireAuthentication,*bool)

	// Should HTTPS be required on connections? Defaults to true.
	// Should HTTPS be required on connections? Defaults to true.
	requireHttps?: null | bool @go(RequireHTTPS,*bool)

	// The Runtime Version of the Authentication and Authorisation feature of this App. Defaults to ~1.
	// The Runtime Version of the Authentication and Authorisation feature of this App. Defaults to `~1`
	runtimeVersion?: null | string @go(RuntimeVersion,*string)

	// A twitter_v2 block as defined below.
	twitterV2?: [...#LinuxWebAppSlotAuthSettingsV2TwitterV2InitParameters] @go(TwitterV2,[]LinuxWebAppSlotAuthSettingsV2TwitterV2InitParameters)

	// The action to take for requests made without authentication. Possible values include RedirectToLoginPage, AllowAnonymous, Return401, and Return403. Defaults to RedirectToLoginPage.
	// The action to take for requests made without authentication. Possible values include `RedirectToLoginPage`, `AllowAnonymous`, `Return401`, and `Return403`. Defaults to `RedirectToLoginPage`.
	unauthenticatedAction?: null | string @go(UnauthenticatedAction,*string)
}

#LinuxWebAppSlotAuthSettingsV2LoginInitParameters: {
	// External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends.
	// External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends. **Note:** URLs within the current domain are always implicitly allowed.
	allowedExternalRedirectUrls?: [...null | string] @go(AllowedExternalRedirectUrls,[]*string)

	// The method by which cookies expire. Possible values include: FixedTime, and IdentityProviderDerived. Defaults to FixedTime.
	// The method by which cookies expire. Possible values include: `FixedTime`, and `IdentityProviderDerived`. Defaults to `FixedTime`.
	cookieExpirationConvention?: null | string @go(CookieExpirationConvention,*string)

	// The time after the request is made when the session cookie should expire. Defaults to 08:00:00.
	// The time after the request is made when the session cookie should expire. Defaults to `08:00:00`.
	cookieExpirationTime?: null | string @go(CookieExpirationTime,*string)

	// The endpoint to which logout requests should be made.
	// The endpoint to which logout requests should be made.
	logoutEndpoint?: null | string @go(LogoutEndpoint,*string)

	// The time after the request is made when the nonce should expire. Defaults to 00:05:00.
	// The time after the request is made when the nonce should expire. Defaults to `00:05:00`.
	nonceExpirationTime?: null | string @go(NonceExpirationTime,*string)

	// Should the fragments from the request be preserved after the login request is made. Defaults to false.
	// Should the fragments from the request be preserved after the login request is made. Defaults to `false`.
	preserveUrlFragmentsForLogins?: null | bool @go(PreserveURLFragmentsForLogins,*bool)

	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72 hours.
	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
	tokenRefreshExtensionTime?: null | float64 @go(TokenRefreshExtensionTime,*float64)

	// Should the Token Store configuration Enabled. Defaults to false
	// Should the Token Store configuration Enabled. Defaults to `false`
	tokenStoreEnabled?: null | bool @go(TokenStoreEnabled,*bool)

	// The directory path in the App Filesystem in which the tokens will be stored.
	// The directory path in the App Filesystem in which the tokens will be stored.
	tokenStorePath?: null | string @go(TokenStorePath,*string)

	// The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
	// The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
	tokenStoreSasSettingName?: null | string @go(TokenStoreSASSettingName,*string)

	// Should the nonce be validated while completing the login flow. Defaults to true.
	// Should the nonce be validated while completing the login flow. Defaults to `true`.
	validateNonce?: null | bool @go(ValidateNonce,*bool)
}

#LinuxWebAppSlotAuthSettingsV2LoginObservation: {
	// External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends.
	// External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends. **Note:** URLs within the current domain are always implicitly allowed.
	allowedExternalRedirectUrls?: [...null | string] @go(AllowedExternalRedirectUrls,[]*string)

	// The method by which cookies expire. Possible values include: FixedTime, and IdentityProviderDerived. Defaults to FixedTime.
	// The method by which cookies expire. Possible values include: `FixedTime`, and `IdentityProviderDerived`. Defaults to `FixedTime`.
	cookieExpirationConvention?: null | string @go(CookieExpirationConvention,*string)

	// The time after the request is made when the session cookie should expire. Defaults to 08:00:00.
	// The time after the request is made when the session cookie should expire. Defaults to `08:00:00`.
	cookieExpirationTime?: null | string @go(CookieExpirationTime,*string)

	// The endpoint to which logout requests should be made.
	// The endpoint to which logout requests should be made.
	logoutEndpoint?: null | string @go(LogoutEndpoint,*string)

	// The time after the request is made when the nonce should expire. Defaults to 00:05:00.
	// The time after the request is made when the nonce should expire. Defaults to `00:05:00`.
	nonceExpirationTime?: null | string @go(NonceExpirationTime,*string)

	// Should the fragments from the request be preserved after the login request is made. Defaults to false.
	// Should the fragments from the request be preserved after the login request is made. Defaults to `false`.
	preserveUrlFragmentsForLogins?: null | bool @go(PreserveURLFragmentsForLogins,*bool)

	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72 hours.
	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
	tokenRefreshExtensionTime?: null | float64 @go(TokenRefreshExtensionTime,*float64)

	// Should the Token Store configuration Enabled. Defaults to false
	// Should the Token Store configuration Enabled. Defaults to `false`
	tokenStoreEnabled?: null | bool @go(TokenStoreEnabled,*bool)

	// The directory path in the App Filesystem in which the tokens will be stored.
	// The directory path in the App Filesystem in which the tokens will be stored.
	tokenStorePath?: null | string @go(TokenStorePath,*string)

	// The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
	// The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
	tokenStoreSasSettingName?: null | string @go(TokenStoreSASSettingName,*string)

	// Should the nonce be validated while completing the login flow. Defaults to true.
	// Should the nonce be validated while completing the login flow. Defaults to `true`.
	validateNonce?: null | bool @go(ValidateNonce,*bool)
}

#LinuxWebAppSlotAuthSettingsV2LoginParameters: {
	// External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends.
	// External URLs that can be redirected to as part of logging in or logging out of the app. This is an advanced setting typically only needed by Windows Store application backends. **Note:** URLs within the current domain are always implicitly allowed.
	// +kubebuilder:validation:Optional
	allowedExternalRedirectUrls?: [...null | string] @go(AllowedExternalRedirectUrls,[]*string)

	// The method by which cookies expire. Possible values include: FixedTime, and IdentityProviderDerived. Defaults to FixedTime.
	// The method by which cookies expire. Possible values include: `FixedTime`, and `IdentityProviderDerived`. Defaults to `FixedTime`.
	// +kubebuilder:validation:Optional
	cookieExpirationConvention?: null | string @go(CookieExpirationConvention,*string)

	// The time after the request is made when the session cookie should expire. Defaults to 08:00:00.
	// The time after the request is made when the session cookie should expire. Defaults to `08:00:00`.
	// +kubebuilder:validation:Optional
	cookieExpirationTime?: null | string @go(CookieExpirationTime,*string)

	// The endpoint to which logout requests should be made.
	// The endpoint to which logout requests should be made.
	// +kubebuilder:validation:Optional
	logoutEndpoint?: null | string @go(LogoutEndpoint,*string)

	// The time after the request is made when the nonce should expire. Defaults to 00:05:00.
	// The time after the request is made when the nonce should expire. Defaults to `00:05:00`.
	// +kubebuilder:validation:Optional
	nonceExpirationTime?: null | string @go(NonceExpirationTime,*string)

	// Should the fragments from the request be preserved after the login request is made. Defaults to false.
	// Should the fragments from the request be preserved after the login request is made. Defaults to `false`.
	// +kubebuilder:validation:Optional
	preserveUrlFragmentsForLogins?: null | bool @go(PreserveURLFragmentsForLogins,*bool)

	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72 hours.
	// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to `72` hours.
	// +kubebuilder:validation:Optional
	tokenRefreshExtensionTime?: null | float64 @go(TokenRefreshExtensionTime,*float64)

	// Should the Token Store configuration Enabled. Defaults to false
	// Should the Token Store configuration Enabled. Defaults to `false`
	// +kubebuilder:validation:Optional
	tokenStoreEnabled?: null | bool @go(TokenStoreEnabled,*bool)

	// The directory path in the App Filesystem in which the tokens will be stored.
	// The directory path in the App Filesystem in which the tokens will be stored.
	// +kubebuilder:validation:Optional
	tokenStorePath?: null | string @go(TokenStorePath,*string)

	// The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
	// The name of the app setting which contains the SAS URL of the blob storage containing the tokens.
	// +kubebuilder:validation:Optional
	tokenStoreSasSettingName?: null | string @go(TokenStoreSASSettingName,*string)

	// Should the nonce be validated while completing the login flow. Defaults to true.
	// Should the nonce be validated while completing the login flow. Defaults to `true`.
	// +kubebuilder:validation:Optional
	validateNonce?: null | bool @go(ValidateNonce,*bool)
}

#LinuxWebAppSlotAuthSettingsV2MicrosoftV2InitParameters: {
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// The list of Login scopes that will be requested as part of Microsoft Account authentication.
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2MicrosoftV2Observation: {
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// The list of Login scopes that will be requested as part of Microsoft Account authentication.
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2MicrosoftV2Parameters: {
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// Specifies a list of Allowed Audiences that will be requested as part of Microsoft Sign-In authentication.
	// +kubebuilder:validation:Optional
	allowedAudiences?: [...null | string] @go(AllowedAudiences,[]*string)

	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// The OAuth 2.0 client ID that was created for the app used for authentication.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	// +kubebuilder:validation:Optional
	clientSecretSettingName?: null | string @go(ClientSecretSettingName,*string)

	// The list of Login scopes that should be requested as part of Microsoft Account authentication.
	// The list of Login scopes that will be requested as part of Microsoft Account authentication.
	// +kubebuilder:validation:Optional
	loginScopes?: [...null | string] @go(LoginScopes,[]*string)
}

#LinuxWebAppSlotAuthSettingsV2Observation: {
	// An active_directory_v2 block as defined below.
	activeDirectoryV2?: [...#LinuxWebAppSlotAuthSettingsV2ActiveDirectoryV2Observation] @go(ActiveDirectoryV2,[]LinuxWebAppSlotAuthSettingsV2ActiveDirectoryV2Observation)

	// An apple_v2 block as defined below.
	appleV2?: [...#LinuxWebAppSlotAuthSettingsV2AppleV2Observation] @go(AppleV2,[]LinuxWebAppSlotAuthSettingsV2AppleV2Observation)

	// Should the AuthV2 Settings be enabled. Defaults to false.
	// Should the AuthV2 Settings be enabled. Defaults to `false`
	authEnabled?: null | bool @go(AuthEnabled,*bool)

	// An azure_static_web_app_v2 block as defined below.
	azureStaticWebAppV2?: [...#LinuxWebAppSlotAuthSettingsV2AzureStaticWebAppV2Observation] @go(AzureStaticWebAppV2,[]LinuxWebAppSlotAuthSettingsV2AzureStaticWebAppV2Observation)

	// The path to the App Auth settings.
	// The path to the App Auth settings. **Note:** Relative Paths are evaluated from the Site Root directory.
	configFilePath?: null | string @go(ConfigFilePath,*string)

	// Zero or more custom_oidc_v2 blocks as defined below.
	customOidcV2?: [...#LinuxWebAppSlotAuthSettingsV2CustomOidcV2Observation] @go(CustomOidcV2,[]LinuxWebAppSlotAuthSettingsV2CustomOidcV2Observation)

	// The Default Authentication Provider to use when more than one Authentication Provider is configured and the unauthenticated_action is set to RedirectToLoginPage.
	// The Default Authentication Provider to use when the `unauthenticated_action` is set to `RedirectToLoginPage`.
	defaultProvider?: null | string @go(DefaultProvider,*string)

	// The paths which should be excluded from the unauthenticated_action when it is set to RedirectToLoginPage.
	// The paths which should be excluded from the `unauthenticated_action` when it is set to `RedirectToLoginPage`.
	excludedPaths?: [...null | string] @go(ExcludedPaths,[]*string)

	// A facebook_v2 block as defined below.
	facebookV2?: [...#LinuxWebAppSlotAuthSettingsV2FacebookV2Observation] @go(FacebookV2,[]LinuxWebAppSlotAuthSettingsV2FacebookV2Observation)

	// The convention used to determine the url of the request made. Possible values include ForwardProxyConventionNoProxy, ForwardProxyConventionStandard, ForwardProxyConventionCustom. Defaults to ForwardProxyConventionNoProxy.
	// The convention used to determine the url of the request made. Possible values include `ForwardProxyConventionNoProxy`, `ForwardProxyConventionStandard`, `ForwardProxyConventionCustom`. Defaults to `ForwardProxyConventionNoProxy`
	forwardProxyConvention?: null | string @go(ForwardProxyConvention,*string)

	// The name of the custom header containing the host of the request.
	// The name of the header containing the host of the request.
	forwardProxyCustomHostHeaderName?: null | string @go(ForwardProxyCustomHostHeaderName,*string)

	// The name of the custom header containing the scheme of the request.
	// The name of the header containing the scheme of the request.
	forwardProxyCustomSchemeHeaderName?: null | string @go(ForwardProxyCustomSchemeHeaderName,*string)

	// A github_v2 block as defined below.
	githubV2?: [...#LinuxWebAppSlotAuthSettingsV2GithubV2Observation] @go(GithubV2,[]LinuxWebAppSlotAuthSettingsV2GithubV2Observation)

	// A google_v2 block as defined below.
	googleV2?: [...#LinuxWebAppSlotAuthSettingsV2GoogleV2Observation] @go(GoogleV2,[]LinuxWebAppSlotAuthSettingsV2GoogleV2Observation)

	// The prefix that should precede all the authentication and authorisation paths. Defaults to /.auth.
	// The prefix that should precede all the authentication and authorisation paths. Defaults to `/.auth`
	httpRouteApiPrefix?: null | string @go(HTTPRouteAPIPrefix,*string)

	// A login block as defined below.
	login?: [...#LinuxWebAppSlotAuthSettingsV2LoginObservation] @go(Login,[]LinuxWebAppSlotAuthSettingsV2LoginObservation)

	// A microsoft_v2 block as defined below.
	microsoftV2?: [...#LinuxWebAppSlotAuthSettingsV2MicrosoftV2Observation] @go(MicrosoftV2,[]LinuxWebAppSlotAuthSettingsV2MicrosoftV2Observation)

	// Should the authentication flow be used for all requests.
	// Should the authentication flow be used for all requests.
	requireAuthentication?: null | bool @go(RequireAuthentication,*bool)

	// Should HTTPS be required on connections? Defaults to true.
	// Should HTTPS be required on connections? Defaults to true.
	requireHttps?: null | bool @go(RequireHTTPS,*bool)

	// The Runtime Version of the Authentication and Authorisation feature of this App. Defaults to ~1.
	// The Runtime Version of the Authentication and Authorisation feature of this App. Defaults to `~1`
	runtimeVersion?: null | string @go(RuntimeVersion,*string)

	// A twitter_v2 block as defined below.
	twitterV2?: [...#LinuxWebAppSlotAuthSettingsV2TwitterV2Observation] @go(TwitterV2,[]LinuxWebAppSlotAuthSettingsV2TwitterV2Observation)

	// The action to take for requests made without authentication. Possible values include RedirectToLoginPage, AllowAnonymous, Return401, and Return403. Defaults to RedirectToLoginPage.
	// The action to take for requests made without authentication. Possible values include `RedirectToLoginPage`, `AllowAnonymous`, `Return401`, and `Return403`. Defaults to `RedirectToLoginPage`.
	unauthenticatedAction?: null | string @go(UnauthenticatedAction,*string)
}

#LinuxWebAppSlotAuthSettingsV2Parameters: {
	// An active_directory_v2 block as defined below.
	// +kubebuilder:validation:Optional
	activeDirectoryV2?: [...#LinuxWebAppSlotAuthSettingsV2ActiveDirectoryV2Parameters] @go(ActiveDirectoryV2,[]LinuxWebAppSlotAuthSettingsV2ActiveDirectoryV2Parameters)

	// An apple_v2 block as defined below.
	// +kubebuilder:validation:Optional
	appleV2?: [...#LinuxWebAppSlotAuthSettingsV2AppleV2Parameters] @go(AppleV2,[]LinuxWebAppSlotAuthSettingsV2AppleV2Parameters)

	// Should the AuthV2 Settings be enabled. Defaults to false.
	// Should the AuthV2 Settings be enabled. Defaults to `false`
	// +kubebuilder:validation:Optional
	authEnabled?: null | bool @go(AuthEnabled,*bool)

	// An azure_static_web_app_v2 block as defined below.
	// +kubebuilder:validation:Optional
	azureStaticWebAppV2?: [...#LinuxWebAppSlotAuthSettingsV2AzureStaticWebAppV2Parameters] @go(AzureStaticWebAppV2,[]LinuxWebAppSlotAuthSettingsV2AzureStaticWebAppV2Parameters)

	// The path to the App Auth settings.
	// The path to the App Auth settings. **Note:** Relative Paths are evaluated from the Site Root directory.
	// +kubebuilder:validation:Optional
	configFilePath?: null | string @go(ConfigFilePath,*string)

	// Zero or more custom_oidc_v2 blocks as defined below.
	// +kubebuilder:validation:Optional
	customOidcV2?: [...#LinuxWebAppSlotAuthSettingsV2CustomOidcV2Parameters] @go(CustomOidcV2,[]LinuxWebAppSlotAuthSettingsV2CustomOidcV2Parameters)

	// The Default Authentication Provider to use when more than one Authentication Provider is configured and the unauthenticated_action is set to RedirectToLoginPage.
	// The Default Authentication Provider to use when the `unauthenticated_action` is set to `RedirectToLoginPage`.
	// +kubebuilder:validation:Optional
	defaultProvider?: null | string @go(DefaultProvider,*string)

	// The paths which should be excluded from the unauthenticated_action when it is set to RedirectToLoginPage.
	// The paths which should be excluded from the `unauthenticated_action` when it is set to `RedirectToLoginPage`.
	// +kubebuilder:validation:Optional
	excludedPaths?: [...null | string] @go(ExcludedPaths,[]*string)

	// A facebook_v2 block as defined below.
	// +kubebuilder:validation:Optional
	facebookV2?: [...#LinuxWebAppSlotAuthSettingsV2FacebookV2Parameters] @go(FacebookV2,[]LinuxWebAppSlotAuthSettingsV2FacebookV2Parameters)

	// The convention used to determine the url of the request made. Possible values include ForwardProxyConventionNoProxy, ForwardProxyConventionStandard, ForwardProxyConventionCustom. Defaults to ForwardProxyConventionNoProxy.
	// The convention used to determine the url of the request made. Possible values include `ForwardProxyConventionNoProxy`, `ForwardProxyConventionStandard`, `ForwardProxyConventionCustom`. Defaults to `ForwardProxyConventionNoProxy`
	// +kubebuilder:validation:Optional
	forwardProxyConvention?: null | string @go(ForwardProxyConvention,*string)

	// The name of the custom header containing the host of the request.
	// The name of the header containing the host of the request.
	// +kubebuilder:validation:Optional
	forwardProxyCustomHostHeaderName?: null | string @go(ForwardProxyCustomHostHeaderName,*string)

	// The name of the custom header containing the scheme of the request.
	// The name of the header containing the scheme of the request.
	// +kubebuilder:validation:Optional
	forwardProxyCustomSchemeHeaderName?: null | string @go(ForwardProxyCustomSchemeHeaderName,*string)

	// A github_v2 block as defined below.
	// +kubebuilder:validation:Optional
	githubV2?: [...#LinuxWebAppSlotAuthSettingsV2GithubV2Parameters] @go(GithubV2,[]LinuxWebAppSlotAuthSettingsV2GithubV2Parameters)

	// A google_v2 block as defined below.
	// +kubebuilder:validation:Optional
	googleV2?: [...#LinuxWebAppSlotAuthSettingsV2GoogleV2Parameters] @go(GoogleV2,[]LinuxWebAppSlotAuthSettingsV2GoogleV2Parameters)

	// The prefix that should precede all the authentication and authorisation paths. Defaults to /.auth.
	// The prefix that should precede all the authentication and authorisation paths. Defaults to `/.auth`
	// +kubebuilder:validation:Optional
	httpRouteApiPrefix?: null | string @go(HTTPRouteAPIPrefix,*string)

	// A login block as defined below.
	// +kubebuilder:validation:Optional
	login: [...#LinuxWebAppSlotAuthSettingsV2LoginParameters] @go(Login,[]LinuxWebAppSlotAuthSettingsV2LoginParameters)

	// A microsoft_v2 block as defined below.
	// +kubebuilder:validation:Optional
	microsoftV2?: [...#LinuxWebAppSlotAuthSettingsV2MicrosoftV2Parameters] @go(MicrosoftV2,[]LinuxWebAppSlotAuthSettingsV2MicrosoftV2Parameters)

	// Should the authentication flow be used for all requests.
	// Should the authentication flow be used for all requests.
	// +kubebuilder:validation:Optional
	requireAuthentication?: null | bool @go(RequireAuthentication,*bool)

	// Should HTTPS be required on connections? Defaults to true.
	// Should HTTPS be required on connections? Defaults to true.
	// +kubebuilder:validation:Optional
	requireHttps?: null | bool @go(RequireHTTPS,*bool)

	// The Runtime Version of the Authentication and Authorisation feature of this App. Defaults to ~1.
	// The Runtime Version of the Authentication and Authorisation feature of this App. Defaults to `~1`
	// +kubebuilder:validation:Optional
	runtimeVersion?: null | string @go(RuntimeVersion,*string)

	// A twitter_v2 block as defined below.
	// +kubebuilder:validation:Optional
	twitterV2?: [...#LinuxWebAppSlotAuthSettingsV2TwitterV2Parameters] @go(TwitterV2,[]LinuxWebAppSlotAuthSettingsV2TwitterV2Parameters)

	// The action to take for requests made without authentication. Possible values include RedirectToLoginPage, AllowAnonymous, Return401, and Return403. Defaults to RedirectToLoginPage.
	// The action to take for requests made without authentication. Possible values include `RedirectToLoginPage`, `AllowAnonymous`, `Return401`, and `Return403`. Defaults to `RedirectToLoginPage`.
	// +kubebuilder:validation:Optional
	unauthenticatedAction?: null | string @go(UnauthenticatedAction,*string)
}

#LinuxWebAppSlotAuthSettingsV2TwitterV2InitParameters: {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	consumerKey?: null | string @go(ConsumerKey,*string)

	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in.
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in.
	consumerSecretSettingName?: null | string @go(ConsumerSecretSettingName,*string)
}

#LinuxWebAppSlotAuthSettingsV2TwitterV2Observation: {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	consumerKey?: null | string @go(ConsumerKey,*string)

	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in.
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in.
	consumerSecretSettingName?: null | string @go(ConsumerSecretSettingName,*string)
}

#LinuxWebAppSlotAuthSettingsV2TwitterV2Parameters: {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// +kubebuilder:validation:Optional
	consumerKey?: null | string @go(ConsumerKey,*string)

	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in.
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in.
	// +kubebuilder:validation:Optional
	consumerSecretSettingName?: null | string @go(ConsumerSecretSettingName,*string)
}

#LinuxWebAppSlotBackupInitParameters: {
	// Should this backup job be enabled? Defaults to true.
	// Should this backup job be enabled?
	enabled?: null | bool @go(Enabled,*bool)

	// The name which should be used for this Backup.
	// The name which should be used for this Backup.
	name?: null | string @go(Name,*string)

	// An schedule block as defined below.
	schedule?: [...#LinuxWebAppSlotBackupScheduleInitParameters] @go(Schedule,[]LinuxWebAppSlotBackupScheduleInitParameters)
}

#LinuxWebAppSlotBackupObservation: {
	// Should this backup job be enabled? Defaults to true.
	// Should this backup job be enabled?
	enabled?: null | bool @go(Enabled,*bool)

	// The name which should be used for this Backup.
	// The name which should be used for this Backup.
	name?: null | string @go(Name,*string)

	// An schedule block as defined below.
	schedule?: [...#LinuxWebAppSlotBackupScheduleObservation] @go(Schedule,[]LinuxWebAppSlotBackupScheduleObservation)
}

#LinuxWebAppSlotBackupParameters: {
	// Should this backup job be enabled? Defaults to true.
	// Should this backup job be enabled?
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// The name which should be used for this Backup.
	// The name which should be used for this Backup.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// An schedule block as defined below.
	// +kubebuilder:validation:Optional
	schedule: [...#LinuxWebAppSlotBackupScheduleParameters] @go(Schedule,[]LinuxWebAppSlotBackupScheduleParameters)
}

#LinuxWebAppSlotBackupScheduleInitParameters: {
	// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and frequency_unit should be set to Day).
	// How often the backup should be executed (e.g. for weekly backup, this should be set to `7` and `frequency_unit` should be set to `Day`).
	frequencyInterval?: null | float64 @go(FrequencyInterval,*float64)

	// The unit of time for how often the backup should take place. Possible values include: Day, Hour
	// The unit of time for how often the backup should take place. Possible values include: `Day` and `Hour`.
	frequencyUnit?: null | string @go(FrequencyUnit,*string)

	// Should the service keep at least one backup, regardless of the age of backup? Defaults to false.
	// Should the service keep at least one backup, regardless of age of backup. Defaults to `false`.
	keepAtLeastOneBackup?: null | bool @go(KeepAtLeastOneBackup,*bool)

	// After how many days backups should be deleted. Defaults to 30.
	// After how many days backups should be deleted.
	retentionPeriodDays?: null | float64 @go(RetentionPeriodDays,*float64)

	// When the schedule should start working in RFC-3339 format.
	// When the schedule should start working in RFC-3339 format.
	startTime?: null | string @go(StartTime,*string)
}

#LinuxWebAppSlotBackupScheduleObservation: {
	// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and frequency_unit should be set to Day).
	// How often the backup should be executed (e.g. for weekly backup, this should be set to `7` and `frequency_unit` should be set to `Day`).
	frequencyInterval?: null | float64 @go(FrequencyInterval,*float64)

	// The unit of time for how often the backup should take place. Possible values include: Day, Hour
	// The unit of time for how often the backup should take place. Possible values include: `Day` and `Hour`.
	frequencyUnit?: null | string @go(FrequencyUnit,*string)

	// Should the service keep at least one backup, regardless of the age of backup? Defaults to false.
	// Should the service keep at least one backup, regardless of age of backup. Defaults to `false`.
	keepAtLeastOneBackup?: null | bool @go(KeepAtLeastOneBackup,*bool)

	// The time the backup was last attempted.
	lastExecutionTime?: null | string @go(LastExecutionTime,*string)

	// After how many days backups should be deleted. Defaults to 30.
	// After how many days backups should be deleted.
	retentionPeriodDays?: null | float64 @go(RetentionPeriodDays,*float64)

	// When the schedule should start working in RFC-3339 format.
	// When the schedule should start working in RFC-3339 format.
	startTime?: null | string @go(StartTime,*string)
}

#LinuxWebAppSlotBackupScheduleParameters: {
	// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and frequency_unit should be set to Day).
	// How often the backup should be executed (e.g. for weekly backup, this should be set to `7` and `frequency_unit` should be set to `Day`).
	// +kubebuilder:validation:Optional
	frequencyInterval?: null | float64 @go(FrequencyInterval,*float64)

	// The unit of time for how often the backup should take place. Possible values include: Day, Hour
	// The unit of time for how often the backup should take place. Possible values include: `Day` and `Hour`.
	// +kubebuilder:validation:Optional
	frequencyUnit?: null | string @go(FrequencyUnit,*string)

	// Should the service keep at least one backup, regardless of the age of backup? Defaults to false.
	// Should the service keep at least one backup, regardless of age of backup. Defaults to `false`.
	// +kubebuilder:validation:Optional
	keepAtLeastOneBackup?: null | bool @go(KeepAtLeastOneBackup,*bool)

	// After how many days backups should be deleted. Defaults to 30.
	// After how many days backups should be deleted.
	// +kubebuilder:validation:Optional
	retentionPeriodDays?: null | float64 @go(RetentionPeriodDays,*float64)

	// When the schedule should start working in RFC-3339 format.
	// When the schedule should start working in RFC-3339 format.
	// +kubebuilder:validation:Optional
	startTime?: null | string @go(StartTime,*string)
}

#LinuxWebAppSlotConnectionStringInitParameters: {
	// The name of the Connection String.
	// The name which should be used for this Connection.
	name?: null | string @go(Name,*string)

	// Type of database. Possible values include APIHub, Custom, DocDb, EventHub, MySQL, NotificationHub, PostgreSQL, RedisCache, ServiceBus, SQLAzure, and SQLServer.
	// Type of database. Possible values include: `MySQL`, `SQLServer`, `SQLAzure`, `Custom`, `NotificationHub`, `ServiceBus`, `EventHub`, `APIHub`, `DocDb`, `RedisCache`, and `PostgreSQL`.
	type?: null | string @go(Type,*string)
}

#LinuxWebAppSlotConnectionStringObservation: {
	// The name of the Connection String.
	// The name which should be used for this Connection.
	name?: null | string @go(Name,*string)

	// Type of database. Possible values include APIHub, Custom, DocDb, EventHub, MySQL, NotificationHub, PostgreSQL, RedisCache, ServiceBus, SQLAzure, and SQLServer.
	// Type of database. Possible values include: `MySQL`, `SQLServer`, `SQLAzure`, `Custom`, `NotificationHub`, `ServiceBus`, `EventHub`, `APIHub`, `DocDb`, `RedisCache`, and `PostgreSQL`.
	type?: null | string @go(Type,*string)
}

#LinuxWebAppSlotConnectionStringParameters: {
	// The name of the Connection String.
	// The name which should be used for this Connection.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Type of database. Possible values include APIHub, Custom, DocDb, EventHub, MySQL, NotificationHub, PostgreSQL, RedisCache, ServiceBus, SQLAzure, and SQLServer.
	// Type of database. Possible values include: `MySQL`, `SQLServer`, `SQLAzure`, `Custom`, `NotificationHub`, `ServiceBus`, `EventHub`, `APIHub`, `DocDb`, `RedisCache`, and `PostgreSQL`.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#LinuxWebAppSlotIdentityInitParameters: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Linux Web App Slot.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Linux Web App Slot. Possible values are SystemAssigned, UserAssigned and SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#LinuxWebAppSlotIdentityObservation: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Linux Web App Slot.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The Principal ID associated with this Managed Service Identity.
	principalId?: null | string @go(PrincipalID,*string)

	// The Tenant ID associated with this Managed Service Identity.
	tenantId?: null | string @go(TenantID,*string)

	// Specifies the type of Managed Service Identity that should be configured on this Linux Web App Slot. Possible values are SystemAssigned, UserAssigned and SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#LinuxWebAppSlotIdentityParameters: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Linux Web App Slot.
	// +kubebuilder:validation:Optional
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Linux Web App Slot. Possible values are SystemAssigned, UserAssigned and SystemAssigned, UserAssigned (to enable both).
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#LinuxWebAppSlotInitParameters: {
	// A map of key-value pairs of App Settings.
	appSettings?: {[string]: null | string} @go(AppSettings,map[string]*string)

	// An auth_settings block as defined below.
	authSettings?: [...#LinuxWebAppSlotAuthSettingsInitParameters] @go(AuthSettings,[]LinuxWebAppSlotAuthSettingsInitParameters)

	// An auth_settings_v2 block as defined below.
	authSettingsV2?: [...#LinuxWebAppSlotAuthSettingsV2InitParameters] @go(AuthSettingsV2,[]LinuxWebAppSlotAuthSettingsV2InitParameters)

	// A backup block as defined below.
	backup?: [...#LinuxWebAppSlotBackupInitParameters] @go(Backup,[]LinuxWebAppSlotBackupInitParameters)

	// Should Client Affinity be enabled?
	clientAffinityEnabled?: null | bool @go(ClientAffinityEnabled,*bool)

	// Should Client Certificates be enabled?
	clientCertificateEnabled?: null | bool @go(ClientCertificateEnabled,*bool)

	// Paths to exclude when using client certificates, separated by ;
	// Paths to exclude when using client certificates, separated by ;
	clientCertificateExclusionPaths?: null | string @go(ClientCertificateExclusionPaths,*string)

	// The Client Certificate mode. Possible values are Required, Optional, and OptionalInteractiveUser. This property has no effect when client_cert_enabled is false
	clientCertificateMode?: null | string @go(ClientCertificateMode,*string)

	// One or more connection_string blocks as defined below.
	connectionString?: [...#LinuxWebAppSlotConnectionStringInitParameters] @go(ConnectionString,[]LinuxWebAppSlotConnectionStringInitParameters)

	// Should the Linux Web App be enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// Should the Linux Web App require HTTPS connections.
	httpsOnly?: null | bool @go(HTTPSOnly,*bool)

	// An identity block as defined below.
	identity?: [...#LinuxWebAppSlotIdentityInitParameters] @go(Identity,[]LinuxWebAppSlotIdentityInitParameters)

	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the identity block. For more information see - Access vaults with a user-assigned identity.
	keyVaultReferenceIdentityId?: null | string @go(KeyVaultReferenceIdentityID,*string)

	// A logs block as defined below.
	logs?: [...#LinuxWebAppSlotLogsInitParameters] @go(Logs,[]LinuxWebAppSlotLogsInitParameters)

	// The name which should be used for this Linux Web App Slot. Changing this forces a new Linux Web App Slot to be created.
	name?: null | string @go(Name,*string)

	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Linux Web App will be used.
	servicePlanId?: null | string @go(ServicePlanID,*string)

	// A site_config block as defined below.
	siteConfig?: [...#LinuxWebAppSlotSiteConfigInitParameters] @go(SiteConfig,[]LinuxWebAppSlotSiteConfigInitParameters)

	// One or more storage_account blocks as defined below.
	storageAccount?: [...#LinuxWebAppSlotStorageAccountInitParameters] @go(StorageAccount,[]LinuxWebAppSlotStorageAccountInitParameters)

	// A mapping of tags that should be assigned to the Linux Web App.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App. **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` on the App in `app_settings`.
	zipDeployFile?: null | string @go(ZipDeployFile,*string)
}

#LinuxWebAppSlotLogsInitParameters: {
	// A application_logs block as defined above.
	applicationLogs?: [...#LogsApplicationLogsInitParameters] @go(ApplicationLogs,[]LogsApplicationLogsInitParameters)

	// Should detailed error messages be enabled?
	detailedErrorMessages?: null | bool @go(DetailedErrorMessages,*bool)

	// Should the failed request tracing be enabled?
	failedRequestTracing?: null | bool @go(FailedRequestTracing,*bool)

	// An http_logs block as defined above.
	httpLogs?: [...#LogsHTTPLogsInitParameters] @go(HTTPLogs,[]LogsHTTPLogsInitParameters)
}

#LinuxWebAppSlotLogsObservation: {
	// A application_logs block as defined above.
	applicationLogs?: [...#LogsApplicationLogsObservation] @go(ApplicationLogs,[]LogsApplicationLogsObservation)

	// Should detailed error messages be enabled?
	detailedErrorMessages?: null | bool @go(DetailedErrorMessages,*bool)

	// Should the failed request tracing be enabled?
	failedRequestTracing?: null | bool @go(FailedRequestTracing,*bool)

	// An http_logs block as defined above.
	httpLogs?: [...#LogsHTTPLogsObservation] @go(HTTPLogs,[]LogsHTTPLogsObservation)
}

#LinuxWebAppSlotLogsParameters: {
	// A application_logs block as defined above.
	// +kubebuilder:validation:Optional
	applicationLogs?: [...#LogsApplicationLogsParameters] @go(ApplicationLogs,[]LogsApplicationLogsParameters)

	// Should detailed error messages be enabled?
	// +kubebuilder:validation:Optional
	detailedErrorMessages?: null | bool @go(DetailedErrorMessages,*bool)

	// Should the failed request tracing be enabled?
	// +kubebuilder:validation:Optional
	failedRequestTracing?: null | bool @go(FailedRequestTracing,*bool)

	// An http_logs block as defined above.
	// +kubebuilder:validation:Optional
	httpLogs?: [...#LogsHTTPLogsParameters] @go(HTTPLogs,[]LogsHTTPLogsParameters)
}

#LinuxWebAppSlotObservation: {
	// A app_metadata block as defined below.
	appMetadata?: {[string]: null | string} @go(AppMetadata,map[string]*string)

	// The ID of the Linux Web App this Deployment Slot will be part of.
	appServiceId?: null | string @go(AppServiceID,*string)

	// A map of key-value pairs of App Settings.
	appSettings?: {[string]: null | string} @go(AppSettings,map[string]*string)

	// An auth_settings block as defined below.
	authSettings?: [...#LinuxWebAppSlotAuthSettingsObservation] @go(AuthSettings,[]LinuxWebAppSlotAuthSettingsObservation)

	// An auth_settings_v2 block as defined below.
	authSettingsV2?: [...#LinuxWebAppSlotAuthSettingsV2Observation] @go(AuthSettingsV2,[]LinuxWebAppSlotAuthSettingsV2Observation)

	// A backup block as defined below.
	backup?: [...#LinuxWebAppSlotBackupObservation] @go(Backup,[]LinuxWebAppSlotBackupObservation)

	// Should Client Affinity be enabled?
	clientAffinityEnabled?: null | bool @go(ClientAffinityEnabled,*bool)

	// Should Client Certificates be enabled?
	clientCertificateEnabled?: null | bool @go(ClientCertificateEnabled,*bool)

	// Paths to exclude when using client certificates, separated by ;
	// Paths to exclude when using client certificates, separated by ;
	clientCertificateExclusionPaths?: null | string @go(ClientCertificateExclusionPaths,*string)

	// The Client Certificate mode. Possible values are Required, Optional, and OptionalInteractiveUser. This property has no effect when client_cert_enabled is false
	clientCertificateMode?: null | string @go(ClientCertificateMode,*string)

	// One or more connection_string blocks as defined below.
	connectionString?: [...#LinuxWebAppSlotConnectionStringObservation] @go(ConnectionString,[]LinuxWebAppSlotConnectionStringObservation)

	// The default hostname of the Linux Web App.
	defaultHostname?: null | string @go(DefaultHostName,*string)

	// Should the Linux Web App be enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// Should the Linux Web App require HTTPS connections.
	httpsOnly?: null | bool @go(HTTPSOnly,*bool)

	// The ID of the App Service Environment used by App Service Slot.
	hostingEnvironmentId?: null | string @go(HostingEnvironmentID,*string)

	// The ID of the Linux Web App.
	id?: null | string @go(ID,*string)

	// An identity block as defined below.
	identity?: [...#LinuxWebAppSlotIdentityObservation] @go(Identity,[]LinuxWebAppSlotIdentityObservation)

	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the identity block. For more information see - Access vaults with a user-assigned identity.
	keyVaultReferenceIdentityId?: null | string @go(KeyVaultReferenceIdentityID,*string)

	// The Kind value for this Linux Web App.
	kind?: null | string @go(Kind,*string)

	// A logs block as defined below.
	logs?: [...#LinuxWebAppSlotLogsObservation] @go(Logs,[]LinuxWebAppSlotLogsObservation)

	// The name which should be used for this Linux Web App Slot. Changing this forces a new Linux Web App Slot to be created.
	name?: null | string @go(Name,*string)

	// A list of outbound IP addresses - such as ["52.23.25.3", "52.143.43.12"]
	outboundIpAddressList?: [...null | string] @go(OutboundIPAddressList,[]*string)

	// A comma-separated list of outbound IP addresses - such as 52.23.25.3,52.143.43.12.
	outboundIpAddresses?: null | string @go(OutboundIPAddresses,*string)

	// A possible_outbound_ip_address_list block as defined below.
	possibleOutboundIpAddressList?: [...null | string] @go(PossibleOutboundIPAddressList,[]*string)

	// A comma-separated list of outbound IP addresses - such as 52.23.25.3,52.143.43.12,52.143.43.17 - not all of which are necessarily in use. Superset of outbound_ip_addresses.
	possibleOutboundIpAddresses?: null | string @go(PossibleOutboundIPAddresses,*string)

	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Linux Web App will be used.
	servicePlanId?: null | string @go(ServicePlanID,*string)

	// A site_config block as defined below.
	siteConfig?: [...#LinuxWebAppSlotSiteConfigObservation] @go(SiteConfig,[]LinuxWebAppSlotSiteConfigObservation)

	// One or more storage_account blocks as defined below.
	storageAccount?: [...#LinuxWebAppSlotStorageAccountObservation] @go(StorageAccount,[]LinuxWebAppSlotStorageAccountObservation)

	// A mapping of tags that should be assigned to the Linux Web App.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The subnet id which will be used by this Web App Slot for regional virtual network integration.
	virtualNetworkSubnetId?: null | string @go(VirtualNetworkSubnetID,*string)

	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App. **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` on the App in `app_settings`.
	zipDeployFile?: null | string @go(ZipDeployFile,*string)
}

#LinuxWebAppSlotParameters: {
	// The ID of the Linux Web App this Deployment Slot will be part of.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/web/v1beta1.LinuxWebApp
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	appServiceId?: null | string @go(AppServiceID,*string)

	// A map of key-value pairs of App Settings.
	// +kubebuilder:validation:Optional
	appSettings?: {[string]: null | string} @go(AppSettings,map[string]*string)

	// An auth_settings block as defined below.
	// +kubebuilder:validation:Optional
	authSettings?: [...#LinuxWebAppSlotAuthSettingsParameters] @go(AuthSettings,[]LinuxWebAppSlotAuthSettingsParameters)

	// An auth_settings_v2 block as defined below.
	// +kubebuilder:validation:Optional
	authSettingsV2?: [...#LinuxWebAppSlotAuthSettingsV2Parameters] @go(AuthSettingsV2,[]LinuxWebAppSlotAuthSettingsV2Parameters)

	// A backup block as defined below.
	// +kubebuilder:validation:Optional
	backup?: [...#LinuxWebAppSlotBackupParameters] @go(Backup,[]LinuxWebAppSlotBackupParameters)

	// Should Client Affinity be enabled?
	// +kubebuilder:validation:Optional
	clientAffinityEnabled?: null | bool @go(ClientAffinityEnabled,*bool)

	// Should Client Certificates be enabled?
	// +kubebuilder:validation:Optional
	clientCertificateEnabled?: null | bool @go(ClientCertificateEnabled,*bool)

	// Paths to exclude when using client certificates, separated by ;
	// Paths to exclude when using client certificates, separated by ;
	// +kubebuilder:validation:Optional
	clientCertificateExclusionPaths?: null | string @go(ClientCertificateExclusionPaths,*string)

	// The Client Certificate mode. Possible values are Required, Optional, and OptionalInteractiveUser. This property has no effect when client_cert_enabled is false
	// +kubebuilder:validation:Optional
	clientCertificateMode?: null | string @go(ClientCertificateMode,*string)

	// One or more connection_string blocks as defined below.
	// +kubebuilder:validation:Optional
	connectionString?: [...#LinuxWebAppSlotConnectionStringParameters] @go(ConnectionString,[]LinuxWebAppSlotConnectionStringParameters)

	// Should the Linux Web App be enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Should the Linux Web App require HTTPS connections.
	// +kubebuilder:validation:Optional
	httpsOnly?: null | bool @go(HTTPSOnly,*bool)

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	identity?: [...#LinuxWebAppSlotIdentityParameters] @go(Identity,[]LinuxWebAppSlotIdentityParameters)

	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the identity block. For more information see - Access vaults with a user-assigned identity.
	// +kubebuilder:validation:Optional
	keyVaultReferenceIdentityId?: null | string @go(KeyVaultReferenceIdentityID,*string)

	// A logs block as defined below.
	// +kubebuilder:validation:Optional
	logs?: [...#LinuxWebAppSlotLogsParameters] @go(Logs,[]LinuxWebAppSlotLogsParameters)

	// The name which should be used for this Linux Web App Slot. Changing this forces a new Linux Web App Slot to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Linux Web App will be used.
	// +kubebuilder:validation:Optional
	servicePlanId?: null | string @go(ServicePlanID,*string)

	// A site_config block as defined below.
	// +kubebuilder:validation:Optional
	siteConfig?: [...#LinuxWebAppSlotSiteConfigParameters] @go(SiteConfig,[]LinuxWebAppSlotSiteConfigParameters)

	// One or more storage_account blocks as defined below.
	// +kubebuilder:validation:Optional
	storageAccount?: [...#LinuxWebAppSlotStorageAccountParameters] @go(StorageAccount,[]LinuxWebAppSlotStorageAccountParameters)

	// A mapping of tags that should be assigned to the Linux Web App.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The subnet id which will be used by this Web App Slot for regional virtual network integration.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	virtualNetworkSubnetId?: null | string @go(VirtualNetworkSubnetID,*string)

	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App. **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` on the App in `app_settings`.
	// +kubebuilder:validation:Optional
	zipDeployFile?: null | string @go(ZipDeployFile,*string)
}

#LinuxWebAppSlotSiteConfigApplicationStackInitParameters: {
	// The Docker image reference, including repository host as needed.
	dockerImage?: null | string @go(DockerImage,*string)

	// The image Tag to use. e.g. latest.
	dockerImageTag?: null | string @go(DockerImageTag,*string)

	// The version of .NET to use. Possible values include 3.1, 5.0, 6.0 and 7.0.
	dotnetVersion?: null | string @go(DotnetVersion,*string)

	// The version of Go to use. Possible values include 1.18, and 1.19.
	goVersion?: null | string @go(GoVersion,*string)

	// The Java server type. Possible values include JAVA, TOMCAT, and JBOSSEAP.
	javaServer?: null | string @go(JavaServer,*string)

	// The Version of the java_server to use.
	javaServerVersion?: null | string @go(JavaServerVersion,*string)

	// The Version of Java to use. Possible values include 8, 11, and 17.
	javaVersion?: null | string @go(JavaVersion,*string)

	// The version of Node to run. Possible values include 12-lts, 14-lts, 16-lts, and 18-lts. This property conflicts with java_version.
	nodeVersion?: null | string @go(NodeVersion,*string)

	// The version of PHP to run. Possible values are 8.0, 8.1 and 8.2.
	phpVersion?: null | string @go(PHPVersion,*string)

	// The version of Python to run. Possible values include 3.7, 3.8, 3.9, 3.10 and 3.11.
	pythonVersion?: null | string @go(PythonVersion,*string)

	// Te version of Ruby to run. Possible values include 2.6 and 2.7.
	rubyVersion?: null | string @go(RubyVersion,*string)
}

#LinuxWebAppSlotSiteConfigApplicationStackObservation: {
	// The Docker image reference, including repository host as needed.
	dockerImage?: null | string @go(DockerImage,*string)

	// The image Tag to use. e.g. latest.
	dockerImageTag?: null | string @go(DockerImageTag,*string)

	// The version of .NET to use. Possible values include 3.1, 5.0, 6.0 and 7.0.
	dotnetVersion?: null | string @go(DotnetVersion,*string)

	// The version of Go to use. Possible values include 1.18, and 1.19.
	goVersion?: null | string @go(GoVersion,*string)

	// The Java server type. Possible values include JAVA, TOMCAT, and JBOSSEAP.
	javaServer?: null | string @go(JavaServer,*string)

	// The Version of the java_server to use.
	javaServerVersion?: null | string @go(JavaServerVersion,*string)

	// The Version of Java to use. Possible values include 8, 11, and 17.
	javaVersion?: null | string @go(JavaVersion,*string)

	// The version of Node to run. Possible values include 12-lts, 14-lts, 16-lts, and 18-lts. This property conflicts with java_version.
	nodeVersion?: null | string @go(NodeVersion,*string)

	// The version of PHP to run. Possible values are 8.0, 8.1 and 8.2.
	phpVersion?: null | string @go(PHPVersion,*string)

	// The version of Python to run. Possible values include 3.7, 3.8, 3.9, 3.10 and 3.11.
	pythonVersion?: null | string @go(PythonVersion,*string)

	// Te version of Ruby to run. Possible values include 2.6 and 2.7.
	rubyVersion?: null | string @go(RubyVersion,*string)
}

#LinuxWebAppSlotSiteConfigApplicationStackParameters: {
	// The Docker image reference, including repository host as needed.
	// +kubebuilder:validation:Optional
	dockerImage?: null | string @go(DockerImage,*string)

	// The image Tag to use. e.g. latest.
	// +kubebuilder:validation:Optional
	dockerImageTag?: null | string @go(DockerImageTag,*string)

	// The version of .NET to use. Possible values include 3.1, 5.0, 6.0 and 7.0.
	// +kubebuilder:validation:Optional
	dotnetVersion?: null | string @go(DotnetVersion,*string)

	// The version of Go to use. Possible values include 1.18, and 1.19.
	// +kubebuilder:validation:Optional
	goVersion?: null | string @go(GoVersion,*string)

	// The Java server type. Possible values include JAVA, TOMCAT, and JBOSSEAP.
	// +kubebuilder:validation:Optional
	javaServer?: null | string @go(JavaServer,*string)

	// The Version of the java_server to use.
	// +kubebuilder:validation:Optional
	javaServerVersion?: null | string @go(JavaServerVersion,*string)

	// The Version of Java to use. Possible values include 8, 11, and 17.
	// +kubebuilder:validation:Optional
	javaVersion?: null | string @go(JavaVersion,*string)

	// The version of Node to run. Possible values include 12-lts, 14-lts, 16-lts, and 18-lts. This property conflicts with java_version.
	// +kubebuilder:validation:Optional
	nodeVersion?: null | string @go(NodeVersion,*string)

	// The version of PHP to run. Possible values are 8.0, 8.1 and 8.2.
	// +kubebuilder:validation:Optional
	phpVersion?: null | string @go(PHPVersion,*string)

	// The version of Python to run. Possible values include 3.7, 3.8, 3.9, 3.10 and 3.11.
	// +kubebuilder:validation:Optional
	pythonVersion?: null | string @go(PythonVersion,*string)

	// Te version of Ruby to run. Possible values include 2.6 and 2.7.
	// +kubebuilder:validation:Optional
	rubyVersion?: null | string @go(RubyVersion,*string)
}

#LinuxWebAppSlotSiteConfigCorsInitParameters: {
	// Specifies a list of origins that should be allowed to make cross-origin calls.
	// Specifies a list of origins that should be allowed to make cross-origin calls.
	allowedOrigins?: [...null | string] @go(AllowedOrigins,[]*string)

	// Whether CORS requests with credentials are allowed. Defaults to false
	// Are credentials allowed in CORS requests? Defaults to `false`.
	supportCredentials?: null | bool @go(SupportCredentials,*bool)
}

#LinuxWebAppSlotSiteConfigCorsObservation: {
	// Specifies a list of origins that should be allowed to make cross-origin calls.
	// Specifies a list of origins that should be allowed to make cross-origin calls.
	allowedOrigins?: [...null | string] @go(AllowedOrigins,[]*string)

	// Whether CORS requests with credentials are allowed. Defaults to false
	// Are credentials allowed in CORS requests? Defaults to `false`.
	supportCredentials?: null | bool @go(SupportCredentials,*bool)
}

#LinuxWebAppSlotSiteConfigCorsParameters: {
	// Specifies a list of origins that should be allowed to make cross-origin calls.
	// Specifies a list of origins that should be allowed to make cross-origin calls.
	// +kubebuilder:validation:Optional
	allowedOrigins?: [...null | string] @go(AllowedOrigins,[]*string)

	// Whether CORS requests with credentials are allowed. Defaults to false
	// Are credentials allowed in CORS requests? Defaults to `false`.
	// +kubebuilder:validation:Optional
	supportCredentials?: null | bool @go(SupportCredentials,*bool)
}

#LinuxWebAppSlotSiteConfigIPRestrictionHeadersInitParameters: {
	// Specifies a list of Azure Front Door IDs.
	xAzureFdid?: [...null | string] @go(XAzureFdid,[]*string)

	// Specifies if a Front Door Health Probe should be expected. The only possible value is 1.
	xFdHealthProbe?: [...null | string] @go(XFdHealthProbe,[]*string)

	// Specifies a list of addresses for which matching should be applied. Omitting this value means allow any.
	xForwardedFor?: [...null | string] @go(XForwardedFor,[]*string)

	// Specifies a list of Hosts for which matching should be applied.
	xForwardedHost?: [...null | string] @go(XForwardedHost,[]*string)
}

#LinuxWebAppSlotSiteConfigIPRestrictionHeadersObservation: {
	// Specifies a list of Azure Front Door IDs.
	xAzureFdid?: [...null | string] @go(XAzureFdid,[]*string)

	// Specifies if a Front Door Health Probe should be expected. The only possible value is 1.
	xFdHealthProbe?: [...null | string] @go(XFdHealthProbe,[]*string)

	// Specifies a list of addresses for which matching should be applied. Omitting this value means allow any.
	xForwardedFor?: [...null | string] @go(XForwardedFor,[]*string)

	// Specifies a list of Hosts for which matching should be applied.
	xForwardedHost?: [...null | string] @go(XForwardedHost,[]*string)
}

#LinuxWebAppSlotSiteConfigIPRestrictionHeadersParameters: {
	// Specifies a list of Azure Front Door IDs.
	// +kubebuilder:validation:Optional
	xAzureFdid?: [...null | string] @go(XAzureFdid,[]*string)

	// Specifies if a Front Door Health Probe should be expected. The only possible value is 1.
	// +kubebuilder:validation:Optional
	xFdHealthProbe?: [...null | string] @go(XFdHealthProbe,[]*string)

	// Specifies a list of addresses for which matching should be applied. Omitting this value means allow any.
	// +kubebuilder:validation:Optional
	xForwardedFor?: [...null | string] @go(XForwardedFor,[]*string)

	// Specifies a list of Hosts for which matching should be applied.
	// +kubebuilder:validation:Optional
	xForwardedHost?: [...null | string] @go(XForwardedHost,[]*string)
}

#LinuxWebAppSlotSiteConfigIPRestrictionInitParameters: {
	// The action to take. Possible values are Allow or Deny.
	// The action to take. Possible values are `Allow` or `Deny`.
	action?: null | string @go(Action,*string)

	// A headers block as defined above.
	headers?: [...#LinuxWebAppSlotSiteConfigIPRestrictionHeadersInitParameters] @go(Headers,[]LinuxWebAppSlotSiteConfigIPRestrictionHeadersInitParameters)

	// The CIDR notation of the IP or IP Range to match. For example: 10.0.0.0/24 or 192.168.10.1/32
	// The CIDR notation of the IP or IP Range to match. For example: `10.0.0.0/24` or `192.168.10.1/32` or `fe80::/64` or `13.107.6.152/31,13.107.128.0/22`
	ipAddress?: null | string @go(IPAddress,*string)

	// The name which should be used for this Storage Account.
	// The name which should be used for this `ip_restriction`.
	name?: null | string @go(Name,*string)

	// The priority value of this ip_restriction. Defaults to 65000.
	// The priority value of this `ip_restriction`.
	priority?: null | float64 @go(Priority,*float64)

	// The Service Tag used for this IP Restriction.
	// The Service Tag used for this IP Restriction.
	serviceTag?: null | string @go(ServiceTag,*string)
}

#LinuxWebAppSlotSiteConfigIPRestrictionObservation: {
	// The action to take. Possible values are Allow or Deny.
	// The action to take. Possible values are `Allow` or `Deny`.
	action?: null | string @go(Action,*string)

	// A headers block as defined above.
	headers?: [...#LinuxWebAppSlotSiteConfigIPRestrictionHeadersObservation] @go(Headers,[]LinuxWebAppSlotSiteConfigIPRestrictionHeadersObservation)

	// The CIDR notation of the IP or IP Range to match. For example: 10.0.0.0/24 or 192.168.10.1/32
	// The CIDR notation of the IP or IP Range to match. For example: `10.0.0.0/24` or `192.168.10.1/32` or `fe80::/64` or `13.107.6.152/31,13.107.128.0/22`
	ipAddress?: null | string @go(IPAddress,*string)

	// The name which should be used for this Storage Account.
	// The name which should be used for this `ip_restriction`.
	name?: null | string @go(Name,*string)

	// The priority value of this ip_restriction. Defaults to 65000.
	// The priority value of this `ip_restriction`.
	priority?: null | float64 @go(Priority,*float64)

	// The Service Tag used for this IP Restriction.
	// The Service Tag used for this IP Restriction.
	serviceTag?: null | string @go(ServiceTag,*string)

	// The subnet id which will be used by this Web App Slot for regional virtual network integration.
	// The Virtual Network Subnet ID used for this IP Restriction.
	virtualNetworkSubnetId?: null | string @go(VirtualNetworkSubnetID,*string)
}

#LinuxWebAppSlotSiteConfigIPRestrictionParameters: {
	// The action to take. Possible values are Allow or Deny.
	// The action to take. Possible values are `Allow` or `Deny`.
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// A headers block as defined above.
	// +kubebuilder:validation:Optional
	headers?: [...#LinuxWebAppSlotSiteConfigIPRestrictionHeadersParameters] @go(Headers,[]LinuxWebAppSlotSiteConfigIPRestrictionHeadersParameters)

	// The CIDR notation of the IP or IP Range to match. For example: 10.0.0.0/24 or 192.168.10.1/32
	// The CIDR notation of the IP or IP Range to match. For example: `10.0.0.0/24` or `192.168.10.1/32` or `fe80::/64` or `13.107.6.152/31,13.107.128.0/22`
	// +kubebuilder:validation:Optional
	ipAddress?: null | string @go(IPAddress,*string)

	// The name which should be used for this Storage Account.
	// The name which should be used for this `ip_restriction`.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The priority value of this ip_restriction. Defaults to 65000.
	// The priority value of this `ip_restriction`.
	// +kubebuilder:validation:Optional
	priority?: null | float64 @go(Priority,*float64)

	// The Service Tag used for this IP Restriction.
	// The Service Tag used for this IP Restriction.
	// +kubebuilder:validation:Optional
	serviceTag?: null | string @go(ServiceTag,*string)

	// The subnet id which will be used by this Web App Slot for regional virtual network integration.
	// The Virtual Network Subnet ID used for this IP Restriction.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	virtualNetworkSubnetId?: null | string @go(VirtualNetworkSubnetID,*string)
}

#LinuxWebAppSlotSiteConfigInitParameters: {
	// The URL to the API Definition for this Linux Web App Slot.
	apiDefinitionUrl?: null | string @go(APIDefinitionURL,*string)

	// The API Management API ID this Linux Web App Slot is associated with.
	apiManagementApiId?: null | string @go(APIManagementAPIID,*string)

	// If this Linux Web App is Always On enabled. Defaults to true.
	alwaysOn?: null | bool @go(AlwaysOn,*bool)

	// The App command line to launch.
	appCommandLine?: null | string @go(AppCommandLine,*string)

	// A application_stack block as defined above.
	applicationStack?: [...#LinuxWebAppSlotSiteConfigApplicationStackInitParameters] @go(ApplicationStack,[]LinuxWebAppSlotSiteConfigApplicationStackInitParameters)

	// Should Auto heal rules be enabled? Required with auto_heal_setting.
	autoHealEnabled?: null | bool @go(AutoHealEnabled,*bool)

	// A auto_heal_setting block as defined above. Required with auto_heal.
	autoHealSetting?: [...#SiteConfigAutoHealSettingInitParameters] @go(AutoHealSetting,[]SiteConfigAutoHealSettingInitParameters)

	// The Linux Web App Slot Name to automatically swap to when deployment to that slot is successfully completed.
	autoSwapSlotName?: null | string @go(AutoSwapSlotName,*string)

	// The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
	containerRegistryManagedIdentityClientId?: null | string @go(ContainerRegistryManagedIdentityClientID,*string)

	// Should connections for Azure Container Registry use Managed Identity.
	containerRegistryUseManagedIdentity?: null | bool @go(ContainerRegistryUseManagedIdentity,*bool)

	// A cors block as defined above.
	cors?: [...#LinuxWebAppSlotSiteConfigCorsInitParameters] @go(Cors,[]LinuxWebAppSlotSiteConfigCorsInitParameters)

	// Specifies a list of Default Documents for the Linux Web App.
	defaultDocuments?: [...null | string] @go(DefaultDocuments,[]*string)

	// The State of FTP / FTPS service. Possible values include AllAllowed, FtpsOnly, and Disabled.
	ftpsState?: null | string @go(FtpsState,*string)

	// The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between 2 and 10. Only valid in conjunction with health_check_path.
	// The amount of time in minutes that a node is unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Defaults to `10`. Only valid in conjunction with `health_check_path`
	healthCheckEvictionTimeInMin?: null | float64 @go(HealthCheckEvictionTimeInMin,*float64)

	// The path to the Health Check.
	healthCheckPath?: null | string @go(HealthCheckPath,*string)

	// Should the HTTP2 be enabled?
	http2Enabled?: null | bool @go(Http2Enabled,*bool)

	// One or more ip_restriction blocks as defined above.
	ipRestriction?: [...#LinuxWebAppSlotSiteConfigIPRestrictionInitParameters] @go(IPRestriction,[]LinuxWebAppSlotSiteConfigIPRestrictionInitParameters)

	// The Site load balancing. Possible values include: WeightedRoundRobin, LeastRequests, LeastResponseTime, WeightedTotalTraffic, RequestHash, PerSiteRoundRobin. Defaults to LeastRequests if omitted.
	loadBalancingMode?: null | string @go(LoadBalancingMode,*string)

	// Use Local MySQL. Defaults to false.
	localMysqlEnabled?: null | bool @go(LocalMySQLEnabled,*bool)

	// Managed pipeline mode. Possible values include: Integrated, Classic.
	managedPipelineMode?: null | string @go(ManagedPipelineMode,*string)

	// The configures the minimum version of TLS required for SSL requests. Possible values include: 1.0, 1.1, and 1.2. Defaults to 1.2.
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// Should Remote Debugging be enabled? Defaults to false.
	remoteDebuggingEnabled?: null | bool @go(RemoteDebuggingEnabled,*bool)

	// The Remote Debugging Version. Possible values include VS2017 and VS2019
	remoteDebuggingVersion?: null | string @go(RemoteDebuggingVersion,*string)

	// One or more scm_ip_restriction blocks as defined above.
	scmIpRestriction?: [...#LinuxWebAppSlotSiteConfigScmIPRestrictionInitParameters] @go(ScmIPRestriction,[]LinuxWebAppSlotSiteConfigScmIPRestrictionInitParameters)

	// The configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: 1.0, 1.1, and 1.2. Defaults to 1.2.
	scmMinimumTlsVersion?: null | string @go(ScmMinimumTLSVersion,*string)

	// Should the Linux Web App ip_restriction configuration be used for the SCM also.
	scmUseMainIpRestriction?: null | bool @go(ScmUseMainIPRestriction,*bool)

	// Should the Linux Web App use a 32-bit worker? Defaults to true.
	use32BitWorker?: null | bool @go(Use32BitWorker,*bool)

	// Should all outbound traffic have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to false.
	// Should all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied? Defaults to `false`.
	vnetRouteAllEnabled?: null | bool @go(VnetRouteAllEnabled,*bool)

	// Should Web Sockets be enabled? Defaults to false.
	websocketsEnabled?: null | bool @go(WebsocketsEnabled,*bool)

	// The number of Workers for this Linux App Service Slot.
	workerCount?: null | float64 @go(WorkerCount,*float64)
}

#LinuxWebAppSlotSiteConfigObservation: {
	// The URL to the API Definition for this Linux Web App Slot.
	apiDefinitionUrl?: null | string @go(APIDefinitionURL,*string)

	// The API Management API ID this Linux Web App Slot is associated with.
	apiManagementApiId?: null | string @go(APIManagementAPIID,*string)

	// If this Linux Web App is Always On enabled. Defaults to true.
	alwaysOn?: null | bool @go(AlwaysOn,*bool)

	// The App command line to launch.
	appCommandLine?: null | string @go(AppCommandLine,*string)

	// A application_stack block as defined above.
	applicationStack?: [...#LinuxWebAppSlotSiteConfigApplicationStackObservation] @go(ApplicationStack,[]LinuxWebAppSlotSiteConfigApplicationStackObservation)

	// Should Auto heal rules be enabled? Required with auto_heal_setting.
	autoHealEnabled?: null | bool @go(AutoHealEnabled,*bool)

	// A auto_heal_setting block as defined above. Required with auto_heal.
	autoHealSetting?: [...#SiteConfigAutoHealSettingObservation] @go(AutoHealSetting,[]SiteConfigAutoHealSettingObservation)

	// The Linux Web App Slot Name to automatically swap to when deployment to that slot is successfully completed.
	autoSwapSlotName?: null | string @go(AutoSwapSlotName,*string)

	// The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
	containerRegistryManagedIdentityClientId?: null | string @go(ContainerRegistryManagedIdentityClientID,*string)

	// Should connections for Azure Container Registry use Managed Identity.
	containerRegistryUseManagedIdentity?: null | bool @go(ContainerRegistryUseManagedIdentity,*bool)

	// A cors block as defined above.
	cors?: [...#LinuxWebAppSlotSiteConfigCorsObservation] @go(Cors,[]LinuxWebAppSlotSiteConfigCorsObservation)

	// Specifies a list of Default Documents for the Linux Web App.
	defaultDocuments?: [...null | string] @go(DefaultDocuments,[]*string)

	// Should the Linux Web App be enabled? Defaults to true.
	detailedErrorLoggingEnabled?: null | bool @go(DetailedErrorLoggingEnabled,*bool)

	// The State of FTP / FTPS service. Possible values include AllAllowed, FtpsOnly, and Disabled.
	ftpsState?: null | string @go(FtpsState,*string)

	// The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between 2 and 10. Only valid in conjunction with health_check_path.
	// The amount of time in minutes that a node is unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Defaults to `10`. Only valid in conjunction with `health_check_path`
	healthCheckEvictionTimeInMin?: null | float64 @go(HealthCheckEvictionTimeInMin,*float64)

	// The path to the Health Check.
	healthCheckPath?: null | string @go(HealthCheckPath,*string)

	// Should the HTTP2 be enabled?
	http2Enabled?: null | bool @go(Http2Enabled,*bool)

	// One or more ip_restriction blocks as defined above.
	ipRestriction?: [...#LinuxWebAppSlotSiteConfigIPRestrictionObservation] @go(IPRestriction,[]LinuxWebAppSlotSiteConfigIPRestrictionObservation)
	linuxFxVersion?: null | string @go(LinuxFxVersion,*string)

	// The Site load balancing. Possible values include: WeightedRoundRobin, LeastRequests, LeastResponseTime, WeightedTotalTraffic, RequestHash, PerSiteRoundRobin. Defaults to LeastRequests if omitted.
	loadBalancingMode?: null | string @go(LoadBalancingMode,*string)

	// Use Local MySQL. Defaults to false.
	localMysqlEnabled?: null | bool @go(LocalMySQLEnabled,*bool)

	// Managed pipeline mode. Possible values include: Integrated, Classic.
	managedPipelineMode?: null | string @go(ManagedPipelineMode,*string)

	// The configures the minimum version of TLS required for SSL requests. Possible values include: 1.0, 1.1, and 1.2. Defaults to 1.2.
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// Should Remote Debugging be enabled? Defaults to false.
	remoteDebuggingEnabled?: null | bool @go(RemoteDebuggingEnabled,*bool)

	// The Remote Debugging Version. Possible values include VS2017 and VS2019
	remoteDebuggingVersion?: null | string @go(RemoteDebuggingVersion,*string)

	// One or more scm_ip_restriction blocks as defined above.
	scmIpRestriction?: [...#LinuxWebAppSlotSiteConfigScmIPRestrictionObservation] @go(ScmIPRestriction,[]LinuxWebAppSlotSiteConfigScmIPRestrictionObservation)

	// The configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: 1.0, 1.1, and 1.2. Defaults to 1.2.
	scmMinimumTlsVersion?: null | string @go(ScmMinimumTLSVersion,*string)
	scmType?:              null | string @go(ScmType,*string)

	// Should the Linux Web App ip_restriction configuration be used for the SCM also.
	scmUseMainIpRestriction?: null | bool @go(ScmUseMainIPRestriction,*bool)

	// Should the Linux Web App use a 32-bit worker? Defaults to true.
	use32BitWorker?: null | bool @go(Use32BitWorker,*bool)

	// Should all outbound traffic have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to false.
	// Should all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied? Defaults to `false`.
	vnetRouteAllEnabled?: null | bool @go(VnetRouteAllEnabled,*bool)

	// Should Web Sockets be enabled? Defaults to false.
	websocketsEnabled?: null | bool @go(WebsocketsEnabled,*bool)

	// The number of Workers for this Linux App Service Slot.
	workerCount?: null | float64 @go(WorkerCount,*float64)
}

#LinuxWebAppSlotSiteConfigParameters: {
	// The URL to the API Definition for this Linux Web App Slot.
	// +kubebuilder:validation:Optional
	apiDefinitionUrl?: null | string @go(APIDefinitionURL,*string)

	// The API Management API ID this Linux Web App Slot is associated with.
	// +kubebuilder:validation:Optional
	apiManagementApiId?: null | string @go(APIManagementAPIID,*string)

	// If this Linux Web App is Always On enabled. Defaults to true.
	// +kubebuilder:validation:Optional
	alwaysOn?: null | bool @go(AlwaysOn,*bool)

	// The App command line to launch.
	// +kubebuilder:validation:Optional
	appCommandLine?: null | string @go(AppCommandLine,*string)

	// A application_stack block as defined above.
	// +kubebuilder:validation:Optional
	applicationStack?: [...#LinuxWebAppSlotSiteConfigApplicationStackParameters] @go(ApplicationStack,[]LinuxWebAppSlotSiteConfigApplicationStackParameters)

	// Should Auto heal rules be enabled? Required with auto_heal_setting.
	// +kubebuilder:validation:Optional
	autoHealEnabled?: null | bool @go(AutoHealEnabled,*bool)

	// A auto_heal_setting block as defined above. Required with auto_heal.
	// +kubebuilder:validation:Optional
	autoHealSetting?: [...#SiteConfigAutoHealSettingParameters] @go(AutoHealSetting,[]SiteConfigAutoHealSettingParameters)

	// The Linux Web App Slot Name to automatically swap to when deployment to that slot is successfully completed.
	// +kubebuilder:validation:Optional
	autoSwapSlotName?: null | string @go(AutoSwapSlotName,*string)

	// The Client ID of the Managed Service Identity to use for connections to the Azure Container Registry.
	// +kubebuilder:validation:Optional
	containerRegistryManagedIdentityClientId?: null | string @go(ContainerRegistryManagedIdentityClientID,*string)

	// Should connections for Azure Container Registry use Managed Identity.
	// +kubebuilder:validation:Optional
	containerRegistryUseManagedIdentity?: null | bool @go(ContainerRegistryUseManagedIdentity,*bool)

	// A cors block as defined above.
	// +kubebuilder:validation:Optional
	cors?: [...#LinuxWebAppSlotSiteConfigCorsParameters] @go(Cors,[]LinuxWebAppSlotSiteConfigCorsParameters)

	// Specifies a list of Default Documents for the Linux Web App.
	// +kubebuilder:validation:Optional
	defaultDocuments?: [...null | string] @go(DefaultDocuments,[]*string)

	// The State of FTP / FTPS service. Possible values include AllAllowed, FtpsOnly, and Disabled.
	// +kubebuilder:validation:Optional
	ftpsState?: null | string @go(FtpsState,*string)

	// The amount of time in minutes that a node can be unhealthy before being removed from the load balancer. Possible values are between 2 and 10. Only valid in conjunction with health_check_path.
	// The amount of time in minutes that a node is unhealthy before being removed from the load balancer. Possible values are between `2` and `10`. Defaults to `10`. Only valid in conjunction with `health_check_path`
	// +kubebuilder:validation:Optional
	healthCheckEvictionTimeInMin?: null | float64 @go(HealthCheckEvictionTimeInMin,*float64)

	// The path to the Health Check.
	// +kubebuilder:validation:Optional
	healthCheckPath?: null | string @go(HealthCheckPath,*string)

	// Should the HTTP2 be enabled?
	// +kubebuilder:validation:Optional
	http2Enabled?: null | bool @go(Http2Enabled,*bool)

	// One or more ip_restriction blocks as defined above.
	// +kubebuilder:validation:Optional
	ipRestriction?: [...#LinuxWebAppSlotSiteConfigIPRestrictionParameters] @go(IPRestriction,[]LinuxWebAppSlotSiteConfigIPRestrictionParameters)

	// The Site load balancing. Possible values include: WeightedRoundRobin, LeastRequests, LeastResponseTime, WeightedTotalTraffic, RequestHash, PerSiteRoundRobin. Defaults to LeastRequests if omitted.
	// +kubebuilder:validation:Optional
	loadBalancingMode?: null | string @go(LoadBalancingMode,*string)

	// Use Local MySQL. Defaults to false.
	// +kubebuilder:validation:Optional
	localMysqlEnabled?: null | bool @go(LocalMySQLEnabled,*bool)

	// Managed pipeline mode. Possible values include: Integrated, Classic.
	// +kubebuilder:validation:Optional
	managedPipelineMode?: null | string @go(ManagedPipelineMode,*string)

	// The configures the minimum version of TLS required for SSL requests. Possible values include: 1.0, 1.1, and 1.2. Defaults to 1.2.
	// +kubebuilder:validation:Optional
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// Should Remote Debugging be enabled? Defaults to false.
	// +kubebuilder:validation:Optional
	remoteDebuggingEnabled?: null | bool @go(RemoteDebuggingEnabled,*bool)

	// The Remote Debugging Version. Possible values include VS2017 and VS2019
	// +kubebuilder:validation:Optional
	remoteDebuggingVersion?: null | string @go(RemoteDebuggingVersion,*string)

	// One or more scm_ip_restriction blocks as defined above.
	// +kubebuilder:validation:Optional
	scmIpRestriction?: [...#LinuxWebAppSlotSiteConfigScmIPRestrictionParameters] @go(ScmIPRestriction,[]LinuxWebAppSlotSiteConfigScmIPRestrictionParameters)

	// The configures the minimum version of TLS required for SSL requests to the SCM site Possible values include: 1.0, 1.1, and 1.2. Defaults to 1.2.
	// +kubebuilder:validation:Optional
	scmMinimumTlsVersion?: null | string @go(ScmMinimumTLSVersion,*string)

	// Should the Linux Web App ip_restriction configuration be used for the SCM also.
	// +kubebuilder:validation:Optional
	scmUseMainIpRestriction?: null | bool @go(ScmUseMainIPRestriction,*bool)

	// Should the Linux Web App use a 32-bit worker? Defaults to true.
	// +kubebuilder:validation:Optional
	use32BitWorker?: null | bool @go(Use32BitWorker,*bool)

	// Should all outbound traffic have NAT Gateways, Network Security Groups and User Defined Routes applied? Defaults to false.
	// Should all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied? Defaults to `false`.
	// +kubebuilder:validation:Optional
	vnetRouteAllEnabled?: null | bool @go(VnetRouteAllEnabled,*bool)

	// Should Web Sockets be enabled? Defaults to false.
	// +kubebuilder:validation:Optional
	websocketsEnabled?: null | bool @go(WebsocketsEnabled,*bool)

	// The number of Workers for this Linux App Service Slot.
	// +kubebuilder:validation:Optional
	workerCount?: null | float64 @go(WorkerCount,*float64)
}

#LinuxWebAppSlotSiteConfigScmIPRestrictionHeadersInitParameters: {
	// Specifies a list of Azure Front Door IDs.
	xAzureFdid?: [...null | string] @go(XAzureFdid,[]*string)

	// Specifies if a Front Door Health Probe should be expected. The only possible value is 1.
	xFdHealthProbe?: [...null | string] @go(XFdHealthProbe,[]*string)

	// Specifies a list of addresses for which matching should be applied. Omitting this value means allow any.
	xForwardedFor?: [...null | string] @go(XForwardedFor,[]*string)

	// Specifies a list of Hosts for which matching should be applied.
	xForwardedHost?: [...null | string] @go(XForwardedHost,[]*string)
}

#LinuxWebAppSlotSiteConfigScmIPRestrictionHeadersObservation: {
	// Specifies a list of Azure Front Door IDs.
	xAzureFdid?: [...null | string] @go(XAzureFdid,[]*string)

	// Specifies if a Front Door Health Probe should be expected. The only possible value is 1.
	xFdHealthProbe?: [...null | string] @go(XFdHealthProbe,[]*string)

	// Specifies a list of addresses for which matching should be applied. Omitting this value means allow any.
	xForwardedFor?: [...null | string] @go(XForwardedFor,[]*string)

	// Specifies a list of Hosts for which matching should be applied.
	xForwardedHost?: [...null | string] @go(XForwardedHost,[]*string)
}

#LinuxWebAppSlotSiteConfigScmIPRestrictionHeadersParameters: {
	// Specifies a list of Azure Front Door IDs.
	// +kubebuilder:validation:Optional
	xAzureFdid?: [...null | string] @go(XAzureFdid,[]*string)

	// Specifies if a Front Door Health Probe should be expected. The only possible value is 1.
	// +kubebuilder:validation:Optional
	xFdHealthProbe?: [...null | string] @go(XFdHealthProbe,[]*string)

	// Specifies a list of addresses for which matching should be applied. Omitting this value means allow any.
	// +kubebuilder:validation:Optional
	xForwardedFor?: [...null | string] @go(XForwardedFor,[]*string)

	// Specifies a list of Hosts for which matching should be applied.
	// +kubebuilder:validation:Optional
	xForwardedHost?: [...null | string] @go(XForwardedHost,[]*string)
}

#LinuxWebAppSlotSiteConfigScmIPRestrictionInitParameters: {
	// The action to take. Possible values are Allow or Deny.
	// The action to take. Possible values are `Allow` or `Deny`.
	action?: null | string @go(Action,*string)

	// A headers block as defined above.
	headers?: [...#LinuxWebAppSlotSiteConfigScmIPRestrictionHeadersInitParameters] @go(Headers,[]LinuxWebAppSlotSiteConfigScmIPRestrictionHeadersInitParameters)

	// The CIDR notation of the IP or IP Range to match. For example: 10.0.0.0/24 or 192.168.10.1/32
	// The CIDR notation of the IP or IP Range to match. For example: `10.0.0.0/24` or `192.168.10.1/32` or `fe80::/64` or `13.107.6.152/31,13.107.128.0/22`
	ipAddress?: null | string @go(IPAddress,*string)

	// The name which should be used for this Storage Account.
	// The name which should be used for this `ip_restriction`.
	name?: null | string @go(Name,*string)

	// The priority value of this ip_restriction. Defaults to 65000.
	// The priority value of this `ip_restriction`.
	priority?: null | float64 @go(Priority,*float64)

	// The Service Tag used for this IP Restriction.
	// The Service Tag used for this IP Restriction.
	serviceTag?: null | string @go(ServiceTag,*string)
}

#LinuxWebAppSlotSiteConfigScmIPRestrictionObservation: {
	// The action to take. Possible values are Allow or Deny.
	// The action to take. Possible values are `Allow` or `Deny`.
	action?: null | string @go(Action,*string)

	// A headers block as defined above.
	headers?: [...#LinuxWebAppSlotSiteConfigScmIPRestrictionHeadersObservation] @go(Headers,[]LinuxWebAppSlotSiteConfigScmIPRestrictionHeadersObservation)

	// The CIDR notation of the IP or IP Range to match. For example: 10.0.0.0/24 or 192.168.10.1/32
	// The CIDR notation of the IP or IP Range to match. For example: `10.0.0.0/24` or `192.168.10.1/32` or `fe80::/64` or `13.107.6.152/31,13.107.128.0/22`
	ipAddress?: null | string @go(IPAddress,*string)

	// The name which should be used for this Storage Account.
	// The name which should be used for this `ip_restriction`.
	name?: null | string @go(Name,*string)

	// The priority value of this ip_restriction. Defaults to 65000.
	// The priority value of this `ip_restriction`.
	priority?: null | float64 @go(Priority,*float64)

	// The Service Tag used for this IP Restriction.
	// The Service Tag used for this IP Restriction.
	serviceTag?: null | string @go(ServiceTag,*string)

	// The subnet id which will be used by this Web App Slot for regional virtual network integration.
	// The Virtual Network Subnet ID used for this IP Restriction.
	virtualNetworkSubnetId?: null | string @go(VirtualNetworkSubnetID,*string)
}

#LinuxWebAppSlotSiteConfigScmIPRestrictionParameters: {
	// The action to take. Possible values are Allow or Deny.
	// The action to take. Possible values are `Allow` or `Deny`.
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// A headers block as defined above.
	// +kubebuilder:validation:Optional
	headers?: [...#LinuxWebAppSlotSiteConfigScmIPRestrictionHeadersParameters] @go(Headers,[]LinuxWebAppSlotSiteConfigScmIPRestrictionHeadersParameters)

	// The CIDR notation of the IP or IP Range to match. For example: 10.0.0.0/24 or 192.168.10.1/32
	// The CIDR notation of the IP or IP Range to match. For example: `10.0.0.0/24` or `192.168.10.1/32` or `fe80::/64` or `13.107.6.152/31,13.107.128.0/22`
	// +kubebuilder:validation:Optional
	ipAddress?: null | string @go(IPAddress,*string)

	// The name which should be used for this Storage Account.
	// The name which should be used for this `ip_restriction`.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The priority value of this ip_restriction. Defaults to 65000.
	// The priority value of this `ip_restriction`.
	// +kubebuilder:validation:Optional
	priority?: null | float64 @go(Priority,*float64)

	// The Service Tag used for this IP Restriction.
	// The Service Tag used for this IP Restriction.
	// +kubebuilder:validation:Optional
	serviceTag?: null | string @go(ServiceTag,*string)

	// The subnet id which will be used by this Web App Slot for regional virtual network integration.
	// The Virtual Network Subnet ID used for this IP Restriction.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	virtualNetworkSubnetId?: null | string @go(VirtualNetworkSubnetID,*string)
}

#LinuxWebAppSlotSiteCredentialInitParameters: {
}

#LinuxWebAppSlotSiteCredentialObservation: {
	// The Site Credentials Username used for publishing.
	name?: null | string @go(Name,*string)

	// The Site Credentials Password used for publishing.
	password?: null | string @go(Password,*string)
}

#LinuxWebAppSlotSiteCredentialParameters: {
}

#LinuxWebAppSlotStorageAccountInitParameters: {
	// The Name of the Storage Account.
	accountName?: null | string @go(AccountName,*string)

	// The path at which to mount the storage share.
	mountPath?: null | string @go(MountPath,*string)

	// The name which should be used for this Storage Account.
	name?: null | string @go(Name,*string)

	// The Name of the File Share or Container Name for Blob storage.
	shareName?: null | string @go(ShareName,*string)

	// The Azure Storage Type. Possible values include AzureFiles and AzureBlob
	type?: null | string @go(Type,*string)
}

#LinuxWebAppSlotStorageAccountObservation: {
	// The Name of the Storage Account.
	accountName?: null | string @go(AccountName,*string)

	// The path at which to mount the storage share.
	mountPath?: null | string @go(MountPath,*string)

	// The name which should be used for this Storage Account.
	name?: null | string @go(Name,*string)

	// The Name of the File Share or Container Name for Blob storage.
	shareName?: null | string @go(ShareName,*string)

	// The Azure Storage Type. Possible values include AzureFiles and AzureBlob
	type?: null | string @go(Type,*string)
}

#LinuxWebAppSlotStorageAccountParameters: {
	// The Name of the Storage Account.
	// +kubebuilder:validation:Optional
	accountName?: null | string @go(AccountName,*string)

	// The path at which to mount the storage share.
	// +kubebuilder:validation:Optional
	mountPath?: null | string @go(MountPath,*string)

	// The name which should be used for this Storage Account.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The Name of the File Share or Container Name for Blob storage.
	// +kubebuilder:validation:Optional
	shareName?: null | string @go(ShareName,*string)

	// The Azure Storage Type. Possible values include AzureFiles and AzureBlob
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#LogsApplicationLogsInitParameters: {
	// A azure_blob_storage_http block as defined above.
	azureBlobStorage?: [...#ApplicationLogsAzureBlobStorageInitParameters] @go(AzureBlobStorage,[]ApplicationLogsAzureBlobStorageInitParameters)

	// Log level. Possible values include Verbose, Information, Warning, and Error.
	fileSystemLevel?: null | string @go(FileSystemLevel,*string)
}

#LogsApplicationLogsObservation: {
	// A azure_blob_storage_http block as defined above.
	azureBlobStorage?: [...#ApplicationLogsAzureBlobStorageObservation] @go(AzureBlobStorage,[]ApplicationLogsAzureBlobStorageObservation)

	// Log level. Possible values include Verbose, Information, Warning, and Error.
	fileSystemLevel?: null | string @go(FileSystemLevel,*string)
}

#LogsApplicationLogsParameters: {
	// A azure_blob_storage_http block as defined above.
	// +kubebuilder:validation:Optional
	azureBlobStorage?: [...#ApplicationLogsAzureBlobStorageParameters] @go(AzureBlobStorage,[]ApplicationLogsAzureBlobStorageParameters)

	// Log level. Possible values include Verbose, Information, Warning, and Error.
	// +kubebuilder:validation:Optional
	fileSystemLevel?: null | string @go(FileSystemLevel,*string)
}

#LogsHTTPLogsAzureBlobStorageInitParameters: {
	// The retention period in days. A values of 0 means no retention.
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)
}

#LogsHTTPLogsAzureBlobStorageObservation: {
	// The retention period in days. A values of 0 means no retention.
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)
}

#LogsHTTPLogsAzureBlobStorageParameters: {
	// The retention period in days. A values of 0 means no retention.
	// +kubebuilder:validation:Optional
	retentionInDays?: null | float64 @go(RetentionInDays,*float64)
}

#LogsHTTPLogsInitParameters: {
	// A azure_blob_storage_http block as defined above.
	azureBlobStorage?: [...#LogsHTTPLogsAzureBlobStorageInitParameters] @go(AzureBlobStorage,[]LogsHTTPLogsAzureBlobStorageInitParameters)

	// A file_system block as defined above.
	fileSystem?: [...#HTTPLogsFileSystemInitParameters] @go(FileSystem,[]HTTPLogsFileSystemInitParameters)
}

#LogsHTTPLogsObservation: {
	// A azure_blob_storage_http block as defined above.
	azureBlobStorage?: [...#LogsHTTPLogsAzureBlobStorageObservation] @go(AzureBlobStorage,[]LogsHTTPLogsAzureBlobStorageObservation)

	// A file_system block as defined above.
	fileSystem?: [...#HTTPLogsFileSystemObservation] @go(FileSystem,[]HTTPLogsFileSystemObservation)
}

#LogsHTTPLogsParameters: {
	// A azure_blob_storage_http block as defined above.
	// +kubebuilder:validation:Optional
	azureBlobStorage?: [...#LogsHTTPLogsAzureBlobStorageParameters] @go(AzureBlobStorage,[]LogsHTTPLogsAzureBlobStorageParameters)

	// A file_system block as defined above.
	// +kubebuilder:validation:Optional
	fileSystem?: [...#HTTPLogsFileSystemParameters] @go(FileSystem,[]HTTPLogsFileSystemParameters)
}

#SiteConfigAutoHealSettingInitParameters: {
	// The action to take. Possible values are Allow or Deny.
	action?: [...#AutoHealSettingActionInitParameters] @go(Action,[]AutoHealSettingActionInitParameters)

	// A trigger block as defined below.
	trigger?: [...#AutoHealSettingTriggerInitParameters] @go(Trigger,[]AutoHealSettingTriggerInitParameters)
}

#SiteConfigAutoHealSettingObservation: {
	// The action to take. Possible values are Allow or Deny.
	action?: [...#AutoHealSettingActionObservation] @go(Action,[]AutoHealSettingActionObservation)

	// A trigger block as defined below.
	trigger?: [...#AutoHealSettingTriggerObservation] @go(Trigger,[]AutoHealSettingTriggerObservation)
}

#SiteConfigAutoHealSettingParameters: {
	// The action to take. Possible values are Allow or Deny.
	// +kubebuilder:validation:Optional
	action?: [...#AutoHealSettingActionParameters] @go(Action,[]AutoHealSettingActionParameters)

	// A trigger block as defined below.
	// +kubebuilder:validation:Optional
	trigger?: [...#AutoHealSettingTriggerParameters] @go(Trigger,[]AutoHealSettingTriggerParameters)
}

#TriggerRequestsInitParameters: {
	// The number of occurrences of the defined status_code in the specified interval on which to trigger this rule.
	count?: null | float64 @go(Count,*float64)

	// The time interval in the form hh:mm:ss.
	interval?: null | string @go(Interval,*string)
}

#TriggerRequestsObservation: {
	// The number of occurrences of the defined status_code in the specified interval on which to trigger this rule.
	count?: null | float64 @go(Count,*float64)

	// The time interval in the form hh:mm:ss.
	interval?: null | string @go(Interval,*string)
}

#TriggerRequestsParameters: {
	// The number of occurrences of the defined status_code in the specified interval on which to trigger this rule.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)

	// The time interval in the form hh:mm:ss.
	// +kubebuilder:validation:Optional
	interval?: null | string @go(Interval,*string)
}

#TriggerSlowRequestInitParameters: {
	// The number of occurrences of the defined status_code in the specified interval on which to trigger this rule.
	count?: null | float64 @go(Count,*float64)

	// The time interval in the form hh:mm:ss.
	interval?: null | string @go(Interval,*string)

	// The path to which this rule status code applies.
	path?: null | string @go(Path,*string)

	// The threshold of time passed to qualify as a Slow Request in hh:mm:ss.
	timeTaken?: null | string @go(TimeTaken,*string)
}

#TriggerSlowRequestObservation: {
	// The number of occurrences of the defined status_code in the specified interval on which to trigger this rule.
	count?: null | float64 @go(Count,*float64)

	// The time interval in the form hh:mm:ss.
	interval?: null | string @go(Interval,*string)

	// The path to which this rule status code applies.
	path?: null | string @go(Path,*string)

	// The threshold of time passed to qualify as a Slow Request in hh:mm:ss.
	timeTaken?: null | string @go(TimeTaken,*string)
}

#TriggerSlowRequestParameters: {
	// The number of occurrences of the defined status_code in the specified interval on which to trigger this rule.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)

	// The time interval in the form hh:mm:ss.
	// +kubebuilder:validation:Optional
	interval?: null | string @go(Interval,*string)

	// The path to which this rule status code applies.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The threshold of time passed to qualify as a Slow Request in hh:mm:ss.
	// +kubebuilder:validation:Optional
	timeTaken?: null | string @go(TimeTaken,*string)
}

#TriggerStatusCodeInitParameters: {
	// The number of occurrences of the defined status_code in the specified interval on which to trigger this rule.
	count?: null | float64 @go(Count,*float64)

	// The time interval in the form hh:mm:ss.
	interval?: null | string @go(Interval,*string)

	// The path to which this rule status code applies.
	path?: null | string @go(Path,*string)

	// The status code for this rule, accepts single status codes and status code ranges. e.g. 500 or 400-499. Possible values are integers between 101 and 599
	statusCodeRange?: null | string @go(StatusCodeRange,*string)

	// The Request Sub Status of the Status Code.
	subStatus?: null | float64 @go(SubStatus,*float64)

	// The Win32 Status Code of the Request.
	win32Status?: null | string @go(Win32Status,*string)
}

#TriggerStatusCodeObservation: {
	// The number of occurrences of the defined status_code in the specified interval on which to trigger this rule.
	count?: null | float64 @go(Count,*float64)

	// The time interval in the form hh:mm:ss.
	interval?: null | string @go(Interval,*string)

	// The path to which this rule status code applies.
	path?: null | string @go(Path,*string)

	// The status code for this rule, accepts single status codes and status code ranges. e.g. 500 or 400-499. Possible values are integers between 101 and 599
	statusCodeRange?: null | string @go(StatusCodeRange,*string)

	// The Request Sub Status of the Status Code.
	subStatus?: null | float64 @go(SubStatus,*float64)

	// The Win32 Status Code of the Request.
	win32Status?: null | string @go(Win32Status,*string)
}

#TriggerStatusCodeParameters: {
	// The number of occurrences of the defined status_code in the specified interval on which to trigger this rule.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)

	// The time interval in the form hh:mm:ss.
	// +kubebuilder:validation:Optional
	interval?: null | string @go(Interval,*string)

	// The path to which this rule status code applies.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The status code for this rule, accepts single status codes and status code ranges. e.g. 500 or 400-499. Possible values are integers between 101 and 599
	// +kubebuilder:validation:Optional
	statusCodeRange?: null | string @go(StatusCodeRange,*string)

	// The Request Sub Status of the Status Code.
	// +kubebuilder:validation:Optional
	subStatus?: null | float64 @go(SubStatus,*float64)

	// The Win32 Status Code of the Request.
	// +kubebuilder:validation:Optional
	win32Status?: null | string @go(Win32Status,*string)
}

// LinuxWebAppSlotSpec defines the desired state of LinuxWebAppSlot
#LinuxWebAppSlotSpec: {
	forProvider: #LinuxWebAppSlotParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LinuxWebAppSlotInitParameters @go(InitProvider)
}

// LinuxWebAppSlotStatus defines the observed state of LinuxWebAppSlot.
#LinuxWebAppSlotStatus: {
	atProvider?: #LinuxWebAppSlotObservation @go(AtProvider)
}

// LinuxWebAppSlot is the Schema for the LinuxWebAppSlots API. Manages a Linux Web App Slot.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LinuxWebAppSlot: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.siteConfig) || (has(self.initProvider) && has(self.initProvider.siteConfig))",message="spec.forProvider.siteConfig is a required parameter"
	spec:    #LinuxWebAppSlotSpec   @go(Spec)
	status?: #LinuxWebAppSlotStatus @go(Status)
}

// LinuxWebAppSlotList contains a list of LinuxWebAppSlots
#LinuxWebAppSlotList: {
	items: [...#LinuxWebAppSlot] @go(Items,[]LinuxWebAppSlot)
}
