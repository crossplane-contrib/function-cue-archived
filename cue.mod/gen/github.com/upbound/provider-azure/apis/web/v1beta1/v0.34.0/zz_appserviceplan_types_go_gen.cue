// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/web/v1beta1

package v1beta1

#AppServicePlanObservation: {
	// The ID of the App Service Environment where the App Service Plan should be located. Changing forces a new resource to be created.
	appServiceEnvironmentId?: null | string @go(AppServiceEnvironmentID,*string)

	// The ID of the App Service Plan component.
	id?: null | string @go(ID,*string)

	// Whether to create a xenon App Service Plan.
	isXenon?: null | bool @go(IsXenon,*bool)

	// The kind of the App Service Plan to create. Possible values are Windows (also available as App), Linux, elastic (for Premium Consumption), xenon and FunctionApp (for a Consumption Plan). Defaults to Windows. Changing this forces a new resource to be created.
	kind?: null | string @go(Kind,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan.
	maximumElasticWorkerCount?: null | float64 @go(MaximumElasticWorkerCount,*float64)

	// The maximum number of workers supported with the App Service Plan's sku.
	maximumNumberOfWorkers?: null | float64 @go(MaximumNumberOfWorkers,*float64)

	// Can Apps assigned to this App Service Plan be scaled independently? If set to false apps assigned to this plan will scale to all instances of the plan.
	perSiteScaling?: null | bool @go(PerSiteScaling,*bool)

	// Is this App Service Plan Reserved.
	reserved?: null | bool @go(Reserved,*bool)

	// The name of the resource group in which to create the App Service Plan component. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A sku block as documented below.
	sku?: [...#SkuObservation] @go(Sku,[]SkuObservation)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies if the App Service Plan should be Zone Redundant. Changing this forces a new resource to be created.
	zoneRedundant?: null | bool @go(ZoneRedundant,*bool)
}

#AppServicePlanParameters: {
	// The ID of the App Service Environment where the App Service Plan should be located. Changing forces a new resource to be created.
	// +kubebuilder:validation:Optional
	appServiceEnvironmentId?: null | string @go(AppServiceEnvironmentID,*string)

	// Whether to create a xenon App Service Plan.
	// +kubebuilder:validation:Optional
	isXenon?: null | bool @go(IsXenon,*bool)

	// The kind of the App Service Plan to create. Possible values are Windows (also available as App), Linux, elastic (for Premium Consumption), xenon and FunctionApp (for a Consumption Plan). Defaults to Windows. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	kind?: null | string @go(Kind,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan.
	// +kubebuilder:validation:Optional
	maximumElasticWorkerCount?: null | float64 @go(MaximumElasticWorkerCount,*float64)

	// Can Apps assigned to this App Service Plan be scaled independently? If set to false apps assigned to this plan will scale to all instances of the plan.
	// +kubebuilder:validation:Optional
	perSiteScaling?: null | bool @go(PerSiteScaling,*bool)

	// Is this App Service Plan Reserved.
	// +kubebuilder:validation:Optional
	reserved?: null | bool @go(Reserved,*bool)

	// The name of the resource group in which to create the App Service Plan component. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A sku block as documented below.
	// +kubebuilder:validation:Optional
	sku?: [...#SkuParameters] @go(Sku,[]SkuParameters)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies if the App Service Plan should be Zone Redundant. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	zoneRedundant?: null | bool @go(ZoneRedundant,*bool)
}

#SkuObservation: {
	// Specifies the number of workers associated with this App Service Plan.
	capacity?: null | float64 @go(Capacity,*float64)

	// Specifies the plan's instance size.
	size?: null | string @go(Size,*string)

	// Specifies the plan's pricing tier.
	tier?: null | string @go(Tier,*string)
}

#SkuParameters: {
	// Specifies the number of workers associated with this App Service Plan.
	// +kubebuilder:validation:Optional
	capacity?: null | float64 @go(Capacity,*float64)

	// Specifies the plan's instance size.
	// +kubebuilder:validation:Required
	size?: null | string @go(Size,*string)

	// Specifies the plan's pricing tier.
	// +kubebuilder:validation:Required
	tier?: null | string @go(Tier,*string)
}

// AppServicePlanSpec defines the desired state of AppServicePlan
#AppServicePlanSpec: {
	forProvider: #AppServicePlanParameters @go(ForProvider)
}

// AppServicePlanStatus defines the observed state of AppServicePlan.
#AppServicePlanStatus: {
	atProvider?: #AppServicePlanObservation @go(AtProvider)
}

// AppServicePlan is the Schema for the AppServicePlans API. Manages an App Service Plan component.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#AppServicePlan: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.sku)",message="sku is a required parameter"
	spec:    #AppServicePlanSpec   @go(Spec)
	status?: #AppServicePlanStatus @go(Status)
}

// AppServicePlanList contains a list of AppServicePlans
#AppServicePlanList: {
	items: [...#AppServicePlan] @go(Items,[]AppServicePlan)
}
