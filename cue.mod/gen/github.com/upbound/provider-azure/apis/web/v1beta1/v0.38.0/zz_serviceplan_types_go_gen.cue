// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/web/v1beta1

package v1beta1

#ServicePlanInitParameters: {
	// The ID of the App Service Environment to create this Service Plan in.
	appServiceEnvironmentId?: null | string @go(AppServiceEnvironmentID,*string)

	// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
	location?: null | string @go(Location,*string)

	// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
	maximumElasticWorkerCount?: null | float64 @go(MaximumElasticWorkerCount,*float64)

	// The O/S type for the App Services to be hosted in this plan. Possible values include Windows, Linux, and WindowsContainer. Changing this forces a new resource to be created.
	osType?: null | string @go(OsType,*string)

	// Should Per Site Scaling be enabled. Defaults to false.
	perSiteScalingEnabled?: null | bool @go(PerSiteScalingEnabled,*bool)

	// The SKU for the plan. Possible values include B1, B2, B3, D1, F1, I1, I2, I3, I1v2, I2v2, I3v2, I4v2, I5v2, I6v2, P1v2, P2v2, P3v2, P1v3, P2v3, P3v3, P1mv3, P2mv3, P3mv3, P4mv3, P5mv3, S1, S2, S3, SHARED, EP1, EP2, EP3, WS1, WS2, WS3, and Y1.
	skuName?: null | string @go(SkuName,*string)

	// A mapping of tags which should be assigned to the AppService.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The number of Workers (instances) to be allocated.
	workerCount?: null | float64 @go(WorkerCount,*float64)

	// Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
	zoneBalancingEnabled?: null | bool @go(ZoneBalancingEnabled,*bool)
}

#ServicePlanObservation: {
	// The ID of the App Service Environment to create this Service Plan in.
	appServiceEnvironmentId?: null | string @go(AppServiceEnvironmentID,*string)

	// The ID of the Service Plan.
	id?: null | string @go(ID,*string)

	// A string representing the Kind of Service Plan.
	kind?: null | string @go(Kind,*string)

	// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
	location?: null | string @go(Location,*string)

	// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
	maximumElasticWorkerCount?: null | float64 @go(MaximumElasticWorkerCount,*float64)

	// The O/S type for the App Services to be hosted in this plan. Possible values include Windows, Linux, and WindowsContainer. Changing this forces a new resource to be created.
	osType?: null | string @go(OsType,*string)

	// Should Per Site Scaling be enabled. Defaults to false.
	perSiteScalingEnabled?: null | bool @go(PerSiteScalingEnabled,*bool)

	// Whether this is a reserved Service Plan Type. true if os_type is Linux, otherwise false.
	reserved?: null | bool @go(Reserved,*bool)

	// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The SKU for the plan. Possible values include B1, B2, B3, D1, F1, I1, I2, I3, I1v2, I2v2, I3v2, I4v2, I5v2, I6v2, P1v2, P2v2, P3v2, P1v3, P2v3, P3v3, P1mv3, P2mv3, P3mv3, P4mv3, P5mv3, S1, S2, S3, SHARED, EP1, EP2, EP3, WS1, WS2, WS3, and Y1.
	skuName?: null | string @go(SkuName,*string)

	// A mapping of tags which should be assigned to the AppService.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The number of Workers (instances) to be allocated.
	workerCount?: null | float64 @go(WorkerCount,*float64)

	// Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
	zoneBalancingEnabled?: null | bool @go(ZoneBalancingEnabled,*bool)
}

#ServicePlanParameters: {
	// The ID of the App Service Environment to create this Service Plan in.
	// +kubebuilder:validation:Optional
	appServiceEnvironmentId?: null | string @go(AppServiceEnvironmentID,*string)

	// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
	// +kubebuilder:validation:Optional
	maximumElasticWorkerCount?: null | float64 @go(MaximumElasticWorkerCount,*float64)

	// The O/S type for the App Services to be hosted in this plan. Possible values include Windows, Linux, and WindowsContainer. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	osType?: null | string @go(OsType,*string)

	// Should Per Site Scaling be enabled. Defaults to false.
	// +kubebuilder:validation:Optional
	perSiteScalingEnabled?: null | bool @go(PerSiteScalingEnabled,*bool)

	// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The SKU for the plan. Possible values include B1, B2, B3, D1, F1, I1, I2, I3, I1v2, I2v2, I3v2, I4v2, I5v2, I6v2, P1v2, P2v2, P3v2, P1v3, P2v3, P3v3, P1mv3, P2mv3, P3mv3, P4mv3, P5mv3, S1, S2, S3, SHARED, EP1, EP2, EP3, WS1, WS2, WS3, and Y1.
	// +kubebuilder:validation:Optional
	skuName?: null | string @go(SkuName,*string)

	// A mapping of tags which should be assigned to the AppService.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The number of Workers (instances) to be allocated.
	// +kubebuilder:validation:Optional
	workerCount?: null | float64 @go(WorkerCount,*float64)

	// Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	zoneBalancingEnabled?: null | bool @go(ZoneBalancingEnabled,*bool)
}

// ServicePlanSpec defines the desired state of ServicePlan
#ServicePlanSpec: {
	forProvider: #ServicePlanParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ServicePlanInitParameters @go(InitProvider)
}

// ServicePlanStatus defines the observed state of ServicePlan.
#ServicePlanStatus: {
	atProvider?: #ServicePlanObservation @go(AtProvider)
}

// ServicePlan is the Schema for the ServicePlans API. Manages an App Service: Service Plan.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ServicePlan: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.osType) || (has(self.initProvider) && has(self.initProvider.osType))",message="spec.forProvider.osType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.skuName) || (has(self.initProvider) && has(self.initProvider.skuName))",message="spec.forProvider.skuName is a required parameter"
	spec:    #ServicePlanSpec   @go(Spec)
	status?: #ServicePlanStatus @go(Status)
}

// ServicePlanList contains a list of ServicePlans
#ServicePlanList: {
	items: [...#ServicePlan] @go(Items,[]ServicePlan)
}
