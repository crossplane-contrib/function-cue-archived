// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/servicebus/v1beta1

package v1beta1

#NamespaceNetworkRuleSetInitParameters: {
	// Specifies the default action for the ServiceBus Namespace Network Rule Set. Possible values are Allow and Deny. Defaults to Deny.
	defaultAction?: null | string @go(DefaultAction,*string)

	// One or more IP Addresses, or CIDR Blocks which should be able to access the ServiceBus Namespace.
	ipRules?: [...null | string] @go(IPRules,[]*string)

	// One or more network_rules blocks as defined below.
	networkRules?: [...#NetworkRulesInitParameters] @go(NetworkRules,[]NetworkRulesInitParameters)

	// Whether to allow traffic over public network. Possible values are true and false. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// If True, then Azure Services that are known and trusted for this resource type are allowed to bypass firewall configuration. See Trusted Microsoft Services
	trustedServicesAllowed?: null | bool @go(TrustedServicesAllowed,*bool)
}

#NamespaceNetworkRuleSetObservation: {
	// Specifies the default action for the ServiceBus Namespace Network Rule Set. Possible values are Allow and Deny. Defaults to Deny.
	defaultAction?: null | string @go(DefaultAction,*string)

	// The ID of the ServiceBus Namespace Network Rule Set.
	id?: null | string @go(ID,*string)

	// One or more IP Addresses, or CIDR Blocks which should be able to access the ServiceBus Namespace.
	ipRules?: [...null | string] @go(IPRules,[]*string)

	// Specifies the ServiceBus Namespace ID to which to attach the ServiceBus Namespace Network Rule Set. Changing this forces a new resource to be created.
	namespaceId?: null | string @go(NamespaceID,*string)

	// One or more network_rules blocks as defined below.
	networkRules?: [...#NetworkRulesObservation] @go(NetworkRules,[]NetworkRulesObservation)

	// Whether to allow traffic over public network. Possible values are true and false. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// If True, then Azure Services that are known and trusted for this resource type are allowed to bypass firewall configuration. See Trusted Microsoft Services
	trustedServicesAllowed?: null | bool @go(TrustedServicesAllowed,*bool)
}

#NamespaceNetworkRuleSetParameters: {
	// Specifies the default action for the ServiceBus Namespace Network Rule Set. Possible values are Allow and Deny. Defaults to Deny.
	// +kubebuilder:validation:Optional
	defaultAction?: null | string @go(DefaultAction,*string)

	// One or more IP Addresses, or CIDR Blocks which should be able to access the ServiceBus Namespace.
	// +kubebuilder:validation:Optional
	ipRules?: [...null | string] @go(IPRules,[]*string)

	// Specifies the ServiceBus Namespace ID to which to attach the ServiceBus Namespace Network Rule Set. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/servicebus/v1beta1.ServiceBusNamespace
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	namespaceId?: null | string @go(NamespaceID,*string)

	// One or more network_rules blocks as defined below.
	// +kubebuilder:validation:Optional
	networkRules?: [...#NetworkRulesParameters] @go(NetworkRules,[]NetworkRulesParameters)

	// Whether to allow traffic over public network. Possible values are true and false. Defaults to true.
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// If True, then Azure Services that are known and trusted for this resource type are allowed to bypass firewall configuration. See Trusted Microsoft Services
	// +kubebuilder:validation:Optional
	trustedServicesAllowed?: null | bool @go(TrustedServicesAllowed,*bool)
}

#NetworkRulesInitParameters: {
	// Should the ServiceBus Namespace Network Rule Set ignore missing Virtual Network Service Endpoint option in the Subnet? Defaults to false.
	ignoreMissingVnetServiceEndpoint?: null | bool @go(IgnoreMissingVnetServiceEndpoint,*bool)
}

#NetworkRulesObservation: {
	// Should the ServiceBus Namespace Network Rule Set ignore missing Virtual Network Service Endpoint option in the Subnet? Defaults to false.
	ignoreMissingVnetServiceEndpoint?: null | bool @go(IgnoreMissingVnetServiceEndpoint,*bool)

	// The Subnet ID which should be able to access this ServiceBus Namespace.
	subnetId?: null | string @go(SubnetID,*string)
}

#NetworkRulesParameters: {
	// Should the ServiceBus Namespace Network Rule Set ignore missing Virtual Network Service Endpoint option in the Subnet? Defaults to false.
	// +kubebuilder:validation:Optional
	ignoreMissingVnetServiceEndpoint?: null | bool @go(IgnoreMissingVnetServiceEndpoint,*bool)

	// The Subnet ID which should be able to access this ServiceBus Namespace.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)
}

// NamespaceNetworkRuleSetSpec defines the desired state of NamespaceNetworkRuleSet
#NamespaceNetworkRuleSetSpec: {
	forProvider: #NamespaceNetworkRuleSetParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #NamespaceNetworkRuleSetInitParameters @go(InitProvider)
}

// NamespaceNetworkRuleSetStatus defines the observed state of NamespaceNetworkRuleSet.
#NamespaceNetworkRuleSetStatus: {
	atProvider?: #NamespaceNetworkRuleSetObservation @go(AtProvider)
}

// NamespaceNetworkRuleSet is the Schema for the NamespaceNetworkRuleSets API. Manages a ServiceBus Namespace Network Rule Set.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#NamespaceNetworkRuleSet: {
	spec:    #NamespaceNetworkRuleSetSpec   @go(Spec)
	status?: #NamespaceNetworkRuleSetStatus @go(Status)
}

// NamespaceNetworkRuleSetList contains a list of NamespaceNetworkRuleSets
#NamespaceNetworkRuleSetList: {
	items: [...#NamespaceNetworkRuleSet] @go(Items,[]NamespaceNetworkRuleSet)
}
