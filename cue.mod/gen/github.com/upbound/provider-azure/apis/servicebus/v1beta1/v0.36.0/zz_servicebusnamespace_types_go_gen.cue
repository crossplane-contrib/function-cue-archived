// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/servicebus/v1beta1

package v1beta1

#CustomerManagedKeyInitParameters: {
	// The ID of the User Assigned Identity that has access to the key.
	identityId?: null | string @go(IdentityID,*string)

	// Used to specify whether enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
	infrastructureEncryptionEnabled?: null | bool @go(InfrastructureEncryptionEnabled,*bool)

	// The ID of the Key Vault Key which should be used to Encrypt the data in this ServiceBus Namespace.
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)
}

#CustomerManagedKeyObservation: {
	// The ID of the User Assigned Identity that has access to the key.
	identityId?: null | string @go(IdentityID,*string)

	// Used to specify whether enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
	infrastructureEncryptionEnabled?: null | bool @go(InfrastructureEncryptionEnabled,*bool)

	// The ID of the Key Vault Key which should be used to Encrypt the data in this ServiceBus Namespace.
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)
}

#CustomerManagedKeyParameters: {
	// The ID of the User Assigned Identity that has access to the key.
	// +kubebuilder:validation:Optional
	identityId?: null | string @go(IdentityID,*string)

	// Used to specify whether enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	infrastructureEncryptionEnabled?: null | bool @go(InfrastructureEncryptionEnabled,*bool)

	// The ID of the Key Vault Key which should be used to Encrypt the data in this ServiceBus Namespace.
	// +kubebuilder:validation:Optional
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)
}

#IdentityInitParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this ServiceBus namespace.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this ServiceBus Namespace. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#IdentityObservation: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this ServiceBus namespace.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The Principal ID for the Service Principal associated with the Managed Service Identity of this ServiceBus Namespace.
	principalId?: null | string @go(PrincipalID,*string)

	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this ServiceBus Namespace.
	tenantId?: null | string @go(TenantID,*string)

	// Specifies the type of Managed Service Identity that should be configured on this ServiceBus Namespace. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#IdentityParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this ServiceBus namespace.
	// +kubebuilder:validation:Optional
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this ServiceBus Namespace. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#ServiceBusNamespaceInitParameters: {
	// Specifies the capacity. When sku is Premium, capacity can be 1, 2, 4, 8 or 16. When sku is Basic or Standard, capacity can be 0 only.
	capacity?: null | float64 @go(Capacity,*float64)

	// An customer_managed_key block as defined below.
	customerManagedKey?: [...#CustomerManagedKeyInitParameters] @go(CustomerManagedKey,[]CustomerManagedKeyInitParameters)

	// An identity block as defined below.
	identity?: [...#IdentityInitParameters] @go(Identity,[]IdentityInitParameters)

	// Whether or not SAS authentication is enabled for the Service Bus namespace. Defaults to true.
	localAuthEnabled?: null | bool @go(LocalAuthEnabled,*bool)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The minimum supported TLS version for this Service Bus Namespace. Valid values are: 1.0, 1.1 and 1.2. The current default minimum TLS version is 1.2.
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// Is public network access enabled for the Service Bus Namespace? Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// Defines which tier to use. Options are Basic, Standard or Premium. Please note that setting this field to Premium will force the creation of a new resource.
	sku?: null | string @go(Sku,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Whether or not this resource is zone redundant. sku needs to be Premium. Changing this forces a new resource to be created.
	zoneRedundant?: null | bool @go(ZoneRedundant,*bool)
}

#ServiceBusNamespaceObservation: {
	// Specifies the capacity. When sku is Premium, capacity can be 1, 2, 4, 8 or 16. When sku is Basic or Standard, capacity can be 0 only.
	capacity?: null | float64 @go(Capacity,*float64)

	// An customer_managed_key block as defined below.
	customerManagedKey?: [...#CustomerManagedKeyObservation] @go(CustomerManagedKey,[]CustomerManagedKeyObservation)

	// The URL to access the ServiceBus Namespace.
	endpoint?: null | string @go(Endpoint,*string)

	// The ServiceBus Namespace ID.
	id?: null | string @go(ID,*string)

	// An identity block as defined below.
	identity?: [...#IdentityObservation] @go(Identity,[]IdentityObservation)

	// Whether or not SAS authentication is enabled for the Service Bus namespace. Defaults to true.
	localAuthEnabled?: null | bool @go(LocalAuthEnabled,*bool)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The minimum supported TLS version for this Service Bus Namespace. Valid values are: 1.0, 1.1 and 1.2. The current default minimum TLS version is 1.2.
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// Is public network access enabled for the Service Bus Namespace? Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The name of the resource group in which to Changing this forces a new resource to be created.
	// create the namespace.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Defines which tier to use. Options are Basic, Standard or Premium. Please note that setting this field to Premium will force the creation of a new resource.
	sku?: null | string @go(Sku,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Whether or not this resource is zone redundant. sku needs to be Premium. Changing this forces a new resource to be created.
	zoneRedundant?: null | bool @go(ZoneRedundant,*bool)
}

#ServiceBusNamespaceParameters: {
	// Specifies the capacity. When sku is Premium, capacity can be 1, 2, 4, 8 or 16. When sku is Basic or Standard, capacity can be 0 only.
	// +kubebuilder:validation:Optional
	capacity?: null | float64 @go(Capacity,*float64)

	// An customer_managed_key block as defined below.
	// +kubebuilder:validation:Optional
	customerManagedKey?: [...#CustomerManagedKeyParameters] @go(CustomerManagedKey,[]CustomerManagedKeyParameters)

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	identity?: [...#IdentityParameters] @go(Identity,[]IdentityParameters)

	// Whether or not SAS authentication is enabled for the Service Bus namespace. Defaults to true.
	// +kubebuilder:validation:Optional
	localAuthEnabled?: null | bool @go(LocalAuthEnabled,*bool)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The minimum supported TLS version for this Service Bus Namespace. Valid values are: 1.0, 1.1 and 1.2. The current default minimum TLS version is 1.2.
	// +kubebuilder:validation:Optional
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// Is public network access enabled for the Service Bus Namespace? Defaults to true.
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The name of the resource group in which to Changing this forces a new resource to be created.
	// create the namespace.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Defines which tier to use. Options are Basic, Standard or Premium. Please note that setting this field to Premium will force the creation of a new resource.
	// +kubebuilder:validation:Optional
	sku?: null | string @go(Sku,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Whether or not this resource is zone redundant. sku needs to be Premium. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	zoneRedundant?: null | bool @go(ZoneRedundant,*bool)
}

// ServiceBusNamespaceSpec defines the desired state of ServiceBusNamespace
#ServiceBusNamespaceSpec: {
	forProvider: #ServiceBusNamespaceParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ServiceBusNamespaceInitParameters @go(InitProvider)
}

// ServiceBusNamespaceStatus defines the observed state of ServiceBusNamespace.
#ServiceBusNamespaceStatus: {
	atProvider?: #ServiceBusNamespaceObservation @go(AtProvider)
}

// ServiceBusNamespace is the Schema for the ServiceBusNamespaces API. Manages a ServiceBus Namespace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ServiceBusNamespace: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || has(self.initProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sku) || has(self.initProvider.sku)",message="sku is a required parameter"
	spec:    #ServiceBusNamespaceSpec   @go(Spec)
	status?: #ServiceBusNamespaceStatus @go(Status)
}

// ServiceBusNamespaceList contains a list of ServiceBusNamespaces
#ServiceBusNamespaceList: {
	items: [...#ServiceBusNamespace] @go(Items,[]ServiceBusNamespace)
}
