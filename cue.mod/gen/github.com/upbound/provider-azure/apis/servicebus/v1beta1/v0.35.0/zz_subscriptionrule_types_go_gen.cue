// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/servicebus/v1beta1

package v1beta1

#CorrelationFilterInitParameters: {
	// Content type of the message.
	contentType?: null | string @go(ContentType,*string)

	// Identifier of the correlation.
	correlationId?: null | string @go(CorrelationID,*string)

	// Application specific label.
	label?: null | string @go(Label,*string)

	// Identifier of the message.
	messageId?: null | string @go(MessageID,*string)

	// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// Address of the queue to reply to.
	replyTo?: null | string @go(ReplyTo,*string)

	// Session identifier to reply to.
	replyToSessionId?: null | string @go(ReplyToSessionID,*string)

	// Session identifier.
	sessionId?: null | string @go(SessionID,*string)

	// Address to send to.
	to?: null | string @go(To,*string)
}

#CorrelationFilterObservation: {
	// Content type of the message.
	contentType?: null | string @go(ContentType,*string)

	// Identifier of the correlation.
	correlationId?: null | string @go(CorrelationID,*string)

	// Application specific label.
	label?: null | string @go(Label,*string)

	// Identifier of the message.
	messageId?: null | string @go(MessageID,*string)

	// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// Address of the queue to reply to.
	replyTo?: null | string @go(ReplyTo,*string)

	// Session identifier to reply to.
	replyToSessionId?: null | string @go(ReplyToSessionID,*string)

	// Session identifier.
	sessionId?: null | string @go(SessionID,*string)

	// Address to send to.
	to?: null | string @go(To,*string)
}

#CorrelationFilterParameters: {
	// Content type of the message.
	// +kubebuilder:validation:Optional
	contentType?: null | string @go(ContentType,*string)

	// Identifier of the correlation.
	// +kubebuilder:validation:Optional
	correlationId?: null | string @go(CorrelationID,*string)

	// Application specific label.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// Identifier of the message.
	// +kubebuilder:validation:Optional
	messageId?: null | string @go(MessageID,*string)

	// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
	// +kubebuilder:validation:Optional
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// Address of the queue to reply to.
	// +kubebuilder:validation:Optional
	replyTo?: null | string @go(ReplyTo,*string)

	// Session identifier to reply to.
	// +kubebuilder:validation:Optional
	replyToSessionId?: null | string @go(ReplyToSessionID,*string)

	// Session identifier.
	// +kubebuilder:validation:Optional
	sessionId?: null | string @go(SessionID,*string)

	// Address to send to.
	// +kubebuilder:validation:Optional
	to?: null | string @go(To,*string)
}

#SubscriptionRuleInitParameters: {
	// Represents set of actions written in SQL language-based syntax that is performed against a BrokeredMessage.
	action?: null | string @go(Action,*string)

	// A correlation_filter block as documented below to be evaluated against a BrokeredMessage. Required when filter_type is set to CorrelationFilter.
	correlationFilter?: [...#CorrelationFilterInitParameters] @go(CorrelationFilter,[]CorrelationFilterInitParameters)

	// Type of filter to be applied to a BrokeredMessage. Possible values are SqlFilter and CorrelationFilter.
	filterType?: null | string @go(FilterType,*string)

	// Represents a filter written in SQL language-based syntax that to be evaluated against a BrokeredMessage. Required when filter_type is set to SqlFilter.
	sqlFilter?: null | string @go(SQLFilter,*string)
}

#SubscriptionRuleObservation: {
	// Represents set of actions written in SQL language-based syntax that is performed against a BrokeredMessage.
	action?: null | string @go(Action,*string)

	// A correlation_filter block as documented below to be evaluated against a BrokeredMessage. Required when filter_type is set to CorrelationFilter.
	correlationFilter?: [...#CorrelationFilterObservation] @go(CorrelationFilter,[]CorrelationFilterObservation)

	// Type of filter to be applied to a BrokeredMessage. Possible values are SqlFilter and CorrelationFilter.
	filterType?: null | string @go(FilterType,*string)

	// The ServiceBus Subscription Rule ID.
	id?: null | string @go(ID,*string)

	// Represents a filter written in SQL language-based syntax that to be evaluated against a BrokeredMessage. Required when filter_type is set to SqlFilter.
	sqlFilter?:                   null | string  @go(SQLFilter,*string)
	sqlFilterCompatibilityLevel?: null | float64 @go(SQLFilterCompatibilityLevel,*float64)

	// The ID of the ServiceBus Subscription in which this Rule should be created. Changing this forces a new resource to be created.
	subscriptionId?: null | string @go(SubscriptionID,*string)
}

#SubscriptionRuleParameters: {
	// Represents set of actions written in SQL language-based syntax that is performed against a BrokeredMessage.
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// A correlation_filter block as documented below to be evaluated against a BrokeredMessage. Required when filter_type is set to CorrelationFilter.
	// +kubebuilder:validation:Optional
	correlationFilter?: [...#CorrelationFilterParameters] @go(CorrelationFilter,[]CorrelationFilterParameters)

	// Type of filter to be applied to a BrokeredMessage. Possible values are SqlFilter and CorrelationFilter.
	// +kubebuilder:validation:Optional
	filterType?: null | string @go(FilterType,*string)

	// Represents a filter written in SQL language-based syntax that to be evaluated against a BrokeredMessage. Required when filter_type is set to SqlFilter.
	// +kubebuilder:validation:Optional
	sqlFilter?: null | string @go(SQLFilter,*string)

	// The ID of the ServiceBus Subscription in which this Rule should be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/servicebus/v1beta1.Subscription
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subscriptionId?: null | string @go(SubscriptionID,*string)
}

// SubscriptionRuleSpec defines the desired state of SubscriptionRule
#SubscriptionRuleSpec: {
	forProvider: #SubscriptionRuleParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SubscriptionRuleInitParameters @go(InitProvider)
}

// SubscriptionRuleStatus defines the observed state of SubscriptionRule.
#SubscriptionRuleStatus: {
	atProvider?: #SubscriptionRuleObservation @go(AtProvider)
}

// SubscriptionRule is the Schema for the SubscriptionRules API. Manages a ServiceBus Subscription Rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#SubscriptionRule: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filterType) || has(self.initProvider.filterType)",message="filterType is a required parameter"
	spec:    #SubscriptionRuleSpec   @go(Spec)
	status?: #SubscriptionRuleStatus @go(Status)
}

// SubscriptionRuleList contains a list of SubscriptionRules
#SubscriptionRuleList: {
	items: [...#SubscriptionRule] @go(Items,[]SubscriptionRule)
}
