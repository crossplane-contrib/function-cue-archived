// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cosmosdb/v1beta1

package v1beta1

#GremlinDatabaseAutoscaleSettingsInitParameters: {
	// The maximum throughput of the Gremlin database (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	maxThroughput?: null | float64 @go(MaxThroughput,*float64)
}

#GremlinDatabaseAutoscaleSettingsObservation: {
	// The maximum throughput of the Gremlin database (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	maxThroughput?: null | float64 @go(MaxThroughput,*float64)
}

#GremlinDatabaseAutoscaleSettingsParameters: {
	// The maximum throughput of the Gremlin database (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	// +kubebuilder:validation:Optional
	maxThroughput?: null | float64 @go(MaxThroughput,*float64)
}

#GremlinDatabaseInitParameters: {
	// An autoscale_settings block as defined below.
	autoscaleSettings?: [...#GremlinDatabaseAutoscaleSettingsInitParameters] @go(AutoscaleSettings,[]GremlinDatabaseAutoscaleSettingsInitParameters)

	// The throughput of the Gremlin database (RU/s). Must be set in increments of 100. The minimum value is 400.
	throughput?: null | float64 @go(Throughput,*float64)
}

#GremlinDatabaseObservation: {
	// The name of the CosmosDB Account to create the Gremlin Database within. Changing this forces a new resource to be created.
	accountName?: null | string @go(AccountName,*string)

	// An autoscale_settings block as defined below.
	autoscaleSettings?: [...#GremlinDatabaseAutoscaleSettingsObservation] @go(AutoscaleSettings,[]GremlinDatabaseAutoscaleSettingsObservation)

	// The ID of the CosmosDB Gremlin Database.
	id?: null | string @go(ID,*string)

	// The name of the resource group in which the Cosmos DB Gremlin Database is created. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The throughput of the Gremlin database (RU/s). Must be set in increments of 100. The minimum value is 400.
	throughput?: null | float64 @go(Throughput,*float64)
}

#GremlinDatabaseParameters: {
	// The name of the CosmosDB Account to create the Gremlin Database within. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Account
	// +kubebuilder:validation:Optional
	accountName?: null | string @go(AccountName,*string)

	// An autoscale_settings block as defined below.
	// +kubebuilder:validation:Optional
	autoscaleSettings?: [...#GremlinDatabaseAutoscaleSettingsParameters] @go(AutoscaleSettings,[]GremlinDatabaseAutoscaleSettingsParameters)

	// The name of the resource group in which the Cosmos DB Gremlin Database is created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The throughput of the Gremlin database (RU/s). Must be set in increments of 100. The minimum value is 400.
	// +kubebuilder:validation:Optional
	throughput?: null | float64 @go(Throughput,*float64)
}

// GremlinDatabaseSpec defines the desired state of GremlinDatabase
#GremlinDatabaseSpec: {
	forProvider: #GremlinDatabaseParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #GremlinDatabaseInitParameters @go(InitProvider)
}

// GremlinDatabaseStatus defines the observed state of GremlinDatabase.
#GremlinDatabaseStatus: {
	atProvider?: #GremlinDatabaseObservation @go(AtProvider)
}

// GremlinDatabase is the Schema for the GremlinDatabases API. Manages a Gremlin Database within a Cosmos DB Account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#GremlinDatabase: {
	spec:    #GremlinDatabaseSpec   @go(Spec)
	status?: #GremlinDatabaseStatus @go(Status)
}

// GremlinDatabaseList contains a list of GremlinDatabases
#GremlinDatabaseList: {
	items: [...#GremlinDatabase] @go(Items,[]GremlinDatabase)
}
