// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cosmosdb/v1beta1

package v1beta1

#PermissionsInitParameters: {
	// A list of data actions that are allowed for the Cosmos DB SQL Role Definition.
	dataActions?: [...null | string] @go(DataActions,[]*string)
}

#PermissionsObservation: {
	// A list of data actions that are allowed for the Cosmos DB SQL Role Definition.
	dataActions?: [...null | string] @go(DataActions,[]*string)
}

#PermissionsParameters: {
	// A list of data actions that are allowed for the Cosmos DB SQL Role Definition.
	// +kubebuilder:validation:Optional
	dataActions: [...null | string] @go(DataActions,[]*string)
}

#SQLRoleDefinitionInitParameters: {
	// A list of fully qualified scopes at or below which Role Assignments may be created using this Cosmos DB SQL Role Definition. It will allow application of this Cosmos DB SQL Role Definition on the entire Database Account or any underlying Database/Collection. Scopes higher than Database Account are not enforceable as assignable scopes.
	assignableScopes?: [...null | string] @go(AssignableScopes,[]*string)

	// An user-friendly name for the Cosmos DB SQL Role Definition which must be unique for the Database Account.
	name?: null | string @go(Name,*string)

	// A permissions block as defined below.
	permissions?: [...#PermissionsInitParameters] @go(Permissions,[]PermissionsInitParameters)

	// The GUID as the name of the Cosmos DB SQL Role Definition - one will be generated if not specified. Changing this forces a new resource to be created.
	roleDefinitionId?: null | string @go(RoleDefinitionID,*string)

	// The type of the Cosmos DB SQL Role Definition. Possible values are BuiltInRole and CustomRole. Defaults to CustomRole. Changing this forces a new resource to be created.
	type?: null | string @go(Type,*string)
}

#SQLRoleDefinitionObservation: {
	// The name of the Cosmos DB Account. Changing this forces a new resource to be created.
	accountName?: null | string @go(AccountName,*string)

	// A list of fully qualified scopes at or below which Role Assignments may be created using this Cosmos DB SQL Role Definition. It will allow application of this Cosmos DB SQL Role Definition on the entire Database Account or any underlying Database/Collection. Scopes higher than Database Account are not enforceable as assignable scopes.
	assignableScopes?: [...null | string] @go(AssignableScopes,[]*string)

	// The ID of the Cosmos DB SQL Role Definition.
	id?: null | string @go(ID,*string)

	// An user-friendly name for the Cosmos DB SQL Role Definition which must be unique for the Database Account.
	name?: null | string @go(Name,*string)

	// A permissions block as defined below.
	permissions?: [...#PermissionsObservation] @go(Permissions,[]PermissionsObservation)

	// The name of the Resource Group in which the Cosmos DB SQL Role Definition is created. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The GUID as the name of the Cosmos DB SQL Role Definition - one will be generated if not specified. Changing this forces a new resource to be created.
	roleDefinitionId?: null | string @go(RoleDefinitionID,*string)

	// The type of the Cosmos DB SQL Role Definition. Possible values are BuiltInRole and CustomRole. Defaults to CustomRole. Changing this forces a new resource to be created.
	type?: null | string @go(Type,*string)
}

#SQLRoleDefinitionParameters: {
	// The name of the Cosmos DB Account. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cosmosdb/v1beta1.Account
	// +kubebuilder:validation:Optional
	accountName?: null | string @go(AccountName,*string)

	// A list of fully qualified scopes at or below which Role Assignments may be created using this Cosmos DB SQL Role Definition. It will allow application of this Cosmos DB SQL Role Definition on the entire Database Account or any underlying Database/Collection. Scopes higher than Database Account are not enforceable as assignable scopes.
	// +kubebuilder:validation:Optional
	assignableScopes?: [...null | string] @go(AssignableScopes,[]*string)

	// An user-friendly name for the Cosmos DB SQL Role Definition which must be unique for the Database Account.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A permissions block as defined below.
	// +kubebuilder:validation:Optional
	permissions?: [...#PermissionsParameters] @go(Permissions,[]PermissionsParameters)

	// The name of the Resource Group in which the Cosmos DB SQL Role Definition is created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The GUID as the name of the Cosmos DB SQL Role Definition - one will be generated if not specified. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	roleDefinitionId?: null | string @go(RoleDefinitionID,*string)

	// The type of the Cosmos DB SQL Role Definition. Possible values are BuiltInRole and CustomRole. Defaults to CustomRole. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// SQLRoleDefinitionSpec defines the desired state of SQLRoleDefinition
#SQLRoleDefinitionSpec: {
	forProvider: #SQLRoleDefinitionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SQLRoleDefinitionInitParameters @go(InitProvider)
}

// SQLRoleDefinitionStatus defines the observed state of SQLRoleDefinition.
#SQLRoleDefinitionStatus: {
	atProvider?: #SQLRoleDefinitionObservation @go(AtProvider)
}

// SQLRoleDefinition is the Schema for the SQLRoleDefinitions API. Manages a Cosmos DB SQL Role Definition.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#SQLRoleDefinition: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.assignableScopes) || (has(self.initProvider) && has(self.initProvider.assignableScopes))",message="spec.forProvider.assignableScopes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissions) || (has(self.initProvider) && has(self.initProvider.permissions))",message="spec.forProvider.permissions is a required parameter"
	spec:    #SQLRoleDefinitionSpec   @go(Spec)
	status?: #SQLRoleDefinitionStatus @go(Status)
}

// SQLRoleDefinitionList contains a list of SQLRoleDefinitions
#SQLRoleDefinitionList: {
	items: [...#SQLRoleDefinition] @go(Items,[]SQLRoleDefinition)
}
