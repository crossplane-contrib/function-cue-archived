// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cosmosdb/v1beta1

package v1beta1

#SQLRoleAssignmentObservation: {
	// The name of the Cosmos DB Account. Changing this forces a new resource to be created.
	accountName?: null | string @go(AccountName,*string)

	// The ID of the Cosmos DB SQL Role Assignment.
	id?: null | string @go(ID,*string)

	// The GUID as the name of the Cosmos DB SQL Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The ID of the Principal (Client) in Azure Active Directory. Changing this forces a new resource to be created.
	principalId?: null | string @go(PrincipalID,*string)

	// The name of the Resource Group in which the Cosmos DB SQL Role Assignment is created. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The resource ID of the Cosmos DB SQL Role Definition.
	roleDefinitionId?: null | string @go(RoleDefinitionID,*string)

	// The data plane resource path for which access is being granted through this Cosmos DB SQL Role Assignment. Changing this forces a new resource to be created.
	scope?: null | string @go(Scope,*string)
}

#SQLRoleAssignmentParameters: {
	// The name of the Cosmos DB Account. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cosmosdb/v1beta1.Account
	// +kubebuilder:validation:Optional
	accountName?: null | string @go(AccountName,*string)

	// The GUID as the name of the Cosmos DB SQL Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the Principal (Client) in Azure Active Directory. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	principalId?: null | string @go(PrincipalID,*string)

	// The name of the Resource Group in which the Cosmos DB SQL Role Assignment is created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The resource ID of the Cosmos DB SQL Role Definition.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cosmosdb/v1beta1.SQLRoleDefinition
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	roleDefinitionId?: null | string @go(RoleDefinitionID,*string)

	// The data plane resource path for which access is being granted through this Cosmos DB SQL Role Assignment. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cosmosdb/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	scope?: null | string @go(Scope,*string)
}

// SQLRoleAssignmentSpec defines the desired state of SQLRoleAssignment
#SQLRoleAssignmentSpec: {
	forProvider: #SQLRoleAssignmentParameters @go(ForProvider)
}

// SQLRoleAssignmentStatus defines the observed state of SQLRoleAssignment.
#SQLRoleAssignmentStatus: {
	atProvider?: #SQLRoleAssignmentObservation @go(AtProvider)
}

// SQLRoleAssignment is the Schema for the SQLRoleAssignments API. Manages a Cosmos DB SQL Role Assignment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#SQLRoleAssignment: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.principalId)",message="principalId is a required parameter"
	spec:    #SQLRoleAssignmentSpec   @go(Spec)
	status?: #SQLRoleAssignmentStatus @go(Status)
}

// SQLRoleAssignmentList contains a list of SQLRoleAssignments
#SQLRoleAssignmentList: {
	items: [...#SQLRoleAssignment] @go(Items,[]SQLRoleAssignment)
}
