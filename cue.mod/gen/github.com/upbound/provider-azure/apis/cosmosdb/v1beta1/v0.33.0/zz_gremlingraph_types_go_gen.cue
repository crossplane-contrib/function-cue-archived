// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cosmosdb/v1beta1

package v1beta1

#CompositeIndexObservation: {
	// One or more index blocks as defined below.
	index?: [...#IndexObservation] @go(Index,[]IndexObservation)
}

#CompositeIndexParameters: {
	// One or more index blocks as defined below.
	// +kubebuilder:validation:Required
	index: [...#IndexParameters] @go(Index,[]IndexParameters)
}

#ConflictResolutionPolicyObservation: {
	// The conflict resolution path in the case of LastWriterWins mode.
	conflictResolutionPath?: null | string @go(ConflictResolutionPath,*string)

	// The procedure to resolve conflicts in the case of custom mode.
	conflictResolutionProcedure?: null | string @go(ConflictResolutionProcedure,*string)

	// Indicates the conflict resolution mode. Possible values include: LastWriterWins, Custom.
	mode?: null | string @go(Mode,*string)
}

#ConflictResolutionPolicyParameters: {
	// The conflict resolution path in the case of LastWriterWins mode.
	// +kubebuilder:validation:Optional
	conflictResolutionPath?: null | string @go(ConflictResolutionPath,*string)

	// The procedure to resolve conflicts in the case of custom mode.
	// +kubebuilder:validation:Optional
	conflictResolutionProcedure?: null | string @go(ConflictResolutionProcedure,*string)

	// Indicates the conflict resolution mode. Possible values include: LastWriterWins, Custom.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)
}

#GremlinGraphAutoscaleSettingsObservation: {
	// The maximum throughput of the Gremlin graph (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	maxThroughput?: null | float64 @go(MaxThroughput,*float64)
}

#GremlinGraphAutoscaleSettingsParameters: {
	// The maximum throughput of the Gremlin graph (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	// +kubebuilder:validation:Optional
	maxThroughput?: null | float64 @go(MaxThroughput,*float64)
}

#GremlinGraphObservation: {
	// The name of the CosmosDB Account to create the Gremlin Graph within. Changing this forces a new resource to be created.
	accountName?: null | string @go(AccountName,*string)

	// An autoscale_settings block as defined below. Requires partition_key_path to be set.
	autoscaleSettings?: [...#GremlinGraphAutoscaleSettingsObservation] @go(AutoscaleSettings,[]GremlinGraphAutoscaleSettingsObservation)

	// A conflict_resolution_policy blocks as defined below. Changing this forces a new resource to be created.
	conflictResolutionPolicy?: [...#ConflictResolutionPolicyObservation] @go(ConflictResolutionPolicy,[]ConflictResolutionPolicyObservation)

	// The name of the Cosmos DB Graph Database in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
	databaseName?: null | string @go(DatabaseName,*string)

	// The default time to live (TTL) of the Gremlin graph. If the value is missing or set to "-1", items don’t expire.
	defaultTtl?: null | float64 @go(DefaultTTL,*float64)

	// The ID of the CosmosDB Gremlin Graph.
	id?: null | string @go(ID,*string)

	// The configuration of the indexing policy. One or more index_policy blocks as defined below.
	indexPolicy?: [...#IndexPolicyObservation] @go(IndexPolicy,[]IndexPolicyObservation)

	// Define a partition key. Changing this forces a new resource to be created.
	partitionKeyPath?: null | string @go(PartitionKeyPath,*string)

	// Define a partition key version. Changing this forces a new resource to be created. Possible values are 1and 2. This should be set to 2 in order to use large partition keys.
	partitionKeyVersion?: null | float64 @go(PartitionKeyVersion,*float64)

	// The name of the resource group in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The throughput of the Gremlin graph (RU/s). Must be set in increments of 100. The minimum value is 400.
	throughput?: null | float64 @go(Throughput,*float64)

	// One or more unique_key blocks as defined below. Changing this forces a new resource to be created.
	uniqueKey?: [...#UniqueKeyObservation] @go(UniqueKey,[]UniqueKeyObservation)
}

#GremlinGraphParameters: {
	// The name of the CosmosDB Account to create the Gremlin Graph within. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Account
	// +kubebuilder:validation:Optional
	accountName?: null | string @go(AccountName,*string)

	// An autoscale_settings block as defined below. Requires partition_key_path to be set.
	// +kubebuilder:validation:Optional
	autoscaleSettings?: [...#GremlinGraphAutoscaleSettingsParameters] @go(AutoscaleSettings,[]GremlinGraphAutoscaleSettingsParameters)

	// A conflict_resolution_policy blocks as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	conflictResolutionPolicy?: [...#ConflictResolutionPolicyParameters] @go(ConflictResolutionPolicy,[]ConflictResolutionPolicyParameters)

	// The name of the Cosmos DB Graph Database in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=GremlinDatabase
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// The default time to live (TTL) of the Gremlin graph. If the value is missing or set to "-1", items don’t expire.
	// +kubebuilder:validation:Optional
	defaultTtl?: null | float64 @go(DefaultTTL,*float64)

	// The configuration of the indexing policy. One or more index_policy blocks as defined below.
	// +kubebuilder:validation:Optional
	indexPolicy?: [...#IndexPolicyParameters] @go(IndexPolicy,[]IndexPolicyParameters)

	// Define a partition key. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	partitionKeyPath?: null | string @go(PartitionKeyPath,*string)

	// Define a partition key version. Changing this forces a new resource to be created. Possible values are 1and 2. This should be set to 2 in order to use large partition keys.
	// +kubebuilder:validation:Optional
	partitionKeyVersion?: null | float64 @go(PartitionKeyVersion,*float64)

	// The name of the resource group in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The throughput of the Gremlin graph (RU/s). Must be set in increments of 100. The minimum value is 400.
	// +kubebuilder:validation:Optional
	throughput?: null | float64 @go(Throughput,*float64)

	// One or more unique_key blocks as defined below. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	uniqueKey?: [...#UniqueKeyParameters] @go(UniqueKey,[]UniqueKeyParameters)
}

#IndexObservation: {
	// Order of the index. Possible values are Ascending or Descending.
	order?: null | string @go(Order,*string)

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	path?: null | string @go(Path,*string)
}

#IndexParameters: {
	// Order of the index. Possible values are Ascending or Descending.
	// +kubebuilder:validation:Required
	order?: null | string @go(Order,*string)

	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	// +kubebuilder:validation:Required
	path?: null | string @go(Path,*string)
}

#IndexPolicyObservation: {
	// Indicates if the indexing policy is automatic. Defaults to true.
	automatic?: null | bool @go(Automatic,*bool)

	// One or more composite_index blocks as defined below.
	compositeIndex?: [...#CompositeIndexObservation] @go(CompositeIndex,[]CompositeIndexObservation)

	// List of paths to exclude from indexing. Required if indexing_mode is Consistent or Lazy.
	excludedPaths?: [...null | string] @go(ExcludedPaths,[]*string)

	// List of paths to include in the indexing. Required if indexing_mode is Consistent or Lazy.
	includedPaths?: [...null | string] @go(IncludedPaths,[]*string)

	// Indicates the indexing mode. Possible values include: Consistent, Lazy, None.
	indexingMode?: null | string @go(IndexingMode,*string)

	// One or more spatial_index blocks as defined below.
	spatialIndex?: [...#SpatialIndexObservation] @go(SpatialIndex,[]SpatialIndexObservation)
}

#IndexPolicyParameters: {
	// Indicates if the indexing policy is automatic. Defaults to true.
	// +kubebuilder:validation:Optional
	automatic?: null | bool @go(Automatic,*bool)

	// One or more composite_index blocks as defined below.
	// +kubebuilder:validation:Optional
	compositeIndex?: [...#CompositeIndexParameters] @go(CompositeIndex,[]CompositeIndexParameters)

	// List of paths to exclude from indexing. Required if indexing_mode is Consistent or Lazy.
	// +kubebuilder:validation:Optional
	excludedPaths?: [...null | string] @go(ExcludedPaths,[]*string)

	// List of paths to include in the indexing. Required if indexing_mode is Consistent or Lazy.
	// +kubebuilder:validation:Optional
	includedPaths?: [...null | string] @go(IncludedPaths,[]*string)

	// Indicates the indexing mode. Possible values include: Consistent, Lazy, None.
	// +kubebuilder:validation:Required
	indexingMode?: null | string @go(IndexingMode,*string)

	// One or more spatial_index blocks as defined below.
	// +kubebuilder:validation:Optional
	spatialIndex?: [...#SpatialIndexParameters] @go(SpatialIndex,[]SpatialIndexParameters)
}

#SpatialIndexObservation: {
	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	path?: null | string @go(Path,*string)
	types?: [...null | string] @go(Types,[]*string)
}

#SpatialIndexParameters: {
	// Path for which the indexing behaviour applies to. According to the service design, all spatial types including LineString, MultiPolygon, Point, and Polygon will be applied to the path.
	// +kubebuilder:validation:Required
	path?: null | string @go(Path,*string)
}

#UniqueKeyObservation: {
	// A list of paths to use for this unique key. Changing this forces a new resource to be created.
	paths?: [...null | string] @go(Paths,[]*string)
}

#UniqueKeyParameters: {
	// A list of paths to use for this unique key. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	paths: [...null | string] @go(Paths,[]*string)
}

// GremlinGraphSpec defines the desired state of GremlinGraph
#GremlinGraphSpec: {
	forProvider: #GremlinGraphParameters @go(ForProvider)
}

// GremlinGraphStatus defines the observed state of GremlinGraph.
#GremlinGraphStatus: {
	atProvider?: #GremlinGraphObservation @go(AtProvider)
}

// GremlinGraph is the Schema for the GremlinGraphs API. Manages a Gremlin Graph within a Cosmos DB Account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#GremlinGraph: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.partitionKeyPath)",message="partitionKeyPath is a required parameter"
	spec:    #GremlinGraphSpec   @go(Spec)
	status?: #GremlinGraphStatus @go(Status)
}

// GremlinGraphList contains a list of GremlinGraphs
#GremlinGraphList: {
	items: [...#GremlinGraph] @go(Items,[]GremlinGraph)
}
