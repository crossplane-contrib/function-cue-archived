// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cosmosdb/v1beta1

package v1beta1

#CassandraTableAutoscaleSettingsInitParameters: {
	// The maximum throughput of the Cassandra Table (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	maxThroughput?: null | float64 @go(MaxThroughput,*float64)
}

#CassandraTableAutoscaleSettingsObservation: {
	// The maximum throughput of the Cassandra Table (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	maxThroughput?: null | float64 @go(MaxThroughput,*float64)
}

#CassandraTableAutoscaleSettingsParameters: {
	// The maximum throughput of the Cassandra Table (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	// +kubebuilder:validation:Optional
	maxThroughput?: null | float64 @go(MaxThroughput,*float64)
}

#CassandraTableInitParameters: {
	// Time to live of the Analytical Storage. Possible values are between -1 and 2147483647 except 0. -1 means the Analytical Storage never expires. Changing this forces a new resource to be created.
	analyticalStorageTtl?: null | float64 @go(AnalyticalStorageTTL,*float64)

	// An autoscale_settings block as defined below.
	autoscaleSettings?: [...#CassandraTableAutoscaleSettingsInitParameters] @go(AutoscaleSettings,[]CassandraTableAutoscaleSettingsInitParameters)

	// Time to live of the Cosmos DB Cassandra table. Possible values are at least -1. -1 means the Cassandra table never expires.
	defaultTtl?: null | float64 @go(DefaultTTL,*float64)

	// A schema block as defined below.
	schema?: [...#SchemaInitParameters] @go(Schema,[]SchemaInitParameters)

	// The throughput of Cassandra KeySpace (RU/s). Must be set in increments of 100. The minimum value is 400.
	throughput?: null | float64 @go(Throughput,*float64)
}

#CassandraTableObservation: {
	// Time to live of the Analytical Storage. Possible values are between -1 and 2147483647 except 0. -1 means the Analytical Storage never expires. Changing this forces a new resource to be created.
	analyticalStorageTtl?: null | float64 @go(AnalyticalStorageTTL,*float64)

	// An autoscale_settings block as defined below.
	autoscaleSettings?: [...#CassandraTableAutoscaleSettingsObservation] @go(AutoscaleSettings,[]CassandraTableAutoscaleSettingsObservation)

	// The ID of the Cosmos DB Cassandra Keyspace to create the table within. Changing this forces a new resource to be created.
	cassandraKeyspaceId?: null | string @go(CassandraKeySpaceID,*string)

	// Time to live of the Cosmos DB Cassandra table. Possible values are at least -1. -1 means the Cassandra table never expires.
	defaultTtl?: null | float64 @go(DefaultTTL,*float64)

	// the ID of the CosmosDB Cassandra Table.
	id?: null | string @go(ID,*string)

	// A schema block as defined below.
	schema?: [...#SchemaObservation] @go(Schema,[]SchemaObservation)

	// The throughput of Cassandra KeySpace (RU/s). Must be set in increments of 100. The minimum value is 400.
	throughput?: null | float64 @go(Throughput,*float64)
}

#CassandraTableParameters: {
	// Time to live of the Analytical Storage. Possible values are between -1 and 2147483647 except 0. -1 means the Analytical Storage never expires. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	analyticalStorageTtl?: null | float64 @go(AnalyticalStorageTTL,*float64)

	// An autoscale_settings block as defined below.
	// +kubebuilder:validation:Optional
	autoscaleSettings?: [...#CassandraTableAutoscaleSettingsParameters] @go(AutoscaleSettings,[]CassandraTableAutoscaleSettingsParameters)

	// The ID of the Cosmos DB Cassandra Keyspace to create the table within. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=CassandraKeySpace
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	cassandraKeyspaceId?: null | string @go(CassandraKeySpaceID,*string)

	// Time to live of the Cosmos DB Cassandra table. Possible values are at least -1. -1 means the Cassandra table never expires.
	// +kubebuilder:validation:Optional
	defaultTtl?: null | float64 @go(DefaultTTL,*float64)

	// A schema block as defined below.
	// +kubebuilder:validation:Optional
	schema?: [...#SchemaParameters] @go(Schema,[]SchemaParameters)

	// The throughput of Cassandra KeySpace (RU/s). Must be set in increments of 100. The minimum value is 400.
	// +kubebuilder:validation:Optional
	throughput?: null | float64 @go(Throughput,*float64)
}

#ClusterKeyInitParameters: {
	// Name of the column to be created.
	name?: null | string @go(Name,*string)

	// Order of the key. Currently supported values are Asc and Desc.
	orderBy?: null | string @go(OrderBy,*string)
}

#ClusterKeyObservation: {
	// Name of the column to be created.
	name?: null | string @go(Name,*string)

	// Order of the key. Currently supported values are Asc and Desc.
	orderBy?: null | string @go(OrderBy,*string)
}

#ClusterKeyParameters: {
	// Name of the column to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Order of the key. Currently supported values are Asc and Desc.
	// +kubebuilder:validation:Optional
	orderBy?: null | string @go(OrderBy,*string)
}

#ColumnInitParameters: {
	// Name of the column to be created.
	name?: null | string @go(Name,*string)

	// Type of the column to be created.
	type?: null | string @go(Type,*string)
}

#ColumnObservation: {
	// Name of the column to be created.
	name?: null | string @go(Name,*string)

	// Type of the column to be created.
	type?: null | string @go(Type,*string)
}

#ColumnParameters: {
	// Name of the column to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Type of the column to be created.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#PartitionKeyInitParameters: {
	// Name of the column to be created.
	name?: null | string @go(Name,*string)
}

#PartitionKeyObservation: {
	// Name of the column to be created.
	name?: null | string @go(Name,*string)
}

#PartitionKeyParameters: {
	// Name of the column to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#SchemaInitParameters: {
	// One or more cluster_key blocks as defined below.
	clusterKey?: [...#ClusterKeyInitParameters] @go(ClusterKey,[]ClusterKeyInitParameters)

	// One or more column blocks as defined below.
	column?: [...#ColumnInitParameters] @go(Column,[]ColumnInitParameters)

	// One or more partition_key blocks as defined below.
	partitionKey?: [...#PartitionKeyInitParameters] @go(PartitionKey,[]PartitionKeyInitParameters)
}

#SchemaObservation: {
	// One or more cluster_key blocks as defined below.
	clusterKey?: [...#ClusterKeyObservation] @go(ClusterKey,[]ClusterKeyObservation)

	// One or more column blocks as defined below.
	column?: [...#ColumnObservation] @go(Column,[]ColumnObservation)

	// One or more partition_key blocks as defined below.
	partitionKey?: [...#PartitionKeyObservation] @go(PartitionKey,[]PartitionKeyObservation)
}

#SchemaParameters: {
	// One or more cluster_key blocks as defined below.
	// +kubebuilder:validation:Optional
	clusterKey?: [...#ClusterKeyParameters] @go(ClusterKey,[]ClusterKeyParameters)

	// One or more column blocks as defined below.
	// +kubebuilder:validation:Optional
	column: [...#ColumnParameters] @go(Column,[]ColumnParameters)

	// One or more partition_key blocks as defined below.
	// +kubebuilder:validation:Optional
	partitionKey: [...#PartitionKeyParameters] @go(PartitionKey,[]PartitionKeyParameters)
}

// CassandraTableSpec defines the desired state of CassandraTable
#CassandraTableSpec: {
	forProvider: #CassandraTableParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CassandraTableInitParameters @go(InitProvider)
}

// CassandraTableStatus defines the observed state of CassandraTable.
#CassandraTableStatus: {
	atProvider?: #CassandraTableObservation @go(AtProvider)
}

// CassandraTable is the Schema for the CassandraTables API. Manages a Cassandra Table within a Cosmos DB Cassandra Keyspace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#CassandraTable: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schema) || has(self.initProvider.schema)",message="schema is a required parameter"
	spec:    #CassandraTableSpec   @go(Spec)
	status?: #CassandraTableStatus @go(Status)
}

// CassandraTableList contains a list of CassandraTables
#CassandraTableList: {
	items: [...#CassandraTable] @go(Items,[]CassandraTable)
}
