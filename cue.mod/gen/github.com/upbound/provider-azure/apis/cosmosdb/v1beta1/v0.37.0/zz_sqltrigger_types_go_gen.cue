// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cosmosdb/v1beta1

package v1beta1

#SQLTriggerInitParameters: {
	// Body of the Trigger.
	body?: null | string @go(Body,*string)

	// The operation the trigger is associated with. Possible values are All, Create, Update, Delete and Replace.
	operation?: null | string @go(Operation,*string)

	// Type of the Trigger. Possible values are Pre and Post.
	type?: null | string @go(Type,*string)
}

#SQLTriggerObservation: {
	// Body of the Trigger.
	body?: null | string @go(Body,*string)

	// The id of the Cosmos DB SQL Container to create the SQL Trigger within. Changing this forces a new SQL Trigger to be created.
	containerId?: null | string @go(ContainerID,*string)

	// The ID of the SQL Trigger.
	id?: null | string @go(ID,*string)

	// The operation the trigger is associated with. Possible values are All, Create, Update, Delete and Replace.
	operation?: null | string @go(Operation,*string)

	// Type of the Trigger. Possible values are Pre and Post.
	type?: null | string @go(Type,*string)
}

#SQLTriggerParameters: {
	// Body of the Trigger.
	// +kubebuilder:validation:Optional
	body?: null | string @go(Body,*string)

	// The id of the Cosmos DB SQL Container to create the SQL Trigger within. Changing this forces a new SQL Trigger to be created.
	// +crossplane:generate:reference:type=SQLContainer
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	containerId?: null | string @go(ContainerID,*string)

	// The operation the trigger is associated with. Possible values are All, Create, Update, Delete and Replace.
	// +kubebuilder:validation:Optional
	operation?: null | string @go(Operation,*string)

	// Type of the Trigger. Possible values are Pre and Post.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// SQLTriggerSpec defines the desired state of SQLTrigger
#SQLTriggerSpec: {
	forProvider: #SQLTriggerParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SQLTriggerInitParameters @go(InitProvider)
}

// SQLTriggerStatus defines the observed state of SQLTrigger.
#SQLTriggerStatus: {
	atProvider?: #SQLTriggerObservation @go(AtProvider)
}

// SQLTrigger is the Schema for the SQLTriggers API. Manages an SQL Trigger.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#SQLTrigger: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.body) || (has(self.initProvider) && has(self.initProvider.body))",message="spec.forProvider.body is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.operation) || (has(self.initProvider) && has(self.initProvider.operation))",message="spec.forProvider.operation is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	spec:    #SQLTriggerSpec   @go(Spec)
	status?: #SQLTriggerStatus @go(Status)
}

// SQLTriggerList contains a list of SQLTriggers
#SQLTriggerList: {
	items: [...#SQLTrigger] @go(Items,[]SQLTrigger)
}
