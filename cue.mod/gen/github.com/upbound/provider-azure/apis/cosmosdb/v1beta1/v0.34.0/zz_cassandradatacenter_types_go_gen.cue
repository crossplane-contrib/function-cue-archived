// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cosmosdb/v1beta1

package v1beta1

#CassandraDatacenterObservation: {
	// Determines whether availability zones are enabled. Defaults to true.
	availabilityZonesEnabled?: null | bool @go(AvailabilityZonesEnabled,*bool)

	// The key URI of the customer key to use for the encryption of the backup Storage Account.
	backupStorageCustomerKeyUri?: null | string @go(BackupStorageCustomerKeyURI,*string)

	// The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
	base64EncodedYamlFragment?: null | string @go(Base64EncodedYamlFragment,*string)

	// The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
	cassandraClusterId?: null | string @go(CassandraClusterID,*string)

	// The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	delegatedManagementSubnetId?: null | string @go(DelegatedManagementSubnetID,*string)

	// Determines the number of p30 disks that are attached to each node.
	diskCount?: null | float64 @go(DiskCount,*float64)

	// The Disk SKU that is used for this Cassandra Datacenter. Defaults to P30.
	diskSku?: null | string @go(DiskSku,*string)

	// The ID of the Cassandra Datacenter.
	id?: null | string @go(ID,*string)

	// The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
	location?: null | string @go(Location,*string)

	// The key URI of the customer key to use for the encryption of the Managed Disk.
	managedDiskCustomerKeyUri?: null | string @go(ManagedDiskCustomerKeyURI,*string)

	// The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than 3. Defaults to 3.
	nodeCount?: null | float64 @go(NodeCount,*float64)

	// Determines the selected sku.
	skuName?: null | string @go(SkuName,*string)
}

#CassandraDatacenterParameters: {
	// Determines whether availability zones are enabled. Defaults to true.
	// +kubebuilder:validation:Optional
	availabilityZonesEnabled?: null | bool @go(AvailabilityZonesEnabled,*bool)

	// The key URI of the customer key to use for the encryption of the backup Storage Account.
	// +kubebuilder:validation:Optional
	backupStorageCustomerKeyUri?: null | string @go(BackupStorageCustomerKeyURI,*string)

	// The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
	// +kubebuilder:validation:Optional
	base64EncodedYamlFragment?: null | string @go(Base64EncodedYamlFragment,*string)

	// The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cosmosdb/v1beta1.CassandraCluster
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	cassandraClusterId?: null | string @go(CassandraClusterID,*string)

	// The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	delegatedManagementSubnetId?: null | string @go(DelegatedManagementSubnetID,*string)

	// Determines the number of p30 disks that are attached to each node.
	// +kubebuilder:validation:Optional
	diskCount?: null | float64 @go(DiskCount,*float64)

	// The Disk SKU that is used for this Cassandra Datacenter. Defaults to P30.
	// +kubebuilder:validation:Optional
	diskSku?: null | string @go(DiskSku,*string)

	// The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The key URI of the customer key to use for the encryption of the Managed Disk.
	// +kubebuilder:validation:Optional
	managedDiskCustomerKeyUri?: null | string @go(ManagedDiskCustomerKeyURI,*string)

	// The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than 3. Defaults to 3.
	// +kubebuilder:validation:Optional
	nodeCount?: null | float64 @go(NodeCount,*float64)

	// Determines the selected sku.
	// +kubebuilder:validation:Optional
	skuName?: null | string @go(SkuName,*string)
}

// CassandraDatacenterSpec defines the desired state of CassandraDatacenter
#CassandraDatacenterSpec: {
	forProvider: #CassandraDatacenterParameters @go(ForProvider)
}

// CassandraDatacenterStatus defines the observed state of CassandraDatacenter.
#CassandraDatacenterStatus: {
	atProvider?: #CassandraDatacenterObservation @go(AtProvider)
}

// CassandraDatacenter is the Schema for the CassandraDatacenters API. Manages a Cassandra Datacenter.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#CassandraDatacenter: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",message="location is a required parameter"
	spec:    #CassandraDatacenterSpec   @go(Spec)
	status?: #CassandraDatacenterStatus @go(Status)
}

// CassandraDatacenterList contains a list of CassandraDatacenters
#CassandraDatacenterList: {
	items: [...#CassandraDatacenter] @go(Items,[]CassandraDatacenter)
}
