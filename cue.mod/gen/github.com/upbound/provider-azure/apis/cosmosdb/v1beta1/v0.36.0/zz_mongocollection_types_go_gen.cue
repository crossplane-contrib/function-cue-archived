// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cosmosdb/v1beta1

package v1beta1

#MongoCollectionAutoscaleSettingsInitParameters: {
	// The maximum throughput of the MongoDB collection (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	maxThroughput?: null | float64 @go(MaxThroughput,*float64)
}

#MongoCollectionAutoscaleSettingsObservation: {
	// The maximum throughput of the MongoDB collection (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	maxThroughput?: null | float64 @go(MaxThroughput,*float64)
}

#MongoCollectionAutoscaleSettingsParameters: {
	// The maximum throughput of the MongoDB collection (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	// +kubebuilder:validation:Optional
	maxThroughput?: null | float64 @go(MaxThroughput,*float64)
}

#MongoCollectionIndexInitParameters: {
	// Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
	keys?: [...null | string] @go(Keys,[]*string)

	// Is the index unique or not? Defaults to false.
	unique?: null | bool @go(Unique,*bool)
}

#MongoCollectionIndexObservation: {
	// Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
	keys?: [...null | string] @go(Keys,[]*string)

	// Is the index unique or not? Defaults to false.
	unique?: null | bool @go(Unique,*bool)
}

#MongoCollectionIndexParameters: {
	// Specifies the list of user settable keys for each Cosmos DB Mongo Collection.
	// +kubebuilder:validation:Optional
	keys: [...null | string] @go(Keys,[]*string)

	// Is the index unique or not? Defaults to false.
	// +kubebuilder:validation:Optional
	unique?: null | bool @go(Unique,*bool)
}

#MongoCollectionInitParameters: {
	// The default time to live of Analytical Storage for this Mongo Collection. If present and the value is set to -1, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number n – items will expire n seconds after their last modified time.
	analyticalStorageTtl?: null | float64 @go(AnalyticalStorageTTL,*float64)

	// An autoscale_settings block as defined below.
	autoscaleSettings?: [...#MongoCollectionAutoscaleSettingsInitParameters] @go(AutoscaleSettings,[]MongoCollectionAutoscaleSettingsInitParameters)

	// The default Time To Live in seconds. If the value is -1, items are not automatically expired.
	defaultTtlSeconds?: null | float64 @go(DefaultTTLSeconds,*float64)

	// One or more index blocks as defined below.
	index?: [...#MongoCollectionIndexInitParameters] @go(Index,[]MongoCollectionIndexInitParameters)

	// The name of the key to partition on for sharding. There must not be any other unique index keys. Changing this forces a new resource to be created.
	shardKey?: null | string @go(ShardKey,*string)

	// The throughput of the MongoDB collection (RU/s). Must be set in increments of 100. The minimum value is 400.
	throughput?: null | float64 @go(Throughput,*float64)
}

#MongoCollectionObservation: {
	// The name of the Cosmos DB Account in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	accountName?: null | string @go(AccountName,*string)

	// The default time to live of Analytical Storage for this Mongo Collection. If present and the value is set to -1, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number n – items will expire n seconds after their last modified time.
	analyticalStorageTtl?: null | float64 @go(AnalyticalStorageTTL,*float64)

	// An autoscale_settings block as defined below.
	autoscaleSettings?: [...#MongoCollectionAutoscaleSettingsObservation] @go(AutoscaleSettings,[]MongoCollectionAutoscaleSettingsObservation)

	// The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	databaseName?: null | string @go(DatabaseName,*string)

	// The default Time To Live in seconds. If the value is -1, items are not automatically expired.
	defaultTtlSeconds?: null | float64 @go(DefaultTTLSeconds,*float64)

	// The ID of the Cosmos DB Mongo Collection.
	id?: null | string @go(ID,*string)

	// One or more index blocks as defined below.
	index?: [...#MongoCollectionIndexObservation] @go(Index,[]MongoCollectionIndexObservation)

	// The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name of the key to partition on for sharding. There must not be any other unique index keys. Changing this forces a new resource to be created.
	shardKey?: null | string @go(ShardKey,*string)

	// One or more system_indexes blocks as defined below.
	systemIndexes?: [...#SystemIndexesObservation] @go(SystemIndexes,[]SystemIndexesObservation)

	// The throughput of the MongoDB collection (RU/s). Must be set in increments of 100. The minimum value is 400.
	throughput?: null | float64 @go(Throughput,*float64)
}

#MongoCollectionParameters: {
	// The name of the Cosmos DB Account in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Account
	// +kubebuilder:validation:Optional
	accountName?: null | string @go(AccountName,*string)

	// The default time to live of Analytical Storage for this Mongo Collection. If present and the value is set to -1, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number n – items will expire n seconds after their last modified time.
	// +kubebuilder:validation:Optional
	analyticalStorageTtl?: null | float64 @go(AnalyticalStorageTTL,*float64)

	// An autoscale_settings block as defined below.
	// +kubebuilder:validation:Optional
	autoscaleSettings?: [...#MongoCollectionAutoscaleSettingsParameters] @go(AutoscaleSettings,[]MongoCollectionAutoscaleSettingsParameters)

	// The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=MongoDatabase
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// The default Time To Live in seconds. If the value is -1, items are not automatically expired.
	// +kubebuilder:validation:Optional
	defaultTtlSeconds?: null | float64 @go(DefaultTTLSeconds,*float64)

	// One or more index blocks as defined below.
	// +kubebuilder:validation:Optional
	index?: [...#MongoCollectionIndexParameters] @go(Index,[]MongoCollectionIndexParameters)

	// The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name of the key to partition on for sharding. There must not be any other unique index keys. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	shardKey?: null | string @go(ShardKey,*string)

	// The throughput of the MongoDB collection (RU/s). Must be set in increments of 100. The minimum value is 400.
	// +kubebuilder:validation:Optional
	throughput?: null | float64 @go(Throughput,*float64)
}

#SystemIndexesInitParameters: {
}

#SystemIndexesObservation: {
	// The list of system keys which are not settable for each Cosmos DB Mongo Collection.
	keys?: [...null | string] @go(Keys,[]*string)

	// Identifies whether the table contains no duplicate values.
	unique?: null | bool @go(Unique,*bool)
}

#SystemIndexesParameters: {
}

// MongoCollectionSpec defines the desired state of MongoCollection
#MongoCollectionSpec: {
	forProvider: #MongoCollectionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MongoCollectionInitParameters @go(InitProvider)
}

// MongoCollectionStatus defines the observed state of MongoCollection.
#MongoCollectionStatus: {
	atProvider?: #MongoCollectionObservation @go(AtProvider)
}

// MongoCollection is the Schema for the MongoCollections API. Manages a Mongo Collection within a Cosmos DB Account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#MongoCollection: {
	spec:    #MongoCollectionSpec   @go(Spec)
	status?: #MongoCollectionStatus @go(Status)
}

// MongoCollectionList contains a list of MongoCollections
#MongoCollectionList: {
	items: [...#MongoCollection] @go(Items,[]MongoCollection)
}
