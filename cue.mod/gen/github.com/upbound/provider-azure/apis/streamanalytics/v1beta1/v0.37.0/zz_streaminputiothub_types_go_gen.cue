// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/streamanalytics/v1beta1

package v1beta1

#StreamInputIOTHubInitParameters: {
	// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
	endpoint?: null | string @go(Endpoint,*string)

	// The name of the Stream Input IoTHub. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// A serialization block as defined below.
	serialization?: [...#StreamInputIOTHubSerializationInitParameters] @go(Serialization,[]StreamInputIOTHubSerializationInitParameters)

	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	sharedAccessPolicyName?: null | string @go(SharedAccessPolicyName,*string)
}

#StreamInputIOTHubObservation: {
	// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
	endpoint?: null | string @go(Endpoint,*string)

	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub.
	eventhubConsumerGroupName?: null | string @go(EventHubConsumerGroupName,*string)

	// The ID of the Stream Analytics Stream Input IoTHub.
	id?: null | string @go(ID,*string)

	// The name or the URI of the IoT Hub.
	iothubNamespace?: null | string @go(IOTHubNamespace,*string)

	// The name of the Stream Input IoTHub. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A serialization block as defined below.
	serialization?: [...#StreamInputIOTHubSerializationObservation] @go(Serialization,[]StreamInputIOTHubSerializationObservation)

	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	sharedAccessPolicyName?: null | string @go(SharedAccessPolicyName,*string)

	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	streamAnalyticsJobName?: null | string @go(StreamAnalyticsJobName,*string)
}

#StreamInputIOTHubParameters: {
	// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
	// +kubebuilder:validation:Optional
	endpoint?: null | string @go(Endpoint,*string)

	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.ConsumerGroup
	// +kubebuilder:validation:Optional
	eventhubConsumerGroupName?: null | string @go(EventHubConsumerGroupName,*string)

	// The name or the URI of the IoT Hub.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/devices/v1beta1.IOTHub
	// +kubebuilder:validation:Optional
	iothubNamespace?: null | string @go(IOTHubNamespace,*string)

	// The name of the Stream Input IoTHub. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A serialization block as defined below.
	// +kubebuilder:validation:Optional
	serialization?: [...#StreamInputIOTHubSerializationParameters] @go(Serialization,[]StreamInputIOTHubSerializationParameters)

	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	// +kubebuilder:validation:Optional
	sharedAccessPolicyName?: null | string @go(SharedAccessPolicyName,*string)

	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Job
	// +kubebuilder:validation:Optional
	streamAnalyticsJobName?: null | string @go(StreamAnalyticsJobName,*string)
}

#StreamInputIOTHubSerializationInitParameters: {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to UTF8.
	encoding?: null | string @go(Encoding,*string)

	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are   (space), , (comma), 	 (tab), | (pipe) and ;.
	fieldDelimiter?: null | string @go(FieldDelimiter,*string)

	// The serialization format used for incoming data streams. Possible values are Avro, Csv and Json.
	type?: null | string @go(Type,*string)
}

#StreamInputIOTHubSerializationObservation: {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to UTF8.
	encoding?: null | string @go(Encoding,*string)

	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are   (space), , (comma), 	 (tab), | (pipe) and ;.
	fieldDelimiter?: null | string @go(FieldDelimiter,*string)

	// The serialization format used for incoming data streams. Possible values are Avro, Csv and Json.
	type?: null | string @go(Type,*string)
}

#StreamInputIOTHubSerializationParameters: {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to UTF8.
	// +kubebuilder:validation:Optional
	encoding?: null | string @go(Encoding,*string)

	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are   (space), , (comma), 	 (tab), | (pipe) and ;.
	// +kubebuilder:validation:Optional
	fieldDelimiter?: null | string @go(FieldDelimiter,*string)

	// The serialization format used for incoming data streams. Possible values are Avro, Csv and Json.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// StreamInputIOTHubSpec defines the desired state of StreamInputIOTHub
#StreamInputIOTHubSpec: {
	forProvider: #StreamInputIOTHubParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #StreamInputIOTHubInitParameters @go(InitProvider)
}

// StreamInputIOTHubStatus defines the observed state of StreamInputIOTHub.
#StreamInputIOTHubStatus: {
	atProvider?: #StreamInputIOTHubObservation @go(AtProvider)
}

// StreamInputIOTHub is the Schema for the StreamInputIOTHubs API. Manages a Stream Analytics Stream Input IoTHub.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#StreamInputIOTHub: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpoint) || (has(self.initProvider) && has(self.initProvider.endpoint))",message="spec.forProvider.endpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serialization) || (has(self.initProvider) && has(self.initProvider.serialization))",message="spec.forProvider.serialization is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sharedAccessPolicyKeySecretRef)",message="spec.forProvider.sharedAccessPolicyKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sharedAccessPolicyName) || (has(self.initProvider) && has(self.initProvider.sharedAccessPolicyName))",message="spec.forProvider.sharedAccessPolicyName is a required parameter"
	spec:    #StreamInputIOTHubSpec   @go(Spec)
	status?: #StreamInputIOTHubStatus @go(Status)
}

// StreamInputIOTHubList contains a list of StreamInputIOTHubs
#StreamInputIOTHubList: {
	items: [...#StreamInputIOTHub] @go(Items,[]StreamInputIOTHub)
}
