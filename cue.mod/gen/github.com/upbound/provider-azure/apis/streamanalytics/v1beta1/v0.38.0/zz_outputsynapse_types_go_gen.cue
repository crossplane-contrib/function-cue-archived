// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/streamanalytics/v1beta1

package v1beta1

#OutputSynapseInitParameters: {
	// The name of the Azure SQL database. Changing this forces a new resource to be created.
	database?: null | string @go(Database,*string)

	// The name of the SQL server containing the Azure SQL database. Changing this forces a new resource to be created.
	server?: null | string @go(Server,*string)

	// The name of the table in the Azure SQL database. Changing this forces a new resource to be created.
	table?: null | string @go(Table,*string)
}

#OutputSynapseObservation: {
	// The name of the Azure SQL database. Changing this forces a new resource to be created.
	database?: null | string @go(Database,*string)

	// The ID of the Stream Analytics Output to an Azure Synapse Analytics Workspace.
	id?: null | string @go(ID,*string)

	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name of the SQL server containing the Azure SQL database. Changing this forces a new resource to be created.
	server?: null | string @go(Server,*string)

	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	streamAnalyticsJobName?: null | string @go(StreamAnalyticsJobName,*string)

	// The name of the table in the Azure SQL database. Changing this forces a new resource to be created.
	table?: null | string @go(Table,*string)

	// The user name that will be used to connect to the Azure SQL database. Changing this forces a new resource to be created.
	user?: null | string @go(User,*string)
}

#OutputSynapseParameters: {
	// The name of the Azure SQL database. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	database?: null | string @go(Database,*string)

	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name of the SQL server containing the Azure SQL database. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	server?: null | string @go(Server,*string)

	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Job
	// +kubebuilder:validation:Optional
	streamAnalyticsJobName?: null | string @go(StreamAnalyticsJobName,*string)

	// The name of the table in the Azure SQL database. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	table?: null | string @go(Table,*string)

	// The user name that will be used to connect to the Azure SQL database. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/synapse/v1beta1.Workspace
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("sql_administrator_login",false)
	// +kubebuilder:validation:Optional
	user?: null | string @go(User,*string)
}

// OutputSynapseSpec defines the desired state of OutputSynapse
#OutputSynapseSpec: {
	forProvider: #OutputSynapseParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #OutputSynapseInitParameters @go(InitProvider)
}

// OutputSynapseStatus defines the observed state of OutputSynapse.
#OutputSynapseStatus: {
	atProvider?: #OutputSynapseObservation @go(AtProvider)
}

// OutputSynapse is the Schema for the OutputSynapses API. Manages a Stream Analytics Output to an Azure Synapse Analytics Workspace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#OutputSynapse: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.database) || (has(self.initProvider) && has(self.initProvider.database))",message="spec.forProvider.database is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.server) || (has(self.initProvider) && has(self.initProvider.server))",message="spec.forProvider.server is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.table) || (has(self.initProvider) && has(self.initProvider.table))",message="spec.forProvider.table is a required parameter"
	spec:    #OutputSynapseSpec   @go(Spec)
	status?: #OutputSynapseStatus @go(Status)
}

// OutputSynapseList contains a list of OutputSynapses
#OutputSynapseList: {
	items: [...#OutputSynapse] @go(Items,[]OutputSynapse)
}
