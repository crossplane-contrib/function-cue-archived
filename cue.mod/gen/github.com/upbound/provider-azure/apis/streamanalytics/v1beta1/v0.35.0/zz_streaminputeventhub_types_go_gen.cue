// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/streamanalytics/v1beta1

package v1beta1

#StreamInputEventHubInitParameters: {
	// The authentication mode for the Stream Output. Possible values are Msi and ConnectionString. Defaults to ConnectionString.
	authenticationMode?: null | string @go(AuthenticationMode,*string)

	// The name of the Stream Input EventHub. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The property the input Event Hub has been partitioned by.
	partitionKey?: null | string @go(PartitionKey,*string)

	// A serialization block as defined below.
	serialization?: [...#StreamInputEventHubSerializationInitParameters] @go(Serialization,[]StreamInputEventHubSerializationInitParameters)

	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	sharedAccessPolicyName?: null | string @go(SharedAccessPolicyName,*string)
}

#StreamInputEventHubObservation: {
	// The authentication mode for the Stream Output. Possible values are Msi and ConnectionString. Defaults to ConnectionString.
	authenticationMode?: null | string @go(AuthenticationMode,*string)

	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	eventhubConsumerGroupName?: null | string @go(EventHubConsumerGroupName,*string)

	// The name of the Event Hub.
	eventhubName?: null | string @go(EventHubName,*string)

	// The ID of the Stream Analytics Stream Input EventHub.
	id?: null | string @go(ID,*string)

	// The name of the Stream Input EventHub. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The property the input Event Hub has been partitioned by.
	partitionKey?: null | string @go(PartitionKey,*string)

	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A serialization block as defined below.
	serialization?: [...#StreamInputEventHubSerializationObservation] @go(Serialization,[]StreamInputEventHubSerializationObservation)

	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	servicebusNamespace?: null | string @go(ServiceBusNamespace,*string)

	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	sharedAccessPolicyName?: null | string @go(SharedAccessPolicyName,*string)

	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	streamAnalyticsJobName?: null | string @go(StreamAnalyticsJobName,*string)
}

#StreamInputEventHubParameters: {
	// The authentication mode for the Stream Output. Possible values are Msi and ConnectionString. Defaults to ConnectionString.
	// +kubebuilder:validation:Optional
	authenticationMode?: null | string @go(AuthenticationMode,*string)

	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.ConsumerGroup
	// +kubebuilder:validation:Optional
	eventhubConsumerGroupName?: null | string @go(EventHubConsumerGroupName,*string)

	// The name of the Event Hub.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.EventHub
	// +kubebuilder:validation:Optional
	eventhubName?: null | string @go(EventHubName,*string)

	// The name of the Stream Input EventHub. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The property the input Event Hub has been partitioned by.
	// +kubebuilder:validation:Optional
	partitionKey?: null | string @go(PartitionKey,*string)

	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A serialization block as defined below.
	// +kubebuilder:validation:Optional
	serialization?: [...#StreamInputEventHubSerializationParameters] @go(Serialization,[]StreamInputEventHubSerializationParameters)

	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.EventHubNamespace
	// +kubebuilder:validation:Optional
	servicebusNamespace?: null | string @go(ServiceBusNamespace,*string)

	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	// +kubebuilder:validation:Optional
	sharedAccessPolicyName?: null | string @go(SharedAccessPolicyName,*string)

	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Job
	// +kubebuilder:validation:Optional
	streamAnalyticsJobName?: null | string @go(StreamAnalyticsJobName,*string)
}

#StreamInputEventHubSerializationInitParameters: {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to UTF8.
	encoding?: null | string @go(Encoding,*string)

	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are   (space), , (comma), 	 (tab), | (pipe) and ;.
	fieldDelimiter?: null | string @go(FieldDelimiter,*string)

	// The serialization format used for incoming data streams. Possible values are Avro, Csv and Json.
	type?: null | string @go(Type,*string)
}

#StreamInputEventHubSerializationObservation: {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to UTF8.
	encoding?: null | string @go(Encoding,*string)

	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are   (space), , (comma), 	 (tab), | (pipe) and ;.
	fieldDelimiter?: null | string @go(FieldDelimiter,*string)

	// The serialization format used for incoming data streams. Possible values are Avro, Csv and Json.
	type?: null | string @go(Type,*string)
}

#StreamInputEventHubSerializationParameters: {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to UTF8.
	// +kubebuilder:validation:Optional
	encoding?: null | string @go(Encoding,*string)

	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are   (space), , (comma), 	 (tab), | (pipe) and ;.
	// +kubebuilder:validation:Optional
	fieldDelimiter?: null | string @go(FieldDelimiter,*string)

	// The serialization format used for incoming data streams. Possible values are Avro, Csv and Json.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// StreamInputEventHubSpec defines the desired state of StreamInputEventHub
#StreamInputEventHubSpec: {
	forProvider: #StreamInputEventHubParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #StreamInputEventHubInitParameters @go(InitProvider)
}

// StreamInputEventHubStatus defines the observed state of StreamInputEventHub.
#StreamInputEventHubStatus: {
	atProvider?: #StreamInputEventHubObservation @go(AtProvider)
}

// StreamInputEventHub is the Schema for the StreamInputEventHubs API. Manages a Stream Analytics Stream Input EventHub.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#StreamInputEventHub: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serialization) || has(self.initProvider.serialization)",message="serialization is a required parameter"
	spec:    #StreamInputEventHubSpec   @go(Spec)
	status?: #StreamInputEventHubStatus @go(Status)
}

// StreamInputEventHubList contains a list of StreamInputEventHubs
#StreamInputEventHubList: {
	items: [...#StreamInputEventHub] @go(Items,[]StreamInputEventHub)
}
