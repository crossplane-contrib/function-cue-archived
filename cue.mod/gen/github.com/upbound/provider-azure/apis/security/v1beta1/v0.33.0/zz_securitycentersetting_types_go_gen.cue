// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/security/v1beta1

package v1beta1

#SecurityCenterSettingObservation: {
	// Boolean flag to enable/disable data access.
	enabled?: null | bool @go(Enabled,*bool)

	// The subscription security center setting id.
	id?: null | string @go(ID,*string)

	// The setting to manage. Possible values are MCAS , WDATP and SENTINEL. Changing this forces a new resource to be created.
	settingName?: null | string @go(SettingName,*string)
}

#SecurityCenterSettingParameters: {
	// Boolean flag to enable/disable data access.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// The setting to manage. Possible values are MCAS , WDATP and SENTINEL. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	settingName?: null | string @go(SettingName,*string)
}

// SecurityCenterSettingSpec defines the desired state of SecurityCenterSetting
#SecurityCenterSettingSpec: {
	forProvider: #SecurityCenterSettingParameters @go(ForProvider)
}

// SecurityCenterSettingStatus defines the observed state of SecurityCenterSetting.
#SecurityCenterSettingStatus: {
	atProvider?: #SecurityCenterSettingObservation @go(AtProvider)
}

// SecurityCenterSetting is the Schema for the SecurityCenterSettings API. Manages the Data Access Settings for Azure Security Center.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#SecurityCenterSetting: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.enabled)",message="enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.settingName)",message="settingName is a required parameter"
	spec:    #SecurityCenterSettingSpec   @go(Spec)
	status?: #SecurityCenterSettingStatus @go(Status)
}

// SecurityCenterSettingList contains a list of SecurityCenterSettings
#SecurityCenterSettingList: {
	items: [...#SecurityCenterSetting] @go(Items,[]SecurityCenterSetting)
}
