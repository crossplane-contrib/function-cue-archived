// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/devices/v1beta1

package v1beta1

#IOTHubDPSCertificateInitParameters: {
	// Specifies if the certificate is created in verified state. Defaults to false. Changing this forces a new resource to be created.
	isVerified?: null | bool @go(IsVerified,*bool)
}

#IOTHubDPSCertificateObservation: {
	// The ID of the IoTHub Device Provisioning Service Certificate.
	id?: null | string @go(ID,*string)

	// The name of the IoT Device Provisioning Service that this certificate will be attached to. Changing this forces a new resource to be created.
	iotDpsName?: null | string @go(IOTDPSName,*string)

	// Specifies if the certificate is created in verified state. Defaults to false. Changing this forces a new resource to be created.
	isVerified?: null | bool @go(IsVerified,*bool)

	// The name of the resource group under which the Iot Device Provisioning Service Certificate resource has to be created. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

#IOTHubDPSCertificateParameters: {
	// The name of the IoT Device Provisioning Service that this certificate will be attached to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=IOTHubDPS
	// +kubebuilder:validation:Optional
	iotDpsName?: null | string @go(IOTDPSName,*string)

	// Specifies if the certificate is created in verified state. Defaults to false. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	isVerified?: null | bool @go(IsVerified,*bool)

	// The name of the resource group under which the Iot Device Provisioning Service Certificate resource has to be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

// IOTHubDPSCertificateSpec defines the desired state of IOTHubDPSCertificate
#IOTHubDPSCertificateSpec: {
	forProvider: #IOTHubDPSCertificateParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #IOTHubDPSCertificateInitParameters @go(InitProvider)
}

// IOTHubDPSCertificateStatus defines the observed state of IOTHubDPSCertificate.
#IOTHubDPSCertificateStatus: {
	atProvider?: #IOTHubDPSCertificateObservation @go(AtProvider)
}

// IOTHubDPSCertificate is the Schema for the IOTHubDPSCertificates API. Manages an IoT Device Provisioning Service Certificate.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#IOTHubDPSCertificate: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificateContentSecretRef)",message="certificateContentSecretRef is a required parameter"
	spec:    #IOTHubDPSCertificateSpec   @go(Spec)
	status?: #IOTHubDPSCertificateStatus @go(Status)
}

// IOTHubDPSCertificateList contains a list of IOTHubDPSCertificates
#IOTHubDPSCertificateList: {
	items: [...#IOTHubDPSCertificate] @go(Items,[]IOTHubDPSCertificate)
}
