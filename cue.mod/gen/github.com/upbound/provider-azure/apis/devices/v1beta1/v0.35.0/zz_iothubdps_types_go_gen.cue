// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/devices/v1beta1

package v1beta1

#IOTHubDPSInitParameters: {
	// The allocation policy of the IoT Device Provisioning Service (Hashed, GeoLatency or Static). Defaults to Hashed.
	allocationPolicy?: null | string @go(AllocationPolicy,*string)

	// Specifies if the IoT Device Provisioning Service has data residency and disaster recovery enabled. Defaults to false. Changing this forces a new resource to be created.
	dataResidencyEnabled?: null | bool @go(DataResidencyEnabled,*bool)

	// An ip_filter_rule block as defined below.
	ipFilterRule?: [...#IPFilterRuleInitParameters] @go(IPFilterRule,[]IPFilterRuleInitParameters)

	// A linked_hub block as defined below.
	linkedHub?: [...#LinkedHubInitParameters] @go(LinkedHub,[]LinkedHubInitParameters)

	// Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Whether requests from Public Network are allowed. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// A sku block as defined below.
	sku?: [...#IOTHubDPSSkuInitParameters] @go(Sku,[]IOTHubDPSSkuInitParameters)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#IOTHubDPSObservation: {
	// The allocation policy of the IoT Device Provisioning Service (Hashed, GeoLatency or Static). Defaults to Hashed.
	allocationPolicy?: null | string @go(AllocationPolicy,*string)

	// Specifies if the IoT Device Provisioning Service has data residency and disaster recovery enabled. Defaults to false. Changing this forces a new resource to be created.
	dataResidencyEnabled?: null | bool @go(DataResidencyEnabled,*bool)

	// The device endpoint of the IoT Device Provisioning Service.
	deviceProvisioningHostName?: null | string @go(DeviceProvisioningHostName,*string)

	// The ID of the IoT Device Provisioning Service.
	id?: null | string @go(ID,*string)

	// The unique identifier of the IoT Device Provisioning Service.
	idScope?: null | string @go(IDScope,*string)

	// An ip_filter_rule block as defined below.
	ipFilterRule?: [...#IPFilterRuleObservation] @go(IPFilterRule,[]IPFilterRuleObservation)

	// A linked_hub block as defined below.
	linkedHub?: [...#LinkedHubObservation] @go(LinkedHub,[]LinkedHubObservation)

	// Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Whether requests from Public Network are allowed. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The name of the resource group under which the Iot Device Provisioning Service resource has to be created. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The service endpoint of the IoT Device Provisioning Service.
	serviceOperationsHostName?: null | string @go(ServiceOperationsHostName,*string)

	// A sku block as defined below.
	sku?: [...#IOTHubDPSSkuObservation] @go(Sku,[]IOTHubDPSSkuObservation)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#IOTHubDPSParameters: {
	// The allocation policy of the IoT Device Provisioning Service (Hashed, GeoLatency or Static). Defaults to Hashed.
	// +kubebuilder:validation:Optional
	allocationPolicy?: null | string @go(AllocationPolicy,*string)

	// Specifies if the IoT Device Provisioning Service has data residency and disaster recovery enabled. Defaults to false. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	dataResidencyEnabled?: null | bool @go(DataResidencyEnabled,*bool)

	// An ip_filter_rule block as defined below.
	// +kubebuilder:validation:Optional
	ipFilterRule?: [...#IPFilterRuleParameters] @go(IPFilterRule,[]IPFilterRuleParameters)

	// A linked_hub block as defined below.
	// +kubebuilder:validation:Optional
	linkedHub?: [...#LinkedHubParameters] @go(LinkedHub,[]LinkedHubParameters)

	// Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Whether requests from Public Network are allowed. Defaults to true.
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The name of the resource group under which the Iot Device Provisioning Service resource has to be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A sku block as defined below.
	// +kubebuilder:validation:Optional
	sku?: [...#IOTHubDPSSkuParameters] @go(Sku,[]IOTHubDPSSkuParameters)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#IOTHubDPSSkuInitParameters: {
	// The number of provisioned IoT Device Provisioning Service units.
	capacity?: null | float64 @go(Capacity,*float64)

	// The name of the sku. Currently can only be set to S1.
	name?: null | string @go(Name,*string)
}

#IOTHubDPSSkuObservation: {
	// The number of provisioned IoT Device Provisioning Service units.
	capacity?: null | float64 @go(Capacity,*float64)

	// The name of the sku. Currently can only be set to S1.
	name?: null | string @go(Name,*string)
}

#IOTHubDPSSkuParameters: {
	// The number of provisioned IoT Device Provisioning Service units.
	// +kubebuilder:validation:Optional
	capacity?: null | float64 @go(Capacity,*float64)

	// The name of the sku. Currently can only be set to S1.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#IPFilterRuleInitParameters: {
	// The desired action for requests captured by this rule. Possible values are Accept, Reject
	action?: null | string @go(Action,*string)

	// The IP address range in CIDR notation for the rule.
	ipMask?: null | string @go(IPMask,*string)

	// The name of the filter.
	name?: null | string @go(Name,*string)

	// Target for requests captured by this rule. Possible values are All, DeviceApi and ServiceApi.
	target?: null | string @go(Target,*string)
}

#IPFilterRuleObservation: {
	// The desired action for requests captured by this rule. Possible values are Accept, Reject
	action?: null | string @go(Action,*string)

	// The IP address range in CIDR notation for the rule.
	ipMask?: null | string @go(IPMask,*string)

	// The name of the filter.
	name?: null | string @go(Name,*string)

	// Target for requests captured by this rule. Possible values are All, DeviceApi and ServiceApi.
	target?: null | string @go(Target,*string)
}

#IPFilterRuleParameters: {
	// The desired action for requests captured by this rule. Possible values are Accept, Reject
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// The IP address range in CIDR notation for the rule.
	// +kubebuilder:validation:Optional
	ipMask?: null | string @go(IPMask,*string)

	// The name of the filter.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Target for requests captured by this rule. Possible values are All, DeviceApi and ServiceApi.
	// +kubebuilder:validation:Optional
	target?: null | string @go(Target,*string)
}

#LinkedHubInitParameters: {
	// The weight applied to the IoT Hub. Defaults to 1.
	allocationWeight?: null | float64 @go(AllocationWeight,*float64)

	// Determines whether to apply allocation policies to the IoT Hub. Defaults to true.
	applyAllocationPolicy?: null | bool @go(ApplyAllocationPolicy,*bool)

	// The location of the IoT hub.
	location?: null | string @go(Location,*string)
}

#LinkedHubObservation: {
	// The weight applied to the IoT Hub. Defaults to 1.
	allocationWeight?: null | float64 @go(AllocationWeight,*float64)

	// Determines whether to apply allocation policies to the IoT Hub. Defaults to true.
	applyAllocationPolicy?: null | bool @go(ApplyAllocationPolicy,*bool)

	// (Computed) The IoT Hub hostname.
	hostname?: null | string @go(HostName,*string)

	// The location of the IoT hub.
	location?: null | string @go(Location,*string)
}

#LinkedHubParameters: {
	// The weight applied to the IoT Hub. Defaults to 1.
	// +kubebuilder:validation:Optional
	allocationWeight?: null | float64 @go(AllocationWeight,*float64)

	// Determines whether to apply allocation policies to the IoT Hub. Defaults to true.
	// +kubebuilder:validation:Optional
	applyAllocationPolicy?: null | bool @go(ApplyAllocationPolicy,*bool)

	// The location of the IoT hub.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)
}

// IOTHubDPSSpec defines the desired state of IOTHubDPS
#IOTHubDPSSpec: {
	forProvider: #IOTHubDPSParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #IOTHubDPSInitParameters @go(InitProvider)
}

// IOTHubDPSStatus defines the observed state of IOTHubDPS.
#IOTHubDPSStatus: {
	atProvider?: #IOTHubDPSObservation @go(AtProvider)
}

// IOTHubDPS is the Schema for the IOTHubDPSs API. Manages an IoT Device Provisioning Service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure},path=iothubdps
#IOTHubDPS: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || has(self.initProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sku) || has(self.initProvider.sku)",message="sku is a required parameter"
	spec:    #IOTHubDPSSpec   @go(Spec)
	status?: #IOTHubDPSStatus @go(Status)
}

// IOTHubDPSList contains a list of IOTHubDPSs
#IOTHubDPSList: {
	items: [...#IOTHubDPS] @go(Items,[]IOTHubDPS)
}
