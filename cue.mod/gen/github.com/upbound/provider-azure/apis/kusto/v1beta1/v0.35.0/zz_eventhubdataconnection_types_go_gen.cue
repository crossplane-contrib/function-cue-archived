// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/kusto/v1beta1

package v1beta1

#EventHubDataConnectionInitParameters: {
	// Specifies compression type for the connection. Allowed values: GZip and None. Defaults to None. Changing this forces a new resource to be created.
	compression?: null | string @go(Compression,*string)

	// Specifies the data format of the EventHub messages. Allowed values: APACHEAVRO, AVRO, CSV, JSON, MULTIJSON, ORC, PARQUET, PSV, RAW, SCSV, SINGLEJSON, SOHSV, TSVE, TSV, TXT, and W3CLOGFILE.
	dataFormat?: null | string @go(DataFormat,*string)

	// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: Single, Multi. Changing this forces a new resource to be created.
	databaseRoutingType?: null | string @go(DatabaseRoutingType,*string)

	// Specifies a list of system properties for the Event Hub.
	eventSystemProperties?: [...null | string] @go(EventSystemProperties,[]*string)

	// The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
	identityId?: null | string @go(IdentityID,*string)

	// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
	mappingRuleName?: null | string @go(MappingRuleName,*string)

	// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
	tableName?: null | string @go(TableName,*string)
}

#EventHubDataConnectionObservation: {
	// Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
	clusterName?: null | string @go(ClusterName,*string)

	// Specifies compression type for the connection. Allowed values: GZip and None. Defaults to None. Changing this forces a new resource to be created.
	compression?: null | string @go(Compression,*string)

	// Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
	consumerGroup?: null | string @go(ConsumerGroup,*string)

	// Specifies the data format of the EventHub messages. Allowed values: APACHEAVRO, AVRO, CSV, JSON, MULTIJSON, ORC, PARQUET, PSV, RAW, SCSV, SINGLEJSON, SOHSV, TSVE, TSV, TXT, and W3CLOGFILE.
	dataFormat?: null | string @go(DataFormat,*string)

	// Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
	databaseName?: null | string @go(DatabaseName,*string)

	// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: Single, Multi. Changing this forces a new resource to be created.
	databaseRoutingType?: null | string @go(DatabaseRoutingType,*string)

	// Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
	eventhubId?: null | string @go(EventHubID,*string)

	// Specifies a list of system properties for the Event Hub.
	eventSystemProperties?: [...null | string] @go(EventSystemProperties,[]*string)

	// The ID of the Kusto EventHub Data Connection.
	id?: null | string @go(ID,*string)

	// The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
	identityId?: null | string @go(IdentityID,*string)

	// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
	mappingRuleName?: null | string @go(MappingRuleName,*string)

	// Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
	tableName?: null | string @go(TableName,*string)
}

#EventHubDataConnectionParameters: {
	// Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/kusto/v1beta1.Cluster
	// +kubebuilder:validation:Optional
	clusterName?: null | string @go(ClusterName,*string)

	// Specifies compression type for the connection. Allowed values: GZip and None. Defaults to None. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	compression?: null | string @go(Compression,*string)

	// Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.ConsumerGroup
	// +kubebuilder:validation:Optional
	consumerGroup?: null | string @go(ConsumerGroup,*string)

	// Specifies the data format of the EventHub messages. Allowed values: APACHEAVRO, AVRO, CSV, JSON, MULTIJSON, ORC, PARQUET, PSV, RAW, SCSV, SINGLEJSON, SOHSV, TSVE, TSV, TXT, and W3CLOGFILE.
	// +kubebuilder:validation:Optional
	dataFormat?: null | string @go(DataFormat,*string)

	// Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/kusto/v1beta1.Database
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: Single, Multi. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	databaseRoutingType?: null | string @go(DatabaseRoutingType,*string)

	// Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.EventHub
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	eventhubId?: null | string @go(EventHubID,*string)

	// Specifies a list of system properties for the Event Hub.
	// +kubebuilder:validation:Optional
	eventSystemProperties?: [...null | string] @go(EventSystemProperties,[]*string)

	// The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
	// +kubebuilder:validation:Optional
	identityId?: null | string @go(IdentityID,*string)

	// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
	// +kubebuilder:validation:Optional
	mappingRuleName?: null | string @go(MappingRuleName,*string)

	// Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
	// +kubebuilder:validation:Optional
	tableName?: null | string @go(TableName,*string)
}

// EventHubDataConnectionSpec defines the desired state of EventHubDataConnection
#EventHubDataConnectionSpec: {
	forProvider: #EventHubDataConnectionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EventHubDataConnectionInitParameters @go(InitProvider)
}

// EventHubDataConnectionStatus defines the observed state of EventHubDataConnection.
#EventHubDataConnectionStatus: {
	atProvider?: #EventHubDataConnectionObservation @go(AtProvider)
}

// EventHubDataConnection is the Schema for the EventHubDataConnections API. Manages Kusto / Data Explorer EventHub Data Connection
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#EventHubDataConnection: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || has(self.initProvider.location)",message="location is a required parameter"
	spec:    #EventHubDataConnectionSpec   @go(Spec)
	status?: #EventHubDataConnectionStatus @go(Status)
}

// EventHubDataConnectionList contains a list of EventHubDataConnections
#EventHubDataConnectionList: {
	items: [...#EventHubDataConnection] @go(Items,[]EventHubDataConnection)
}
