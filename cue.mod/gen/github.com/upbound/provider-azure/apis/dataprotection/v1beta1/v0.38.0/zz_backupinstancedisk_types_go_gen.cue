// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/dataprotection/v1beta1

package v1beta1

#BackupInstanceDiskInitParameters: {
	// The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	location?: null | string @go(Location,*string)
}

#BackupInstanceDiskObservation: {
	// The ID of the Backup Policy.
	backupPolicyId?: null | string @go(BackupPolicyID,*string)

	// The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
	diskId?: null | string @go(DiskID,*string)

	// The ID of the Backup Instance Disk.
	id?: null | string @go(ID,*string)

	// The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	location?: null | string @go(Location,*string)

	// The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
	snapshotResourceGroupName?: null | string @go(SnapshotResourceGroupName,*string)

	// The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	vaultId?: null | string @go(VaultID,*string)
}

#BackupInstanceDiskParameters: {
	// The ID of the Backup Policy.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/dataprotection/v1beta1.BackupPolicyDisk
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	backupPolicyId?: null | string @go(BackupPolicyID,*string)

	// The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/compute/v1beta1.ManagedDisk
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	diskId?: null | string @go(DiskID,*string)

	// The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	snapshotResourceGroupName?: null | string @go(SnapshotResourceGroupName,*string)

	// The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/dataprotection/v1beta1.BackupVault
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	vaultId?: null | string @go(VaultID,*string)
}

// BackupInstanceDiskSpec defines the desired state of BackupInstanceDisk
#BackupInstanceDiskSpec: {
	forProvider: #BackupInstanceDiskParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BackupInstanceDiskInitParameters @go(InitProvider)
}

// BackupInstanceDiskStatus defines the observed state of BackupInstanceDisk.
#BackupInstanceDiskStatus: {
	atProvider?: #BackupInstanceDiskObservation @go(AtProvider)
}

// BackupInstanceDisk is the Schema for the BackupInstanceDisks API. Manages a Backup Instance to back up Disk.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#BackupInstanceDisk: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	spec:    #BackupInstanceDiskSpec   @go(Spec)
	status?: #BackupInstanceDiskStatus @go(Status)
}

// BackupInstanceDiskList contains a list of BackupInstanceDisks
#BackupInstanceDiskList: {
	items: [...#BackupInstanceDisk] @go(Items,[]BackupInstanceDisk)
}
