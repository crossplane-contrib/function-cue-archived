// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/recoveryservices/v1beta1

package v1beta1

#EncryptionInitParameters: {
	// Enabling/Disabling the Double Encryption state.
	infrastructureEncryptionEnabled?: null | bool @go(InfrastructureEncryptionEnabled,*bool)

	// The Key Vault key id used to encrypt this vault. Key managed by Vault Managed Hardware Security Module is also supported.
	keyId?: null | string @go(KeyID,*string)

	// Indicate that system assigned identity should be used or not. Defaults to true.
	useSystemAssignedIdentity?: null | bool @go(UseSystemAssignedIdentity,*bool)

	// Specifies the user assigned identity ID to be used.
	userAssignedIdentityId?: null | string @go(UserAssignedIdentityID,*string)
}

#EncryptionObservation: {
	// Enabling/Disabling the Double Encryption state.
	infrastructureEncryptionEnabled?: null | bool @go(InfrastructureEncryptionEnabled,*bool)

	// The Key Vault key id used to encrypt this vault. Key managed by Vault Managed Hardware Security Module is also supported.
	keyId?: null | string @go(KeyID,*string)

	// Indicate that system assigned identity should be used or not. Defaults to true.
	useSystemAssignedIdentity?: null | bool @go(UseSystemAssignedIdentity,*bool)

	// Specifies the user assigned identity ID to be used.
	userAssignedIdentityId?: null | string @go(UserAssignedIdentityID,*string)
}

#EncryptionParameters: {
	// Enabling/Disabling the Double Encryption state.
	// +kubebuilder:validation:Optional
	infrastructureEncryptionEnabled?: null | bool @go(InfrastructureEncryptionEnabled,*bool)

	// The Key Vault key id used to encrypt this vault. Key managed by Vault Managed Hardware Security Module is also supported.
	// +kubebuilder:validation:Optional
	keyId?: null | string @go(KeyID,*string)

	// Indicate that system assigned identity should be used or not. Defaults to true.
	// +kubebuilder:validation:Optional
	useSystemAssignedIdentity?: null | bool @go(UseSystemAssignedIdentity,*bool)

	// Specifies the user assigned identity ID to be used.
	// +kubebuilder:validation:Optional
	userAssignedIdentityId?: null | string @go(UserAssignedIdentityID,*string)
}

#IdentityInitParameters: {
	// A list of User Assigned Managed Identity IDs to be assigned to this App Configuration.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Recovery Services Vault. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#IdentityObservation: {
	// A list of User Assigned Managed Identity IDs to be assigned to this App Configuration.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The Principal ID associated with this Managed Service Identity.
	principalId?: null | string @go(PrincipalID,*string)

	// The Tenant ID associated with this Managed Service Identity.
	tenantId?: null | string @go(TenantID,*string)

	// Specifies the type of Managed Service Identity that should be configured on this Recovery Services Vault. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	type?: null | string @go(Type,*string)
}

#IdentityParameters: {
	// A list of User Assigned Managed Identity IDs to be assigned to this App Configuration.
	// +kubebuilder:validation:Optional
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Recovery Services Vault. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both).
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#MonitoringInitParameters: {
	// Enabling/Disabling built-in Azure Monitor alerts for security scenarios and job failure scenarios. Defaults to true.
	alertsForAllJobFailuresEnabled?: null | bool @go(AlertsForAllJobFailuresEnabled,*bool)

	// Enabling/Disabling alerts from the older (classic alerts) solution. Defaults to true. More details could be found here.
	alertsForCriticalOperationFailuresEnabled?: null | bool @go(AlertsForCriticalOperationFailuresEnabled,*bool)
}

#MonitoringObservation: {
	// Enabling/Disabling built-in Azure Monitor alerts for security scenarios and job failure scenarios. Defaults to true.
	alertsForAllJobFailuresEnabled?: null | bool @go(AlertsForAllJobFailuresEnabled,*bool)

	// Enabling/Disabling alerts from the older (classic alerts) solution. Defaults to true. More details could be found here.
	alertsForCriticalOperationFailuresEnabled?: null | bool @go(AlertsForCriticalOperationFailuresEnabled,*bool)
}

#MonitoringParameters: {
	// Enabling/Disabling built-in Azure Monitor alerts for security scenarios and job failure scenarios. Defaults to true.
	// +kubebuilder:validation:Optional
	alertsForAllJobFailuresEnabled?: null | bool @go(AlertsForAllJobFailuresEnabled,*bool)

	// Enabling/Disabling alerts from the older (classic alerts) solution. Defaults to true. More details could be found here.
	// +kubebuilder:validation:Optional
	alertsForCriticalOperationFailuresEnabled?: null | bool @go(AlertsForCriticalOperationFailuresEnabled,*bool)
}

#VaultInitParameters: {
	// Whether to enable the Classic experience for VMware replication. If set to false VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
	classicVmwareReplicationEnabled?: null | bool @go(ClassicVMwareReplicationEnabled,*bool)

	// Is cross region restore enabled for this Vault? Only can be true, when storage_mode_type is GeoRedundant. Defaults to false.
	crossRegionRestoreEnabled?: null | bool @go(CrossRegionRestoreEnabled,*bool)

	// An encryption block as defined below. Required with identity.
	encryption?: [...#EncryptionInitParameters] @go(Encryption,[]EncryptionInitParameters)

	// An identity block as defined below.
	identity?: [...#IdentityInitParameters] @go(Identity,[]IdentityInitParameters)

	// Immutability Settings of vault, possible values include: Locked, Unlocked and Disabled.
	immutability?: null | string @go(Immutability,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A monitoring block as defined below.
	monitoring?: [...#MonitoringInitParameters] @go(Monitoring,[]MonitoringInitParameters)

	// Is it enabled to access the vault from public networks. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// Sets the vault's SKU. Possible values include: Standard, RS0.
	sku?: null | string @go(Sku,*string)

	// Is soft delete enable for this Vault? Defaults to true.
	softDeleteEnabled?: null | bool @go(SoftDeleteEnabled,*bool)

	// The storage type of the Recovery Services Vault. Possible values are GeoRedundant, LocallyRedundant and ZoneRedundant. Defaults to GeoRedundant.
	storageModeType?: null | string @go(StorageModeType,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VaultObservation: {
	// Whether to enable the Classic experience for VMware replication. If set to false VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
	classicVmwareReplicationEnabled?: null | bool @go(ClassicVMwareReplicationEnabled,*bool)

	// Is cross region restore enabled for this Vault? Only can be true, when storage_mode_type is GeoRedundant. Defaults to false.
	crossRegionRestoreEnabled?: null | bool @go(CrossRegionRestoreEnabled,*bool)

	// An encryption block as defined below. Required with identity.
	encryption?: [...#EncryptionObservation] @go(Encryption,[]EncryptionObservation)

	// The ID of the Recovery Services Vault.
	id?: null | string @go(ID,*string)

	// An identity block as defined below.
	identity?: [...#IdentityObservation] @go(Identity,[]IdentityObservation)

	// Immutability Settings of vault, possible values include: Locked, Unlocked and Disabled.
	immutability?: null | string @go(Immutability,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A monitoring block as defined below.
	monitoring?: [...#MonitoringObservation] @go(Monitoring,[]MonitoringObservation)

	// Is it enabled to access the vault from public networks. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Sets the vault's SKU. Possible values include: Standard, RS0.
	sku?: null | string @go(Sku,*string)

	// Is soft delete enable for this Vault? Defaults to true.
	softDeleteEnabled?: null | bool @go(SoftDeleteEnabled,*bool)

	// The storage type of the Recovery Services Vault. Possible values are GeoRedundant, LocallyRedundant and ZoneRedundant. Defaults to GeoRedundant.
	storageModeType?: null | string @go(StorageModeType,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VaultParameters: {
	// Whether to enable the Classic experience for VMware replication. If set to false VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	classicVmwareReplicationEnabled?: null | bool @go(ClassicVMwareReplicationEnabled,*bool)

	// Is cross region restore enabled for this Vault? Only can be true, when storage_mode_type is GeoRedundant. Defaults to false.
	// +kubebuilder:validation:Optional
	crossRegionRestoreEnabled?: null | bool @go(CrossRegionRestoreEnabled,*bool)

	// An encryption block as defined below. Required with identity.
	// +kubebuilder:validation:Optional
	encryption?: [...#EncryptionParameters] @go(Encryption,[]EncryptionParameters)

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	identity?: [...#IdentityParameters] @go(Identity,[]IdentityParameters)

	// Immutability Settings of vault, possible values include: Locked, Unlocked and Disabled.
	// +kubebuilder:validation:Optional
	immutability?: null | string @go(Immutability,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// A monitoring block as defined below.
	// +kubebuilder:validation:Optional
	monitoring?: [...#MonitoringParameters] @go(Monitoring,[]MonitoringParameters)

	// Is it enabled to access the vault from public networks. Defaults to true.
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Sets the vault's SKU. Possible values include: Standard, RS0.
	// +kubebuilder:validation:Optional
	sku?: null | string @go(Sku,*string)

	// Is soft delete enable for this Vault? Defaults to true.
	// +kubebuilder:validation:Optional
	softDeleteEnabled?: null | bool @go(SoftDeleteEnabled,*bool)

	// The storage type of the Recovery Services Vault. Possible values are GeoRedundant, LocallyRedundant and ZoneRedundant. Defaults to GeoRedundant.
	// +kubebuilder:validation:Optional
	storageModeType?: null | string @go(StorageModeType,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// VaultSpec defines the desired state of Vault
#VaultSpec: {
	forProvider: #VaultParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VaultInitParameters @go(InitProvider)
}

// VaultStatus defines the observed state of Vault.
#VaultStatus: {
	atProvider?: #VaultObservation @go(AtProvider)
}

// Vault is the Schema for the Vaults API. Manages a Recovery Services Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Vault: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sku) || (has(self.initProvider) && has(self.initProvider.sku))",message="spec.forProvider.sku is a required parameter"
	spec:    #VaultSpec   @go(Spec)
	status?: #VaultStatus @go(Status)
}

// VaultList contains a list of Vaults
#VaultList: {
	items: [...#Vault] @go(Items,[]Vault)
}
