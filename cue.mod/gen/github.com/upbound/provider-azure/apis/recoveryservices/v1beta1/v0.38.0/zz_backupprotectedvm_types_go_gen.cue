// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/recoveryservices/v1beta1

package v1beta1

#BackupProtectedVMInitParameters: {
	// A list of Disks' Logical Unit Numbers(LUN) to be excluded for VM Protection.
	excludeDiskLuns?: [...null | float64] @go(ExcludeDiskLuns,[]*float64)

	// A list of Disks' Logical Unit Numbers(LUN) to be included for VM Protection.
	includeDiskLuns?: [...null | float64] @go(IncludeDiskLuns,[]*float64)

	// Specifies the ID of the VM to backup. Changing this forces a new resource to be created.
	sourceVmId?: null | string @go(SourceVMID,*string)
}

#BackupProtectedVMObservation: {
	// Specifies the id of the backup policy to use.
	backupPolicyId?: null | string @go(BackupPolicyID,*string)

	// A list of Disks' Logical Unit Numbers(LUN) to be excluded for VM Protection.
	excludeDiskLuns?: [...null | float64] @go(ExcludeDiskLuns,[]*float64)

	// The ID of the Backup Protected Virtual Machine.
	id?: null | string @go(ID,*string)

	// A list of Disks' Logical Unit Numbers(LUN) to be included for VM Protection.
	includeDiskLuns?: [...null | float64] @go(IncludeDiskLuns,[]*float64)

	// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	recoveryVaultName?: null | string @go(RecoveryVaultName,*string)

	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Specifies the ID of the VM to backup. Changing this forces a new resource to be created.
	sourceVmId?: null | string @go(SourceVMID,*string)
}

#BackupProtectedVMParameters: {
	// Specifies the id of the backup policy to use.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/recoveryservices/v1beta1.BackupPolicyVM
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	backupPolicyId?: null | string @go(BackupPolicyID,*string)

	// A list of Disks' Logical Unit Numbers(LUN) to be excluded for VM Protection.
	// +kubebuilder:validation:Optional
	excludeDiskLuns?: [...null | float64] @go(ExcludeDiskLuns,[]*float64)

	// A list of Disks' Logical Unit Numbers(LUN) to be included for VM Protection.
	// +kubebuilder:validation:Optional
	includeDiskLuns?: [...null | float64] @go(IncludeDiskLuns,[]*float64)

	// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/recoveryservices/v1beta1.Vault
	// +kubebuilder:validation:Optional
	recoveryVaultName?: null | string @go(RecoveryVaultName,*string)

	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Specifies the ID of the VM to backup. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	sourceVmId?: null | string @go(SourceVMID,*string)
}

// BackupProtectedVMSpec defines the desired state of BackupProtectedVM
#BackupProtectedVMSpec: {
	forProvider: #BackupProtectedVMParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #BackupProtectedVMInitParameters @go(InitProvider)
}

// BackupProtectedVMStatus defines the observed state of BackupProtectedVM.
#BackupProtectedVMStatus: {
	atProvider?: #BackupProtectedVMObservation @go(AtProvider)
}

// BackupProtectedVM is the Schema for the BackupProtectedVMs API. Manages an Azure Backup Protected VM.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#BackupProtectedVM: {
	spec:    #BackupProtectedVMSpec   @go(Spec)
	status?: #BackupProtectedVMStatus @go(Status)
}

// BackupProtectedVMList contains a list of BackupProtectedVMs
#BackupProtectedVMList: {
	items: [...#BackupProtectedVM] @go(Items,[]BackupProtectedVM)
}
