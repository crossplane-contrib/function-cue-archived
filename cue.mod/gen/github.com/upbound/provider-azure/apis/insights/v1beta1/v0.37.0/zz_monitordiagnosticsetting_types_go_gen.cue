// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/insights/v1beta1

package v1beta1

#EnabledLogInitParameters: {
	// The name of a Diagnostic Log Category for this Resource.
	category?: null | string @go(Category,*string)

	// The name of a Diagnostic Log Category Group for this Resource.
	categoryGroup?: null | string @go(CategoryGroup,*string)

	// A retention_policy block as defined below.
	retentionPolicy?: [...#RetentionPolicyInitParameters] @go(RetentionPolicy,[]RetentionPolicyInitParameters)
}

#EnabledLogObservation: {
	// The name of a Diagnostic Log Category for this Resource.
	category?: null | string @go(Category,*string)

	// The name of a Diagnostic Log Category Group for this Resource.
	categoryGroup?: null | string @go(CategoryGroup,*string)

	// A retention_policy block as defined below.
	retentionPolicy?: [...#RetentionPolicyObservation] @go(RetentionPolicy,[]RetentionPolicyObservation)
}

#EnabledLogParameters: {
	// The name of a Diagnostic Log Category for this Resource.
	// +kubebuilder:validation:Optional
	category?: null | string @go(Category,*string)

	// The name of a Diagnostic Log Category Group for this Resource.
	// +kubebuilder:validation:Optional
	categoryGroup?: null | string @go(CategoryGroup,*string)

	// A retention_policy block as defined below.
	// +kubebuilder:validation:Optional
	retentionPolicy?: [...#RetentionPolicyParameters] @go(RetentionPolicy,[]RetentionPolicyParameters)
}

#LogInitParameters: {
	// The name of a Diagnostic Log Category for this Resource.
	category?: null | string @go(Category,*string)

	// The name of a Diagnostic Log Category Group for this Resource.
	categoryGroup?: null | string @go(CategoryGroup,*string)

	// Is this Diagnostic Log enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// A retention_policy block as defined below.
	retentionPolicy?: [...#LogRetentionPolicyInitParameters] @go(RetentionPolicy,[]LogRetentionPolicyInitParameters)
}

#LogObservation: {
	// The name of a Diagnostic Log Category for this Resource.
	category?: null | string @go(Category,*string)

	// The name of a Diagnostic Log Category Group for this Resource.
	categoryGroup?: null | string @go(CategoryGroup,*string)

	// Is this Diagnostic Log enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// A retention_policy block as defined below.
	retentionPolicy?: [...#LogRetentionPolicyObservation] @go(RetentionPolicy,[]LogRetentionPolicyObservation)
}

#LogParameters: {
	// The name of a Diagnostic Log Category for this Resource.
	// +kubebuilder:validation:Optional
	category?: null | string @go(Category,*string)

	// The name of a Diagnostic Log Category Group for this Resource.
	// +kubebuilder:validation:Optional
	categoryGroup?: null | string @go(CategoryGroup,*string)

	// Is this Diagnostic Log enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// A retention_policy block as defined below.
	// +kubebuilder:validation:Optional
	retentionPolicy?: [...#LogRetentionPolicyParameters] @go(RetentionPolicy,[]LogRetentionPolicyParameters)
}

#LogRetentionPolicyInitParameters: {
	// The number of days for which this Retention Policy should apply.
	days?: null | float64 @go(Days,*float64)

	// Is this Retention Policy enabled?
	enabled?: null | bool @go(Enabled,*bool)
}

#LogRetentionPolicyObservation: {
	// The number of days for which this Retention Policy should apply.
	days?: null | float64 @go(Days,*float64)

	// Is this Retention Policy enabled?
	enabled?: null | bool @go(Enabled,*bool)
}

#LogRetentionPolicyParameters: {
	// The number of days for which this Retention Policy should apply.
	// +kubebuilder:validation:Optional
	days?: null | float64 @go(Days,*float64)

	// Is this Retention Policy enabled?
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)
}

#MetricInitParameters: {
	// The name of a Diagnostic Metric Category for this Resource.
	category?: null | string @go(Category,*string)

	// Is this Diagnostic Metric enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// A retention_policy block as defined below.
	retentionPolicy?: [...#MetricRetentionPolicyInitParameters] @go(RetentionPolicy,[]MetricRetentionPolicyInitParameters)
}

#MetricObservation: {
	// The name of a Diagnostic Metric Category for this Resource.
	category?: null | string @go(Category,*string)

	// Is this Diagnostic Metric enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// A retention_policy block as defined below.
	retentionPolicy?: [...#MetricRetentionPolicyObservation] @go(RetentionPolicy,[]MetricRetentionPolicyObservation)
}

#MetricParameters: {
	// The name of a Diagnostic Metric Category for this Resource.
	// +kubebuilder:validation:Optional
	category?: null | string @go(Category,*string)

	// Is this Diagnostic Metric enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// A retention_policy block as defined below.
	// +kubebuilder:validation:Optional
	retentionPolicy?: [...#MetricRetentionPolicyParameters] @go(RetentionPolicy,[]MetricRetentionPolicyParameters)
}

#MetricRetentionPolicyInitParameters: {
	// The number of days for which this Retention Policy should apply.
	days?: null | float64 @go(Days,*float64)

	// Is this Retention Policy enabled?
	enabled?: null | bool @go(Enabled,*bool)
}

#MetricRetentionPolicyObservation: {
	// The number of days for which this Retention Policy should apply.
	days?: null | float64 @go(Days,*float64)

	// Is this Retention Policy enabled?
	enabled?: null | bool @go(Enabled,*bool)
}

#MetricRetentionPolicyParameters: {
	// The number of days for which this Retention Policy should apply.
	// +kubebuilder:validation:Optional
	days?: null | float64 @go(Days,*float64)

	// Is this Retention Policy enabled?
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)
}

#MonitorDiagnosticSettingInitParameters: {
	// One or more enabled_log blocks as defined below.
	enabledLog?: [...#EnabledLogInitParameters] @go(EnabledLog,[]EnabledLogInitParameters)

	// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data.
	eventhubAuthorizationRuleId?: null | string @go(EventHubAuthorizationRuleID,*string)

	// Specifies the name of the Event Hub where Diagnostics Data should be sent.
	eventhubName?: null | string @go(EventHubName,*string)

	// One or more log blocks as defined below.
	log?: [...#LogInitParameters] @go(Log,[]LogInitParameters)

	// Possible values are AzureDiagnostics and Dedicated. When set to Dedicated, logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy AzureDiagnostics table.
	logAnalyticsDestinationType?: null | string @go(LogAnalyticsDestinationType,*string)

	// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
	logAnalyticsWorkspaceId?: null | string @go(LogAnalyticsWorkspaceID,*string)

	// One or more metric blocks as defined below.
	metric?: [...#MetricInitParameters] @go(Metric,[]MetricInitParameters)

	// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The ID of the market partner solution where Diagnostics Data should be sent. For potential partner integrations, click to learn more about partner integration.
	partnerSolutionId?: null | string @go(PartnerSolutionID,*string)

	// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
	targetResourceId?: null | string @go(TargetResourceID,*string)
}

#MonitorDiagnosticSettingObservation: {
	// One or more enabled_log blocks as defined below.
	enabledLog?: [...#EnabledLogObservation] @go(EnabledLog,[]EnabledLogObservation)

	// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data.
	eventhubAuthorizationRuleId?: null | string @go(EventHubAuthorizationRuleID,*string)

	// Specifies the name of the Event Hub where Diagnostics Data should be sent.
	eventhubName?: null | string @go(EventHubName,*string)

	// The ID of the Diagnostic Setting.
	id?: null | string @go(ID,*string)

	// One or more log blocks as defined below.
	log?: [...#LogObservation] @go(Log,[]LogObservation)

	// Possible values are AzureDiagnostics and Dedicated. When set to Dedicated, logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy AzureDiagnostics table.
	logAnalyticsDestinationType?: null | string @go(LogAnalyticsDestinationType,*string)

	// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
	logAnalyticsWorkspaceId?: null | string @go(LogAnalyticsWorkspaceID,*string)

	// One or more metric blocks as defined below.
	metric?: [...#MetricObservation] @go(Metric,[]MetricObservation)

	// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The ID of the market partner solution where Diagnostics Data should be sent. For potential partner integrations, click to learn more about partner integration.
	partnerSolutionId?: null | string @go(PartnerSolutionID,*string)

	// The ID of the Storage Account where logs should be sent.
	storageAccountId?: null | string @go(StorageAccountID,*string)

	// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
	targetResourceId?: null | string @go(TargetResourceID,*string)
}

#MonitorDiagnosticSettingParameters: {
	// One or more enabled_log blocks as defined below.
	// +kubebuilder:validation:Optional
	enabledLog?: [...#EnabledLogParameters] @go(EnabledLog,[]EnabledLogParameters)

	// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data.
	// +kubebuilder:validation:Optional
	eventhubAuthorizationRuleId?: null | string @go(EventHubAuthorizationRuleID,*string)

	// Specifies the name of the Event Hub where Diagnostics Data should be sent.
	// +kubebuilder:validation:Optional
	eventhubName?: null | string @go(EventHubName,*string)

	// One or more log blocks as defined below.
	// +kubebuilder:validation:Optional
	log?: [...#LogParameters] @go(Log,[]LogParameters)

	// Possible values are AzureDiagnostics and Dedicated. When set to Dedicated, logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy AzureDiagnostics table.
	// +kubebuilder:validation:Optional
	logAnalyticsDestinationType?: null | string @go(LogAnalyticsDestinationType,*string)

	// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
	// +kubebuilder:validation:Optional
	logAnalyticsWorkspaceId?: null | string @go(LogAnalyticsWorkspaceID,*string)

	// One or more metric blocks as defined below.
	// +kubebuilder:validation:Optional
	metric?: [...#MetricParameters] @go(Metric,[]MetricParameters)

	// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the market partner solution where Diagnostics Data should be sent. For potential partner integrations, click to learn more about partner integration.
	// +kubebuilder:validation:Optional
	partnerSolutionId?: null | string @go(PartnerSolutionID,*string)

	// The ID of the Storage Account where logs should be sent.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	storageAccountId?: null | string @go(StorageAccountID,*string)

	// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	targetResourceId?: null | string @go(TargetResourceID,*string)
}

#RetentionPolicyInitParameters: {
	// The number of days for which this Retention Policy should apply.
	days?: null | float64 @go(Days,*float64)

	// Is this Retention Policy enabled?
	enabled?: null | bool @go(Enabled,*bool)
}

#RetentionPolicyObservation: {
	// The number of days for which this Retention Policy should apply.
	days?: null | float64 @go(Days,*float64)

	// Is this Retention Policy enabled?
	enabled?: null | bool @go(Enabled,*bool)
}

#RetentionPolicyParameters: {
	// The number of days for which this Retention Policy should apply.
	// +kubebuilder:validation:Optional
	days?: null | float64 @go(Days,*float64)

	// Is this Retention Policy enabled?
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)
}

// MonitorDiagnosticSettingSpec defines the desired state of MonitorDiagnosticSetting
#MonitorDiagnosticSettingSpec: {
	forProvider: #MonitorDiagnosticSettingParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MonitorDiagnosticSettingInitParameters @go(InitProvider)
}

// MonitorDiagnosticSettingStatus defines the observed state of MonitorDiagnosticSetting.
#MonitorDiagnosticSettingStatus: {
	atProvider?: #MonitorDiagnosticSettingObservation @go(AtProvider)
}

// MonitorDiagnosticSetting is the Schema for the MonitorDiagnosticSettings API. Manages a Diagnostic Setting for an existing Resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#MonitorDiagnosticSetting: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetResourceId) || (has(self.initProvider) && has(self.initProvider.targetResourceId))",message="spec.forProvider.targetResourceId is a required parameter"
	spec:    #MonitorDiagnosticSettingSpec   @go(Spec)
	status?: #MonitorDiagnosticSettingStatus @go(Status)
}

// MonitorDiagnosticSettingList contains a list of MonitorDiagnosticSettings
#MonitorDiagnosticSettingList: {
	items: [...#MonitorDiagnosticSetting] @go(Items,[]MonitorDiagnosticSetting)
}
