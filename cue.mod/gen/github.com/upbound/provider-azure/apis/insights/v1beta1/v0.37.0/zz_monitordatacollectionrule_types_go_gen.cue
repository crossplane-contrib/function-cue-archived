// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/insights/v1beta1

package v1beta1

#AzureMonitorMetricsInitParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)
}

#AzureMonitorMetricsObservation: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)
}

#AzureMonitorMetricsParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#ColumnInitParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are SystemAssigned and UserAssigned.
	type?: null | string @go(Type,*string)
}

#ColumnObservation: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are SystemAssigned and UserAssigned.
	type?: null | string @go(Type,*string)
}

#ColumnParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are SystemAssigned and UserAssigned.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#DataFlowInitParameters: {
	// The built-in transform to transform stream data.
	builtInTransform?: null | string @go(BuiltInTransform,*string)

	// Specifies a list of destination names. A azure_monitor_metrics data source only allows for stream of kind Microsoft-InsightsMetrics.
	destinations?: [...null | string] @go(Destinations,[]*string)

	// The output stream of the transform. Only required if the data flow changes data to a different stream.
	outputStream?: null | string @go(OutputStream,*string)

	// Specifies a list of streams. Possible values include but not limited to Microsoft-Event, Microsoft-InsightsMetrics, Microsoft-Perf, Microsoft-Syslog,and Microsoft-WindowsEvent.
	streams?: [...null | string] @go(Streams,[]*string)

	// The KQL query to transform stream data.
	transformKql?: null | string @go(TransformKql,*string)
}

#DataFlowObservation: {
	// The built-in transform to transform stream data.
	builtInTransform?: null | string @go(BuiltInTransform,*string)

	// Specifies a list of destination names. A azure_monitor_metrics data source only allows for stream of kind Microsoft-InsightsMetrics.
	destinations?: [...null | string] @go(Destinations,[]*string)

	// The output stream of the transform. Only required if the data flow changes data to a different stream.
	outputStream?: null | string @go(OutputStream,*string)

	// Specifies a list of streams. Possible values include but not limited to Microsoft-Event, Microsoft-InsightsMetrics, Microsoft-Perf, Microsoft-Syslog,and Microsoft-WindowsEvent.
	streams?: [...null | string] @go(Streams,[]*string)

	// The KQL query to transform stream data.
	transformKql?: null | string @go(TransformKql,*string)
}

#DataFlowParameters: {
	// The built-in transform to transform stream data.
	// +kubebuilder:validation:Optional
	builtInTransform?: null | string @go(BuiltInTransform,*string)

	// Specifies a list of destination names. A azure_monitor_metrics data source only allows for stream of kind Microsoft-InsightsMetrics.
	// +kubebuilder:validation:Optional
	destinations: [...null | string] @go(Destinations,[]*string)

	// The output stream of the transform. Only required if the data flow changes data to a different stream.
	// +kubebuilder:validation:Optional
	outputStream?: null | string @go(OutputStream,*string)

	// Specifies a list of streams. Possible values include but not limited to Microsoft-Event, Microsoft-InsightsMetrics, Microsoft-Perf, Microsoft-Syslog,and Microsoft-WindowsEvent.
	// +kubebuilder:validation:Optional
	streams: [...null | string] @go(Streams,[]*string)

	// The KQL query to transform stream data.
	// +kubebuilder:validation:Optional
	transformKql?: null | string @go(TransformKql,*string)
}

#DataImportInitParameters: {
	// An event_hub_data_source block as defined below.
	eventHubDataSource?: [...#EventHubDataSourceInitParameters] @go(EventHubDataSource,[]EventHubDataSourceInitParameters)
}

#DataImportObservation: {
	// An event_hub_data_source block as defined below.
	eventHubDataSource?: [...#EventHubDataSourceObservation] @go(EventHubDataSource,[]EventHubDataSourceObservation)
}

#DataImportParameters: {
	// An event_hub_data_source block as defined below.
	// +kubebuilder:validation:Optional
	eventHubDataSource: [...#EventHubDataSourceParameters] @go(EventHubDataSource,[]EventHubDataSourceParameters)
}

#DataSourcesInitParameters: {
	// A data_import block as defined above.
	dataImport?: [...#DataImportInitParameters] @go(DataImport,[]DataImportInitParameters)

	// One or more extension blocks as defined below.
	extension?: [...#ExtensionInitParameters] @go(Extension,[]ExtensionInitParameters)

	// One or more iis_log blocks as defined below.
	iisLog?: [...#IisLogInitParameters] @go(IisLog,[]IisLogInitParameters)

	// One or more log_file blocks as defined below.
	logFile?: [...#LogFileInitParameters] @go(LogFile,[]LogFileInitParameters)

	// One or more performance_counter blocks as defined below.
	performanceCounter?: [...#PerformanceCounterInitParameters] @go(PerformanceCounter,[]PerformanceCounterInitParameters)

	// One or more platform_telemetry blocks as defined below.
	platformTelemetry?: [...#PlatformTelemetryInitParameters] @go(PlatformTelemetry,[]PlatformTelemetryInitParameters)

	// One or more prometheus_forwarder blocks as defined below.
	prometheusForwarder?: [...#PrometheusForwarderInitParameters] @go(PrometheusForwarder,[]PrometheusForwarderInitParameters)

	// One or more syslog blocks as defined below.
	syslog?: [...#SyslogInitParameters] @go(Syslog,[]SyslogInitParameters)

	// One or more windows_event_log blocks as defined below.
	windowsEventLog?: [...#WindowsEventLogInitParameters] @go(WindowsEventLog,[]WindowsEventLogInitParameters)

	// One or more windows_firewall_log blocks as defined below.
	windowsFirewallLog?: [...#WindowsFirewallLogInitParameters] @go(WindowsFirewallLog,[]WindowsFirewallLogInitParameters)
}

#DataSourcesObservation: {
	// A data_import block as defined above.
	dataImport?: [...#DataImportObservation] @go(DataImport,[]DataImportObservation)

	// One or more extension blocks as defined below.
	extension?: [...#ExtensionObservation] @go(Extension,[]ExtensionObservation)

	// One or more iis_log blocks as defined below.
	iisLog?: [...#IisLogObservation] @go(IisLog,[]IisLogObservation)

	// One or more log_file blocks as defined below.
	logFile?: [...#LogFileObservation] @go(LogFile,[]LogFileObservation)

	// One or more performance_counter blocks as defined below.
	performanceCounter?: [...#PerformanceCounterObservation] @go(PerformanceCounter,[]PerformanceCounterObservation)

	// One or more platform_telemetry blocks as defined below.
	platformTelemetry?: [...#PlatformTelemetryObservation] @go(PlatformTelemetry,[]PlatformTelemetryObservation)

	// One or more prometheus_forwarder blocks as defined below.
	prometheusForwarder?: [...#PrometheusForwarderObservation] @go(PrometheusForwarder,[]PrometheusForwarderObservation)

	// One or more syslog blocks as defined below.
	syslog?: [...#SyslogObservation] @go(Syslog,[]SyslogObservation)

	// One or more windows_event_log blocks as defined below.
	windowsEventLog?: [...#WindowsEventLogObservation] @go(WindowsEventLog,[]WindowsEventLogObservation)

	// One or more windows_firewall_log blocks as defined below.
	windowsFirewallLog?: [...#WindowsFirewallLogObservation] @go(WindowsFirewallLog,[]WindowsFirewallLogObservation)
}

#DataSourcesParameters: {
	// A data_import block as defined above.
	// +kubebuilder:validation:Optional
	dataImport?: [...#DataImportParameters] @go(DataImport,[]DataImportParameters)

	// One or more extension blocks as defined below.
	// +kubebuilder:validation:Optional
	extension?: [...#ExtensionParameters] @go(Extension,[]ExtensionParameters)

	// One or more iis_log blocks as defined below.
	// +kubebuilder:validation:Optional
	iisLog?: [...#IisLogParameters] @go(IisLog,[]IisLogParameters)

	// One or more log_file blocks as defined below.
	// +kubebuilder:validation:Optional
	logFile?: [...#LogFileParameters] @go(LogFile,[]LogFileParameters)

	// One or more performance_counter blocks as defined below.
	// +kubebuilder:validation:Optional
	performanceCounter?: [...#PerformanceCounterParameters] @go(PerformanceCounter,[]PerformanceCounterParameters)

	// One or more platform_telemetry blocks as defined below.
	// +kubebuilder:validation:Optional
	platformTelemetry?: [...#PlatformTelemetryParameters] @go(PlatformTelemetry,[]PlatformTelemetryParameters)

	// One or more prometheus_forwarder blocks as defined below.
	// +kubebuilder:validation:Optional
	prometheusForwarder?: [...#PrometheusForwarderParameters] @go(PrometheusForwarder,[]PrometheusForwarderParameters)

	// One or more syslog blocks as defined below.
	// +kubebuilder:validation:Optional
	syslog?: [...#SyslogParameters] @go(Syslog,[]SyslogParameters)

	// One or more windows_event_log blocks as defined below.
	// +kubebuilder:validation:Optional
	windowsEventLog?: [...#WindowsEventLogParameters] @go(WindowsEventLog,[]WindowsEventLogParameters)

	// One or more windows_firewall_log blocks as defined below.
	// +kubebuilder:validation:Optional
	windowsFirewallLog?: [...#WindowsFirewallLogParameters] @go(WindowsFirewallLog,[]WindowsFirewallLogParameters)
}

#DestinationsInitParameters: {
	// A azure_monitor_metrics block as defined above.
	azureMonitorMetrics?: [...#AzureMonitorMetricsInitParameters] @go(AzureMonitorMetrics,[]AzureMonitorMetricsInitParameters)

	// One or more event_hub blocks as defined below.
	eventHub?: [...#EventHubInitParameters] @go(EventHub,[]EventHubInitParameters)

	// One or more event_hub blocks as defined below.
	eventHubDirect?: [...#EventHubDirectInitParameters] @go(EventHubDirect,[]EventHubDirectInitParameters)

	// One or more log_analytics blocks as defined below.
	logAnalytics?: [...#LogAnalyticsInitParameters] @go(LogAnalytics,[]LogAnalyticsInitParameters)

	// One or more monitor_account blocks as defined below.
	monitorAccount?: [...#MonitorAccountInitParameters] @go(MonitorAccount,[]MonitorAccountInitParameters)

	// One or more storage_blob blocks as defined below.
	storageBlob?: [...#StorageBlobInitParameters] @go(StorageBlob,[]StorageBlobInitParameters)

	// One or more storage_blob_direct blocks as defined below.
	storageBlobDirect?: [...#StorageBlobDirectInitParameters] @go(StorageBlobDirect,[]StorageBlobDirectInitParameters)

	// One or more storage_table_direct blocks as defined below.
	storageTableDirect?: [...#StorageTableDirectInitParameters] @go(StorageTableDirect,[]StorageTableDirectInitParameters)
}

#DestinationsObservation: {
	// A azure_monitor_metrics block as defined above.
	azureMonitorMetrics?: [...#AzureMonitorMetricsObservation] @go(AzureMonitorMetrics,[]AzureMonitorMetricsObservation)

	// One or more event_hub blocks as defined below.
	eventHub?: [...#EventHubObservation] @go(EventHub,[]EventHubObservation)

	// One or more event_hub blocks as defined below.
	eventHubDirect?: [...#EventHubDirectObservation] @go(EventHubDirect,[]EventHubDirectObservation)

	// One or more log_analytics blocks as defined below.
	logAnalytics?: [...#LogAnalyticsObservation] @go(LogAnalytics,[]LogAnalyticsObservation)

	// One or more monitor_account blocks as defined below.
	monitorAccount?: [...#MonitorAccountObservation] @go(MonitorAccount,[]MonitorAccountObservation)

	// One or more storage_blob blocks as defined below.
	storageBlob?: [...#StorageBlobObservation] @go(StorageBlob,[]StorageBlobObservation)

	// One or more storage_blob_direct blocks as defined below.
	storageBlobDirect?: [...#StorageBlobDirectObservation] @go(StorageBlobDirect,[]StorageBlobDirectObservation)

	// One or more storage_table_direct blocks as defined below.
	storageTableDirect?: [...#StorageTableDirectObservation] @go(StorageTableDirect,[]StorageTableDirectObservation)
}

#DestinationsParameters: {
	// A azure_monitor_metrics block as defined above.
	// +kubebuilder:validation:Optional
	azureMonitorMetrics?: [...#AzureMonitorMetricsParameters] @go(AzureMonitorMetrics,[]AzureMonitorMetricsParameters)

	// One or more event_hub blocks as defined below.
	// +kubebuilder:validation:Optional
	eventHub?: [...#EventHubParameters] @go(EventHub,[]EventHubParameters)

	// One or more event_hub blocks as defined below.
	// +kubebuilder:validation:Optional
	eventHubDirect?: [...#EventHubDirectParameters] @go(EventHubDirect,[]EventHubDirectParameters)

	// One or more log_analytics blocks as defined below.
	// +kubebuilder:validation:Optional
	logAnalytics?: [...#LogAnalyticsParameters] @go(LogAnalytics,[]LogAnalyticsParameters)

	// One or more monitor_account blocks as defined below.
	// +kubebuilder:validation:Optional
	monitorAccount?: [...#MonitorAccountParameters] @go(MonitorAccount,[]MonitorAccountParameters)

	// One or more storage_blob blocks as defined below.
	// +kubebuilder:validation:Optional
	storageBlob?: [...#StorageBlobParameters] @go(StorageBlob,[]StorageBlobParameters)

	// One or more storage_blob_direct blocks as defined below.
	// +kubebuilder:validation:Optional
	storageBlobDirect?: [...#StorageBlobDirectParameters] @go(StorageBlobDirect,[]StorageBlobDirectParameters)

	// One or more storage_table_direct blocks as defined below.
	// +kubebuilder:validation:Optional
	storageTableDirect?: [...#StorageTableDirectParameters] @go(StorageTableDirect,[]StorageTableDirectParameters)
}

#EventHubDataSourceInitParameters: {
	// The Event Hub consumer group name.
	consumerGroup?: null | string @go(ConsumerGroup,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// The stream to collect from Event Hub. Possible value should be a custom stream name.
	stream?: null | string @go(Stream,*string)
}

#EventHubDataSourceObservation: {
	// The Event Hub consumer group name.
	consumerGroup?: null | string @go(ConsumerGroup,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// The stream to collect from Event Hub. Possible value should be a custom stream name.
	stream?: null | string @go(Stream,*string)
}

#EventHubDataSourceParameters: {
	// The Event Hub consumer group name.
	// +kubebuilder:validation:Optional
	consumerGroup?: null | string @go(ConsumerGroup,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The stream to collect from Event Hub. Possible value should be a custom stream name.
	// +kubebuilder:validation:Optional
	stream?: null | string @go(Stream,*string)
}

#EventHubDirectInitParameters: {
	// The resource ID of the Event Hub.
	eventHubId?: null | string @go(EventHubID,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)
}

#EventHubDirectObservation: {
	// The resource ID of the Event Hub.
	eventHubId?: null | string @go(EventHubID,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)
}

#EventHubDirectParameters: {
	// The resource ID of the Event Hub.
	// +kubebuilder:validation:Optional
	eventHubId?: null | string @go(EventHubID,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#EventHubInitParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)
}

#EventHubObservation: {
	// The resource ID of the Event Hub.
	eventHubId?: null | string @go(EventHubID,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)
}

#EventHubParameters: {
	// The resource ID of the Event Hub.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.EventHub
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	eventHubId?: null | string @go(EventHubID,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#ExtensionInitParameters: {
	// A JSON String which specifies the extension setting.
	extensionJson?: null | string @go(ExtensionJSON,*string)

	// The name of the VM extension.
	extensionName?: null | string @go(ExtensionName,*string)

	// Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: performance_counter, windows_event_log,and syslog.
	inputDataSources?: [...null | string] @go(InputDataSources,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#ExtensionObservation: {
	// A JSON String which specifies the extension setting.
	extensionJson?: null | string @go(ExtensionJSON,*string)

	// The name of the VM extension.
	extensionName?: null | string @go(ExtensionName,*string)

	// Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: performance_counter, windows_event_log,and syslog.
	inputDataSources?: [...null | string] @go(InputDataSources,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#ExtensionParameters: {
	// A JSON String which specifies the extension setting.
	// +kubebuilder:validation:Optional
	extensionJson?: null | string @go(ExtensionJSON,*string)

	// The name of the VM extension.
	// +kubebuilder:validation:Optional
	extensionName?: null | string @go(ExtensionName,*string)

	// Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: performance_counter, windows_event_log,and syslog.
	// +kubebuilder:validation:Optional
	inputDataSources?: [...null | string] @go(InputDataSources,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	// +kubebuilder:validation:Optional
	streams: [...null | string] @go(Streams,[]*string)
}

#IisLogInitParameters: {
	// Specifies a list of absolute paths where the log files are located.
	logDirectories?: [...null | string] @go(LogDirectories,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#IisLogObservation: {
	// Specifies a list of absolute paths where the log files are located.
	logDirectories?: [...null | string] @go(LogDirectories,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#IisLogParameters: {
	// Specifies a list of absolute paths where the log files are located.
	// +kubebuilder:validation:Optional
	logDirectories?: [...null | string] @go(LogDirectories,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	// +kubebuilder:validation:Optional
	streams: [...null | string] @go(Streams,[]*string)
}

#LabelIncludeFilterInitParameters: {
	// The label of the filter. This label should be unique across all label_include_fileter block. Possible value is microsoft_metrics_include_label.
	label?: null | string @go(Label,*string)

	// The value of the filter.
	value?: null | string @go(Value,*string)
}

#LabelIncludeFilterObservation: {
	// The label of the filter. This label should be unique across all label_include_fileter block. Possible value is microsoft_metrics_include_label.
	label?: null | string @go(Label,*string)

	// The value of the filter.
	value?: null | string @go(Value,*string)
}

#LabelIncludeFilterParameters: {
	// The label of the filter. This label should be unique across all label_include_fileter block. Possible value is microsoft_metrics_include_label.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// The value of the filter.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#LogAnalyticsInitParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)
}

#LogAnalyticsObservation: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// The ID of a Log Analytic Workspace resource.
	workspaceResourceId?: null | string @go(WorkspaceResourceID,*string)
}

#LogAnalyticsParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of a Log Analytic Workspace resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/operationalinsights/v1beta1.Workspace
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	workspaceResourceId?: null | string @go(WorkspaceResourceID,*string)
}

#LogFileInitParameters: {
	// Specifies a list of file patterns where the log files are located. For example, C:\\JavaLogs\\*.log.
	filePatterns?: [...null | string] @go(FilePatterns,[]*string)

	// The data format of the log files. possible value is text.
	format?: null | string @go(Format,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// A settings block as defined below.
	settings?: [...#SettingsInitParameters] @go(Settings,[]SettingsInitParameters)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#LogFileObservation: {
	// Specifies a list of file patterns where the log files are located. For example, C:\\JavaLogs\\*.log.
	filePatterns?: [...null | string] @go(FilePatterns,[]*string)

	// The data format of the log files. possible value is text.
	format?: null | string @go(Format,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// A settings block as defined below.
	settings?: [...#SettingsObservation] @go(Settings,[]SettingsObservation)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#LogFileParameters: {
	// Specifies a list of file patterns where the log files are located. For example, C:\\JavaLogs\\*.log.
	// +kubebuilder:validation:Optional
	filePatterns: [...null | string] @go(FilePatterns,[]*string)

	// The data format of the log files. possible value is text.
	// +kubebuilder:validation:Optional
	format?: null | string @go(Format,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A settings block as defined below.
	// +kubebuilder:validation:Optional
	settings?: [...#SettingsParameters] @go(Settings,[]SettingsParameters)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	// +kubebuilder:validation:Optional
	streams: [...null | string] @go(Streams,[]*string)
}

#MonitorAccountInitParameters: {
	// The resource ID of the Monitor Account.
	monitorAccountId?: null | string @go(MonitorAccountID,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)
}

#MonitorAccountObservation: {
	// The resource ID of the Monitor Account.
	monitorAccountId?: null | string @go(MonitorAccountID,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)
}

#MonitorAccountParameters: {
	// The resource ID of the Monitor Account.
	// +kubebuilder:validation:Optional
	monitorAccountId?: null | string @go(MonitorAccountID,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#MonitorDataCollectionRuleIdentityInitParameters: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are SystemAssigned and UserAssigned.
	type?: null | string @go(Type,*string)
}

#MonitorDataCollectionRuleIdentityObservation: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The Principal ID associated with this Managed Service Identity.
	principalId?: null | string @go(PrincipalID,*string)

	// The Tenant ID associated with this Managed Service Identity.
	tenantId?: null | string @go(TenantID,*string)

	// Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are SystemAssigned and UserAssigned.
	type?: null | string @go(Type,*string)
}

#MonitorDataCollectionRuleIdentityParameters: {
	// A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
	// +kubebuilder:validation:Optional
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are SystemAssigned and UserAssigned.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#MonitorDataCollectionRuleInitParameters: {
	// One or more data_flow blocks as defined below.
	dataFlow?: [...#DataFlowInitParameters] @go(DataFlow,[]DataFlowInitParameters)

	// A data_sources block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
	dataSources?: [...#DataSourcesInitParameters] @go(DataSources,[]DataSourcesInitParameters)

	// The description of the Data Collection Rule.
	description?: null | string @go(Description,*string)

	// A destinations block as defined below.
	destinations?: [...#DestinationsInitParameters] @go(Destinations,[]DestinationsInitParameters)

	// An identity block as defined below.
	identity?: [...#MonitorDataCollectionRuleIdentityInitParameters] @go(Identity,[]MonitorDataCollectionRuleIdentityInitParameters)

	// The kind of the Data Collection Rule. Possible values are Linux, Windows,and AgentDirectToStore. A rule of kind Linux does not allow for windows_event_log data sources. And a rule of kind Windows does not allow for syslog data sources. If kind is not specified, all kinds of data sources are allowed.
	kind?: null | string @go(Kind,*string)

	// The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
	location?: null | string @go(Location,*string)

	// A stream_declaration block as defined below.
	streamDeclaration?: [...#StreamDeclarationInitParameters] @go(StreamDeclaration,[]StreamDeclarationInitParameters)

	// A mapping of tags which should be assigned to the Data Collection Rule.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#MonitorDataCollectionRuleObservation: {
	// The resource ID of the Data Collection Endpoint that this rule can be used with.
	dataCollectionEndpointId?: null | string @go(DataCollectionEndpointID,*string)

	// One or more data_flow blocks as defined below.
	dataFlow?: [...#DataFlowObservation] @go(DataFlow,[]DataFlowObservation)

	// A data_sources block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
	dataSources?: [...#DataSourcesObservation] @go(DataSources,[]DataSourcesObservation)

	// The description of the Data Collection Rule.
	description?: null | string @go(Description,*string)

	// A destinations block as defined below.
	destinations?: [...#DestinationsObservation] @go(Destinations,[]DestinationsObservation)

	// The ID of the Data Collection Rule.
	id?: null | string @go(ID,*string)

	// An identity block as defined below.
	identity?: [...#MonitorDataCollectionRuleIdentityObservation] @go(Identity,[]MonitorDataCollectionRuleIdentityObservation)

	// The immutable ID of the Data Collection Rule.
	immutableId?: null | string @go(ImmutableID,*string)

	// The kind of the Data Collection Rule. Possible values are Linux, Windows,and AgentDirectToStore. A rule of kind Linux does not allow for windows_event_log data sources. And a rule of kind Windows does not allow for syslog data sources. If kind is not specified, all kinds of data sources are allowed.
	kind?: null | string @go(Kind,*string)

	// The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
	location?: null | string @go(Location,*string)

	// The name of the Resource Group where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A stream_declaration block as defined below.
	streamDeclaration?: [...#StreamDeclarationObservation] @go(StreamDeclaration,[]StreamDeclarationObservation)

	// A mapping of tags which should be assigned to the Data Collection Rule.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#MonitorDataCollectionRuleParameters: {
	// The resource ID of the Data Collection Endpoint that this rule can be used with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/insights/v1beta1.MonitorDataCollectionEndpoint
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dataCollectionEndpointId?: null | string @go(DataCollectionEndpointID,*string)

	// One or more data_flow blocks as defined below.
	// +kubebuilder:validation:Optional
	dataFlow?: [...#DataFlowParameters] @go(DataFlow,[]DataFlowParameters)

	// A data_sources block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
	// +kubebuilder:validation:Optional
	dataSources?: [...#DataSourcesParameters] @go(DataSources,[]DataSourcesParameters)

	// The description of the Data Collection Rule.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A destinations block as defined below.
	// +kubebuilder:validation:Optional
	destinations?: [...#DestinationsParameters] @go(Destinations,[]DestinationsParameters)

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	identity?: [...#MonitorDataCollectionRuleIdentityParameters] @go(Identity,[]MonitorDataCollectionRuleIdentityParameters)

	// The kind of the Data Collection Rule. Possible values are Linux, Windows,and AgentDirectToStore. A rule of kind Linux does not allow for windows_event_log data sources. And a rule of kind Windows does not allow for syslog data sources. If kind is not specified, all kinds of data sources are allowed.
	// +kubebuilder:validation:Optional
	kind?: null | string @go(Kind,*string)

	// The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The name of the Resource Group where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A stream_declaration block as defined below.
	// +kubebuilder:validation:Optional
	streamDeclaration?: [...#StreamDeclarationParameters] @go(StreamDeclaration,[]StreamDeclarationParameters)

	// A mapping of tags which should be assigned to the Data Collection Rule.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#PerformanceCounterInitParameters: {
	// Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command typeperf. Please see this document for more information.
	counterSpecifiers?: [...null | string] @go(CounterSpecifiers,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// The number of seconds between consecutive counter measurements (samples). The value should be integer between 1 and 300 inclusive. sampling_frequency_in_seconds must be equal to 60 seconds for counters collected with Microsoft-InsightsMetrics stream.
	samplingFrequencyInSeconds?: null | float64 @go(SamplingFrequencyInSeconds,*float64)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#PerformanceCounterObservation: {
	// Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command typeperf. Please see this document for more information.
	counterSpecifiers?: [...null | string] @go(CounterSpecifiers,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// The number of seconds between consecutive counter measurements (samples). The value should be integer between 1 and 300 inclusive. sampling_frequency_in_seconds must be equal to 60 seconds for counters collected with Microsoft-InsightsMetrics stream.
	samplingFrequencyInSeconds?: null | float64 @go(SamplingFrequencyInSeconds,*float64)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#PerformanceCounterParameters: {
	// Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command typeperf. Please see this document for more information.
	// +kubebuilder:validation:Optional
	counterSpecifiers: [...null | string] @go(CounterSpecifiers,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The number of seconds between consecutive counter measurements (samples). The value should be integer between 1 and 300 inclusive. sampling_frequency_in_seconds must be equal to 60 seconds for counters collected with Microsoft-InsightsMetrics stream.
	// +kubebuilder:validation:Optional
	samplingFrequencyInSeconds?: null | float64 @go(SamplingFrequencyInSeconds,*float64)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	// +kubebuilder:validation:Optional
	streams: [...null | string] @go(Streams,[]*string)
}

#PlatformTelemetryInitParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#PlatformTelemetryObservation: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#PlatformTelemetryParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	// +kubebuilder:validation:Optional
	streams: [...null | string] @go(Streams,[]*string)
}

#PrometheusForwarderInitParameters: {
	// One or more label_include_filter blocks as defined above.
	labelIncludeFilter?: [...#LabelIncludeFilterInitParameters] @go(LabelIncludeFilter,[]LabelIncludeFilterInitParameters)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#PrometheusForwarderObservation: {
	// One or more label_include_filter blocks as defined above.
	labelIncludeFilter?: [...#LabelIncludeFilterObservation] @go(LabelIncludeFilter,[]LabelIncludeFilterObservation)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#PrometheusForwarderParameters: {
	// One or more label_include_filter blocks as defined above.
	// +kubebuilder:validation:Optional
	labelIncludeFilter?: [...#LabelIncludeFilterParameters] @go(LabelIncludeFilter,[]LabelIncludeFilterParameters)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	// +kubebuilder:validation:Optional
	streams: [...null | string] @go(Streams,[]*string)
}

#SettingsInitParameters: {
	// A text block as defined below.
	text?: [...#TextInitParameters] @go(Text,[]TextInitParameters)
}

#SettingsObservation: {
	// A text block as defined below.
	text?: [...#TextObservation] @go(Text,[]TextObservation)
}

#SettingsParameters: {
	// A text block as defined below.
	// +kubebuilder:validation:Optional
	text: [...#TextParameters] @go(Text,[]TextParameters)
}

#StorageBlobDirectInitParameters: {
	// The Storage Container name.
	containerName?: null | string @go(ContainerName,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// The resource ID of the Storage Account.
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

#StorageBlobDirectObservation: {
	// The Storage Container name.
	containerName?: null | string @go(ContainerName,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// The resource ID of the Storage Account.
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

#StorageBlobDirectParameters: {
	// The Storage Container name.
	// +kubebuilder:validation:Optional
	containerName?: null | string @go(ContainerName,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The resource ID of the Storage Account.
	// +kubebuilder:validation:Optional
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

#StorageBlobInitParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)
}

#StorageBlobObservation: {
	// The Storage Container name.
	containerName?: null | string @go(ContainerName,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// The resource ID of the Storage Account.
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

#StorageBlobParameters: {
	// The Storage Container name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Container
	// +kubebuilder:validation:Optional
	containerName?: null | string @go(ContainerName,*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The resource ID of the Storage Account.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

#StorageTableDirectInitParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// The resource ID of the Storage Account.
	storageAccountId?: null | string @go(StorageAccountID,*string)

	// The Storage Table name.
	tableName?: null | string @go(TableName,*string)
}

#StorageTableDirectObservation: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// The resource ID of the Storage Account.
	storageAccountId?: null | string @go(StorageAccountID,*string)

	// The Storage Table name.
	tableName?: null | string @go(TableName,*string)
}

#StorageTableDirectParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The resource ID of the Storage Account.
	// +kubebuilder:validation:Optional
	storageAccountId?: null | string @go(StorageAccountID,*string)

	// The Storage Table name.
	// +kubebuilder:validation:Optional
	tableName?: null | string @go(TableName,*string)
}

#StreamDeclarationInitParameters: {
	// One or more column blocks as defined above.
	column?: [...#ColumnInitParameters] @go(Column,[]ColumnInitParameters)

	// The name of the custom stream. This name should be unique across all stream_declaration blocks.
	streamName?: null | string @go(StreamName,*string)
}

#StreamDeclarationObservation: {
	// One or more column blocks as defined above.
	column?: [...#ColumnObservation] @go(Column,[]ColumnObservation)

	// The name of the custom stream. This name should be unique across all stream_declaration blocks.
	streamName?: null | string @go(StreamName,*string)
}

#StreamDeclarationParameters: {
	// One or more column blocks as defined above.
	// +kubebuilder:validation:Optional
	column: [...#ColumnParameters] @go(Column,[]ColumnParameters)

	// The name of the custom stream. This name should be unique across all stream_declaration blocks.
	// +kubebuilder:validation:Optional
	streamName?: null | string @go(StreamName,*string)
}

#SyslogInitParameters: {
	// Specifies a list of facility names. Use a wildcard * to collect logs for all facility names. Possible values are auth, authpriv, cron, daemon, kern, lpr, mail, mark, news, syslog, user, uucp, local0, local1, local2, local3, local4, local5, local6, local7,and *.
	facilityNames?: [...null | string] @go(FacilityNames,[]*string)

	// Specifies a list of log levels. Use a wildcard * to collect logs for all log levels. Possible values are Debug, Info, Notice, Warning, Error, Critical, Alert, Emergency,and *.
	logLevels?: [...null | string] @go(LogLevels,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#SyslogObservation: {
	// Specifies a list of facility names. Use a wildcard * to collect logs for all facility names. Possible values are auth, authpriv, cron, daemon, kern, lpr, mail, mark, news, syslog, user, uucp, local0, local1, local2, local3, local4, local5, local6, local7,and *.
	facilityNames?: [...null | string] @go(FacilityNames,[]*string)

	// Specifies a list of log levels. Use a wildcard * to collect logs for all log levels. Possible values are Debug, Info, Notice, Warning, Error, Critical, Alert, Emergency,and *.
	logLevels?: [...null | string] @go(LogLevels,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#SyslogParameters: {
	// Specifies a list of facility names. Use a wildcard * to collect logs for all facility names. Possible values are auth, authpriv, cron, daemon, kern, lpr, mail, mark, news, syslog, user, uucp, local0, local1, local2, local3, local4, local5, local6, local7,and *.
	// +kubebuilder:validation:Optional
	facilityNames: [...null | string] @go(FacilityNames,[]*string)

	// Specifies a list of log levels. Use a wildcard * to collect logs for all log levels. Possible values are Debug, Info, Notice, Warning, Error, Critical, Alert, Emergency,and *.
	// +kubebuilder:validation:Optional
	logLevels: [...null | string] @go(LogLevels,[]*string)

	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	// +kubebuilder:validation:Optional
	streams?: [...null | string] @go(Streams,[]*string)
}

#TextInitParameters: {
	// The timestamp format of the text log files. Possible values are ISO 8601, YYYY-MM-DD HH:MM:SS, M/D/YYYY HH:MM:SS AM/PM, Mon DD, YYYY HH:MM:SS, yyMMdd HH:mm:ss, ddMMyy HH:mm:ss, MMM d hh:mm:ss, dd/MMM/yyyy:HH:mm:ss zzz,and yyyy-MM-ddTHH:mm:ssK.
	recordStartTimestampFormat?: null | string @go(RecordStartTimestampFormat,*string)
}

#TextObservation: {
	// The timestamp format of the text log files. Possible values are ISO 8601, YYYY-MM-DD HH:MM:SS, M/D/YYYY HH:MM:SS AM/PM, Mon DD, YYYY HH:MM:SS, yyMMdd HH:mm:ss, ddMMyy HH:mm:ss, MMM d hh:mm:ss, dd/MMM/yyyy:HH:mm:ss zzz,and yyyy-MM-ddTHH:mm:ssK.
	recordStartTimestampFormat?: null | string @go(RecordStartTimestampFormat,*string)
}

#TextParameters: {
	// The timestamp format of the text log files. Possible values are ISO 8601, YYYY-MM-DD HH:MM:SS, M/D/YYYY HH:MM:SS AM/PM, Mon DD, YYYY HH:MM:SS, yyMMdd HH:mm:ss, ddMMyy HH:mm:ss, MMM d hh:mm:ss, dd/MMM/yyyy:HH:mm:ss zzz,and yyyy-MM-ddTHH:mm:ssK.
	// +kubebuilder:validation:Optional
	recordStartTimestampFormat?: null | string @go(RecordStartTimestampFormat,*string)
}

#WindowsEventLogInitParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)

	// Specifies a list of Windows Event Log queries in XPath expression. Please see this document for more information.
	xPathQueries?: [...null | string] @go(XPathQueries,[]*string)
}

#WindowsEventLogObservation: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)

	// Specifies a list of Windows Event Log queries in XPath expression. Please see this document for more information.
	xPathQueries?: [...null | string] @go(XPathQueries,[]*string)
}

#WindowsEventLogParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	// +kubebuilder:validation:Optional
	streams: [...null | string] @go(Streams,[]*string)

	// Specifies a list of Windows Event Log queries in XPath expression. Please see this document for more information.
	// +kubebuilder:validation:Optional
	xPathQueries: [...null | string] @go(XPathQueries,[]*string)
}

#WindowsFirewallLogInitParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#WindowsFirewallLogObservation: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	streams?: [...null | string] @go(Streams,[]*string)
}

#WindowsFirewallLogParameters: {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	// +kubebuilder:validation:Optional
	streams: [...null | string] @go(Streams,[]*string)
}

// MonitorDataCollectionRuleSpec defines the desired state of MonitorDataCollectionRule
#MonitorDataCollectionRuleSpec: {
	forProvider: #MonitorDataCollectionRuleParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MonitorDataCollectionRuleInitParameters @go(InitProvider)
}

// MonitorDataCollectionRuleStatus defines the observed state of MonitorDataCollectionRule.
#MonitorDataCollectionRuleStatus: {
	atProvider?: #MonitorDataCollectionRuleObservation @go(AtProvider)
}

// MonitorDataCollectionRule is the Schema for the MonitorDataCollectionRules API. Manages a Data Collection Rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#MonitorDataCollectionRule: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dataFlow) || (has(self.initProvider) && has(self.initProvider.dataFlow))",message="spec.forProvider.dataFlow is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destinations) || (has(self.initProvider) && has(self.initProvider.destinations))",message="spec.forProvider.destinations is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	spec:    #MonitorDataCollectionRuleSpec   @go(Spec)
	status?: #MonitorDataCollectionRuleStatus @go(Status)
}

// MonitorDataCollectionRuleList contains a list of MonitorDataCollectionRules
#MonitorDataCollectionRuleList: {
	items: [...#MonitorDataCollectionRule] @go(Items,[]MonitorDataCollectionRule)
}
