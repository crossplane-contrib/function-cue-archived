// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/azure/v1beta1

package v1beta1

#SubscriptionInitParameters: {
	// The Azure Billing Scope ID. Can be a Microsoft Customer Account Billing Scope ID, a Microsoft Partner Account Billing Scope ID or an Enrollment Billing Scope ID.
	billingScopeId?: null | string @go(BillingScopeID,*string)

	// The ID of the Subscription. Changing this forces a new Subscription to be created.
	// The GUID of the Subscription.
	subscriptionId?: null | string @go(SubscriptionID,*string)

	// The Name of the Subscription. This is the Display Name in the portal.
	// The Display Name for the Subscription.
	subscriptionName?: null | string @go(SubscriptionName,*string)

	// A mapping of tags to assign to the Subscription.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The workload type of the Subscription. Possible values are Production (default) and DevTest. Changing this forces a new Subscription to be created.
	// The workload type for the Subscription. Possible values are `Production` (default) and `DevTest`.
	workload?: null | string @go(Workload,*string)
}

#SubscriptionObservation: {
	// The Azure Billing Scope ID. Can be a Microsoft Customer Account Billing Scope ID, a Microsoft Partner Account Billing Scope ID or an Enrollment Billing Scope ID.
	billingScopeId?: null | string @go(BillingScopeID,*string)

	// The Resource ID of the Alias.
	id?: null | string @go(ID,*string)

	// The ID of the Subscription. Changing this forces a new Subscription to be created.
	// The GUID of the Subscription.
	subscriptionId?: null | string @go(SubscriptionID,*string)

	// The Name of the Subscription. This is the Display Name in the portal.
	// The Display Name for the Subscription.
	subscriptionName?: null | string @go(SubscriptionName,*string)

	// A mapping of tags to assign to the Subscription.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The ID of the Tenant to which the subscription belongs.
	// The Tenant ID to which the subscription belongs
	tenantId?: null | string @go(TenantID,*string)

	// The workload type of the Subscription. Possible values are Production (default) and DevTest. Changing this forces a new Subscription to be created.
	// The workload type for the Subscription. Possible values are `Production` (default) and `DevTest`.
	workload?: null | string @go(Workload,*string)
}

#SubscriptionParameters: {
	// The Azure Billing Scope ID. Can be a Microsoft Customer Account Billing Scope ID, a Microsoft Partner Account Billing Scope ID or an Enrollment Billing Scope ID.
	// +kubebuilder:validation:Optional
	billingScopeId?: null | string @go(BillingScopeID,*string)

	// The ID of the Subscription. Changing this forces a new Subscription to be created.
	// The GUID of the Subscription.
	// +kubebuilder:validation:Optional
	subscriptionId?: null | string @go(SubscriptionID,*string)

	// The Name of the Subscription. This is the Display Name in the portal.
	// The Display Name for the Subscription.
	// +kubebuilder:validation:Optional
	subscriptionName?: null | string @go(SubscriptionName,*string)

	// A mapping of tags to assign to the Subscription.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The workload type of the Subscription. Possible values are Production (default) and DevTest. Changing this forces a new Subscription to be created.
	// The workload type for the Subscription. Possible values are `Production` (default) and `DevTest`.
	// +kubebuilder:validation:Optional
	workload?: null | string @go(Workload,*string)
}

// SubscriptionSpec defines the desired state of Subscription
#SubscriptionSpec: {
	forProvider: #SubscriptionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SubscriptionInitParameters @go(InitProvider)
}

// SubscriptionStatus defines the observed state of Subscription.
#SubscriptionStatus: {
	atProvider?: #SubscriptionObservation @go(AtProvider)
}

// Subscription is the Schema for the Subscriptions API. Manages a Subscription.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Subscription: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriptionName) || (has(self.initProvider) && has(self.initProvider.subscriptionName))",message="spec.forProvider.subscriptionName is a required parameter"
	spec:    #SubscriptionSpec   @go(Spec)
	status?: #SubscriptionStatus @go(Status)
}

// SubscriptionList contains a list of Subscriptions
#SubscriptionList: {
	items: [...#Subscription] @go(Items,[]Subscription)
}
