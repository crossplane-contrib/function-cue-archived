// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/azure/v1beta1

package v1beta1

#FeatureInitParameters: {
	// Specifies the name of the feature to register.
	name?: null | string @go(Name,*string)

	// Should this feature be Registered or Unregistered?
	registered?: null | bool @go(Registered,*bool)
}

#FeatureObservation: {
	// Specifies the name of the feature to register.
	name?: null | string @go(Name,*string)

	// Should this feature be Registered or Unregistered?
	registered?: null | bool @go(Registered,*bool)
}

#FeatureParameters: {
	// Specifies the name of the feature to register.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Should this feature be Registered or Unregistered?
	// +kubebuilder:validation:Optional
	registered?: null | bool @go(Registered,*bool)
}

#ResourceProviderRegistrationInitParameters: {
	// A list of feature blocks as defined below.
	feature?: [...#FeatureInitParameters] @go(Feature,[]FeatureInitParameters)

	// The namespace of the Resource Provider which should be registered. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)
}

#ResourceProviderRegistrationObservation: {
	// A list of feature blocks as defined below.
	feature?: [...#FeatureObservation] @go(Feature,[]FeatureObservation)
	id?: null | string @go(ID,*string)

	// The namespace of the Resource Provider which should be registered. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)
}

#ResourceProviderRegistrationParameters: {
	// A list of feature blocks as defined below.
	// +kubebuilder:validation:Optional
	feature?: [...#FeatureParameters] @go(Feature,[]FeatureParameters)

	// The namespace of the Resource Provider which should be registered. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

// ResourceProviderRegistrationSpec defines the desired state of ResourceProviderRegistration
#ResourceProviderRegistrationSpec: {
	forProvider: #ResourceProviderRegistrationParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ResourceProviderRegistrationInitParameters @go(InitProvider)
}

// ResourceProviderRegistrationStatus defines the observed state of ResourceProviderRegistration.
#ResourceProviderRegistrationStatus: {
	atProvider?: #ResourceProviderRegistrationObservation @go(AtProvider)
}

// ResourceProviderRegistration is the Schema for the ResourceProviderRegistrations API. Manages the Registration of a Resource Provider.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ResourceProviderRegistration: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #ResourceProviderRegistrationSpec   @go(Spec)
	status?: #ResourceProviderRegistrationStatus @go(Status)
}

// ResourceProviderRegistrationList contains a list of ResourceProviderRegistrations
#ResourceProviderRegistrationList: {
	items: [...#ResourceProviderRegistration] @go(Items,[]ResourceProviderRegistration)
}
