// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/dbforpostgresql/v1beta1

package v1beta1

#FlexibleServerConfigurationInitParameters: {
	// Specifies the name of the PostgreSQL Configuration, which needs to be a valid PostgreSQL configuration name. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// Specifies the value of the PostgreSQL Configuration. See the PostgreSQL documentation for valid values.
	value?: null | string @go(Value,*string)
}

#FlexibleServerConfigurationObservation: {
	// The ID of the PostgreSQL Configuration.
	id?: null | string @go(ID,*string)

	// Specifies the name of the PostgreSQL Configuration, which needs to be a valid PostgreSQL configuration name. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The ID of the PostgreSQL Flexible Server where we want to change configuration. Changing this forces a new PostgreSQL Flexible Server Configuration resource.
	serverId?: null | string @go(ServerID,*string)

	// Specifies the value of the PostgreSQL Configuration. See the PostgreSQL documentation for valid values.
	value?: null | string @go(Value,*string)
}

#FlexibleServerConfigurationParameters: {
	// Specifies the name of the PostgreSQL Configuration, which needs to be a valid PostgreSQL configuration name. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the PostgreSQL Flexible Server where we want to change configuration. Changing this forces a new PostgreSQL Flexible Server Configuration resource.
	// +crossplane:generate:reference:type=FlexibleServer
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	serverId?: null | string @go(ServerID,*string)

	// Specifies the value of the PostgreSQL Configuration. See the PostgreSQL documentation for valid values.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

// FlexibleServerConfigurationSpec defines the desired state of FlexibleServerConfiguration
#FlexibleServerConfigurationSpec: {
	forProvider: #FlexibleServerConfigurationParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FlexibleServerConfigurationInitParameters @go(InitProvider)
}

// FlexibleServerConfigurationStatus defines the observed state of FlexibleServerConfiguration.
#FlexibleServerConfigurationStatus: {
	atProvider?: #FlexibleServerConfigurationObservation @go(AtProvider)
}

// FlexibleServerConfiguration is the Schema for the FlexibleServerConfigurations API. Sets a PostgreSQL Configuration value on a Azure PostgreSQL Flexible Server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#FlexibleServerConfiguration: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	spec:    #FlexibleServerConfigurationSpec   @go(Spec)
	status?: #FlexibleServerConfigurationStatus @go(Status)
}

// FlexibleServerConfigurationList contains a list of FlexibleServerConfigurations
#FlexibleServerConfigurationList: {
	items: [...#FlexibleServerConfiguration] @go(Items,[]FlexibleServerConfiguration)
}
