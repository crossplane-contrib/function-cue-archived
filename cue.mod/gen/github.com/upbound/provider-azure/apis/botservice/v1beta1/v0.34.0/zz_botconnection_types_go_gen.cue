// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/botservice/v1beta1

package v1beta1

#BotConnectionObservation: {
	// The name of the Bot Resource this connection will be associated with. Changing this forces a new resource to be created.
	botName?: null | string @go(BotName,*string)

	// The Client ID that will be used to authenticate with the service provider.
	clientId?: null | string @go(ClientID,*string)

	// The ID of the Bot Connection.
	id?: null | string @go(ID,*string)

	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A map of additional parameters to apply to the connection.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The name of the resource group in which to create the Bot Connection. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The Scopes at which the connection should be applied.
	scopes?: null | string @go(Scopes,*string)

	// The name of the service provider that will be associated with this connection. Changing this forces a new resource to be created.
	serviceProviderName?: null | string @go(ServiceProviderName,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#BotConnectionParameters: {
	// The name of the Bot Resource this connection will be associated with. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/botservice/v1beta1.BotChannelsRegistration
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	botName?: null | string @go(BotName,*string)

	// The Client ID that will be used to authenticate with the service provider.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// A map of additional parameters to apply to the connection.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// The name of the resource group in which to create the Bot Connection. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The Scopes at which the connection should be applied.
	// +kubebuilder:validation:Optional
	scopes?: null | string @go(Scopes,*string)

	// The name of the service provider that will be associated with this connection. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	serviceProviderName?: null | string @go(ServiceProviderName,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// BotConnectionSpec defines the desired state of BotConnection
#BotConnectionSpec: {
	forProvider: #BotConnectionParameters @go(ForProvider)
}

// BotConnectionStatus defines the observed state of BotConnection.
#BotConnectionStatus: {
	atProvider?: #BotConnectionObservation @go(AtProvider)
}

// BotConnection is the Schema for the BotConnections API. Manages a Bot Connection.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#BotConnection: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clientId)",message="clientId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clientSecretSecretRef)",message="clientSecretSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.serviceProviderName)",message="serviceProviderName is a required parameter"
	spec:    #BotConnectionSpec   @go(Spec)
	status?: #BotConnectionStatus @go(Status)
}

// BotConnectionList contains a list of BotConnections
#BotConnectionList: {
	items: [...#BotConnection] @go(Items,[]BotConnection)
}
