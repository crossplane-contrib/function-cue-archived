// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/botservice/v1beta1

package v1beta1

#BotChannelSlackObservation: {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	botName?: null | string @go(BotName,*string)

	// The Client ID that will be used to authenticate with Slack.
	clientId?: null | string @go(ClientID,*string)

	// The ID of the Slack Integration for a Bot Channel.
	id?: null | string @go(ID,*string)

	// The Slack Landing Page URL.
	landingPageUrl?: null | string @go(LandingPageURL,*string)

	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

#BotChannelSlackParameters: {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/botservice/v1beta1.BotChannelsRegistration
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	botName?: null | string @go(BotName,*string)

	// The Client ID that will be used to authenticate with Slack.
	// +kubebuilder:validation:Optional
	clientId?: null | string @go(ClientID,*string)

	// The Slack Landing Page URL.
	// +kubebuilder:validation:Optional
	landingPageUrl?: null | string @go(LandingPageURL,*string)

	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

// BotChannelSlackSpec defines the desired state of BotChannelSlack
#BotChannelSlackSpec: {
	forProvider: #BotChannelSlackParameters @go(ForProvider)
}

// BotChannelSlackStatus defines the observed state of BotChannelSlack.
#BotChannelSlackStatus: {
	atProvider?: #BotChannelSlackObservation @go(AtProvider)
}

// BotChannelSlack is the Schema for the BotChannelSlacks API. Manages a Slack integration for a Bot Channel
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#BotChannelSlack: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clientId)",message="clientId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clientSecretSecretRef)",message="clientSecretSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.verificationTokenSecretRef)",message="verificationTokenSecretRef is a required parameter"
	spec:    #BotChannelSlackSpec   @go(Spec)
	status?: #BotChannelSlackStatus @go(Status)
}

// BotChannelSlackList contains a list of BotChannelSlacks
#BotChannelSlackList: {
	items: [...#BotChannelSlack] @go(Items,[]BotChannelSlack)
}
