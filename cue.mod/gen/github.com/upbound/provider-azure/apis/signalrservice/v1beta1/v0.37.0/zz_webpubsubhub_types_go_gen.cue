// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/signalrservice/v1beta1

package v1beta1

#AuthInitParameters: {
}

#AuthObservation: {
	// Specify the identity ID of the target resource.
	managedIdentityId?: null | string @go(ManagedIdentityID,*string)
}

#AuthParameters: {
	// Specify the identity ID of the target resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/managedidentity/v1beta1.UserAssignedIdentity
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	managedIdentityId?: null | string @go(ManagedIdentityID,*string)
}

#EventHandlerInitParameters: {
	// An auth block as defined below.
	auth?: [...#AuthInitParameters] @go(Auth,[]AuthInitParameters)

	// Specifies the list of system events. Supported values are connect, connected and disconnected.
	systemEvents?: [...null | string] @go(SystemEvents,[]*string)

	// The Event Handler URL Template. Two predefined parameters {hub} and {event} are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: http://example.com/api/{hub}/{event}.
	urlTemplate?: null | string @go(URLTemplate,*string)

	// Specifies the matching event names. There are 3 kind of patterns supported: * * matches any event name * , Combine multiple events with , for example event1,event2, it matches event event1 and event2 * The single event name, for example event1, it matches event1.
	userEventPattern?: null | string @go(UserEventPattern,*string)
}

#EventHandlerObservation: {
	// An auth block as defined below.
	auth?: [...#AuthObservation] @go(Auth,[]AuthObservation)

	// Specifies the list of system events. Supported values are connect, connected and disconnected.
	systemEvents?: [...null | string] @go(SystemEvents,[]*string)

	// The Event Handler URL Template. Two predefined parameters {hub} and {event} are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: http://example.com/api/{hub}/{event}.
	urlTemplate?: null | string @go(URLTemplate,*string)

	// Specifies the matching event names. There are 3 kind of patterns supported: * * matches any event name * , Combine multiple events with , for example event1,event2, it matches event event1 and event2 * The single event name, for example event1, it matches event1.
	userEventPattern?: null | string @go(UserEventPattern,*string)
}

#EventHandlerParameters: {
	// An auth block as defined below.
	// +kubebuilder:validation:Optional
	auth?: [...#AuthParameters] @go(Auth,[]AuthParameters)

	// Specifies the list of system events. Supported values are connect, connected and disconnected.
	// +kubebuilder:validation:Optional
	systemEvents?: [...null | string] @go(SystemEvents,[]*string)

	// The Event Handler URL Template. Two predefined parameters {hub} and {event} are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: http://example.com/api/{hub}/{event}.
	// +kubebuilder:validation:Optional
	urlTemplate?: null | string @go(URLTemplate,*string)

	// Specifies the matching event names. There are 3 kind of patterns supported: * * matches any event name * , Combine multiple events with , for example event1,event2, it matches event event1 and event2 * The single event name, for example event1, it matches event1.
	// +kubebuilder:validation:Optional
	userEventPattern?: null | string @go(UserEventPattern,*string)
}

#EventListenerInitParameters: {
	// Specifies the list of system events. Supported values are connected and disconnected.
	systemEventNameFilter?: [...null | string] @go(SystemEventNameFilter,[]*string)

	// Specifies the list of matching user event names. ["*"] can be used to match all events.
	userEventNameFilter?: [...null | string] @go(UserEventNameFilter,[]*string)
}

#EventListenerObservation: {
	// Specifies the event hub name to receive the events.
	eventhubName?: null | string @go(EventHubName,*string)

	// Specifies the event hub namespace name to receive the events.
	eventhubNamespaceName?: null | string @go(EventHubNamespaceName,*string)

	// Specifies the list of system events. Supported values are connected and disconnected.
	systemEventNameFilter?: [...null | string] @go(SystemEventNameFilter,[]*string)

	// Specifies the list of matching user event names. ["*"] can be used to match all events.
	userEventNameFilter?: [...null | string] @go(UserEventNameFilter,[]*string)
}

#EventListenerParameters: {
	// Specifies the event hub name to receive the events.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.EventHub
	// +kubebuilder:validation:Optional
	eventhubName?: null | string @go(EventHubName,*string)

	// Specifies the event hub namespace name to receive the events.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.EventHubNamespace
	// +kubebuilder:validation:Optional
	eventhubNamespaceName?: null | string @go(EventHubNamespaceName,*string)

	// Specifies the list of system events. Supported values are connected and disconnected.
	// +kubebuilder:validation:Optional
	systemEventNameFilter?: [...null | string] @go(SystemEventNameFilter,[]*string)

	// Specifies the list of matching user event names. ["*"] can be used to match all events.
	// +kubebuilder:validation:Optional
	userEventNameFilter?: [...null | string] @go(UserEventNameFilter,[]*string)
}

#WebPubsubHubInitParameters: {
	// Is anonymous connections are allowed for this hub? Defaults to false.
	// Possible values are true, false.
	anonymousConnectionsEnabled?: null | bool @go(AnonymousConnectionsEnabled,*bool)

	// An event_handler block as defined below.
	eventHandler?: [...#EventHandlerInitParameters] @go(EventHandler,[]EventHandlerInitParameters)

	// An event_listener block as defined below.
	eventListener?: [...#EventListenerInitParameters] @go(EventListener,[]EventListenerInitParameters)

	// The name of the Web Pubsub hub service. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)
}

#WebPubsubHubObservation: {
	// Is anonymous connections are allowed for this hub? Defaults to false.
	// Possible values are true, false.
	anonymousConnectionsEnabled?: null | bool @go(AnonymousConnectionsEnabled,*bool)

	// An event_handler block as defined below.
	eventHandler?: [...#EventHandlerObservation] @go(EventHandler,[]EventHandlerObservation)

	// An event_listener block as defined below.
	eventListener?: [...#EventListenerObservation] @go(EventListener,[]EventListenerObservation)

	// The ID of the Web Pubsub Hub resource.
	id?: null | string @go(ID,*string)

	// The name of the Web Pubsub hub service. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// Specifies the id of the Web Pubsub. Changing this forces a new resource to be created.
	webPubsubId?: null | string @go(WebPubsubID,*string)
}

#WebPubsubHubParameters: {
	// Is anonymous connections are allowed for this hub? Defaults to false.
	// Possible values are true, false.
	// +kubebuilder:validation:Optional
	anonymousConnectionsEnabled?: null | bool @go(AnonymousConnectionsEnabled,*bool)

	// An event_handler block as defined below.
	// +kubebuilder:validation:Optional
	eventHandler?: [...#EventHandlerParameters] @go(EventHandler,[]EventHandlerParameters)

	// An event_listener block as defined below.
	// +kubebuilder:validation:Optional
	eventListener?: [...#EventListenerParameters] @go(EventListener,[]EventListenerParameters)

	// The name of the Web Pubsub hub service. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies the id of the Web Pubsub. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/signalrservice/v1beta1.WebPubsub
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	webPubsubId?: null | string @go(WebPubsubID,*string)
}

// WebPubsubHubSpec defines the desired state of WebPubsubHub
#WebPubsubHubSpec: {
	forProvider: #WebPubsubHubParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #WebPubsubHubInitParameters @go(InitProvider)
}

// WebPubsubHubStatus defines the observed state of WebPubsubHub.
#WebPubsubHubStatus: {
	atProvider?: #WebPubsubHubObservation @go(AtProvider)
}

// WebPubsubHub is the Schema for the WebPubsubHubs API. Manages the hub settings for a Web Pubsub service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#WebPubsubHub: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #WebPubsubHubSpec   @go(Spec)
	status?: #WebPubsubHubStatus @go(Status)
}

// WebPubsubHubList contains a list of WebPubsubHubs
#WebPubsubHubList: {
	items: [...#WebPubsubHub] @go(Items,[]WebPubsubHub)
}
