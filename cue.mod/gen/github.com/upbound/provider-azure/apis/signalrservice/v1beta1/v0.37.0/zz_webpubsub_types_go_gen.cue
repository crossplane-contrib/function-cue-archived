// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/signalrservice/v1beta1

package v1beta1

#WebPubsubIdentityInitParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Web PubSub.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Web PubSub. Possible values are SystemAssigned, UserAssigned.
	type?: null | string @go(Type,*string)
}

#WebPubsubIdentityObservation: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Web PubSub.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The Principal ID associated with this Managed Service Identity.
	principalId?: null | string @go(PrincipalID,*string)

	// The Tenant ID associated with this Managed Service Identity.
	tenantId?: null | string @go(TenantID,*string)

	// Specifies the type of Managed Service Identity that should be configured on this Web PubSub. Possible values are SystemAssigned, UserAssigned.
	type?: null | string @go(Type,*string)
}

#WebPubsubIdentityParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Web PubSub.
	// +kubebuilder:validation:Optional
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Web PubSub. Possible values are SystemAssigned, UserAssigned.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#WebPubsubInitParameters: {
	// Whether to enable AAD auth? Defaults to true.
	aadAuthEnabled?: null | bool @go(AADAuthEnabled,*bool)

	// Specifies the number of units associated with this Web PubSub resource. Valid values are: Free: 1, Standard: 1, 2, 5, 10, 20, 50, 100.
	capacity?: null | float64 @go(Capacity,*float64)

	// An identity block as defined below.
	identity?: [...#WebPubsubIdentityInitParameters] @go(Identity,[]WebPubsubIdentityInitParameters)

	// A live_trace block as defined below.
	liveTrace?: [...#WebPubsubLiveTraceInitParameters] @go(LiveTrace,[]WebPubsubLiveTraceInitParameters)

	// Whether to enable local auth? Defaults to true.
	localAuthEnabled?: null | bool @go(LocalAuthEnabled,*bool)

	// Specifies the supported Azure location where the Web PubSub service exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The name of the Web PubSub service. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// Whether to enable public network access? Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// Specifies which SKU to use. Possible values are Free_F1, Standard_S1, and Premium_P1.
	sku?: null | string @go(Sku,*string)

	// Whether to request client certificate during TLS handshake? Defaults to false.
	tlsClientCertEnabled?: null | bool @go(TLSClientCertEnabled,*bool)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#WebPubsubLiveTraceInitParameters: {
	// Whether the log category ConnectivityLogs is enabled? Defaults to true
	connectivityLogsEnabled?: null | bool @go(ConnectivityLogsEnabled,*bool)

	// Whether the live trace is enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// Whether the log category HttpRequestLogs is enabled? Defaults to true
	httpRequestLogsEnabled?: null | bool @go(HTTPRequestLogsEnabled,*bool)

	// Whether the log category MessagingLogs is enabled? Defaults to true
	messagingLogsEnabled?: null | bool @go(MessagingLogsEnabled,*bool)
}

#WebPubsubLiveTraceObservation: {
	// Whether the log category ConnectivityLogs is enabled? Defaults to true
	connectivityLogsEnabled?: null | bool @go(ConnectivityLogsEnabled,*bool)

	// Whether the live trace is enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// Whether the log category HttpRequestLogs is enabled? Defaults to true
	httpRequestLogsEnabled?: null | bool @go(HTTPRequestLogsEnabled,*bool)

	// Whether the log category MessagingLogs is enabled? Defaults to true
	messagingLogsEnabled?: null | bool @go(MessagingLogsEnabled,*bool)
}

#WebPubsubLiveTraceParameters: {
	// Whether the log category ConnectivityLogs is enabled? Defaults to true
	// +kubebuilder:validation:Optional
	connectivityLogsEnabled?: null | bool @go(ConnectivityLogsEnabled,*bool)

	// Whether the live trace is enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Whether the log category HttpRequestLogs is enabled? Defaults to true
	// +kubebuilder:validation:Optional
	httpRequestLogsEnabled?: null | bool @go(HTTPRequestLogsEnabled,*bool)

	// Whether the log category MessagingLogs is enabled? Defaults to true
	// +kubebuilder:validation:Optional
	messagingLogsEnabled?: null | bool @go(MessagingLogsEnabled,*bool)
}

#WebPubsubObservation: {
	// Whether to enable AAD auth? Defaults to true.
	aadAuthEnabled?: null | bool @go(AADAuthEnabled,*bool)

	// Specifies the number of units associated with this Web PubSub resource. Valid values are: Free: 1, Standard: 1, 2, 5, 10, 20, 50, 100.
	capacity?: null | float64 @go(Capacity,*float64)

	// The publicly accessible IP of the Web PubSub service.
	externalIp?: null | string @go(ExternalIP,*string)

	// The FQDN of the Web PubSub service.
	hostname?: null | string @go(HostName,*string)

	// The ID of the Web PubSub service.
	id?: null | string @go(ID,*string)

	// An identity block as defined below.
	identity?: [...#WebPubsubIdentityObservation] @go(Identity,[]WebPubsubIdentityObservation)

	// A live_trace block as defined below.
	liveTrace?: [...#WebPubsubLiveTraceObservation] @go(LiveTrace,[]WebPubsubLiveTraceObservation)

	// Whether to enable local auth? Defaults to true.
	localAuthEnabled?: null | bool @go(LocalAuthEnabled,*bool)

	// Specifies the supported Azure location where the Web PubSub service exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The name of the Web PubSub service. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// Whether to enable public network access? Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The publicly accessible port of the Web PubSub service which is designed for browser/client use.
	publicPort?: null | float64 @go(PublicPort,*float64)

	// The name of the resource group in which to create the Web PubSub service. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The publicly accessible port of the Web PubSub service which is designed for customer server side use.
	serverPort?: null | float64 @go(ServerPort,*float64)

	// Specifies which SKU to use. Possible values are Free_F1, Standard_S1, and Premium_P1.
	sku?: null | string @go(Sku,*string)

	// Whether to request client certificate during TLS handshake? Defaults to false.
	tlsClientCertEnabled?: null | bool @go(TLSClientCertEnabled,*bool)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	version?: null | string @go(Version,*string)
}

#WebPubsubParameters: {
	// Whether to enable AAD auth? Defaults to true.
	// +kubebuilder:validation:Optional
	aadAuthEnabled?: null | bool @go(AADAuthEnabled,*bool)

	// Specifies the number of units associated with this Web PubSub resource. Valid values are: Free: 1, Standard: 1, 2, 5, 10, 20, 50, 100.
	// +kubebuilder:validation:Optional
	capacity?: null | float64 @go(Capacity,*float64)

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	identity?: [...#WebPubsubIdentityParameters] @go(Identity,[]WebPubsubIdentityParameters)

	// A live_trace block as defined below.
	// +kubebuilder:validation:Optional
	liveTrace?: [...#WebPubsubLiveTraceParameters] @go(LiveTrace,[]WebPubsubLiveTraceParameters)

	// Whether to enable local auth? Defaults to true.
	// +kubebuilder:validation:Optional
	localAuthEnabled?: null | bool @go(LocalAuthEnabled,*bool)

	// Specifies the supported Azure location where the Web PubSub service exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The name of the Web PubSub service. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Whether to enable public network access? Defaults to true.
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The name of the resource group in which to create the Web PubSub service. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// Specifies which SKU to use. Possible values are Free_F1, Standard_S1, and Premium_P1.
	// +kubebuilder:validation:Optional
	sku?: null | string @go(Sku,*string)

	// Whether to request client certificate during TLS handshake? Defaults to false.
	// +kubebuilder:validation:Optional
	tlsClientCertEnabled?: null | bool @go(TLSClientCertEnabled,*bool)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// WebPubsubSpec defines the desired state of WebPubsub
#WebPubsubSpec: {
	forProvider: #WebPubsubParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #WebPubsubInitParameters @go(InitProvider)
}

// WebPubsubStatus defines the observed state of WebPubsub.
#WebPubsubStatus: {
	atProvider?: #WebPubsubObservation @go(AtProvider)
}

// WebPubsub is the Schema for the WebPubsubs API. Manages an Azure Web PubSub service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#WebPubsub: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sku) || (has(self.initProvider) && has(self.initProvider.sku))",message="spec.forProvider.sku is a required parameter"
	spec:    #WebPubsubSpec   @go(Spec)
	status?: #WebPubsubStatus @go(Status)
}

// WebPubsubList contains a list of WebPubsubs
#WebPubsubList: {
	items: [...#WebPubsub] @go(Items,[]WebPubsub)
}
