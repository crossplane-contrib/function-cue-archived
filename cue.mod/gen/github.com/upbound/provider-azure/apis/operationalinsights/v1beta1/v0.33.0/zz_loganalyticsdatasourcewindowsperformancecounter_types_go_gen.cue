// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/operationalinsights/v1beta1

package v1beta1

#LogAnalyticsDataSourceWindowsPerformanceCounterObservation: {
	// The friendly name of the performance counter.
	counterName?: null | string @go(CounterName,*string)

	// The ID of the Log Analytics Windows Performance Counter DataSource.
	id?: null | string @go(ID,*string)

	// The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a * will apply to all instances.
	instanceName?: null | string @go(InstanceName,*string)

	// The time of sample interval in seconds. Supports values between 10 and 2147483647.
	intervalSeconds?: null | float64 @go(IntervalSeconds,*float64)

	// The object name of the Log Analytics Windows Performance Counter DataSource.
	objectName?: null | string @go(ObjectName,*string)

	// The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	workspaceName?: null | string @go(WorkspaceName,*string)
}

#LogAnalyticsDataSourceWindowsPerformanceCounterParameters: {
	// The friendly name of the performance counter.
	// +kubebuilder:validation:Optional
	counterName?: null | string @go(CounterName,*string)

	// The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a * will apply to all instances.
	// +kubebuilder:validation:Optional
	instanceName?: null | string @go(InstanceName,*string)

	// The time of sample interval in seconds. Supports values between 10 and 2147483647.
	// +kubebuilder:validation:Optional
	intervalSeconds?: null | float64 @go(IntervalSeconds,*float64)

	// The object name of the Log Analytics Windows Performance Counter DataSource.
	// +kubebuilder:validation:Optional
	objectName?: null | string @go(ObjectName,*string)

	// The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/operationalinsights/v1beta1.Workspace
	// +kubebuilder:validation:Optional
	workspaceName?: null | string @go(WorkspaceName,*string)
}

// LogAnalyticsDataSourceWindowsPerformanceCounterSpec defines the desired state of LogAnalyticsDataSourceWindowsPerformanceCounter
#LogAnalyticsDataSourceWindowsPerformanceCounterSpec: {
	forProvider: #LogAnalyticsDataSourceWindowsPerformanceCounterParameters @go(ForProvider)
}

// LogAnalyticsDataSourceWindowsPerformanceCounterStatus defines the observed state of LogAnalyticsDataSourceWindowsPerformanceCounter.
#LogAnalyticsDataSourceWindowsPerformanceCounterStatus: {
	atProvider?: #LogAnalyticsDataSourceWindowsPerformanceCounterObservation @go(AtProvider)
}

// LogAnalyticsDataSourceWindowsPerformanceCounter is the Schema for the LogAnalyticsDataSourceWindowsPerformanceCounters API. Manages a Log Analytics (formally Operational Insights) Windows Performance Counter DataSource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LogAnalyticsDataSourceWindowsPerformanceCounter: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.counterName)",message="counterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.instanceName)",message="instanceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.intervalSeconds)",message="intervalSeconds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.objectName)",message="objectName is a required parameter"
	spec:    #LogAnalyticsDataSourceWindowsPerformanceCounterSpec   @go(Spec)
	status?: #LogAnalyticsDataSourceWindowsPerformanceCounterStatus @go(Status)
}

// LogAnalyticsDataSourceWindowsPerformanceCounterList contains a list of LogAnalyticsDataSourceWindowsPerformanceCounters
#LogAnalyticsDataSourceWindowsPerformanceCounterList: {
	items: [...#LogAnalyticsDataSourceWindowsPerformanceCounter] @go(Items,[]LogAnalyticsDataSourceWindowsPerformanceCounter)
}
