// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/operationalinsights/v1beta1

package v1beta1

#LogAnalyticsDataSourceWindowsEventObservation: {
	// Specifies the name of the Windows Event Log to collect events from.
	eventLogName?: null | string @go(EventLogName,*string)

	// Specifies an array of event types applied to the specified event log. Possible values include Error, Warning and Information.
	eventTypes?: [...null | string] @go(EventTypes,[]*string)

	// The ID of the Log Analytics Windows Event DataSource.
	id?: null | string @go(ID,*string)

	// The name of the Resource Group where the Log Analytics Windows Event DataSource should exist. Changing this forces a new Log Analytics Windows Event DataSource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name of the Log Analytics Workspace where the Log Analytics Windows Event DataSource should exist. Changing this forces a new Log Analytics Windows Event DataSource to be created.
	workspaceName?: null | string @go(WorkspaceName,*string)
}

#LogAnalyticsDataSourceWindowsEventParameters: {
	// Specifies the name of the Windows Event Log to collect events from.
	// +kubebuilder:validation:Optional
	eventLogName?: null | string @go(EventLogName,*string)

	// Specifies an array of event types applied to the specified event log. Possible values include Error, Warning and Information.
	// +kubebuilder:validation:Optional
	eventTypes?: [...null | string] @go(EventTypes,[]*string)

	// The name of the Resource Group where the Log Analytics Windows Event DataSource should exist. Changing this forces a new Log Analytics Windows Event DataSource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The name of the Log Analytics Workspace where the Log Analytics Windows Event DataSource should exist. Changing this forces a new Log Analytics Windows Event DataSource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/operationalinsights/v1beta1.Workspace
	// +kubebuilder:validation:Optional
	workspaceName?: null | string @go(WorkspaceName,*string)
}

// LogAnalyticsDataSourceWindowsEventSpec defines the desired state of LogAnalyticsDataSourceWindowsEvent
#LogAnalyticsDataSourceWindowsEventSpec: {
	forProvider: #LogAnalyticsDataSourceWindowsEventParameters @go(ForProvider)
}

// LogAnalyticsDataSourceWindowsEventStatus defines the observed state of LogAnalyticsDataSourceWindowsEvent.
#LogAnalyticsDataSourceWindowsEventStatus: {
	atProvider?: #LogAnalyticsDataSourceWindowsEventObservation @go(AtProvider)
}

// LogAnalyticsDataSourceWindowsEvent is the Schema for the LogAnalyticsDataSourceWindowsEvents API. Manages a Log Analytics Windows Event DataSource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LogAnalyticsDataSourceWindowsEvent: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.eventLogName)",message="eventLogName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.eventTypes)",message="eventTypes is a required parameter"
	spec:    #LogAnalyticsDataSourceWindowsEventSpec   @go(Spec)
	status?: #LogAnalyticsDataSourceWindowsEventStatus @go(Status)
}

// LogAnalyticsDataSourceWindowsEventList contains a list of LogAnalyticsDataSourceWindowsEvents
#LogAnalyticsDataSourceWindowsEventList: {
	items: [...#LogAnalyticsDataSourceWindowsEvent] @go(Items,[]LogAnalyticsDataSourceWindowsEvent)
}
