// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/communication/v1beta1

package v1beta1

#ServiceInitParameters: {
	// The location where the Communication service stores its data at rest. Possible values are Africa, Asia Pacific, Australia, Brazil, Canada, Europe, France, Germany, India, Japan, Korea, Norway, Switzerland, UAE, UK and United States. Defaults to United States. Changing this forces a new Communication Service to be created.
	dataLocation?: null | string @go(DataLocation,*string)

	// A mapping of tags which should be assigned to the Communication Service.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ServiceObservation: {
	// The location where the Communication service stores its data at rest. Possible values are Africa, Asia Pacific, Australia, Brazil, Canada, Europe, France, Germany, India, Japan, Korea, Norway, Switzerland, UAE, UK and United States. Defaults to United States. Changing this forces a new Communication Service to be created.
	dataLocation?: null | string @go(DataLocation,*string)

	// The ID of the Communication Service.
	id?: null | string @go(ID,*string)

	// The primary connection string of the Communication Service.
	primaryConnectionString?: null | string @go(PrimaryConnectionString,*string)

	// The primary key of the Communication Service.
	primaryKey?: null | string @go(PrimaryKey,*string)

	// The name of the Resource Group where the Communication Service should exist. Changing this forces a new Communication Service to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The secondary connection string of the Communication Service.
	secondaryConnectionString?: null | string @go(SecondaryConnectionString,*string)

	// The secondary key of the Communication Service.
	secondaryKey?: null | string @go(SecondaryKey,*string)

	// A mapping of tags which should be assigned to the Communication Service.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ServiceParameters: {
	// The location where the Communication service stores its data at rest. Possible values are Africa, Asia Pacific, Australia, Brazil, Canada, Europe, France, Germany, India, Japan, Korea, Norway, Switzerland, UAE, UK and United States. Defaults to United States. Changing this forces a new Communication Service to be created.
	// +kubebuilder:validation:Optional
	dataLocation?: null | string @go(DataLocation,*string)

	// The name of the Resource Group where the Communication Service should exist. Changing this forces a new Communication Service to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags which should be assigned to the Communication Service.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// ServiceSpec defines the desired state of Service
#ServiceSpec: {
	forProvider: #ServiceParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ServiceInitParameters @go(InitProvider)
}

// ServiceStatus defines the observed state of Service.
#ServiceStatus: {
	atProvider?: #ServiceObservation @go(AtProvider)
}

// Service is the Schema for the Services API. Manages a Communication Service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Service: {
	spec:    #ServiceSpec   @go(Spec)
	status?: #ServiceStatus @go(Status)
}

// ServiceList contains a list of Services
#ServiceList: {
	items: [...#Service] @go(Items,[]Service)
}
