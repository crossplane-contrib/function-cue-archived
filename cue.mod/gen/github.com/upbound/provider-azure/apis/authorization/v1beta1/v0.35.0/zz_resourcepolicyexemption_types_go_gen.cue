// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/authorization/v1beta1

package v1beta1

#ResourcePolicyExemptionInitParameters: {
	// A description to use for this Policy Exemption.
	description?: null | string @go(Description,*string)

	// A friendly display name to use for this Policy Exemption.
	displayName?: null | string @go(DisplayName,*string)

	// The category of this policy exemption. Possible values are Waiver and Mitigated.
	exemptionCategory?: null | string @go(ExemptionCategory,*string)

	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	expiresOn?: null | string @go(ExpiresOn,*string)

	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	metadata?: null | string @go(Metadata,*string)

	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	policyDefinitionReferenceIds?: [...null | string] @go(PolicyDefinitionReferenceIds,[]*string)
}

#ResourcePolicyExemptionObservation: {
	// A description to use for this Policy Exemption.
	description?: null | string @go(Description,*string)

	// A friendly display name to use for this Policy Exemption.
	displayName?: null | string @go(DisplayName,*string)

	// The category of this policy exemption. Possible values are Waiver and Mitigated.
	exemptionCategory?: null | string @go(ExemptionCategory,*string)

	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	expiresOn?: null | string @go(ExpiresOn,*string)

	// The Policy Exemption id.
	id?: null | string @go(ID,*string)

	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	metadata?: null | string @go(Metadata,*string)

	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	policyAssignmentId?: null | string @go(PolicyAssignmentID,*string)

	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	policyDefinitionReferenceIds?: [...null | string] @go(PolicyDefinitionReferenceIds,[]*string)

	// The Resource ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	resourceId?: null | string @go(ResourceID,*string)
}

#ResourcePolicyExemptionParameters: {
	// A description to use for this Policy Exemption.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A friendly display name to use for this Policy Exemption.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// The category of this policy exemption. Possible values are Waiver and Mitigated.
	// +kubebuilder:validation:Optional
	exemptionCategory?: null | string @go(ExemptionCategory,*string)

	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	// +kubebuilder:validation:Optional
	expiresOn?: null | string @go(ExpiresOn,*string)

	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	// +kubebuilder:validation:Optional
	metadata?: null | string @go(Metadata,*string)

	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/authorization/v1beta1.ResourcePolicyAssignment
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	policyAssignmentId?: null | string @go(PolicyAssignmentID,*string)

	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	// +kubebuilder:validation:Optional
	policyDefinitionReferenceIds?: [...null | string] @go(PolicyDefinitionReferenceIds,[]*string)

	// The Resource ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/authorization/v1beta1.ResourcePolicyAssignment
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("resource_id",false)
	// +kubebuilder:validation:Optional
	resourceId?: null | string @go(ResourceID,*string)
}

// ResourcePolicyExemptionSpec defines the desired state of ResourcePolicyExemption
#ResourcePolicyExemptionSpec: {
	forProvider: #ResourcePolicyExemptionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ResourcePolicyExemptionInitParameters @go(InitProvider)
}

// ResourcePolicyExemptionStatus defines the observed state of ResourcePolicyExemption.
#ResourcePolicyExemptionStatus: {
	atProvider?: #ResourcePolicyExemptionObservation @go(AtProvider)
}

// ResourcePolicyExemption is the Schema for the ResourcePolicyExemptions API. Manages a Resource Policy Exemption.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ResourcePolicyExemption: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.exemptionCategory) || has(self.initProvider.exemptionCategory)",message="exemptionCategory is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	spec:    #ResourcePolicyExemptionSpec   @go(Spec)
	status?: #ResourcePolicyExemptionStatus @go(Status)
}

// ResourcePolicyExemptionList contains a list of ResourcePolicyExemptions
#ResourcePolicyExemptionList: {
	items: [...#ResourcePolicyExemption] @go(Items,[]ResourcePolicyExemption)
}
