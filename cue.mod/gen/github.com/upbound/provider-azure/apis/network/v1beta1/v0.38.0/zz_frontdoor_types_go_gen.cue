// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#BackendInitParameters: {
	// Location of the backend (IP address or FQDN)
	address?: null | string @go(Address,*string)

	// Enable or Disable use of this Backend Routing Rule. Permitted values are true or false. Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// The HTTP TCP port number. Possible values are between 1 - 65535.
	httpPort?: null | float64 @go(HTTPPort,*float64)

	// The HTTPS TCP port number. Possible values are between 1 - 65535.
	httpsPort?: null | float64 @go(HTTPSPort,*float64)

	// The value to use as the host header sent to the backend.
	hostHeader?: null | string @go(HostHeader,*string)

	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to 1.
	priority?: null | float64 @go(Priority,*float64)

	// Weight of this endpoint for load balancing purposes. Defaults to 50.
	weight?: null | float64 @go(Weight,*float64)
}

#BackendObservation: {
	// Location of the backend (IP address or FQDN)
	address?: null | string @go(Address,*string)

	// Enable or Disable use of this Backend Routing Rule. Permitted values are true or false. Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// The HTTP TCP port number. Possible values are between 1 - 65535.
	httpPort?: null | float64 @go(HTTPPort,*float64)

	// The HTTPS TCP port number. Possible values are between 1 - 65535.
	httpsPort?: null | float64 @go(HTTPSPort,*float64)

	// The value to use as the host header sent to the backend.
	hostHeader?: null | string @go(HostHeader,*string)

	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to 1.
	priority?: null | float64 @go(Priority,*float64)

	// Weight of this endpoint for load balancing purposes. Defaults to 50.
	weight?: null | float64 @go(Weight,*float64)
}

#BackendParameters: {
	// Location of the backend (IP address or FQDN)
	// +kubebuilder:validation:Optional
	address?: null | string @go(Address,*string)

	// Enable or Disable use of this Backend Routing Rule. Permitted values are true or false. Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// The HTTP TCP port number. Possible values are between 1 - 65535.
	// +kubebuilder:validation:Optional
	httpPort?: null | float64 @go(HTTPPort,*float64)

	// The HTTPS TCP port number. Possible values are between 1 - 65535.
	// +kubebuilder:validation:Optional
	httpsPort?: null | float64 @go(HTTPSPort,*float64)

	// The value to use as the host header sent to the backend.
	// +kubebuilder:validation:Optional
	hostHeader?: null | string @go(HostHeader,*string)

	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to 1.
	// +kubebuilder:validation:Optional
	priority?: null | float64 @go(Priority,*float64)

	// Weight of this endpoint for load balancing purposes. Defaults to 50.
	// +kubebuilder:validation:Optional
	weight?: null | float64 @go(Weight,*float64)
}

#BackendPoolHealthProbeInitParameters: {
	// Is this health probe enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// The number of seconds between each Health Probe. Defaults to 120.
	intervalInSeconds?: null | float64 @go(IntervalInSeconds,*float64)

	// Specifies the name of the Health Probe.
	name?: null | string @go(Name,*string)

	// The path to use for the Health Probe. Default is /.
	path?: null | string @go(Path,*string)

	// Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: Get and Head. Defaults to GET.
	probeMethod?: null | string @go(ProbeMethod,*string)

	// Protocol scheme to use for the Health Probe. Possible values are Http and Https. Defaults to Http.
	protocol?: null | string @go(Protocol,*string)
}

#BackendPoolHealthProbeObservation: {
	// Is this health probe enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// The ID of the Azure Front Door Backend.
	id?: null | string @go(ID,*string)

	// The number of seconds between each Health Probe. Defaults to 120.
	intervalInSeconds?: null | float64 @go(IntervalInSeconds,*float64)

	// Specifies the name of the Health Probe.
	name?: null | string @go(Name,*string)

	// The path to use for the Health Probe. Default is /.
	path?: null | string @go(Path,*string)

	// Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: Get and Head. Defaults to GET.
	probeMethod?: null | string @go(ProbeMethod,*string)

	// Protocol scheme to use for the Health Probe. Possible values are Http and Https. Defaults to Http.
	protocol?: null | string @go(Protocol,*string)
}

#BackendPoolHealthProbeParameters: {
	// Is this health probe enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// The number of seconds between each Health Probe. Defaults to 120.
	// +kubebuilder:validation:Optional
	intervalInSeconds?: null | float64 @go(IntervalInSeconds,*float64)

	// Specifies the name of the Health Probe.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The path to use for the Health Probe. Default is /.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: Get and Head. Defaults to GET.
	// +kubebuilder:validation:Optional
	probeMethod?: null | string @go(ProbeMethod,*string)

	// Protocol scheme to use for the Health Probe. Possible values are Http and Https. Defaults to Http.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)
}

#BackendPoolInitParameters: {
	// A backend block as defined below.
	backend?: [...#BackendInitParameters] @go(Backend,[]BackendInitParameters)

	// Specifies the name of the backend_pool_health_probe block within this resource to use for this Backend Pool.
	healthProbeName?: null | string @go(HealthProbeName,*string)

	// Specifies the name of the backend_pool_load_balancing block within this resource to use for this Backend Pool.
	loadBalancingName?: null | string @go(LoadBalancingName,*string)

	// Specifies the name of the Backend Pool.
	name?: null | string @go(Name,*string)
}

#BackendPoolLoadBalancingInitParameters: {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to 0.
	additionalLatencyMilliseconds?: null | float64 @go(AdditionalLatencyMilliseconds,*float64)

	// Specifies the name of the Load Balancer.
	name?: null | string @go(Name,*string)

	// The number of samples to consider for load balancing decisions. Defaults to 4.
	sampleSize?: null | float64 @go(SampleSize,*float64)

	// The number of samples within the sample period that must succeed. Defaults to 2.
	successfulSamplesRequired?: null | float64 @go(SuccessfulSamplesRequired,*float64)
}

#BackendPoolLoadBalancingObservation: {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to 0.
	additionalLatencyMilliseconds?: null | float64 @go(AdditionalLatencyMilliseconds,*float64)

	// The ID of the Azure Front Door Backend.
	id?: null | string @go(ID,*string)

	// Specifies the name of the Load Balancer.
	name?: null | string @go(Name,*string)

	// The number of samples to consider for load balancing decisions. Defaults to 4.
	sampleSize?: null | float64 @go(SampleSize,*float64)

	// The number of samples within the sample period that must succeed. Defaults to 2.
	successfulSamplesRequired?: null | float64 @go(SuccessfulSamplesRequired,*float64)
}

#BackendPoolLoadBalancingParameters: {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to 0.
	// +kubebuilder:validation:Optional
	additionalLatencyMilliseconds?: null | float64 @go(AdditionalLatencyMilliseconds,*float64)

	// Specifies the name of the Load Balancer.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The number of samples to consider for load balancing decisions. Defaults to 4.
	// +kubebuilder:validation:Optional
	sampleSize?: null | float64 @go(SampleSize,*float64)

	// The number of samples within the sample period that must succeed. Defaults to 2.
	// +kubebuilder:validation:Optional
	successfulSamplesRequired?: null | float64 @go(SuccessfulSamplesRequired,*float64)
}

#BackendPoolObservation: {
	// A backend block as defined below.
	backend?: [...#BackendObservation] @go(Backend,[]BackendObservation)

	// Specifies the name of the backend_pool_health_probe block within this resource to use for this Backend Pool.
	healthProbeName?: null | string @go(HealthProbeName,*string)

	// The ID of the Azure Front Door Backend.
	id?: null | string @go(ID,*string)

	// Specifies the name of the backend_pool_load_balancing block within this resource to use for this Backend Pool.
	loadBalancingName?: null | string @go(LoadBalancingName,*string)

	// Specifies the name of the Backend Pool.
	name?: null | string @go(Name,*string)
}

#BackendPoolParameters: {
	// A backend block as defined below.
	// +kubebuilder:validation:Optional
	backend: [...#BackendParameters] @go(Backend,[]BackendParameters)

	// Specifies the name of the backend_pool_health_probe block within this resource to use for this Backend Pool.
	// +kubebuilder:validation:Optional
	healthProbeName?: null | string @go(HealthProbeName,*string)

	// Specifies the name of the backend_pool_load_balancing block within this resource to use for this Backend Pool.
	// +kubebuilder:validation:Optional
	loadBalancingName?: null | string @go(LoadBalancingName,*string)

	// Specifies the name of the Backend Pool.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#BackendPoolSettingsInitParameters: {
	// Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between 0 - 240. Defaults to 60.
	backendPoolsSendReceiveTimeoutSeconds?: null | float64 @go(BackendPoolsSendReceiveTimeoutSeconds,*float64)

	// Enforce certificate name check on HTTPS requests to all backend pools, this setting will have no effect on HTTP requests. Permitted values are true or false.
	enforceBackendPoolsCertificateNameCheck?: null | bool @go(EnforceBackendPoolsCertificateNameCheck,*bool)
}

#BackendPoolSettingsObservation: {
	// Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between 0 - 240. Defaults to 60.
	backendPoolsSendReceiveTimeoutSeconds?: null | float64 @go(BackendPoolsSendReceiveTimeoutSeconds,*float64)

	// Enforce certificate name check on HTTPS requests to all backend pools, this setting will have no effect on HTTP requests. Permitted values are true or false.
	enforceBackendPoolsCertificateNameCheck?: null | bool @go(EnforceBackendPoolsCertificateNameCheck,*bool)
}

#BackendPoolSettingsParameters: {
	// Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between 0 - 240. Defaults to 60.
	// +kubebuilder:validation:Optional
	backendPoolsSendReceiveTimeoutSeconds?: null | float64 @go(BackendPoolsSendReceiveTimeoutSeconds,*float64)

	// Enforce certificate name check on HTTPS requests to all backend pools, this setting will have no effect on HTTP requests. Permitted values are true or false.
	// +kubebuilder:validation:Optional
	enforceBackendPoolsCertificateNameCheck?: null | bool @go(EnforceBackendPoolsCertificateNameCheck,*bool)
}

#ExplicitResourceOrderInitParameters: {
}

#ExplicitResourceOrderObservation: {
	backendPoolHealthProbeIds?: [...null | string] @go(BackendPoolHealthProbeIds,[]*string)
	backendPoolIds?: [...null | string] @go(BackendPoolIds,[]*string)
	backendPoolLoadBalancingIds?: [...null | string] @go(BackendPoolLoadBalancingIds,[]*string)
	frontendEndpointIds?: [...null | string] @go(FrontendEndpointIds,[]*string)
	routingRuleIds?: [...null | string] @go(RoutingRuleIds,[]*string)
}

#ExplicitResourceOrderParameters: {
}

#ForwardingConfigurationInitParameters: {
	// Specifies the name of the Backend Pool to forward the incoming traffic to.
	backendPoolName?: null | string @go(BackendPoolName,*string)

	// Specify the minimum caching duration (in ISO8601 notation e.g. P1DT2H for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. cache_duration works only in combination with cache_enabled set to true.
	cacheDuration?: null | string @go(CacheDuration,*string)

	// Specifies whether to Enable caching or not. Valid options are true or false. Defaults to false.
	cacheEnabled?: null | bool @go(CacheEnabled,*bool)

	// Defines cache behaviour in relation to query string parameters. Valid options are StripAll, StripAllExcept, StripOnly or StripNone. Defaults to StripAll.
	cacheQueryParameterStripDirective?: null | string @go(CacheQueryParameterStripDirective,*string)

	// Specify query parameters (array). Works only in combination with cache_query_parameter_strip_directive set to StripAllExcept or StripOnly.
	cacheQueryParameters?: [...null | string] @go(CacheQueryParameters,[]*string)

	// Whether to use dynamic compression when caching. Valid options are true or false. Defaults to false.
	cacheUseDynamicCompression?: null | bool @go(CacheUseDynamicCompression,*bool)

	// Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.
	customForwardingPath?: null | string @go(CustomForwardingPath,*string)

	// Protocol to use when redirecting. Valid options are HttpOnly, HttpsOnly, or MatchRequest. Defaults to HttpsOnly.
	forwardingProtocol?: null | string @go(ForwardingProtocol,*string)
}

#ForwardingConfigurationObservation: {
	// Specifies the name of the Backend Pool to forward the incoming traffic to.
	backendPoolName?: null | string @go(BackendPoolName,*string)

	// Specify the minimum caching duration (in ISO8601 notation e.g. P1DT2H for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. cache_duration works only in combination with cache_enabled set to true.
	cacheDuration?: null | string @go(CacheDuration,*string)

	// Specifies whether to Enable caching or not. Valid options are true or false. Defaults to false.
	cacheEnabled?: null | bool @go(CacheEnabled,*bool)

	// Defines cache behaviour in relation to query string parameters. Valid options are StripAll, StripAllExcept, StripOnly or StripNone. Defaults to StripAll.
	cacheQueryParameterStripDirective?: null | string @go(CacheQueryParameterStripDirective,*string)

	// Specify query parameters (array). Works only in combination with cache_query_parameter_strip_directive set to StripAllExcept or StripOnly.
	cacheQueryParameters?: [...null | string] @go(CacheQueryParameters,[]*string)

	// Whether to use dynamic compression when caching. Valid options are true or false. Defaults to false.
	cacheUseDynamicCompression?: null | bool @go(CacheUseDynamicCompression,*bool)

	// Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.
	customForwardingPath?: null | string @go(CustomForwardingPath,*string)

	// Protocol to use when redirecting. Valid options are HttpOnly, HttpsOnly, or MatchRequest. Defaults to HttpsOnly.
	forwardingProtocol?: null | string @go(ForwardingProtocol,*string)
}

#ForwardingConfigurationParameters: {
	// Specifies the name of the Backend Pool to forward the incoming traffic to.
	// +kubebuilder:validation:Optional
	backendPoolName?: null | string @go(BackendPoolName,*string)

	// Specify the minimum caching duration (in ISO8601 notation e.g. P1DT2H for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. cache_duration works only in combination with cache_enabled set to true.
	// +kubebuilder:validation:Optional
	cacheDuration?: null | string @go(CacheDuration,*string)

	// Specifies whether to Enable caching or not. Valid options are true or false. Defaults to false.
	// +kubebuilder:validation:Optional
	cacheEnabled?: null | bool @go(CacheEnabled,*bool)

	// Defines cache behaviour in relation to query string parameters. Valid options are StripAll, StripAllExcept, StripOnly or StripNone. Defaults to StripAll.
	// +kubebuilder:validation:Optional
	cacheQueryParameterStripDirective?: null | string @go(CacheQueryParameterStripDirective,*string)

	// Specify query parameters (array). Works only in combination with cache_query_parameter_strip_directive set to StripAllExcept or StripOnly.
	// +kubebuilder:validation:Optional
	cacheQueryParameters?: [...null | string] @go(CacheQueryParameters,[]*string)

	// Whether to use dynamic compression when caching. Valid options are true or false. Defaults to false.
	// +kubebuilder:validation:Optional
	cacheUseDynamicCompression?: null | bool @go(CacheUseDynamicCompression,*bool)

	// Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.
	// +kubebuilder:validation:Optional
	customForwardingPath?: null | string @go(CustomForwardingPath,*string)

	// Protocol to use when redirecting. Valid options are HttpOnly, HttpsOnly, or MatchRequest. Defaults to HttpsOnly.
	// +kubebuilder:validation:Optional
	forwardingProtocol?: null | string @go(ForwardingProtocol,*string)
}

#FrontDoorInitParameters: {
	// A backend_pool block as defined below.
	backendPool?: [...#BackendPoolInitParameters] @go(BackendPool,[]BackendPoolInitParameters)

	// A backend_pool_health_probe block as defined below.
	backendPoolHealthProbe?: [...#BackendPoolHealthProbeInitParameters] @go(BackendPoolHealthProbe,[]BackendPoolHealthProbeInitParameters)

	// A backend_pool_load_balancing block as defined below.
	backendPoolLoadBalancing?: [...#BackendPoolLoadBalancingInitParameters] @go(BackendPoolLoadBalancing,[]BackendPoolLoadBalancingInitParameters)

	// A backend_pool_settings block as defined below.
	backendPoolSettings?: [...#BackendPoolSettingsInitParameters] @go(BackendPoolSettings,[]BackendPoolSettingsInitParameters)

	// A friendly name for the Front Door service.
	friendlyName?: null | string @go(FriendlyName,*string)

	// A frontend_endpoint block as defined below.
	frontendEndpoint?: [...#FrontendEndpointInitParameters] @go(FrontendEndpoint,[]FrontendEndpointInitParameters)

	// Should the Front Door Load Balancer be Enabled? Defaults to true.
	loadBalancerEnabled?: null | bool @go(LoadBalancerEnabled,*bool)

	// A routing_rule block as defined below.
	routingRule?: [...#RoutingRuleInitParameters] @go(RoutingRule,[]RoutingRuleInitParameters)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#FrontDoorObservation: {
	// A backend_pool block as defined below.
	backendPool?: [...#BackendPoolObservation] @go(BackendPool,[]BackendPoolObservation)

	// A backend_pool_health_probe block as defined below.
	backendPoolHealthProbe?: [...#BackendPoolHealthProbeObservation] @go(BackendPoolHealthProbe,[]BackendPoolHealthProbeObservation)

	// A map/dictionary of Backend Pool Health Probe Names (key) to the Backend Pool Health Probe ID (value)
	backendPoolHealthProbes?: {[string]: null | string} @go(BackendPoolHealthProbes,map[string]*string)

	// A backend_pool_load_balancing block as defined below.
	backendPoolLoadBalancing?: [...#BackendPoolLoadBalancingObservation] @go(BackendPoolLoadBalancing,[]BackendPoolLoadBalancingObservation)

	// A map/dictionary of Backend Pool Load Balancing Setting Names (key) to the Backend Pool Load Balancing Setting ID (value)
	backendPoolLoadBalancingSettings?: {[string]: null | string} @go(BackendPoolLoadBalancingSettings,map[string]*string)

	// A backend_pool_settings block as defined below.
	backendPoolSettings?: [...#BackendPoolSettingsObservation] @go(BackendPoolSettings,[]BackendPoolSettingsObservation)

	// A map/dictionary of Backend Pool Names (key) to the Backend Pool ID (value)
	backendPools?: {[string]: null | string} @go(BackendPools,map[string]*string)

	// The host that each frontendEndpoint must CNAME to.
	cname?: null | string @go(CNAME,*string)
	explicitResourceOrder?: [...#ExplicitResourceOrderObservation] @go(ExplicitResourceOrder,[]ExplicitResourceOrderObservation)

	// A friendly name for the Front Door service.
	friendlyName?: null | string @go(FriendlyName,*string)

	// A frontend_endpoint block as defined below.
	frontendEndpoint?: [...#FrontendEndpointObservation] @go(FrontendEndpoint,[]FrontendEndpointObservation)

	// A map/dictionary of Frontend Endpoint Names (key) to the Frontend Endpoint ID (value)
	frontendEndpoints?: {[string]: null | string} @go(FrontendEndpoints,map[string]*string)

	// The unique ID of the Front Door which is embedded into the incoming headers X-Azure-FDID attribute and maybe used to filter traffic sent by the Front Door to your backend.
	headerFrontdoorId?: null | string @go(HeaderFrontdoorID,*string)

	// The ID of the Azure Front Door Backend.
	id?: null | string @go(ID,*string)

	// Should the Front Door Load Balancer be Enabled? Defaults to true.
	loadBalancerEnabled?: null | bool @go(LoadBalancerEnabled,*bool)

	// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A routing_rule block as defined below.
	routingRule?: [...#RoutingRuleObservation] @go(RoutingRule,[]RoutingRuleObservation)

	// A map/dictionary of Routing Rule Names (key) to the Routing Rule ID (value)
	routingRules?: {[string]: null | string} @go(RoutingRules,map[string]*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#FrontDoorParameters: {
	// A backend_pool block as defined below.
	// +kubebuilder:validation:Optional
	backendPool?: [...#BackendPoolParameters] @go(BackendPool,[]BackendPoolParameters)

	// A backend_pool_health_probe block as defined below.
	// +kubebuilder:validation:Optional
	backendPoolHealthProbe?: [...#BackendPoolHealthProbeParameters] @go(BackendPoolHealthProbe,[]BackendPoolHealthProbeParameters)

	// A backend_pool_load_balancing block as defined below.
	// +kubebuilder:validation:Optional
	backendPoolLoadBalancing?: [...#BackendPoolLoadBalancingParameters] @go(BackendPoolLoadBalancing,[]BackendPoolLoadBalancingParameters)

	// A backend_pool_settings block as defined below.
	// +kubebuilder:validation:Optional
	backendPoolSettings?: [...#BackendPoolSettingsParameters] @go(BackendPoolSettings,[]BackendPoolSettingsParameters)

	// A friendly name for the Front Door service.
	// +kubebuilder:validation:Optional
	friendlyName?: null | string @go(FriendlyName,*string)

	// A frontend_endpoint block as defined below.
	// +kubebuilder:validation:Optional
	frontendEndpoint?: [...#FrontendEndpointParameters] @go(FrontendEndpoint,[]FrontendEndpointParameters)

	// Should the Front Door Load Balancer be Enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	loadBalancerEnabled?: null | bool @go(LoadBalancerEnabled,*bool)

	// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A routing_rule block as defined below.
	// +kubebuilder:validation:Optional
	routingRule?: [...#RoutingRuleParameters] @go(RoutingRule,[]RoutingRuleParameters)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#FrontendEndpointInitParameters: {
	// Specifies the host name of the frontend_endpoint. Must be a domain name. In order to use a name.azurefd.net domain, the name value must match the Front Door name.
	hostName?: null | string @go(HostName,*string)

	// Specifies the name of the frontend_endpoint.
	name?: null | string @go(Name,*string)

	// Whether to allow session affinity on this host. Valid options are true or false Defaults to false.
	sessionAffinityEnabled?: null | bool @go(SessionAffinityEnabled,*bool)

	// The TTL to use in seconds for session affinity, if applicable. Defaults to 0.
	sessionAffinityTtlSeconds?: null | float64 @go(SessionAffinityTTLSeconds,*float64)

	// Defines the Web Application Firewall policy ID for each host.
	webApplicationFirewallPolicyLinkId?: null | string @go(WebApplicationFirewallPolicyLinkID,*string)
}

#FrontendEndpointObservation: {
	// Specifies the host name of the frontend_endpoint. Must be a domain name. In order to use a name.azurefd.net domain, the name value must match the Front Door name.
	hostName?: null | string @go(HostName,*string)

	// The ID of the Azure Front Door Backend.
	id?: null | string @go(ID,*string)

	// Specifies the name of the frontend_endpoint.
	name?: null | string @go(Name,*string)

	// Whether to allow session affinity on this host. Valid options are true or false Defaults to false.
	sessionAffinityEnabled?: null | bool @go(SessionAffinityEnabled,*bool)

	// The TTL to use in seconds for session affinity, if applicable. Defaults to 0.
	sessionAffinityTtlSeconds?: null | float64 @go(SessionAffinityTTLSeconds,*float64)

	// Defines the Web Application Firewall policy ID for each host.
	webApplicationFirewallPolicyLinkId?: null | string @go(WebApplicationFirewallPolicyLinkID,*string)
}

#FrontendEndpointParameters: {
	// Specifies the host name of the frontend_endpoint. Must be a domain name. In order to use a name.azurefd.net domain, the name value must match the Front Door name.
	// +kubebuilder:validation:Optional
	hostName?: null | string @go(HostName,*string)

	// Specifies the name of the frontend_endpoint.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Whether to allow session affinity on this host. Valid options are true or false Defaults to false.
	// +kubebuilder:validation:Optional
	sessionAffinityEnabled?: null | bool @go(SessionAffinityEnabled,*bool)

	// The TTL to use in seconds for session affinity, if applicable. Defaults to 0.
	// +kubebuilder:validation:Optional
	sessionAffinityTtlSeconds?: null | float64 @go(SessionAffinityTTLSeconds,*float64)

	// Defines the Web Application Firewall policy ID for each host.
	// +kubebuilder:validation:Optional
	webApplicationFirewallPolicyLinkId?: null | string @go(WebApplicationFirewallPolicyLinkID,*string)
}

#RoutingRuleInitParameters: {
	// Protocol schemes to match for the Backend Routing Rule. Possible values are Http and Https.
	acceptedProtocols?: [...null | string] @go(AcceptedProtocols,[]*string)

	// Enable or Disable use of this Backend Routing Rule. Permitted values are true or false. Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// A forwarding_configuration block as defined below.
	forwardingConfiguration?: [...#ForwardingConfigurationInitParameters] @go(ForwardingConfiguration,[]ForwardingConfigurationInitParameters)

	// The names of the frontend_endpoint blocks within this resource to associate with this routing_rule.
	frontendEndpoints?: [...null | string] @go(FrontendEndpoints,[]*string)

	// Specifies the name of the Routing Rule.
	name?: null | string @go(Name,*string)

	// The route patterns for the Backend Routing Rule.
	patternsToMatch?: [...null | string] @go(PatternsToMatch,[]*string)

	// A redirect_configuration block as defined below.
	redirectConfiguration?: [...#RoutingRuleRedirectConfigurationInitParameters] @go(RedirectConfiguration,[]RoutingRuleRedirectConfigurationInitParameters)
}

#RoutingRuleObservation: {
	// Protocol schemes to match for the Backend Routing Rule. Possible values are Http and Https.
	acceptedProtocols?: [...null | string] @go(AcceptedProtocols,[]*string)

	// Enable or Disable use of this Backend Routing Rule. Permitted values are true or false. Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// A forwarding_configuration block as defined below.
	forwardingConfiguration?: [...#ForwardingConfigurationObservation] @go(ForwardingConfiguration,[]ForwardingConfigurationObservation)

	// The names of the frontend_endpoint blocks within this resource to associate with this routing_rule.
	frontendEndpoints?: [...null | string] @go(FrontendEndpoints,[]*string)

	// The ID of the Azure Front Door Backend.
	id?: null | string @go(ID,*string)

	// Specifies the name of the Routing Rule.
	name?: null | string @go(Name,*string)

	// The route patterns for the Backend Routing Rule.
	patternsToMatch?: [...null | string] @go(PatternsToMatch,[]*string)

	// A redirect_configuration block as defined below.
	redirectConfiguration?: [...#RoutingRuleRedirectConfigurationObservation] @go(RedirectConfiguration,[]RoutingRuleRedirectConfigurationObservation)
}

#RoutingRuleParameters: {
	// Protocol schemes to match for the Backend Routing Rule. Possible values are Http and Https.
	// +kubebuilder:validation:Optional
	acceptedProtocols: [...null | string] @go(AcceptedProtocols,[]*string)

	// Enable or Disable use of this Backend Routing Rule. Permitted values are true or false. Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// A forwarding_configuration block as defined below.
	// +kubebuilder:validation:Optional
	forwardingConfiguration?: [...#ForwardingConfigurationParameters] @go(ForwardingConfiguration,[]ForwardingConfigurationParameters)

	// The names of the frontend_endpoint blocks within this resource to associate with this routing_rule.
	// +kubebuilder:validation:Optional
	frontendEndpoints: [...null | string] @go(FrontendEndpoints,[]*string)

	// Specifies the name of the Routing Rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The route patterns for the Backend Routing Rule.
	// +kubebuilder:validation:Optional
	patternsToMatch: [...null | string] @go(PatternsToMatch,[]*string)

	// A redirect_configuration block as defined below.
	// +kubebuilder:validation:Optional
	redirectConfiguration?: [...#RoutingRuleRedirectConfigurationParameters] @go(RedirectConfiguration,[]RoutingRuleRedirectConfigurationParameters)
}

#RoutingRuleRedirectConfigurationInitParameters: {
	// The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
	customFragment?: null | string @go(CustomFragment,*string)

	// Set this to change the URL for the redirection.
	customHost?: null | string @go(CustomHost,*string)

	// The path to retain as per the incoming request, or update in the URL for the redirection.
	customPath?: null | string @go(CustomPath,*string)

	// Replace any existing query string from the incoming request URL.
	customQueryString?: null | string @go(CustomQueryString,*string)

	// Protocol to use when redirecting. Valid options are HttpOnly, HttpsOnly, or MatchRequest.
	redirectProtocol?: null | string @go(RedirectProtocol,*string)

	// Status code for the redirect. Valida options are Moved, Found, TemporaryRedirect, PermanentRedirect.
	redirectType?: null | string @go(RedirectType,*string)
}

#RoutingRuleRedirectConfigurationObservation: {
	// The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
	customFragment?: null | string @go(CustomFragment,*string)

	// Set this to change the URL for the redirection.
	customHost?: null | string @go(CustomHost,*string)

	// The path to retain as per the incoming request, or update in the URL for the redirection.
	customPath?: null | string @go(CustomPath,*string)

	// Replace any existing query string from the incoming request URL.
	customQueryString?: null | string @go(CustomQueryString,*string)

	// Protocol to use when redirecting. Valid options are HttpOnly, HttpsOnly, or MatchRequest.
	redirectProtocol?: null | string @go(RedirectProtocol,*string)

	// Status code for the redirect. Valida options are Moved, Found, TemporaryRedirect, PermanentRedirect.
	redirectType?: null | string @go(RedirectType,*string)
}

#RoutingRuleRedirectConfigurationParameters: {
	// The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
	// +kubebuilder:validation:Optional
	customFragment?: null | string @go(CustomFragment,*string)

	// Set this to change the URL for the redirection.
	// +kubebuilder:validation:Optional
	customHost?: null | string @go(CustomHost,*string)

	// The path to retain as per the incoming request, or update in the URL for the redirection.
	// +kubebuilder:validation:Optional
	customPath?: null | string @go(CustomPath,*string)

	// Replace any existing query string from the incoming request URL.
	// +kubebuilder:validation:Optional
	customQueryString?: null | string @go(CustomQueryString,*string)

	// Protocol to use when redirecting. Valid options are HttpOnly, HttpsOnly, or MatchRequest.
	// +kubebuilder:validation:Optional
	redirectProtocol?: null | string @go(RedirectProtocol,*string)

	// Status code for the redirect. Valida options are Moved, Found, TemporaryRedirect, PermanentRedirect.
	// +kubebuilder:validation:Optional
	redirectType?: null | string @go(RedirectType,*string)
}

// FrontDoorSpec defines the desired state of FrontDoor
#FrontDoorSpec: {
	forProvider: #FrontDoorParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FrontDoorInitParameters @go(InitProvider)
}

// FrontDoorStatus defines the observed state of FrontDoor.
#FrontDoorStatus: {
	atProvider?: #FrontDoorObservation @go(AtProvider)
}

// FrontDoor is the Schema for the FrontDoors API. Manages an Azure Front Door (classic) instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#FrontDoor: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backendPool) || (has(self.initProvider) && has(self.initProvider.backendPool))",message="spec.forProvider.backendPool is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backendPoolHealthProbe) || (has(self.initProvider) && has(self.initProvider.backendPoolHealthProbe))",message="spec.forProvider.backendPoolHealthProbe is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backendPoolLoadBalancing) || (has(self.initProvider) && has(self.initProvider.backendPoolLoadBalancing))",message="spec.forProvider.backendPoolLoadBalancing is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frontendEndpoint) || (has(self.initProvider) && has(self.initProvider.frontendEndpoint))",message="spec.forProvider.frontendEndpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.routingRule) || (has(self.initProvider) && has(self.initProvider.routingRule))",message="spec.forProvider.routingRule is a required parameter"
	spec:    #FrontDoorSpec   @go(Spec)
	status?: #FrontDoorStatus @go(Status)
}

// FrontDoorList contains a list of FrontDoors
#FrontDoorList: {
	items: [...#FrontDoor] @go(Items,[]FrontDoor)
}
