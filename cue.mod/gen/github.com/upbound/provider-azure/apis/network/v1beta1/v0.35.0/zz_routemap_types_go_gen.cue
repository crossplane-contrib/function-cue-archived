// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#MatchCriterionInitParameters: {
	// A list of AS paths.
	asPath?: [...null | string] @go(AsPath,[]*string)

	// A list of BGP communities.
	community?: [...null | string] @go(Community,[]*string)

	// The match condition to apply the rule of the Route Map. Possible values are Contains, Equals, NotContains, NotEquals and Unknown.
	matchCondition?: null | string @go(MatchCondition,*string)

	// A list of route prefixes.
	routePrefix?: [...null | string] @go(RoutePrefix,[]*string)
}

#MatchCriterionObservation: {
	// A list of AS paths.
	asPath?: [...null | string] @go(AsPath,[]*string)

	// A list of BGP communities.
	community?: [...null | string] @go(Community,[]*string)

	// The match condition to apply the rule of the Route Map. Possible values are Contains, Equals, NotContains, NotEquals and Unknown.
	matchCondition?: null | string @go(MatchCondition,*string)

	// A list of route prefixes.
	routePrefix?: [...null | string] @go(RoutePrefix,[]*string)
}

#MatchCriterionParameters: {
	// A list of AS paths.
	// +kubebuilder:validation:Optional
	asPath?: [...null | string] @go(AsPath,[]*string)

	// A list of BGP communities.
	// +kubebuilder:validation:Optional
	community?: [...null | string] @go(Community,[]*string)

	// The match condition to apply the rule of the Route Map. Possible values are Contains, Equals, NotContains, NotEquals and Unknown.
	// +kubebuilder:validation:Optional
	matchCondition?: null | string @go(MatchCondition,*string)

	// A list of route prefixes.
	// +kubebuilder:validation:Optional
	routePrefix?: [...null | string] @go(RoutePrefix,[]*string)
}

#ParameterInitParameters: {
	// A list of AS paths.
	asPath?: [...null | string] @go(AsPath,[]*string)

	// A list of BGP communities.
	community?: [...null | string] @go(Community,[]*string)

	// A list of route prefixes.
	routePrefix?: [...null | string] @go(RoutePrefix,[]*string)
}

#ParameterObservation: {
	// A list of AS paths.
	asPath?: [...null | string] @go(AsPath,[]*string)

	// A list of BGP communities.
	community?: [...null | string] @go(Community,[]*string)

	// A list of route prefixes.
	routePrefix?: [...null | string] @go(RoutePrefix,[]*string)
}

#ParameterParameters: {
	// A list of AS paths.
	// +kubebuilder:validation:Optional
	asPath?: [...null | string] @go(AsPath,[]*string)

	// A list of BGP communities.
	// +kubebuilder:validation:Optional
	community?: [...null | string] @go(Community,[]*string)

	// A list of route prefixes.
	// +kubebuilder:validation:Optional
	routePrefix?: [...null | string] @go(RoutePrefix,[]*string)
}

#RouteMapInitParameters: {
	// A rule block as defined below.
	rule?: [...#RouteMapRuleInitParameters] @go(Rule,[]RouteMapRuleInitParameters)
}

#RouteMapObservation: {
	// The ID of the Route Map.
	id?: null | string @go(ID,*string)

	// A rule block as defined below.
	rule?: [...#RouteMapRuleObservation] @go(Rule,[]RouteMapRuleObservation)

	// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
	virtualHubId?: null | string @go(VirtualHubID,*string)
}

#RouteMapParameters: {
	// A rule block as defined below.
	// +kubebuilder:validation:Optional
	rule?: [...#RouteMapRuleParameters] @go(Rule,[]RouteMapRuleParameters)

	// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.VirtualHub
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	virtualHubId?: null | string @go(VirtualHubID,*string)
}

#RouteMapRuleInitParameters: {
	// An action block as defined below.
	action?: [...#RuleActionInitParameters] @go(Action,[]RuleActionInitParameters)

	// A match_criterion block as defined below.
	matchCriterion?: [...#MatchCriterionInitParameters] @go(MatchCriterion,[]MatchCriterionInitParameters)

	// The unique name for the rule.
	name?: null | string @go(Name,*string)

	// The next step after the rule is evaluated. Possible values are Continue, Terminate and Unknown. Defaults to Unknown.
	nextStepIfMatched?: null | string @go(NextStepIfMatched,*string)
}

#RouteMapRuleObservation: {
	// An action block as defined below.
	action?: [...#RuleActionObservation] @go(Action,[]RuleActionObservation)

	// A match_criterion block as defined below.
	matchCriterion?: [...#MatchCriterionObservation] @go(MatchCriterion,[]MatchCriterionObservation)

	// The unique name for the rule.
	name?: null | string @go(Name,*string)

	// The next step after the rule is evaluated. Possible values are Continue, Terminate and Unknown. Defaults to Unknown.
	nextStepIfMatched?: null | string @go(NextStepIfMatched,*string)
}

#RouteMapRuleParameters: {
	// An action block as defined below.
	// +kubebuilder:validation:Optional
	action?: [...#RuleActionParameters] @go(Action,[]RuleActionParameters)

	// A match_criterion block as defined below.
	// +kubebuilder:validation:Optional
	matchCriterion?: [...#MatchCriterionParameters] @go(MatchCriterion,[]MatchCriterionParameters)

	// The unique name for the rule.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The next step after the rule is evaluated. Possible values are Continue, Terminate and Unknown. Defaults to Unknown.
	// +kubebuilder:validation:Optional
	nextStepIfMatched?: null | string @go(NextStepIfMatched,*string)
}

#RuleActionInitParameters: {
	// A parameter block as defined below.
	parameter?: [...#ParameterInitParameters] @go(Parameter,[]ParameterInitParameters)

	// The type of the action to be taken. Possible values are Add, Drop, Remove, Replace and Unknown.
	type?: null | string @go(Type,*string)
}

#RuleActionObservation: {
	// A parameter block as defined below.
	parameter?: [...#ParameterObservation] @go(Parameter,[]ParameterObservation)

	// The type of the action to be taken. Possible values are Add, Drop, Remove, Replace and Unknown.
	type?: null | string @go(Type,*string)
}

#RuleActionParameters: {
	// A parameter block as defined below.
	// +kubebuilder:validation:Optional
	parameter?: [...#ParameterParameters] @go(Parameter,[]ParameterParameters)

	// The type of the action to be taken. Possible values are Add, Drop, Remove, Replace and Unknown.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// RouteMapSpec defines the desired state of RouteMap
#RouteMapSpec: {
	forProvider: #RouteMapParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RouteMapInitParameters @go(InitProvider)
}

// RouteMapStatus defines the observed state of RouteMap.
#RouteMapStatus: {
	atProvider?: #RouteMapObservation @go(AtProvider)
}

// RouteMap is the Schema for the RouteMaps API. Manages a Route Map.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#RouteMap: {
	spec:    #RouteMapSpec   @go(Spec)
	status?: #RouteMapStatus @go(Status)
}

// RouteMapList contains a list of RouteMaps
#RouteMapList: {
	items: [...#RouteMap] @go(Items,[]RouteMap)
}
