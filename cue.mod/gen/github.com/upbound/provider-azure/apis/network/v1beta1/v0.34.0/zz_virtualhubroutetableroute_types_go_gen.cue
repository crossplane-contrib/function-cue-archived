// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#VirtualHubRouteTableRouteObservation_2: {
	// A list of destination addresses for this route.
	destinations?: [...null | string] @go(Destinations,[]*string)

	// The type of destinations. Possible values are CIDR, ResourceId and Service.
	destinationsType?: null | string @go(DestinationsType,*string)

	// The ID of the Virtual Hub Route Table.
	id?: null | string @go(ID,*string)

	// The next hop's resource ID.
	nextHop?: null | string @go(NextHop,*string)

	// The type of next hop. Currently the only possible value is ResourceId. Defaults to ResourceId.
	nextHopType?: null | string @go(NextHopType,*string)

	// The ID of the Virtual Hub Route Table to link this route to. Changing this forces a new resource to be created.
	routeTableId?: null | string @go(RouteTableID,*string)
}

#VirtualHubRouteTableRouteParameters_2: {
	// A list of destination addresses for this route.
	// +kubebuilder:validation:Optional
	destinations?: [...null | string] @go(Destinations,[]*string)

	// The type of destinations. Possible values are CIDR, ResourceId and Service.
	// +kubebuilder:validation:Optional
	destinationsType?: null | string @go(DestinationsType,*string)

	// The next hop's resource ID.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.VirtualHubConnection
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	nextHop?: null | string @go(NextHop,*string)

	// The type of next hop. Currently the only possible value is ResourceId. Defaults to ResourceId.
	// +kubebuilder:validation:Optional
	nextHopType?: null | string @go(NextHopType,*string)

	// The ID of the Virtual Hub Route Table to link this route to. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.VirtualHubRouteTable
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	routeTableId?: null | string @go(RouteTableID,*string)
}

// VirtualHubRouteTableRouteSpec defines the desired state of VirtualHubRouteTableRoute
#VirtualHubRouteTableRouteSpec: {
	forProvider: #VirtualHubRouteTableRouteParameters_2 @go(ForProvider)
}

// VirtualHubRouteTableRouteStatus defines the observed state of VirtualHubRouteTableRoute.
#VirtualHubRouteTableRouteStatus: {
	atProvider?: #VirtualHubRouteTableRouteObservation_2 @go(AtProvider)
}

// VirtualHubRouteTableRoute is the Schema for the VirtualHubRouteTableRoutes API. Manages a Route in a Virtual Hub Route Table.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#VirtualHubRouteTableRoute: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.destinations)",message="destinations is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.destinationsType)",message="destinationsType is a required parameter"
	spec:    #VirtualHubRouteTableRouteSpec   @go(Spec)
	status?: #VirtualHubRouteTableRouteStatus @go(Status)
}

// VirtualHubRouteTableRouteList contains a list of VirtualHubRouteTableRoutes
#VirtualHubRouteTableRouteList: {
	items: [...#VirtualHubRouteTableRoute] @go(Items,[]VirtualHubRouteTableRoute)
}
