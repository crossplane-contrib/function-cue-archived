// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#LoadBalancerRuleInitParameters: {
	// A list of reference to a Backend Address Pool over which this Load Balancing Rule operates.
	backendAddressPoolIds?: [...null | string] @go(BackendAddressPoolIds,[]*string)

	// The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive.
	backendPort?: null | float64 @go(BackendPort,*float64)

	// Is snat enabled for this Load Balancer Rule? Default false.
	disableOutboundSnat?: null | bool @go(DisableOutboundSnat,*bool)

	// Are the Floating IPs enabled for this Load Balncer Rule? A "floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to false.
	enableFloatingIp?: null | bool @go(EnableFloatingIP,*bool)

	// Is TCP Reset enabled for this Load Balancer Rule?
	enableTcpReset?: null | bool @go(EnableTCPReset,*bool)

	// The name of the frontend IP configuration to which the rule is associated.
	frontendIpConfigurationName?: null | string @go(FrontendIPConfigurationName,*string)

	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive.
	frontendPort?: null | float64 @go(FrontendPort,*float64)

	// Specifies the idle timeout in minutes for TCP connections. Valid values are between 4 and 30 minutes. Defaults to 4 minutes.
	idleTimeoutInMinutes?: null | float64 @go(IdleTimeoutInMinutes,*float64)

	// Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: Default – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. SourceIP – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. SourceIPProtocol – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where the options are called None, Client IP and Client IP and Protocol respectively.
	loadDistribution?: null | string @go(LoadDistribution,*string)

	// A reference to a Probe used by this Load Balancing Rule.
	probeId?: null | string @go(ProbeID,*string)

	// The transport protocol for the external endpoint. Possible values are Tcp, Udp or All.
	protocol?: null | string @go(Protocol,*string)
}

#LoadBalancerRuleObservation: {
	// A list of reference to a Backend Address Pool over which this Load Balancing Rule operates.
	backendAddressPoolIds?: [...null | string] @go(BackendAddressPoolIds,[]*string)

	// The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive.
	backendPort?: null | float64 @go(BackendPort,*float64)

	// Is snat enabled for this Load Balancer Rule? Default false.
	disableOutboundSnat?: null | bool @go(DisableOutboundSnat,*bool)

	// Are the Floating IPs enabled for this Load Balncer Rule? A "floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to false.
	enableFloatingIp?: null | bool @go(EnableFloatingIP,*bool)

	// Is TCP Reset enabled for this Load Balancer Rule?
	enableTcpReset?: null | bool @go(EnableTCPReset,*bool)

	// The ID of the Load Balancer Rule.
	frontendIpConfigurationId?: null | string @go(FrontendIPConfigurationID,*string)

	// The name of the frontend IP configuration to which the rule is associated.
	frontendIpConfigurationName?: null | string @go(FrontendIPConfigurationName,*string)

	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive.
	frontendPort?: null | float64 @go(FrontendPort,*float64)

	// The ID of the Load Balancer Rule.
	id?: null | string @go(ID,*string)

	// Specifies the idle timeout in minutes for TCP connections. Valid values are between 4 and 30 minutes. Defaults to 4 minutes.
	idleTimeoutInMinutes?: null | float64 @go(IdleTimeoutInMinutes,*float64)

	// Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: Default – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. SourceIP – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. SourceIPProtocol – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where the options are called None, Client IP and Client IP and Protocol respectively.
	loadDistribution?: null | string @go(LoadDistribution,*string)

	// The ID of the Load Balancer in which to create the Rule. Changing this forces a new resource to be created.
	loadbalancerId?: null | string @go(LoadbalancerID,*string)

	// A reference to a Probe used by this Load Balancing Rule.
	probeId?: null | string @go(ProbeID,*string)

	// The transport protocol for the external endpoint. Possible values are Tcp, Udp or All.
	protocol?: null | string @go(Protocol,*string)
}

#LoadBalancerRuleParameters: {
	// A list of reference to a Backend Address Pool over which this Load Balancing Rule operates.
	// +kubebuilder:validation:Optional
	backendAddressPoolIds?: [...null | string] @go(BackendAddressPoolIds,[]*string)

	// The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive.
	// +kubebuilder:validation:Optional
	backendPort?: null | float64 @go(BackendPort,*float64)

	// Is snat enabled for this Load Balancer Rule? Default false.
	// +kubebuilder:validation:Optional
	disableOutboundSnat?: null | bool @go(DisableOutboundSnat,*bool)

	// Are the Floating IPs enabled for this Load Balncer Rule? A "floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to false.
	// +kubebuilder:validation:Optional
	enableFloatingIp?: null | bool @go(EnableFloatingIP,*bool)

	// Is TCP Reset enabled for this Load Balancer Rule?
	// +kubebuilder:validation:Optional
	enableTcpReset?: null | bool @go(EnableTCPReset,*bool)

	// The name of the frontend IP configuration to which the rule is associated.
	// +kubebuilder:validation:Optional
	frontendIpConfigurationName?: null | string @go(FrontendIPConfigurationName,*string)

	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive.
	// +kubebuilder:validation:Optional
	frontendPort?: null | float64 @go(FrontendPort,*float64)

	// Specifies the idle timeout in minutes for TCP connections. Valid values are between 4 and 30 minutes. Defaults to 4 minutes.
	// +kubebuilder:validation:Optional
	idleTimeoutInMinutes?: null | float64 @go(IdleTimeoutInMinutes,*float64)

	// Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: Default – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. SourceIP – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. SourceIPProtocol – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where the options are called None, Client IP and Client IP and Protocol respectively.
	// +kubebuilder:validation:Optional
	loadDistribution?: null | string @go(LoadDistribution,*string)

	// The ID of the Load Balancer in which to create the Rule. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=LoadBalancer
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	loadbalancerId?: null | string @go(LoadbalancerID,*string)

	// A reference to a Probe used by this Load Balancing Rule.
	// +kubebuilder:validation:Optional
	probeId?: null | string @go(ProbeID,*string)

	// The transport protocol for the external endpoint. Possible values are Tcp, Udp or All.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)
}

// LoadBalancerRuleSpec defines the desired state of LoadBalancerRule
#LoadBalancerRuleSpec: {
	forProvider: #LoadBalancerRuleParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LoadBalancerRuleInitParameters @go(InitProvider)
}

// LoadBalancerRuleStatus defines the observed state of LoadBalancerRule.
#LoadBalancerRuleStatus: {
	atProvider?: #LoadBalancerRuleObservation @go(AtProvider)
}

// LoadBalancerRule is the Schema for the LoadBalancerRules API. Manages a Load Balancer Rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LoadBalancerRule: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backendPort) || has(self.initProvider.backendPort)",message="backendPort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frontendIpConfigurationName) || has(self.initProvider.frontendIpConfigurationName)",message="frontendIpConfigurationName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frontendPort) || has(self.initProvider.frontendPort)",message="frontendPort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || has(self.initProvider.protocol)",message="protocol is a required parameter"
	spec:    #LoadBalancerRuleSpec   @go(Spec)
	status?: #LoadBalancerRuleStatus @go(Status)
}

// LoadBalancerRuleList contains a list of LoadBalancerRules
#LoadBalancerRuleList: {
	items: [...#LoadBalancerRule] @go(Items,[]LoadBalancerRule)
}
