// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#RouteTableObservation: {
	// Boolean flag which controls propagation of routes learned by BGP on that route table. True means disable.
	disableBgpRoutePropagation?: null | bool @go(DisableBGPRoutePropagation,*bool)

	// The Route Table ID.
	id?: null | string @go(ID,*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The name of the resource group in which to create the route table. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// List of objects representing routes. Each object accepts the arguments documented below.
	route?: [...#RouteTableRouteObservation] @go(Route,[]RouteTableRouteObservation)

	// The collection of Subnets associated with this route table.
	subnets?: [...null | string] @go(Subnets,[]*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#RouteTableParameters: {
	// Boolean flag which controls propagation of routes learned by BGP on that route table. True means disable.
	// +kubebuilder:validation:Optional
	disableBgpRoutePropagation?: null | bool @go(DisableBGPRoutePropagation,*bool)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The name of the resource group in which to create the route table. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// List of objects representing routes. Each object accepts the arguments documented below.
	// +kubebuilder:validation:Optional
	route?: [...#RouteTableRouteParameters] @go(Route,[]RouteTableRouteParameters)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#RouteTableRouteObservation: {
	// The destination to which the route applies. Can be CIDR (such as 10.1.0.0/16) or Azure Service Tag (such as ApiManagement, AzureBackup or AzureMonitor) format.
	addressPrefix?: null | string @go(AddressPrefix,*string)

	// The name of the route.
	name?: null | string @go(Name,*string)

	// Contains the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
	nextHopInIpAddress?: null | string @go(NextHopInIPAddress,*string)

	// The type of Azure hop the packet should be sent to. Possible values are VirtualNetworkGateway, VnetLocal, Internet, VirtualAppliance and None.
	nextHopType?: null | string @go(NextHopType,*string)
}

#RouteTableRouteParameters: {
	// The destination to which the route applies. Can be CIDR (such as 10.1.0.0/16) or Azure Service Tag (such as ApiManagement, AzureBackup or AzureMonitor) format.
	// +kubebuilder:validation:Optional
	addressPrefix?: null | string @go(AddressPrefix,*string)

	// The name of the route.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Contains the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
	// +kubebuilder:validation:Optional
	nextHopInIpAddress?: null | string @go(NextHopInIPAddress,*string)

	// The type of Azure hop the packet should be sent to. Possible values are VirtualNetworkGateway, VnetLocal, Internet, VirtualAppliance and None.
	// +kubebuilder:validation:Optional
	nextHopType?: null | string @go(NextHopType,*string)
}

// RouteTableSpec defines the desired state of RouteTable
#RouteTableSpec: {
	forProvider: #RouteTableParameters @go(ForProvider)
}

// RouteTableStatus defines the observed state of RouteTable.
#RouteTableStatus: {
	atProvider?: #RouteTableObservation @go(AtProvider)
}

// RouteTable is the Schema for the RouteTables API. Manages a Route Table
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#RouteTable: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.location)",message="location is a required parameter"
	spec:    #RouteTableSpec   @go(Spec)
	status?: #RouteTableStatus @go(Status)
}

// RouteTableList contains a list of RouteTables
#RouteTableList: {
	items: [...#RouteTable] @go(Items,[]RouteTable)
}
