// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#AzureActiveDirectoryAuthenticationInitParameters: {
	// The Audience which should be used for authentication.
	audience?: null | string @go(Audience,*string)

	// The Issuer which should be used for authentication.
	issuer?: null | string @go(Issuer,*string)

	// The Tenant which should be used for authentication.
	tenant?: null | string @go(Tenant,*string)
}

#AzureActiveDirectoryAuthenticationObservation: {
	// The Audience which should be used for authentication.
	audience?: null | string @go(Audience,*string)

	// The Issuer which should be used for authentication.
	issuer?: null | string @go(Issuer,*string)

	// The Tenant which should be used for authentication.
	tenant?: null | string @go(Tenant,*string)
}

#AzureActiveDirectoryAuthenticationParameters: {
	// The Audience which should be used for authentication.
	// +kubebuilder:validation:Optional
	audience?: null | string @go(Audience,*string)

	// The Issuer which should be used for authentication.
	// +kubebuilder:validation:Optional
	issuer?: null | string @go(Issuer,*string)

	// The Tenant which should be used for authentication.
	// +kubebuilder:validation:Optional
	tenant?: null | string @go(Tenant,*string)
}

#ClientRevokedCertificateInitParameters: {
	// A name used to uniquely identify this certificate.
	name?: null | string @go(Name,*string)

	// The Thumbprint of the Certificate.
	thumbprint?: null | string @go(Thumbprint,*string)
}

#ClientRevokedCertificateObservation: {
	// A name used to uniquely identify this certificate.
	name?: null | string @go(Name,*string)

	// The Thumbprint of the Certificate.
	thumbprint?: null | string @go(Thumbprint,*string)
}

#ClientRevokedCertificateParameters: {
	// A name used to uniquely identify this certificate.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The Thumbprint of the Certificate.
	// +kubebuilder:validation:Optional
	thumbprint?: null | string @go(Thumbprint,*string)
}

#ClientRootCertificateInitParameters: {
	// A name used to uniquely identify this certificate.
	name?: null | string @go(Name,*string)

	// The Public Key Data associated with the Certificate.
	publicCertData?: null | string @go(PublicCertData,*string)
}

#ClientRootCertificateObservation: {
	// A name used to uniquely identify this certificate.
	name?: null | string @go(Name,*string)

	// The Public Key Data associated with the Certificate.
	publicCertData?: null | string @go(PublicCertData,*string)
}

#ClientRootCertificateParameters: {
	// A name used to uniquely identify this certificate.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The Public Key Data associated with the Certificate.
	// +kubebuilder:validation:Optional
	publicCertData?: null | string @go(PublicCertData,*string)
}

#RadiusClientRootCertificateInitParameters: {
	// A name used to uniquely identify this certificate.
	name?: null | string @go(Name,*string)

	// The Thumbprint of the Certificate.
	thumbprint?: null | string @go(Thumbprint,*string)
}

#RadiusClientRootCertificateObservation: {
	// A name used to uniquely identify this certificate.
	name?: null | string @go(Name,*string)

	// The Thumbprint of the Certificate.
	thumbprint?: null | string @go(Thumbprint,*string)
}

#RadiusClientRootCertificateParameters: {
	// A name used to uniquely identify this certificate.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The Thumbprint of the Certificate.
	// +kubebuilder:validation:Optional
	thumbprint?: null | string @go(Thumbprint,*string)
}

#RadiusInitParameters: {
	// One or more client_root_certificate blocks as defined above.
	clientRootCertificate?: [...#RadiusClientRootCertificateInitParameters] @go(ClientRootCertificate,[]RadiusClientRootCertificateInitParameters)

	// One or more server blocks as defined below.
	server?: [...#ServerInitParameters] @go(Server,[]ServerInitParameters)

	// One or more server_root_certificate blocks as defined below.
	serverRootCertificate?: [...#ServerRootCertificateInitParameters] @go(ServerRootCertificate,[]ServerRootCertificateInitParameters)
}

#RadiusObservation: {
	// One or more client_root_certificate blocks as defined above.
	clientRootCertificate?: [...#RadiusClientRootCertificateObservation] @go(ClientRootCertificate,[]RadiusClientRootCertificateObservation)

	// One or more server blocks as defined below.
	server?: [...#ServerObservation] @go(Server,[]ServerObservation)

	// One or more server_root_certificate blocks as defined below.
	serverRootCertificate?: [...#ServerRootCertificateObservation] @go(ServerRootCertificate,[]ServerRootCertificateObservation)
}

#RadiusParameters: {
	// One or more client_root_certificate blocks as defined above.
	// +kubebuilder:validation:Optional
	clientRootCertificate?: [...#RadiusClientRootCertificateParameters] @go(ClientRootCertificate,[]RadiusClientRootCertificateParameters)

	// One or more server blocks as defined below.
	// +kubebuilder:validation:Optional
	server?: [...#ServerParameters] @go(Server,[]ServerParameters)

	// One or more server_root_certificate blocks as defined below.
	// +kubebuilder:validation:Optional
	serverRootCertificate?: [...#ServerRootCertificateParameters] @go(ServerRootCertificate,[]ServerRootCertificateParameters)
}

#ServerInitParameters: {
	// The Address of the Radius Server.
	address?: null | string @go(Address,*string)

	// The Score of the Radius Server determines the priority of the server. Ranges from 1 to 30.
	score?: null | float64 @go(Score,*float64)
}

#ServerObservation: {
	// The Address of the Radius Server.
	address?: null | string @go(Address,*string)

	// The Score of the Radius Server determines the priority of the server. Ranges from 1 to 30.
	score?: null | float64 @go(Score,*float64)
}

#ServerParameters: {
	// The Address of the Radius Server.
	// +kubebuilder:validation:Optional
	address?: null | string @go(Address,*string)

	// The Score of the Radius Server determines the priority of the server. Ranges from 1 to 30.
	// +kubebuilder:validation:Optional
	score?: null | float64 @go(Score,*float64)
}

#ServerRootCertificateInitParameters: {
	// A name used to uniquely identify this certificate.
	name?: null | string @go(Name,*string)

	// The Public Key Data associated with the Certificate.
	publicCertData?: null | string @go(PublicCertData,*string)
}

#ServerRootCertificateObservation: {
	// A name used to uniquely identify this certificate.
	name?: null | string @go(Name,*string)

	// The Public Key Data associated with the Certificate.
	publicCertData?: null | string @go(PublicCertData,*string)
}

#ServerRootCertificateParameters: {
	// A name used to uniquely identify this certificate.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The Public Key Data associated with the Certificate.
	// +kubebuilder:validation:Optional
	publicCertData?: null | string @go(PublicCertData,*string)
}

#VPNServerConfigurationInitParameters: {
	// A azure_active_directory_authentication block as defined below.
	azureActiveDirectoryAuthentication?: [...#AzureActiveDirectoryAuthenticationInitParameters] @go(AzureActiveDirectoryAuthentication,[]AzureActiveDirectoryAuthenticationInitParameters)

	// One or more client_revoked_certificate blocks as defined below.
	clientRevokedCertificate?: [...#ClientRevokedCertificateInitParameters] @go(ClientRevokedCertificate,[]ClientRevokedCertificateInitParameters)

	// One or more client_root_certificate blocks as defined below.
	clientRootCertificate?: [...#ClientRootCertificateInitParameters] @go(ClientRootCertificate,[]ClientRootCertificateInitParameters)

	// A ipsec_policy block as defined below.
	ipsecPolicy?: [...#VPNServerConfigurationIpsecPolicyInitParameters] @go(IpsecPolicy,[]VPNServerConfigurationIpsecPolicyInitParameters)

	// The Azure location where this VPN Server Configuration should be created. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A radius block as defined below.
	radius?: [...#RadiusInitParameters] @go(Radius,[]RadiusInitParameters)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A list of Authentication Types applicable for this VPN Server Configuration. Possible values are AAD (Azure Active Directory), Certificate and Radius.
	vpnAuthenticationTypes?: [...null | string] @go(VPNAuthenticationTypes,[]*string)

	// A list of VPN Protocols to use for this Server Configuration. Possible values are IkeV2 and OpenVPN.
	vpnProtocols?: [...null | string] @go(VPNProtocols,[]*string)
}

#VPNServerConfigurationIpsecPolicyInitParameters: {
	// The DH Group, used in IKE Phase 1. Possible values include DHGroup1, DHGroup2, DHGroup14, DHGroup24, DHGroup2048, ECP256, ECP384 and None.
	dhGroup?: null | string @go(DhGroup,*string)

	// The IKE encryption algorithm, used for IKE Phase 2. Possible values include AES128, AES192, AES256, DES, DES3, GCMAES128 and GCMAES256.
	ikeEncryption?: null | string @go(IkeEncryption,*string)

	// The IKE encryption integrity algorithm, used for IKE Phase 2. Possible values include GCMAES128, GCMAES256, MD5, SHA1, SHA256 and SHA384.
	ikeIntegrity?: null | string @go(IkeIntegrity,*string)

	// The IPSec encryption algorithm, used for IKE phase 1. Possible values include AES128, AES192, AES256, DES, DES3, GCMAES128, GCMAES192, GCMAES256 and None.
	ipsecEncryption?: null | string @go(IpsecEncryption,*string)

	// The IPSec integrity algorithm, used for IKE phase 1. Possible values include GCMAES128, GCMAES192, GCMAES256, MD5, SHA1 and SHA256.
	ipsecIntegrity?: null | string @go(IpsecIntegrity,*string)

	// The Pfs Group, used in IKE Phase 2. Possible values include ECP256, ECP384, PFS1, PFS2, PFS14, PFS24, PFS2048, PFSMM and None.
	pfsGroup?: null | string @go(PfsGroup,*string)

	// The IPSec Security Association payload size in KB for a Site-to-Site VPN tunnel.
	saDataSizeKilobytes?: null | float64 @go(SaDataSizeKilobytes,*float64)

	// The IPSec Security Association lifetime in seconds for a Site-to-Site VPN tunnel.
	saLifetimeSeconds?: null | float64 @go(SaLifetimeSeconds,*float64)
}

#VPNServerConfigurationIpsecPolicyObservation: {
	// The DH Group, used in IKE Phase 1. Possible values include DHGroup1, DHGroup2, DHGroup14, DHGroup24, DHGroup2048, ECP256, ECP384 and None.
	dhGroup?: null | string @go(DhGroup,*string)

	// The IKE encryption algorithm, used for IKE Phase 2. Possible values include AES128, AES192, AES256, DES, DES3, GCMAES128 and GCMAES256.
	ikeEncryption?: null | string @go(IkeEncryption,*string)

	// The IKE encryption integrity algorithm, used for IKE Phase 2. Possible values include GCMAES128, GCMAES256, MD5, SHA1, SHA256 and SHA384.
	ikeIntegrity?: null | string @go(IkeIntegrity,*string)

	// The IPSec encryption algorithm, used for IKE phase 1. Possible values include AES128, AES192, AES256, DES, DES3, GCMAES128, GCMAES192, GCMAES256 and None.
	ipsecEncryption?: null | string @go(IpsecEncryption,*string)

	// The IPSec integrity algorithm, used for IKE phase 1. Possible values include GCMAES128, GCMAES192, GCMAES256, MD5, SHA1 and SHA256.
	ipsecIntegrity?: null | string @go(IpsecIntegrity,*string)

	// The Pfs Group, used in IKE Phase 2. Possible values include ECP256, ECP384, PFS1, PFS2, PFS14, PFS24, PFS2048, PFSMM and None.
	pfsGroup?: null | string @go(PfsGroup,*string)

	// The IPSec Security Association payload size in KB for a Site-to-Site VPN tunnel.
	saDataSizeKilobytes?: null | float64 @go(SaDataSizeKilobytes,*float64)

	// The IPSec Security Association lifetime in seconds for a Site-to-Site VPN tunnel.
	saLifetimeSeconds?: null | float64 @go(SaLifetimeSeconds,*float64)
}

#VPNServerConfigurationIpsecPolicyParameters: {
	// The DH Group, used in IKE Phase 1. Possible values include DHGroup1, DHGroup2, DHGroup14, DHGroup24, DHGroup2048, ECP256, ECP384 and None.
	// +kubebuilder:validation:Optional
	dhGroup?: null | string @go(DhGroup,*string)

	// The IKE encryption algorithm, used for IKE Phase 2. Possible values include AES128, AES192, AES256, DES, DES3, GCMAES128 and GCMAES256.
	// +kubebuilder:validation:Optional
	ikeEncryption?: null | string @go(IkeEncryption,*string)

	// The IKE encryption integrity algorithm, used for IKE Phase 2. Possible values include GCMAES128, GCMAES256, MD5, SHA1, SHA256 and SHA384.
	// +kubebuilder:validation:Optional
	ikeIntegrity?: null | string @go(IkeIntegrity,*string)

	// The IPSec encryption algorithm, used for IKE phase 1. Possible values include AES128, AES192, AES256, DES, DES3, GCMAES128, GCMAES192, GCMAES256 and None.
	// +kubebuilder:validation:Optional
	ipsecEncryption?: null | string @go(IpsecEncryption,*string)

	// The IPSec integrity algorithm, used for IKE phase 1. Possible values include GCMAES128, GCMAES192, GCMAES256, MD5, SHA1 and SHA256.
	// +kubebuilder:validation:Optional
	ipsecIntegrity?: null | string @go(IpsecIntegrity,*string)

	// The Pfs Group, used in IKE Phase 2. Possible values include ECP256, ECP384, PFS1, PFS2, PFS14, PFS24, PFS2048, PFSMM and None.
	// +kubebuilder:validation:Optional
	pfsGroup?: null | string @go(PfsGroup,*string)

	// The IPSec Security Association payload size in KB for a Site-to-Site VPN tunnel.
	// +kubebuilder:validation:Optional
	saDataSizeKilobytes?: null | float64 @go(SaDataSizeKilobytes,*float64)

	// The IPSec Security Association lifetime in seconds for a Site-to-Site VPN tunnel.
	// +kubebuilder:validation:Optional
	saLifetimeSeconds?: null | float64 @go(SaLifetimeSeconds,*float64)
}

#VPNServerConfigurationObservation: {
	// A azure_active_directory_authentication block as defined below.
	azureActiveDirectoryAuthentication?: [...#AzureActiveDirectoryAuthenticationObservation] @go(AzureActiveDirectoryAuthentication,[]AzureActiveDirectoryAuthenticationObservation)

	// One or more client_revoked_certificate blocks as defined below.
	clientRevokedCertificate?: [...#ClientRevokedCertificateObservation] @go(ClientRevokedCertificate,[]ClientRevokedCertificateObservation)

	// One or more client_root_certificate blocks as defined below.
	clientRootCertificate?: [...#ClientRootCertificateObservation] @go(ClientRootCertificate,[]ClientRootCertificateObservation)

	// The ID of the VPN Server Configuration.
	id?: null | string @go(ID,*string)

	// A ipsec_policy block as defined below.
	ipsecPolicy?: [...#VPNServerConfigurationIpsecPolicyObservation] @go(IpsecPolicy,[]VPNServerConfigurationIpsecPolicyObservation)

	// The Azure location where this VPN Server Configuration should be created. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// A radius block as defined below.
	radius?: [...#RadiusObservation] @go(Radius,[]RadiusObservation)

	// The Name of the Resource Group in which this VPN Server Configuration should be created. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A list of Authentication Types applicable for this VPN Server Configuration. Possible values are AAD (Azure Active Directory), Certificate and Radius.
	vpnAuthenticationTypes?: [...null | string] @go(VPNAuthenticationTypes,[]*string)

	// A list of VPN Protocols to use for this Server Configuration. Possible values are IkeV2 and OpenVPN.
	vpnProtocols?: [...null | string] @go(VPNProtocols,[]*string)
}

#VPNServerConfigurationParameters: {
	// A azure_active_directory_authentication block as defined below.
	// +kubebuilder:validation:Optional
	azureActiveDirectoryAuthentication?: [...#AzureActiveDirectoryAuthenticationParameters] @go(AzureActiveDirectoryAuthentication,[]AzureActiveDirectoryAuthenticationParameters)

	// One or more client_revoked_certificate blocks as defined below.
	// +kubebuilder:validation:Optional
	clientRevokedCertificate?: [...#ClientRevokedCertificateParameters] @go(ClientRevokedCertificate,[]ClientRevokedCertificateParameters)

	// One or more client_root_certificate blocks as defined below.
	// +kubebuilder:validation:Optional
	clientRootCertificate?: [...#ClientRootCertificateParameters] @go(ClientRootCertificate,[]ClientRootCertificateParameters)

	// A ipsec_policy block as defined below.
	// +kubebuilder:validation:Optional
	ipsecPolicy?: [...#VPNServerConfigurationIpsecPolicyParameters] @go(IpsecPolicy,[]VPNServerConfigurationIpsecPolicyParameters)

	// The Azure location where this VPN Server Configuration should be created. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// A radius block as defined below.
	// +kubebuilder:validation:Optional
	radius?: [...#RadiusParameters] @go(Radius,[]RadiusParameters)

	// The Name of the Resource Group in which this VPN Server Configuration should be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A list of Authentication Types applicable for this VPN Server Configuration. Possible values are AAD (Azure Active Directory), Certificate and Radius.
	// +kubebuilder:validation:Optional
	vpnAuthenticationTypes?: [...null | string] @go(VPNAuthenticationTypes,[]*string)

	// A list of VPN Protocols to use for this Server Configuration. Possible values are IkeV2 and OpenVPN.
	// +kubebuilder:validation:Optional
	vpnProtocols?: [...null | string] @go(VPNProtocols,[]*string)
}

// VPNServerConfigurationSpec defines the desired state of VPNServerConfiguration
#VPNServerConfigurationSpec: {
	forProvider: #VPNServerConfigurationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VPNServerConfigurationInitParameters @go(InitProvider)
}

// VPNServerConfigurationStatus defines the observed state of VPNServerConfiguration.
#VPNServerConfigurationStatus: {
	atProvider?: #VPNServerConfigurationObservation @go(AtProvider)
}

// VPNServerConfiguration is the Schema for the VPNServerConfigurations API. Manages a VPN Server Configuration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#VPNServerConfiguration: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpnAuthenticationTypes) || (has(self.initProvider) && has(self.initProvider.vpnAuthenticationTypes))",message="spec.forProvider.vpnAuthenticationTypes is a required parameter"
	spec:    #VPNServerConfigurationSpec   @go(Spec)
	status?: #VPNServerConfigurationStatus @go(Status)
}

// VPNServerConfigurationList contains a list of VPNServerConfigurations
#VPNServerConfigurationList: {
	items: [...#VPNServerConfiguration] @go(Items,[]VPNServerConfiguration)
}
