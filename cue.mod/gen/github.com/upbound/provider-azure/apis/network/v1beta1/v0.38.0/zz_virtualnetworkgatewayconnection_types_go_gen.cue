// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#CustomBGPAddressesInitParameters: {
	// single IP address that is part of the azurerm_virtual_network_gateway ip_configuration (first one)
	primary?: null | string @go(Primary,*string)

	// single IP address that is part of the azurerm_virtual_network_gateway ip_configuration (second one)
	secondary?: null | string @go(Secondary,*string)
}

#CustomBGPAddressesObservation: {
	// single IP address that is part of the azurerm_virtual_network_gateway ip_configuration (first one)
	primary?: null | string @go(Primary,*string)

	// single IP address that is part of the azurerm_virtual_network_gateway ip_configuration (second one)
	secondary?: null | string @go(Secondary,*string)
}

#CustomBGPAddressesParameters: {
	// single IP address that is part of the azurerm_virtual_network_gateway ip_configuration (first one)
	// +kubebuilder:validation:Optional
	primary?: null | string @go(Primary,*string)

	// single IP address that is part of the azurerm_virtual_network_gateway ip_configuration (second one)
	// +kubebuilder:validation:Optional
	secondary?: null | string @go(Secondary,*string)
}

#IpsecPolicyInitParameters: {
	// The DH group used in IKE phase 1 for initial SA. Valid options are DHGroup1, DHGroup14, DHGroup2, DHGroup2048, DHGroup24, ECP256, ECP384, or None.
	dhGroup?: null | string @go(DhGroup,*string)

	// The IKE encryption algorithm. Valid options are AES128, AES192, AES256, DES, DES3, GCMAES128, or GCMAES256.
	ikeEncryption?: null | string @go(IkeEncryption,*string)

	// The IKE integrity algorithm. Valid options are GCMAES128, GCMAES256, MD5, SHA1, SHA256, or SHA384.
	ikeIntegrity?: null | string @go(IkeIntegrity,*string)

	// The IPSec encryption algorithm. Valid options are AES128, AES192, AES256, DES, DES3, GCMAES128, GCMAES192, GCMAES256, or None.
	ipsecEncryption?: null | string @go(IpsecEncryption,*string)

	// The IPSec integrity algorithm. Valid options are GCMAES128, GCMAES192, GCMAES256, MD5, SHA1, or SHA256.
	ipsecIntegrity?: null | string @go(IpsecIntegrity,*string)

	// The DH group used in IKE phase 2 for new child SA.
	// Valid options are ECP256, ECP384, PFS1, PFS14, PFS2, PFS2048, PFS24, PFSMM,
	// or None.
	pfsGroup?: null | string @go(PfsGroup,*string)

	// The IPSec SA payload size in KB. Must be at least 1024 KB. Defaults to 102400000 KB.
	saDatasize?: null | float64 @go(SaDatasize,*float64)

	// The IPSec SA lifetime in seconds. Must be at least 300 seconds. Defaults to 27000 seconds.
	saLifetime?: null | float64 @go(SaLifetime,*float64)
}

#IpsecPolicyObservation: {
	// The DH group used in IKE phase 1 for initial SA. Valid options are DHGroup1, DHGroup14, DHGroup2, DHGroup2048, DHGroup24, ECP256, ECP384, or None.
	dhGroup?: null | string @go(DhGroup,*string)

	// The IKE encryption algorithm. Valid options are AES128, AES192, AES256, DES, DES3, GCMAES128, or GCMAES256.
	ikeEncryption?: null | string @go(IkeEncryption,*string)

	// The IKE integrity algorithm. Valid options are GCMAES128, GCMAES256, MD5, SHA1, SHA256, or SHA384.
	ikeIntegrity?: null | string @go(IkeIntegrity,*string)

	// The IPSec encryption algorithm. Valid options are AES128, AES192, AES256, DES, DES3, GCMAES128, GCMAES192, GCMAES256, or None.
	ipsecEncryption?: null | string @go(IpsecEncryption,*string)

	// The IPSec integrity algorithm. Valid options are GCMAES128, GCMAES192, GCMAES256, MD5, SHA1, or SHA256.
	ipsecIntegrity?: null | string @go(IpsecIntegrity,*string)

	// The DH group used in IKE phase 2 for new child SA.
	// Valid options are ECP256, ECP384, PFS1, PFS14, PFS2, PFS2048, PFS24, PFSMM,
	// or None.
	pfsGroup?: null | string @go(PfsGroup,*string)

	// The IPSec SA payload size in KB. Must be at least 1024 KB. Defaults to 102400000 KB.
	saDatasize?: null | float64 @go(SaDatasize,*float64)

	// The IPSec SA lifetime in seconds. Must be at least 300 seconds. Defaults to 27000 seconds.
	saLifetime?: null | float64 @go(SaLifetime,*float64)
}

#IpsecPolicyParameters: {
	// The DH group used in IKE phase 1 for initial SA. Valid options are DHGroup1, DHGroup14, DHGroup2, DHGroup2048, DHGroup24, ECP256, ECP384, or None.
	// +kubebuilder:validation:Optional
	dhGroup?: null | string @go(DhGroup,*string)

	// The IKE encryption algorithm. Valid options are AES128, AES192, AES256, DES, DES3, GCMAES128, or GCMAES256.
	// +kubebuilder:validation:Optional
	ikeEncryption?: null | string @go(IkeEncryption,*string)

	// The IKE integrity algorithm. Valid options are GCMAES128, GCMAES256, MD5, SHA1, SHA256, or SHA384.
	// +kubebuilder:validation:Optional
	ikeIntegrity?: null | string @go(IkeIntegrity,*string)

	// The IPSec encryption algorithm. Valid options are AES128, AES192, AES256, DES, DES3, GCMAES128, GCMAES192, GCMAES256, or None.
	// +kubebuilder:validation:Optional
	ipsecEncryption?: null | string @go(IpsecEncryption,*string)

	// The IPSec integrity algorithm. Valid options are GCMAES128, GCMAES192, GCMAES256, MD5, SHA1, or SHA256.
	// +kubebuilder:validation:Optional
	ipsecIntegrity?: null | string @go(IpsecIntegrity,*string)

	// The DH group used in IKE phase 2 for new child SA.
	// Valid options are ECP256, ECP384, PFS1, PFS14, PFS2, PFS2048, PFS24, PFSMM,
	// or None.
	// +kubebuilder:validation:Optional
	pfsGroup?: null | string @go(PfsGroup,*string)

	// The IPSec SA payload size in KB. Must be at least 1024 KB. Defaults to 102400000 KB.
	// +kubebuilder:validation:Optional
	saDatasize?: null | float64 @go(SaDatasize,*float64)

	// The IPSec SA lifetime in seconds. Must be at least 300 seconds. Defaults to 27000 seconds.
	// +kubebuilder:validation:Optional
	saLifetime?: null | float64 @go(SaLifetime,*float64)
}

#TrafficSelectorPolicyInitParameters: {
	// List of local CIDRs.
	localAddressCidrs?: [...null | string] @go(LocalAddressCidrs,[]*string)

	// List of remote CIDRs.
	remoteAddressCidrs?: [...null | string] @go(RemoteAddressCidrs,[]*string)
}

#TrafficSelectorPolicyObservation: {
	// List of local CIDRs.
	localAddressCidrs?: [...null | string] @go(LocalAddressCidrs,[]*string)

	// List of remote CIDRs.
	remoteAddressCidrs?: [...null | string] @go(RemoteAddressCidrs,[]*string)
}

#TrafficSelectorPolicyParameters: {
	// List of local CIDRs.
	// +kubebuilder:validation:Optional
	localAddressCidrs: [...null | string] @go(LocalAddressCidrs,[]*string)

	// List of remote CIDRs.
	// +kubebuilder:validation:Optional
	remoteAddressCidrs: [...null | string] @go(RemoteAddressCidrs,[]*string)
}

#VirtualNetworkGatewayConnectionInitParameters: {
	// Connection mode to use. Possible values are Default, InitiatorOnly and ResponderOnly. Defaults to Default. Changing this value will force a resource to be created.
	connectionMode?: null | string @go(ConnectionMode,*string)

	// The IKE protocol version to use. Possible values are IKEv1 and IKEv2, values are IKEv1 and IKEv2. Defaults to IKEv2. Changing this forces a new resource to be created.
	// -> Note: Only valid for IPSec connections on virtual network gateways with SKU VpnGw1, VpnGw2, VpnGw3, VpnGw1AZ, VpnGw2AZ or VpnGw3AZ.
	connectionProtocol?: null | string @go(ConnectionProtocol,*string)

	// A custom_bgp_addresses (Border Gateway Protocol custom IP Addresses) block which is documented below.
	// The block can only be used on IPSec / activeactive connections,
	// For details about see the relevant section in the Azure documentation.
	customBgpAddresses?: [...#CustomBGPAddressesInitParameters] @go(CustomBGPAddresses,[]CustomBGPAddressesInitParameters)

	// The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
	dpdTimeoutSeconds?: null | float64 @go(DpdTimeoutSeconds,*float64)

	// A list of the egress NAT Rule Ids.
	egressNatRuleIds?: [...null | string] @go(EgressNATRuleIds,[]*string)

	// If true, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to false.
	enableBgp?: null | bool @go(EnableBGP,*bool)

	// The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when type is ExpressRoute). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
	expressRouteCircuitId?: null | string @go(ExpressRouteCircuitID,*string)

	// If true, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
	expressRouteGatewayBypass?: null | bool @go(ExpressRouteGatewayBypass,*bool)

	// A list of the ingress NAT Rule Ids.
	ingressNatRuleIds?: [...null | string] @go(IngressNATRuleIds,[]*string)

	// A ipsec_policy block which is documented below.
	// Only a single policy can be defined for a connection. For details on
	// custom policies refer to the relevant section in the Azure documentation.
	ipsecPolicy?: [...#IpsecPolicyInitParameters] @go(IpsecPolicy,[]IpsecPolicyInitParameters)

	// Use private local Azure IP for the connection. Changing this forces a new resource to be created.
	localAzureIpAddressEnabled?: null | bool @go(LocalAzureIPAddressEnabled,*bool)

	// The location/region where the connection is located. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The routing weight. Defaults to 10.
	routingWeight?: null | float64 @go(RoutingWeight,*float64)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// One or more traffic_selector_policy blocks which are documented below.
	// A traffic_selector_policy allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
	// For details about traffic selectors refer to the relevant section in the Azure documentation.
	trafficSelectorPolicy?: [...#TrafficSelectorPolicyInitParameters] @go(TrafficSelectorPolicy,[]TrafficSelectorPolicyInitParameters)

	// The type of connection. Valid options are IPsec (Site-to-Site), ExpressRoute (ExpressRoute), and Vnet2Vnet (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
	type?: null | string @go(Type,*string)

	// If true, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an ipsec_policy block. Defaults to false.
	usePolicyBasedTrafficSelectors?: null | bool @go(UsePolicyBasedTrafficSelectors,*bool)
}

#VirtualNetworkGatewayConnectionObservation: {
	// Connection mode to use. Possible values are Default, InitiatorOnly and ResponderOnly. Defaults to Default. Changing this value will force a resource to be created.
	connectionMode?: null | string @go(ConnectionMode,*string)

	// The IKE protocol version to use. Possible values are IKEv1 and IKEv2, values are IKEv1 and IKEv2. Defaults to IKEv2. Changing this forces a new resource to be created.
	// -> Note: Only valid for IPSec connections on virtual network gateways with SKU VpnGw1, VpnGw2, VpnGw3, VpnGw1AZ, VpnGw2AZ or VpnGw3AZ.
	connectionProtocol?: null | string @go(ConnectionProtocol,*string)

	// A custom_bgp_addresses (Border Gateway Protocol custom IP Addresses) block which is documented below.
	// The block can only be used on IPSec / activeactive connections,
	// For details about see the relevant section in the Azure documentation.
	customBgpAddresses?: [...#CustomBGPAddressesObservation] @go(CustomBGPAddresses,[]CustomBGPAddressesObservation)

	// The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
	dpdTimeoutSeconds?: null | float64 @go(DpdTimeoutSeconds,*float64)

	// A list of the egress NAT Rule Ids.
	egressNatRuleIds?: [...null | string] @go(EgressNATRuleIds,[]*string)

	// If true, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to false.
	enableBgp?: null | bool @go(EnableBGP,*bool)

	// The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when type is ExpressRoute). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
	expressRouteCircuitId?: null | string @go(ExpressRouteCircuitID,*string)

	// If true, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
	expressRouteGatewayBypass?: null | bool @go(ExpressRouteGatewayBypass,*bool)

	// The ID of the Virtual Network Gateway Connection.
	id?: null | string @go(ID,*string)

	// A list of the ingress NAT Rule Ids.
	ingressNatRuleIds?: [...null | string] @go(IngressNATRuleIds,[]*string)

	// A ipsec_policy block which is documented below.
	// Only a single policy can be defined for a connection. For details on
	// custom policies refer to the relevant section in the Azure documentation.
	ipsecPolicy?: [...#IpsecPolicyObservation] @go(IpsecPolicy,[]IpsecPolicyObservation)

	// Use private local Azure IP for the connection. Changing this forces a new resource to be created.
	localAzureIpAddressEnabled?: null | bool @go(LocalAzureIPAddressEnabled,*bool)

	// The ID of the local network gateway when creating Site-to-Site connection (i.e. when type is IPsec).
	localNetworkGatewayId?: null | string @go(LocalNetworkGatewayID,*string)

	// The location/region where the connection is located. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when type is Vnet2Vnet). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
	peerVirtualNetworkGatewayId?: null | string @go(PeerVirtualNetworkGatewayID,*string)

	// The name of the resource group in which to create the connection Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The routing weight. Defaults to 10.
	routingWeight?: null | float64 @go(RoutingWeight,*float64)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// One or more traffic_selector_policy blocks which are documented below.
	// A traffic_selector_policy allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
	// For details about traffic selectors refer to the relevant section in the Azure documentation.
	trafficSelectorPolicy?: [...#TrafficSelectorPolicyObservation] @go(TrafficSelectorPolicy,[]TrafficSelectorPolicyObservation)

	// The type of connection. Valid options are IPsec (Site-to-Site), ExpressRoute (ExpressRoute), and Vnet2Vnet (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
	type?: null | string @go(Type,*string)

	// If true, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an ipsec_policy block. Defaults to false.
	usePolicyBasedTrafficSelectors?: null | bool @go(UsePolicyBasedTrafficSelectors,*bool)

	// The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
	virtualNetworkGatewayId?: null | string @go(VirtualNetworkGatewayID,*string)
}

#VirtualNetworkGatewayConnectionParameters: {
	// Connection mode to use. Possible values are Default, InitiatorOnly and ResponderOnly. Defaults to Default. Changing this value will force a resource to be created.
	// +kubebuilder:validation:Optional
	connectionMode?: null | string @go(ConnectionMode,*string)

	// The IKE protocol version to use. Possible values are IKEv1 and IKEv2, values are IKEv1 and IKEv2. Defaults to IKEv2. Changing this forces a new resource to be created.
	// -> Note: Only valid for IPSec connections on virtual network gateways with SKU VpnGw1, VpnGw2, VpnGw3, VpnGw1AZ, VpnGw2AZ or VpnGw3AZ.
	// +kubebuilder:validation:Optional
	connectionProtocol?: null | string @go(ConnectionProtocol,*string)

	// A custom_bgp_addresses (Border Gateway Protocol custom IP Addresses) block which is documented below.
	// The block can only be used on IPSec / activeactive connections,
	// For details about see the relevant section in the Azure documentation.
	// +kubebuilder:validation:Optional
	customBgpAddresses?: [...#CustomBGPAddressesParameters] @go(CustomBGPAddresses,[]CustomBGPAddressesParameters)

	// The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	dpdTimeoutSeconds?: null | float64 @go(DpdTimeoutSeconds,*float64)

	// A list of the egress NAT Rule Ids.
	// +kubebuilder:validation:Optional
	egressNatRuleIds?: [...null | string] @go(EgressNATRuleIds,[]*string)

	// If true, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to false.
	// +kubebuilder:validation:Optional
	enableBgp?: null | bool @go(EnableBGP,*bool)

	// The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when type is ExpressRoute). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	expressRouteCircuitId?: null | string @go(ExpressRouteCircuitID,*string)

	// If true, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
	// +kubebuilder:validation:Optional
	expressRouteGatewayBypass?: null | bool @go(ExpressRouteGatewayBypass,*bool)

	// A list of the ingress NAT Rule Ids.
	// +kubebuilder:validation:Optional
	ingressNatRuleIds?: [...null | string] @go(IngressNATRuleIds,[]*string)

	// A ipsec_policy block which is documented below.
	// Only a single policy can be defined for a connection. For details on
	// custom policies refer to the relevant section in the Azure documentation.
	// +kubebuilder:validation:Optional
	ipsecPolicy?: [...#IpsecPolicyParameters] @go(IpsecPolicy,[]IpsecPolicyParameters)

	// Use private local Azure IP for the connection. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	localAzureIpAddressEnabled?: null | bool @go(LocalAzureIPAddressEnabled,*bool)

	// The ID of the local network gateway when creating Site-to-Site connection (i.e. when type is IPsec).
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.LocalNetworkGateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	localNetworkGatewayId?: null | string @go(LocalNetworkGatewayID,*string)

	// The location/region where the connection is located. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when type is Vnet2Vnet). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=VirtualNetworkGateway
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	peerVirtualNetworkGatewayId?: null | string @go(PeerVirtualNetworkGatewayID,*string)

	// The name of the resource group in which to create the connection Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The routing weight. Defaults to 10.
	// +kubebuilder:validation:Optional
	routingWeight?: null | float64 @go(RoutingWeight,*float64)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// One or more traffic_selector_policy blocks which are documented below.
	// A traffic_selector_policy allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
	// For details about traffic selectors refer to the relevant section in the Azure documentation.
	// +kubebuilder:validation:Optional
	trafficSelectorPolicy?: [...#TrafficSelectorPolicyParameters] @go(TrafficSelectorPolicy,[]TrafficSelectorPolicyParameters)

	// The type of connection. Valid options are IPsec (Site-to-Site), ExpressRoute (ExpressRoute), and Vnet2Vnet (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// If true, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an ipsec_policy block. Defaults to false.
	// +kubebuilder:validation:Optional
	usePolicyBasedTrafficSelectors?: null | bool @go(UsePolicyBasedTrafficSelectors,*bool)

	// The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=VirtualNetworkGateway
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	virtualNetworkGatewayId?: null | string @go(VirtualNetworkGatewayID,*string)
}

// VirtualNetworkGatewayConnectionSpec defines the desired state of VirtualNetworkGatewayConnection
#VirtualNetworkGatewayConnectionSpec: {
	forProvider: #VirtualNetworkGatewayConnectionParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VirtualNetworkGatewayConnectionInitParameters @go(InitProvider)
}

// VirtualNetworkGatewayConnectionStatus defines the observed state of VirtualNetworkGatewayConnection.
#VirtualNetworkGatewayConnectionStatus: {
	atProvider?: #VirtualNetworkGatewayConnectionObservation @go(AtProvider)
}

// VirtualNetworkGatewayConnection is the Schema for the VirtualNetworkGatewayConnections API. Manages a connection in an existing Virtual Network Gateway.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#VirtualNetworkGatewayConnection: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	spec:    #VirtualNetworkGatewayConnectionSpec   @go(Spec)
	status?: #VirtualNetworkGatewayConnectionStatus @go(Status)
}

// VirtualNetworkGatewayConnectionList contains a list of VirtualNetworkGatewayConnections
#VirtualNetworkGatewayConnectionList: {
	items: [...#VirtualNetworkGatewayConnection] @go(Items,[]VirtualNetworkGatewayConnection)
}
