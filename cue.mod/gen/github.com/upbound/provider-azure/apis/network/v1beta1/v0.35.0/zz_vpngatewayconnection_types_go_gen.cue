// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#CustomBGPAddressInitParameters: {
	// The custom bgp ip address which belongs to the IP Configuration.
	ipAddress?: null | string @go(IPAddress,*string)

	// The ID of the IP Configuration which belongs to the VPN Gateway.
	ipConfigurationId?: null | string @go(IPConfigurationID,*string)
}

#CustomBGPAddressObservation: {
	// The custom bgp ip address which belongs to the IP Configuration.
	ipAddress?: null | string @go(IPAddress,*string)

	// The ID of the IP Configuration which belongs to the VPN Gateway.
	ipConfigurationId?: null | string @go(IPConfigurationID,*string)
}

#CustomBGPAddressParameters: {
	// The custom bgp ip address which belongs to the IP Configuration.
	// +kubebuilder:validation:Optional
	ipAddress?: null | string @go(IPAddress,*string)

	// The ID of the IP Configuration which belongs to the VPN Gateway.
	// +kubebuilder:validation:Optional
	ipConfigurationId?: null | string @go(IPConfigurationID,*string)
}

#VPNGatewayConnectionInitParameters: {
	// Whether Internet Security is enabled for this VPN Connection. Defaults to false.
	internetSecurityEnabled?: null | bool @go(InternetSecurityEnabled,*bool)

	// A routing block as defined below. If this is not specified, there will be a default route table created implicitly.
	routing?: [...#VPNGatewayConnectionRoutingInitParameters] @go(Routing,[]VPNGatewayConnectionRoutingInitParameters)

	// One or more traffic_selector_policy blocks as defined below.
	trafficSelectorPolicy?: [...#VPNGatewayConnectionTrafficSelectorPolicyInitParameters] @go(TrafficSelectorPolicy,[]VPNGatewayConnectionTrafficSelectorPolicyInitParameters)

	// One or more vpn_link blocks as defined below.
	vpnLink?: [...#VPNLinkInitParameters] @go(VPNLink,[]VPNLinkInitParameters)
}

#VPNGatewayConnectionObservation: {
	// The ID of the VPN Gateway Connection.
	id?: null | string @go(ID,*string)

	// Whether Internet Security is enabled for this VPN Connection. Defaults to false.
	internetSecurityEnabled?: null | bool @go(InternetSecurityEnabled,*bool)

	// The ID of the remote VPN Site, which will connect to the VPN Gateway. Changing this forces a new VPN Gateway Connection to be created.
	remoteVpnSiteId?: null | string @go(RemoteVPNSiteID,*string)

	// A routing block as defined below. If this is not specified, there will be a default route table created implicitly.
	routing?: [...#VPNGatewayConnectionRoutingObservation] @go(Routing,[]VPNGatewayConnectionRoutingObservation)

	// One or more traffic_selector_policy blocks as defined below.
	trafficSelectorPolicy?: [...#VPNGatewayConnectionTrafficSelectorPolicyObservation] @go(TrafficSelectorPolicy,[]VPNGatewayConnectionTrafficSelectorPolicyObservation)

	// The ID of the VPN Gateway that this VPN Gateway Connection belongs to. Changing this forces a new VPN Gateway Connection to be created.
	vpnGatewayId?: null | string @go(VPNGatewayID,*string)

	// One or more vpn_link blocks as defined below.
	vpnLink?: [...#VPNLinkObservation] @go(VPNLink,[]VPNLinkObservation)
}

#VPNGatewayConnectionParameters: {
	// Whether Internet Security is enabled for this VPN Connection. Defaults to false.
	// +kubebuilder:validation:Optional
	internetSecurityEnabled?: null | bool @go(InternetSecurityEnabled,*bool)

	// The ID of the remote VPN Site, which will connect to the VPN Gateway. Changing this forces a new VPN Gateway Connection to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.VPNSite
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	remoteVpnSiteId?: null | string @go(RemoteVPNSiteID,*string)

	// A routing block as defined below. If this is not specified, there will be a default route table created implicitly.
	// +kubebuilder:validation:Optional
	routing?: [...#VPNGatewayConnectionRoutingParameters] @go(Routing,[]VPNGatewayConnectionRoutingParameters)

	// One or more traffic_selector_policy blocks as defined below.
	// +kubebuilder:validation:Optional
	trafficSelectorPolicy?: [...#VPNGatewayConnectionTrafficSelectorPolicyParameters] @go(TrafficSelectorPolicy,[]VPNGatewayConnectionTrafficSelectorPolicyParameters)

	// The ID of the VPN Gateway that this VPN Gateway Connection belongs to. Changing this forces a new VPN Gateway Connection to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.VPNGateway
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	vpnGatewayId?: null | string @go(VPNGatewayID,*string)

	// One or more vpn_link blocks as defined below.
	// +kubebuilder:validation:Optional
	vpnLink?: [...#VPNLinkParameters] @go(VPNLink,[]VPNLinkParameters)
}

#VPNGatewayConnectionRoutingInitParameters: {
	// The ID of the Route Table associated with this VPN Connection.
	associatedRouteTable?: null | string @go(AssociatedRouteTable,*string)

	// The resource ID of the Route Map associated with this Routing Configuration for inbound learned routes.
	inboundRouteMapId?: null | string @go(InboundRouteMapID,*string)

	// The resource ID of the Route Map associated with this Routing Configuration for outbound advertised routes.
	outboundRouteMapId?: null | string @go(OutboundRouteMapID,*string)

	// A propagated_route_table block as defined below.
	propagatedRouteTable?: [...#VPNGatewayConnectionRoutingPropagatedRouteTableInitParameters] @go(PropagatedRouteTable,[]VPNGatewayConnectionRoutingPropagatedRouteTableInitParameters)
}

#VPNGatewayConnectionRoutingObservation: {
	// The ID of the Route Table associated with this VPN Connection.
	associatedRouteTable?: null | string @go(AssociatedRouteTable,*string)

	// The resource ID of the Route Map associated with this Routing Configuration for inbound learned routes.
	inboundRouteMapId?: null | string @go(InboundRouteMapID,*string)

	// The resource ID of the Route Map associated with this Routing Configuration for outbound advertised routes.
	outboundRouteMapId?: null | string @go(OutboundRouteMapID,*string)

	// A propagated_route_table block as defined below.
	propagatedRouteTable?: [...#VPNGatewayConnectionRoutingPropagatedRouteTableObservation] @go(PropagatedRouteTable,[]VPNGatewayConnectionRoutingPropagatedRouteTableObservation)
}

#VPNGatewayConnectionRoutingParameters: {
	// The ID of the Route Table associated with this VPN Connection.
	// +kubebuilder:validation:Optional
	associatedRouteTable?: null | string @go(AssociatedRouteTable,*string)

	// The resource ID of the Route Map associated with this Routing Configuration for inbound learned routes.
	// +kubebuilder:validation:Optional
	inboundRouteMapId?: null | string @go(InboundRouteMapID,*string)

	// The resource ID of the Route Map associated with this Routing Configuration for outbound advertised routes.
	// +kubebuilder:validation:Optional
	outboundRouteMapId?: null | string @go(OutboundRouteMapID,*string)

	// A propagated_route_table block as defined below.
	// +kubebuilder:validation:Optional
	propagatedRouteTable?: [...#VPNGatewayConnectionRoutingPropagatedRouteTableParameters] @go(PropagatedRouteTable,[]VPNGatewayConnectionRoutingPropagatedRouteTableParameters)
}

#VPNGatewayConnectionRoutingPropagatedRouteTableInitParameters: {
	// A list of labels to assign to this route table.
	labels?: [...null | string] @go(Labels,[]*string)

	// A list of Route Table IDs to associated with this VPN Gateway Connection.
	routeTableIds?: [...null | string] @go(RouteTableIds,[]*string)
}

#VPNGatewayConnectionRoutingPropagatedRouteTableObservation: {
	// A list of labels to assign to this route table.
	labels?: [...null | string] @go(Labels,[]*string)

	// A list of Route Table IDs to associated with this VPN Gateway Connection.
	routeTableIds?: [...null | string] @go(RouteTableIds,[]*string)
}

#VPNGatewayConnectionRoutingPropagatedRouteTableParameters: {
	// A list of labels to assign to this route table.
	// +kubebuilder:validation:Optional
	labels?: [...null | string] @go(Labels,[]*string)

	// A list of Route Table IDs to associated with this VPN Gateway Connection.
	// +kubebuilder:validation:Optional
	routeTableIds?: [...null | string] @go(RouteTableIds,[]*string)
}

#VPNGatewayConnectionTrafficSelectorPolicyInitParameters: {
	// A list of local address spaces in CIDR format for this VPN Gateway Connection.
	localAddressRanges?: [...null | string] @go(LocalAddressRanges,[]*string)

	// A list of remote address spaces in CIDR format for this VPN Gateway Connection.
	remoteAddressRanges?: [...null | string] @go(RemoteAddressRanges,[]*string)
}

#VPNGatewayConnectionTrafficSelectorPolicyObservation: {
	// A list of local address spaces in CIDR format for this VPN Gateway Connection.
	localAddressRanges?: [...null | string] @go(LocalAddressRanges,[]*string)

	// A list of remote address spaces in CIDR format for this VPN Gateway Connection.
	remoteAddressRanges?: [...null | string] @go(RemoteAddressRanges,[]*string)
}

#VPNGatewayConnectionTrafficSelectorPolicyParameters: {
	// A list of local address spaces in CIDR format for this VPN Gateway Connection.
	// +kubebuilder:validation:Optional
	localAddressRanges?: [...null | string] @go(LocalAddressRanges,[]*string)

	// A list of remote address spaces in CIDR format for this VPN Gateway Connection.
	// +kubebuilder:validation:Optional
	remoteAddressRanges?: [...null | string] @go(RemoteAddressRanges,[]*string)
}

#VPNLinkInitParameters: {
	// Should the BGP be enabled? Defaults to false. Changing this forces a new VPN Gateway Connection to be created.
	bgpEnabled?: null | bool @go(BGPEnabled,*bool)

	// The expected connection bandwidth in MBPS. Defaults to 10.
	bandwidthMbps?: null | float64 @go(BandwidthMbps,*float64)

	// The connection mode of this VPN Link. Possible values are Default, InitiatorOnly and ResponderOnly. Defaults to Default.
	connectionMode?: null | string @go(ConnectionMode,*string)

	// One or more custom_bgp_address blocks as defined below.
	customBgpAddress?: [...#CustomBGPAddressInitParameters] @go(CustomBGPAddress,[]CustomBGPAddressInitParameters)

	// A list of the egress NAT Rule Ids.
	egressNatRuleIds?: [...null | string] @go(EgressNATRuleIds,[]*string)

	// A list of the ingress NAT Rule Ids.
	ingressNatRuleIds?: [...null | string] @go(IngressNATRuleIds,[]*string)

	// One or more ipsec_policy blocks as defined above.
	ipsecPolicy?: [...#VPNLinkIpsecPolicyInitParameters] @go(IpsecPolicy,[]VPNLinkIpsecPolicyInitParameters)

	// Whether to use local Azure IP to initiate connection? Defaults to false.
	localAzureIpAddressEnabled?: null | bool @go(LocalAzureIPAddressEnabled,*bool)

	// The name which should be used for this VPN Link Connection.
	name?: null | string @go(Name,*string)

	// Whether to enable policy-based traffic selectors? Defaults to false.
	policyBasedTrafficSelectorEnabled?: null | bool @go(PolicyBasedTrafficSelectorEnabled,*bool)

	// The protocol used for this VPN Link Connection. Possible values are IKEv1 and IKEv2. Defaults to IKEv2.
	protocol?: null | string @go(Protocol,*string)

	// Should the rate limit be enabled? Defaults to false.
	ratelimitEnabled?: null | bool @go(RatelimitEnabled,*bool)

	// Routing weight for this VPN Link Connection. Defaults to 0.
	routeWeight?: null | float64 @go(RouteWeight,*float64)

	// SharedKey for this VPN Link Connection.
	sharedKey?: null | string @go(SharedKey,*string)

	// The ID of the connected VPN Site Link. Changing this forces a new VPN Gateway Connection to be created.
	vpnSiteLinkId?: null | string @go(VPNSiteLinkID,*string)
}

#VPNLinkIpsecPolicyInitParameters: {
	// The DH Group used in IKE Phase 1 for initial SA. Possible values are None, DHGroup1, DHGroup2, DHGroup14, DHGroup24, DHGroup2048, ECP256, ECP384.
	dhGroup?: null | string @go(DhGroup,*string)

	// The IPSec encryption algorithm (IKE phase 1). Possible values are AES128, AES192, AES256, DES, DES3, GCMAES128, GCMAES192, GCMAES256, None.
	encryptionAlgorithm?: null | string @go(EncryptionAlgorithm,*string)

	// The IKE encryption algorithm (IKE phase 2). Possible values are DES, DES3, AES128, AES192, AES256, GCMAES128, GCMAES256.
	ikeEncryptionAlgorithm?: null | string @go(IkeEncryptionAlgorithm,*string)

	// The IKE integrity algorithm (IKE phase 2). Possible values are MD5, SHA1, SHA256, SHA384, GCMAES128, GCMAES256.
	ikeIntegrityAlgorithm?: null | string @go(IkeIntegrityAlgorithm,*string)

	// The IPSec integrity algorithm (IKE phase 1). Possible values are MD5, SHA1, SHA256, GCMAES128, GCMAES192, GCMAES256.
	integrityAlgorithm?: null | string @go(IntegrityAlgorithm,*string)

	// The Pfs Group used in IKE Phase 2 for the new child SA. Possible values are None, PFS1, PFS2, PFS14, PFS24, PFS2048, PFSMM, ECP256, ECP384.
	pfsGroup?: null | string @go(PfsGroup,*string)

	// The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for the site to site VPN tunnel.
	saDataSizeKb?: null | float64 @go(SaDataSizeKb,*float64)

	// The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for the site to site VPN tunnel.
	saLifetimeSec?: null | float64 @go(SaLifetimeSec,*float64)
}

#VPNLinkIpsecPolicyObservation: {
	// The DH Group used in IKE Phase 1 for initial SA. Possible values are None, DHGroup1, DHGroup2, DHGroup14, DHGroup24, DHGroup2048, ECP256, ECP384.
	dhGroup?: null | string @go(DhGroup,*string)

	// The IPSec encryption algorithm (IKE phase 1). Possible values are AES128, AES192, AES256, DES, DES3, GCMAES128, GCMAES192, GCMAES256, None.
	encryptionAlgorithm?: null | string @go(EncryptionAlgorithm,*string)

	// The IKE encryption algorithm (IKE phase 2). Possible values are DES, DES3, AES128, AES192, AES256, GCMAES128, GCMAES256.
	ikeEncryptionAlgorithm?: null | string @go(IkeEncryptionAlgorithm,*string)

	// The IKE integrity algorithm (IKE phase 2). Possible values are MD5, SHA1, SHA256, SHA384, GCMAES128, GCMAES256.
	ikeIntegrityAlgorithm?: null | string @go(IkeIntegrityAlgorithm,*string)

	// The IPSec integrity algorithm (IKE phase 1). Possible values are MD5, SHA1, SHA256, GCMAES128, GCMAES192, GCMAES256.
	integrityAlgorithm?: null | string @go(IntegrityAlgorithm,*string)

	// The Pfs Group used in IKE Phase 2 for the new child SA. Possible values are None, PFS1, PFS2, PFS14, PFS24, PFS2048, PFSMM, ECP256, ECP384.
	pfsGroup?: null | string @go(PfsGroup,*string)

	// The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for the site to site VPN tunnel.
	saDataSizeKb?: null | float64 @go(SaDataSizeKb,*float64)

	// The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for the site to site VPN tunnel.
	saLifetimeSec?: null | float64 @go(SaLifetimeSec,*float64)
}

#VPNLinkIpsecPolicyParameters: {
	// The DH Group used in IKE Phase 1 for initial SA. Possible values are None, DHGroup1, DHGroup2, DHGroup14, DHGroup24, DHGroup2048, ECP256, ECP384.
	// +kubebuilder:validation:Optional
	dhGroup?: null | string @go(DhGroup,*string)

	// The IPSec encryption algorithm (IKE phase 1). Possible values are AES128, AES192, AES256, DES, DES3, GCMAES128, GCMAES192, GCMAES256, None.
	// +kubebuilder:validation:Optional
	encryptionAlgorithm?: null | string @go(EncryptionAlgorithm,*string)

	// The IKE encryption algorithm (IKE phase 2). Possible values are DES, DES3, AES128, AES192, AES256, GCMAES128, GCMAES256.
	// +kubebuilder:validation:Optional
	ikeEncryptionAlgorithm?: null | string @go(IkeEncryptionAlgorithm,*string)

	// The IKE integrity algorithm (IKE phase 2). Possible values are MD5, SHA1, SHA256, SHA384, GCMAES128, GCMAES256.
	// +kubebuilder:validation:Optional
	ikeIntegrityAlgorithm?: null | string @go(IkeIntegrityAlgorithm,*string)

	// The IPSec integrity algorithm (IKE phase 1). Possible values are MD5, SHA1, SHA256, GCMAES128, GCMAES192, GCMAES256.
	// +kubebuilder:validation:Optional
	integrityAlgorithm?: null | string @go(IntegrityAlgorithm,*string)

	// The Pfs Group used in IKE Phase 2 for the new child SA. Possible values are None, PFS1, PFS2, PFS14, PFS24, PFS2048, PFSMM, ECP256, ECP384.
	// +kubebuilder:validation:Optional
	pfsGroup?: null | string @go(PfsGroup,*string)

	// The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for the site to site VPN tunnel.
	// +kubebuilder:validation:Optional
	saDataSizeKb?: null | float64 @go(SaDataSizeKb,*float64)

	// The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for the site to site VPN tunnel.
	// +kubebuilder:validation:Optional
	saLifetimeSec?: null | float64 @go(SaLifetimeSec,*float64)
}

#VPNLinkObservation: {
	// Should the BGP be enabled? Defaults to false. Changing this forces a new VPN Gateway Connection to be created.
	bgpEnabled?: null | bool @go(BGPEnabled,*bool)

	// The expected connection bandwidth in MBPS. Defaults to 10.
	bandwidthMbps?: null | float64 @go(BandwidthMbps,*float64)

	// The connection mode of this VPN Link. Possible values are Default, InitiatorOnly and ResponderOnly. Defaults to Default.
	connectionMode?: null | string @go(ConnectionMode,*string)

	// One or more custom_bgp_address blocks as defined below.
	customBgpAddress?: [...#CustomBGPAddressObservation] @go(CustomBGPAddress,[]CustomBGPAddressObservation)

	// A list of the egress NAT Rule Ids.
	egressNatRuleIds?: [...null | string] @go(EgressNATRuleIds,[]*string)

	// A list of the ingress NAT Rule Ids.
	ingressNatRuleIds?: [...null | string] @go(IngressNATRuleIds,[]*string)

	// One or more ipsec_policy blocks as defined above.
	ipsecPolicy?: [...#VPNLinkIpsecPolicyObservation] @go(IpsecPolicy,[]VPNLinkIpsecPolicyObservation)

	// Whether to use local Azure IP to initiate connection? Defaults to false.
	localAzureIpAddressEnabled?: null | bool @go(LocalAzureIPAddressEnabled,*bool)

	// The name which should be used for this VPN Link Connection.
	name?: null | string @go(Name,*string)

	// Whether to enable policy-based traffic selectors? Defaults to false.
	policyBasedTrafficSelectorEnabled?: null | bool @go(PolicyBasedTrafficSelectorEnabled,*bool)

	// The protocol used for this VPN Link Connection. Possible values are IKEv1 and IKEv2. Defaults to IKEv2.
	protocol?: null | string @go(Protocol,*string)

	// Should the rate limit be enabled? Defaults to false.
	ratelimitEnabled?: null | bool @go(RatelimitEnabled,*bool)

	// Routing weight for this VPN Link Connection. Defaults to 0.
	routeWeight?: null | float64 @go(RouteWeight,*float64)

	// SharedKey for this VPN Link Connection.
	sharedKey?: null | string @go(SharedKey,*string)

	// The ID of the connected VPN Site Link. Changing this forces a new VPN Gateway Connection to be created.
	vpnSiteLinkId?: null | string @go(VPNSiteLinkID,*string)
}

#VPNLinkParameters: {
	// Should the BGP be enabled? Defaults to false. Changing this forces a new VPN Gateway Connection to be created.
	// +kubebuilder:validation:Optional
	bgpEnabled?: null | bool @go(BGPEnabled,*bool)

	// The expected connection bandwidth in MBPS. Defaults to 10.
	// +kubebuilder:validation:Optional
	bandwidthMbps?: null | float64 @go(BandwidthMbps,*float64)

	// The connection mode of this VPN Link. Possible values are Default, InitiatorOnly and ResponderOnly. Defaults to Default.
	// +kubebuilder:validation:Optional
	connectionMode?: null | string @go(ConnectionMode,*string)

	// One or more custom_bgp_address blocks as defined below.
	// +kubebuilder:validation:Optional
	customBgpAddress?: [...#CustomBGPAddressParameters] @go(CustomBGPAddress,[]CustomBGPAddressParameters)

	// A list of the egress NAT Rule Ids.
	// +kubebuilder:validation:Optional
	egressNatRuleIds?: [...null | string] @go(EgressNATRuleIds,[]*string)

	// A list of the ingress NAT Rule Ids.
	// +kubebuilder:validation:Optional
	ingressNatRuleIds?: [...null | string] @go(IngressNATRuleIds,[]*string)

	// One or more ipsec_policy blocks as defined above.
	// +kubebuilder:validation:Optional
	ipsecPolicy?: [...#VPNLinkIpsecPolicyParameters] @go(IpsecPolicy,[]VPNLinkIpsecPolicyParameters)

	// Whether to use local Azure IP to initiate connection? Defaults to false.
	// +kubebuilder:validation:Optional
	localAzureIpAddressEnabled?: null | bool @go(LocalAzureIPAddressEnabled,*bool)

	// The name which should be used for this VPN Link Connection.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Whether to enable policy-based traffic selectors? Defaults to false.
	// +kubebuilder:validation:Optional
	policyBasedTrafficSelectorEnabled?: null | bool @go(PolicyBasedTrafficSelectorEnabled,*bool)

	// The protocol used for this VPN Link Connection. Possible values are IKEv1 and IKEv2. Defaults to IKEv2.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)

	// Should the rate limit be enabled? Defaults to false.
	// +kubebuilder:validation:Optional
	ratelimitEnabled?: null | bool @go(RatelimitEnabled,*bool)

	// Routing weight for this VPN Link Connection. Defaults to 0.
	// +kubebuilder:validation:Optional
	routeWeight?: null | float64 @go(RouteWeight,*float64)

	// SharedKey for this VPN Link Connection.
	// +kubebuilder:validation:Optional
	sharedKey?: null | string @go(SharedKey,*string)

	// The ID of the connected VPN Site Link. Changing this forces a new VPN Gateway Connection to be created.
	// +kubebuilder:validation:Optional
	vpnSiteLinkId?: null | string @go(VPNSiteLinkID,*string)
}

// VPNGatewayConnectionSpec defines the desired state of VPNGatewayConnection
#VPNGatewayConnectionSpec: {
	forProvider: #VPNGatewayConnectionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VPNGatewayConnectionInitParameters @go(InitProvider)
}

// VPNGatewayConnectionStatus defines the observed state of VPNGatewayConnection.
#VPNGatewayConnectionStatus: {
	atProvider?: #VPNGatewayConnectionObservation @go(AtProvider)
}

// VPNGatewayConnection is the Schema for the VPNGatewayConnections API. Manages a VPN Gateway Connection.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#VPNGatewayConnection: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpnLink) || has(self.initProvider.vpnLink)",message="vpnLink is a required parameter"
	spec:    #VPNGatewayConnectionSpec   @go(Spec)
	status?: #VPNGatewayConnectionStatus @go(Status)
}

// VPNGatewayConnectionList contains a list of VPNGatewayConnections
#VPNGatewayConnectionList: {
	items: [...#VPNGatewayConnection] @go(Items,[]VPNGatewayConnection)
}
