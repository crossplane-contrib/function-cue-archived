// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#NATIPConfigurationInitParameters: {
	// Specifies the name which should be used for the NAT IP Configuration. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// Is this is the Primary IP Configuration? Changing this forces a new resource to be created.
	primary?: null | bool @go(Primary,*bool)

	// Specifies a Private Static IP Address for this IP Configuration.
	privateIpAddress?: null | string @go(PrivateIPAddress,*string)

	// The version of the IP Protocol which should be used. At this time the only supported value is IPv4. Defaults to IPv4.
	privateIpAddressVersion?: null | string @go(PrivateIPAddressVersion,*string)
}

#NATIPConfigurationObservation: {
	// Specifies the name which should be used for the NAT IP Configuration. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// Is this is the Primary IP Configuration? Changing this forces a new resource to be created.
	primary?: null | bool @go(Primary,*bool)

	// Specifies a Private Static IP Address for this IP Configuration.
	privateIpAddress?: null | string @go(PrivateIPAddress,*string)

	// The version of the IP Protocol which should be used. At this time the only supported value is IPv4. Defaults to IPv4.
	privateIpAddressVersion?: null | string @go(PrivateIPAddressVersion,*string)

	// Specifies the ID of the Subnet which should be used for the Private Link Service.
	subnetId?: null | string @go(SubnetID,*string)
}

#NATIPConfigurationParameters: {
	// Specifies the name which should be used for the NAT IP Configuration. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Is this is the Primary IP Configuration? Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	primary?: null | bool @go(Primary,*bool)

	// Specifies a Private Static IP Address for this IP Configuration.
	// +kubebuilder:validation:Optional
	privateIpAddress?: null | string @go(PrivateIPAddress,*string)

	// The version of the IP Protocol which should be used. At this time the only supported value is IPv4. Defaults to IPv4.
	// +kubebuilder:validation:Optional
	privateIpAddressVersion?: null | string @go(PrivateIPAddressVersion,*string)

	// Specifies the ID of the Subnet which should be used for the Private Link Service.
	// +crossplane:generate:reference:type=Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)
}

#PrivateLinkServiceInitParameters: {
	// A list of Subscription UUID/GUID's that will be automatically be able to use this Private Link Service.
	autoApprovalSubscriptionIds?: [...null | string] @go(AutoApprovalSubscriptionIds,[]*string)

	// Should the Private Link Service support the Proxy Protocol?
	enableProxyProtocol?: null | bool @go(EnableProxyProtocol,*bool)

	// List of FQDNs allowed for the Private Link Service.
	fqdns?: [...null | string] @go(Fqdns,[]*string)

	// A list of Frontend IP Configuration IDs from a Standard Load Balancer, where traffic from the Private Link Service should be routed. You can use Load Balancer Rules to direct this traffic to appropriate backend pools where your applications are running. Changing this forces a new resource to be created.
	loadBalancerFrontendIpConfigurationIds?: [...null | string] @go(LoadBalancerFrontendIPConfigurationIds,[]*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// One or more (up to 8) nat_ip_configuration block as defined below.
	natIpConfiguration?: [...#NATIPConfigurationInitParameters] @go(NATIPConfiguration,[]NATIPConfigurationInitParameters)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A list of Subscription UUID/GUID's that will be able to see this Private Link Service.
	visibilitySubscriptionIds?: [...null | string] @go(VisibilitySubscriptionIds,[]*string)
}

#PrivateLinkServiceObservation: {
	// A globally unique DNS Name for your Private Link Service. You can use this alias to request a connection to your Private Link Service.
	alias?: null | string @go(Alias,*string)

	// A list of Subscription UUID/GUID's that will be automatically be able to use this Private Link Service.
	autoApprovalSubscriptionIds?: [...null | string] @go(AutoApprovalSubscriptionIds,[]*string)

	// Should the Private Link Service support the Proxy Protocol?
	enableProxyProtocol?: null | bool @go(EnableProxyProtocol,*bool)

	// List of FQDNs allowed for the Private Link Service.
	fqdns?: [...null | string] @go(Fqdns,[]*string)
	id?: null | string @go(ID,*string)

	// A list of Frontend IP Configuration IDs from a Standard Load Balancer, where traffic from the Private Link Service should be routed. You can use Load Balancer Rules to direct this traffic to appropriate backend pools where your applications are running. Changing this forces a new resource to be created.
	loadBalancerFrontendIpConfigurationIds?: [...null | string] @go(LoadBalancerFrontendIPConfigurationIds,[]*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// One or more (up to 8) nat_ip_configuration block as defined below.
	natIpConfiguration?: [...#NATIPConfigurationObservation] @go(NATIPConfiguration,[]NATIPConfigurationObservation)

	// The name of the Resource Group where the Private Link Service should exist. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A list of Subscription UUID/GUID's that will be able to see this Private Link Service.
	visibilitySubscriptionIds?: [...null | string] @go(VisibilitySubscriptionIds,[]*string)
}

#PrivateLinkServiceParameters: {
	// A list of Subscription UUID/GUID's that will be automatically be able to use this Private Link Service.
	// +kubebuilder:validation:Optional
	autoApprovalSubscriptionIds?: [...null | string] @go(AutoApprovalSubscriptionIds,[]*string)

	// Should the Private Link Service support the Proxy Protocol?
	// +kubebuilder:validation:Optional
	enableProxyProtocol?: null | bool @go(EnableProxyProtocol,*bool)

	// List of FQDNs allowed for the Private Link Service.
	// +kubebuilder:validation:Optional
	fqdns?: [...null | string] @go(Fqdns,[]*string)

	// A list of Frontend IP Configuration IDs from a Standard Load Balancer, where traffic from the Private Link Service should be routed. You can use Load Balancer Rules to direct this traffic to appropriate backend pools where your applications are running. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	loadBalancerFrontendIpConfigurationIds?: [...null | string] @go(LoadBalancerFrontendIPConfigurationIds,[]*string)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// One or more (up to 8) nat_ip_configuration block as defined below.
	// +kubebuilder:validation:Optional
	natIpConfiguration?: [...#NATIPConfigurationParameters] @go(NATIPConfiguration,[]NATIPConfigurationParameters)

	// The name of the Resource Group where the Private Link Service should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A list of Subscription UUID/GUID's that will be able to see this Private Link Service.
	// +kubebuilder:validation:Optional
	visibilitySubscriptionIds?: [...null | string] @go(VisibilitySubscriptionIds,[]*string)
}

// PrivateLinkServiceSpec defines the desired state of PrivateLinkService
#PrivateLinkServiceSpec: {
	forProvider: #PrivateLinkServiceParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PrivateLinkServiceInitParameters @go(InitProvider)
}

// PrivateLinkServiceStatus defines the observed state of PrivateLinkService.
#PrivateLinkServiceStatus: {
	atProvider?: #PrivateLinkServiceObservation @go(AtProvider)
}

// PrivateLinkService is the Schema for the PrivateLinkServices API. Manages a Private Link Service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#PrivateLinkService: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loadBalancerFrontendIpConfigurationIds) || (has(self.initProvider) && has(self.initProvider.loadBalancerFrontendIpConfigurationIds))",message="spec.forProvider.loadBalancerFrontendIpConfigurationIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.natIpConfiguration) || (has(self.initProvider) && has(self.initProvider.natIpConfiguration))",message="spec.forProvider.natIpConfiguration is a required parameter"
	spec:    #PrivateLinkServiceSpec   @go(Spec)
	status?: #PrivateLinkServiceStatus @go(Status)
}

// PrivateLinkServiceList contains a list of PrivateLinkServices
#PrivateLinkServiceList: {
	items: [...#PrivateLinkService] @go(Items,[]PrivateLinkService)
}
