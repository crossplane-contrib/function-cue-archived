// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#ExpressRoutePortIdentityInitParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Express Route Port.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Express Route Port. Only possible value is UserAssigned.
	type?: null | string @go(Type,*string)
}

#ExpressRoutePortIdentityObservation: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Express Route Port.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Express Route Port. Only possible value is UserAssigned.
	type?: null | string @go(Type,*string)
}

#ExpressRoutePortIdentityParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Express Route Port.
	// +kubebuilder:validation:Optional
	identityIds: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this Express Route Port. Only possible value is UserAssigned.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#ExpressRoutePortInitParameters: {
	// Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
	bandwidthInGbps?: null | float64 @go(BandwidthInGbps,*float64)

	// The billing type of the Express Route Port. Possible values are MeteredData and UnlimitedData.
	billingType?: null | string @go(BillingType,*string)

	// The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: Dot1Q, QinQ.
	encapsulation?: null | string @go(Encapsulation,*string)

	// An identity block as defined below.
	identity?: [...#ExpressRoutePortIdentityInitParameters] @go(Identity,[]ExpressRoutePortIdentityInitParameters)

	// A list of link blocks as defined below.
	link1?: [...#Link1InitParameters] @go(Link1,[]Link1InitParameters)

	// A list of link blocks as defined below.
	link2?: [...#Link2InitParameters] @go(Link2,[]Link2InitParameters)

	// The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	location?: null | string @go(Location,*string)

	// The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
	peeringLocation?: null | string @go(PeeringLocation,*string)

	// A mapping of tags which should be assigned to the Express Route Port.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ExpressRoutePortObservation: {
	// Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
	bandwidthInGbps?: null | float64 @go(BandwidthInGbps,*float64)

	// The billing type of the Express Route Port. Possible values are MeteredData and UnlimitedData.
	billingType?: null | string @go(BillingType,*string)

	// The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: Dot1Q, QinQ.
	encapsulation?: null | string @go(Encapsulation,*string)

	// The EtherType of the Express Route Port.
	ethertype?: null | string @go(Ethertype,*string)

	// The resource GUID of the Express Route Port.
	guid?: null | string @go(GUID,*string)

	// The ID of the Express Route Port.
	id?: null | string @go(ID,*string)

	// An identity block as defined below.
	identity?: [...#ExpressRoutePortIdentityObservation] @go(Identity,[]ExpressRoutePortIdentityObservation)

	// A list of link blocks as defined below.
	link1?: [...#Link1Observation] @go(Link1,[]Link1Observation)

	// A list of link blocks as defined below.
	link2?: [...#Link2Observation] @go(Link2,[]Link2Observation)

	// The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	location?: null | string @go(Location,*string)

	// The maximum transmission unit of the Express Route Port.
	mtu?: null | string @go(Mtu,*string)

	// The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
	peeringLocation?: null | string @go(PeeringLocation,*string)

	// The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags which should be assigned to the Express Route Port.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ExpressRoutePortParameters: {
	// Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
	// +kubebuilder:validation:Optional
	bandwidthInGbps?: null | float64 @go(BandwidthInGbps,*float64)

	// The billing type of the Express Route Port. Possible values are MeteredData and UnlimitedData.
	// +kubebuilder:validation:Optional
	billingType?: null | string @go(BillingType,*string)

	// The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: Dot1Q, QinQ.
	// +kubebuilder:validation:Optional
	encapsulation?: null | string @go(Encapsulation,*string)

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	identity?: [...#ExpressRoutePortIdentityParameters] @go(Identity,[]ExpressRoutePortIdentityParameters)

	// A list of link blocks as defined below.
	// +kubebuilder:validation:Optional
	link1?: [...#Link1Parameters] @go(Link1,[]Link1Parameters)

	// A list of link blocks as defined below.
	// +kubebuilder:validation:Optional
	link2?: [...#Link2Parameters] @go(Link2,[]Link2Parameters)

	// The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
	// +kubebuilder:validation:Optional
	peeringLocation?: null | string @go(PeeringLocation,*string)

	// The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags which should be assigned to the Express Route Port.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#Link1InitParameters: {
	// Whether enable administration state on the Express Route Port Link? Defaults to false.
	adminEnabled?: null | bool @go(AdminEnabled,*bool)

	// The ID of the Key Vault Secret that contains the Mac security CAK key for this Express Route Port Link.
	macsecCakKeyvaultSecretId?: null | string @go(MacsecCakKeyvaultSecretID,*string)

	// The MACSec cipher used for this Express Route Port Link. Possible values are GcmAes128 and GcmAes256. Defaults to GcmAes128.
	macsecCipher?: null | string @go(MacsecCipher,*string)

	// The ID of the Key Vault Secret that contains the MACSec CKN key for this Express Route Port Link.
	macsecCknKeyvaultSecretId?: null | string @go(MacsecCknKeyvaultSecretID,*string)
}

#Link1Observation: {
	// Whether enable administration state on the Express Route Port Link? Defaults to false.
	adminEnabled?: null | bool @go(AdminEnabled,*bool)

	// The connector type of the Express Route Port Link.
	connectorType?: null | string @go(ConnectorType,*string)

	// The ID of this Express Route Port Link.
	id?: null | string @go(ID,*string)

	// The interface name of the Azure router associated with the Express Route Port Link.
	interfaceName?: null | string @go(InterfaceName,*string)

	// The ID of the Key Vault Secret that contains the Mac security CAK key for this Express Route Port Link.
	macsecCakKeyvaultSecretId?: null | string @go(MacsecCakKeyvaultSecretID,*string)

	// The MACSec cipher used for this Express Route Port Link. Possible values are GcmAes128 and GcmAes256. Defaults to GcmAes128.
	macsecCipher?: null | string @go(MacsecCipher,*string)

	// The ID of the Key Vault Secret that contains the MACSec CKN key for this Express Route Port Link.
	macsecCknKeyvaultSecretId?: null | string @go(MacsecCknKeyvaultSecretID,*string)

	// The ID that maps from the Express Route Port Link to the patch panel port.
	patchPanelId?: null | string @go(PatchPanelID,*string)

	// The ID that maps from the patch panel port to the rack.
	rackId?: null | string @go(RackID,*string)

	// The name of the Azure router associated with the Express Route Port Link.
	routerName?: null | string @go(RouterName,*string)
}

#Link1Parameters: {
	// Whether enable administration state on the Express Route Port Link? Defaults to false.
	// +kubebuilder:validation:Optional
	adminEnabled?: null | bool @go(AdminEnabled,*bool)

	// The ID of the Key Vault Secret that contains the Mac security CAK key for this Express Route Port Link.
	// +kubebuilder:validation:Optional
	macsecCakKeyvaultSecretId?: null | string @go(MacsecCakKeyvaultSecretID,*string)

	// The MACSec cipher used for this Express Route Port Link. Possible values are GcmAes128 and GcmAes256. Defaults to GcmAes128.
	// +kubebuilder:validation:Optional
	macsecCipher?: null | string @go(MacsecCipher,*string)

	// The ID of the Key Vault Secret that contains the MACSec CKN key for this Express Route Port Link.
	// +kubebuilder:validation:Optional
	macsecCknKeyvaultSecretId?: null | string @go(MacsecCknKeyvaultSecretID,*string)
}

#Link2InitParameters: {
	// Whether enable administration state on the Express Route Port Link? Defaults to false.
	adminEnabled?: null | bool @go(AdminEnabled,*bool)

	// The ID of the Key Vault Secret that contains the Mac security CAK key for this Express Route Port Link.
	macsecCakKeyvaultSecretId?: null | string @go(MacsecCakKeyvaultSecretID,*string)

	// The MACSec cipher used for this Express Route Port Link. Possible values are GcmAes128 and GcmAes256. Defaults to GcmAes128.
	macsecCipher?: null | string @go(MacsecCipher,*string)

	// The ID of the Key Vault Secret that contains the MACSec CKN key for this Express Route Port Link.
	macsecCknKeyvaultSecretId?: null | string @go(MacsecCknKeyvaultSecretID,*string)
}

#Link2Observation: {
	// Whether enable administration state on the Express Route Port Link? Defaults to false.
	adminEnabled?: null | bool @go(AdminEnabled,*bool)

	// The connector type of the Express Route Port Link.
	connectorType?: null | string @go(ConnectorType,*string)

	// The ID of this Express Route Port Link.
	id?: null | string @go(ID,*string)

	// The interface name of the Azure router associated with the Express Route Port Link.
	interfaceName?: null | string @go(InterfaceName,*string)

	// The ID of the Key Vault Secret that contains the Mac security CAK key for this Express Route Port Link.
	macsecCakKeyvaultSecretId?: null | string @go(MacsecCakKeyvaultSecretID,*string)

	// The MACSec cipher used for this Express Route Port Link. Possible values are GcmAes128 and GcmAes256. Defaults to GcmAes128.
	macsecCipher?: null | string @go(MacsecCipher,*string)

	// The ID of the Key Vault Secret that contains the MACSec CKN key for this Express Route Port Link.
	macsecCknKeyvaultSecretId?: null | string @go(MacsecCknKeyvaultSecretID,*string)

	// The ID that maps from the Express Route Port Link to the patch panel port.
	patchPanelId?: null | string @go(PatchPanelID,*string)

	// The ID that maps from the patch panel port to the rack.
	rackId?: null | string @go(RackID,*string)

	// The name of the Azure router associated with the Express Route Port Link.
	routerName?: null | string @go(RouterName,*string)
}

#Link2Parameters: {
	// Whether enable administration state on the Express Route Port Link? Defaults to false.
	// +kubebuilder:validation:Optional
	adminEnabled?: null | bool @go(AdminEnabled,*bool)

	// The ID of the Key Vault Secret that contains the Mac security CAK key for this Express Route Port Link.
	// +kubebuilder:validation:Optional
	macsecCakKeyvaultSecretId?: null | string @go(MacsecCakKeyvaultSecretID,*string)

	// The MACSec cipher used for this Express Route Port Link. Possible values are GcmAes128 and GcmAes256. Defaults to GcmAes128.
	// +kubebuilder:validation:Optional
	macsecCipher?: null | string @go(MacsecCipher,*string)

	// The ID of the Key Vault Secret that contains the MACSec CKN key for this Express Route Port Link.
	// +kubebuilder:validation:Optional
	macsecCknKeyvaultSecretId?: null | string @go(MacsecCknKeyvaultSecretID,*string)
}

// ExpressRoutePortSpec defines the desired state of ExpressRoutePort
#ExpressRoutePortSpec: {
	forProvider: #ExpressRoutePortParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ExpressRoutePortInitParameters @go(InitProvider)
}

// ExpressRoutePortStatus defines the observed state of ExpressRoutePort.
#ExpressRoutePortStatus: {
	atProvider?: #ExpressRoutePortObservation @go(AtProvider)
}

// ExpressRoutePort is the Schema for the ExpressRoutePorts API. Manages a Express Route Port.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ExpressRoutePort: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bandwidthInGbps) || has(self.initProvider.bandwidthInGbps)",message="bandwidthInGbps is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.encapsulation) || has(self.initProvider.encapsulation)",message="encapsulation is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || has(self.initProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.peeringLocation) || has(self.initProvider.peeringLocation)",message="peeringLocation is a required parameter"
	spec:    #ExpressRoutePortSpec   @go(Spec)
	status?: #ExpressRoutePortStatus @go(Status)
}

// ExpressRoutePortList contains a list of ExpressRoutePorts
#ExpressRoutePortList: {
	items: [...#ExpressRoutePort] @go(Items,[]ExpressRoutePort)
}
