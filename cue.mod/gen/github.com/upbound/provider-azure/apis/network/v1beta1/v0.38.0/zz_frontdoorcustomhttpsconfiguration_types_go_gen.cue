// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#CustomHTTPSConfigurationInitParameters: {
	// The name of the Key Vault secret representing the full certificate PFX.
	azureKeyVaultCertificateSecretName?: null | string @go(AzureKeyVaultCertificateSecretName,*string)

	// The version of the Key Vault secret representing the full certificate PFX.
	azureKeyVaultCertificateSecretVersion?: null | string @go(AzureKeyVaultCertificateSecretVersion,*string)

	// Certificate source to encrypted HTTPS traffic with. Allowed values are FrontDoor or AzureKeyVault. Defaults to FrontDoor.
	certificateSource?: null | string @go(CertificateSource,*string)
}

#CustomHTTPSConfigurationObservation: {
	// The name of the Key Vault secret representing the full certificate PFX.
	azureKeyVaultCertificateSecretName?: null | string @go(AzureKeyVaultCertificateSecretName,*string)

	// The version of the Key Vault secret representing the full certificate PFX.
	azureKeyVaultCertificateSecretVersion?: null | string @go(AzureKeyVaultCertificateSecretVersion,*string)

	// The ID of the Key Vault containing the SSL certificate.
	azureKeyVaultCertificateVaultId?: null | string @go(AzureKeyVaultCertificateVaultID,*string)

	// Certificate source to encrypted HTTPS traffic with. Allowed values are FrontDoor or AzureKeyVault. Defaults to FrontDoor.
	certificateSource?: null | string @go(CertificateSource,*string)

	// Minimum client TLS version supported.
	minimumTlsVersion?:    null | string @go(MinimumTLSVersion,*string)
	provisioningState?:    null | string @go(ProvisioningState,*string)
	provisioningSubstate?: null | string @go(ProvisioningSubstate,*string)
}

#CustomHTTPSConfigurationParameters: {
	// The name of the Key Vault secret representing the full certificate PFX.
	// +kubebuilder:validation:Optional
	azureKeyVaultCertificateSecretName?: null | string @go(AzureKeyVaultCertificateSecretName,*string)

	// The version of the Key Vault secret representing the full certificate PFX.
	// +kubebuilder:validation:Optional
	azureKeyVaultCertificateSecretVersion?: null | string @go(AzureKeyVaultCertificateSecretVersion,*string)

	// The ID of the Key Vault containing the SSL certificate.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/keyvault/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	azureKeyVaultCertificateVaultId?: null | string @go(AzureKeyVaultCertificateVaultID,*string)

	// Certificate source to encrypted HTTPS traffic with. Allowed values are FrontDoor or AzureKeyVault. Defaults to FrontDoor.
	// +kubebuilder:validation:Optional
	certificateSource?: null | string @go(CertificateSource,*string)
}

#FrontdoorCustomHTTPSConfigurationInitParameters: {
	// A custom_https_configuration block as defined above.
	customHttpsConfiguration?: [...#CustomHTTPSConfigurationInitParameters] @go(CustomHTTPSConfiguration,[]CustomHTTPSConfigurationInitParameters)

	// Should the HTTPS protocol be enabled for this custom domain associated with the Front Door?
	customHttpsProvisioningEnabled?: null | bool @go(CustomHTTPSProvisioningEnabled,*bool)

	// The ID of the Front Door Frontend Endpoint which this configuration refers to. Changing this forces a new resource to be created.
	frontendEndpointId?: null | string @go(FrontendEndpointID,*string)
}

#FrontdoorCustomHTTPSConfigurationObservation: {
	// A custom_https_configuration block as defined above.
	customHttpsConfiguration?: [...#CustomHTTPSConfigurationObservation] @go(CustomHTTPSConfiguration,[]CustomHTTPSConfigurationObservation)

	// Should the HTTPS protocol be enabled for this custom domain associated with the Front Door?
	customHttpsProvisioningEnabled?: null | bool @go(CustomHTTPSProvisioningEnabled,*bool)

	// The ID of the Front Door Frontend Endpoint which this configuration refers to. Changing this forces a new resource to be created.
	frontendEndpointId?: null | string @go(FrontendEndpointID,*string)

	// The ID of the Azure Front Door Custom HTTPS Configuration.
	id?: null | string @go(ID,*string)
}

#FrontdoorCustomHTTPSConfigurationParameters: {
	// A custom_https_configuration block as defined above.
	// +kubebuilder:validation:Optional
	customHttpsConfiguration?: [...#CustomHTTPSConfigurationParameters] @go(CustomHTTPSConfiguration,[]CustomHTTPSConfigurationParameters)

	// Should the HTTPS protocol be enabled for this custom domain associated with the Front Door?
	// +kubebuilder:validation:Optional
	customHttpsProvisioningEnabled?: null | bool @go(CustomHTTPSProvisioningEnabled,*bool)

	// The ID of the Front Door Frontend Endpoint which this configuration refers to. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	frontendEndpointId?: null | string @go(FrontendEndpointID,*string)
}

// FrontdoorCustomHTTPSConfigurationSpec defines the desired state of FrontdoorCustomHTTPSConfiguration
#FrontdoorCustomHTTPSConfigurationSpec: {
	forProvider: #FrontdoorCustomHTTPSConfigurationParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FrontdoorCustomHTTPSConfigurationInitParameters @go(InitProvider)
}

// FrontdoorCustomHTTPSConfigurationStatus defines the observed state of FrontdoorCustomHTTPSConfiguration.
#FrontdoorCustomHTTPSConfigurationStatus: {
	atProvider?: #FrontdoorCustomHTTPSConfigurationObservation @go(AtProvider)
}

// FrontdoorCustomHTTPSConfiguration is the Schema for the FrontdoorCustomHTTPSConfigurations API. Manages the Custom Https Configuration for an Azure Front Door (classic) Frontend Endpoint.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#FrontdoorCustomHTTPSConfiguration: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.customHttpsProvisioningEnabled) || (has(self.initProvider) && has(self.initProvider.customHttpsProvisioningEnabled))",message="spec.forProvider.customHttpsProvisioningEnabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frontendEndpointId) || (has(self.initProvider) && has(self.initProvider.frontendEndpointId))",message="spec.forProvider.frontendEndpointId is a required parameter"
	spec:    #FrontdoorCustomHTTPSConfigurationSpec   @go(Spec)
	status?: #FrontdoorCustomHTTPSConfigurationStatus @go(Status)
}

// FrontdoorCustomHTTPSConfigurationList contains a list of FrontdoorCustomHTTPSConfigurations
#FrontdoorCustomHTTPSConfigurationList: {
	items: [...#FrontdoorCustomHTTPSConfiguration] @go(Items,[]FrontdoorCustomHTTPSConfiguration)
}
