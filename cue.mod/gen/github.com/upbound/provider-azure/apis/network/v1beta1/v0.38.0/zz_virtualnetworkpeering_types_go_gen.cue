// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#VirtualNetworkPeeringInitParameters: {
	// Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to false.
	allowForwardedTraffic?: null | bool @go(AllowForwardedTraffic,*bool)

	// Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network. Defaults to false.
	allowGatewayTransit?: null | bool @go(AllowGatewayTransit,*bool)

	// Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to true.
	allowVirtualNetworkAccess?: null | bool @go(AllowVirtualNetworkAccess,*bool)

	// A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
	triggers?: {[string]: null | string} @go(Triggers,map[string]*string)

	// Controls if remote gateways can be used on the local virtual network. If the flag is set to true, and allow_gateway_transit on the remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Defaults to false.
	useRemoteGateways?: null | bool @go(UseRemoteGateways,*bool)
}

#VirtualNetworkPeeringObservation: {
	// Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to false.
	allowForwardedTraffic?: null | bool @go(AllowForwardedTraffic,*bool)

	// Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network. Defaults to false.
	allowGatewayTransit?: null | bool @go(AllowGatewayTransit,*bool)

	// Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to true.
	allowVirtualNetworkAccess?: null | bool @go(AllowVirtualNetworkAccess,*bool)

	// The ID of the Virtual Network Peering.
	id?: null | string @go(ID,*string)

	// The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
	remoteVirtualNetworkId?: null | string @go(RemoteVirtualNetworkID,*string)

	// The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
	triggers?: {[string]: null | string} @go(Triggers,map[string]*string)

	// Controls if remote gateways can be used on the local virtual network. If the flag is set to true, and allow_gateway_transit on the remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Defaults to false.
	useRemoteGateways?: null | bool @go(UseRemoteGateways,*bool)

	// The name of the virtual network. Changing this forces a new resource to be created.
	virtualNetworkName?: null | string @go(VirtualNetworkName,*string)
}

#VirtualNetworkPeeringParameters: {
	// Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to false.
	// +kubebuilder:validation:Optional
	allowForwardedTraffic?: null | bool @go(AllowForwardedTraffic,*bool)

	// Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network. Defaults to false.
	// +kubebuilder:validation:Optional
	allowGatewayTransit?: null | bool @go(AllowGatewayTransit,*bool)

	// Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to true.
	// +kubebuilder:validation:Optional
	allowVirtualNetworkAccess?: null | bool @go(AllowVirtualNetworkAccess,*bool)

	// The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=VirtualNetwork
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	remoteVirtualNetworkId?: null | string @go(RemoteVirtualNetworkID,*string)

	// The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
	// +kubebuilder:validation:Optional
	triggers?: {[string]: null | string} @go(Triggers,map[string]*string)

	// Controls if remote gateways can be used on the local virtual network. If the flag is set to true, and allow_gateway_transit on the remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Defaults to false.
	// +kubebuilder:validation:Optional
	useRemoteGateways?: null | bool @go(UseRemoteGateways,*bool)

	// The name of the virtual network. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=VirtualNetwork
	// +kubebuilder:validation:Optional
	virtualNetworkName?: null | string @go(VirtualNetworkName,*string)
}

// VirtualNetworkPeeringSpec defines the desired state of VirtualNetworkPeering
#VirtualNetworkPeeringSpec: {
	forProvider: #VirtualNetworkPeeringParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #VirtualNetworkPeeringInitParameters @go(InitProvider)
}

// VirtualNetworkPeeringStatus defines the observed state of VirtualNetworkPeering.
#VirtualNetworkPeeringStatus: {
	atProvider?: #VirtualNetworkPeeringObservation @go(AtProvider)
}

// VirtualNetworkPeering is the Schema for the VirtualNetworkPeerings API. Manages a virtual network peering which allows resources to access other resources in the linked virtual network.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#VirtualNetworkPeering: {
	spec:    #VirtualNetworkPeeringSpec   @go(Spec)
	status?: #VirtualNetworkPeeringStatus @go(Status)
}

// VirtualNetworkPeeringList contains a list of VirtualNetworkPeerings
#VirtualNetworkPeeringList: {
	items: [...#VirtualNetworkPeering] @go(Items,[]VirtualNetworkPeering)
}
