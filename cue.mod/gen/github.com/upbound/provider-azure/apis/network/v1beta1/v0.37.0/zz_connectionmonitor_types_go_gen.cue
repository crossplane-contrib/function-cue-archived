// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#ConnectionMonitorInitParameters: {
	// A endpoint block as defined below.
	endpoint?: [...#EndpointInitParameters] @go(Endpoint,[]EndpointInitParameters)

	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The description of the Network Connection Monitor.
	notes?: null | string @go(Notes,*string)

	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	outputWorkspaceResourceIds?: [...null | string] @go(OutputWorkspaceResourceIds,[]*string)

	// A mapping of tags which should be assigned to the Network Connection Monitor.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A test_configuration block as defined below.
	testConfiguration?: [...#TestConfigurationInitParameters] @go(TestConfiguration,[]TestConfigurationInitParameters)

	// A test_group block as defined below.
	testGroup?: [...#TestGroupInitParameters] @go(TestGroup,[]TestGroupInitParameters)
}

#ConnectionMonitorObservation: {
	// A endpoint block as defined below.
	endpoint?: [...#EndpointObservation] @go(Endpoint,[]EndpointObservation)

	// The ID of the Network Connection Monitor.
	id?: null | string @go(ID,*string)

	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	networkWatcherId?: null | string @go(NetworkWatcherID,*string)

	// The description of the Network Connection Monitor.
	notes?: null | string @go(Notes,*string)

	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	outputWorkspaceResourceIds?: [...null | string] @go(OutputWorkspaceResourceIds,[]*string)

	// A mapping of tags which should be assigned to the Network Connection Monitor.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A test_configuration block as defined below.
	testConfiguration?: [...#TestConfigurationObservation] @go(TestConfiguration,[]TestConfigurationObservation)

	// A test_group block as defined below.
	testGroup?: [...#TestGroupObservation] @go(TestGroup,[]TestGroupObservation)
}

#ConnectionMonitorParameters: {
	// A endpoint block as defined below.
	// +kubebuilder:validation:Optional
	endpoint?: [...#EndpointParameters] @go(Endpoint,[]EndpointParameters)

	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Watcher
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	networkWatcherId?: null | string @go(NetworkWatcherID,*string)

	// The description of the Network Connection Monitor.
	// +kubebuilder:validation:Optional
	notes?: null | string @go(Notes,*string)

	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	// +kubebuilder:validation:Optional
	outputWorkspaceResourceIds?: [...null | string] @go(OutputWorkspaceResourceIds,[]*string)

	// A mapping of tags which should be assigned to the Network Connection Monitor.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A test_configuration block as defined below.
	// +kubebuilder:validation:Optional
	testConfiguration?: [...#TestConfigurationParameters] @go(TestConfiguration,[]TestConfigurationParameters)

	// A test_group block as defined below.
	// +kubebuilder:validation:Optional
	testGroup?: [...#TestGroupParameters] @go(TestGroup,[]TestGroupParameters)
}

#EndpointInitParameters: {
	// The IP address or domain name of the Network Connection Monitor endpoint.
	address?: null | string @go(Address,*string)

	// The test coverage for the Network Connection Monitor endpoint. Possible values are AboveAverage, Average, BelowAverage, Default, Full and Low.
	coverageLevel?: null | string @go(CoverageLevel,*string)

	// A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be excluded to the Network Connection Monitor endpoint.
	excludedIpAddresses?: [...null | string] @go(ExcludedIPAddresses,[]*string)

	// A filter block as defined below.
	filter?: [...#FilterInitParameters] @go(Filter,[]FilterInitParameters)

	// A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be included to the Network Connection Monitor endpoint.
	includedIpAddresses?: [...null | string] @go(IncludedIPAddresses,[]*string)

	// The name of the endpoint for the Network Connection Monitor .
	name?: null | string @go(Name,*string)

	// The resource ID which is used as the endpoint by the Network Connection Monitor.
	targetResourceId?: null | string @go(TargetResourceID,*string)

	// The endpoint type of the Network Connection Monitor. Possible values are AzureSubnet, AzureVM, AzureVNet, ExternalAddress, MMAWorkspaceMachine and MMAWorkspaceNetwork.
	targetResourceType?: null | string @go(TargetResourceType,*string)
}

#EndpointObservation: {
	// The IP address or domain name of the Network Connection Monitor endpoint.
	address?: null | string @go(Address,*string)

	// The test coverage for the Network Connection Monitor endpoint. Possible values are AboveAverage, Average, BelowAverage, Default, Full and Low.
	coverageLevel?: null | string @go(CoverageLevel,*string)

	// A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be excluded to the Network Connection Monitor endpoint.
	excludedIpAddresses?: [...null | string] @go(ExcludedIPAddresses,[]*string)

	// A filter block as defined below.
	filter?: [...#FilterObservation] @go(Filter,[]FilterObservation)

	// A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be included to the Network Connection Monitor endpoint.
	includedIpAddresses?: [...null | string] @go(IncludedIPAddresses,[]*string)

	// The name of the endpoint for the Network Connection Monitor .
	name?: null | string @go(Name,*string)

	// The resource ID which is used as the endpoint by the Network Connection Monitor.
	targetResourceId?: null | string @go(TargetResourceID,*string)

	// The endpoint type of the Network Connection Monitor. Possible values are AzureSubnet, AzureVM, AzureVNet, ExternalAddress, MMAWorkspaceMachine and MMAWorkspaceNetwork.
	targetResourceType?: null | string @go(TargetResourceType,*string)
}

#EndpointParameters: {
	// The IP address or domain name of the Network Connection Monitor endpoint.
	// +kubebuilder:validation:Optional
	address?: null | string @go(Address,*string)

	// The test coverage for the Network Connection Monitor endpoint. Possible values are AboveAverage, Average, BelowAverage, Default, Full and Low.
	// +kubebuilder:validation:Optional
	coverageLevel?: null | string @go(CoverageLevel,*string)

	// A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be excluded to the Network Connection Monitor endpoint.
	// +kubebuilder:validation:Optional
	excludedIpAddresses?: [...null | string] @go(ExcludedIPAddresses,[]*string)

	// A filter block as defined below.
	// +kubebuilder:validation:Optional
	filter?: [...#FilterParameters] @go(Filter,[]FilterParameters)

	// A list of IPv4/IPv6 subnet masks or IPv4/IPv6 IP addresses to be included to the Network Connection Monitor endpoint.
	// +kubebuilder:validation:Optional
	includedIpAddresses?: [...null | string] @go(IncludedIPAddresses,[]*string)

	// The name of the endpoint for the Network Connection Monitor .
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The resource ID which is used as the endpoint by the Network Connection Monitor.
	// +kubebuilder:validation:Optional
	targetResourceId?: null | string @go(TargetResourceID,*string)

	// The endpoint type of the Network Connection Monitor. Possible values are AzureSubnet, AzureVM, AzureVNet, ExternalAddress, MMAWorkspaceMachine and MMAWorkspaceNetwork.
	// +kubebuilder:validation:Optional
	targetResourceType?: null | string @go(TargetResourceType,*string)
}

#FilterInitParameters: {
	// A item block as defined below.
	item?: [...#ItemInitParameters] @go(Item,[]ItemInitParameters)

	// The type of items included in the filter. Possible values are AgentAddress. Defaults to AgentAddress.
	type?: null | string @go(Type,*string)
}

#FilterObservation: {
	// A item block as defined below.
	item?: [...#ItemObservation] @go(Item,[]ItemObservation)

	// The type of items included in the filter. Possible values are AgentAddress. Defaults to AgentAddress.
	type?: null | string @go(Type,*string)
}

#FilterParameters: {
	// A item block as defined below.
	// +kubebuilder:validation:Optional
	item?: [...#ItemParameters] @go(Item,[]ItemParameters)

	// The type of items included in the filter. Possible values are AgentAddress. Defaults to AgentAddress.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#HTTPConfigurationInitParameters: {
	// The HTTP method for the HTTP request. Possible values are Get and Post. Defaults to Get.
	method?: null | string @go(Method,*string)

	// The path component of the URI. It only accepts the absolute path.
	path?: null | string @go(Path,*string)

	// The port for the TCP connection.
	port?: null | float64 @go(Port,*float64)

	// Should HTTPS be preferred over HTTP in cases where the choice is not explicit? Defaults to false.
	preferHttps?: null | bool @go(PreferHTTPS,*bool)

	// A request_header block as defined below.
	requestHeader?: [...#HTTPConfigurationRequestHeaderInitParameters] @go(RequestHeader,[]HTTPConfigurationRequestHeaderInitParameters)

	// The HTTP status codes to consider successful. For instance, 2xx, 301-304 and 418.
	validStatusCodeRanges?: [...null | string] @go(ValidStatusCodeRanges,[]*string)
}

#HTTPConfigurationObservation: {
	// The HTTP method for the HTTP request. Possible values are Get and Post. Defaults to Get.
	method?: null | string @go(Method,*string)

	// The path component of the URI. It only accepts the absolute path.
	path?: null | string @go(Path,*string)

	// The port for the TCP connection.
	port?: null | float64 @go(Port,*float64)

	// Should HTTPS be preferred over HTTP in cases where the choice is not explicit? Defaults to false.
	preferHttps?: null | bool @go(PreferHTTPS,*bool)

	// A request_header block as defined below.
	requestHeader?: [...#HTTPConfigurationRequestHeaderObservation] @go(RequestHeader,[]HTTPConfigurationRequestHeaderObservation)

	// The HTTP status codes to consider successful. For instance, 2xx, 301-304 and 418.
	validStatusCodeRanges?: [...null | string] @go(ValidStatusCodeRanges,[]*string)
}

#HTTPConfigurationParameters: {
	// The HTTP method for the HTTP request. Possible values are Get and Post. Defaults to Get.
	// +kubebuilder:validation:Optional
	method?: null | string @go(Method,*string)

	// The path component of the URI. It only accepts the absolute path.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The port for the TCP connection.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Should HTTPS be preferred over HTTP in cases where the choice is not explicit? Defaults to false.
	// +kubebuilder:validation:Optional
	preferHttps?: null | bool @go(PreferHTTPS,*bool)

	// A request_header block as defined below.
	// +kubebuilder:validation:Optional
	requestHeader?: [...#HTTPConfigurationRequestHeaderParameters] @go(RequestHeader,[]HTTPConfigurationRequestHeaderParameters)

	// The HTTP status codes to consider successful. For instance, 2xx, 301-304 and 418.
	// +kubebuilder:validation:Optional
	validStatusCodeRanges?: [...null | string] @go(ValidStatusCodeRanges,[]*string)
}

#HTTPConfigurationRequestHeaderInitParameters: {
	// The name of the test group for the Network Connection Monitor.
	name?: null | string @go(Name,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#HTTPConfigurationRequestHeaderObservation: {
	// The name of the test group for the Network Connection Monitor.
	name?: null | string @go(Name,*string)

	// The value of the HTTP header.
	value?: null | string @go(Value,*string)
}

#HTTPConfigurationRequestHeaderParameters: {
	// The name of the test group for the Network Connection Monitor.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#IcmpConfigurationInitParameters: {
	// Should path evaluation with trace route be enabled? Defaults to true.
	traceRouteEnabled?: null | bool @go(TraceRouteEnabled,*bool)
}

#IcmpConfigurationObservation: {
	// Should path evaluation with trace route be enabled? Defaults to true.
	traceRouteEnabled?: null | bool @go(TraceRouteEnabled,*bool)
}

#IcmpConfigurationParameters: {
	// Should path evaluation with trace route be enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	traceRouteEnabled?: null | bool @go(TraceRouteEnabled,*bool)
}

#ItemInitParameters: {
	// The address of the filter item.
	address?: null | string @go(Address,*string)

	// The type of items included in the filter. Possible values are AgentAddress. Defaults to AgentAddress.
	type?: null | string @go(Type,*string)
}

#ItemObservation: {
	// The address of the filter item.
	address?: null | string @go(Address,*string)

	// The type of items included in the filter. Possible values are AgentAddress. Defaults to AgentAddress.
	type?: null | string @go(Type,*string)
}

#ItemParameters: {
	// The address of the filter item.
	// +kubebuilder:validation:Optional
	address?: null | string @go(Address,*string)

	// The type of items included in the filter. Possible values are AgentAddress. Defaults to AgentAddress.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#SuccessThresholdInitParameters: {
	// The maximum percentage of failed checks permitted for a test to be successful.
	checksFailedPercent?: null | float64 @go(ChecksFailedPercent,*float64)

	// The maximum round-trip time in milliseconds permitted for a test to be successful.
	roundTripTimeMs?: null | float64 @go(RoundTripTimeMS,*float64)
}

#SuccessThresholdObservation: {
	// The maximum percentage of failed checks permitted for a test to be successful.
	checksFailedPercent?: null | float64 @go(ChecksFailedPercent,*float64)

	// The maximum round-trip time in milliseconds permitted for a test to be successful.
	roundTripTimeMs?: null | float64 @go(RoundTripTimeMS,*float64)
}

#SuccessThresholdParameters: {
	// The maximum percentage of failed checks permitted for a test to be successful.
	// +kubebuilder:validation:Optional
	checksFailedPercent?: null | float64 @go(ChecksFailedPercent,*float64)

	// The maximum round-trip time in milliseconds permitted for a test to be successful.
	// +kubebuilder:validation:Optional
	roundTripTimeMs?: null | float64 @go(RoundTripTimeMS,*float64)
}

#TCPConfigurationInitParameters: {
	// The destination port behavior for the TCP connection. Possible values are None and ListenIfAvailable.
	destinationPortBehavior?: null | string @go(DestinationPortBehavior,*string)

	// The port for the TCP connection.
	port?: null | float64 @go(Port,*float64)

	// Should path evaluation with trace route be enabled? Defaults to true.
	traceRouteEnabled?: null | bool @go(TraceRouteEnabled,*bool)
}

#TCPConfigurationObservation: {
	// The destination port behavior for the TCP connection. Possible values are None and ListenIfAvailable.
	destinationPortBehavior?: null | string @go(DestinationPortBehavior,*string)

	// The port for the TCP connection.
	port?: null | float64 @go(Port,*float64)

	// Should path evaluation with trace route be enabled? Defaults to true.
	traceRouteEnabled?: null | bool @go(TraceRouteEnabled,*bool)
}

#TCPConfigurationParameters: {
	// The destination port behavior for the TCP connection. Possible values are None and ListenIfAvailable.
	// +kubebuilder:validation:Optional
	destinationPortBehavior?: null | string @go(DestinationPortBehavior,*string)

	// The port for the TCP connection.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Should path evaluation with trace route be enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	traceRouteEnabled?: null | bool @go(TraceRouteEnabled,*bool)
}

#TestConfigurationInitParameters: {
	// A http_configuration block as defined below.
	httpConfiguration?: [...#HTTPConfigurationInitParameters] @go(HTTPConfiguration,[]HTTPConfigurationInitParameters)

	// A icmp_configuration block as defined below.
	icmpConfiguration?: [...#IcmpConfigurationInitParameters] @go(IcmpConfiguration,[]IcmpConfigurationInitParameters)

	// The name of test configuration for the Network Connection Monitor.
	name?: null | string @go(Name,*string)

	// The preferred IP version which is used in the test evaluation. Possible values are IPv4 and IPv6.
	preferredIpVersion?: null | string @go(PreferredIPVersion,*string)

	// The protocol used to evaluate tests. Possible values are Tcp, Http and Icmp.
	protocol?: null | string @go(Protocol,*string)

	// A success_threshold block as defined below.
	successThreshold?: [...#SuccessThresholdInitParameters] @go(SuccessThreshold,[]SuccessThresholdInitParameters)

	// A tcp_configuration block as defined below.
	tcpConfiguration?: [...#TCPConfigurationInitParameters] @go(TCPConfiguration,[]TCPConfigurationInitParameters)

	// The time interval in seconds at which the test evaluation will happen. Defaults to 60.
	testFrequencyInSeconds?: null | float64 @go(TestFrequencyInSeconds,*float64)
}

#TestConfigurationObservation: {
	// A http_configuration block as defined below.
	httpConfiguration?: [...#HTTPConfigurationObservation] @go(HTTPConfiguration,[]HTTPConfigurationObservation)

	// A icmp_configuration block as defined below.
	icmpConfiguration?: [...#IcmpConfigurationObservation] @go(IcmpConfiguration,[]IcmpConfigurationObservation)

	// The name of test configuration for the Network Connection Monitor.
	name?: null | string @go(Name,*string)

	// The preferred IP version which is used in the test evaluation. Possible values are IPv4 and IPv6.
	preferredIpVersion?: null | string @go(PreferredIPVersion,*string)

	// The protocol used to evaluate tests. Possible values are Tcp, Http and Icmp.
	protocol?: null | string @go(Protocol,*string)

	// A success_threshold block as defined below.
	successThreshold?: [...#SuccessThresholdObservation] @go(SuccessThreshold,[]SuccessThresholdObservation)

	// A tcp_configuration block as defined below.
	tcpConfiguration?: [...#TCPConfigurationObservation] @go(TCPConfiguration,[]TCPConfigurationObservation)

	// The time interval in seconds at which the test evaluation will happen. Defaults to 60.
	testFrequencyInSeconds?: null | float64 @go(TestFrequencyInSeconds,*float64)
}

#TestConfigurationParameters: {
	// A http_configuration block as defined below.
	// +kubebuilder:validation:Optional
	httpConfiguration?: [...#HTTPConfigurationParameters] @go(HTTPConfiguration,[]HTTPConfigurationParameters)

	// A icmp_configuration block as defined below.
	// +kubebuilder:validation:Optional
	icmpConfiguration?: [...#IcmpConfigurationParameters] @go(IcmpConfiguration,[]IcmpConfigurationParameters)

	// The name of test configuration for the Network Connection Monitor.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The preferred IP version which is used in the test evaluation. Possible values are IPv4 and IPv6.
	// +kubebuilder:validation:Optional
	preferredIpVersion?: null | string @go(PreferredIPVersion,*string)

	// The protocol used to evaluate tests. Possible values are Tcp, Http and Icmp.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)

	// A success_threshold block as defined below.
	// +kubebuilder:validation:Optional
	successThreshold?: [...#SuccessThresholdParameters] @go(SuccessThreshold,[]SuccessThresholdParameters)

	// A tcp_configuration block as defined below.
	// +kubebuilder:validation:Optional
	tcpConfiguration?: [...#TCPConfigurationParameters] @go(TCPConfiguration,[]TCPConfigurationParameters)

	// The time interval in seconds at which the test evaluation will happen. Defaults to 60.
	// +kubebuilder:validation:Optional
	testFrequencyInSeconds?: null | float64 @go(TestFrequencyInSeconds,*float64)
}

#TestGroupInitParameters: {
	// A list of destination endpoint names.
	destinationEndpoints?: [...null | string] @go(DestinationEndpoints,[]*string)

	// Should the test group be enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// The name of the test group for the Network Connection Monitor.
	name?: null | string @go(Name,*string)

	// A list of source endpoint names.
	sourceEndpoints?: [...null | string] @go(SourceEndpoints,[]*string)

	// A list of test configuration names.
	testConfigurationNames?: [...null | string] @go(TestConfigurationNames,[]*string)
}

#TestGroupObservation: {
	// A list of destination endpoint names.
	destinationEndpoints?: [...null | string] @go(DestinationEndpoints,[]*string)

	// Should the test group be enabled? Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// The name of the test group for the Network Connection Monitor.
	name?: null | string @go(Name,*string)

	// A list of source endpoint names.
	sourceEndpoints?: [...null | string] @go(SourceEndpoints,[]*string)

	// A list of test configuration names.
	testConfigurationNames?: [...null | string] @go(TestConfigurationNames,[]*string)
}

#TestGroupParameters: {
	// A list of destination endpoint names.
	// +kubebuilder:validation:Optional
	destinationEndpoints: [...null | string] @go(DestinationEndpoints,[]*string)

	// Should the test group be enabled? Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// The name of the test group for the Network Connection Monitor.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A list of source endpoint names.
	// +kubebuilder:validation:Optional
	sourceEndpoints: [...null | string] @go(SourceEndpoints,[]*string)

	// A list of test configuration names.
	// +kubebuilder:validation:Optional
	testConfigurationNames: [...null | string] @go(TestConfigurationNames,[]*string)
}

// ConnectionMonitorSpec defines the desired state of ConnectionMonitor
#ConnectionMonitorSpec: {
	forProvider: #ConnectionMonitorParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ConnectionMonitorInitParameters @go(InitProvider)
}

// ConnectionMonitorStatus defines the observed state of ConnectionMonitor.
#ConnectionMonitorStatus: {
	atProvider?: #ConnectionMonitorObservation @go(AtProvider)
}

// ConnectionMonitor is the Schema for the ConnectionMonitors API. Manages a Network Connection Monitor.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ConnectionMonitor: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpoint) || (has(self.initProvider) && has(self.initProvider.endpoint))",message="spec.forProvider.endpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.testConfiguration) || (has(self.initProvider) && has(self.initProvider.testConfiguration))",message="spec.forProvider.testConfiguration is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.testGroup) || (has(self.initProvider) && has(self.initProvider.testGroup))",message="spec.forProvider.testGroup is a required parameter"
	spec:    #ConnectionMonitorSpec   @go(Spec)
	status?: #ConnectionMonitorStatus @go(Status)
}

// ConnectionMonitorList contains a list of ConnectionMonitors
#ConnectionMonitorList: {
	items: [...#ConnectionMonitor] @go(Items,[]ConnectionMonitor)
}
