// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#PrivateDNSMXRecordInitParameters: {
	// One or more record blocks as defined below.
	record?: [...#PrivateDNSMXRecordRecordInitParameters] @go(Record,[]PrivateDNSMXRecordRecordInitParameters)

	// The Time To Live (TTL) of the DNS record in seconds.
	ttl?: null | float64 @go(TTL,*float64)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#PrivateDNSMXRecordObservation: {
	// The FQDN of the DNS MX Record.
	fqdn?: null | string @go(Fqdn,*string)

	// The Private DNS MX Record ID.
	id?: null | string @go(ID,*string)

	// One or more record blocks as defined below.
	record?: [...#PrivateDNSMXRecordRecordObservation] @go(Record,[]PrivateDNSMXRecordRecordObservation)

	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The Time To Live (TTL) of the DNS record in seconds.
	ttl?: null | float64 @go(TTL,*float64)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	zoneName?: null | string @go(ZoneName,*string)
}

#PrivateDNSMXRecordParameters: {
	// One or more record blocks as defined below.
	// +kubebuilder:validation:Optional
	record?: [...#PrivateDNSMXRecordRecordParameters] @go(Record,[]PrivateDNSMXRecordRecordParameters)

	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The Time To Live (TTL) of the DNS record in seconds.
	// +kubebuilder:validation:Optional
	ttl?: null | float64 @go(TTL,*float64)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=PrivateDNSZone
	// +kubebuilder:validation:Optional
	zoneName?: null | string @go(ZoneName,*string)
}

#PrivateDNSMXRecordRecordInitParameters: {
	// The FQDN of the exchange to MX record points to.
	exchange?: null | string @go(Exchange,*string)

	// The preference of the MX record.
	preference?: null | float64 @go(Preference,*float64)
}

#PrivateDNSMXRecordRecordObservation: {
	// The FQDN of the exchange to MX record points to.
	exchange?: null | string @go(Exchange,*string)

	// The preference of the MX record.
	preference?: null | float64 @go(Preference,*float64)
}

#PrivateDNSMXRecordRecordParameters: {
	// The FQDN of the exchange to MX record points to.
	// +kubebuilder:validation:Optional
	exchange?: null | string @go(Exchange,*string)

	// The preference of the MX record.
	// +kubebuilder:validation:Optional
	preference?: null | float64 @go(Preference,*float64)
}

// PrivateDNSMXRecordSpec defines the desired state of PrivateDNSMXRecord
#PrivateDNSMXRecordSpec: {
	forProvider: #PrivateDNSMXRecordParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PrivateDNSMXRecordInitParameters @go(InitProvider)
}

// PrivateDNSMXRecordStatus defines the observed state of PrivateDNSMXRecord.
#PrivateDNSMXRecordStatus: {
	atProvider?: #PrivateDNSMXRecordObservation @go(AtProvider)
}

// PrivateDNSMXRecord is the Schema for the PrivateDNSMXRecords API. Manages a Private DNS MX Record.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#PrivateDNSMXRecord: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.record) || (has(self.initProvider) && has(self.initProvider.record))",message="spec.forProvider.record is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ttl) || (has(self.initProvider) && has(self.initProvider.ttl))",message="spec.forProvider.ttl is a required parameter"
	spec:    #PrivateDNSMXRecordSpec   @go(Spec)
	status?: #PrivateDNSMXRecordStatus @go(Status)
}

// PrivateDNSMXRecordList contains a list of PrivateDNSMXRecords
#PrivateDNSMXRecordList: {
	items: [...#PrivateDNSMXRecord] @go(Items,[]PrivateDNSMXRecord)
}
