// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#DNSTXTRecordInitParameters: {
	// A list of values that make up the txt record. Each record block supports fields documented below.
	record?: [...#DNSTXTRecordRecordInitParameters] @go(Record,[]DNSTXTRecordRecordInitParameters)

	// The Time To Live (TTL) of the DNS record in seconds.
	ttl?: null | float64 @go(TTL,*float64)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#DNSTXTRecordObservation: {
	// The FQDN of the DNS TXT Record.
	fqdn?: null | string @go(Fqdn,*string)

	// The DNS TXT Record ID.
	id?: null | string @go(ID,*string)

	// A list of values that make up the txt record. Each record block supports fields documented below.
	record?: [...#DNSTXTRecordRecordObservation] @go(Record,[]DNSTXTRecordRecordObservation)

	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The Time To Live (TTL) of the DNS record in seconds.
	ttl?: null | float64 @go(TTL,*float64)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	zoneName?: null | string @go(ZoneName,*string)
}

#DNSTXTRecordParameters: {
	// A list of values that make up the txt record. Each record block supports fields documented below.
	// +kubebuilder:validation:Optional
	record?: [...#DNSTXTRecordRecordParameters] @go(Record,[]DNSTXTRecordRecordParameters)

	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The Time To Live (TTL) of the DNS record in seconds.
	// +kubebuilder:validation:Optional
	ttl?: null | float64 @go(TTL,*float64)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=DNSZone
	// +kubebuilder:validation:Optional
	zoneName?: null | string @go(ZoneName,*string)
}

#DNSTXTRecordRecordInitParameters: {
	// The value of the record. Max length: 1024 characters
	value?: null | string @go(Value,*string)
}

#DNSTXTRecordRecordObservation: {
	// The value of the record. Max length: 1024 characters
	value?: null | string @go(Value,*string)
}

#DNSTXTRecordRecordParameters: {
	// The value of the record. Max length: 1024 characters
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

// DNSTXTRecordSpec defines the desired state of DNSTXTRecord
#DNSTXTRecordSpec: {
	forProvider: #DNSTXTRecordParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DNSTXTRecordInitParameters @go(InitProvider)
}

// DNSTXTRecordStatus defines the observed state of DNSTXTRecord.
#DNSTXTRecordStatus: {
	atProvider?: #DNSTXTRecordObservation @go(AtProvider)
}

// DNSTXTRecord is the Schema for the DNSTXTRecords API. Manages a DNS TXT Record.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#DNSTXTRecord: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.record) || (has(self.initProvider) && has(self.initProvider.record))",message="spec.forProvider.record is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ttl) || (has(self.initProvider) && has(self.initProvider.ttl))",message="spec.forProvider.ttl is a required parameter"
	spec:    #DNSTXTRecordSpec   @go(Spec)
	status?: #DNSTXTRecordStatus @go(Status)
}

// DNSTXTRecordList contains a list of DNSTXTRecords
#DNSTXTRecordList: {
	items: [...#DNSTXTRecord] @go(Items,[]DNSTXTRecord)
}
