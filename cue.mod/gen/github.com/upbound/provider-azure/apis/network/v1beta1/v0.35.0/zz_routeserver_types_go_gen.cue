// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/network/v1beta1

package v1beta1

#RouteServerInitParameters: {
	// Whether to enable route exchange between Azure Route Server and the gateway(s)
	branchToBranchTrafficEnabled?: null | bool @go(BranchToBranchTrafficEnabled,*bool)

	// Specifies the supported Azure location where the Route Server should exist. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The SKU of the Route Server. The only possible value is Standard. Changing this forces a new resource to be created.
	sku?: null | string @go(Sku,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#RouteServerObservation: {
	// Whether to enable route exchange between Azure Route Server and the gateway(s)
	branchToBranchTrafficEnabled?: null | bool @go(BranchToBranchTrafficEnabled,*bool)

	// The ID of the Route Server .
	id?: null | string @go(ID,*string)

	// Specifies the supported Azure location where the Route Server should exist. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The ID of the Public IP Address. This option is required since September 1st 2021. Changing this forces a new resource to be created.
	publicIpAddressId?: null | string @go(PublicIPAddressID,*string)

	// Specifies the name of the Resource Group where the Route Server should exist. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
	routingState?:      null | string @go(RoutingState,*string)

	// The SKU of the Route Server. The only possible value is Standard. Changing this forces a new resource to be created.
	sku?: null | string @go(Sku,*string)

	// The ID of the Subnet that the Route Server will reside. Changing this forces a new resource to be created.
	subnetId?: null | string @go(SubnetID,*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	virtualRouterAsn?: null | float64 @go(VirtualRouterAsn,*float64)
	virtualRouterIps?: [...null | string] @go(VirtualRouterIps,[]*string)
}

#RouteServerParameters: {
	// Whether to enable route exchange between Azure Route Server and the gateway(s)
	// +kubebuilder:validation:Optional
	branchToBranchTrafficEnabled?: null | bool @go(BranchToBranchTrafficEnabled,*bool)

	// Specifies the supported Azure location where the Route Server should exist. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The ID of the Public IP Address. This option is required since September 1st 2021. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.PublicIP
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	publicIpAddressId?: null | string @go(PublicIPAddressID,*string)

	// Specifies the name of the Resource Group where the Route Server should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The SKU of the Route Server. The only possible value is Standard. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	sku?: null | string @go(Sku,*string)

	// The ID of the Subnet that the Route Server will reside. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/network/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// RouteServerSpec defines the desired state of RouteServer
#RouteServerSpec: {
	forProvider: #RouteServerParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RouteServerInitParameters @go(InitProvider)
}

// RouteServerStatus defines the observed state of RouteServer.
#RouteServerStatus: {
	atProvider?: #RouteServerObservation @go(AtProvider)
}

// RouteServer is the Schema for the RouteServers API. Manages an Azure Route Server
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#RouteServer: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || has(self.initProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sku) || has(self.initProvider.sku)",message="sku is a required parameter"
	spec:    #RouteServerSpec   @go(Spec)
	status?: #RouteServerStatus @go(Status)
}

// RouteServerList contains a list of RouteServers
#RouteServerList: {
	items: [...#RouteServer] @go(Items,[]RouteServer)
}
