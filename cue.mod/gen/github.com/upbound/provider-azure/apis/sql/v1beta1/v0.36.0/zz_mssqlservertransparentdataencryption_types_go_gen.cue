// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/sql/v1beta1

package v1beta1

#MSSQLServerTransparentDataEncryptionInitParameters: {
	// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
	autoRotationEnabled?: null | bool @go(AutoRotationEnabled,*bool)
}

#MSSQLServerTransparentDataEncryptionObservation: {
	// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
	autoRotationEnabled?: null | bool @go(AutoRotationEnabled,*bool)

	// The ID of the MSSQL encryption protector
	id?: null | string @go(ID,*string)

	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)

	// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
	serverId?: null | string @go(ServerID,*string)
}

#MSSQLServerTransparentDataEncryptionParameters: {
	// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
	// +kubebuilder:validation:Optional
	autoRotationEnabled?: null | bool @go(AutoRotationEnabled,*bool)

	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/keyvault/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)

	// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=MSSQLServer
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	serverId?: null | string @go(ServerID,*string)
}

// MSSQLServerTransparentDataEncryptionSpec defines the desired state of MSSQLServerTransparentDataEncryption
#MSSQLServerTransparentDataEncryptionSpec: {
	forProvider: #MSSQLServerTransparentDataEncryptionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MSSQLServerTransparentDataEncryptionInitParameters @go(InitProvider)
}

// MSSQLServerTransparentDataEncryptionStatus defines the observed state of MSSQLServerTransparentDataEncryption.
#MSSQLServerTransparentDataEncryptionStatus: {
	atProvider?: #MSSQLServerTransparentDataEncryptionObservation @go(AtProvider)
}

// MSSQLServerTransparentDataEncryption is the Schema for the MSSQLServerTransparentDataEncryptions API. Manages the transparent data encryption configuration for a MSSQL Server
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#MSSQLServerTransparentDataEncryption: {
	spec:    #MSSQLServerTransparentDataEncryptionSpec   @go(Spec)
	status?: #MSSQLServerTransparentDataEncryptionStatus @go(Status)
}

// MSSQLServerTransparentDataEncryptionList contains a list of MSSQLServerTransparentDataEncryptions
#MSSQLServerTransparentDataEncryptionList: {
	items: [...#MSSQLServerTransparentDataEncryption] @go(Items,[]MSSQLServerTransparentDataEncryption)
}
