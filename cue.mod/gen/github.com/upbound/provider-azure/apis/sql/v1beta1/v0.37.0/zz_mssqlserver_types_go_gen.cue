// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/sql/v1beta1

package v1beta1

#AzureadAdministratorInitParameters: {
	// Specifies whether only AD Users and administrators (e.g. azuread_administrator.0.login_username) can be used to login, or also local database users (e.g. administrator_login). When true, the administrator_login and administrator_login_password properties can be omitted.
	azureadAuthenticationOnly?: null | bool @go(AzureadAuthenticationOnly,*bool)

	// The tenant id of the Azure AD Administrator of this SQL Server.
	tenantId?: null | string @go(TenantID,*string)
}

#AzureadAdministratorObservation: {
	// Specifies whether only AD Users and administrators (e.g. azuread_administrator.0.login_username) can be used to login, or also local database users (e.g. administrator_login). When true, the administrator_login and administrator_login_password properties can be omitted.
	azureadAuthenticationOnly?: null | bool @go(AzureadAuthenticationOnly,*bool)

	// The login username of the Azure AD Administrator of this SQL Server.
	loginUsername?: null | string @go(LoginUsername,*string)

	// The object id of the Azure AD Administrator of this SQL Server.
	objectId?: null | string @go(ObjectID,*string)

	// The tenant id of the Azure AD Administrator of this SQL Server.
	tenantId?: null | string @go(TenantID,*string)
}

#AzureadAdministratorParameters: {
	// Specifies whether only AD Users and administrators (e.g. azuread_administrator.0.login_username) can be used to login, or also local database users (e.g. administrator_login). When true, the administrator_login and administrator_login_password properties can be omitted.
	// +kubebuilder:validation:Optional
	azureadAuthenticationOnly?: null | bool @go(AzureadAuthenticationOnly,*bool)

	// The login username of the Azure AD Administrator of this SQL Server.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/managedidentity/v1beta1.UserAssignedIdentity
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	loginUsername?: null | string @go(LoginUsername,*string)

	// The object id of the Azure AD Administrator of this SQL Server.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/managedidentity/v1beta1.UserAssignedIdentity
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("principal_id",true)
	// +kubebuilder:validation:Optional
	objectId?: null | string @go(ObjectID,*string)

	// The tenant id of the Azure AD Administrator of this SQL Server.
	// +kubebuilder:validation:Optional
	tenantId?: null | string @go(TenantID,*string)
}

#MSSQLServerIdentityInitParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this SQL Server.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this SQL Server. Possible values are SystemAssigned, UserAssigned.
	type?: null | string @go(Type,*string)
}

#MSSQLServerIdentityObservation: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this SQL Server.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
	principalId?: null | string @go(PrincipalID,*string)

	// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
	tenantId?: null | string @go(TenantID,*string)

	// Specifies the type of Managed Service Identity that should be configured on this SQL Server. Possible values are SystemAssigned, UserAssigned.
	type?: null | string @go(Type,*string)
}

#MSSQLServerIdentityParameters: {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this SQL Server.
	// +kubebuilder:validation:Optional
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// Specifies the type of Managed Service Identity that should be configured on this SQL Server. Possible values are SystemAssigned, UserAssigned.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#MSSQLServerInitParameters: {
	// The administrator login name for the new server. Required unless azuread_authentication_only in the azuread_administrator block is true. When omitted, Azure will generate a default username which cannot be subsequently changed. Changing this forces a new resource to be created.
	administratorLogin?: null | string @go(AdministratorLogin,*string)

	// An azuread_administrator block as defined below.
	azureadAdministrator?: [...#AzureadAdministratorInitParameters] @go(AzureadAdministrator,[]AzureadAdministratorInitParameters)

	// The connection policy the server will use. Possible values are Default, Proxy, and Redirect. Defaults to Default.
	connectionPolicy?: null | string @go(ConnectionPolicy,*string)

	// An identity block as defined below.
	identity?: [...#MSSQLServerIdentityInitParameters] @go(Identity,[]MSSQLServerIdentityInitParameters)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: 1.0, 1.1 , 1.2 and Disabled. Defaults to 1.2.
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// Whether outbound network traffic is restricted for this server. Defaults to false.
	outboundNetworkRestrictionEnabled?: null | bool @go(OutboundNetworkRestrictionEnabled,*bool)

	// Whether public network access is allowed for this server. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server). Changing this forces a new resource to be created.
	version?: null | string @go(Version,*string)
}

#MSSQLServerObservation: {
	// The administrator login name for the new server. Required unless azuread_authentication_only in the azuread_administrator block is true. When omitted, Azure will generate a default username which cannot be subsequently changed. Changing this forces a new resource to be created.
	administratorLogin?: null | string @go(AdministratorLogin,*string)

	// An azuread_administrator block as defined below.
	azureadAdministrator?: [...#AzureadAdministratorObservation] @go(AzureadAdministrator,[]AzureadAdministratorObservation)

	// The connection policy the server will use. Possible values are Default, Proxy, and Redirect. Defaults to Default.
	connectionPolicy?: null | string @go(ConnectionPolicy,*string)

	// The fully qualified domain name of the Azure SQL Server (e.g. myServerName.database.windows.net)
	fullyQualifiedDomainName?: null | string @go(FullyQualifiedDomainName,*string)

	// the Microsoft SQL Server ID.
	id?: null | string @go(ID,*string)

	// An identity block as defined below.
	identity?: [...#MSSQLServerIdentityObservation] @go(Identity,[]MSSQLServerIdentityObservation)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	location?: null | string @go(Location,*string)

	// The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: 1.0, 1.1 , 1.2 and Disabled. Defaults to 1.2.
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// Whether outbound network traffic is restricted for this server. Defaults to false.
	outboundNetworkRestrictionEnabled?: null | bool @go(OutboundNetworkRestrictionEnabled,*bool)

	// Specifies the primary user managed identity id. Required if type is UserAssigned and should be combined with identity_ids.
	primaryUserAssignedIdentityId?: null | string @go(PrimaryUserAssignedIdentityID,*string)

	// Whether public network access is allowed for this server. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The name of the resource group in which to create the Microsoft SQL Server. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A list of dropped restorable database IDs on the server.
	restorableDroppedDatabaseIds?: [...null | string] @go(RestorableDroppedDatabaseIds,[]*string)

	// A mapping of tags to assign to the resource.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The fully versioned Key Vault Key URL (e.g. 'https://<YourVaultName>.vault.azure.net/keys/<YourKeyName>/<YourKeyVersion>) to be used as the Customer Managed Key(CMK/BYOK) for the Transparent Data Encryption(TDE) layer.
	transparentDataEncryptionKeyVaultKeyId?: null | string @go(TransparentDataEncryptionKeyVaultKeyID,*string)

	// The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server). Changing this forces a new resource to be created.
	version?: null | string @go(Version,*string)
}

#MSSQLServerParameters: {
	// The administrator login name for the new server. Required unless azuread_authentication_only in the azuread_administrator block is true. When omitted, Azure will generate a default username which cannot be subsequently changed. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	administratorLogin?: null | string @go(AdministratorLogin,*string)

	// An azuread_administrator block as defined below.
	// +kubebuilder:validation:Optional
	azureadAdministrator?: [...#AzureadAdministratorParameters] @go(AzureadAdministrator,[]AzureadAdministratorParameters)

	// The connection policy the server will use. Possible values are Default, Proxy, and Redirect. Defaults to Default.
	// +kubebuilder:validation:Optional
	connectionPolicy?: null | string @go(ConnectionPolicy,*string)

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	identity?: [...#MSSQLServerIdentityParameters] @go(Identity,[]MSSQLServerIdentityParameters)

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The Minimum TLS Version for all SQL Database and SQL Data Warehouse databases associated with the server. Valid values are: 1.0, 1.1 , 1.2 and Disabled. Defaults to 1.2.
	// +kubebuilder:validation:Optional
	minimumTlsVersion?: null | string @go(MinimumTLSVersion,*string)

	// Whether outbound network traffic is restricted for this server. Defaults to false.
	// +kubebuilder:validation:Optional
	outboundNetworkRestrictionEnabled?: null | bool @go(OutboundNetworkRestrictionEnabled,*bool)

	// Specifies the primary user managed identity id. Required if type is UserAssigned and should be combined with identity_ids.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/managedidentity/v1beta1.UserAssignedIdentity
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	primaryUserAssignedIdentityId?: null | string @go(PrimaryUserAssignedIdentityID,*string)

	// Whether public network access is allowed for this server. Defaults to true.
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// The name of the resource group in which to create the Microsoft SQL Server. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The fully versioned Key Vault Key URL (e.g. 'https://<YourVaultName>.vault.azure.net/keys/<YourKeyName>/<YourKeyVersion>) to be used as the Customer Managed Key(CMK/BYOK) for the Transparent Data Encryption(TDE) layer.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/keyvault/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	transparentDataEncryptionKeyVaultKeyId?: null | string @go(TransparentDataEncryptionKeyVaultKeyID,*string)

	// The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server). Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

// MSSQLServerSpec defines the desired state of MSSQLServer
#MSSQLServerSpec: {
	forProvider: #MSSQLServerParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #MSSQLServerInitParameters @go(InitProvider)
}

// MSSQLServerStatus defines the observed state of MSSQLServer.
#MSSQLServerStatus: {
	atProvider?: #MSSQLServerObservation @go(AtProvider)
}

// MSSQLServer is the Schema for the MSSQLServers API. Manages a Microsoft SQL Azure Database Server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#MSSQLServer: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	spec:    #MSSQLServerSpec   @go(Spec)
	status?: #MSSQLServerStatus @go(Status)
}

// MSSQLServerList contains a list of MSSQLServers
#MSSQLServerList: {
	items: [...#MSSQLServer] @go(Items,[]MSSQLServer)
}
