// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/logz/v1beta1

package v1beta1

#SubAccountTagRuleObservation: {
	// The ID of the Logz Sub Account Tag Rule.
	id?: null | string @go(ID,*string)

	// The ID of the Logz Sub Account. Changing this forces a new Logz Sub Account Tag Rule to be created.
	logzSubAccountId?: null | string @go(LogzSubAccountID,*string)

	// Whether AAD logs should be sent to the Monitor resource?
	sendAadLogs?: null | bool @go(SendAADLogs,*bool)

	// Whether activity logs from this Logz Sub Account Tag Rule should be sent to the Monitor resource?
	sendActivityLogs?: null | bool @go(SendActivityLogs,*bool)

	// Whether subscription logs should be sent to the Monitor resource?
	sendSubscriptionLogs?: null | bool @go(SendSubscriptionLogs,*bool)

	// One or more (up to 10) tag_filter blocks as defined below.
	tagFilter?: [...#TagFilterObservation] @go(TagFilter,[]TagFilterObservation)
}

#SubAccountTagRuleParameters: {
	// The ID of the Logz Sub Account. Changing this forces a new Logz Sub Account Tag Rule to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/logz/v1beta1.SubAccount
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	logzSubAccountId?: null | string @go(LogzSubAccountID,*string)

	// Whether AAD logs should be sent to the Monitor resource?
	// +kubebuilder:validation:Optional
	sendAadLogs?: null | bool @go(SendAADLogs,*bool)

	// Whether activity logs from this Logz Sub Account Tag Rule should be sent to the Monitor resource?
	// +kubebuilder:validation:Optional
	sendActivityLogs?: null | bool @go(SendActivityLogs,*bool)

	// Whether subscription logs should be sent to the Monitor resource?
	// +kubebuilder:validation:Optional
	sendSubscriptionLogs?: null | bool @go(SendSubscriptionLogs,*bool)

	// One or more (up to 10) tag_filter blocks as defined below.
	// +kubebuilder:validation:Optional
	tagFilter?: [...#TagFilterParameters] @go(TagFilter,[]TagFilterParameters)
}

#TagFilterObservation: {
	// The action is used to limit logs collection to include or exclude Azure resources with specific tags. Possible values are Include and Exclude. Note that the Exclude takes priority over the Include.
	action?: null | string @go(Action,*string)

	// The name of the tag to match.
	name?: null | string @go(Name,*string)

	// The value of the tag to match.
	value?: null | string @go(Value,*string)
}

#TagFilterParameters: {
	// The action is used to limit logs collection to include or exclude Azure resources with specific tags. Possible values are Include and Exclude. Note that the Exclude takes priority over the Include.
	// +kubebuilder:validation:Required
	action?: null | string @go(Action,*string)

	// The name of the tag to match.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The value of the tag to match.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

// SubAccountTagRuleSpec defines the desired state of SubAccountTagRule
#SubAccountTagRuleSpec: {
	forProvider: #SubAccountTagRuleParameters @go(ForProvider)
}

// SubAccountTagRuleStatus defines the observed state of SubAccountTagRule.
#SubAccountTagRuleStatus: {
	atProvider?: #SubAccountTagRuleObservation @go(AtProvider)
}

// SubAccountTagRule is the Schema for the SubAccountTagRules API. Manages a Logz Sub Account Tag Rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#SubAccountTagRule: {
	spec:    #SubAccountTagRuleSpec   @go(Spec)
	status?: #SubAccountTagRuleStatus @go(Status)
}

// SubAccountTagRuleList contains a list of SubAccountTagRules
#SubAccountTagRuleList: {
	items: [...#SubAccountTagRule] @go(Items,[]SubAccountTagRule)
}
