// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/databoxedge/v1beta1

package v1beta1

#DeviceInitParameters: {
	// The Azure Region where the Databox Edge Device should exist. Changing this forces a new Databox Edge Device to be created.
	location?: null | string @go(Location,*string)

	// The sku_name is comprised of two segments separated by a hyphen (e.g. TEA_1Node_UPS_Heater-Standard). The first segment of the sku_name defines the name of the SKU, possible values are Gateway, EdgeMR_Mini, EdgeP_Base, EdgeP_High, EdgePR_Base, EdgePR_Base_UPS, GPU, RCA_Large, RCA_Small, RDC, TCA_Large, TCA_Small, TDC, TEA_1Node, TEA_1Node_UPS, TEA_1Node_Heater, TEA_1Node_UPS_Heater, TEA_4Node_Heater, TEA_4Node_UPS_Heater or TMA. The second segment defines the tier of the sku_name, possible values are Standard. For more information see the product documentation. Changing this forces a new Databox Edge Device to be created.
	skuName?: null | string @go(SkuName,*string)

	// A mapping of tags which should be assigned to the Databox Edge Device.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#DeviceObservation: {
	// A device_properties block as defined below.
	deviceProperties?: [...#DevicePropertiesObservation] @go(DeviceProperties,[]DevicePropertiesObservation)

	// The ID of the Databox Edge Device.
	id?: null | string @go(ID,*string)

	// The Azure Region where the Databox Edge Device should exist. Changing this forces a new Databox Edge Device to be created.
	location?: null | string @go(Location,*string)

	// The name of the Resource Group where the Databox Edge Device should exist. Changing this forces a new Databox Edge Device to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The sku_name is comprised of two segments separated by a hyphen (e.g. TEA_1Node_UPS_Heater-Standard). The first segment of the sku_name defines the name of the SKU, possible values are Gateway, EdgeMR_Mini, EdgeP_Base, EdgeP_High, EdgePR_Base, EdgePR_Base_UPS, GPU, RCA_Large, RCA_Small, RDC, TCA_Large, TCA_Small, TDC, TEA_1Node, TEA_1Node_UPS, TEA_1Node_Heater, TEA_1Node_UPS_Heater, TEA_4Node_Heater, TEA_4Node_UPS_Heater or TMA. The second segment defines the tier of the sku_name, possible values are Standard. For more information see the product documentation. Changing this forces a new Databox Edge Device to be created.
	skuName?: null | string @go(SkuName,*string)

	// A mapping of tags which should be assigned to the Databox Edge Device.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#DeviceParameters: {
	// The Azure Region where the Databox Edge Device should exist. Changing this forces a new Databox Edge Device to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The name of the Resource Group where the Databox Edge Device should exist. Changing this forces a new Databox Edge Device to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The sku_name is comprised of two segments separated by a hyphen (e.g. TEA_1Node_UPS_Heater-Standard). The first segment of the sku_name defines the name of the SKU, possible values are Gateway, EdgeMR_Mini, EdgeP_Base, EdgeP_High, EdgePR_Base, EdgePR_Base_UPS, GPU, RCA_Large, RCA_Small, RDC, TCA_Large, TCA_Small, TDC, TEA_1Node, TEA_1Node_UPS, TEA_1Node_Heater, TEA_1Node_UPS_Heater, TEA_4Node_Heater, TEA_4Node_UPS_Heater or TMA. The second segment defines the tier of the sku_name, possible values are Standard. For more information see the product documentation. Changing this forces a new Databox Edge Device to be created.
	// +kubebuilder:validation:Optional
	skuName?: null | string @go(SkuName,*string)

	// A mapping of tags which should be assigned to the Databox Edge Device.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#DevicePropertiesInitParameters: {
}

#DevicePropertiesObservation: {
	// The Data Box Edge/Gateway device local capacity in MB.
	capacity?: null | float64 @go(Capacity,*float64)

	// Type of compute roles configured.
	configuredRoleTypes?: [...null | string] @go(ConfiguredRoleTypes,[]*string)

	// The Data Box Edge/Gateway device culture.
	culture?: null | string @go(Culture,*string)

	// The device software version number of the device (e.g. 1.2.18105.6).
	hcsVersion?: null | string @go(HcsVersion,*string)

	// The Data Box Edge/Gateway device model.
	model?: null | string @go(Model,*string)

	// The number of nodes in the cluster.
	nodeCount?: null | float64 @go(NodeCount,*float64)

	// The Serial Number of Data Box Edge/Gateway device.
	serialNumber?: null | string @go(SerialNumber,*string)

	// The Data Box Edge/Gateway device software version.
	softwareVersion?: null | string @go(SoftwareVersion,*string)

	// The status of the Data Box Edge/Gateway device.
	status?: null | string @go(Status,*string)

	// The Data Box Edge/Gateway device timezone.
	timeZone?: null | string @go(TimeZone,*string)

	// The type of the Data Box Edge/Gateway device.
	type?: null | string @go(Type,*string)
}

#DevicePropertiesParameters: {
}

// DeviceSpec defines the desired state of Device
#DeviceSpec: {
	forProvider: #DeviceParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DeviceInitParameters @go(InitProvider)
}

// DeviceStatus defines the observed state of Device.
#DeviceStatus: {
	atProvider?: #DeviceObservation @go(AtProvider)
}

// Device is the Schema for the Devices API. Manages a Databox Edge Device.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Device: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || has(self.initProvider.location)",message="location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.skuName) || has(self.initProvider.skuName)",message="skuName is a required parameter"
	spec:    #DeviceSpec   @go(Spec)
	status?: #DeviceStatus @go(Status)
}

// DeviceList contains a list of Devices
#DeviceList: {
	items: [...#Device] @go(Items,[]Device)
}
