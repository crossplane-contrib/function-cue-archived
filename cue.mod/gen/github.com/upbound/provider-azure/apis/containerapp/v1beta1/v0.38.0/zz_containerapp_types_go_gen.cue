// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/containerapp/v1beta1

package v1beta1

#ContainerAppInitParameters: {
	// A dapr block as detailed below.
	dapr?: [...#DaprInitParameters] @go(Dapr,[]DaprInitParameters)

	// An identity block as detailed below.
	identity?: [...#IdentityInitParameters] @go(Identity,[]IdentityInitParameters)

	// An ingress block as detailed below.
	ingress?: [...#IngressInitParameters] @go(Ingress,[]IngressInitParameters)

	// A registry block as detailed below.
	registry?: [...#RegistryInitParameters] @go(Registry,[]RegistryInitParameters)

	// The revisions operational mode for the Container App. Possible values include Single and Multiple. In Single mode, a single revision is in operation at any given time. In Multiple mode, more than one revision can be active at a time and can be configured with load distribution via the traffic_weight block in the ingress configuration.
	revisionMode?: null | string @go(RevisionMode,*string)

	// One or more secret block as detailed below.
	secret?: [...#SecretInitParameters] @go(Secret,[]SecretInitParameters)

	// A mapping of tags to assign to the Container App.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A template block as detailed below.
	template?: [...#TemplateInitParameters] @go(Template,[]TemplateInitParameters)
}

#ContainerAppObservation: {
	// The ID of the Container App Environment within which this Container App should exist. Changing this forces a new resource to be created.
	// The ID of the Container App Environment to host this Container App.
	containerAppEnvironmentId?: null | string @go(ContainerAppEnvironmentID,*string)

	// A dapr block as detailed below.
	dapr?: [...#DaprObservation] @go(Dapr,[]DaprObservation)

	// The ID of the Container App.
	id?: null | string @go(ID,*string)

	// An identity block as detailed below.
	identity?: [...#IdentityObservation] @go(Identity,[]IdentityObservation)

	// An ingress block as detailed below.
	ingress?: [...#IngressObservation] @go(Ingress,[]IngressObservation)

	// The FQDN of the Latest Revision of the Container App.
	// The FQDN of the Latest Revision of the Container App.
	latestRevisionFqdn?: null | string @go(LatestRevisionFqdn,*string)

	// The name of the latest Container Revision.
	// The name of the latest Container Revision.
	latestRevisionName?: null | string @go(LatestRevisionName,*string)

	// The location this Container App is deployed in. This is the same as the Environment in which it is deployed.
	location?: null | string @go(Location,*string)

	// A list of the Public IP Addresses which the Container App uses for outbound network access.
	outboundIpAddresses?: [...null | string] @go(OutboundIPAddresses,[]*string)

	// A registry block as detailed below.
	registry?: [...#RegistryObservation] @go(Registry,[]RegistryObservation)

	// The name of the resource group in which the Container App Environment is to be created. Changing this forces a new resource to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The revisions operational mode for the Container App. Possible values include Single and Multiple. In Single mode, a single revision is in operation at any given time. In Multiple mode, more than one revision can be active at a time and can be configured with load distribution via the traffic_weight block in the ingress configuration.
	revisionMode?: null | string @go(RevisionMode,*string)

	// A mapping of tags to assign to the Container App.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A template block as detailed below.
	template?: [...#TemplateObservation] @go(Template,[]TemplateObservation)
}

#ContainerAppParameters: {
	// The ID of the Container App Environment within which this Container App should exist. Changing this forces a new resource to be created.
	// The ID of the Container App Environment to host this Container App.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/containerapp/v1beta1.Environment
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	containerAppEnvironmentId?: null | string @go(ContainerAppEnvironmentID,*string)

	// A dapr block as detailed below.
	// +kubebuilder:validation:Optional
	dapr?: [...#DaprParameters] @go(Dapr,[]DaprParameters)

	// An identity block as detailed below.
	// +kubebuilder:validation:Optional
	identity?: [...#IdentityParameters] @go(Identity,[]IdentityParameters)

	// An ingress block as detailed below.
	// +kubebuilder:validation:Optional
	ingress?: [...#IngressParameters] @go(Ingress,[]IngressParameters)

	// A registry block as detailed below.
	// +kubebuilder:validation:Optional
	registry?: [...#RegistryParameters] @go(Registry,[]RegistryParameters)

	// The name of the resource group in which the Container App Environment is to be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The revisions operational mode for the Container App. Possible values include Single and Multiple. In Single mode, a single revision is in operation at any given time. In Multiple mode, more than one revision can be active at a time and can be configured with load distribution via the traffic_weight block in the ingress configuration.
	// +kubebuilder:validation:Optional
	revisionMode?: null | string @go(RevisionMode,*string)

	// A mapping of tags to assign to the Container App.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A template block as detailed below.
	// +kubebuilder:validation:Optional
	template?: [...#TemplateParameters] @go(Template,[]TemplateParameters)
}

#ContainerInitParameters: {
	// A list of extra arguments to pass to the container.
	// A list of args to pass to the container.
	args?: [...null | string] @go(Args,[]*string)

	// The amount of vCPU to allocate to the container. Possible values include 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, and 2.0.
	// The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`
	cpu?: null | float64 @go(CPU,*float64)

	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	command?: [...null | string] @go(Command,[]*string)

	// One or more env blocks as detailed below.
	env?: [...#EnvInitParameters] @go(Env,[]EnvInitParameters)

	// The image to use to create the container.
	// The image to use to create the container.
	image?: null | string @go(Image,*string)

	// A liveness_probe block as detailed below.
	livenessProbe?: [...#LivenessProbeInitParameters] @go(LivenessProbe,[]LivenessProbeInitParameters)

	// The amount of memory to allocate to the container. Possible values include 0.5Gi, 1.0Gi, 1.5Gi, 2.0Gi, 2.5Gi, 3.0Gi, 3.5Gi, and 4.0Gi.
	// The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1.0Gi`, `1.5Gi`, `2.0Gi`, `2.5Gi`, `3.0Gi`, `3.5Gi`, and `4.0Gi`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`
	memory?: null | string @go(Memory,*string)

	// The name of the Volume to be mounted in the container.
	// The name of the container.
	name?: null | string @go(Name,*string)

	// A readiness_probe block as detailed below.
	readinessProbe?: [...#ReadinessProbeInitParameters] @go(ReadinessProbe,[]ReadinessProbeInitParameters)

	// A startup_probe block as detailed below.
	startupProbe?: [...#StartupProbeInitParameters] @go(StartupProbe,[]StartupProbeInitParameters)

	// A volume_mounts block as detailed below.
	volumeMounts?: [...#VolumeMountsInitParameters] @go(VolumeMounts,[]VolumeMountsInitParameters)
}

#ContainerObservation: {
	// A list of extra arguments to pass to the container.
	// A list of args to pass to the container.
	args?: [...null | string] @go(Args,[]*string)

	// The amount of vCPU to allocate to the container. Possible values include 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, and 2.0.
	// The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`
	cpu?: null | float64 @go(CPU,*float64)

	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	command?: [...null | string] @go(Command,[]*string)

	// One or more env blocks as detailed below.
	env?: [...#EnvObservation] @go(Env,[]EnvObservation)

	// The amount of ephemeral storage available to the Container App.
	// The amount of ephemeral storage available to the Container App.
	ephemeralStorage?: null | string @go(EphemeralStorage,*string)

	// The image to use to create the container.
	// The image to use to create the container.
	image?: null | string @go(Image,*string)

	// A liveness_probe block as detailed below.
	livenessProbe?: [...#LivenessProbeObservation] @go(LivenessProbe,[]LivenessProbeObservation)

	// The amount of memory to allocate to the container. Possible values include 0.5Gi, 1.0Gi, 1.5Gi, 2.0Gi, 2.5Gi, 3.0Gi, 3.5Gi, and 4.0Gi.
	// The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1.0Gi`, `1.5Gi`, `2.0Gi`, `2.5Gi`, `3.0Gi`, `3.5Gi`, and `4.0Gi`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`
	memory?: null | string @go(Memory,*string)

	// The name of the Volume to be mounted in the container.
	// The name of the container.
	name?: null | string @go(Name,*string)

	// A readiness_probe block as detailed below.
	readinessProbe?: [...#ReadinessProbeObservation] @go(ReadinessProbe,[]ReadinessProbeObservation)

	// A startup_probe block as detailed below.
	startupProbe?: [...#StartupProbeObservation] @go(StartupProbe,[]StartupProbeObservation)

	// A volume_mounts block as detailed below.
	volumeMounts?: [...#VolumeMountsObservation] @go(VolumeMounts,[]VolumeMountsObservation)
}

#ContainerParameters: {
	// A list of extra arguments to pass to the container.
	// A list of args to pass to the container.
	// +kubebuilder:validation:Optional
	args?: [...null | string] @go(Args,[]*string)

	// The amount of vCPU to allocate to the container. Possible values include 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, and 2.0.
	// The amount of vCPU to allocate to the container. Possible values include `0.25`, `0.5`, `0.75`, `1.0`, `1.25`, `1.5`, `1.75`, and `2.0`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.0` / `2.0` or `0.5` / `1.0`
	// +kubebuilder:validation:Optional
	cpu?: null | float64 @go(CPU,*float64)

	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// A command to pass to the container to override the default. This is provided as a list of command line elements without spaces.
	// +kubebuilder:validation:Optional
	command?: [...null | string] @go(Command,[]*string)

	// One or more env blocks as detailed below.
	// +kubebuilder:validation:Optional
	env?: [...#EnvParameters] @go(Env,[]EnvParameters)

	// The image to use to create the container.
	// The image to use to create the container.
	// +kubebuilder:validation:Optional
	image?: null | string @go(Image,*string)

	// A liveness_probe block as detailed below.
	// +kubebuilder:validation:Optional
	livenessProbe?: [...#LivenessProbeParameters] @go(LivenessProbe,[]LivenessProbeParameters)

	// The amount of memory to allocate to the container. Possible values include 0.5Gi, 1.0Gi, 1.5Gi, 2.0Gi, 2.5Gi, 3.0Gi, 3.5Gi, and 4.0Gi.
	// The amount of memory to allocate to the container. Possible values include `0.5Gi`, `1.0Gi`, `1.5Gi`, `2.0Gi`, `2.5Gi`, `3.0Gi`, `3.5Gi`, and `4.0Gi`. **NOTE:** `cpu` and `memory` must be specified in `0.25'/'0.5Gi` combination increments. e.g. `1.25` / `2.5Gi` or `0.75` / `1.5Gi`
	// +kubebuilder:validation:Optional
	memory?: null | string @go(Memory,*string)

	// The name of the Volume to be mounted in the container.
	// The name of the container.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A readiness_probe block as detailed below.
	// +kubebuilder:validation:Optional
	readinessProbe?: [...#ReadinessProbeParameters] @go(ReadinessProbe,[]ReadinessProbeParameters)

	// A startup_probe block as detailed below.
	// +kubebuilder:validation:Optional
	startupProbe?: [...#StartupProbeParameters] @go(StartupProbe,[]StartupProbeParameters)

	// A volume_mounts block as detailed below.
	// +kubebuilder:validation:Optional
	volumeMounts?: [...#VolumeMountsParameters] @go(VolumeMounts,[]VolumeMountsParameters)
}

#CustomDomainInitParameters: {
	// The Binding type. Possible values include Disabled and SniEnabled. Defaults to Disabled.
	// The Binding type. Possible values include `Disabled` and `SniEnabled`. Defaults to `Disabled`
	certificateBindingType?: null | string @go(CertificateBindingType,*string)

	// The ID of the Container App Environment Certificate.
	certificateId?: null | string @go(CertificateID,*string)

	// The name of the Volume to be mounted in the container.
	// The hostname of the Certificate. Must be the CN or a named SAN in the certificate.
	name?: null | string @go(Name,*string)
}

#CustomDomainObservation: {
	// The Binding type. Possible values include Disabled and SniEnabled. Defaults to Disabled.
	// The Binding type. Possible values include `Disabled` and `SniEnabled`. Defaults to `Disabled`
	certificateBindingType?: null | string @go(CertificateBindingType,*string)

	// The ID of the Container App Environment Certificate.
	certificateId?: null | string @go(CertificateID,*string)

	// The name of the Volume to be mounted in the container.
	// The hostname of the Certificate. Must be the CN or a named SAN in the certificate.
	name?: null | string @go(Name,*string)
}

#CustomDomainParameters: {
	// The Binding type. Possible values include Disabled and SniEnabled. Defaults to Disabled.
	// The Binding type. Possible values include `Disabled` and `SniEnabled`. Defaults to `Disabled`
	// +kubebuilder:validation:Optional
	certificateBindingType?: null | string @go(CertificateBindingType,*string)

	// The ID of the Container App Environment Certificate.
	// +kubebuilder:validation:Optional
	certificateId?: null | string @go(CertificateID,*string)

	// The name of the Volume to be mounted in the container.
	// The hostname of the Certificate. Must be the CN or a named SAN in the certificate.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#DaprInitParameters: {
	// The Dapr Application Identifier.
	// The Dapr Application Identifier.
	appId?: null | string @go(AppID,*string)

	// The port which the application is listening on. This is the same as the ingress port.
	// The port which the application is listening on. This is the same as the `ingress` port.
	appPort?: null | float64 @go(AppPort,*float64)

	// The protocol for the app. Possible values include http and grpc. Defaults to http.
	// The protocol for the app. Possible values include `http` and `grpc`. Defaults to `http`.
	appProtocol?: null | string @go(AppProtocol,*string)
}

#DaprObservation: {
	// The Dapr Application Identifier.
	// The Dapr Application Identifier.
	appId?: null | string @go(AppID,*string)

	// The port which the application is listening on. This is the same as the ingress port.
	// The port which the application is listening on. This is the same as the `ingress` port.
	appPort?: null | float64 @go(AppPort,*float64)

	// The protocol for the app. Possible values include http and grpc. Defaults to http.
	// The protocol for the app. Possible values include `http` and `grpc`. Defaults to `http`.
	appProtocol?: null | string @go(AppProtocol,*string)
}

#DaprParameters: {
	// The Dapr Application Identifier.
	// The Dapr Application Identifier.
	// +kubebuilder:validation:Optional
	appId?: null | string @go(AppID,*string)

	// The port which the application is listening on. This is the same as the ingress port.
	// The port which the application is listening on. This is the same as the `ingress` port.
	// +kubebuilder:validation:Optional
	appPort?: null | float64 @go(AppPort,*float64)

	// The protocol for the app. Possible values include http and grpc. Defaults to http.
	// The protocol for the app. Possible values include `http` and `grpc`. Defaults to `http`.
	// +kubebuilder:validation:Optional
	appProtocol?: null | string @go(AppProtocol,*string)
}

#EnvInitParameters: {
	// The name of the Volume to be mounted in the container.
	// The name of the environment variable for the container.
	name?: null | string @go(Name,*string)

	// The name of the secret that contains the value for this environment variable.
	// The name of the secret that contains the value for this environment variable.
	secretName?: null | string @go(SecretName,*string)

	// The value for this secret.
	// The value for this environment variable. **NOTE:** This value is ignored if `secret_name` is used
	value?: null | string @go(Value,*string)
}

#EnvObservation: {
	// The name of the Volume to be mounted in the container.
	// The name of the environment variable for the container.
	name?: null | string @go(Name,*string)

	// The name of the secret that contains the value for this environment variable.
	// The name of the secret that contains the value for this environment variable.
	secretName?: null | string @go(SecretName,*string)

	// The value for this secret.
	// The value for this environment variable. **NOTE:** This value is ignored if `secret_name` is used
	value?: null | string @go(Value,*string)
}

#EnvParameters: {
	// The name of the Volume to be mounted in the container.
	// The name of the environment variable for the container.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The name of the secret that contains the value for this environment variable.
	// The name of the secret that contains the value for this environment variable.
	// +kubebuilder:validation:Optional
	secretName?: null | string @go(SecretName,*string)

	// The value for this secret.
	// The value for this environment variable. **NOTE:** This value is ignored if `secret_name` is used
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#HeaderInitParameters: {
	// The name of the Volume to be mounted in the container.
	// The HTTP Header Name.
	name?: null | string @go(Name,*string)

	// The value for this secret.
	// The HTTP Header value.
	value?: null | string @go(Value,*string)
}

#HeaderObservation: {
	// The name of the Volume to be mounted in the container.
	// The HTTP Header Name.
	name?: null | string @go(Name,*string)

	// The value for this secret.
	// The HTTP Header value.
	value?: null | string @go(Value,*string)
}

#HeaderParameters: {
	// The name of the Volume to be mounted in the container.
	// The HTTP Header Name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The value for this secret.
	// The HTTP Header value.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#IdentityInitParameters: {
	// - A list of one or more Resource IDs for User Assigned Managed identities to assign. Required when type is set to UserAssigned.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The type of managed identity to assign. Possible values are UserAssigned and SystemAssigned
	type?: null | string @go(Type,*string)
}

#IdentityObservation: {
	// - A list of one or more Resource IDs for User Assigned Managed identities to assign. Required when type is set to UserAssigned.
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The ID of the Container App.
	principalId?: null | string @go(PrincipalID,*string)

	// The ID of the Container App.
	tenantId?: null | string @go(TenantID,*string)

	// The type of managed identity to assign. Possible values are UserAssigned and SystemAssigned
	type?: null | string @go(Type,*string)
}

#IdentityParameters: {
	// - A list of one or more Resource IDs for User Assigned Managed identities to assign. Required when type is set to UserAssigned.
	// +kubebuilder:validation:Optional
	identityIds?: [...null | string] @go(IdentityIds,[]*string)

	// The type of managed identity to assign. Possible values are UserAssigned and SystemAssigned
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#IngressInitParameters: {
	// Should this ingress allow insecure connections?
	// Should this ingress allow insecure connections?
	allowInsecureConnections?: null | bool @go(AllowInsecureConnections,*bool)

	// One or more custom_domain block as detailed below.
	customDomain?: [...#CustomDomainInitParameters] @go(CustomDomain,[]CustomDomainInitParameters)

	// Is this an external Ingress.
	// Is this an external Ingress.
	externalEnabled?: null | bool @go(ExternalEnabled,*bool)

	// The target port on the container for the Ingress traffic.
	// The target port on the container for the Ingress traffic.
	targetPort?: null | float64 @go(TargetPort,*float64)

	// A traffic_weight block as detailed below.
	trafficWeight?: [...#TrafficWeightInitParameters] @go(TrafficWeight,[]TrafficWeightInitParameters)

	// The transport method for the Ingress. Possible values include auto, http, and http2. Defaults to auto
	// The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
	transport?: null | string @go(Transport,*string)
}

#IngressObservation: {
	// Should this ingress allow insecure connections?
	// Should this ingress allow insecure connections?
	allowInsecureConnections?: null | bool @go(AllowInsecureConnections,*bool)

	// One or more custom_domain block as detailed below.
	customDomain?: [...#CustomDomainObservation] @go(CustomDomain,[]CustomDomainObservation)

	// Is this an external Ingress.
	// Is this an external Ingress.
	externalEnabled?: null | bool @go(ExternalEnabled,*bool)

	// The FQDN of the ingress.
	// The FQDN of the ingress.
	fqdn?: null | string @go(Fqdn,*string)

	// The target port on the container for the Ingress traffic.
	// The target port on the container for the Ingress traffic.
	targetPort?: null | float64 @go(TargetPort,*float64)

	// A traffic_weight block as detailed below.
	trafficWeight?: [...#TrafficWeightObservation] @go(TrafficWeight,[]TrafficWeightObservation)

	// The transport method for the Ingress. Possible values include auto, http, and http2. Defaults to auto
	// The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
	transport?: null | string @go(Transport,*string)
}

#IngressParameters: {
	// Should this ingress allow insecure connections?
	// Should this ingress allow insecure connections?
	// +kubebuilder:validation:Optional
	allowInsecureConnections?: null | bool @go(AllowInsecureConnections,*bool)

	// One or more custom_domain block as detailed below.
	// +kubebuilder:validation:Optional
	customDomain?: [...#CustomDomainParameters] @go(CustomDomain,[]CustomDomainParameters)

	// Is this an external Ingress.
	// Is this an external Ingress.
	// +kubebuilder:validation:Optional
	externalEnabled?: null | bool @go(ExternalEnabled,*bool)

	// The target port on the container for the Ingress traffic.
	// The target port on the container for the Ingress traffic.
	// +kubebuilder:validation:Optional
	targetPort?: null | float64 @go(TargetPort,*float64)

	// A traffic_weight block as detailed below.
	// +kubebuilder:validation:Optional
	trafficWeight: [...#TrafficWeightParameters] @go(TrafficWeight,[]TrafficWeightParameters)

	// The transport method for the Ingress. Possible values include auto, http, and http2. Defaults to auto
	// The transport method for the Ingress. Possible values include `auto`, `http`, and `http2`. Defaults to `auto`
	// +kubebuilder:validation:Optional
	transport?: null | string @go(Transport,*string)
}

#LivenessProbeInitParameters: {
	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
	failureCountThreshold?: null | float64 @go(FailureCountThreshold,*float64)

	// A header block as detailed below.
	header?: [...#HeaderInitParameters] @go(Header,[]HeaderInitParameters)

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	host?: null | string @go(Host,*string)

	// The time in seconds to wait after the container has started before the probe is started.
	// The time in seconds to wait after the container has started before the probe is started.
	initialDelay?: null | float64 @go(InitialDelay,*float64)

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	intervalSeconds?: null | float64 @go(IntervalSeconds,*float64)

	// The path in the container at which to mount this volume.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	path?: null | string @go(Path,*string)

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	port?: null | float64 @go(Port,*float64)

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	timeout?: null | float64 @go(Timeout,*float64)

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	transport?: null | string @go(Transport,*string)
}

#LivenessProbeObservation: {
	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
	failureCountThreshold?: null | float64 @go(FailureCountThreshold,*float64)

	// A header block as detailed below.
	header?: [...#HeaderObservation] @go(Header,[]HeaderObservation)

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	host?: null | string @go(Host,*string)

	// The time in seconds to wait after the container has started before the probe is started.
	// The time in seconds to wait after the container has started before the probe is started.
	initialDelay?: null | float64 @go(InitialDelay,*float64)

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	intervalSeconds?: null | float64 @go(IntervalSeconds,*float64)

	// The path in the container at which to mount this volume.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	path?: null | string @go(Path,*string)

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	port?: null | float64 @go(Port,*float64)

	// The time in seconds after the container is sent the termination signal before the process if forcibly killed.
	// The time in seconds after the container is sent the termination signal before the process if forcibly killed.
	terminationGracePeriodSeconds?: null | float64 @go(TerminationGracePeriodSeconds,*float64)

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	timeout?: null | float64 @go(Timeout,*float64)

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	transport?: null | string @go(Transport,*string)
}

#LivenessProbeParameters: {
	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
	// +kubebuilder:validation:Optional
	failureCountThreshold?: null | float64 @go(FailureCountThreshold,*float64)

	// A header block as detailed below.
	// +kubebuilder:validation:Optional
	header?: [...#HeaderParameters] @go(Header,[]HeaderParameters)

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	// +kubebuilder:validation:Optional
	host?: null | string @go(Host,*string)

	// The time in seconds to wait after the container has started before the probe is started.
	// The time in seconds to wait after the container has started before the probe is started.
	// +kubebuilder:validation:Optional
	initialDelay?: null | float64 @go(InitialDelay,*float64)

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	// +kubebuilder:validation:Optional
	intervalSeconds?: null | float64 @go(IntervalSeconds,*float64)

	// The path in the container at which to mount this volume.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	// +kubebuilder:validation:Optional
	timeout?: null | float64 @go(Timeout,*float64)

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	// +kubebuilder:validation:Optional
	transport?: null | string @go(Transport,*string)
}

#ReadinessProbeHeaderInitParameters: {
	// The name of the Volume to be mounted in the container.
	// The HTTP Header Name.
	name?: null | string @go(Name,*string)

	// The value for this secret.
	// The HTTP Header value.
	value?: null | string @go(Value,*string)
}

#ReadinessProbeHeaderObservation: {
	// The name of the Volume to be mounted in the container.
	// The HTTP Header Name.
	name?: null | string @go(Name,*string)

	// The value for this secret.
	// The HTTP Header value.
	value?: null | string @go(Value,*string)
}

#ReadinessProbeHeaderParameters: {
	// The name of the Volume to be mounted in the container.
	// The HTTP Header Name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The value for this secret.
	// The HTTP Header value.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#ReadinessProbeInitParameters: {
	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
	failureCountThreshold?: null | float64 @go(FailureCountThreshold,*float64)

	// A header block as detailed below.
	header?: [...#ReadinessProbeHeaderInitParameters] @go(Header,[]ReadinessProbeHeaderInitParameters)

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	host?: null | string @go(Host,*string)

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	intervalSeconds?: null | float64 @go(IntervalSeconds,*float64)

	// The path in the container at which to mount this volume.
	// The URI to use for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	path?: null | string @go(Path,*string)

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	port?: null | float64 @go(Port,*float64)

	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between `1` and `10`. Defaults to `3`.
	successCountThreshold?: null | float64 @go(SuccessCountThreshold,*float64)

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	timeout?: null | float64 @go(Timeout,*float64)

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	transport?: null | string @go(Transport,*string)
}

#ReadinessProbeObservation: {
	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
	failureCountThreshold?: null | float64 @go(FailureCountThreshold,*float64)

	// A header block as detailed below.
	header?: [...#ReadinessProbeHeaderObservation] @go(Header,[]ReadinessProbeHeaderObservation)

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	host?: null | string @go(Host,*string)

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	intervalSeconds?: null | float64 @go(IntervalSeconds,*float64)

	// The path in the container at which to mount this volume.
	// The URI to use for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	path?: null | string @go(Path,*string)

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	port?: null | float64 @go(Port,*float64)

	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between `1` and `10`. Defaults to `3`.
	successCountThreshold?: null | float64 @go(SuccessCountThreshold,*float64)

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	timeout?: null | float64 @go(Timeout,*float64)

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	transport?: null | string @go(Transport,*string)
}

#ReadinessProbeParameters: {
	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
	// +kubebuilder:validation:Optional
	failureCountThreshold?: null | float64 @go(FailureCountThreshold,*float64)

	// A header block as detailed below.
	// +kubebuilder:validation:Optional
	header?: [...#ReadinessProbeHeaderParameters] @go(Header,[]ReadinessProbeHeaderParameters)

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	// +kubebuilder:validation:Optional
	host?: null | string @go(Host,*string)

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	// +kubebuilder:validation:Optional
	intervalSeconds?: null | float64 @go(IntervalSeconds,*float64)

	// The path in the container at which to mount this volume.
	// The URI to use for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive successful responses required to consider this probe as successful. Possible values are between `1` and `10`. Defaults to `3`.
	// +kubebuilder:validation:Optional
	successCountThreshold?: null | float64 @go(SuccessCountThreshold,*float64)

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	// +kubebuilder:validation:Optional
	timeout?: null | float64 @go(Timeout,*float64)

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	// +kubebuilder:validation:Optional
	transport?: null | string @go(Transport,*string)
}

#RegistryInitParameters: {
	// Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.
	// ID of the System or User Managed Identity used to pull images from the Container Registry
	identity?: null | string @go(Identity,*string)

	// The name of the Secret Reference containing the password value for this user on the Container Registry, username must also be supplied.
	// The name of the Secret Reference containing the password value for this user on the Container Registry.
	passwordSecretName?: null | string @go(PasswordSecretName,*string)

	// The hostname for the Container Registry.
	// The hostname for the Container Registry.
	server?: null | string @go(Server,*string)

	// The username to use for this Container Registry, password_secret_name must also be supplied..
	// The username to use for this Container Registry.
	username?: null | string @go(Username,*string)
}

#RegistryObservation: {
	// Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.
	// ID of the System or User Managed Identity used to pull images from the Container Registry
	identity?: null | string @go(Identity,*string)

	// The name of the Secret Reference containing the password value for this user on the Container Registry, username must also be supplied.
	// The name of the Secret Reference containing the password value for this user on the Container Registry.
	passwordSecretName?: null | string @go(PasswordSecretName,*string)

	// The hostname for the Container Registry.
	// The hostname for the Container Registry.
	server?: null | string @go(Server,*string)

	// The username to use for this Container Registry, password_secret_name must also be supplied..
	// The username to use for this Container Registry.
	username?: null | string @go(Username,*string)
}

#RegistryParameters: {
	// Resource ID for the User Assigned Managed identity to use when pulling from the Container Registry.
	// ID of the System or User Managed Identity used to pull images from the Container Registry
	// +kubebuilder:validation:Optional
	identity?: null | string @go(Identity,*string)

	// The name of the Secret Reference containing the password value for this user on the Container Registry, username must also be supplied.
	// The name of the Secret Reference containing the password value for this user on the Container Registry.
	// +kubebuilder:validation:Optional
	passwordSecretName?: null | string @go(PasswordSecretName,*string)

	// The hostname for the Container Registry.
	// The hostname for the Container Registry.
	// +kubebuilder:validation:Optional
	server?: null | string @go(Server,*string)

	// The username to use for this Container Registry, password_secret_name must also be supplied..
	// The username to use for this Container Registry.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#SecretInitParameters: {
}

#SecretObservation: {
}

#StartupProbeHeaderInitParameters: {
	// The name of the Volume to be mounted in the container.
	// The HTTP Header Name.
	name?: null | string @go(Name,*string)

	// The value for this secret.
	// The HTTP Header value.
	value?: null | string @go(Value,*string)
}

#StartupProbeHeaderObservation: {
	// The name of the Volume to be mounted in the container.
	// The HTTP Header Name.
	name?: null | string @go(Name,*string)

	// The value for this secret.
	// The HTTP Header value.
	value?: null | string @go(Value,*string)
}

#StartupProbeHeaderParameters: {
	// The name of the Volume to be mounted in the container.
	// The HTTP Header Name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The value for this secret.
	// The HTTP Header value.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#StartupProbeInitParameters: {
	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
	failureCountThreshold?: null | float64 @go(FailureCountThreshold,*float64)

	// A header block as detailed below.
	header?: [...#StartupProbeHeaderInitParameters] @go(Header,[]StartupProbeHeaderInitParameters)

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	host?: null | string @go(Host,*string)

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	intervalSeconds?: null | float64 @go(IntervalSeconds,*float64)

	// The path in the container at which to mount this volume.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	path?: null | string @go(Path,*string)

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	port?: null | float64 @go(Port,*float64)

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	timeout?: null | float64 @go(Timeout,*float64)

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	transport?: null | string @go(Transport,*string)
}

#StartupProbeObservation: {
	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
	failureCountThreshold?: null | float64 @go(FailureCountThreshold,*float64)

	// A header block as detailed below.
	header?: [...#StartupProbeHeaderObservation] @go(Header,[]StartupProbeHeaderObservation)

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	host?: null | string @go(Host,*string)

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	intervalSeconds?: null | float64 @go(IntervalSeconds,*float64)

	// The path in the container at which to mount this volume.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	path?: null | string @go(Path,*string)

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	port?: null | float64 @go(Port,*float64)

	// The time in seconds after the container is sent the termination signal before the process if forcibly killed.
	// The time in seconds after the container is sent the termination signal before the process if forcibly killed.
	terminationGracePeriodSeconds?: null | float64 @go(TerminationGracePeriodSeconds,*float64)

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	timeout?: null | float64 @go(Timeout,*float64)

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	transport?: null | string @go(Transport,*string)
}

#StartupProbeParameters: {
	// The number of consecutive failures required to consider this probe as failed. Possible values are between 1 and 10. Defaults to 3.
	// The number of consecutive failures required to consider this probe as failed. Possible values are between `1` and `10`. Defaults to `3`.
	// +kubebuilder:validation:Optional
	failureCountThreshold?: null | float64 @go(FailureCountThreshold,*float64)

	// A header block as detailed below.
	// +kubebuilder:validation:Optional
	header?: [...#StartupProbeHeaderParameters] @go(Header,[]StartupProbeHeaderParameters)

	// The value for the host header which should be sent with this probe. If unspecified, the IP Address of the Pod is used as the host header. Setting a value for Host in headers can be used to override this for HTTP and HTTPS type probes.
	// The probe hostname. Defaults to the pod IP address. Setting a value for `Host` in `headers` can be used to override this for `http` and `https` type probes.
	// +kubebuilder:validation:Optional
	host?: null | string @go(Host,*string)

	// How often, in seconds, the probe should run. Possible values are between 1 and 240. Defaults to 10
	// How often, in seconds, the probe should run. Possible values are between `1` and `240`. Defaults to `10`
	// +kubebuilder:validation:Optional
	intervalSeconds?: null | float64 @go(IntervalSeconds,*float64)

	// The path in the container at which to mount this volume.
	// The URI to use with the `host` for http type probes. Not valid for `TCP` type probes. Defaults to `/`.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The port number on which to connect. Possible values are between 1 and 65535.
	// The port number on which to connect. Possible values are between `1` and `65535`.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Time in seconds after which the probe times out. Possible values are in the range 1 - 240. Defaults to 1.
	// Time in seconds after which the probe times out. Possible values are between `1` an `240`. Defaults to `1`.
	// +kubebuilder:validation:Optional
	timeout?: null | float64 @go(Timeout,*float64)

	// Type of probe. Possible values are TCP, HTTP, and HTTPS.
	// Type of probe. Possible values are `TCP`, `HTTP`, and `HTTPS`.
	// +kubebuilder:validation:Optional
	transport?: null | string @go(Transport,*string)
}

#TemplateInitParameters: {
	// One or more container blocks as detailed below.
	container?: [...#ContainerInitParameters] @go(Container,[]ContainerInitParameters)

	// The maximum number of replicas for this container.
	// The maximum number of replicas for this container.
	maxReplicas?: null | float64 @go(MaxReplicas,*float64)

	// The minimum number of replicas for this container.
	// The minimum number of replicas for this container.
	minReplicas?: null | float64 @go(MinReplicas,*float64)

	// The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.
	// The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.
	revisionSuffix?: null | string @go(RevisionSuffix,*string)

	// A volume block as detailed below.
	volume?: [...#VolumeInitParameters] @go(Volume,[]VolumeInitParameters)
}

#TemplateObservation: {
	// One or more container blocks as detailed below.
	container?: [...#ContainerObservation] @go(Container,[]ContainerObservation)

	// The maximum number of replicas for this container.
	// The maximum number of replicas for this container.
	maxReplicas?: null | float64 @go(MaxReplicas,*float64)

	// The minimum number of replicas for this container.
	// The minimum number of replicas for this container.
	minReplicas?: null | float64 @go(MinReplicas,*float64)

	// The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.
	// The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.
	revisionSuffix?: null | string @go(RevisionSuffix,*string)

	// A volume block as detailed below.
	volume?: [...#VolumeObservation] @go(Volume,[]VolumeObservation)
}

#TemplateParameters: {
	// One or more container blocks as detailed below.
	// +kubebuilder:validation:Optional
	container: [...#ContainerParameters] @go(Container,[]ContainerParameters)

	// The maximum number of replicas for this container.
	// The maximum number of replicas for this container.
	// +kubebuilder:validation:Optional
	maxReplicas?: null | float64 @go(MaxReplicas,*float64)

	// The minimum number of replicas for this container.
	// The minimum number of replicas for this container.
	// +kubebuilder:validation:Optional
	minReplicas?: null | float64 @go(MinReplicas,*float64)

	// The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.
	// The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.
	// +kubebuilder:validation:Optional
	revisionSuffix?: null | string @go(RevisionSuffix,*string)

	// A volume block as detailed below.
	// +kubebuilder:validation:Optional
	volume?: [...#VolumeParameters] @go(Volume,[]VolumeParameters)
}

#TrafficWeightInitParameters: {
	// The label to apply to the revision as a name prefix for routing traffic.
	// The label to apply to the revision as a name prefix for routing traffic.
	label?: null | string @go(Label,*string)

	// This traffic Weight relates to the latest stable Container Revision.
	// This traffic Weight relates to the latest stable Container Revision.
	latestRevision?: null | bool @go(LatestRevision,*bool)

	// The percentage of traffic which should be sent this revision.
	// The percentage of traffic to send to this revision.
	percentage?: null | float64 @go(Percentage,*float64)

	// The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.
	// The suffix string to append to the revision. This must be unique for the Container App's lifetime. A default hash created by the service will be used if this value is omitted.
	revisionSuffix?: null | string @go(RevisionSuffix,*string)
}

#TrafficWeightObservation: {
	// The label to apply to the revision as a name prefix for routing traffic.
	// The label to apply to the revision as a name prefix for routing traffic.
	label?: null | string @go(Label,*string)

	// This traffic Weight relates to the latest stable Container Revision.
	// This traffic Weight relates to the latest stable Container Revision.
	latestRevision?: null | bool @go(LatestRevision,*bool)

	// The percentage of traffic which should be sent this revision.
	// The percentage of traffic to send to this revision.
	percentage?: null | float64 @go(Percentage,*float64)

	// The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.
	// The suffix string to append to the revision. This must be unique for the Container App's lifetime. A default hash created by the service will be used if this value is omitted.
	revisionSuffix?: null | string @go(RevisionSuffix,*string)
}

#TrafficWeightParameters: {
	// The label to apply to the revision as a name prefix for routing traffic.
	// The label to apply to the revision as a name prefix for routing traffic.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// This traffic Weight relates to the latest stable Container Revision.
	// This traffic Weight relates to the latest stable Container Revision.
	// +kubebuilder:validation:Optional
	latestRevision?: null | bool @go(LatestRevision,*bool)

	// The percentage of traffic which should be sent this revision.
	// The percentage of traffic to send to this revision.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)

	// The suffix for the revision. This value must be unique for the lifetime of the Resource. If omitted the service will use a hash function to create one.
	// The suffix string to append to the revision. This must be unique for the Container App's lifetime. A default hash created by the service will be used if this value is omitted.
	// +kubebuilder:validation:Optional
	revisionSuffix?: null | string @go(RevisionSuffix,*string)
}

#VolumeInitParameters: {
	// The name of the Volume to be mounted in the container.
	// The name of the volume.
	name?: null | string @go(Name,*string)

	// The name of the AzureFile storage.
	// The name of the `AzureFile` storage. Required when `storage_type` is `AzureFile`
	storageName?: null | string @go(StorageName,*string)

	// The type of storage volume. Possible values include AzureFile and EmptyDir. Defaults to EmptyDir.
	// The type of storage volume. Possible values include `AzureFile` and `EmptyDir`. Defaults to `EmptyDir`.
	storageType?: null | string @go(StorageType,*string)
}

#VolumeMountsInitParameters: {
	// The name of the Volume to be mounted in the container.
	// The name of the Volume to be mounted in the container.
	name?: null | string @go(Name,*string)

	// The path in the container at which to mount this volume.
	// The path in the container at which to mount this volume.
	path?: null | string @go(Path,*string)
}

#VolumeMountsObservation: {
	// The name of the Volume to be mounted in the container.
	// The name of the Volume to be mounted in the container.
	name?: null | string @go(Name,*string)

	// The path in the container at which to mount this volume.
	// The path in the container at which to mount this volume.
	path?: null | string @go(Path,*string)
}

#VolumeMountsParameters: {
	// The name of the Volume to be mounted in the container.
	// The name of the Volume to be mounted in the container.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The path in the container at which to mount this volume.
	// The path in the container at which to mount this volume.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#VolumeObservation: {
	// The name of the Volume to be mounted in the container.
	// The name of the volume.
	name?: null | string @go(Name,*string)

	// The name of the AzureFile storage.
	// The name of the `AzureFile` storage. Required when `storage_type` is `AzureFile`
	storageName?: null | string @go(StorageName,*string)

	// The type of storage volume. Possible values include AzureFile and EmptyDir. Defaults to EmptyDir.
	// The type of storage volume. Possible values include `AzureFile` and `EmptyDir`. Defaults to `EmptyDir`.
	storageType?: null | string @go(StorageType,*string)
}

#VolumeParameters: {
	// The name of the Volume to be mounted in the container.
	// The name of the volume.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The name of the AzureFile storage.
	// The name of the `AzureFile` storage. Required when `storage_type` is `AzureFile`
	// +kubebuilder:validation:Optional
	storageName?: null | string @go(StorageName,*string)

	// The type of storage volume. Possible values include AzureFile and EmptyDir. Defaults to EmptyDir.
	// The type of storage volume. Possible values include `AzureFile` and `EmptyDir`. Defaults to `EmptyDir`.
	// +kubebuilder:validation:Optional
	storageType?: null | string @go(StorageType,*string)
}

// ContainerAppSpec defines the desired state of ContainerApp
#ContainerAppSpec: {
	forProvider: #ContainerAppParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ContainerAppInitParameters @go(InitProvider)
}

// ContainerAppStatus defines the observed state of ContainerApp.
#ContainerAppStatus: {
	atProvider?: #ContainerAppObservation @go(AtProvider)
}

// ContainerApp is the Schema for the ContainerApps API. Manages a Container App.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ContainerApp: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.revisionMode) || (has(self.initProvider) && has(self.initProvider.revisionMode))",message="spec.forProvider.revisionMode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.template) || (has(self.initProvider) && has(self.initProvider.template))",message="spec.forProvider.template is a required parameter"
	spec:    #ContainerAppSpec   @go(Spec)
	status?: #ContainerAppStatus @go(Status)
}

// ContainerAppList contains a list of ContainerApps
#ContainerAppList: {
	items: [...#ContainerApp] @go(Items,[]ContainerApp)
}
