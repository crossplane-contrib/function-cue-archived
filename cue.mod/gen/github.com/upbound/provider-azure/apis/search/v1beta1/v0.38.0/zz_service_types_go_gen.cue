// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/search/v1beta1

package v1beta1

#IdentityInitParameters: {
	// Specifies the type of Managed Service Identity that should be configured on this Search Service. The only possible value is SystemAssigned.
	type?: null | string @go(Type,*string)
}

#IdentityObservation: {
	// The Principal ID associated with this Managed Service Identity.
	principalId?: null | string @go(PrincipalID,*string)

	// The Tenant ID associated with this Managed Service Identity.
	tenantId?: null | string @go(TenantID,*string)

	// Specifies the type of Managed Service Identity that should be configured on this Search Service. The only possible value is SystemAssigned.
	type?: null | string @go(Type,*string)
}

#IdentityParameters: {
	// Specifies the type of Managed Service Identity that should be configured on this Search Service. The only possible value is SystemAssigned.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#QueryKeysInitParameters: {
}

#QueryKeysObservation: {
	// The value of this Query Key.
	key?: null | string @go(Key,*string)

	// The name of this Query Key.
	name?: null | string @go(Name,*string)
}

#QueryKeysParameters: {
}

#ServiceInitParameters: {
	// Specifies a list of inbound IPv4 or CIDRs that are allowed to access the Search Service. If the incoming IP request is from an IP address which is not included in the allowed_ips it will be blocked by the Search Services firewall.
	allowedIps?: [...null | string] @go(AllowedIps,[]*string)

	// Specifies the response that the Search Service should return for requests that fail authentication. Possible values include http401WithBearerChallenge or http403.
	authenticationFailureMode?: null | string @go(AuthenticationFailureMode,*string)

	// Specifies whether the Search Service should enforce that non-customer resources are encrypted. Defaults to false.
	customerManagedKeyEnforcementEnabled?: null | bool @go(CustomerManagedKeyEnforcementEnabled,*bool)

	// Specifies the Hosting Mode, which allows for High Density partitions (that allow for up to 1000 indexes) should be supported. Possible values are highDensity or default. Defaults to default. Changing this forces a new Search Service to be created.
	hostingMode?: null | string @go(HostingMode,*string)

	// An identity block as defined below.
	identity?: [...#IdentityInitParameters] @go(Identity,[]IdentityInitParameters)

	// Specifies whether the Search Service allows authenticating using API Keys? Defaults to false.
	localAuthenticationEnabled?: null | bool @go(LocalAuthenticationEnabled,*bool)

	// The Azure Region where the Search Service should exist. Changing this forces a new Search Service to be created.
	location?: null | string @go(Location,*string)

	// Specifies the number of partitions which should be created. This field cannot be set when using a free or basic sku (see the Microsoft documentation). Possible values include 1, 2, 3, 4, 6, or 12. Defaults to 1.
	partitionCount?: null | float64 @go(PartitionCount,*float64)

	// Specifies whether Public Network Access is allowed for this resource. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// Specifies the number of Replica's which should be created for this Search Service. This field cannot be set when using a free sku (see the Microsoft documentation).
	replicaCount?: null | float64 @go(ReplicaCount,*float64)

	// The SKU which should be used for this Search Service. Possible values include basic, free, standard, standard2, standard3, storage_optimized_l1 and storage_optimized_l2. Changing this forces a new Search Service to be created.
	sku?: null | string @go(Sku,*string)

	// Specifies a mapping of tags which should be assigned to this Search Service.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ServiceObservation: {
	// Specifies a list of inbound IPv4 or CIDRs that are allowed to access the Search Service. If the incoming IP request is from an IP address which is not included in the allowed_ips it will be blocked by the Search Services firewall.
	allowedIps?: [...null | string] @go(AllowedIps,[]*string)

	// Specifies the response that the Search Service should return for requests that fail authentication. Possible values include http401WithBearerChallenge or http403.
	authenticationFailureMode?: null | string @go(AuthenticationFailureMode,*string)

	// Specifies whether the Search Service should enforce that non-customer resources are encrypted. Defaults to false.
	customerManagedKeyEnforcementEnabled?: null | bool @go(CustomerManagedKeyEnforcementEnabled,*bool)

	// Specifies the Hosting Mode, which allows for High Density partitions (that allow for up to 1000 indexes) should be supported. Possible values are highDensity or default. Defaults to default. Changing this forces a new Search Service to be created.
	hostingMode?: null | string @go(HostingMode,*string)

	// The ID of the Search Service.
	id?: null | string @go(ID,*string)

	// An identity block as defined below.
	identity?: [...#IdentityObservation] @go(Identity,[]IdentityObservation)

	// Specifies whether the Search Service allows authenticating using API Keys? Defaults to false.
	localAuthenticationEnabled?: null | bool @go(LocalAuthenticationEnabled,*bool)

	// The Azure Region where the Search Service should exist. Changing this forces a new Search Service to be created.
	location?: null | string @go(Location,*string)

	// Specifies the number of partitions which should be created. This field cannot be set when using a free or basic sku (see the Microsoft documentation). Possible values include 1, 2, 3, 4, 6, or 12. Defaults to 1.
	partitionCount?: null | float64 @go(PartitionCount,*float64)

	// Specifies whether Public Network Access is allowed for this resource. Defaults to true.
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// A query_keys block as defined below.
	queryKeys?: [...#QueryKeysObservation] @go(QueryKeys,[]QueryKeysObservation)

	// Specifies the number of Replica's which should be created for this Search Service. This field cannot be set when using a free sku (see the Microsoft documentation).
	replicaCount?: null | float64 @go(ReplicaCount,*float64)

	// The name of the Resource Group where the Search Service should exist. Changing this forces a new Search Service to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The SKU which should be used for this Search Service. Possible values include basic, free, standard, standard2, standard3, storage_optimized_l1 and storage_optimized_l2. Changing this forces a new Search Service to be created.
	sku?: null | string @go(Sku,*string)

	// Specifies a mapping of tags which should be assigned to this Search Service.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ServiceParameters: {
	// Specifies a list of inbound IPv4 or CIDRs that are allowed to access the Search Service. If the incoming IP request is from an IP address which is not included in the allowed_ips it will be blocked by the Search Services firewall.
	// +kubebuilder:validation:Optional
	allowedIps?: [...null | string] @go(AllowedIps,[]*string)

	// Specifies the response that the Search Service should return for requests that fail authentication. Possible values include http401WithBearerChallenge or http403.
	// +kubebuilder:validation:Optional
	authenticationFailureMode?: null | string @go(AuthenticationFailureMode,*string)

	// Specifies whether the Search Service should enforce that non-customer resources are encrypted. Defaults to false.
	// +kubebuilder:validation:Optional
	customerManagedKeyEnforcementEnabled?: null | bool @go(CustomerManagedKeyEnforcementEnabled,*bool)

	// Specifies the Hosting Mode, which allows for High Density partitions (that allow for up to 1000 indexes) should be supported. Possible values are highDensity or default. Defaults to default. Changing this forces a new Search Service to be created.
	// +kubebuilder:validation:Optional
	hostingMode?: null | string @go(HostingMode,*string)

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	identity?: [...#IdentityParameters] @go(Identity,[]IdentityParameters)

	// Specifies whether the Search Service allows authenticating using API Keys? Defaults to false.
	// +kubebuilder:validation:Optional
	localAuthenticationEnabled?: null | bool @go(LocalAuthenticationEnabled,*bool)

	// The Azure Region where the Search Service should exist. Changing this forces a new Search Service to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Specifies the number of partitions which should be created. This field cannot be set when using a free or basic sku (see the Microsoft documentation). Possible values include 1, 2, 3, 4, 6, or 12. Defaults to 1.
	// +kubebuilder:validation:Optional
	partitionCount?: null | float64 @go(PartitionCount,*float64)

	// Specifies whether Public Network Access is allowed for this resource. Defaults to true.
	// +kubebuilder:validation:Optional
	publicNetworkAccessEnabled?: null | bool @go(PublicNetworkAccessEnabled,*bool)

	// Specifies the number of Replica's which should be created for this Search Service. This field cannot be set when using a free sku (see the Microsoft documentation).
	// +kubebuilder:validation:Optional
	replicaCount?: null | float64 @go(ReplicaCount,*float64)

	// The name of the Resource Group where the Search Service should exist. Changing this forces a new Search Service to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// The SKU which should be used for this Search Service. Possible values include basic, free, standard, standard2, standard3, storage_optimized_l1 and storage_optimized_l2. Changing this forces a new Search Service to be created.
	// +kubebuilder:validation:Optional
	sku?: null | string @go(Sku,*string)

	// Specifies a mapping of tags which should be assigned to this Search Service.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// ServiceSpec defines the desired state of Service
#ServiceSpec: {
	forProvider: #ServiceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ServiceInitParameters @go(InitProvider)
}

// ServiceStatus defines the observed state of Service.
#ServiceStatus: {
	atProvider?: #ServiceObservation @go(AtProvider)
}

// Service is the Schema for the Services API. Manages a Search Service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Service: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sku) || (has(self.initProvider) && has(self.initProvider.sku))",message="spec.forProvider.sku is a required parameter"
	spec:    #ServiceSpec   @go(Spec)
	status?: #ServiceStatus @go(Status)
}

// ServiceList contains a list of Services
#ServiceList: {
	items: [...#Service] @go(Items,[]Service)
}
