// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/storage/v1beta1

package v1beta1

#ContainerInitParameters: {
	// The Access Level configured for this Container. Possible values are blob, container or private. Defaults to private.
	containerAccessType?: null | string @go(ContainerAccessType,*string)

	// A mapping of MetaData for this Container. All metadata keys should be lowercase.
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)
}

#ContainerObservation: {
	// The Access Level configured for this Container. Possible values are blob, container or private. Defaults to private.
	containerAccessType?: null | string @go(ContainerAccessType,*string)

	// Is there an Immutability Policy configured on this Storage Container?
	hasImmutabilityPolicy?: null | bool @go(HasImmutabilityPolicy,*bool)

	// Is there a Legal Hold configured on this Storage Container?
	hasLegalHold?: null | bool @go(HasLegalHold,*bool)

	// The ID of the Storage Container.
	id?: null | string @go(ID,*string)

	// A mapping of MetaData for this Container. All metadata keys should be lowercase.
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// The Resource Manager ID of this Storage Container.
	resourceManagerId?: null | string @go(ResourceManagerID,*string)

	// The name of the Storage Account where the Container should be created. Changing this forces a new resource to be created.
	storageAccountName?: null | string @go(StorageAccountName,*string)
}

#ContainerParameters: {
	// The Access Level configured for this Container. Possible values are blob, container or private. Defaults to private.
	// +kubebuilder:validation:Optional
	containerAccessType?: null | string @go(ContainerAccessType,*string)

	// A mapping of MetaData for this Container. All metadata keys should be lowercase.
	// +kubebuilder:validation:Optional
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// The name of the Storage Account where the Container should be created. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=Account
	// +kubebuilder:validation:Optional
	storageAccountName?: null | string @go(StorageAccountName,*string)
}

// ContainerSpec defines the desired state of Container
#ContainerSpec: {
	forProvider: #ContainerParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ContainerInitParameters @go(InitProvider)
}

// ContainerStatus defines the observed state of Container.
#ContainerStatus: {
	atProvider?: #ContainerObservation @go(AtProvider)
}

// Container is the Schema for the Containers API. Manages a Container within an Azure Storage Account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Container: {
	spec:    #ContainerSpec   @go(Spec)
	status?: #ContainerStatus @go(Status)
}

// ContainerList contains a list of Containers
#ContainerList: {
	items: [...#Container] @go(Items,[]Container)
}
