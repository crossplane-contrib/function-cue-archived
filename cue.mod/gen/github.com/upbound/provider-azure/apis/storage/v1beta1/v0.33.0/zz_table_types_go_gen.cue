// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/storage/v1beta1

package v1beta1

#ACLAccessPolicyObservation: {
	// The ISO8061 UTC time at which this Access Policy should be valid until.
	expiry?: null | string @go(Expiry,*string)

	// The permissions which should associated with this Shared Identifier.
	permissions?: null | string @go(Permissions,*string)

	// The ISO8061 UTC time at which this Access Policy should be valid from.
	start?: null | string @go(Start,*string)
}

#ACLAccessPolicyParameters: {
	// The ISO8061 UTC time at which this Access Policy should be valid until.
	// +kubebuilder:validation:Required
	expiry?: null | string @go(Expiry,*string)

	// The permissions which should associated with this Shared Identifier.
	// +kubebuilder:validation:Required
	permissions?: null | string @go(Permissions,*string)

	// The ISO8061 UTC time at which this Access Policy should be valid from.
	// +kubebuilder:validation:Required
	start?: null | string @go(Start,*string)
}

#TableACLObservation: {
	// An access_policy block as defined below.
	accessPolicy?: [...#ACLAccessPolicyObservation] @go(AccessPolicy,[]ACLAccessPolicyObservation)

	// The ID which should be used for this Shared Identifier.
	id?: null | string @go(ID,*string)
}

#TableACLParameters: {
	// An access_policy block as defined below.
	// +kubebuilder:validation:Optional
	accessPolicy?: [...#ACLAccessPolicyParameters] @go(AccessPolicy,[]ACLAccessPolicyParameters)

	// The ID which should be used for this Shared Identifier.
	// +kubebuilder:validation:Required
	id?: null | string @go(ID,*string)
}

#TableObservation: {
	// One or more acl blocks as defined below.
	acl?: [...#TableACLObservation] @go(ACL,[]TableACLObservation)

	// The ID of the Table within the Storage Account.
	id?: null | string @go(ID,*string)

	// The name of the storage table. Only Alphanumeric characters allowed, starting with a letter. Must be unique within the storage account the table is located. Changing this forces a new resource to be created.
	name?: null | string @go(Name,*string)

	// Specifies the storage account in which to create the storage table. Changing this forces a new resource to be created.
	storageAccountName?: null | string @go(StorageAccountName,*string)
}

#TableParameters: {
	// One or more acl blocks as defined below.
	// +kubebuilder:validation:Optional
	acl?: [...#TableACLParameters] @go(ACL,[]TableACLParameters)

	// The name of the storage table. Only Alphanumeric characters allowed, starting with a letter. Must be unique within the storage account the table is located. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies the storage account in which to create the storage table. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Account
	// +kubebuilder:validation:Optional
	storageAccountName?: null | string @go(StorageAccountName,*string)
}

// TableSpec defines the desired state of Table
#TableSpec: {
	forProvider: #TableParameters @go(ForProvider)
}

// TableStatus defines the observed state of Table.
#TableStatus: {
	atProvider?: #TableObservation @go(AtProvider)
}

// Table is the Schema for the Tables API. Manages a Table within an Azure Storage Account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Table: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	spec:    #TableSpec   @go(Spec)
	status?: #TableStatus @go(Status)
}

// TableList contains a list of Tables
#TableList: {
	items: [...#Table] @go(Items,[]Table)
}
