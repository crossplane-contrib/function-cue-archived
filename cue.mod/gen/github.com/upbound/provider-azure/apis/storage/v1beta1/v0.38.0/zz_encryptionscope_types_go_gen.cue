// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/storage/v1beta1

package v1beta1

#EncryptionScopeInitParameters: {
	// Is a secondary layer of encryption with Platform Managed Keys for data applied? Changing this forces a new resource to be created.
	infrastructureEncryptionRequired?: null | bool @go(InfrastructureEncryptionRequired,*bool)

	// The ID of the Key Vault Key. Required when source is Microsoft.KeyVault.
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)

	// The source of the Storage Encryption Scope. Possible values are Microsoft.KeyVault and Microsoft.Storage.
	source?: null | string @go(Source,*string)
}

#EncryptionScopeObservation: {
	// The ID of the Storage Encryption Scope.
	id?: null | string @go(ID,*string)

	// Is a secondary layer of encryption with Platform Managed Keys for data applied? Changing this forces a new resource to be created.
	infrastructureEncryptionRequired?: null | bool @go(InfrastructureEncryptionRequired,*bool)

	// The ID of the Key Vault Key. Required when source is Microsoft.KeyVault.
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)

	// The source of the Storage Encryption Scope. Possible values are Microsoft.KeyVault and Microsoft.Storage.
	source?: null | string @go(Source,*string)

	// The ID of the Storage Account where this Storage Encryption Scope is created. Changing this forces a new Storage Encryption Scope to be created.
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

#EncryptionScopeParameters: {
	// Is a secondary layer of encryption with Platform Managed Keys for data applied? Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	infrastructureEncryptionRequired?: null | bool @go(InfrastructureEncryptionRequired,*bool)

	// The ID of the Key Vault Key. Required when source is Microsoft.KeyVault.
	// +kubebuilder:validation:Optional
	keyVaultKeyId?: null | string @go(KeyVaultKeyID,*string)

	// The source of the Storage Encryption Scope. Possible values are Microsoft.KeyVault and Microsoft.Storage.
	// +kubebuilder:validation:Optional
	source?: null | string @go(Source,*string)

	// The ID of the Storage Account where this Storage Encryption Scope is created. Changing this forces a new Storage Encryption Scope to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Account
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	storageAccountId?: null | string @go(StorageAccountID,*string)
}

// EncryptionScopeSpec defines the desired state of EncryptionScope
#EncryptionScopeSpec: {
	forProvider: #EncryptionScopeParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EncryptionScopeInitParameters @go(InitProvider)
}

// EncryptionScopeStatus defines the observed state of EncryptionScope.
#EncryptionScopeStatus: {
	atProvider?: #EncryptionScopeObservation @go(AtProvider)
}

// EncryptionScope is the Schema for the EncryptionScopes API. Manages a Storage Encryption Scope.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#EncryptionScope: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.source) || (has(self.initProvider) && has(self.initProvider.source))",message="spec.forProvider.source is a required parameter"
	spec:    #EncryptionScopeSpec   @go(Spec)
	status?: #EncryptionScopeStatus @go(Status)
}

// EncryptionScopeList contains a list of EncryptionScopes
#EncryptionScopeList: {
	items: [...#EncryptionScope] @go(Items,[]EncryptionScope)
}
