// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/storage/v1beta1

package v1beta1

#ACLInitParameters: {
	// An access_policy block as defined below.
	accessPolicy?: [...#AccessPolicyInitParameters] @go(AccessPolicy,[]AccessPolicyInitParameters)

	// The ID which should be used for this Shared Identifier.
	id?: null | string @go(ID,*string)
}

#ACLObservation: {
	// An access_policy block as defined below.
	accessPolicy?: [...#AccessPolicyObservation] @go(AccessPolicy,[]AccessPolicyObservation)

	// The ID which should be used for this Shared Identifier.
	id?: null | string @go(ID,*string)
}

#ACLParameters: {
	// An access_policy block as defined below.
	// +kubebuilder:validation:Optional
	accessPolicy?: [...#AccessPolicyParameters] @go(AccessPolicy,[]AccessPolicyParameters)

	// The ID which should be used for this Shared Identifier.
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)
}

#AccessPolicyInitParameters: {
	// The time at which this Access Policy should be valid until, in ISO8601 format.
	expiry?: null | string @go(Expiry,*string)

	// The permissions which should be associated with this Shared Identifier. Possible value is combination of r (read), w (write), d (delete), and l (list).
	permissions?: null | string @go(Permissions,*string)

	// The time at which this Access Policy should be valid from, in ISO8601 format.
	start?: null | string @go(Start,*string)
}

#AccessPolicyObservation: {
	// The time at which this Access Policy should be valid until, in ISO8601 format.
	expiry?: null | string @go(Expiry,*string)

	// The permissions which should be associated with this Shared Identifier. Possible value is combination of r (read), w (write), d (delete), and l (list).
	permissions?: null | string @go(Permissions,*string)

	// The time at which this Access Policy should be valid from, in ISO8601 format.
	start?: null | string @go(Start,*string)
}

#AccessPolicyParameters: {
	// The time at which this Access Policy should be valid until, in ISO8601 format.
	// +kubebuilder:validation:Optional
	expiry?: null | string @go(Expiry,*string)

	// The permissions which should be associated with this Shared Identifier. Possible value is combination of r (read), w (write), d (delete), and l (list).
	// +kubebuilder:validation:Optional
	permissions?: null | string @go(Permissions,*string)

	// The time at which this Access Policy should be valid from, in ISO8601 format.
	// +kubebuilder:validation:Optional
	start?: null | string @go(Start,*string)
}

#ShareInitParameters: {
	// One or more acl blocks as defined below.
	acl?: [...#ACLInitParameters] @go(ACL,[]ACLInitParameters)

	// The access tier of the File Share. Possible values are Hot, Cool and TransactionOptimized, Premium.
	accessTier?: null | string @go(AccessTier,*string)

	// The protocol used for the share. Possible values are SMB and NFS. The SMB indicates the share can be accessed by SMBv3.0, SMBv2.1 and REST. The NFS indicates the share can be accessed by NFSv4.1. Defaults to SMB. Changing this forces a new resource to be created.
	enabledProtocol?: null | string @go(EnabledProtocol,*string)

	// A mapping of MetaData for this File Share.
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// The maximum size of the share, in gigabytes. For Standard storage accounts, this must be 1GB (or higher) and at most 5120 GB (5 TB). For Premium FileStorage storage accounts, this must be greater than 100 GB and at most 102400 GB (100 TB).
	quota?: null | float64 @go(Quota,*float64)
}

#ShareObservation: {
	// One or more acl blocks as defined below.
	acl?: [...#ACLObservation] @go(ACL,[]ACLObservation)

	// The access tier of the File Share. Possible values are Hot, Cool and TransactionOptimized, Premium.
	accessTier?: null | string @go(AccessTier,*string)

	// The protocol used for the share. Possible values are SMB and NFS. The SMB indicates the share can be accessed by SMBv3.0, SMBv2.1 and REST. The NFS indicates the share can be accessed by NFSv4.1. Defaults to SMB. Changing this forces a new resource to be created.
	enabledProtocol?: null | string @go(EnabledProtocol,*string)

	// The ID of the File Share.
	id?: null | string @go(ID,*string)

	// A mapping of MetaData for this File Share.
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// The maximum size of the share, in gigabytes. For Standard storage accounts, this must be 1GB (or higher) and at most 5120 GB (5 TB). For Premium FileStorage storage accounts, this must be greater than 100 GB and at most 102400 GB (100 TB).
	quota?: null | float64 @go(Quota,*float64)

	// The Resource Manager ID of this File Share.
	resourceManagerId?: null | string @go(ResourceManagerID,*string)

	// Specifies the storage account in which to create the share. Changing this forces a new resource to be created.
	storageAccountName?: null | string @go(StorageAccountName,*string)

	// The URL of the File Share
	url?: null | string @go(URL,*string)
}

#ShareParameters: {
	// One or more acl blocks as defined below.
	// +kubebuilder:validation:Optional
	acl?: [...#ACLParameters] @go(ACL,[]ACLParameters)

	// The access tier of the File Share. Possible values are Hot, Cool and TransactionOptimized, Premium.
	// +kubebuilder:validation:Optional
	accessTier?: null | string @go(AccessTier,*string)

	// The protocol used for the share. Possible values are SMB and NFS. The SMB indicates the share can be accessed by SMBv3.0, SMBv2.1 and REST. The NFS indicates the share can be accessed by NFSv4.1. Defaults to SMB. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	enabledProtocol?: null | string @go(EnabledProtocol,*string)

	// A mapping of MetaData for this File Share.
	// +kubebuilder:validation:Optional
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// The maximum size of the share, in gigabytes. For Standard storage accounts, this must be 1GB (or higher) and at most 5120 GB (5 TB). For Premium FileStorage storage accounts, this must be greater than 100 GB and at most 102400 GB (100 TB).
	// +kubebuilder:validation:Optional
	quota?: null | float64 @go(Quota,*float64)

	// Specifies the storage account in which to create the share. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/storage/v1beta1.Account
	// +kubebuilder:validation:Optional
	storageAccountName?: null | string @go(StorageAccountName,*string)
}

// ShareSpec defines the desired state of Share
#ShareSpec: {
	forProvider: #ShareParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ShareInitParameters @go(InitProvider)
}

// ShareStatus defines the observed state of Share.
#ShareStatus: {
	atProvider?: #ShareObservation @go(AtProvider)
}

// Share is the Schema for the Shares API. Manages a File Share within Azure Storage.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Share: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.quota) || (has(self.initProvider) && has(self.initProvider.quota))",message="spec.forProvider.quota is a required parameter"
	spec:    #ShareSpec   @go(Spec)
	status?: #ShareStatus @go(Status)
}

// ShareList contains a list of Shares
#ShareList: {
	items: [...#Share] @go(Items,[]Share)
}
