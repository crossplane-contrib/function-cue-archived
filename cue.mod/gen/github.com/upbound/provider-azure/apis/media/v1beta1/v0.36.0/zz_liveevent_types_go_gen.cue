// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/media/v1beta1

package v1beta1

#CrossSiteAccessPolicyInitParameters: {
	// The content of clientaccesspolicy.xml used by Silverlight.
	clientAccessPolicy?: null | string @go(ClientAccessPolicy,*string)

	// The content of the Cross Domain Policy (crossdomain.xml).
	crossDomainPolicy?: null | string @go(CrossDomainPolicy,*string)
}

#CrossSiteAccessPolicyObservation: {
	// The content of clientaccesspolicy.xml used by Silverlight.
	clientAccessPolicy?: null | string @go(ClientAccessPolicy,*string)

	// The content of the Cross Domain Policy (crossdomain.xml).
	crossDomainPolicy?: null | string @go(CrossDomainPolicy,*string)
}

#CrossSiteAccessPolicyParameters: {
	// The content of clientaccesspolicy.xml used by Silverlight.
	// +kubebuilder:validation:Optional
	clientAccessPolicy?: null | string @go(ClientAccessPolicy,*string)

	// The content of the Cross Domain Policy (crossdomain.xml).
	// +kubebuilder:validation:Optional
	crossDomainPolicy?: null | string @go(CrossDomainPolicy,*string)
}

#EncodingInitParameters: {
	// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures). If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// The optional encoding preset name, used when type is not None. If the type is set to Standard, then the default preset name is Default720p. Else if the type is set to Premium1080p, the default preset is Default1080p. Changing this forces a new resource to be created.
	presetName?: null | string @go(PresetName,*string)

	// Specifies how the input video will be resized to fit the desired output resolution(s). Allowed values are None, AutoFit or AutoSize. Default is None.
	stretchMode?: null | string @go(StretchMode,*string)

	// Live event type. Allowed values are None, Premium1080p or Standard. When set to None, the service simply passes through the incoming video and audio layer(s) to the output. When type is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. Defaults to None. Changing this forces a new resource to be created.
	type?: null | string @go(Type,*string)
}

#EncodingObservation: {
	// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures). If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// The optional encoding preset name, used when type is not None. If the type is set to Standard, then the default preset name is Default720p. Else if the type is set to Premium1080p, the default preset is Default1080p. Changing this forces a new resource to be created.
	presetName?: null | string @go(PresetName,*string)

	// Specifies how the input video will be resized to fit the desired output resolution(s). Allowed values are None, AutoFit or AutoSize. Default is None.
	stretchMode?: null | string @go(StretchMode,*string)

	// Live event type. Allowed values are None, Premium1080p or Standard. When set to None, the service simply passes through the incoming video and audio layer(s) to the output. When type is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. Defaults to None. Changing this forces a new resource to be created.
	type?: null | string @go(Type,*string)
}

#EncodingParameters: {
	// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures). If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
	// +kubebuilder:validation:Optional
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// The optional encoding preset name, used when type is not None. If the type is set to Standard, then the default preset name is Default720p. Else if the type is set to Premium1080p, the default preset is Default1080p. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	presetName?: null | string @go(PresetName,*string)

	// Specifies how the input video will be resized to fit the desired output resolution(s). Allowed values are None, AutoFit or AutoSize. Default is None.
	// +kubebuilder:validation:Optional
	stretchMode?: null | string @go(StretchMode,*string)

	// Live event type. Allowed values are None, Premium1080p or Standard. When set to None, the service simply passes through the incoming video and audio layer(s) to the output. When type is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. Defaults to None. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#EndpointInitParameters: {
}

#EndpointObservation: {
	protocol?: null | string @go(Protocol,*string)
	url?:      null | string @go(URL,*string)
}

#EndpointParameters: {
}

#IPAccessControlAllowInitParameters: {
	// The IP address or CIDR range.
	address?: null | string @go(Address,*string)

	// The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
	name?: null | string @go(Name,*string)

	// The subnet mask prefix length (see CIDR notation).
	subnetPrefixLength?: null | float64 @go(SubnetPrefixLength,*float64)
}

#IPAccessControlAllowObservation: {
	// The IP address or CIDR range.
	address?: null | string @go(Address,*string)

	// The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
	name?: null | string @go(Name,*string)

	// The subnet mask prefix length (see CIDR notation).
	subnetPrefixLength?: null | float64 @go(SubnetPrefixLength,*float64)
}

#IPAccessControlAllowParameters: {
	// The IP address or CIDR range.
	// +kubebuilder:validation:Optional
	address?: null | string @go(Address,*string)

	// The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The subnet mask prefix length (see CIDR notation).
	// +kubebuilder:validation:Optional
	subnetPrefixLength?: null | float64 @go(SubnetPrefixLength,*float64)
}

#InputInitParameters: {
	// A UUID in string form to uniquely identify the stream. If omitted, the service will generate a unique value. Changing this forces a new value to be created.
	accessToken?: null | string @go(AccessToken,*string)

	// One or more ip_access_control_allow blocks as defined below.
	ipAccessControlAllow?: [...#IPAccessControlAllowInitParameters] @go(IPAccessControlAllow,[]IPAccessControlAllowInitParameters)

	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. This field cannot be set when type is set to Encoding.
	keyFrameIntervalDuration?: null | string @go(KeyFrameIntervalDuration,*string)

	// The input protocol for the live event. Allowed values are FragmentedMP4 and RTMP. Changing this forces a new resource to be created.
	streamingProtocol?: null | string @go(StreamingProtocol,*string)
}

#InputObservation: {
	// A UUID in string form to uniquely identify the stream. If omitted, the service will generate a unique value. Changing this forces a new value to be created.
	accessToken?: null | string @go(AccessToken,*string)
	endpoint?: [...#EndpointObservation] @go(Endpoint,[]EndpointObservation)

	// One or more ip_access_control_allow blocks as defined below.
	ipAccessControlAllow?: [...#IPAccessControlAllowObservation] @go(IPAccessControlAllow,[]IPAccessControlAllowObservation)

	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. This field cannot be set when type is set to Encoding.
	keyFrameIntervalDuration?: null | string @go(KeyFrameIntervalDuration,*string)

	// The input protocol for the live event. Allowed values are FragmentedMP4 and RTMP. Changing this forces a new resource to be created.
	streamingProtocol?: null | string @go(StreamingProtocol,*string)
}

#InputParameters: {
	// A UUID in string form to uniquely identify the stream. If omitted, the service will generate a unique value. Changing this forces a new value to be created.
	// +kubebuilder:validation:Optional
	accessToken?: null | string @go(AccessToken,*string)

	// One or more ip_access_control_allow blocks as defined below.
	// +kubebuilder:validation:Optional
	ipAccessControlAllow?: [...#IPAccessControlAllowParameters] @go(IPAccessControlAllow,[]IPAccessControlAllowParameters)

	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. This field cannot be set when type is set to Encoding.
	// +kubebuilder:validation:Optional
	keyFrameIntervalDuration?: null | string @go(KeyFrameIntervalDuration,*string)

	// The input protocol for the live event. Allowed values are FragmentedMP4 and RTMP. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	streamingProtocol?: null | string @go(StreamingProtocol,*string)
}

#LiveEventInitParameters: {
	// The flag indicates if the resource should be automatically started on creation. Default is false. Changing this forces a new resource to be created.
	autoStartEnabled?: null | bool @go(AutoStartEnabled,*bool)

	// A cross_site_access_policy block as defined below.
	crossSiteAccessPolicy?: [...#CrossSiteAccessPolicyInitParameters] @go(CrossSiteAccessPolicy,[]CrossSiteAccessPolicyInitParameters)

	// A description for the live event.
	description?: null | string @go(Description,*string)

	// A encoding block as defined below.
	encoding?: [...#EncodingInitParameters] @go(Encoding,[]EncodingInitParameters)

	// When use_static_hostname is set to true, the hostname_prefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
	hostnamePrefix?: null | string @go(HostNamePrefix,*string)

	// A input block as defined below.
	input?: [...#InputInitParameters] @go(Input,[]InputInitParameters)

	// The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
	location?: null | string @go(Location,*string)

	// A preview block as defined below.
	preview?: [...#PreviewInitParameters] @go(Preview,[]PreviewInitParameters)

	// A list of options to use for the LiveEvent. Possible values are Default, LowLatency, LowLatencyV2. Please see more at this document. Changing this forces a new resource to be created.
	streamOptions?: [...null | string] @go(StreamOptions,[]*string)

	// A mapping of tags which should be assigned to the Live Event.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies a list of languages (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: en-US). See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages.
	transcriptionLanguages?: [...null | string] @go(TranscriptionLanguages,[]*string)

	// Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
	useStaticHostname?: null | bool @go(UseStaticHostName,*bool)
}

#LiveEventObservation: {
	// The flag indicates if the resource should be automatically started on creation. Default is false. Changing this forces a new resource to be created.
	autoStartEnabled?: null | bool @go(AutoStartEnabled,*bool)

	// A cross_site_access_policy block as defined below.
	crossSiteAccessPolicy?: [...#CrossSiteAccessPolicyObservation] @go(CrossSiteAccessPolicy,[]CrossSiteAccessPolicyObservation)

	// A description for the live event.
	description?: null | string @go(Description,*string)

	// A encoding block as defined below.
	encoding?: [...#EncodingObservation] @go(Encoding,[]EncodingObservation)

	// When use_static_hostname is set to true, the hostname_prefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
	hostnamePrefix?: null | string @go(HostNamePrefix,*string)

	// The ID of the Live Event.
	id?: null | string @go(ID,*string)

	// A input block as defined below.
	input?: [...#InputObservation] @go(Input,[]InputObservation)

	// The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
	location?: null | string @go(Location,*string)

	// The Media Services account name. Changing this forces a new Live Event to be created.
	mediaServicesAccountName?: null | string @go(MediaServicesAccountName,*string)

	// A preview block as defined below.
	preview?: [...#PreviewObservation] @go(Preview,[]PreviewObservation)

	// The name of the Resource Group where the Live Event should exist. Changing this forces a new Live Event to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A list of options to use for the LiveEvent. Possible values are Default, LowLatency, LowLatencyV2. Please see more at this document. Changing this forces a new resource to be created.
	streamOptions?: [...null | string] @go(StreamOptions,[]*string)

	// A mapping of tags which should be assigned to the Live Event.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies a list of languages (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: en-US). See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages.
	transcriptionLanguages?: [...null | string] @go(TranscriptionLanguages,[]*string)

	// Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
	useStaticHostname?: null | bool @go(UseStaticHostName,*bool)
}

#LiveEventParameters: {
	// The flag indicates if the resource should be automatically started on creation. Default is false. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	autoStartEnabled?: null | bool @go(AutoStartEnabled,*bool)

	// A cross_site_access_policy block as defined below.
	// +kubebuilder:validation:Optional
	crossSiteAccessPolicy?: [...#CrossSiteAccessPolicyParameters] @go(CrossSiteAccessPolicy,[]CrossSiteAccessPolicyParameters)

	// A description for the live event.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A encoding block as defined below.
	// +kubebuilder:validation:Optional
	encoding?: [...#EncodingParameters] @go(Encoding,[]EncodingParameters)

	// When use_static_hostname is set to true, the hostname_prefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center.
	// +kubebuilder:validation:Optional
	hostnamePrefix?: null | string @go(HostNamePrefix,*string)

	// A input block as defined below.
	// +kubebuilder:validation:Optional
	input?: [...#InputParameters] @go(Input,[]InputParameters)

	// The Azure Region where the Live Event should exist. Changing this forces a new Live Event to be created.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The Media Services account name. Changing this forces a new Live Event to be created.
	// +crossplane:generate:reference:type=ServicesAccount
	// +kubebuilder:validation:Optional
	mediaServicesAccountName?: null | string @go(MediaServicesAccountName,*string)

	// A preview block as defined below.
	// +kubebuilder:validation:Optional
	preview?: [...#PreviewParameters] @go(Preview,[]PreviewParameters)

	// The name of the Resource Group where the Live Event should exist. Changing this forces a new Live Event to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)

	// A list of options to use for the LiveEvent. Possible values are Default, LowLatency, LowLatencyV2. Please see more at this document. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	streamOptions?: [...null | string] @go(StreamOptions,[]*string)

	// A mapping of tags which should be assigned to the Live Event.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies a list of languages (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: en-US). See the Microsoft Documentation for more information about the live transcription feature and the list of supported languages.
	// +kubebuilder:validation:Optional
	transcriptionLanguages?: [...null | string] @go(TranscriptionLanguages,[]*string)

	// Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. Changing this forces a new Live Event to be created.
	// +kubebuilder:validation:Optional
	useStaticHostname?: null | bool @go(UseStaticHostName,*bool)
}

#PreviewEndpointInitParameters: {
}

#PreviewEndpointObservation: {
	protocol?: null | string @go(Protocol,*string)
	url?:      null | string @go(URL,*string)
}

#PreviewEndpointParameters: {
}

#PreviewIPAccessControlAllowInitParameters: {
	// The IP address or CIDR range.
	address?: null | string @go(Address,*string)

	// The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
	name?: null | string @go(Name,*string)

	// The subnet mask prefix length (see CIDR notation).
	subnetPrefixLength?: null | float64 @go(SubnetPrefixLength,*float64)
}

#PreviewIPAccessControlAllowObservation: {
	// The IP address or CIDR range.
	address?: null | string @go(Address,*string)

	// The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
	name?: null | string @go(Name,*string)

	// The subnet mask prefix length (see CIDR notation).
	subnetPrefixLength?: null | float64 @go(SubnetPrefixLength,*float64)
}

#PreviewIPAccessControlAllowParameters: {
	// The IP address or CIDR range.
	// +kubebuilder:validation:Optional
	address?: null | string @go(Address,*string)

	// The name which should be used for this Live Event. Changing this forces a new Live Event to be created.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The subnet mask prefix length (see CIDR notation).
	// +kubebuilder:validation:Optional
	subnetPrefixLength?: null | float64 @go(SubnetPrefixLength,*float64)
}

#PreviewInitParameters: {
	// An alternative media identifier associated with the streaming locator created for the preview. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the Streaming Policy specified in the streaming_policy_name field.
	alternativeMediaId?: null | string @go(AlternativeMediaID,*string)

	// One or more ip_access_control_allow blocks as defined above.
	ipAccessControlAllow?: [...#PreviewIPAccessControlAllowInitParameters] @go(IPAccessControlAllow,[]PreviewIPAccessControlAllowInitParameters)

	// The identifier of the preview locator in GUID format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. Changing this forces a new resource to be created.
	previewLocator?: null | string @go(PreviewLocator,*string)

	// The name of streaming policy used for the live event preview. Changing this forces a new resource to be created.
	streamingPolicyName?: null | string @go(StreamingPolicyName,*string)
}

#PreviewObservation: {
	// An alternative media identifier associated with the streaming locator created for the preview. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the Streaming Policy specified in the streaming_policy_name field.
	alternativeMediaId?: null | string @go(AlternativeMediaID,*string)
	endpoint?: [...#PreviewEndpointObservation] @go(Endpoint,[]PreviewEndpointObservation)

	// One or more ip_access_control_allow blocks as defined above.
	ipAccessControlAllow?: [...#PreviewIPAccessControlAllowObservation] @go(IPAccessControlAllow,[]PreviewIPAccessControlAllowObservation)

	// The identifier of the preview locator in GUID format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. Changing this forces a new resource to be created.
	previewLocator?: null | string @go(PreviewLocator,*string)

	// The name of streaming policy used for the live event preview. Changing this forces a new resource to be created.
	streamingPolicyName?: null | string @go(StreamingPolicyName,*string)
}

#PreviewParameters: {
	// An alternative media identifier associated with the streaming locator created for the preview. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the Streaming Policy specified in the streaming_policy_name field.
	// +kubebuilder:validation:Optional
	alternativeMediaId?: null | string @go(AlternativeMediaID,*string)

	// One or more ip_access_control_allow blocks as defined above.
	// +kubebuilder:validation:Optional
	ipAccessControlAllow?: [...#PreviewIPAccessControlAllowParameters] @go(IPAccessControlAllow,[]PreviewIPAccessControlAllowParameters)

	// The identifier of the preview locator in GUID format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	previewLocator?: null | string @go(PreviewLocator,*string)

	// The name of streaming policy used for the live event preview. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	streamingPolicyName?: null | string @go(StreamingPolicyName,*string)
}

// LiveEventSpec defines the desired state of LiveEvent
#LiveEventSpec: {
	forProvider: #LiveEventParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LiveEventInitParameters @go(InitProvider)
}

// LiveEventStatus defines the observed state of LiveEvent.
#LiveEventStatus: {
	atProvider?: #LiveEventObservation @go(AtProvider)
}

// LiveEvent is the Schema for the LiveEvents API. Manages a Live Event.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#LiveEvent: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.input) || has(self.initProvider.input)",message="input is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || has(self.initProvider.location)",message="location is a required parameter"
	spec:    #LiveEventSpec   @go(Spec)
	status?: #LiveEventStatus @go(Status)
}

// LiveEventList contains a list of LiveEvents
#LiveEventList: {
	items: [...#LiveEvent] @go(Items,[]LiveEvent)
}
