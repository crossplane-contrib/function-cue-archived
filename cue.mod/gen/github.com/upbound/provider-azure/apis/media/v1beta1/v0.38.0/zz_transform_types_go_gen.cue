// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/media/v1beta1

package v1beta1

#AacAudioInitParameters: {
	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// The number of audio channels. Default to 2.
	channels?: null | float64 @go(Channels,*float64)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The H.264 profile. Possible values are Auto, Baseline, High, High422, High444,or Main. Default to Auto.
	profile?: null | string @go(Profile,*string)

	// The sampling rate to use for encoding in Hertz. Default to 48000.
	samplingRate?: null | float64 @go(SamplingRate,*float64)
}

#AacAudioObservation: {
	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// The number of audio channels. Default to 2.
	channels?: null | float64 @go(Channels,*float64)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The H.264 profile. Possible values are Auto, Baseline, High, High422, High444,or Main. Default to Auto.
	profile?: null | string @go(Profile,*string)

	// The sampling rate to use for encoding in Hertz. Default to 48000.
	samplingRate?: null | float64 @go(SamplingRate,*float64)
}

#AacAudioParameters: {
	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// The number of audio channels. Default to 2.
	// +kubebuilder:validation:Optional
	channels?: null | float64 @go(Channels,*float64)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// The H.264 profile. Possible values are Auto, Baseline, High, High422, High444,or Main. Default to Auto.
	// +kubebuilder:validation:Optional
	profile?: null | string @go(Profile,*string)

	// The sampling rate to use for encoding in Hertz. Default to 48000.
	// +kubebuilder:validation:Optional
	samplingRate?: null | float64 @go(SamplingRate,*float64)
}

#AudioAnalyzerPresetInitParameters: {
	// Possible values are Basic or Standard. Determines the set of audio analysis operations to be performed. Default to Standard.
	audioAnalysisMode?: null | string @go(AudioAnalysisMode,*string)

	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to en-US. The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
	audioLanguage?: null | string @go(AudioLanguage,*string)

	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	experimentalOptions?: {[string]: null | string} @go(ExperimentalOptions,map[string]*string)
}

#AudioAnalyzerPresetObservation: {
	// Possible values are Basic or Standard. Determines the set of audio analysis operations to be performed. Default to Standard.
	audioAnalysisMode?: null | string @go(AudioAnalysisMode,*string)

	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to en-US. The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
	audioLanguage?: null | string @go(AudioLanguage,*string)

	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	experimentalOptions?: {[string]: null | string} @go(ExperimentalOptions,map[string]*string)
}

#AudioAnalyzerPresetParameters: {
	// Possible values are Basic or Standard. Determines the set of audio analysis operations to be performed. Default to Standard.
	// +kubebuilder:validation:Optional
	audioAnalysisMode?: null | string @go(AudioAnalysisMode,*string)

	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to en-US. The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
	// +kubebuilder:validation:Optional
	audioLanguage?: null | string @go(AudioLanguage,*string)

	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	// +kubebuilder:validation:Optional
	experimentalOptions?: {[string]: null | string} @go(ExperimentalOptions,map[string]*string)
}

#AudioInitParameters: {
	// The gain level of audio in the overlay. The value should be in range between 0 to 1.0. The default is 1.0.
	audioGainLevel?: null | float64 @go(AudioGainLevel,*float64)

	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	end?: null | string @go(End,*string)

	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	fadeInDuration?: null | string @go(FadeInDuration,*string)

	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	fadeOutDuration?: null | string @go(FadeOutDuration,*string)

	// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
	inputLabel?: null | string @go(InputLabel,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)
}

#AudioObservation: {
	// The gain level of audio in the overlay. The value should be in range between 0 to 1.0. The default is 1.0.
	audioGainLevel?: null | float64 @go(AudioGainLevel,*float64)

	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	end?: null | string @go(End,*string)

	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	fadeInDuration?: null | string @go(FadeInDuration,*string)

	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	fadeOutDuration?: null | string @go(FadeOutDuration,*string)

	// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
	inputLabel?: null | string @go(InputLabel,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)
}

#AudioParameters: {
	// The gain level of audio in the overlay. The value should be in range between 0 to 1.0. The default is 1.0.
	// +kubebuilder:validation:Optional
	audioGainLevel?: null | float64 @go(AudioGainLevel,*float64)

	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	// +kubebuilder:validation:Optional
	end?: null | string @go(End,*string)

	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	// +kubebuilder:validation:Optional
	fadeInDuration?: null | string @go(FadeInDuration,*string)

	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	// +kubebuilder:validation:Optional
	fadeOutDuration?: null | string @go(FadeOutDuration,*string)

	// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
	// +kubebuilder:validation:Optional
	inputLabel?: null | string @go(InputLabel,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	// +kubebuilder:validation:Optional
	start?: null | string @go(Start,*string)
}

#BuiltinPresetInitParameters: {
	// A present_configuration block as defined below.
	presetConfiguration?: [...#PresetConfigurationInitParameters] @go(PresetConfiguration,[]PresetConfigurationInitParameters)

	// The built-in preset to be used for encoding videos. The Possible values are AACGoodQualityAudio, AdaptiveStreaming, ContentAwareEncoding, ContentAwareEncodingExperimental, CopyAllBitrateNonInterleaved, DDGoodQualityAudio, H265AdaptiveStreaming, H265ContentAwareEncoding, H265SingleBitrate4K, H265SingleBitrate1080p, H265SingleBitrate720p, H264MultipleBitrate1080p, H264MultipleBitrateSD, H264MultipleBitrate720p, H264SingleBitrate1080p, H264SingleBitrateSD and H264SingleBitrate720p.
	presetName?: null | string @go(PresetName,*string)
}

#BuiltinPresetObservation: {
	// A present_configuration block as defined below.
	presetConfiguration?: [...#PresetConfigurationObservation] @go(PresetConfiguration,[]PresetConfigurationObservation)

	// The built-in preset to be used for encoding videos. The Possible values are AACGoodQualityAudio, AdaptiveStreaming, ContentAwareEncoding, ContentAwareEncodingExperimental, CopyAllBitrateNonInterleaved, DDGoodQualityAudio, H265AdaptiveStreaming, H265ContentAwareEncoding, H265SingleBitrate4K, H265SingleBitrate1080p, H265SingleBitrate720p, H264MultipleBitrate1080p, H264MultipleBitrateSD, H264MultipleBitrate720p, H264SingleBitrate1080p, H264SingleBitrateSD and H264SingleBitrate720p.
	presetName?: null | string @go(PresetName,*string)
}

#BuiltinPresetParameters: {
	// A present_configuration block as defined below.
	// +kubebuilder:validation:Optional
	presetConfiguration?: [...#PresetConfigurationParameters] @go(PresetConfiguration,[]PresetConfigurationParameters)

	// The built-in preset to be used for encoding videos. The Possible values are AACGoodQualityAudio, AdaptiveStreaming, ContentAwareEncoding, ContentAwareEncodingExperimental, CopyAllBitrateNonInterleaved, DDGoodQualityAudio, H265AdaptiveStreaming, H265ContentAwareEncoding, H265SingleBitrate4K, H265SingleBitrate1080p, H265SingleBitrate720p, H264MultipleBitrate1080p, H264MultipleBitrateSD, H264MultipleBitrate720p, H264SingleBitrate1080p, H264SingleBitrateSD and H264SingleBitrate720p.
	// +kubebuilder:validation:Optional
	presetName?: null | string @go(PresetName,*string)
}

#CodecInitParameters: {
	// A aac_audio block as defined above.
	aacAudio?: [...#AacAudioInitParameters] @go(AacAudio,[]AacAudioInitParameters)

	// A copy_audio block as defined below.
	copyAudio?: [...#CopyAudioInitParameters] @go(CopyAudio,[]CopyAudioInitParameters)

	// A copy_video block as defined below.
	copyVideo?: [...#CopyVideoInitParameters] @go(CopyVideo,[]CopyVideoInitParameters)

	// A dd_audio block as defined below.
	ddAudio?: [...#DdAudioInitParameters] @go(DdAudio,[]DdAudioInitParameters)

	// A h264_video block as defined below.
	h264Video?: [...#H264VideoInitParameters] @go(H264Video,[]H264VideoInitParameters)

	// A h265_video block as defined below.
	h265Video?: [...#H265VideoInitParameters] @go(H265Video,[]H265VideoInitParameters)

	// A jpg_image block as defined below.
	jpgImage?: [...#JpgImageInitParameters] @go(JpgImage,[]JpgImageInitParameters)

	// A png_image block as defined below.
	pngImage?: [...#PngImageInitParameters] @go(PngImage,[]PngImageInitParameters)
}

#CodecObservation: {
	// A aac_audio block as defined above.
	aacAudio?: [...#AacAudioObservation] @go(AacAudio,[]AacAudioObservation)

	// A copy_audio block as defined below.
	copyAudio?: [...#CopyAudioObservation] @go(CopyAudio,[]CopyAudioObservation)

	// A copy_video block as defined below.
	copyVideo?: [...#CopyVideoObservation] @go(CopyVideo,[]CopyVideoObservation)

	// A dd_audio block as defined below.
	ddAudio?: [...#DdAudioObservation] @go(DdAudio,[]DdAudioObservation)

	// A h264_video block as defined below.
	h264Video?: [...#H264VideoObservation] @go(H264Video,[]H264VideoObservation)

	// A h265_video block as defined below.
	h265Video?: [...#H265VideoObservation] @go(H265Video,[]H265VideoObservation)

	// A jpg_image block as defined below.
	jpgImage?: [...#JpgImageObservation] @go(JpgImage,[]JpgImageObservation)

	// A png_image block as defined below.
	pngImage?: [...#PngImageObservation] @go(PngImage,[]PngImageObservation)
}

#CodecParameters: {
	// A aac_audio block as defined above.
	// +kubebuilder:validation:Optional
	aacAudio?: [...#AacAudioParameters] @go(AacAudio,[]AacAudioParameters)

	// A copy_audio block as defined below.
	// +kubebuilder:validation:Optional
	copyAudio?: [...#CopyAudioParameters] @go(CopyAudio,[]CopyAudioParameters)

	// A copy_video block as defined below.
	// +kubebuilder:validation:Optional
	copyVideo?: [...#CopyVideoParameters] @go(CopyVideo,[]CopyVideoParameters)

	// A dd_audio block as defined below.
	// +kubebuilder:validation:Optional
	ddAudio?: [...#DdAudioParameters] @go(DdAudio,[]DdAudioParameters)

	// A h264_video block as defined below.
	// +kubebuilder:validation:Optional
	h264Video?: [...#H264VideoParameters] @go(H264Video,[]H264VideoParameters)

	// A h265_video block as defined below.
	// +kubebuilder:validation:Optional
	h265Video?: [...#H265VideoParameters] @go(H265Video,[]H265VideoParameters)

	// A jpg_image block as defined below.
	// +kubebuilder:validation:Optional
	jpgImage?: [...#JpgImageParameters] @go(JpgImage,[]JpgImageParameters)

	// A png_image block as defined below.
	// +kubebuilder:validation:Optional
	pngImage?: [...#PngImageParameters] @go(PngImage,[]PngImageParameters)
}

#CopyAudioInitParameters: {
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)
}

#CopyAudioObservation: {
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)
}

#CopyAudioParameters: {
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)
}

#CopyVideoInitParameters: {
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)
}

#CopyVideoObservation: {
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)
}

#CopyVideoParameters: {
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)
}

#CropRectangleInitParameters: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	left?: null | string @go(Left,*string)

	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	top?: null | string @go(Top,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#CropRectangleObservation: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	left?: null | string @go(Left,*string)

	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	top?: null | string @go(Top,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#CropRectangleParameters: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	height?: null | string @go(Height,*string)

	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	left?: null | string @go(Left,*string)

	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	top?: null | string @go(Top,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	width?: null | string @go(Width,*string)
}

#CustomPresetInitParameters: {
	// One or more codec blocks as defined above.
	codec?: [...#CodecInitParameters] @go(Codec,[]CodecInitParameters)

	// A filter block as defined below.
	filter?: [...#FilterInitParameters] @go(Filter,[]FilterInitParameters)

	// One or more format blocks as defined below.
	format?: [...#FormatInitParameters] @go(Format,[]FormatInitParameters)
}

#CustomPresetObservation: {
	// One or more codec blocks as defined above.
	codec?: [...#CodecObservation] @go(Codec,[]CodecObservation)

	// A filter block as defined below.
	filter?: [...#FilterObservation] @go(Filter,[]FilterObservation)

	// One or more format blocks as defined below.
	format?: [...#FormatObservation] @go(Format,[]FormatObservation)
}

#CustomPresetParameters: {
	// One or more codec blocks as defined above.
	// +kubebuilder:validation:Optional
	codec: [...#CodecParameters] @go(Codec,[]CodecParameters)

	// A filter block as defined below.
	// +kubebuilder:validation:Optional
	filter?: [...#FilterParameters] @go(Filter,[]FilterParameters)

	// One or more format blocks as defined below.
	// +kubebuilder:validation:Optional
	format: [...#FormatParameters] @go(Format,[]FormatParameters)
}

#DdAudioInitParameters: {
	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// The number of audio channels. Default to 2.
	channels?: null | float64 @go(Channels,*float64)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The sampling rate to use for encoding in Hertz. Default to 48000.
	samplingRate?: null | float64 @go(SamplingRate,*float64)
}

#DdAudioObservation: {
	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// The number of audio channels. Default to 2.
	channels?: null | float64 @go(Channels,*float64)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The sampling rate to use for encoding in Hertz. Default to 48000.
	samplingRate?: null | float64 @go(SamplingRate,*float64)
}

#DdAudioParameters: {
	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// The number of audio channels. Default to 2.
	// +kubebuilder:validation:Optional
	channels?: null | float64 @go(Channels,*float64)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// The sampling rate to use for encoding in Hertz. Default to 48000.
	// +kubebuilder:validation:Optional
	samplingRate?: null | float64 @go(SamplingRate,*float64)
}

#DeinterlaceInitParameters: {
	// The deinterlacing mode. Possible values are AutoPixelAdaptive or Off. Default to AutoPixelAdaptive.
	mode?: null | string @go(Mode,*string)

	// The field parity to use for deinterlacing. Possible values are Auto, TopFieldFirst or BottomFieldFirst. Default to Auto.
	parity?: null | string @go(Parity,*string)
}

#DeinterlaceObservation: {
	// The deinterlacing mode. Possible values are AutoPixelAdaptive or Off. Default to AutoPixelAdaptive.
	mode?: null | string @go(Mode,*string)

	// The field parity to use for deinterlacing. Possible values are Auto, TopFieldFirst or BottomFieldFirst. Default to Auto.
	parity?: null | string @go(Parity,*string)
}

#DeinterlaceParameters: {
	// The deinterlacing mode. Possible values are AutoPixelAdaptive or Off. Default to AutoPixelAdaptive.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The field parity to use for deinterlacing. Possible values are Auto, TopFieldFirst or BottomFieldFirst. Default to Auto.
	// +kubebuilder:validation:Optional
	parity?: null | string @go(Parity,*string)
}

#FaceDetectorPresetInitParameters: {
	// Possible values are SourceResolution or StandardDefinition. Specifies the maximum resolution at which your video is analyzed. which will keep the input video at its original resolution when analyzed. Using StandardDefinition will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to StandardDefinition will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected. Default to SourceResolution.
	analysisResolution?: null | string @go(AnalysisResolution,*string)

	// Specifies the type of blur to apply to faces in the output video. Possible values are Black, Box, High, Low,and Med.
	blurType?: null | string @go(BlurType,*string)

	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	experimentalOptions?: {[string]: null | string} @go(ExperimentalOptions,map[string]*string)

	// This mode provides the ability to choose between the following settings: 1) Analyze - For detection only. This mode generates a metadata JSON file marking appearances of faces throughout the video. Where possible, appearances of the same person are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces. It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction. Default to Analyze.
	faceRedactorMode?: null | string @go(FaceRedactorMode,*string)
}

#FaceDetectorPresetObservation: {
	// Possible values are SourceResolution or StandardDefinition. Specifies the maximum resolution at which your video is analyzed. which will keep the input video at its original resolution when analyzed. Using StandardDefinition will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to StandardDefinition will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected. Default to SourceResolution.
	analysisResolution?: null | string @go(AnalysisResolution,*string)

	// Specifies the type of blur to apply to faces in the output video. Possible values are Black, Box, High, Low,and Med.
	blurType?: null | string @go(BlurType,*string)

	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	experimentalOptions?: {[string]: null | string} @go(ExperimentalOptions,map[string]*string)

	// This mode provides the ability to choose between the following settings: 1) Analyze - For detection only. This mode generates a metadata JSON file marking appearances of faces throughout the video. Where possible, appearances of the same person are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces. It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction. Default to Analyze.
	faceRedactorMode?: null | string @go(FaceRedactorMode,*string)
}

#FaceDetectorPresetParameters: {
	// Possible values are SourceResolution or StandardDefinition. Specifies the maximum resolution at which your video is analyzed. which will keep the input video at its original resolution when analyzed. Using StandardDefinition will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to StandardDefinition will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected. Default to SourceResolution.
	// +kubebuilder:validation:Optional
	analysisResolution?: null | string @go(AnalysisResolution,*string)

	// Specifies the type of blur to apply to faces in the output video. Possible values are Black, Box, High, Low,and Med.
	// +kubebuilder:validation:Optional
	blurType?: null | string @go(BlurType,*string)

	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	// +kubebuilder:validation:Optional
	experimentalOptions?: {[string]: null | string} @go(ExperimentalOptions,map[string]*string)

	// This mode provides the ability to choose between the following settings: 1) Analyze - For detection only. This mode generates a metadata JSON file marking appearances of faces throughout the video. Where possible, appearances of the same person are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces. It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction. Default to Analyze.
	// +kubebuilder:validation:Optional
	faceRedactorMode?: null | string @go(FaceRedactorMode,*string)
}

#FadeInInitParameters: {
	// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
	duration?: null | string @go(Duration,*string)

	// The color for the fade in/out. It can be on the CSS Level1 colors or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000.
	fadeColor?: null | string @go(FadeColor,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)
}

#FadeInObservation: {
	// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
	duration?: null | string @go(Duration,*string)

	// The color for the fade in/out. It can be on the CSS Level1 colors or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000.
	fadeColor?: null | string @go(FadeColor,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)
}

#FadeInParameters: {
	// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
	// +kubebuilder:validation:Optional
	duration?: null | string @go(Duration,*string)

	// The color for the fade in/out. It can be on the CSS Level1 colors or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000.
	// +kubebuilder:validation:Optional
	fadeColor?: null | string @go(FadeColor,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	// +kubebuilder:validation:Optional
	start?: null | string @go(Start,*string)
}

#FadeOutInitParameters: {
	// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
	duration?: null | string @go(Duration,*string)

	// The color for the fade in/out. It can be on the CSS Level1 colors or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000.
	fadeColor?: null | string @go(FadeColor,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)
}

#FadeOutObservation: {
	// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
	duration?: null | string @go(Duration,*string)

	// The color for the fade in/out. It can be on the CSS Level1 colors or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000.
	fadeColor?: null | string @go(FadeColor,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)
}

#FadeOutParameters: {
	// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
	// +kubebuilder:validation:Optional
	duration?: null | string @go(Duration,*string)

	// The color for the fade in/out. It can be on the CSS Level1 colors or an RGB/hex value: e.g: rgb(255,0,0), 0xFF0000 or #FF0000.
	// +kubebuilder:validation:Optional
	fadeColor?: null | string @go(FadeColor,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	// +kubebuilder:validation:Optional
	start?: null | string @go(Start,*string)
}

#FilterInitParameters: {
	// A crop_rectangle block as defined above.
	cropRectangle?: [...#CropRectangleInitParameters] @go(CropRectangle,[]CropRectangleInitParameters)

	// A deinterlace block as defined below.
	deinterlace?: [...#DeinterlaceInitParameters] @go(Deinterlace,[]DeinterlaceInitParameters)

	// A fade_in block as defined above.
	fadeIn?: [...#FadeInInitParameters] @go(FadeIn,[]FadeInInitParameters)

	// A fade_out block as defined above.
	fadeOut?: [...#FadeOutInitParameters] @go(FadeOut,[]FadeOutInitParameters)

	// One or more overlay blocks as defined below.
	overlay?: [...#OverlayInitParameters] @go(Overlay,[]OverlayInitParameters)

	// The rotation to be applied to the input video before it is encoded. Possible values are Auto, None, Rotate90, Rotate180, Rotate270,or Rotate0. Default to Auto.
	rotation?: null | string @go(Rotation,*string)
}

#FilterObservation: {
	// A crop_rectangle block as defined above.
	cropRectangle?: [...#CropRectangleObservation] @go(CropRectangle,[]CropRectangleObservation)

	// A deinterlace block as defined below.
	deinterlace?: [...#DeinterlaceObservation] @go(Deinterlace,[]DeinterlaceObservation)

	// A fade_in block as defined above.
	fadeIn?: [...#FadeInObservation] @go(FadeIn,[]FadeInObservation)

	// A fade_out block as defined above.
	fadeOut?: [...#FadeOutObservation] @go(FadeOut,[]FadeOutObservation)

	// One or more overlay blocks as defined below.
	overlay?: [...#OverlayObservation] @go(Overlay,[]OverlayObservation)

	// The rotation to be applied to the input video before it is encoded. Possible values are Auto, None, Rotate90, Rotate180, Rotate270,or Rotate0. Default to Auto.
	rotation?: null | string @go(Rotation,*string)
}

#FilterParameters: {
	// A crop_rectangle block as defined above.
	// +kubebuilder:validation:Optional
	cropRectangle?: [...#CropRectangleParameters] @go(CropRectangle,[]CropRectangleParameters)

	// A deinterlace block as defined below.
	// +kubebuilder:validation:Optional
	deinterlace?: [...#DeinterlaceParameters] @go(Deinterlace,[]DeinterlaceParameters)

	// A fade_in block as defined above.
	// +kubebuilder:validation:Optional
	fadeIn?: [...#FadeInParameters] @go(FadeIn,[]FadeInParameters)

	// A fade_out block as defined above.
	// +kubebuilder:validation:Optional
	fadeOut?: [...#FadeOutParameters] @go(FadeOut,[]FadeOutParameters)

	// One or more overlay blocks as defined below.
	// +kubebuilder:validation:Optional
	overlay?: [...#OverlayParameters] @go(Overlay,[]OverlayParameters)

	// The rotation to be applied to the input video before it is encoded. Possible values are Auto, None, Rotate90, Rotate180, Rotate270,or Rotate0. Default to Auto.
	// +kubebuilder:validation:Optional
	rotation?: null | string @go(Rotation,*string)
}

#FormatInitParameters: {
	// A jpg block as defined below.
	jpg?: [...#JpgInitParameters] @go(Jpg,[]JpgInitParameters)

	// A mp4 block as defined below.
	mp4?: [...#Mp4InitParameters] @go(Mp4,[]Mp4InitParameters)

	// A png block as defined below.
	png?: [...#PngInitParameters] @go(Png,[]PngInitParameters)

	// A transport_stream block as defined below.
	transportStream?: [...#TransportStreamInitParameters] @go(TransportStream,[]TransportStreamInitParameters)
}

#FormatObservation: {
	// A jpg block as defined below.
	jpg?: [...#JpgObservation] @go(Jpg,[]JpgObservation)

	// A mp4 block as defined below.
	mp4?: [...#Mp4Observation] @go(Mp4,[]Mp4Observation)

	// A png block as defined below.
	png?: [...#PngObservation] @go(Png,[]PngObservation)

	// A transport_stream block as defined below.
	transportStream?: [...#TransportStreamObservation] @go(TransportStream,[]TransportStreamObservation)
}

#FormatParameters: {
	// A jpg block as defined below.
	// +kubebuilder:validation:Optional
	jpg?: [...#JpgParameters] @go(Jpg,[]JpgParameters)

	// A mp4 block as defined below.
	// +kubebuilder:validation:Optional
	mp4?: [...#Mp4Parameters] @go(Mp4,[]Mp4Parameters)

	// A png block as defined below.
	// +kubebuilder:validation:Optional
	png?: [...#PngParameters] @go(Png,[]PngParameters)

	// A transport_stream block as defined below.
	// +kubebuilder:validation:Optional
	transportStream?: [...#TransportStreamParameters] @go(TransportStream,[]TransportStreamParameters)
}

#H264VideoInitParameters: {
	// The complexity of the encoding. Possible values are Balanced, Speed or Quality.
	complexity?: null | string @go(Complexity,*string)

	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	layer?: [...#LayerInitParameters] @go(Layer,[]LayerInitParameters)

	// The rate control mode. Possible values are ABR, CBR or CRF. Default to ABR.
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to false.
	sceneChangeDetectionEnabled?: null | bool @go(SceneChangeDetectionEnabled,*bool)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	syncMode?: null | string @go(SyncMode,*string)
}

#H264VideoObservation: {
	// The complexity of the encoding. Possible values are Balanced, Speed or Quality.
	complexity?: null | string @go(Complexity,*string)

	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	layer?: [...#LayerObservation] @go(Layer,[]LayerObservation)

	// The rate control mode. Possible values are ABR, CBR or CRF. Default to ABR.
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to false.
	sceneChangeDetectionEnabled?: null | bool @go(SceneChangeDetectionEnabled,*bool)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	syncMode?: null | string @go(SyncMode,*string)
}

#H264VideoParameters: {
	// The complexity of the encoding. Possible values are Balanced, Speed or Quality.
	// +kubebuilder:validation:Optional
	complexity?: null | string @go(Complexity,*string)

	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	// +kubebuilder:validation:Optional
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	// +kubebuilder:validation:Optional
	layer?: [...#LayerParameters] @go(Layer,[]LayerParameters)

	// The rate control mode. Possible values are ABR, CBR or CRF. Default to ABR.
	// +kubebuilder:validation:Optional
	rateControlMode?: null | string @go(RateControlMode,*string)

	// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to false.
	// +kubebuilder:validation:Optional
	sceneChangeDetectionEnabled?: null | bool @go(SceneChangeDetectionEnabled,*bool)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	// +kubebuilder:validation:Optional
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	// +kubebuilder:validation:Optional
	syncMode?: null | string @go(SyncMode,*string)
}

#H265VideoInitParameters: {
	// The complexity of the encoding. Possible values are Balanced, Speed or Quality.
	complexity?: null | string @go(Complexity,*string)

	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	layer?: [...#H265VideoLayerInitParameters] @go(Layer,[]H265VideoLayerInitParameters)

	// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to false.
	sceneChangeDetectionEnabled?: null | bool @go(SceneChangeDetectionEnabled,*bool)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	syncMode?: null | string @go(SyncMode,*string)
}

#H265VideoLayerInitParameters: {
	// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to true.
	adaptiveBFrameEnabled?: null | bool @go(AdaptiveBFrameEnabled,*bool)

	// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
	bFrames?: null | float64 @go(BFrames,*float64)

	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range 0.1 to 100 seconds. The default is 5 seconds (PT5S).
	bufferWindow?: null | string @go(BufferWindow,*string)

	// The value of CRF to be used when encoding this layer. This setting takes effect when rate_control_mode is set CRF. The range of CRF value is between 0 and 51, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to 23.
	crf?: null | float64 @go(Crf,*float64)

	// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
	frameRate?: null | string @go(FrameRate,*string)

	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The H.264 levels. Currently, the resource support Level up to 6.2. The value can be auto, or a number that matches the H.264 profile. If not specified, the default is auto, which lets the encoder choose the Level that is appropriate for this layer.
	level?: null | string @go(Level,*string)

	// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
	maxBitrate?: null | float64 @go(MaxBitrate,*float64)

	// The H.264 profile. Possible values are Auto, Baseline, High, High422, High444,or Main. Default to Auto.
	profile?: null | string @go(Profile,*string)

	// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
	referenceFrames?: null | float64 @go(ReferenceFrames,*float64)

	// The number of slices to be used when encoding this layer. If not specified, default is 1, which means that encoder will use a single slice for each frame.
	slices?: null | float64 @go(Slices,*float64)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#H265VideoLayerObservation: {
	// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to true.
	adaptiveBFrameEnabled?: null | bool @go(AdaptiveBFrameEnabled,*bool)

	// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
	bFrames?: null | float64 @go(BFrames,*float64)

	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range 0.1 to 100 seconds. The default is 5 seconds (PT5S).
	bufferWindow?: null | string @go(BufferWindow,*string)

	// The value of CRF to be used when encoding this layer. This setting takes effect when rate_control_mode is set CRF. The range of CRF value is between 0 and 51, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to 23.
	crf?: null | float64 @go(Crf,*float64)

	// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
	frameRate?: null | string @go(FrameRate,*string)

	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The H.264 levels. Currently, the resource support Level up to 6.2. The value can be auto, or a number that matches the H.264 profile. If not specified, the default is auto, which lets the encoder choose the Level that is appropriate for this layer.
	level?: null | string @go(Level,*string)

	// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
	maxBitrate?: null | float64 @go(MaxBitrate,*float64)

	// The H.264 profile. Possible values are Auto, Baseline, High, High422, High444,or Main. Default to Auto.
	profile?: null | string @go(Profile,*string)

	// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
	referenceFrames?: null | float64 @go(ReferenceFrames,*float64)

	// The number of slices to be used when encoding this layer. If not specified, default is 1, which means that encoder will use a single slice for each frame.
	slices?: null | float64 @go(Slices,*float64)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#H265VideoLayerParameters: {
	// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to true.
	// +kubebuilder:validation:Optional
	adaptiveBFrameEnabled?: null | bool @go(AdaptiveBFrameEnabled,*bool)

	// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
	// +kubebuilder:validation:Optional
	bFrames?: null | float64 @go(BFrames,*float64)

	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range 0.1 to 100 seconds. The default is 5 seconds (PT5S).
	// +kubebuilder:validation:Optional
	bufferWindow?: null | string @go(BufferWindow,*string)

	// The value of CRF to be used when encoding this layer. This setting takes effect when rate_control_mode is set CRF. The range of CRF value is between 0 and 51, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to 23.
	// +kubebuilder:validation:Optional
	crf?: null | float64 @go(Crf,*float64)

	// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
	// +kubebuilder:validation:Optional
	frameRate?: null | string @go(FrameRate,*string)

	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// The H.264 levels. Currently, the resource support Level up to 6.2. The value can be auto, or a number that matches the H.264 profile. If not specified, the default is auto, which lets the encoder choose the Level that is appropriate for this layer.
	// +kubebuilder:validation:Optional
	level?: null | string @go(Level,*string)

	// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
	// +kubebuilder:validation:Optional
	maxBitrate?: null | float64 @go(MaxBitrate,*float64)

	// The H.264 profile. Possible values are Auto, Baseline, High, High422, High444,or Main. Default to Auto.
	// +kubebuilder:validation:Optional
	profile?: null | string @go(Profile,*string)

	// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
	// +kubebuilder:validation:Optional
	referenceFrames?: null | float64 @go(ReferenceFrames,*float64)

	// The number of slices to be used when encoding this layer. If not specified, default is 1, which means that encoder will use a single slice for each frame.
	// +kubebuilder:validation:Optional
	slices?: null | float64 @go(Slices,*float64)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	width?: null | string @go(Width,*string)
}

#H265VideoObservation: {
	// The complexity of the encoding. Possible values are Balanced, Speed or Quality.
	complexity?: null | string @go(Complexity,*string)

	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	layer?: [...#H265VideoLayerObservation] @go(Layer,[]H265VideoLayerObservation)

	// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to false.
	sceneChangeDetectionEnabled?: null | bool @go(SceneChangeDetectionEnabled,*bool)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	syncMode?: null | string @go(SyncMode,*string)
}

#H265VideoParameters: {
	// The complexity of the encoding. Possible values are Balanced, Speed or Quality.
	// +kubebuilder:validation:Optional
	complexity?: null | string @go(Complexity,*string)

	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	// +kubebuilder:validation:Optional
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	// +kubebuilder:validation:Optional
	layer?: [...#H265VideoLayerParameters] @go(Layer,[]H265VideoLayerParameters)

	// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to false.
	// +kubebuilder:validation:Optional
	sceneChangeDetectionEnabled?: null | bool @go(SceneChangeDetectionEnabled,*bool)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	// +kubebuilder:validation:Optional
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	// +kubebuilder:validation:Optional
	syncMode?: null | string @go(SyncMode,*string)
}

#JpgImageInitParameters: {
	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	layer?: [...#JpgImageLayerInitParameters] @go(Layer,[]JpgImageLayerInitParameters)

	// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, PT5M30S to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, 300 to stop at the 300th frame from the frame at start time. If this value is 1, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, 50% to stop at half of stream duration from start time). The default value is 100%, which means to stop at the end of the stream.
	range?: null | string @go(Range,*string)

	// Sets the number of columns used in thumbnail sprite image. The number of rows are automatically calculated and a VTT file is generated with the coordinate mappings for each thumbnail in the sprite. Note: this value should be a positive integer and a proper value is recommended so that the output image resolution will not go beyond JPEG maximum pixel resolution limit 65535x65535.
	spriteColumn?: null | float64 @go(SpriteColumn,*float64)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)

	// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, PT05S for one image every 5 seconds), or a frame count (For example, 30 for one image every 30 frames), or a relative value to stream duration (For example, 10% for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is 10%, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at 1 if only one thumbnail is needed at start time.
	step?: null | string @go(Step,*string)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	syncMode?: null | string @go(SyncMode,*string)
}

#JpgImageLayerInitParameters: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The compression quality of the JPEG output. Range is from 0 to 100 and the default is 70.
	quality?: null | float64 @go(Quality,*float64)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#JpgImageLayerObservation: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The compression quality of the JPEG output. Range is from 0 to 100 and the default is 70.
	quality?: null | float64 @go(Quality,*float64)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#JpgImageLayerParameters: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// The compression quality of the JPEG output. Range is from 0 to 100 and the default is 70.
	// +kubebuilder:validation:Optional
	quality?: null | float64 @go(Quality,*float64)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	width?: null | string @go(Width,*string)
}

#JpgImageObservation: {
	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	layer?: [...#JpgImageLayerObservation] @go(Layer,[]JpgImageLayerObservation)

	// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, PT5M30S to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, 300 to stop at the 300th frame from the frame at start time. If this value is 1, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, 50% to stop at half of stream duration from start time). The default value is 100%, which means to stop at the end of the stream.
	range?: null | string @go(Range,*string)

	// Sets the number of columns used in thumbnail sprite image. The number of rows are automatically calculated and a VTT file is generated with the coordinate mappings for each thumbnail in the sprite. Note: this value should be a positive integer and a proper value is recommended so that the output image resolution will not go beyond JPEG maximum pixel resolution limit 65535x65535.
	spriteColumn?: null | float64 @go(SpriteColumn,*float64)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)

	// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, PT05S for one image every 5 seconds), or a frame count (For example, 30 for one image every 30 frames), or a relative value to stream duration (For example, 10% for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is 10%, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at 1 if only one thumbnail is needed at start time.
	step?: null | string @go(Step,*string)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	syncMode?: null | string @go(SyncMode,*string)
}

#JpgImageParameters: {
	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	// +kubebuilder:validation:Optional
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	// +kubebuilder:validation:Optional
	layer?: [...#JpgImageLayerParameters] @go(Layer,[]JpgImageLayerParameters)

	// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, PT5M30S to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, 300 to stop at the 300th frame from the frame at start time. If this value is 1, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, 50% to stop at half of stream duration from start time). The default value is 100%, which means to stop at the end of the stream.
	// +kubebuilder:validation:Optional
	range?: null | string @go(Range,*string)

	// Sets the number of columns used in thumbnail sprite image. The number of rows are automatically calculated and a VTT file is generated with the coordinate mappings for each thumbnail in the sprite. Note: this value should be a positive integer and a proper value is recommended so that the output image resolution will not go beyond JPEG maximum pixel resolution limit 65535x65535.
	// +kubebuilder:validation:Optional
	spriteColumn?: null | float64 @go(SpriteColumn,*float64)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	// +kubebuilder:validation:Optional
	start?: null | string @go(Start,*string)

	// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, PT05S for one image every 5 seconds), or a frame count (For example, 30 for one image every 30 frames), or a relative value to stream duration (For example, 10% for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is 10%, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at 1 if only one thumbnail is needed at start time.
	// +kubebuilder:validation:Optional
	step?: null | string @go(Step,*string)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	// +kubebuilder:validation:Optional
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	// +kubebuilder:validation:Optional
	syncMode?: null | string @go(SyncMode,*string)
}

#JpgInitParameters: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	filenamePattern?: null | string @go(FilenamePattern,*string)
}

#JpgObservation: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	filenamePattern?: null | string @go(FilenamePattern,*string)
}

#JpgParameters: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	// +kubebuilder:validation:Optional
	filenamePattern?: null | string @go(FilenamePattern,*string)
}

#LayerInitParameters: {
	// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to true.
	adaptiveBFrameEnabled?: null | bool @go(AdaptiveBFrameEnabled,*bool)

	// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
	bFrames?: null | float64 @go(BFrames,*float64)

	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range 0.1 to 100 seconds. The default is 5 seconds (PT5S).
	bufferWindow?: null | string @go(BufferWindow,*string)

	// The value of CRF to be used when encoding this layer. This setting takes effect when rate_control_mode is set CRF. The range of CRF value is between 0 and 51, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to 23.
	crf?: null | float64 @go(Crf,*float64)

	// The entropy mode to be used for this layer. Possible values are Cabac or Cavlc. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
	entropyMode?: null | string @go(EntropyMode,*string)

	// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
	frameRate?: null | string @go(FrameRate,*string)

	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The H.264 levels. Currently, the resource support Level up to 6.2. The value can be auto, or a number that matches the H.264 profile. If not specified, the default is auto, which lets the encoder choose the Level that is appropriate for this layer.
	level?: null | string @go(Level,*string)

	// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
	maxBitrate?: null | float64 @go(MaxBitrate,*float64)

	// The H.264 profile. Possible values are Auto, Baseline, High, High422, High444,or Main. Default to Auto.
	profile?: null | string @go(Profile,*string)

	// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
	referenceFrames?: null | float64 @go(ReferenceFrames,*float64)

	// The number of slices to be used when encoding this layer. If not specified, default is 1, which means that encoder will use a single slice for each frame.
	slices?: null | float64 @go(Slices,*float64)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#LayerObservation: {
	// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to true.
	adaptiveBFrameEnabled?: null | bool @go(AdaptiveBFrameEnabled,*bool)

	// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
	bFrames?: null | float64 @go(BFrames,*float64)

	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range 0.1 to 100 seconds. The default is 5 seconds (PT5S).
	bufferWindow?: null | string @go(BufferWindow,*string)

	// The value of CRF to be used when encoding this layer. This setting takes effect when rate_control_mode is set CRF. The range of CRF value is between 0 and 51, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to 23.
	crf?: null | float64 @go(Crf,*float64)

	// The entropy mode to be used for this layer. Possible values are Cabac or Cavlc. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
	entropyMode?: null | string @go(EntropyMode,*string)

	// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
	frameRate?: null | string @go(FrameRate,*string)

	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The H.264 levels. Currently, the resource support Level up to 6.2. The value can be auto, or a number that matches the H.264 profile. If not specified, the default is auto, which lets the encoder choose the Level that is appropriate for this layer.
	level?: null | string @go(Level,*string)

	// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
	maxBitrate?: null | float64 @go(MaxBitrate,*float64)

	// The H.264 profile. Possible values are Auto, Baseline, High, High422, High444,or Main. Default to Auto.
	profile?: null | string @go(Profile,*string)

	// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
	referenceFrames?: null | float64 @go(ReferenceFrames,*float64)

	// The number of slices to be used when encoding this layer. If not specified, default is 1, which means that encoder will use a single slice for each frame.
	slices?: null | float64 @go(Slices,*float64)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#LayerParameters: {
	// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to true.
	// +kubebuilder:validation:Optional
	adaptiveBFrameEnabled?: null | bool @go(AdaptiveBFrameEnabled,*bool)

	// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
	// +kubebuilder:validation:Optional
	bFrames?: null | float64 @go(BFrames,*float64)

	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	// +kubebuilder:validation:Optional
	bitrate?: null | float64 @go(Bitrate,*float64)

	// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range 0.1 to 100 seconds. The default is 5 seconds (PT5S).
	// +kubebuilder:validation:Optional
	bufferWindow?: null | string @go(BufferWindow,*string)

	// The value of CRF to be used when encoding this layer. This setting takes effect when rate_control_mode is set CRF. The range of CRF value is between 0 and 51, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to 23.
	// +kubebuilder:validation:Optional
	crf?: null | float64 @go(Crf,*float64)

	// The entropy mode to be used for this layer. Possible values are Cabac or Cavlc. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
	// +kubebuilder:validation:Optional
	entropyMode?: null | string @go(EntropyMode,*string)

	// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
	// +kubebuilder:validation:Optional
	frameRate?: null | string @go(FrameRate,*string)

	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// The H.264 levels. Currently, the resource support Level up to 6.2. The value can be auto, or a number that matches the H.264 profile. If not specified, the default is auto, which lets the encoder choose the Level that is appropriate for this layer.
	// +kubebuilder:validation:Optional
	level?: null | string @go(Level,*string)

	// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
	// +kubebuilder:validation:Optional
	maxBitrate?: null | float64 @go(MaxBitrate,*float64)

	// The H.264 profile. Possible values are Auto, Baseline, High, High422, High444,or Main. Default to Auto.
	// +kubebuilder:validation:Optional
	profile?: null | string @go(Profile,*string)

	// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
	// +kubebuilder:validation:Optional
	referenceFrames?: null | float64 @go(ReferenceFrames,*float64)

	// The number of slices to be used when encoding this layer. If not specified, default is 1, which means that encoder will use a single slice for each frame.
	// +kubebuilder:validation:Optional
	slices?: null | float64 @go(Slices,*float64)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	width?: null | string @go(Width,*string)
}

#Mp4InitParameters: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	filenamePattern?: null | string @go(FilenamePattern,*string)

	// One or more output_file blocks as defined above.
	outputFile?: [...#OutputFileInitParameters] @go(OutputFile,[]OutputFileInitParameters)
}

#Mp4Observation: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	filenamePattern?: null | string @go(FilenamePattern,*string)

	// One or more output_file blocks as defined above.
	outputFile?: [...#OutputFileObservation] @go(OutputFile,[]OutputFileObservation)
}

#Mp4Parameters: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	// +kubebuilder:validation:Optional
	filenamePattern?: null | string @go(FilenamePattern,*string)

	// One or more output_file blocks as defined above.
	// +kubebuilder:validation:Optional
	outputFile?: [...#OutputFileParameters] @go(OutputFile,[]OutputFileParameters)
}

#OutputFileInitParameters: {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like ["v1", "a1"] tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
	labels?: [...null | string] @go(Labels,[]*string)
}

#OutputFileObservation: {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like ["v1", "a1"] tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
	labels?: [...null | string] @go(Labels,[]*string)
}

#OutputFileParameters: {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like ["v1", "a1"] tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
	// +kubebuilder:validation:Optional
	labels: [...null | string] @go(Labels,[]*string)
}

#OutputInitParameters: {
	// An audio_analyzer_preset block as defined above.
	audioAnalyzerPreset?: [...#AudioAnalyzerPresetInitParameters] @go(AudioAnalyzerPreset,[]AudioAnalyzerPresetInitParameters)

	// A builtin_preset block as defined above.
	builtinPreset?: [...#BuiltinPresetInitParameters] @go(BuiltinPreset,[]BuiltinPresetInitParameters)

	// A custom_preset block as defined above.
	customPreset?: [...#CustomPresetInitParameters] @go(CustomPreset,[]CustomPresetInitParameters)

	// A face_detector_preset block as defined above.
	faceDetectorPreset?: [...#FaceDetectorPresetInitParameters] @go(FaceDetectorPreset,[]FaceDetectorPresetInitParameters)

	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with ContinueJob. Possible values are StopProcessingJob or ContinueJob. The default is StopProcessingJob.
	onErrorAction?: null | string @go(OnErrorAction,*string)

	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possible values are High, Normal or Low. Defaults to Normal.
	relativePriority?: null | string @go(RelativePriority,*string)

	// A video_analyzer_preset block as defined below.
	videoAnalyzerPreset?: [...#VideoAnalyzerPresetInitParameters] @go(VideoAnalyzerPreset,[]VideoAnalyzerPresetInitParameters)
}

#OutputObservation: {
	// An audio_analyzer_preset block as defined above.
	audioAnalyzerPreset?: [...#AudioAnalyzerPresetObservation] @go(AudioAnalyzerPreset,[]AudioAnalyzerPresetObservation)

	// A builtin_preset block as defined above.
	builtinPreset?: [...#BuiltinPresetObservation] @go(BuiltinPreset,[]BuiltinPresetObservation)

	// A custom_preset block as defined above.
	customPreset?: [...#CustomPresetObservation] @go(CustomPreset,[]CustomPresetObservation)

	// A face_detector_preset block as defined above.
	faceDetectorPreset?: [...#FaceDetectorPresetObservation] @go(FaceDetectorPreset,[]FaceDetectorPresetObservation)

	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with ContinueJob. Possible values are StopProcessingJob or ContinueJob. The default is StopProcessingJob.
	onErrorAction?: null | string @go(OnErrorAction,*string)

	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possible values are High, Normal or Low. Defaults to Normal.
	relativePriority?: null | string @go(RelativePriority,*string)

	// A video_analyzer_preset block as defined below.
	videoAnalyzerPreset?: [...#VideoAnalyzerPresetObservation] @go(VideoAnalyzerPreset,[]VideoAnalyzerPresetObservation)
}

#OutputParameters: {
	// An audio_analyzer_preset block as defined above.
	// +kubebuilder:validation:Optional
	audioAnalyzerPreset?: [...#AudioAnalyzerPresetParameters] @go(AudioAnalyzerPreset,[]AudioAnalyzerPresetParameters)

	// A builtin_preset block as defined above.
	// +kubebuilder:validation:Optional
	builtinPreset?: [...#BuiltinPresetParameters] @go(BuiltinPreset,[]BuiltinPresetParameters)

	// A custom_preset block as defined above.
	// +kubebuilder:validation:Optional
	customPreset?: [...#CustomPresetParameters] @go(CustomPreset,[]CustomPresetParameters)

	// A face_detector_preset block as defined above.
	// +kubebuilder:validation:Optional
	faceDetectorPreset?: [...#FaceDetectorPresetParameters] @go(FaceDetectorPreset,[]FaceDetectorPresetParameters)

	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with ContinueJob. Possible values are StopProcessingJob or ContinueJob. The default is StopProcessingJob.
	// +kubebuilder:validation:Optional
	onErrorAction?: null | string @go(OnErrorAction,*string)

	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possible values are High, Normal or Low. Defaults to Normal.
	// +kubebuilder:validation:Optional
	relativePriority?: null | string @go(RelativePriority,*string)

	// A video_analyzer_preset block as defined below.
	// +kubebuilder:validation:Optional
	videoAnalyzerPreset?: [...#VideoAnalyzerPresetParameters] @go(VideoAnalyzerPreset,[]VideoAnalyzerPresetParameters)
}

#OverlayInitParameters: {
	// An audio block as defined above.
	audio?: [...#AudioInitParameters] @go(Audio,[]AudioInitParameters)

	// A video block as defined below.
	video?: [...#VideoInitParameters] @go(Video,[]VideoInitParameters)
}

#OverlayObservation: {
	// An audio block as defined above.
	audio?: [...#AudioObservation] @go(Audio,[]AudioObservation)

	// A video block as defined below.
	video?: [...#VideoObservation] @go(Video,[]VideoObservation)
}

#OverlayParameters: {
	// An audio block as defined above.
	// +kubebuilder:validation:Optional
	audio?: [...#AudioParameters] @go(Audio,[]AudioParameters)

	// A video block as defined below.
	// +kubebuilder:validation:Optional
	video?: [...#VideoParameters] @go(Video,[]VideoParameters)
}

#PngImageInitParameters: {
	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	layer?: [...#PngImageLayerInitParameters] @go(Layer,[]PngImageLayerInitParameters)

	// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, PT5M30S to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, 300 to stop at the 300th frame from the frame at start time. If this value is 1, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, 50% to stop at half of stream duration from start time). The default value is 100%, which means to stop at the end of the stream.
	range?: null | string @go(Range,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)

	// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, PT05S for one image every 5 seconds), or a frame count (For example, 30 for one image every 30 frames), or a relative value to stream duration (For example, 10% for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is 10%, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at 1 if only one thumbnail is needed at start time.
	step?: null | string @go(Step,*string)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	syncMode?: null | string @go(SyncMode,*string)
}

#PngImageLayerInitParameters: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#PngImageLayerObservation: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#PngImageLayerParameters: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	height?: null | string @go(Height,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	width?: null | string @go(Width,*string)
}

#PngImageObservation: {
	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	layer?: [...#PngImageLayerObservation] @go(Layer,[]PngImageLayerObservation)

	// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, PT5M30S to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, 300 to stop at the 300th frame from the frame at start time. If this value is 1, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, 50% to stop at half of stream duration from start time). The default value is 100%, which means to stop at the end of the stream.
	range?: null | string @go(Range,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)

	// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, PT05S for one image every 5 seconds), or a frame count (For example, 30 for one image every 30 frames), or a relative value to stream duration (For example, 10% for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is 10%, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at 1 if only one thumbnail is needed at start time.
	step?: null | string @go(Step,*string)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	syncMode?: null | string @go(SyncMode,*string)
}

#PngImageParameters: {
	// The distance between two key frames. The value should be non-zero in the range 0.5 to 20 seconds, specified in ISO 8601 format. The default is 2 seconds (PT2S). Note that this setting is ignored if sync_mode is set to Passthrough, where the KeyFrameInterval value will follow the input source setting.
	// +kubebuilder:validation:Optional
	keyFrameInterval?: null | string @go(KeyFrameInterval,*string)

	// Specifies the label for the codec. The label can be used to control muxing behavior.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// One or more layer blocks as defined below.
	// +kubebuilder:validation:Optional
	layer?: [...#PngImageLayerParameters] @go(Layer,[]PngImageLayerParameters)

	// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, PT5M30S to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, 300 to stop at the 300th frame from the frame at start time. If this value is 1, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, 50% to stop at half of stream duration from start time). The default value is 100%, which means to stop at the end of the stream.
	// +kubebuilder:validation:Optional
	range?: null | string @go(Range,*string)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	// +kubebuilder:validation:Optional
	start?: null | string @go(Start,*string)

	// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, PT05S for one image every 5 seconds), or a frame count (For example, 30 for one image every 30 frames), or a relative value to stream duration (For example, 10% for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is 10%, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at 1 if only one thumbnail is needed at start time.
	// +kubebuilder:validation:Optional
	step?: null | string @go(Step,*string)

	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are AutoFit, AutoSize or None. Default to AutoSize.
	// +kubebuilder:validation:Optional
	stretchMode?: null | string @go(StretchMode,*string)

	// Specifies the synchronization mode for the video. Possible values are Auto, Cfr, Passthrough or Vfr. Default to Auto.
	// +kubebuilder:validation:Optional
	syncMode?: null | string @go(SyncMode,*string)
}

#PngInitParameters: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	filenamePattern?: null | string @go(FilenamePattern,*string)
}

#PngObservation: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	filenamePattern?: null | string @go(FilenamePattern,*string)
}

#PngParameters: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	// +kubebuilder:validation:Optional
	filenamePattern?: null | string @go(FilenamePattern,*string)
}

#PositionInitParameters: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	left?: null | string @go(Left,*string)

	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	top?: null | string @go(Top,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#PositionObservation: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	left?: null | string @go(Left,*string)

	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	top?: null | string @go(Top,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#PositionParameters: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	height?: null | string @go(Height,*string)

	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	left?: null | string @go(Left,*string)

	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	top?: null | string @go(Top,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	width?: null | string @go(Width,*string)
}

#PresetConfigurationInitParameters: {
	// The complexity of the encoding. Possible values are Balanced, Speed or Quality.
	complexity?: null | string @go(Complexity,*string)

	// Specifies the interleave mode of the output to control how audio are stored in the container format. Possible values are InterleavedOutput and NonInterleavedOutput.
	interleaveOutput?: null | string @go(InterleaveOutput,*string)

	// The key frame interval in seconds. Possible value is a positive float. For example, set as 2.0 to reduce the playback buffering for some players.
	keyFrameIntervalInSeconds?: null | float64 @go(KeyFrameIntervalInSeconds,*float64)

	// The maximum bitrate in bits per second (threshold for the top video layer). For example, set as 6000000 to avoid producing very high bitrate outputs for contents with high complexity.
	maxBitrateBps?: null | float64 @go(MaxBitrateBps,*float64)

	// The maximum height of output video layers. For example, set as 720 to produce output layers up to 720P even if the input is 4K.
	maxHeight?: null | float64 @go(MaxHeight,*float64)

	// The maximum number of output video layers. For example, set as 4 to make sure at most 4 output layers are produced to control the overall cost of the encoding job.
	maxLayers?: null | float64 @go(MaxLayers,*float64)

	// The minimum bitrate in bits per second (threshold for the bottom video layer). For example, set as 200000 to have a bottom layer that covers users with low network bandwidth.
	minBitrateBps?: null | float64 @go(MinBitrateBps,*float64)

	// The minimum height of output video layers. For example, set as 360 to avoid output layers of smaller resolutions like 180P.
	minHeight?: null | float64 @go(MinHeight,*float64)
}

#PresetConfigurationObservation: {
	// The complexity of the encoding. Possible values are Balanced, Speed or Quality.
	complexity?: null | string @go(Complexity,*string)

	// Specifies the interleave mode of the output to control how audio are stored in the container format. Possible values are InterleavedOutput and NonInterleavedOutput.
	interleaveOutput?: null | string @go(InterleaveOutput,*string)

	// The key frame interval in seconds. Possible value is a positive float. For example, set as 2.0 to reduce the playback buffering for some players.
	keyFrameIntervalInSeconds?: null | float64 @go(KeyFrameIntervalInSeconds,*float64)

	// The maximum bitrate in bits per second (threshold for the top video layer). For example, set as 6000000 to avoid producing very high bitrate outputs for contents with high complexity.
	maxBitrateBps?: null | float64 @go(MaxBitrateBps,*float64)

	// The maximum height of output video layers. For example, set as 720 to produce output layers up to 720P even if the input is 4K.
	maxHeight?: null | float64 @go(MaxHeight,*float64)

	// The maximum number of output video layers. For example, set as 4 to make sure at most 4 output layers are produced to control the overall cost of the encoding job.
	maxLayers?: null | float64 @go(MaxLayers,*float64)

	// The minimum bitrate in bits per second (threshold for the bottom video layer). For example, set as 200000 to have a bottom layer that covers users with low network bandwidth.
	minBitrateBps?: null | float64 @go(MinBitrateBps,*float64)

	// The minimum height of output video layers. For example, set as 360 to avoid output layers of smaller resolutions like 180P.
	minHeight?: null | float64 @go(MinHeight,*float64)
}

#PresetConfigurationParameters: {
	// The complexity of the encoding. Possible values are Balanced, Speed or Quality.
	// +kubebuilder:validation:Optional
	complexity?: null | string @go(Complexity,*string)

	// Specifies the interleave mode of the output to control how audio are stored in the container format. Possible values are InterleavedOutput and NonInterleavedOutput.
	// +kubebuilder:validation:Optional
	interleaveOutput?: null | string @go(InterleaveOutput,*string)

	// The key frame interval in seconds. Possible value is a positive float. For example, set as 2.0 to reduce the playback buffering for some players.
	// +kubebuilder:validation:Optional
	keyFrameIntervalInSeconds?: null | float64 @go(KeyFrameIntervalInSeconds,*float64)

	// The maximum bitrate in bits per second (threshold for the top video layer). For example, set as 6000000 to avoid producing very high bitrate outputs for contents with high complexity.
	// +kubebuilder:validation:Optional
	maxBitrateBps?: null | float64 @go(MaxBitrateBps,*float64)

	// The maximum height of output video layers. For example, set as 720 to produce output layers up to 720P even if the input is 4K.
	// +kubebuilder:validation:Optional
	maxHeight?: null | float64 @go(MaxHeight,*float64)

	// The maximum number of output video layers. For example, set as 4 to make sure at most 4 output layers are produced to control the overall cost of the encoding job.
	// +kubebuilder:validation:Optional
	maxLayers?: null | float64 @go(MaxLayers,*float64)

	// The minimum bitrate in bits per second (threshold for the bottom video layer). For example, set as 200000 to have a bottom layer that covers users with low network bandwidth.
	// +kubebuilder:validation:Optional
	minBitrateBps?: null | float64 @go(MinBitrateBps,*float64)

	// The minimum height of output video layers. For example, set as 360 to avoid output layers of smaller resolutions like 180P.
	// +kubebuilder:validation:Optional
	minHeight?: null | float64 @go(MinHeight,*float64)
}

#TransformInitParameters: {
	// An optional verbose description of the Transform.
	description?: null | string @go(Description,*string)

	// One or more output blocks as defined below. At least one output must be defined.
	output?: [...#OutputInitParameters] @go(Output,[]OutputInitParameters)
}

#TransformObservation: {
	// An optional verbose description of the Transform.
	description?: null | string @go(Description,*string)

	// The ID of the Transform.
	id?: null | string @go(ID,*string)

	// The Media Services account name. Changing this forces a new Transform to be created.
	mediaServicesAccountName?: null | string @go(MediaServicesAccountName,*string)

	// One or more output blocks as defined below. At least one output must be defined.
	output?: [...#OutputObservation] @go(Output,[]OutputObservation)

	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

#TransformParameters: {
	// An optional verbose description of the Transform.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The Media Services account name. Changing this forces a new Transform to be created.
	// +crossplane:generate:reference:type=ServicesAccount
	// +kubebuilder:validation:Optional
	mediaServicesAccountName?: null | string @go(MediaServicesAccountName,*string)

	// One or more output blocks as defined below. At least one output must be defined.
	// +kubebuilder:validation:Optional
	output?: [...#OutputParameters] @go(Output,[]OutputParameters)

	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

#TransportStreamInitParameters: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	filenamePattern?: null | string @go(FilenamePattern,*string)

	// One or more output_file blocks as defined above.
	outputFile?: [...#TransportStreamOutputFileInitParameters] @go(OutputFile,[]TransportStreamOutputFileInitParameters)
}

#TransportStreamObservation: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	filenamePattern?: null | string @go(FilenamePattern,*string)

	// One or more output_file blocks as defined above.
	outputFile?: [...#TransportStreamOutputFileObservation] @go(OutputFile,[]TransportStreamOutputFileObservation)
}

#TransportStreamOutputFileInitParameters: {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like ["v1", "a1"] tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
	labels?: [...null | string] @go(Labels,[]*string)
}

#TransportStreamOutputFileObservation: {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like ["v1", "a1"] tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
	labels?: [...null | string] @go(Labels,[]*string)
}

#TransportStreamOutputFileParameters: {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like ["v1", "a1"] tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
	// +kubebuilder:validation:Optional
	labels: [...null | string] @go(Labels,[]*string)
}

#TransportStreamParameters: {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {AudioStream} - string "Audio" plus audio stream number(start from 1). {Bitrate} - The audio/video bitrate in kbps. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	// +kubebuilder:validation:Optional
	filenamePattern?: null | string @go(FilenamePattern,*string)

	// One or more output_file blocks as defined above.
	// +kubebuilder:validation:Optional
	outputFile?: [...#TransportStreamOutputFileParameters] @go(OutputFile,[]TransportStreamOutputFileParameters)
}

#VideoAnalyzerPresetInitParameters: {
	// Possible values are Basic or Standard. Determines the set of audio analysis operations to be performed. Default to Standard.
	audioAnalysisMode?: null | string @go(AudioAnalysisMode,*string)

	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to en-US. The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
	audioLanguage?: null | string @go(AudioLanguage,*string)

	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	experimentalOptions?: {[string]: null | string} @go(ExperimentalOptions,map[string]*string)

	// Defines the type of insights that you want the service to generate. The allowed values are AudioInsightsOnly, VideoInsightsOnly, and AllInsights. If you set this to AllInsights and the input is audio only, then only audio insights are generated. Similarly, if the input is video only, then only video insights are generated. It is recommended that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out. Default to AllInsights.
	insightsType?: null | string @go(InsightsType,*string)
}

#VideoAnalyzerPresetObservation: {
	// Possible values are Basic or Standard. Determines the set of audio analysis operations to be performed. Default to Standard.
	audioAnalysisMode?: null | string @go(AudioAnalysisMode,*string)

	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to en-US. The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
	audioLanguage?: null | string @go(AudioLanguage,*string)

	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	experimentalOptions?: {[string]: null | string} @go(ExperimentalOptions,map[string]*string)

	// Defines the type of insights that you want the service to generate. The allowed values are AudioInsightsOnly, VideoInsightsOnly, and AllInsights. If you set this to AllInsights and the input is audio only, then only audio insights are generated. Similarly, if the input is video only, then only video insights are generated. It is recommended that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out. Default to AllInsights.
	insightsType?: null | string @go(InsightsType,*string)
}

#VideoAnalyzerPresetParameters: {
	// Possible values are Basic or Standard. Determines the set of audio analysis operations to be performed. Default to Standard.
	// +kubebuilder:validation:Optional
	audioAnalysisMode?: null | string @go(AudioAnalysisMode,*string)

	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to en-US. The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
	// +kubebuilder:validation:Optional
	audioLanguage?: null | string @go(AudioLanguage,*string)

	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	// +kubebuilder:validation:Optional
	experimentalOptions?: {[string]: null | string} @go(ExperimentalOptions,map[string]*string)

	// Defines the type of insights that you want the service to generate. The allowed values are AudioInsightsOnly, VideoInsightsOnly, and AllInsights. If you set this to AllInsights and the input is audio only, then only audio insights are generated. Similarly, if the input is video only, then only video insights are generated. It is recommended that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out. Default to AllInsights.
	// +kubebuilder:validation:Optional
	insightsType?: null | string @go(InsightsType,*string)
}

#VideoCropRectangleInitParameters: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	left?: null | string @go(Left,*string)

	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	top?: null | string @go(Top,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#VideoCropRectangleObservation: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	height?: null | string @go(Height,*string)

	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	left?: null | string @go(Left,*string)

	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	top?: null | string @go(Top,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	width?: null | string @go(Width,*string)
}

#VideoCropRectangleParameters: {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	height?: null | string @go(Height,*string)

	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	left?: null | string @go(Left,*string)

	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	top?: null | string @go(Top,*string)

	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	// +kubebuilder:validation:Optional
	width?: null | string @go(Width,*string)
}

#VideoInitParameters: {
	// The gain level of audio in the overlay. The value should be in range between 0 to 1.0. The default is 1.0.
	audioGainLevel?: null | float64 @go(AudioGainLevel,*float64)

	// A crop_rectangle block as defined above.
	cropRectangle?: [...#VideoCropRectangleInitParameters] @go(CropRectangle,[]VideoCropRectangleInitParameters)

	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	end?: null | string @go(End,*string)

	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	fadeInDuration?: null | string @go(FadeInDuration,*string)

	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	fadeOutDuration?: null | string @go(FadeOutDuration,*string)

	// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
	inputLabel?: null | string @go(InputLabel,*string)

	// The opacity of the overlay. The value should be in the range between 0 to 1.0. Default to 1.0, which means the overlay is opaque.
	opacity?: null | float64 @go(Opacity,*float64)

	// A position block as defined above.
	position?: [...#PositionInitParameters] @go(Position,[]PositionInitParameters)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)
}

#VideoObservation: {
	// The gain level of audio in the overlay. The value should be in range between 0 to 1.0. The default is 1.0.
	audioGainLevel?: null | float64 @go(AudioGainLevel,*float64)

	// A crop_rectangle block as defined above.
	cropRectangle?: [...#VideoCropRectangleObservation] @go(CropRectangle,[]VideoCropRectangleObservation)

	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	end?: null | string @go(End,*string)

	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	fadeInDuration?: null | string @go(FadeInDuration,*string)

	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	fadeOutDuration?: null | string @go(FadeOutDuration,*string)

	// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
	inputLabel?: null | string @go(InputLabel,*string)

	// The opacity of the overlay. The value should be in the range between 0 to 1.0. Default to 1.0, which means the overlay is opaque.
	opacity?: null | float64 @go(Opacity,*float64)

	// A position block as defined above.
	position?: [...#PositionObservation] @go(Position,[]PositionObservation)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	start?: null | string @go(Start,*string)
}

#VideoParameters: {
	// The gain level of audio in the overlay. The value should be in range between 0 to 1.0. The default is 1.0.
	// +kubebuilder:validation:Optional
	audioGainLevel?: null | float64 @go(AudioGainLevel,*float64)

	// A crop_rectangle block as defined above.
	// +kubebuilder:validation:Optional
	cropRectangle?: [...#VideoCropRectangleParameters] @go(CropRectangle,[]VideoCropRectangleParameters)

	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	// +kubebuilder:validation:Optional
	end?: null | string @go(End,*string)

	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	// +kubebuilder:validation:Optional
	fadeInDuration?: null | string @go(FadeInDuration,*string)

	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	// +kubebuilder:validation:Optional
	fadeOutDuration?: null | string @go(FadeOutDuration,*string)

	// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
	// +kubebuilder:validation:Optional
	inputLabel?: null | string @go(InputLabel,*string)

	// The opacity of the overlay. The value should be in the range between 0 to 1.0. Default to 1.0, which means the overlay is opaque.
	// +kubebuilder:validation:Optional
	opacity?: null | float64 @go(Opacity,*float64)

	// A position block as defined above.
	// +kubebuilder:validation:Optional
	position?: [...#PositionParameters] @go(Position,[]PositionParameters)

	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	// +kubebuilder:validation:Optional
	start?: null | string @go(Start,*string)
}

// TransformSpec defines the desired state of Transform
#TransformSpec: {
	forProvider: #TransformParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TransformInitParameters @go(InitProvider)
}

// TransformStatus defines the observed state of Transform.
#TransformStatus: {
	atProvider?: #TransformObservation @go(AtProvider)
}

// Transform is the Schema for the Transforms API. Manages a Transform.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#Transform: {
	spec:    #TransformSpec   @go(Spec)
	status?: #TransformStatus @go(Status)
}

// TransformList contains a list of Transforms
#TransformList: {
	items: [...#Transform] @go(Items,[]Transform)
}
