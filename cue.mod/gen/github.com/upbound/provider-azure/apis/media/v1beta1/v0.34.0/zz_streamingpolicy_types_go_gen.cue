// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/media/v1beta1

package v1beta1

#ClearKeyEncryptionObservation: {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	customKeysAcquisitionUrlTemplate?: null | string @go(CustomKeysAcquisitionURLTemplate,*string)
}

#ClearKeyEncryptionParameters: {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Required
	customKeysAcquisitionUrlTemplate?: null | string @go(CustomKeysAcquisitionURLTemplate,*string)
}

#ClearTrackConditionObservation: {
	// The track property condition operation. Possible value is Equal. Changing this forces a new Streaming Policy to be created.
	operation?: null | string @go(Operation,*string)

	// The track property type. Possible value is FourCC. Changing this forces a new Streaming Policy to be created.
	property?: null | string @go(Property,*string)

	// The track property value. Changing this forces a new Streaming Policy to be created.
	value?: null | string @go(Value,*string)
}

#ClearTrackConditionParameters: {
	// The track property condition operation. Possible value is Equal. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Required
	operation?: null | string @go(Operation,*string)

	// The track property type. Possible value is FourCC. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Required
	property?: null | string @go(Property,*string)

	// The track property value. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#ClearTrackObservation: {
	// One or more condition blocks as defined below. Changing this forces a new Streaming Policy to be created.
	condition?: [...#ClearTrackConditionObservation] @go(Condition,[]ClearTrackConditionObservation)
}

#ClearTrackParameters: {
	// One or more condition blocks as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Required
	condition: [...#ClearTrackConditionParameters] @go(Condition,[]ClearTrackConditionParameters)
}

#CommonEncryptionCbcsObservation: {
	// A clear_key_encryption block as defined below. Changing this forces a new Streaming Policy to be created.
	clearKeyEncryption?: [...#ClearKeyEncryptionObservation] @go(ClearKeyEncryption,[]ClearKeyEncryptionObservation)

	// A default_content_key block as defined below. Changing this forces a new Streaming Policy to be created.
	defaultContentKey?: [...#DefaultContentKeyObservation] @go(DefaultContentKey,[]DefaultContentKeyObservation)

	// A drm_fairplay block as defined below. Changing this forces a new Streaming Policy to be created.
	drmFairplay?: [...#DrmFairplayObservation] @go(DrmFairplay,[]DrmFairplayObservation)

	// A enabled_protocols block as defined below. Changing this forces a new Streaming Policy to be created.
	enabledProtocols?: [...#EnabledProtocolsObservation] @go(EnabledProtocols,[]EnabledProtocolsObservation)
}

#CommonEncryptionCbcsParameters: {
	// A clear_key_encryption block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	clearKeyEncryption?: [...#ClearKeyEncryptionParameters] @go(ClearKeyEncryption,[]ClearKeyEncryptionParameters)

	// A default_content_key block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	defaultContentKey?: [...#DefaultContentKeyParameters] @go(DefaultContentKey,[]DefaultContentKeyParameters)

	// A drm_fairplay block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	drmFairplay?: [...#DrmFairplayParameters] @go(DrmFairplay,[]DrmFairplayParameters)

	// A enabled_protocols block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	enabledProtocols?: [...#EnabledProtocolsParameters] @go(EnabledProtocols,[]EnabledProtocolsParameters)
}

#CommonEncryptionCencClearKeyEncryptionObservation: {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	customKeysAcquisitionUrlTemplate?: null | string @go(CustomKeysAcquisitionURLTemplate,*string)
}

#CommonEncryptionCencClearKeyEncryptionParameters: {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Required
	customKeysAcquisitionUrlTemplate?: null | string @go(CustomKeysAcquisitionURLTemplate,*string)
}

#CommonEncryptionCencDefaultContentKeyObservation: {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	label?: null | string @go(Label,*string)

	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	policyName?: null | string @go(PolicyName,*string)
}

#CommonEncryptionCencDefaultContentKeyParameters: {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/media/v1beta1.ContentKeyPolicy
	// +kubebuilder:validation:Optional
	policyName?: null | string @go(PolicyName,*string)
}

#CommonEncryptionCencEnabledProtocolsObservation: {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	dash?: null | bool @go(Dash,*bool)

	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	download?: null | bool @go(Download,*bool)

	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	hls?: null | bool @go(Hls,*bool)

	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	smoothStreaming?: null | bool @go(SmoothStreaming,*bool)
}

#CommonEncryptionCencEnabledProtocolsParameters: {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	dash?: null | bool @go(Dash,*bool)

	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	download?: null | bool @go(Download,*bool)

	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	hls?: null | bool @go(Hls,*bool)

	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	smoothStreaming?: null | bool @go(SmoothStreaming,*bool)
}

#CommonEncryptionCencObservation: {
	// A clear_key_encryption block as defined below. Changing this forces a new Streaming Policy to be created.
	clearKeyEncryption?: [...#CommonEncryptionCencClearKeyEncryptionObservation] @go(ClearKeyEncryption,[]CommonEncryptionCencClearKeyEncryptionObservation)

	// One or more clear_track blocks as defined below. Changing this forces a new Streaming Policy to be created.
	clearTrack?: [...#ClearTrackObservation] @go(ClearTrack,[]ClearTrackObservation)

	// One or more content_key_to_track_mapping blocks as defined below. Changing this forces a new Streaming Policy to be created.
	contentKeyToTrackMapping?: [...#ContentKeyToTrackMappingObservation] @go(ContentKeyToTrackMapping,[]ContentKeyToTrackMappingObservation)

	// A default_content_key block as defined below. Changing this forces a new Streaming Policy to be created.
	defaultContentKey?: [...#CommonEncryptionCencDefaultContentKeyObservation] @go(DefaultContentKey,[]CommonEncryptionCencDefaultContentKeyObservation)

	// A drm_playready block as defined below. Changing this forces a new Streaming Policy to be created.
	drmPlayready?: [...#DrmPlayreadyObservation] @go(DrmPlayready,[]DrmPlayreadyObservation)

	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	drmWidevineCustomLicenseAcquisitionUrlTemplate?: null | string @go(DrmWidevineCustomLicenseAcquisitionURLTemplate,*string)

	// A enabled_protocols block as defined below. Changing this forces a new Streaming Policy to be created.
	enabledProtocols?: [...#CommonEncryptionCencEnabledProtocolsObservation] @go(EnabledProtocols,[]CommonEncryptionCencEnabledProtocolsObservation)
}

#CommonEncryptionCencParameters: {
	// A clear_key_encryption block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	clearKeyEncryption?: [...#CommonEncryptionCencClearKeyEncryptionParameters] @go(ClearKeyEncryption,[]CommonEncryptionCencClearKeyEncryptionParameters)

	// One or more clear_track blocks as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	clearTrack?: [...#ClearTrackParameters] @go(ClearTrack,[]ClearTrackParameters)

	// One or more content_key_to_track_mapping blocks as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	contentKeyToTrackMapping?: [...#ContentKeyToTrackMappingParameters] @go(ContentKeyToTrackMapping,[]ContentKeyToTrackMappingParameters)

	// A default_content_key block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	defaultContentKey?: [...#CommonEncryptionCencDefaultContentKeyParameters] @go(DefaultContentKey,[]CommonEncryptionCencDefaultContentKeyParameters)

	// A drm_playready block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	drmPlayready?: [...#DrmPlayreadyParameters] @go(DrmPlayready,[]DrmPlayreadyParameters)

	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	drmWidevineCustomLicenseAcquisitionUrlTemplate?: null | string @go(DrmWidevineCustomLicenseAcquisitionURLTemplate,*string)

	// A enabled_protocols block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	enabledProtocols?: [...#CommonEncryptionCencEnabledProtocolsParameters] @go(EnabledProtocols,[]CommonEncryptionCencEnabledProtocolsParameters)
}

#ContentKeyToTrackMappingObservation: {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	label?: null | string @go(Label,*string)

	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	policyName?: null | string @go(PolicyName,*string)

	// One or more track blocks as defined below. Changing this forces a new Streaming Policy to be created.
	track?: [...#TrackObservation] @go(Track,[]TrackObservation)
}

#ContentKeyToTrackMappingParameters: {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	policyName?: null | string @go(PolicyName,*string)

	// One or more track blocks as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Required
	track: [...#TrackParameters] @go(Track,[]TrackParameters)
}

#DefaultContentKeyObservation: {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	label?: null | string @go(Label,*string)

	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	policyName?: null | string @go(PolicyName,*string)
}

#DefaultContentKeyParameters: {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	policyName?: null | string @go(PolicyName,*string)
}

#DrmFairplayObservation: {
	// All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
	allowPersistentLicense?: null | bool @go(AllowPersistentLicense,*bool)

	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	customLicenseAcquisitionUrlTemplate?: null | string @go(CustomLicenseAcquisitionURLTemplate,*string)
}

#DrmFairplayParameters: {
	// All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	allowPersistentLicense?: null | bool @go(AllowPersistentLicense,*bool)

	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	customLicenseAcquisitionUrlTemplate?: null | string @go(CustomLicenseAcquisitionURLTemplate,*string)
}

#DrmPlayreadyObservation: {
	// Custom attributes for PlayReady. Changing this forces a new Streaming Policy to be created.
	customAttributes?: null | string @go(CustomAttributes,*string)

	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	customLicenseAcquisitionUrlTemplate?: null | string @go(CustomLicenseAcquisitionURLTemplate,*string)
}

#DrmPlayreadyParameters: {
	// Custom attributes for PlayReady. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	customAttributes?: null | string @go(CustomAttributes,*string)

	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	customLicenseAcquisitionUrlTemplate?: null | string @go(CustomLicenseAcquisitionURLTemplate,*string)
}

#EnabledProtocolsObservation: {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	dash?: null | bool @go(Dash,*bool)

	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	download?: null | bool @go(Download,*bool)

	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	hls?: null | bool @go(Hls,*bool)

	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	smoothStreaming?: null | bool @go(SmoothStreaming,*bool)
}

#EnabledProtocolsParameters: {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	dash?: null | bool @go(Dash,*bool)

	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	download?: null | bool @go(Download,*bool)

	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	hls?: null | bool @go(Hls,*bool)

	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	smoothStreaming?: null | bool @go(SmoothStreaming,*bool)
}

#EnvelopeEncryptionDefaultContentKeyObservation: {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	label?: null | string @go(Label,*string)

	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	policyName?: null | string @go(PolicyName,*string)
}

#EnvelopeEncryptionDefaultContentKeyParameters: {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	policyName?: null | string @go(PolicyName,*string)
}

#EnvelopeEncryptionEnabledProtocolsObservation: {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	dash?: null | bool @go(Dash,*bool)

	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	download?: null | bool @go(Download,*bool)

	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	hls?: null | bool @go(Hls,*bool)

	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	smoothStreaming?: null | bool @go(SmoothStreaming,*bool)
}

#EnvelopeEncryptionEnabledProtocolsParameters: {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	dash?: null | bool @go(Dash,*bool)

	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	download?: null | bool @go(Download,*bool)

	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	hls?: null | bool @go(Hls,*bool)

	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	smoothStreaming?: null | bool @go(SmoothStreaming,*bool)
}

#EnvelopeEncryptionObservation: {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	customKeysAcquisitionUrlTemplate?: null | string @go(CustomKeysAcquisitionURLTemplate,*string)

	// A default_content_key block as defined above. Changing this forces a new Streaming Policy to be created.
	defaultContentKey?: [...#EnvelopeEncryptionDefaultContentKeyObservation] @go(DefaultContentKey,[]EnvelopeEncryptionDefaultContentKeyObservation)

	// A enabled_protocols block as defined above. Changing this forces a new Streaming Policy to be created.
	enabledProtocols?: [...#EnvelopeEncryptionEnabledProtocolsObservation] @go(EnabledProtocols,[]EnvelopeEncryptionEnabledProtocolsObservation)
}

#EnvelopeEncryptionParameters: {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	customKeysAcquisitionUrlTemplate?: null | string @go(CustomKeysAcquisitionURLTemplate,*string)

	// A default_content_key block as defined above. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	defaultContentKey?: [...#EnvelopeEncryptionDefaultContentKeyParameters] @go(DefaultContentKey,[]EnvelopeEncryptionDefaultContentKeyParameters)

	// A enabled_protocols block as defined above. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	enabledProtocols?: [...#EnvelopeEncryptionEnabledProtocolsParameters] @go(EnabledProtocols,[]EnvelopeEncryptionEnabledProtocolsParameters)
}

#NoEncryptionEnabledProtocolsObservation: {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	dash?: null | bool @go(Dash,*bool)

	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	download?: null | bool @go(Download,*bool)

	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	hls?: null | bool @go(Hls,*bool)

	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	smoothStreaming?: null | bool @go(SmoothStreaming,*bool)
}

#NoEncryptionEnabledProtocolsParameters: {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	dash?: null | bool @go(Dash,*bool)

	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	download?: null | bool @go(Download,*bool)

	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	hls?: null | bool @go(Hls,*bool)

	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	smoothStreaming?: null | bool @go(SmoothStreaming,*bool)
}

#StreamingPolicyObservation: {
	// A common_encryption_cbcs block as defined below. Changing this forces a new Streaming Policy to be created.
	commonEncryptionCbcs?: [...#CommonEncryptionCbcsObservation] @go(CommonEncryptionCbcs,[]CommonEncryptionCbcsObservation)

	// A common_encryption_cenc block as defined below. Changing this forces a new Streaming Policy to be created.
	commonEncryptionCenc?: [...#CommonEncryptionCencObservation] @go(CommonEncryptionCenc,[]CommonEncryptionCencObservation)

	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	defaultContentKeyPolicyName?: null | string @go(DefaultContentKeyPolicyName,*string)

	// A envelope_encryption block as defined below. Changing this forces a new Streaming Policy to be created.
	envelopeEncryption?: [...#EnvelopeEncryptionObservation] @go(EnvelopeEncryption,[]EnvelopeEncryptionObservation)

	// The ID of the Streaming Policy.
	id?: null | string @go(ID,*string)

	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	mediaServicesAccountName?: null | string @go(MediaServicesAccountName,*string)

	// A no_encryption_enabled_protocols block as defined below. Changing this forces a new Streaming Policy to be created.
	noEncryptionEnabledProtocols?: [...#NoEncryptionEnabledProtocolsObservation] @go(NoEncryptionEnabledProtocols,[]NoEncryptionEnabledProtocolsObservation)

	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

#StreamingPolicyParameters: {
	// A common_encryption_cbcs block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	commonEncryptionCbcs?: [...#CommonEncryptionCbcsParameters] @go(CommonEncryptionCbcs,[]CommonEncryptionCbcsParameters)

	// A common_encryption_cenc block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	commonEncryptionCenc?: [...#CommonEncryptionCencParameters] @go(CommonEncryptionCenc,[]CommonEncryptionCencParameters)

	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	defaultContentKeyPolicyName?: null | string @go(DefaultContentKeyPolicyName,*string)

	// A envelope_encryption block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	envelopeEncryption?: [...#EnvelopeEncryptionParameters] @go(EnvelopeEncryption,[]EnvelopeEncryptionParameters)

	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	// +crossplane:generate:reference:type=ServicesAccount
	// +kubebuilder:validation:Optional
	mediaServicesAccountName?: null | string @go(MediaServicesAccountName,*string)

	// A no_encryption_enabled_protocols block as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Optional
	noEncryptionEnabledProtocols?: [...#NoEncryptionEnabledProtocolsParameters] @go(NoEncryptionEnabledProtocols,[]NoEncryptionEnabledProtocolsParameters)

	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

#TrackConditionObservation: {
	// The track property condition operation. Possible value is Equal. Changing this forces a new Streaming Policy to be created.
	operation?: null | string @go(Operation,*string)

	// The track property type. Possible value is FourCC. Changing this forces a new Streaming Policy to be created.
	property?: null | string @go(Property,*string)

	// The track property value. Changing this forces a new Streaming Policy to be created.
	value?: null | string @go(Value,*string)
}

#TrackConditionParameters: {
	// The track property condition operation. Possible value is Equal. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Required
	operation?: null | string @go(Operation,*string)

	// The track property type. Possible value is FourCC. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Required
	property?: null | string @go(Property,*string)

	// The track property value. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#TrackObservation: {
	// One or more condition blocks as defined below. Changing this forces a new Streaming Policy to be created.
	condition?: [...#TrackConditionObservation] @go(Condition,[]TrackConditionObservation)
}

#TrackParameters: {
	// One or more condition blocks as defined below. Changing this forces a new Streaming Policy to be created.
	// +kubebuilder:validation:Required
	condition: [...#TrackConditionParameters] @go(Condition,[]TrackConditionParameters)
}

// StreamingPolicySpec defines the desired state of StreamingPolicy
#StreamingPolicySpec: {
	forProvider: #StreamingPolicyParameters @go(ForProvider)
}

// StreamingPolicyStatus defines the observed state of StreamingPolicy.
#StreamingPolicyStatus: {
	atProvider?: #StreamingPolicyObservation @go(AtProvider)
}

// StreamingPolicy is the Schema for the StreamingPolicys API. Manages a Streaming Policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#StreamingPolicy: {
	spec:    #StreamingPolicySpec   @go(Spec)
	status?: #StreamingPolicyStatus @go(Status)
}

// StreamingPolicyList contains a list of StreamingPolicys
#StreamingPolicyList: {
	items: [...#StreamingPolicy] @go(Items,[]StreamingPolicy)
}
