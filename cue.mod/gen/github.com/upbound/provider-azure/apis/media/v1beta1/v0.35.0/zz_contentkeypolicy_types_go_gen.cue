// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/media/v1beta1

package v1beta1

#AlternateKeyInitParameters: {
}

#AlternateKeyObservation: {
}

#ContentKeyPolicyInitParameters: {
	// A description for the Policy.
	description?: null | string @go(Description,*string)

	// One or more policy_option blocks as defined below.
	policyOption?: [...#PolicyOptionInitParameters] @go(PolicyOption,[]PolicyOptionInitParameters)
}

#ContentKeyPolicyObservation: {
	// A description for the Policy.
	description?: null | string @go(Description,*string)

	// The ID of the Content Key Policy.
	id?: null | string @go(ID,*string)

	// The Media Services account name. Changing this forces a new Content Key Policy to be created.
	mediaServicesAccountName?: null | string @go(MediaServicesAccountName,*string)

	// One or more policy_option blocks as defined below.
	policyOption?: [...#PolicyOptionObservation] @go(PolicyOption,[]PolicyOptionObservation)

	// The name of the Resource Group where the Content Key Policy should exist. Changing this forces a new Content Key Policy to be created.
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

#ContentKeyPolicyParameters: {
	// A description for the Policy.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The Media Services account name. Changing this forces a new Content Key Policy to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/media/v1beta1.ServicesAccount
	// +kubebuilder:validation:Optional
	mediaServicesAccountName?: null | string @go(MediaServicesAccountName,*string)

	// One or more policy_option blocks as defined below.
	// +kubebuilder:validation:Optional
	policyOption?: [...#PolicyOptionParameters] @go(PolicyOption,[]PolicyOptionParameters)

	// The name of the Resource Group where the Content Key Policy should exist. Changing this forces a new Content Key Policy to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	resourceGroupName?: null | string @go(ResourceGroupName,*string)
}

#ExplicitAnalogTelevisionOutputRestrictionInitParameters: {
	// Indicates whether this restriction is enforced on a best effort basis. Possible values are true or false. Defaults to false.
	bestEffortEnforced?: null | bool @go(BestEffortEnforced,*bool)

	// The restriction control bits. Possible value is integer between 0 and 3 inclusive.
	controlBits?: null | float64 @go(ControlBits,*float64)
}

#ExplicitAnalogTelevisionOutputRestrictionObservation: {
	// Indicates whether this restriction is enforced on a best effort basis. Possible values are true or false. Defaults to false.
	bestEffortEnforced?: null | bool @go(BestEffortEnforced,*bool)

	// The restriction control bits. Possible value is integer between 0 and 3 inclusive.
	controlBits?: null | float64 @go(ControlBits,*float64)
}

#ExplicitAnalogTelevisionOutputRestrictionParameters: {
	// Indicates whether this restriction is enforced on a best effort basis. Possible values are true or false. Defaults to false.
	// +kubebuilder:validation:Optional
	bestEffortEnforced?: null | bool @go(BestEffortEnforced,*bool)

	// The restriction control bits. Possible value is integer between 0 and 3 inclusive.
	// +kubebuilder:validation:Optional
	controlBits?: null | float64 @go(ControlBits,*float64)
}

#FairplayConfigurationInitParameters: {
	// A offline_rental_configuration block as defined below.
	offlineRentalConfiguration?: [...#OfflineRentalConfigurationInitParameters] @go(OfflineRentalConfiguration,[]OfflineRentalConfigurationInitParameters)

	// The rental and lease key type. Supported values are DualExpiry, PersistentLimited, PersistentUnlimited or Undefined.
	rentalAndLeaseKeyType?: null | string @go(RentalAndLeaseKeyType,*string)

	// The rental duration. Must be greater than 0.
	rentalDurationSeconds?: null | float64 @go(RentalDurationSeconds,*float64)
}

#FairplayConfigurationObservation: {
	// A offline_rental_configuration block as defined below.
	offlineRentalConfiguration?: [...#OfflineRentalConfigurationObservation] @go(OfflineRentalConfiguration,[]OfflineRentalConfigurationObservation)

	// The rental and lease key type. Supported values are DualExpiry, PersistentLimited, PersistentUnlimited or Undefined.
	rentalAndLeaseKeyType?: null | string @go(RentalAndLeaseKeyType,*string)

	// The rental duration. Must be greater than 0.
	rentalDurationSeconds?: null | float64 @go(RentalDurationSeconds,*float64)
}

#FairplayConfigurationParameters: {
	// A offline_rental_configuration block as defined below.
	// +kubebuilder:validation:Optional
	offlineRentalConfiguration?: [...#OfflineRentalConfigurationParameters] @go(OfflineRentalConfiguration,[]OfflineRentalConfigurationParameters)

	// The rental and lease key type. Supported values are DualExpiry, PersistentLimited, PersistentUnlimited or Undefined.
	// +kubebuilder:validation:Optional
	rentalAndLeaseKeyType?: null | string @go(RentalAndLeaseKeyType,*string)

	// The rental duration. Must be greater than 0.
	// +kubebuilder:validation:Optional
	rentalDurationSeconds?: null | float64 @go(RentalDurationSeconds,*float64)
}

#OfflineRentalConfigurationInitParameters: {
	// Playback duration.
	playbackDurationSeconds?: null | float64 @go(PlaybackDurationSeconds,*float64)

	// Storage duration.
	storageDurationSeconds?: null | float64 @go(StorageDurationSeconds,*float64)
}

#OfflineRentalConfigurationObservation: {
	// Playback duration.
	playbackDurationSeconds?: null | float64 @go(PlaybackDurationSeconds,*float64)

	// Storage duration.
	storageDurationSeconds?: null | float64 @go(StorageDurationSeconds,*float64)
}

#OfflineRentalConfigurationParameters: {
	// Playback duration.
	// +kubebuilder:validation:Optional
	playbackDurationSeconds?: null | float64 @go(PlaybackDurationSeconds,*float64)

	// Storage duration.
	// +kubebuilder:validation:Optional
	storageDurationSeconds?: null | float64 @go(StorageDurationSeconds,*float64)
}

#PlayRightInitParameters: {
	// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
	agcAndColorStripeRestriction?: null | float64 @go(AgcAndColorStripeRestriction,*float64)

	// Configures Unknown output handling settings of the license. Supported values are Allowed, AllowedWithVideoConstriction or NotAllowed.
	allowPassingVideoContentToUnknownOutput?: null | string @go(AllowPassingVideoContentToUnknownOutput,*string)

	// Specifies the output protection level for compressed digital audio. Supported values are 100, 150 or 200.
	analogVideoOpl?: null | float64 @go(AnalogVideoOpl,*float64)

	// Specifies the output protection level for compressed digital audio.Supported values are 100, 150, 200, 250 or 300.
	compressedDigitalAudioOpl?: null | float64 @go(CompressedDigitalAudioOpl,*float64)

	// Specifies the output protection level for compressed digital video. Supported values are 400 or 500.
	compressedDigitalVideoOpl?: null | float64 @go(CompressedDigitalVideoOpl,*float64)

	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	digitalVideoOnlyContentRestriction?: null | bool @go(DigitalVideoOnlyContentRestriction,*bool)

	// An explicit_analog_television_output_restriction block as defined above.
	explicitAnalogTelevisionOutputRestriction?: [...#ExplicitAnalogTelevisionOutputRestrictionInitParameters] @go(ExplicitAnalogTelevisionOutputRestriction,[]ExplicitAnalogTelevisionOutputRestrictionInitParameters)

	// The amount of time that the license is valid after the license is first used to play content.
	firstPlayExpiration?: null | string @go(FirstPlayExpiration,*string)

	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	imageConstraintForAnalogComponentVideoRestriction?: null | bool @go(ImageConstraintForAnalogComponentVideoRestriction,*bool)

	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	imageConstraintForAnalogComputerMonitorRestriction?: null | bool @go(ImageConstraintForAnalogComputerMonitorRestriction,*bool)

	// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
	scmsRestriction?: null | float64 @go(ScmsRestriction,*float64)

	// Specifies the output protection level for uncompressed digital audio. Supported values are 100, 150, 200, 250 or 300.
	uncompressedDigitalAudioOpl?: null | float64 @go(UncompressedDigitalAudioOpl,*float64)

	// Specifies the output protection level for uncompressed digital video. Supported values are 100, 250, 270 or 300.
	uncompressedDigitalVideoOpl?: null | float64 @go(UncompressedDigitalVideoOpl,*float64)
}

#PlayRightObservation: {
	// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
	agcAndColorStripeRestriction?: null | float64 @go(AgcAndColorStripeRestriction,*float64)

	// Configures Unknown output handling settings of the license. Supported values are Allowed, AllowedWithVideoConstriction or NotAllowed.
	allowPassingVideoContentToUnknownOutput?: null | string @go(AllowPassingVideoContentToUnknownOutput,*string)

	// Specifies the output protection level for compressed digital audio. Supported values are 100, 150 or 200.
	analogVideoOpl?: null | float64 @go(AnalogVideoOpl,*float64)

	// Specifies the output protection level for compressed digital audio.Supported values are 100, 150, 200, 250 or 300.
	compressedDigitalAudioOpl?: null | float64 @go(CompressedDigitalAudioOpl,*float64)

	// Specifies the output protection level for compressed digital video. Supported values are 400 or 500.
	compressedDigitalVideoOpl?: null | float64 @go(CompressedDigitalVideoOpl,*float64)

	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	digitalVideoOnlyContentRestriction?: null | bool @go(DigitalVideoOnlyContentRestriction,*bool)

	// An explicit_analog_television_output_restriction block as defined above.
	explicitAnalogTelevisionOutputRestriction?: [...#ExplicitAnalogTelevisionOutputRestrictionObservation] @go(ExplicitAnalogTelevisionOutputRestriction,[]ExplicitAnalogTelevisionOutputRestrictionObservation)

	// The amount of time that the license is valid after the license is first used to play content.
	firstPlayExpiration?: null | string @go(FirstPlayExpiration,*string)

	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	imageConstraintForAnalogComponentVideoRestriction?: null | bool @go(ImageConstraintForAnalogComponentVideoRestriction,*bool)

	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	imageConstraintForAnalogComputerMonitorRestriction?: null | bool @go(ImageConstraintForAnalogComputerMonitorRestriction,*bool)

	// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
	scmsRestriction?: null | float64 @go(ScmsRestriction,*float64)

	// Specifies the output protection level for uncompressed digital audio. Supported values are 100, 150, 200, 250 or 300.
	uncompressedDigitalAudioOpl?: null | float64 @go(UncompressedDigitalAudioOpl,*float64)

	// Specifies the output protection level for uncompressed digital video. Supported values are 100, 250, 270 or 300.
	uncompressedDigitalVideoOpl?: null | float64 @go(UncompressedDigitalVideoOpl,*float64)
}

#PlayRightParameters: {
	// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
	// +kubebuilder:validation:Optional
	agcAndColorStripeRestriction?: null | float64 @go(AgcAndColorStripeRestriction,*float64)

	// Configures Unknown output handling settings of the license. Supported values are Allowed, AllowedWithVideoConstriction or NotAllowed.
	// +kubebuilder:validation:Optional
	allowPassingVideoContentToUnknownOutput?: null | string @go(AllowPassingVideoContentToUnknownOutput,*string)

	// Specifies the output protection level for compressed digital audio. Supported values are 100, 150 or 200.
	// +kubebuilder:validation:Optional
	analogVideoOpl?: null | float64 @go(AnalogVideoOpl,*float64)

	// Specifies the output protection level for compressed digital audio.Supported values are 100, 150, 200, 250 or 300.
	// +kubebuilder:validation:Optional
	compressedDigitalAudioOpl?: null | float64 @go(CompressedDigitalAudioOpl,*float64)

	// Specifies the output protection level for compressed digital video. Supported values are 400 or 500.
	// +kubebuilder:validation:Optional
	compressedDigitalVideoOpl?: null | float64 @go(CompressedDigitalVideoOpl,*float64)

	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	// +kubebuilder:validation:Optional
	digitalVideoOnlyContentRestriction?: null | bool @go(DigitalVideoOnlyContentRestriction,*bool)

	// An explicit_analog_television_output_restriction block as defined above.
	// +kubebuilder:validation:Optional
	explicitAnalogTelevisionOutputRestriction?: [...#ExplicitAnalogTelevisionOutputRestrictionParameters] @go(ExplicitAnalogTelevisionOutputRestriction,[]ExplicitAnalogTelevisionOutputRestrictionParameters)

	// The amount of time that the license is valid after the license is first used to play content.
	// +kubebuilder:validation:Optional
	firstPlayExpiration?: null | string @go(FirstPlayExpiration,*string)

	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	// +kubebuilder:validation:Optional
	imageConstraintForAnalogComponentVideoRestriction?: null | bool @go(ImageConstraintForAnalogComponentVideoRestriction,*bool)

	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	// +kubebuilder:validation:Optional
	imageConstraintForAnalogComputerMonitorRestriction?: null | bool @go(ImageConstraintForAnalogComputerMonitorRestriction,*bool)

	// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
	// +kubebuilder:validation:Optional
	scmsRestriction?: null | float64 @go(ScmsRestriction,*float64)

	// Specifies the output protection level for uncompressed digital audio. Supported values are 100, 150, 200, 250 or 300.
	// +kubebuilder:validation:Optional
	uncompressedDigitalAudioOpl?: null | float64 @go(UncompressedDigitalAudioOpl,*float64)

	// Specifies the output protection level for uncompressed digital video. Supported values are 100, 250, 270 or 300.
	// +kubebuilder:validation:Optional
	uncompressedDigitalVideoOpl?: null | float64 @go(UncompressedDigitalVideoOpl,*float64)
}

#PlayreadyConfigurationLicenseInitParameters: {
	// A flag indicating whether test devices can use the license.
	allowTestDevices?: null | bool @go(AllowTestDevices,*bool)

	// The begin date of license.
	beginDate?: null | string @go(BeginDate,*string)

	// Specifies that the content key ID is in the PlayReady header.
	contentKeyLocationFromHeaderEnabled?: null | bool @go(ContentKeyLocationFromHeaderEnabled,*bool)

	// The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
	contentKeyLocationFromKeyId?: null | string @go(ContentKeyLocationFromKeyID,*string)

	// The PlayReady content type. Supported values are UltraVioletDownload, UltraVioletStreaming or Unspecified.
	contentType?: null | string @go(ContentType,*string)

	// The expiration date of license.
	expirationDate?: null | string @go(ExpirationDate,*string)

	// The license type. Supported values are NonPersistent or Persistent.
	licenseType?: null | string @go(LicenseType,*string)

	// A play_right block as defined above.
	playRight?: [...#PlayRightInitParameters] @go(PlayRight,[]PlayRightInitParameters)

	// The relative begin date of license.
	relativeBeginDate?: null | string @go(RelativeBeginDate,*string)

	// The relative expiration date of license.
	relativeExpirationDate?: null | string @go(RelativeExpirationDate,*string)

	// The security level of the PlayReady license. Possible values are SL150, SL2000 and SL3000. Please see this document for more information about security level. See this document for more information about SL3000 support.
	securityLevel?: null | string @go(SecurityLevel,*string)
}

#PlayreadyConfigurationLicenseObservation: {
	// A flag indicating whether test devices can use the license.
	allowTestDevices?: null | bool @go(AllowTestDevices,*bool)

	// The begin date of license.
	beginDate?: null | string @go(BeginDate,*string)

	// Specifies that the content key ID is in the PlayReady header.
	contentKeyLocationFromHeaderEnabled?: null | bool @go(ContentKeyLocationFromHeaderEnabled,*bool)

	// The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
	contentKeyLocationFromKeyId?: null | string @go(ContentKeyLocationFromKeyID,*string)

	// The PlayReady content type. Supported values are UltraVioletDownload, UltraVioletStreaming or Unspecified.
	contentType?: null | string @go(ContentType,*string)

	// The expiration date of license.
	expirationDate?: null | string @go(ExpirationDate,*string)

	// The license type. Supported values are NonPersistent or Persistent.
	licenseType?: null | string @go(LicenseType,*string)

	// A play_right block as defined above.
	playRight?: [...#PlayRightObservation] @go(PlayRight,[]PlayRightObservation)

	// The relative begin date of license.
	relativeBeginDate?: null | string @go(RelativeBeginDate,*string)

	// The relative expiration date of license.
	relativeExpirationDate?: null | string @go(RelativeExpirationDate,*string)

	// The security level of the PlayReady license. Possible values are SL150, SL2000 and SL3000. Please see this document for more information about security level. See this document for more information about SL3000 support.
	securityLevel?: null | string @go(SecurityLevel,*string)
}

#PlayreadyConfigurationLicenseParameters: {
	// A flag indicating whether test devices can use the license.
	// +kubebuilder:validation:Optional
	allowTestDevices?: null | bool @go(AllowTestDevices,*bool)

	// The begin date of license.
	// +kubebuilder:validation:Optional
	beginDate?: null | string @go(BeginDate,*string)

	// Specifies that the content key ID is in the PlayReady header.
	// +kubebuilder:validation:Optional
	contentKeyLocationFromHeaderEnabled?: null | bool @go(ContentKeyLocationFromHeaderEnabled,*bool)

	// The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
	// +kubebuilder:validation:Optional
	contentKeyLocationFromKeyId?: null | string @go(ContentKeyLocationFromKeyID,*string)

	// The PlayReady content type. Supported values are UltraVioletDownload, UltraVioletStreaming or Unspecified.
	// +kubebuilder:validation:Optional
	contentType?: null | string @go(ContentType,*string)

	// The expiration date of license.
	// +kubebuilder:validation:Optional
	expirationDate?: null | string @go(ExpirationDate,*string)

	// The license type. Supported values are NonPersistent or Persistent.
	// +kubebuilder:validation:Optional
	licenseType?: null | string @go(LicenseType,*string)

	// A play_right block as defined above.
	// +kubebuilder:validation:Optional
	playRight?: [...#PlayRightParameters] @go(PlayRight,[]PlayRightParameters)

	// The relative begin date of license.
	// +kubebuilder:validation:Optional
	relativeBeginDate?: null | string @go(RelativeBeginDate,*string)

	// The relative expiration date of license.
	// +kubebuilder:validation:Optional
	relativeExpirationDate?: null | string @go(RelativeExpirationDate,*string)

	// The security level of the PlayReady license. Possible values are SL150, SL2000 and SL3000. Please see this document for more information about security level. See this document for more information about SL3000 support.
	// +kubebuilder:validation:Optional
	securityLevel?: null | string @go(SecurityLevel,*string)
}

#PolicyOptionInitParameters: {
	// Enable a configuration for non-DRM keys.
	clearKeyConfigurationEnabled?: null | bool @go(ClearKeyConfigurationEnabled,*bool)

	// A fairplay_configuration block as defined above. Check license requirements here https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview.
	fairplayConfiguration?: [...#FairplayConfigurationInitParameters] @go(FairplayConfiguration,[]FairplayConfigurationInitParameters)

	// The name which should be used for this Policy Option.
	name?: null | string @go(Name,*string)

	// Enable an open restriction. License or key will be delivered on every request.
	openRestrictionEnabled?: null | bool @go(OpenRestrictionEnabled,*bool)

	// One or more playready_configuration_license blocks as defined above.
	playreadyConfigurationLicense?: [...#PlayreadyConfigurationLicenseInitParameters] @go(PlayreadyConfigurationLicense,[]PlayreadyConfigurationLicenseInitParameters)

	// The custom response data of the PlayReady configuration. This only applies when playready_configuration_license is specified.
	playreadyResponseCustomData?: null | string @go(PlayreadyResponseCustomData,*string)

	// A token_restriction block as defined below.
	tokenRestriction?: [...#TokenRestrictionInitParameters] @go(TokenRestriction,[]TokenRestrictionInitParameters)

	// The Widevine template.
	widevineConfigurationTemplate?: null | string @go(WidevineConfigurationTemplate,*string)
}

#PolicyOptionObservation: {
	// Enable a configuration for non-DRM keys.
	clearKeyConfigurationEnabled?: null | bool @go(ClearKeyConfigurationEnabled,*bool)

	// A fairplay_configuration block as defined above. Check license requirements here https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview.
	fairplayConfiguration?: [...#FairplayConfigurationObservation] @go(FairplayConfiguration,[]FairplayConfigurationObservation)

	// The name which should be used for this Policy Option.
	name?: null | string @go(Name,*string)

	// Enable an open restriction. License or key will be delivered on every request.
	openRestrictionEnabled?: null | bool @go(OpenRestrictionEnabled,*bool)

	// One or more playready_configuration_license blocks as defined above.
	playreadyConfigurationLicense?: [...#PlayreadyConfigurationLicenseObservation] @go(PlayreadyConfigurationLicense,[]PlayreadyConfigurationLicenseObservation)

	// The custom response data of the PlayReady configuration. This only applies when playready_configuration_license is specified.
	playreadyResponseCustomData?: null | string @go(PlayreadyResponseCustomData,*string)

	// A token_restriction block as defined below.
	tokenRestriction?: [...#TokenRestrictionObservation] @go(TokenRestriction,[]TokenRestrictionObservation)

	// The Widevine template.
	widevineConfigurationTemplate?: null | string @go(WidevineConfigurationTemplate,*string)
}

#PolicyOptionParameters: {
	// Enable a configuration for non-DRM keys.
	// +kubebuilder:validation:Optional
	clearKeyConfigurationEnabled?: null | bool @go(ClearKeyConfigurationEnabled,*bool)

	// A fairplay_configuration block as defined above. Check license requirements here https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview.
	// +kubebuilder:validation:Optional
	fairplayConfiguration?: [...#FairplayConfigurationParameters] @go(FairplayConfiguration,[]FairplayConfigurationParameters)

	// The name which should be used for this Policy Option.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Enable an open restriction. License or key will be delivered on every request.
	// +kubebuilder:validation:Optional
	openRestrictionEnabled?: null | bool @go(OpenRestrictionEnabled,*bool)

	// One or more playready_configuration_license blocks as defined above.
	// +kubebuilder:validation:Optional
	playreadyConfigurationLicense?: [...#PlayreadyConfigurationLicenseParameters] @go(PlayreadyConfigurationLicense,[]PlayreadyConfigurationLicenseParameters)

	// The custom response data of the PlayReady configuration. This only applies when playready_configuration_license is specified.
	// +kubebuilder:validation:Optional
	playreadyResponseCustomData?: null | string @go(PlayreadyResponseCustomData,*string)

	// A token_restriction block as defined below.
	// +kubebuilder:validation:Optional
	tokenRestriction?: [...#TokenRestrictionParameters] @go(TokenRestriction,[]TokenRestrictionParameters)

	// The Widevine template.
	// +kubebuilder:validation:Optional
	widevineConfigurationTemplate?: null | string @go(WidevineConfigurationTemplate,*string)
}

#RequiredClaimInitParameters: {
	// Token claim type.
	type?: null | string @go(Type,*string)

	// Token claim value.
	value?: null | string @go(Value,*string)
}

#RequiredClaimObservation: {
	// Token claim type.
	type?: null | string @go(Type,*string)

	// Token claim value.
	value?: null | string @go(Value,*string)
}

#RequiredClaimParameters: {
	// Token claim type.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// Token claim value.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#TokenRestrictionInitParameters: {
	// One or more alternate_key block as defined above.
	alternateKey?: [...#AlternateKeyInitParameters] @go(AlternateKey,[]AlternateKeyInitParameters)

	// The audience for the token.
	audience?: null | string @go(Audience,*string)

	// The token issuer.
	issuer?: null | string @go(Issuer,*string)

	// The OpenID connect discovery document.
	openIdConnectDiscoveryDocument?: null | string @go(OpenIDConnectDiscoveryDocument,*string)

	// One or more required_claim blocks as defined above.
	requiredClaim?: [...#RequiredClaimInitParameters] @go(RequiredClaim,[]RequiredClaimInitParameters)

	// The type of token. Supported values are Jwt or Swt.
	tokenType?: null | string @go(TokenType,*string)
}

#TokenRestrictionObservation: {
	// The audience for the token.
	audience?: null | string @go(Audience,*string)

	// The token issuer.
	issuer?: null | string @go(Issuer,*string)

	// The OpenID connect discovery document.
	openIdConnectDiscoveryDocument?: null | string @go(OpenIDConnectDiscoveryDocument,*string)

	// One or more required_claim blocks as defined above.
	requiredClaim?: [...#RequiredClaimObservation] @go(RequiredClaim,[]RequiredClaimObservation)

	// The type of token. Supported values are Jwt or Swt.
	tokenType?: null | string @go(TokenType,*string)
}

#TokenRestrictionParameters: {
	// The audience for the token.
	// +kubebuilder:validation:Optional
	audience?: null | string @go(Audience,*string)

	// The token issuer.
	// +kubebuilder:validation:Optional
	issuer?: null | string @go(Issuer,*string)

	// The OpenID connect discovery document.
	// +kubebuilder:validation:Optional
	openIdConnectDiscoveryDocument?: null | string @go(OpenIDConnectDiscoveryDocument,*string)

	// One or more required_claim blocks as defined above.
	// +kubebuilder:validation:Optional
	requiredClaim?: [...#RequiredClaimParameters] @go(RequiredClaim,[]RequiredClaimParameters)

	// The type of token. Supported values are Jwt or Swt.
	// +kubebuilder:validation:Optional
	tokenType?: null | string @go(TokenType,*string)
}

// ContentKeyPolicySpec defines the desired state of ContentKeyPolicy
#ContentKeyPolicySpec: {
	forProvider: #ContentKeyPolicyParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ContentKeyPolicyInitParameters @go(InitProvider)
}

// ContentKeyPolicyStatus defines the observed state of ContentKeyPolicy.
#ContentKeyPolicyStatus: {
	atProvider?: #ContentKeyPolicyObservation @go(AtProvider)
}

// ContentKeyPolicy is the Schema for the ContentKeyPolicys API. Manages a Content Key Policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#ContentKeyPolicy: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyOption) || has(self.initProvider.policyOption)",message="policyOption is a required parameter"
	spec:    #ContentKeyPolicySpec   @go(Spec)
	status?: #ContentKeyPolicyStatus @go(Status)
}

// ContentKeyPolicyList contains a list of ContentKeyPolicys
#ContentKeyPolicyList: {
	items: [...#ContentKeyPolicy] @go(Items,[]ContentKeyPolicy)
}
