// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/v1beta1

package v1beta1

// A ProviderConfigSpec defines the desired state of a ProviderConfig.
#ProviderConfigSpec: {
	// ClientID is the user-assigned managed identity's ID
	// when Credentials.Source is `InjectedIdentity`. If unset and
	// Credentials.Source is `InjectedIdentity`, then a system-assigned
	// managed identity is used.
	// +optional
	clientID?: null | string @go(ClientID,*string)

	// SubscriptionID is the Azure subscription ID to be used.
	// If unset, subscription ID from Credentials will be used.
	// Required if Credentials.Source is InjectedIdentity.
	// +kubebuilder:validation:Optional
	subscriptionID?: null | string @go(SubscriptionID,*string)

	// TenantID is the Azure AD tenant ID to be used.
	// If unset, tenant ID from Credentials will be used.
	// Required if Credentials.Source is InjectedIdentity.
	// +kubebuilder:validation:Optional
	tenantID?: null | string @go(TenantID,*string)

	// MSIEndpoint is the optional path to a custom endpoint for
	// Managed Service Identity.
	// +kubebuilder:validation:Optional
	msiEndpoint?: null | string @go(MSIEndpoint,*string)

	// The Cloud Environment which should be used. Possible values are "public",
	// "usgovernment", "german", and "china". Defaults to "public".
	// +kubebuilder:validation:Optional
	environment?: null | string @go(Environment,*string)

	// OIDCTokenFilePath is the optional path to a token file
	// that allows to access a managed identity.
	// +kubebuilder:validation:Optional
	oidcTokenFilePath?: null | string @go(OidcTokenFilePath,*string)
}

// A ProviderConfig configures the Azure provider.
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:printcolumn:name="SECRET-NAME",type="string",JSONPath=".spec.credentials.secretRef.name",priority=1
// +kubebuilder:resource:scope=Cluster
// +kubebuilder:resource:scope=Cluster,categories={crossplane,providerconfig,azure}
// +kubebuilder:storageversion
#ProviderConfig: {
	spec: #ProviderConfigSpec @go(Spec)
}

// ProviderConfigList contains a list of ProviderConfig.
#ProviderConfigList: {
	items: [...#ProviderConfig] @go(Items,[]ProviderConfig)
}
