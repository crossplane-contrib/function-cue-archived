// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-azure/apis/cdn/v1beta1

package v1beta1

#CacheInitParameters: {
	// Is content compression enabled? Possible values are true or false. Defaults to false.
	compressionEnabled?: null | bool @go(CompressionEnabled,*bool)

	// A list of one or more Content types (formerly known as MIME types) to compress. Possible values include application/eot, application/font, application/font-sfnt, application/javascript, application/json, application/opentype, application/otf, application/pkcs7-mime, application/truetype, application/ttf, application/vnd.ms-fontobject, application/xhtml+xml, application/xml, application/xml+rss, application/x-font-opentype, application/x-font-truetype, application/x-font-ttf, application/x-httpd-cgi, application/x-mpegurl, application/x-opentype, application/x-otf, application/x-perl, application/x-ttf, application/x-javascript, font/eot, font/ttf, font/otf, font/opentype, image/svg+xml, text/css, text/csv, text/html, text/javascript, text/js, text/plain, text/richtext, text/tab-separated-values, text/xml, text/x-script, text/x-component or text/x-java-source.
	contentTypesToCompress?: [...null | string] @go(ContentTypesToCompress,[]*string)

	// Defines how the Front Door Route will cache requests that include query strings. Possible values include IgnoreQueryString, IgnoreSpecifiedQueryStrings, IncludeSpecifiedQueryStrings or UseQueryString. Defaults it IgnoreQueryString.
	queryStringCachingBehavior?: null | string @go(QueryStringCachingBehavior,*string)

	// Query strings to include or ignore.
	queryStrings?: [...null | string] @go(QueryStrings,[]*string)
}

#CacheObservation: {
	// Is content compression enabled? Possible values are true or false. Defaults to false.
	compressionEnabled?: null | bool @go(CompressionEnabled,*bool)

	// A list of one or more Content types (formerly known as MIME types) to compress. Possible values include application/eot, application/font, application/font-sfnt, application/javascript, application/json, application/opentype, application/otf, application/pkcs7-mime, application/truetype, application/ttf, application/vnd.ms-fontobject, application/xhtml+xml, application/xml, application/xml+rss, application/x-font-opentype, application/x-font-truetype, application/x-font-ttf, application/x-httpd-cgi, application/x-mpegurl, application/x-opentype, application/x-otf, application/x-perl, application/x-ttf, application/x-javascript, font/eot, font/ttf, font/otf, font/opentype, image/svg+xml, text/css, text/csv, text/html, text/javascript, text/js, text/plain, text/richtext, text/tab-separated-values, text/xml, text/x-script, text/x-component or text/x-java-source.
	contentTypesToCompress?: [...null | string] @go(ContentTypesToCompress,[]*string)

	// Defines how the Front Door Route will cache requests that include query strings. Possible values include IgnoreQueryString, IgnoreSpecifiedQueryStrings, IncludeSpecifiedQueryStrings or UseQueryString. Defaults it IgnoreQueryString.
	queryStringCachingBehavior?: null | string @go(QueryStringCachingBehavior,*string)

	// Query strings to include or ignore.
	queryStrings?: [...null | string] @go(QueryStrings,[]*string)
}

#CacheParameters: {
	// Is content compression enabled? Possible values are true or false. Defaults to false.
	// +kubebuilder:validation:Optional
	compressionEnabled?: null | bool @go(CompressionEnabled,*bool)

	// A list of one or more Content types (formerly known as MIME types) to compress. Possible values include application/eot, application/font, application/font-sfnt, application/javascript, application/json, application/opentype, application/otf, application/pkcs7-mime, application/truetype, application/ttf, application/vnd.ms-fontobject, application/xhtml+xml, application/xml, application/xml+rss, application/x-font-opentype, application/x-font-truetype, application/x-font-ttf, application/x-httpd-cgi, application/x-mpegurl, application/x-opentype, application/x-otf, application/x-perl, application/x-ttf, application/x-javascript, font/eot, font/ttf, font/otf, font/opentype, image/svg+xml, text/css, text/csv, text/html, text/javascript, text/js, text/plain, text/richtext, text/tab-separated-values, text/xml, text/x-script, text/x-component or text/x-java-source.
	// +kubebuilder:validation:Optional
	contentTypesToCompress?: [...null | string] @go(ContentTypesToCompress,[]*string)

	// Defines how the Front Door Route will cache requests that include query strings. Possible values include IgnoreQueryString, IgnoreSpecifiedQueryStrings, IncludeSpecifiedQueryStrings or UseQueryString. Defaults it IgnoreQueryString.
	// +kubebuilder:validation:Optional
	queryStringCachingBehavior?: null | string @go(QueryStringCachingBehavior,*string)

	// Query strings to include or ignore.
	// +kubebuilder:validation:Optional
	queryStrings?: [...null | string] @go(QueryStrings,[]*string)
}

#FrontdoorRouteInitParameters: {
	// A cache block as defined below.
	cache?: [...#CacheInitParameters] @go(Cache,[]CacheInitParameters)

	// A directory path on the Front Door Origin that can be used to retrieve content (e.g. contoso.cloudapp.net/originpath).
	cdnFrontdoorOriginPath?: null | string @go(CdnFrontdoorOriginPath,*string)

	// Is this Front Door Route enabled? Possible values are true or false. Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// The Protocol that will be use when forwarding traffic to backends. Possible values are HttpOnly, HttpsOnly or MatchRequest.
	forwardingProtocol?: null | string @go(ForwardingProtocol,*string)

	// Automatically redirect HTTP traffic to HTTPS traffic? Possible values are true or false. Defaults to true.
	httpsRedirectEnabled?: null | bool @go(HTTPSRedirectEnabled,*bool)

	// Should this Front Door Route be linked to the default endpoint? Possible values include true or false. Defaults to true.
	linkToDefaultDomain?: null | bool @go(LinkToDefaultDomain,*bool)

	// The route patterns of the rule.
	patternsToMatch?: [...null | string] @go(PatternsToMatch,[]*string)

	// One or more Protocols supported by this Front Door Route. Possible values are Http or Https.
	supportedProtocols?: [...null | string] @go(SupportedProtocols,[]*string)
}

#FrontdoorRouteObservation: {
	// A cache block as defined below.
	cache?: [...#CacheObservation] @go(Cache,[]CacheObservation)

	// The IDs of the Front Door Custom Domains which are associated with this Front Door Route.
	cdnFrontdoorCustomDomainIds?: [...null | string] @go(CdnFrontdoorCustomDomainIds,[]*string)

	// The resource ID of the Front Door Endpoint where this Front Door Route should exist. Changing this forces a new Front Door Route to be created.
	cdnFrontdoorEndpointId?: null | string @go(CdnFrontdoorEndpointID,*string)

	// The resource ID of the Front Door Origin Group where this Front Door Route should be created.
	cdnFrontdoorOriginGroupId?: null | string @go(CdnFrontdoorOriginGroupID,*string)

	// One or more Front Door Origin resource IDs that this Front Door Route will link to.
	cdnFrontdoorOriginIds?: [...null | string] @go(CdnFrontdoorOriginIds,[]*string)

	// A directory path on the Front Door Origin that can be used to retrieve content (e.g. contoso.cloudapp.net/originpath).
	cdnFrontdoorOriginPath?: null | string @go(CdnFrontdoorOriginPath,*string)

	// A list of the Front Door Rule Set IDs which should be assigned to this Front Door Route.
	cdnFrontdoorRuleSetIds?: [...null | string] @go(CdnFrontdoorRuleSetIds,[]*string)

	// Is this Front Door Route enabled? Possible values are true or false. Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// The Protocol that will be use when forwarding traffic to backends. Possible values are HttpOnly, HttpsOnly or MatchRequest.
	forwardingProtocol?: null | string @go(ForwardingProtocol,*string)

	// Automatically redirect HTTP traffic to HTTPS traffic? Possible values are true or false. Defaults to true.
	httpsRedirectEnabled?: null | bool @go(HTTPSRedirectEnabled,*bool)

	// The ID of the Front Door Route.
	id?: null | string @go(ID,*string)

	// Should this Front Door Route be linked to the default endpoint? Possible values include true or false. Defaults to true.
	linkToDefaultDomain?: null | bool @go(LinkToDefaultDomain,*bool)

	// The route patterns of the rule.
	patternsToMatch?: [...null | string] @go(PatternsToMatch,[]*string)

	// One or more Protocols supported by this Front Door Route. Possible values are Http or Https.
	supportedProtocols?: [...null | string] @go(SupportedProtocols,[]*string)
}

#FrontdoorRouteParameters: {
	// A cache block as defined below.
	// +kubebuilder:validation:Optional
	cache?: [...#CacheParameters] @go(Cache,[]CacheParameters)

	// The IDs of the Front Door Custom Domains which are associated with this Front Door Route.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cdn/v1beta1.FrontdoorCustomDomain
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	cdnFrontdoorCustomDomainIds?: [...null | string] @go(CdnFrontdoorCustomDomainIds,[]*string)

	// The resource ID of the Front Door Endpoint where this Front Door Route should exist. Changing this forces a new Front Door Route to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cdn/v1beta1.FrontdoorEndpoint
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	cdnFrontdoorEndpointId?: null | string @go(CdnFrontdoorEndpointID,*string)

	// The resource ID of the Front Door Origin Group where this Front Door Route should be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cdn/v1beta1.FrontdoorOriginGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	cdnFrontdoorOriginGroupId?: null | string @go(CdnFrontdoorOriginGroupID,*string)

	// One or more Front Door Origin resource IDs that this Front Door Route will link to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cdn/v1beta1.FrontdoorOrigin
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	cdnFrontdoorOriginIds?: [...null | string] @go(CdnFrontdoorOriginIds,[]*string)

	// A directory path on the Front Door Origin that can be used to retrieve content (e.g. contoso.cloudapp.net/originpath).
	// +kubebuilder:validation:Optional
	cdnFrontdoorOriginPath?: null | string @go(CdnFrontdoorOriginPath,*string)

	// A list of the Front Door Rule Set IDs which should be assigned to this Front Door Route.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/cdn/v1beta1.FrontdoorRuleSet
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	cdnFrontdoorRuleSetIds?: [...null | string] @go(CdnFrontdoorRuleSetIds,[]*string)

	// Is this Front Door Route enabled? Possible values are true or false. Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// The Protocol that will be use when forwarding traffic to backends. Possible values are HttpOnly, HttpsOnly or MatchRequest.
	// +kubebuilder:validation:Optional
	forwardingProtocol?: null | string @go(ForwardingProtocol,*string)

	// Automatically redirect HTTP traffic to HTTPS traffic? Possible values are true or false. Defaults to true.
	// +kubebuilder:validation:Optional
	httpsRedirectEnabled?: null | bool @go(HTTPSRedirectEnabled,*bool)

	// Should this Front Door Route be linked to the default endpoint? Possible values include true or false. Defaults to true.
	// +kubebuilder:validation:Optional
	linkToDefaultDomain?: null | bool @go(LinkToDefaultDomain,*bool)

	// The route patterns of the rule.
	// +kubebuilder:validation:Optional
	patternsToMatch?: [...null | string] @go(PatternsToMatch,[]*string)

	// One or more Protocols supported by this Front Door Route. Possible values are Http or Https.
	// +kubebuilder:validation:Optional
	supportedProtocols?: [...null | string] @go(SupportedProtocols,[]*string)
}

// FrontdoorRouteSpec defines the desired state of FrontdoorRoute
#FrontdoorRouteSpec: {
	forProvider: #FrontdoorRouteParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FrontdoorRouteInitParameters @go(InitProvider)
}

// FrontdoorRouteStatus defines the observed state of FrontdoorRoute.
#FrontdoorRouteStatus: {
	atProvider?: #FrontdoorRouteObservation @go(AtProvider)
}

// FrontdoorRoute is the Schema for the FrontdoorRoutes API. Manages a Front Door (standard/premium) Route.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
#FrontdoorRoute: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.patternsToMatch) || (has(self.initProvider) && has(self.initProvider.patternsToMatch))",message="spec.forProvider.patternsToMatch is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.supportedProtocols) || (has(self.initProvider) && has(self.initProvider.supportedProtocols))",message="spec.forProvider.supportedProtocols is a required parameter"
	spec:    #FrontdoorRouteSpec   @go(Spec)
	status?: #FrontdoorRouteStatus @go(Status)
}

// FrontdoorRouteList contains a list of FrontdoorRoutes
#FrontdoorRouteList: {
	items: [...#FrontdoorRoute] @go(Items,[]FrontdoorRoute)
}
