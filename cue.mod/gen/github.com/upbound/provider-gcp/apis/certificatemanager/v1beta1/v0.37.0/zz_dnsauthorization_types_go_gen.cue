// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/certificatemanager/v1beta1

package v1beta1

#DNSAuthorizationInitParameters: {
	// A human-readable description of the resource.
	description?: null | string @go(Description,*string)

	// A domain which is being authorized. A DnsAuthorization resource covers a
	// single domain and its wildcard, e.g. authorization for "example.com" can
	// be used to issue certificates for "example.com" and "*.example.com".
	domain?: null | string @go(Domain,*string)

	// Set of label tags associated with the DNS Authorization resource.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#DNSAuthorizationObservation: {
	// The structure describing the DNS Resource Record that needs to be added
	// to DNS configuration for the authorization to be usable by
	// certificate.
	// Structure is documented below.
	dnsResourceRecord?: [...#DNSResourceRecordObservation] @go(DNSResourceRecord,[]DNSResourceRecordObservation)

	// A human-readable description of the resource.
	description?: null | string @go(Description,*string)

	// A domain which is being authorized. A DnsAuthorization resource covers a
	// single domain and its wildcard, e.g. authorization for "example.com" can
	// be used to issue certificates for "example.com" and "*.example.com".
	domain?: null | string @go(Domain,*string)

	// an identifier for the resource with format projects/{{project}}/locations/global/dnsAuthorizations/{{name}}
	id?: null | string @go(ID,*string)

	// Set of label tags associated with the DNS Authorization resource.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#DNSAuthorizationParameters: {
	// A human-readable description of the resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A domain which is being authorized. A DnsAuthorization resource covers a
	// single domain and its wildcard, e.g. authorization for "example.com" can
	// be used to issue certificates for "example.com" and "*.example.com".
	// +kubebuilder:validation:Optional
	domain?: null | string @go(Domain,*string)

	// Set of label tags associated with the DNS Authorization resource.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

#DNSResourceRecordInitParameters: {
}

#DNSResourceRecordObservation: {
	// (Output)
	// Data of the DNS Resource Record.
	data?: null | string @go(Data,*string)

	// (Output)
	// Fully qualified name of the DNS Resource Record.
	// E.g. _acme-challenge.example.com.
	name?: null | string @go(Name,*string)

	// (Output)
	// Type of the DNS Resource Record.
	type?: null | string @go(Type,*string)
}

#DNSResourceRecordParameters: {
}

// DNSAuthorizationSpec defines the desired state of DNSAuthorization
#DNSAuthorizationSpec: {
	forProvider: #DNSAuthorizationParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DNSAuthorizationInitParameters @go(InitProvider)
}

// DNSAuthorizationStatus defines the observed state of DNSAuthorization.
#DNSAuthorizationStatus: {
	atProvider?: #DNSAuthorizationObservation @go(AtProvider)
}

// DNSAuthorization is the Schema for the DNSAuthorizations API. DnsAuthorization represents a HTTP-reachable backend for a DnsAuthorization.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#DNSAuthorization: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	spec:    #DNSAuthorizationSpec   @go(Spec)
	status?: #DNSAuthorizationStatus @go(Status)
}

// DNSAuthorizationList contains a list of DNSAuthorizations
#DNSAuthorizationList: {
	items: [...#DNSAuthorization] @go(Items,[]DNSAuthorization)
}
