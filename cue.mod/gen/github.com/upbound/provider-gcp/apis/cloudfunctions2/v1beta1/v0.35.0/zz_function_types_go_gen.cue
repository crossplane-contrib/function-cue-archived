// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/cloudfunctions2/v1beta1

package v1beta1

#BuildConfigInitParameters: {
	// User managed repository created in Artifact Registry optionally with a customer managed encryption key.
	dockerRepository?: null | string @go(DockerRepository,*string)

	// The name of the function (as defined in source code) that will be executed.
	// Defaults to the resource name suffix, if not specified. For backward
	// compatibility, if function with given name is not found, then the system
	// will try to use function named "function". For Node.js this is name of a
	// function exported by the module specified in source_location.
	entryPoint?: null | string @go(EntryPoint,*string)

	// User-provided build-time environment variables for the function.
	environmentVariables?: {[string]: null | string} @go(EnvironmentVariables,map[string]*string)

	// The runtime in which to run the function. Required when deploying a new
	// function, optional when updating an existing function.
	runtime?: null | string @go(Runtime,*string)

	// The location of the function source code.
	// Structure is documented below.
	source?: [...#SourceInitParameters] @go(Source,[]SourceInitParameters)
}

#BuildConfigObservation: {
	// (Output)
	// The Cloud Build name of the latest successful
	// deployment of the function.
	build?: null | string @go(Build,*string)

	// User managed repository created in Artifact Registry optionally with a customer managed encryption key.
	dockerRepository?: null | string @go(DockerRepository,*string)

	// The name of the function (as defined in source code) that will be executed.
	// Defaults to the resource name suffix, if not specified. For backward
	// compatibility, if function with given name is not found, then the system
	// will try to use function named "function". For Node.js this is name of a
	// function exported by the module specified in source_location.
	entryPoint?: null | string @go(EntryPoint,*string)

	// User-provided build-time environment variables for the function.
	environmentVariables?: {[string]: null | string} @go(EnvironmentVariables,map[string]*string)

	// The runtime in which to run the function. Required when deploying a new
	// function, optional when updating an existing function.
	runtime?: null | string @go(Runtime,*string)

	// The location of the function source code.
	// Structure is documented below.
	source?: [...#SourceObservation] @go(Source,[]SourceObservation)

	// Name of the Cloud Build Custom Worker Pool that should be used to build the function.
	workerPool?: null | string @go(WorkerPool,*string)
}

#BuildConfigParameters: {
	// User managed repository created in Artifact Registry optionally with a customer managed encryption key.
	// +kubebuilder:validation:Optional
	dockerRepository?: null | string @go(DockerRepository,*string)

	// The name of the function (as defined in source code) that will be executed.
	// Defaults to the resource name suffix, if not specified. For backward
	// compatibility, if function with given name is not found, then the system
	// will try to use function named "function". For Node.js this is name of a
	// function exported by the module specified in source_location.
	// +kubebuilder:validation:Optional
	entryPoint?: null | string @go(EntryPoint,*string)

	// User-provided build-time environment variables for the function.
	// +kubebuilder:validation:Optional
	environmentVariables?: {[string]: null | string} @go(EnvironmentVariables,map[string]*string)

	// The runtime in which to run the function. Required when deploying a new
	// function, optional when updating an existing function.
	// +kubebuilder:validation:Optional
	runtime?: null | string @go(Runtime,*string)

	// The location of the function source code.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	source?: [...#SourceParameters] @go(Source,[]SourceParameters)

	// Name of the Cloud Build Custom Worker Pool that should be used to build the function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudbuild/v1beta1.WorkerPool
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	workerPool?: null | string @go(WorkerPool,*string)
}

#EventFiltersInitParameters: {
	// 'Required. The name of a CloudEvents attribute.
	// Currently, only a subset of attributes are supported for filtering. Use the gcloud eventarc providers describe command to learn more about events and their attributes.
	// Do not filter for the 'type' attribute here, as this is already achieved by the resource's event_type attribute.
	attribute?: null | string @go(Attribute,*string)

	// Optional. The operator used for matching the events with the value of
	// the filter. If not specified, only events that have an exact key-value
	// pair specified in the filter are matched.
	// The only allowed value is match-path-pattern.
	// See documentation on path patterns here'
	operator?: null | string @go(Operator,*string)
}

#EventFiltersObservation: {
	// 'Required. The name of a CloudEvents attribute.
	// Currently, only a subset of attributes are supported for filtering. Use the gcloud eventarc providers describe command to learn more about events and their attributes.
	// Do not filter for the 'type' attribute here, as this is already achieved by the resource's event_type attribute.
	attribute?: null | string @go(Attribute,*string)

	// Optional. The operator used for matching the events with the value of
	// the filter. If not specified, only events that have an exact key-value
	// pair specified in the filter are matched.
	// The only allowed value is match-path-pattern.
	// See documentation on path patterns here'
	operator?: null | string @go(Operator,*string)

	// Required. The value for the attribute.
	// If the operator field is set as match-path-pattern, this value can be a path pattern instead of an exact value.
	value?: null | string @go(Value,*string)
}

#EventFiltersParameters: {
	// 'Required. The name of a CloudEvents attribute.
	// Currently, only a subset of attributes are supported for filtering. Use the gcloud eventarc providers describe command to learn more about events and their attributes.
	// Do not filter for the 'type' attribute here, as this is already achieved by the resource's event_type attribute.
	// +kubebuilder:validation:Optional
	attribute?: null | string @go(Attribute,*string)

	// Optional. The operator used for matching the events with the value of
	// the filter. If not specified, only events that have an exact key-value
	// pair specified in the filter are matched.
	// The only allowed value is match-path-pattern.
	// See documentation on path patterns here'
	// +kubebuilder:validation:Optional
	operator?: null | string @go(Operator,*string)

	// Required. The value for the attribute.
	// If the operator field is set as match-path-pattern, this value can be a path pattern instead of an exact value.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/storage/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#EventTriggerInitParameters: {
	// Criteria used to filter events.
	// Structure is documented below.
	eventFilters?: [...#EventFiltersInitParameters] @go(EventFilters,[]EventFiltersInitParameters)

	// Required. The type of event to observe.
	eventType?: null | string @go(EventType,*string)

	// Describes the retry policy in case of function's execution failure.
	// Retried execution is charged as any other execution.
	// Possible values are: RETRY_POLICY_UNSPECIFIED, RETRY_POLICY_DO_NOT_RETRY, RETRY_POLICY_RETRY.
	retryPolicy?: null | string @go(RetryPolicy,*string)

	// The region that the trigger will be in. The trigger will only receive
	// events originating in this region. It can be the same
	// region as the function, a different region or multi-region, or the global
	// region. If not provided, defaults to the same region as the function.
	triggerRegion?: null | string @go(TriggerRegion,*string)
}

#EventTriggerObservation: {
	// Criteria used to filter events.
	// Structure is documented below.
	eventFilters?: [...#EventFiltersObservation] @go(EventFilters,[]EventFiltersObservation)

	// Required. The type of event to observe.
	eventType?: null | string @go(EventType,*string)

	// The name of a Pub/Sub topic in the same project that will be used
	// as the transport topic for the event delivery.
	pubsubTopic?: null | string @go(PubsubTopic,*string)

	// Describes the retry policy in case of function's execution failure.
	// Retried execution is charged as any other execution.
	// Possible values are: RETRY_POLICY_UNSPECIFIED, RETRY_POLICY_DO_NOT_RETRY, RETRY_POLICY_RETRY.
	retryPolicy?: null | string @go(RetryPolicy,*string)

	// The email of the service account for this function.
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// (Output)
	// Output only. The resource name of the Eventarc trigger.
	trigger?: null | string @go(Trigger,*string)

	// The region that the trigger will be in. The trigger will only receive
	// events originating in this region. It can be the same
	// region as the function, a different region or multi-region, or the global
	// region. If not provided, defaults to the same region as the function.
	triggerRegion?: null | string @go(TriggerRegion,*string)
}

#EventTriggerParameters: {
	// Criteria used to filter events.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	eventFilters?: [...#EventFiltersParameters] @go(EventFilters,[]EventFiltersParameters)

	// Required. The type of event to observe.
	// +kubebuilder:validation:Optional
	eventType?: null | string @go(EventType,*string)

	// The name of a Pub/Sub topic in the same project that will be used
	// as the transport topic for the event delivery.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/pubsub/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	pubsubTopic?: null | string @go(PubsubTopic,*string)

	// Describes the retry policy in case of function's execution failure.
	// Retried execution is charged as any other execution.
	// Possible values are: RETRY_POLICY_UNSPECIFIED, RETRY_POLICY_DO_NOT_RETRY, RETRY_POLICY_RETRY.
	// +kubebuilder:validation:Optional
	retryPolicy?: null | string @go(RetryPolicy,*string)

	// The email of the service account for this function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.ServiceAccount
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("email",true)
	// +kubebuilder:validation:Optional
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// The region that the trigger will be in. The trigger will only receive
	// events originating in this region. It can be the same
	// region as the function, a different region or multi-region, or the global
	// region. If not provided, defaults to the same region as the function.
	// +kubebuilder:validation:Optional
	triggerRegion?: null | string @go(TriggerRegion,*string)
}

#FunctionInitParameters: {
	// Describes the Build step of the function that builds a container
	// from the given source.
	// Structure is documented below.
	buildConfig?: [...#BuildConfigInitParameters] @go(BuildConfig,[]BuildConfigInitParameters)

	// User-provided description of a function.
	description?: null | string @go(Description,*string)

	// An Eventarc trigger managed by Google Cloud Functions that fires events in
	// response to a condition in another service.
	// Structure is documented below.
	eventTrigger?: [...#EventTriggerInitParameters] @go(EventTrigger,[]EventTriggerInitParameters)

	// A set of key/value label pairs associated with this Cloud Function.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Describes the Service being deployed.
	// Structure is documented below.
	serviceConfig?: [...#ServiceConfigInitParameters] @go(ServiceConfig,[]ServiceConfigInitParameters)
}

#FunctionObservation: {
	// Describes the Build step of the function that builds a container
	// from the given source.
	// Structure is documented below.
	buildConfig?: [...#BuildConfigObservation] @go(BuildConfig,[]BuildConfigObservation)

	// User-provided description of a function.
	description?: null | string @go(Description,*string)

	// The environment the function is hosted on.
	environment?: null | string @go(Environment,*string)

	// An Eventarc trigger managed by Google Cloud Functions that fires events in
	// response to a condition in another service.
	// Structure is documented below.
	eventTrigger?: [...#EventTriggerObservation] @go(EventTrigger,[]EventTriggerObservation)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/functions/{{name}}
	id?: null | string @go(ID,*string)

	// A set of key/value label pairs associated with this Cloud Function.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The location of this cloud function.
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Describes the Service being deployed.
	// Structure is documented below.
	serviceConfig?: [...#ServiceConfigObservation] @go(ServiceConfig,[]ServiceConfigObservation)

	// Describes the current state of the function.
	state?: null | string @go(State,*string)

	// The last update timestamp of a Cloud Function.
	updateTime?: null | string @go(UpdateTime,*string)
}

#FunctionParameters: {
	// Describes the Build step of the function that builds a container
	// from the given source.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	buildConfig?: [...#BuildConfigParameters] @go(BuildConfig,[]BuildConfigParameters)

	// User-provided description of a function.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// An Eventarc trigger managed by Google Cloud Functions that fires events in
	// response to a condition in another service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	eventTrigger?: [...#EventTriggerParameters] @go(EventTrigger,[]EventTriggerParameters)

	// A set of key/value label pairs associated with this Cloud Function.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The location of this cloud function.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Describes the Service being deployed.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	serviceConfig?: [...#ServiceConfigParameters] @go(ServiceConfig,[]ServiceConfigParameters)
}

#RepoSourceInitParameters: {
	// Regex matching branches to build.
	branchName?: null | string @go(BranchName,*string)

	// Regex matching tags to build.
	commitSha?: null | string @go(CommitSha,*string)

	// Directory, relative to the source root, in which to run the build.
	dir?: null | string @go(Dir,*string)

	// Only trigger a build if the revision regex does
	// NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	projectId?: null | string @go(ProjectID,*string)

	// Name of the Cloud Source Repository.
	repoName?: null | string @go(RepoName,*string)

	// Regex matching tags to build.
	tagName?: null | string @go(TagName,*string)
}

#RepoSourceObservation: {
	// Regex matching branches to build.
	branchName?: null | string @go(BranchName,*string)

	// Regex matching tags to build.
	commitSha?: null | string @go(CommitSha,*string)

	// Directory, relative to the source root, in which to run the build.
	dir?: null | string @go(Dir,*string)

	// Only trigger a build if the revision regex does
	// NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	projectId?: null | string @go(ProjectID,*string)

	// Name of the Cloud Source Repository.
	repoName?: null | string @go(RepoName,*string)

	// Regex matching tags to build.
	tagName?: null | string @go(TagName,*string)
}

#RepoSourceParameters: {
	// Regex matching branches to build.
	// +kubebuilder:validation:Optional
	branchName?: null | string @go(BranchName,*string)

	// Regex matching tags to build.
	// +kubebuilder:validation:Optional
	commitSha?: null | string @go(CommitSha,*string)

	// Directory, relative to the source root, in which to run the build.
	// +kubebuilder:validation:Optional
	dir?: null | string @go(Dir,*string)

	// Only trigger a build if the revision regex does
	// NOT match the revision regex.
	// +kubebuilder:validation:Optional
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	// +kubebuilder:validation:Optional
	projectId?: null | string @go(ProjectID,*string)

	// Name of the Cloud Source Repository.
	// +kubebuilder:validation:Optional
	repoName?: null | string @go(RepoName,*string)

	// Regex matching tags to build.
	// +kubebuilder:validation:Optional
	tagName?: null | string @go(TagName,*string)
}

#SecretEnvironmentVariablesInitParameters: {
	// Name of the environment variable.
	key?: null | string @go(Key,*string)

	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	projectId?: null | string @go(ProjectID,*string)

	// Version of the secret (version number or the string 'latest'). It is preferable to use latest version with secret volumes as secret value changes are reflected immediately.
	version?: null | string @go(Version,*string)
}

#SecretEnvironmentVariablesObservation: {
	// Name of the environment variable.
	key?: null | string @go(Key,*string)

	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	projectId?: null | string @go(ProjectID,*string)

	// Name of the secret in secret manager (not the full resource name).
	secret?: null | string @go(Secret,*string)

	// Version of the secret (version number or the string 'latest'). It is preferable to use latest version with secret volumes as secret value changes are reflected immediately.
	version?: null | string @go(Version,*string)
}

#SecretEnvironmentVariablesParameters: {
	// Name of the environment variable.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	// +kubebuilder:validation:Optional
	projectId?: null | string @go(ProjectID,*string)

	// Name of the secret in secret manager (not the full resource name).
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.Secret
	// +kubebuilder:validation:Optional
	secret?: null | string @go(Secret,*string)

	// Version of the secret (version number or the string 'latest'). It is preferable to use latest version with secret volumes as secret value changes are reflected immediately.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#SecretVolumesInitParameters: {
	// The path within the container to mount the secret volume. For example, setting the mountPath as /etc/secrets would mount the secret value files under the /etc/secrets directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount path: /etc/secrets
	mountPath?: null | string @go(MountPath,*string)

	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	projectId?: null | string @go(ProjectID,*string)

	// List of secret versions to mount for this secret. If empty, the latest version of the secret will be made available in a file named after the secret under the mount point.'
	// Structure is documented below.
	versions?: [...#VersionsInitParameters] @go(Versions,[]VersionsInitParameters)
}

#SecretVolumesObservation: {
	// The path within the container to mount the secret volume. For example, setting the mountPath as /etc/secrets would mount the secret value files under the /etc/secrets directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount path: /etc/secrets
	mountPath?: null | string @go(MountPath,*string)

	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	projectId?: null | string @go(ProjectID,*string)

	// Name of the secret in secret manager (not the full resource name).
	secret?: null | string @go(Secret,*string)

	// List of secret versions to mount for this secret. If empty, the latest version of the secret will be made available in a file named after the secret under the mount point.'
	// Structure is documented below.
	versions?: [...#VersionsObservation] @go(Versions,[]VersionsObservation)
}

#SecretVolumesParameters: {
	// The path within the container to mount the secret volume. For example, setting the mountPath as /etc/secrets would mount the secret value files under the /etc/secrets directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount path: /etc/secrets
	// +kubebuilder:validation:Optional
	mountPath?: null | string @go(MountPath,*string)

	// Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.
	// +kubebuilder:validation:Optional
	projectId?: null | string @go(ProjectID,*string)

	// Name of the secret in secret manager (not the full resource name).
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.Secret
	// +kubebuilder:validation:Optional
	secret?: null | string @go(Secret,*string)

	// List of secret versions to mount for this secret. If empty, the latest version of the secret will be made available in a file named after the secret under the mount point.'
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	versions?: [...#VersionsParameters] @go(Versions,[]VersionsParameters)
}

#ServiceConfigInitParameters: {
	// Whether 100% of traffic is routed to the latest revision. Defaults to true.
	allTrafficOnLatestRevision?: null | bool @go(AllTrafficOnLatestRevision,*bool)

	// The number of CPUs used in a single container instance. Default value is calculated from available memory.
	availableCpu?: null | string @go(AvailableCPU,*string)

	// The amount of memory available for a function.
	// Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is
	// supplied the value is interpreted as bytes.
	availableMemory?: null | string @go(AvailableMemory,*string)

	// Environment variables that shall be available during function execution.
	environmentVariables?: {[string]: null | string} @go(EnvironmentVariables,map[string]*string)

	// Available ingress settings. Defaults to "ALLOW_ALL" if unspecified.
	// Default value is ALLOW_ALL.
	// Possible values are: ALLOW_ALL, ALLOW_INTERNAL_ONLY, ALLOW_INTERNAL_AND_GCLB.
	ingressSettings?: null | string @go(IngressSettings,*string)

	// The limit on the maximum number of function instances that may coexist at a
	// given time.
	maxInstanceCount?: null | float64 @go(MaxInstanceCount,*float64)

	// Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.
	maxInstanceRequestConcurrency?: null | float64 @go(MaxInstanceRequestConcurrency,*float64)

	// The limit on the minimum number of function instances that may coexist at a
	// given time.
	minInstanceCount?: null | float64 @go(MinInstanceCount,*float64)

	// Secret environment variables configuration.
	// Structure is documented below.
	secretEnvironmentVariables?: [...#SecretEnvironmentVariablesInitParameters] @go(SecretEnvironmentVariables,[]SecretEnvironmentVariablesInitParameters)

	// Secret volumes configuration.
	// Structure is documented below.
	secretVolumes?: [...#SecretVolumesInitParameters] @go(SecretVolumes,[]SecretVolumesInitParameters)

	// Name of the service associated with a Function.
	service?: null | string @go(Service,*string)

	// The function execution timeout. Execution is considered failed and
	// can be terminated if the function is not completed at the end of the
	// timeout period. Defaults to 60 seconds.
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)

	// The Serverless VPC Access connector that this cloud function can connect to.
	vpcConnector?: null | string @go(VPCConnector,*string)

	// Available egress settings.
	// Possible values are: VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED, PRIVATE_RANGES_ONLY, ALL_TRAFFIC.
	vpcConnectorEgressSettings?: null | string @go(VPCConnectorEgressSettings,*string)
}

#ServiceConfigObservation: {
	// Whether 100% of traffic is routed to the latest revision. Defaults to true.
	allTrafficOnLatestRevision?: null | bool @go(AllTrafficOnLatestRevision,*bool)

	// The number of CPUs used in a single container instance. Default value is calculated from available memory.
	availableCpu?: null | string @go(AvailableCPU,*string)

	// The amount of memory available for a function.
	// Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is
	// supplied the value is interpreted as bytes.
	availableMemory?: null | string @go(AvailableMemory,*string)

	// Environment variables that shall be available during function execution.
	environmentVariables?: {[string]: null | string} @go(EnvironmentVariables,map[string]*string)

	// (Output)
	// URIs of the Service deployed
	gcfUri?: null | string @go(GcfURI,*string)

	// Available ingress settings. Defaults to "ALLOW_ALL" if unspecified.
	// Default value is ALLOW_ALL.
	// Possible values are: ALLOW_ALL, ALLOW_INTERNAL_ONLY, ALLOW_INTERNAL_AND_GCLB.
	ingressSettings?: null | string @go(IngressSettings,*string)

	// The limit on the maximum number of function instances that may coexist at a
	// given time.
	maxInstanceCount?: null | float64 @go(MaxInstanceCount,*float64)

	// Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.
	maxInstanceRequestConcurrency?: null | float64 @go(MaxInstanceRequestConcurrency,*float64)

	// The limit on the minimum number of function instances that may coexist at a
	// given time.
	minInstanceCount?: null | float64 @go(MinInstanceCount,*float64)

	// Secret environment variables configuration.
	// Structure is documented below.
	secretEnvironmentVariables?: [...#SecretEnvironmentVariablesObservation] @go(SecretEnvironmentVariables,[]SecretEnvironmentVariablesObservation)

	// Secret volumes configuration.
	// Structure is documented below.
	secretVolumes?: [...#SecretVolumesObservation] @go(SecretVolumes,[]SecretVolumesObservation)

	// Name of the service associated with a Function.
	service?: null | string @go(Service,*string)

	// The email of the service account for this function.
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// The function execution timeout. Execution is considered failed and
	// can be terminated if the function is not completed at the end of the
	// timeout period. Defaults to 60 seconds.
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)

	// (Output)
	// URI of the Service deployed.
	uri?: null | string @go(URI,*string)

	// The Serverless VPC Access connector that this cloud function can connect to.
	vpcConnector?: null | string @go(VPCConnector,*string)

	// Available egress settings.
	// Possible values are: VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED, PRIVATE_RANGES_ONLY, ALL_TRAFFIC.
	vpcConnectorEgressSettings?: null | string @go(VPCConnectorEgressSettings,*string)
}

#ServiceConfigParameters: {
	// Whether 100% of traffic is routed to the latest revision. Defaults to true.
	// +kubebuilder:validation:Optional
	allTrafficOnLatestRevision?: null | bool @go(AllTrafficOnLatestRevision,*bool)

	// The number of CPUs used in a single container instance. Default value is calculated from available memory.
	// +kubebuilder:validation:Optional
	availableCpu?: null | string @go(AvailableCPU,*string)

	// The amount of memory available for a function.
	// Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is
	// supplied the value is interpreted as bytes.
	// +kubebuilder:validation:Optional
	availableMemory?: null | string @go(AvailableMemory,*string)

	// Environment variables that shall be available during function execution.
	// +kubebuilder:validation:Optional
	environmentVariables?: {[string]: null | string} @go(EnvironmentVariables,map[string]*string)

	// Available ingress settings. Defaults to "ALLOW_ALL" if unspecified.
	// Default value is ALLOW_ALL.
	// Possible values are: ALLOW_ALL, ALLOW_INTERNAL_ONLY, ALLOW_INTERNAL_AND_GCLB.
	// +kubebuilder:validation:Optional
	ingressSettings?: null | string @go(IngressSettings,*string)

	// The limit on the maximum number of function instances that may coexist at a
	// given time.
	// +kubebuilder:validation:Optional
	maxInstanceCount?: null | float64 @go(MaxInstanceCount,*float64)

	// Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.
	// +kubebuilder:validation:Optional
	maxInstanceRequestConcurrency?: null | float64 @go(MaxInstanceRequestConcurrency,*float64)

	// The limit on the minimum number of function instances that may coexist at a
	// given time.
	// +kubebuilder:validation:Optional
	minInstanceCount?: null | float64 @go(MinInstanceCount,*float64)

	// Secret environment variables configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	secretEnvironmentVariables?: [...#SecretEnvironmentVariablesParameters] @go(SecretEnvironmentVariables,[]SecretEnvironmentVariablesParameters)

	// Secret volumes configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	secretVolumes?: [...#SecretVolumesParameters] @go(SecretVolumes,[]SecretVolumesParameters)

	// Name of the service associated with a Function.
	// +kubebuilder:validation:Optional
	service?: null | string @go(Service,*string)

	// The email of the service account for this function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.ServiceAccount
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("email",true)
	// +kubebuilder:validation:Optional
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// The function execution timeout. Execution is considered failed and
	// can be terminated if the function is not completed at the end of the
	// timeout period. Defaults to 60 seconds.
	// +kubebuilder:validation:Optional
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)

	// The Serverless VPC Access connector that this cloud function can connect to.
	// +kubebuilder:validation:Optional
	vpcConnector?: null | string @go(VPCConnector,*string)

	// Available egress settings.
	// Possible values are: VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED, PRIVATE_RANGES_ONLY, ALL_TRAFFIC.
	// +kubebuilder:validation:Optional
	vpcConnectorEgressSettings?: null | string @go(VPCConnectorEgressSettings,*string)
}

#SourceInitParameters: {
	// If provided, get the source from this location in a Cloud Source Repository.
	// Structure is documented below.
	repoSource?: [...#RepoSourceInitParameters] @go(RepoSource,[]RepoSourceInitParameters)

	// If provided, get the source from this location in Google Cloud Storage.
	// Structure is documented below.
	storageSource?: [...#StorageSourceInitParameters] @go(StorageSource,[]StorageSourceInitParameters)
}

#SourceObservation: {
	// If provided, get the source from this location in a Cloud Source Repository.
	// Structure is documented below.
	repoSource?: [...#RepoSourceObservation] @go(RepoSource,[]RepoSourceObservation)

	// If provided, get the source from this location in Google Cloud Storage.
	// Structure is documented below.
	storageSource?: [...#StorageSourceObservation] @go(StorageSource,[]StorageSourceObservation)
}

#SourceParameters: {
	// If provided, get the source from this location in a Cloud Source Repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	repoSource?: [...#RepoSourceParameters] @go(RepoSource,[]RepoSourceParameters)

	// If provided, get the source from this location in Google Cloud Storage.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	storageSource?: [...#StorageSourceParameters] @go(StorageSource,[]StorageSourceParameters)
}

#StorageSourceInitParameters: {
	// Google Cloud Storage generation for the object. If the generation
	// is omitted, the latest generation will be used.
	generation?: null | float64 @go(Generation,*float64)
}

#StorageSourceObservation: {
	// Google Cloud Storage bucket containing the source
	bucket?: null | string @go(Bucket,*string)

	// Google Cloud Storage generation for the object. If the generation
	// is omitted, the latest generation will be used.
	generation?: null | float64 @go(Generation,*float64)

	// Google Cloud Storage object containing the source.
	object?: null | string @go(Object,*string)
}

#StorageSourceParameters: {
	// Google Cloud Storage bucket containing the source
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/storage/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Google Cloud Storage generation for the object. If the generation
	// is omitted, the latest generation will be used.
	// +kubebuilder:validation:Optional
	generation?: null | float64 @go(Generation,*float64)

	// Google Cloud Storage object containing the source.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/storage/v1beta1.BucketObject
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	object?: null | string @go(Object,*string)
}

#VersionsInitParameters: {
	// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mountPath as '/etc/secrets' and path as secret_foo would mount the secret value file at /etc/secrets/secret_foo.
	path?: null | string @go(Path,*string)

	// Version of the secret (version number or the string 'latest'). It is preferable to use latest version with secret volumes as secret value changes are reflected immediately.
	version?: null | string @go(Version,*string)
}

#VersionsObservation: {
	// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mountPath as '/etc/secrets' and path as secret_foo would mount the secret value file at /etc/secrets/secret_foo.
	path?: null | string @go(Path,*string)

	// Version of the secret (version number or the string 'latest'). It is preferable to use latest version with secret volumes as secret value changes are reflected immediately.
	version?: null | string @go(Version,*string)
}

#VersionsParameters: {
	// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mountPath as '/etc/secrets' and path as secret_foo would mount the secret value file at /etc/secrets/secret_foo.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Version of the secret (version number or the string 'latest'). It is preferable to use latest version with secret volumes as secret value changes are reflected immediately.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

// FunctionSpec defines the desired state of Function
#FunctionSpec: {
	forProvider: #FunctionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FunctionInitParameters @go(InitProvider)
}

// FunctionStatus defines the observed state of Function.
#FunctionStatus: {
	atProvider?: #FunctionObservation @go(AtProvider)
}

// Function is the Schema for the Functions API. A Cloud Function that contains user computation executed in response to an event.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Function: {
	spec:    #FunctionSpec   @go(Spec)
	status?: #FunctionStatus @go(Status)
}

// FunctionList contains a list of Functions
#FunctionList: {
	items: [...#Function] @go(Items,[]Function)
}
