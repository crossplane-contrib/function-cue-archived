// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/apigee/v1beta1

package v1beta1

#NATAddressObservation: {
	// an identifier for the resource with format {{instance_id}}/natAddresses/{{name}}
	id?: null | string @go(ID,*string)

	// The allocated NAT IP address.
	ipAddress?: null | string @go(IPAddress,*string)

	// The Apigee instance associated with the Apigee environment,
	// in the format organizations/{{org_name}}/instances/{{instance_name}}.
	instanceId?: null | string @go(InstanceID,*string)

	// State of the NAT IP address.
	state?: null | string @go(State,*string)
}

#NATAddressParameters: {
	// The Apigee instance associated with the Apigee environment,
	// in the format organizations/{{org_name}}/instances/{{instance_name}}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/apigee/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	instanceId?: null | string @go(InstanceID,*string)
}

// NATAddressSpec defines the desired state of NATAddress
#NATAddressSpec: {
	forProvider: #NATAddressParameters @go(ForProvider)
}

// NATAddressStatus defines the observed state of NATAddress.
#NATAddressStatus: {
	atProvider?: #NATAddressObservation @go(AtProvider)
}

// NATAddress is the Schema for the NATAddresss API. Apigee NAT (network address translation) address.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#NATAddress: {
	spec:    #NATAddressSpec   @go(Spec)
	status?: #NATAddressStatus @go(Status)
}

// NATAddressList contains a list of NATAddresss
#NATAddressList: {
	items: [...#NATAddress] @go(Items,[]NATAddress)
}
