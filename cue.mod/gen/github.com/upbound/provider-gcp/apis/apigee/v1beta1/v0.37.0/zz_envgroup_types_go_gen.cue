// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/apigee/v1beta1

package v1beta1

#EnvgroupInitParameters: {
	// Hostnames of the environment group.
	hostnames?: [...null | string] @go(Hostnames,[]*string)
}

#EnvgroupObservation: {
	// Hostnames of the environment group.
	hostnames?: [...null | string] @go(Hostnames,[]*string)

	// an identifier for the resource with format {{org_id}}/envgroups/{{name}}
	id?: null | string @go(ID,*string)

	// The Apigee Organization associated with the Apigee environment group,
	// in the format organizations/{{org_name}}.
	orgId?: null | string @go(OrgID,*string)
}

#EnvgroupParameters: {
	// Hostnames of the environment group.
	// +kubebuilder:validation:Optional
	hostnames?: [...null | string] @go(Hostnames,[]*string)

	// The Apigee Organization associated with the Apigee environment group,
	// in the format organizations/{{org_name}}.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/apigee/v1beta1.Organization
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	orgId?: null | string @go(OrgID,*string)
}

// EnvgroupSpec defines the desired state of Envgroup
#EnvgroupSpec: {
	forProvider: #EnvgroupParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EnvgroupInitParameters @go(InitProvider)
}

// EnvgroupStatus defines the observed state of Envgroup.
#EnvgroupStatus: {
	atProvider?: #EnvgroupObservation @go(AtProvider)
}

// Envgroup is the Schema for the Envgroups API. An
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Envgroup: {
	spec:    #EnvgroupSpec   @go(Spec)
	status?: #EnvgroupStatus @go(Status)
}

// EnvgroupList contains a list of Envgroups
#EnvgroupList: {
	items: [...#Envgroup] @go(Items,[]Envgroup)
}
