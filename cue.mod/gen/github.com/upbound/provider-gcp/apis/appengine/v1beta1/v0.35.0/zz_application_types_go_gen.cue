// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/appengine/v1beta1

package v1beta1

#ApplicationInitParameters: {
	// The domain to authenticate users with when using App Engine's User API.
	authDomain?: null | string @go(AuthDomain,*string)

	// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
	// Can be CLOUD_FIRESTORE or CLOUD_DATASTORE_COMPATIBILITY for new
	// instances.  To support old instances, the value CLOUD_DATASTORE is accepted by the provider, but will be rejected by the API.
	// To create a Cloud Firestore database without creating an App Engine application, use the
	// google_firestore_database
	// resource instead.
	databaseType?: null | string @go(DatabaseType,*string)

	// A block of optional settings to configure specific App Engine features:
	featureSettings?: [...#FeatureSettingsInitParameters] @go(FeatureSettings,[]FeatureSettingsInitParameters)

	// Settings for enabling Cloud Identity Aware Proxy
	iap?: [...#IapInitParameters] @go(Iap,[]IapInitParameters)

	// The location
	// to serve the app from.
	locationId?: null | string @go(LocationID,*string)

	// The serving status of the app.
	servingStatus?: null | string @go(ServingStatus,*string)
}

#ApplicationObservation: {
	// Identifier of the app, usually {PROJECT_ID}
	appId?: null | string @go(AppID,*string)

	// The domain to authenticate users with when using App Engine's User API.
	authDomain?: null | string @go(AuthDomain,*string)

	// The GCS bucket code is being stored in for this app.
	codeBucket?: null | string @go(CodeBucket,*string)

	// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
	// Can be CLOUD_FIRESTORE or CLOUD_DATASTORE_COMPATIBILITY for new
	// instances.  To support old instances, the value CLOUD_DATASTORE is accepted by the provider, but will be rejected by the API.
	// To create a Cloud Firestore database without creating an App Engine application, use the
	// google_firestore_database
	// resource instead.
	databaseType?: null | string @go(DatabaseType,*string)

	// The GCS bucket content is being stored in for this app.
	defaultBucket?: null | string @go(DefaultBucket,*string)

	// The default hostname for this app.
	defaultHostname?: null | string @go(DefaultHostname,*string)

	// A block of optional settings to configure specific App Engine features:
	featureSettings?: [...#FeatureSettingsObservation] @go(FeatureSettings,[]FeatureSettingsObservation)

	// The GCR domain used for storing managed Docker images for this app.
	gcrDomain?: null | string @go(GcrDomain,*string)

	// an identifier for the resource with format {{project}}
	id?: null | string @go(ID,*string)

	// Settings for enabling Cloud Identity Aware Proxy
	iap?: [...#IapObservation] @go(Iap,[]IapObservation)

	// The location
	// to serve the app from.
	locationId?: null | string @go(LocationID,*string)

	// Unique name of the app, usually apps/{PROJECT_ID}
	name?: null | string @go(Name,*string)

	// The project ID to create the application under.
	// ~>NOTE: GCP only accepts project ID, not project number. If you are using number,
	// you may get a "Permission denied" error.
	project?: null | string @go(Project,*string)

	// The serving status of the app.
	servingStatus?: null | string @go(ServingStatus,*string)

	// A list of dispatch rule blocks. Each block has a domain, path, and service field.
	urlDispatchRule?: [...#URLDispatchRuleObservation] @go(URLDispatchRule,[]URLDispatchRuleObservation)
}

#ApplicationParameters: {
	// The domain to authenticate users with when using App Engine's User API.
	// +kubebuilder:validation:Optional
	authDomain?: null | string @go(AuthDomain,*string)

	// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
	// Can be CLOUD_FIRESTORE or CLOUD_DATASTORE_COMPATIBILITY for new
	// instances.  To support old instances, the value CLOUD_DATASTORE is accepted by the provider, but will be rejected by the API.
	// To create a Cloud Firestore database without creating an App Engine application, use the
	// google_firestore_database
	// resource instead.
	// +kubebuilder:validation:Optional
	databaseType?: null | string @go(DatabaseType,*string)

	// A block of optional settings to configure specific App Engine features:
	// +kubebuilder:validation:Optional
	featureSettings?: [...#FeatureSettingsParameters] @go(FeatureSettings,[]FeatureSettingsParameters)

	// Settings for enabling Cloud Identity Aware Proxy
	// +kubebuilder:validation:Optional
	iap?: [...#IapParameters] @go(Iap,[]IapParameters)

	// The location
	// to serve the app from.
	// +kubebuilder:validation:Optional
	locationId?: null | string @go(LocationID,*string)

	// The project ID to create the application under.
	// ~>NOTE: GCP only accepts project ID, not project number. If you are using number,
	// you may get a "Permission denied" error.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.Project
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("project_id",false)
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The serving status of the app.
	// +kubebuilder:validation:Optional
	servingStatus?: null | string @go(ServingStatus,*string)
}

#FeatureSettingsInitParameters: {
	// Set to false to use the legacy health check instead of the readiness
	// and liveness checks.
	splitHealthChecks?: null | bool @go(SplitHealthChecks,*bool)
}

#FeatureSettingsObservation: {
	// Set to false to use the legacy health check instead of the readiness
	// and liveness checks.
	splitHealthChecks?: null | bool @go(SplitHealthChecks,*bool)
}

#FeatureSettingsParameters: {
	// Set to false to use the legacy health check instead of the readiness
	// and liveness checks.
	// +kubebuilder:validation:Optional
	splitHealthChecks?: null | bool @go(SplitHealthChecks,*bool)
}

#IapInitParameters: {
	// Whether the serving infrastructure will authenticate and authorize all incoming requests.
	// (default is false)
	enabled?: null | bool @go(Enabled,*bool)

	// OAuth2 client ID to use for the authentication flow.
	oauth2ClientId?: null | string @go(Oauth2ClientID,*string)
}

#IapObservation: {
	// Whether the serving infrastructure will authenticate and authorize all incoming requests.
	// (default is false)
	enabled?: null | bool @go(Enabled,*bool)

	// OAuth2 client ID to use for the authentication flow.
	oauth2ClientId?: null | string @go(Oauth2ClientID,*string)
}

#IapParameters: {
	// Whether the serving infrastructure will authenticate and authorize all incoming requests.
	// (default is false)
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// OAuth2 client ID to use for the authentication flow.
	// +kubebuilder:validation:Optional
	oauth2ClientId?: null | string @go(Oauth2ClientID,*string)
}

#URLDispatchRuleInitParameters: {
}

#URLDispatchRuleObservation: {
	domain?:  null | string @go(Domain,*string)
	path?:    null | string @go(Path,*string)
	service?: null | string @go(Service,*string)
}

#URLDispatchRuleParameters: {
}

// ApplicationSpec defines the desired state of Application
#ApplicationSpec: {
	forProvider: #ApplicationParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ApplicationInitParameters @go(InitProvider)
}

// ApplicationStatus defines the observed state of Application.
#ApplicationStatus: {
	atProvider?: #ApplicationObservation @go(AtProvider)
}

// Application is the Schema for the Applications API. Allows management of an App Engine application.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Application: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.locationId) || has(self.initProvider.locationId)",message="locationId is a required parameter"
	spec:    #ApplicationSpec   @go(Spec)
	status?: #ApplicationStatus @go(Status)
}

// ApplicationList contains a list of Applications
#ApplicationList: {
	items: [...#Application] @go(Items,[]Application)
}
