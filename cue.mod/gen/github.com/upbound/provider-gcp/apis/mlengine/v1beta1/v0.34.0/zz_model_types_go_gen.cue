// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/mlengine/v1beta1

package v1beta1

#DefaultVersionObservation: {
	// The name specified for the version when it was created.
	name?: null | string @go(Name,*string)
}

#DefaultVersionParameters: {
	// The name specified for the version when it was created.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)
}

#ModelObservation: {
	// The default version of the model. This version will be used to handle
	// prediction requests that do not specify a version.
	// Structure is documented below.
	defaultVersion?: [...#DefaultVersionObservation] @go(DefaultVersion,[]DefaultVersionObservation)

	// The description specified for the model when it was created.
	description?: null | string @go(Description,*string)

	// an identifier for the resource with format projects/{{project}}/models/{{name}}
	id?: null | string @go(ID,*string)

	// One or more labels that you can add, to organize your models.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The name specified for the model.
	name?: null | string @go(Name,*string)

	// If true, online prediction nodes send stderr and stdout streams to Stackdriver Logging
	onlinePredictionConsoleLogging?: null | bool @go(OnlinePredictionConsoleLogging,*bool)

	// If true, online prediction access logs are sent to StackDriver Logging.
	onlinePredictionLogging?: null | bool @go(OnlinePredictionLogging,*bool)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The list of regions where the model is going to be deployed.
	// Currently only one region per model is supported
	regions?: [...null | string] @go(Regions,[]*string)
}

#ModelParameters: {
	// The default version of the model. This version will be used to handle
	// prediction requests that do not specify a version.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	defaultVersion?: [...#DefaultVersionParameters] @go(DefaultVersion,[]DefaultVersionParameters)

	// The description specified for the model when it was created.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// One or more labels that you can add, to organize your models.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The name specified for the model.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// If true, online prediction nodes send stderr and stdout streams to Stackdriver Logging
	// +kubebuilder:validation:Optional
	onlinePredictionConsoleLogging?: null | bool @go(OnlinePredictionConsoleLogging,*bool)

	// If true, online prediction access logs are sent to StackDriver Logging.
	// +kubebuilder:validation:Optional
	onlinePredictionLogging?: null | bool @go(OnlinePredictionLogging,*bool)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The list of regions where the model is going to be deployed.
	// Currently only one region per model is supported
	// +kubebuilder:validation:Optional
	regions?: [...null | string] @go(Regions,[]*string)
}

// ModelSpec defines the desired state of Model
#ModelSpec: {
	forProvider: #ModelParameters @go(ForProvider)
}

// ModelStatus defines the observed state of Model.
#ModelStatus: {
	atProvider?: #ModelObservation @go(AtProvider)
}

// Model is the Schema for the Models API. Represents a machine learning solution.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Model: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	spec:    #ModelSpec   @go(Spec)
	status?: #ModelStatus @go(Status)
}

// ModelList contains a list of Models
#ModelList: {
	items: [...#Model] @go(Items,[]Model)
}
