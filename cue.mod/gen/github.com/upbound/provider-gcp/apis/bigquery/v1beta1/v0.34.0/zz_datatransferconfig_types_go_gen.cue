// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/bigquery/v1beta1

package v1beta1

#DataTransferConfigObservation: {
	// The number of days to look back to automatically refresh the data.
	// For example, if dataRefreshWindowDays = 10, then every day BigQuery
	// reingests data for [today-10, today-1], rather than ingesting data for
	// just [today-1]. Only valid if the data source supports the feature.
	// Set the value to 0 to use the default value.
	dataRefreshWindowDays?: null | float64 @go(DataRefreshWindowDays,*float64)

	// The data source id. Cannot be changed once the transfer config is created.
	dataSourceId?: null | string @go(DataSourceID,*string)

	// The BigQuery target dataset id.
	destinationDatasetId?: null | string @go(DestinationDatasetID,*string)

	// When set to true, no runs are scheduled for a given transfer.
	disabled?: null | bool @go(Disabled,*bool)

	// The user specified display name for the transfer config.
	displayName?: null | string @go(DisplayName,*string)

	// Email notifications will be sent according to these preferences to the
	// email address of the user who owns this transfer config.
	// Structure is documented below.
	emailPreferences?: [...#EmailPreferencesObservation] @go(EmailPreferences,[]EmailPreferencesObservation)

	// an identifier for the resource with format {{name}}
	id?: null | string @go(ID,*string)

	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	location?: null | string @go(Location,*string)

	// The resource name of the transfer config. Transfer config names have the
	// form projects/{projectId}/locations/{location}/transferConfigs/{configId}.
	// Where configId is usually a uuid, but this is not required.
	// The name is ignored when creating a transfer config.
	name?: null | string @go(Name,*string)

	// Pub/Sub topic where notifications will be sent after transfer runs
	// associated with this transfer config finish.
	notificationPubsubTopic?: null | string @go(NotificationPubsubTopic,*string)

	// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer'
	// section for each data source. For example the parameters for Cloud Storage transfers are listed here:
	// https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
	// NOTE : If you are attempting to update a parameter that cannot be updated (due to api limitations) please force recreation of the resource.
	params?: {[string]: null | string} @go(Params,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Data transfer schedule. If the data source does not support a custom
	// schedule, this should be empty. If it is empty, the default value for
	// the data source will be used. The specified times are in UTC. Examples
	// of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
	// jun 13:15, and first sunday of quarter 00:00. See more explanation
	// about the format here:
	// https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: the granularity should be at least 8 hours, or less frequent.
	schedule?: null | string @go(Schedule,*string)

	// Options customizing the data transfer schedule.
	// Structure is documented below.
	scheduleOptions?: [...#ScheduleOptionsObservation] @go(ScheduleOptions,[]ScheduleOptionsObservation)

	// Service account email. If this field is set, transfer config will
	// be created with this service account credentials. It requires that
	// requesting user calling this API has permissions to act as this service account.
	serviceAccountName?: null | string @go(ServiceAccountName,*string)
}

#DataTransferConfigParameters: {
	// The number of days to look back to automatically refresh the data.
	// For example, if dataRefreshWindowDays = 10, then every day BigQuery
	// reingests data for [today-10, today-1], rather than ingesting data for
	// just [today-1]. Only valid if the data source supports the feature.
	// Set the value to 0 to use the default value.
	// +kubebuilder:validation:Optional
	dataRefreshWindowDays?: null | float64 @go(DataRefreshWindowDays,*float64)

	// The data source id. Cannot be changed once the transfer config is created.
	// +kubebuilder:validation:Optional
	dataSourceId?: null | string @go(DataSourceID,*string)

	// The BigQuery target dataset id.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/bigquery/v1beta1.Dataset
	// +kubebuilder:validation:Optional
	destinationDatasetId?: null | string @go(DestinationDatasetID,*string)

	// When set to true, no runs are scheduled for a given transfer.
	// +kubebuilder:validation:Optional
	disabled?: null | bool @go(Disabled,*bool)

	// The user specified display name for the transfer config.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// Email notifications will be sent according to these preferences to the
	// email address of the user who owns this transfer config.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	emailPreferences?: [...#EmailPreferencesParameters] @go(EmailPreferences,[]EmailPreferencesParameters)

	// The geographic location where the transfer config should reside.
	// Examples: US, EU, asia-northeast1. The default value is US.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Pub/Sub topic where notifications will be sent after transfer runs
	// associated with this transfer config finish.
	// +kubebuilder:validation:Optional
	notificationPubsubTopic?: null | string @go(NotificationPubsubTopic,*string)

	// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer'
	// section for each data source. For example the parameters for Cloud Storage transfers are listed here:
	// https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
	// NOTE : If you are attempting to update a parameter that cannot be updated (due to api limitations) please force recreation of the resource.
	// +kubebuilder:validation:Optional
	params?: {[string]: null | string} @go(Params,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Data transfer schedule. If the data source does not support a custom
	// schedule, this should be empty. If it is empty, the default value for
	// the data source will be used. The specified times are in UTC. Examples
	// of valid format: 1st,3rd monday of month 15:30, every wed,fri of jan,
	// jun 13:15, and first sunday of quarter 00:00. See more explanation
	// about the format here:
	// https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
	// NOTE: the granularity should be at least 8 hours, or less frequent.
	// +kubebuilder:validation:Optional
	schedule?: null | string @go(Schedule,*string)

	// Options customizing the data transfer schedule.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	scheduleOptions?: [...#ScheduleOptionsParameters] @go(ScheduleOptions,[]ScheduleOptionsParameters)

	// Service account email. If this field is set, transfer config will
	// be created with this service account credentials. It requires that
	// requesting user calling this API has permissions to act as this service account.
	// +kubebuilder:validation:Optional
	serviceAccountName?: null | string @go(ServiceAccountName,*string)
}

#EmailPreferencesObservation: {
	// If true, email notifications will be sent on transfer run failures.
	enableFailureEmail?: null | bool @go(EnableFailureEmail,*bool)
}

#EmailPreferencesParameters: {
	// If true, email notifications will be sent on transfer run failures.
	// +kubebuilder:validation:Required
	enableFailureEmail?: null | bool @go(EnableFailureEmail,*bool)
}

#ScheduleOptionsObservation: {
	// If true, automatic scheduling of data transfer runs for this
	// configuration will be disabled. The runs can be started on ad-hoc
	// basis using transferConfigs.startManualRuns API. When automatic
	// scheduling is disabled, the TransferConfig.schedule field will
	// be ignored.
	disableAutoScheduling?: null | bool @go(DisableAutoScheduling,*bool)

	// Defines time to stop scheduling transfer runs. A transfer run cannot be
	// scheduled at or after the end time. The end time can be changed at any
	// moment. The time when a data transfer can be triggered manually is not
	// limited by this option.
	endTime?: null | string @go(EndTime,*string)

	// Specifies time to start scheduling transfer runs. The first run will be
	// scheduled at or after the start time according to a recurrence pattern
	// defined in the schedule string. The start time can be changed at any
	// moment. The time when a data transfer can be triggered manually is not
	// limited by this option.
	startTime?: null | string @go(StartTime,*string)
}

#ScheduleOptionsParameters: {
	// If true, automatic scheduling of data transfer runs for this
	// configuration will be disabled. The runs can be started on ad-hoc
	// basis using transferConfigs.startManualRuns API. When automatic
	// scheduling is disabled, the TransferConfig.schedule field will
	// be ignored.
	// +kubebuilder:validation:Optional
	disableAutoScheduling?: null | bool @go(DisableAutoScheduling,*bool)

	// Defines time to stop scheduling transfer runs. A transfer run cannot be
	// scheduled at or after the end time. The end time can be changed at any
	// moment. The time when a data transfer can be triggered manually is not
	// limited by this option.
	// +kubebuilder:validation:Optional
	endTime?: null | string @go(EndTime,*string)

	// Specifies time to start scheduling transfer runs. The first run will be
	// scheduled at or after the start time according to a recurrence pattern
	// defined in the schedule string. The start time can be changed at any
	// moment. The time when a data transfer can be triggered manually is not
	// limited by this option.
	// +kubebuilder:validation:Optional
	startTime?: null | string @go(StartTime,*string)
}

#SensitiveParamsObservation: {
}

// DataTransferConfigSpec defines the desired state of DataTransferConfig
#DataTransferConfigSpec: {
	forProvider: #DataTransferConfigParameters @go(ForProvider)
}

// DataTransferConfigStatus defines the observed state of DataTransferConfig.
#DataTransferConfigStatus: {
	atProvider?: #DataTransferConfigObservation @go(AtProvider)
}

// DataTransferConfig is the Schema for the DataTransferConfigs API. Represents a data transfer configuration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#DataTransferConfig: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.dataSourceId)",message="dataSourceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.params)",message="params is a required parameter"
	spec:    #DataTransferConfigSpec   @go(Spec)
	status?: #DataTransferConfigStatus @go(Status)
}

// DataTransferConfigList contains a list of DataTransferConfigs
#DataTransferConfigList: {
	items: [...#DataTransferConfig] @go(Items,[]DataTransferConfig)
}
