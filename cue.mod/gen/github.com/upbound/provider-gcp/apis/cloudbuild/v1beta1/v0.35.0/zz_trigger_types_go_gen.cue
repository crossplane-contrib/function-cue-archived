// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/cloudbuild/v1beta1

package v1beta1

#ApprovalConfigInitParameters: {
	// Whether or not approval is needed. If this is set on a build, it will become pending when run,
	// and will need to be explicitly approved to start.
	approvalRequired?: null | bool @go(ApprovalRequired,*bool)
}

#ApprovalConfigObservation: {
	// Whether or not approval is needed. If this is set on a build, it will become pending when run,
	// and will need to be explicitly approved to start.
	approvalRequired?: null | bool @go(ApprovalRequired,*bool)
}

#ApprovalConfigParameters: {
	// Whether or not approval is needed. If this is set on a build, it will become pending when run,
	// and will need to be explicitly approved to start.
	// +kubebuilder:validation:Optional
	approvalRequired?: null | bool @go(ApprovalRequired,*bool)
}

#ArtifactsInitParameters: {
	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	images?: [...null | string] @go(Images,[]*string)

	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
	// Files in the workspace matching specified paths globs will be uploaded to the
	// Cloud Storage location using the builder service account's credentials.
	// The location and generation of the uploaded objects will be stored in the Build resource's results field.
	// If any objects fail to be pushed, the build is marked FAILURE.
	// Structure is documented below.
	objects?: [...#ObjectsInitParameters] @go(Objects,[]ObjectsInitParameters)
}

#ArtifactsObservation: {
	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	images?: [...null | string] @go(Images,[]*string)

	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
	// Files in the workspace matching specified paths globs will be uploaded to the
	// Cloud Storage location using the builder service account's credentials.
	// The location and generation of the uploaded objects will be stored in the Build resource's results field.
	// If any objects fail to be pushed, the build is marked FAILURE.
	// Structure is documented below.
	objects?: [...#ObjectsObservation] @go(Objects,[]ObjectsObservation)
}

#ArtifactsParameters: {
	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	// +kubebuilder:validation:Optional
	images?: [...null | string] @go(Images,[]*string)

	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.
	// Files in the workspace matching specified paths globs will be uploaded to the
	// Cloud Storage location using the builder service account's credentials.
	// The location and generation of the uploaded objects will be stored in the Build resource's results field.
	// If any objects fail to be pushed, the build is marked FAILURE.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	objects?: [...#ObjectsParameters] @go(Objects,[]ObjectsParameters)
}

#AvailableSecretsInitParameters: {
	// Pairs a secret environment variable with a SecretVersion in Secret Manager.
	// Structure is documented below.
	secretManager?: [...#SecretManagerInitParameters] @go(SecretManager,[]SecretManagerInitParameters)
}

#AvailableSecretsObservation: {
	// Pairs a secret environment variable with a SecretVersion in Secret Manager.
	// Structure is documented below.
	secretManager?: [...#SecretManagerObservation] @go(SecretManager,[]SecretManagerObservation)
}

#AvailableSecretsParameters: {
	// Pairs a secret environment variable with a SecretVersion in Secret Manager.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	secretManager?: [...#SecretManagerParameters] @go(SecretManager,[]SecretManagerParameters)
}

#BitbucketServerTriggerConfigInitParameters: {
	// The Bitbucket server config resource that this trigger config maps to.
	bitbucketServerConfigResource?: null | string @go(BitbucketServerConfigResource,*string)

	// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
	projectKey?: null | string @go(ProjectKey,*string)

	// Filter to match changes in pull requests.
	// Structure is documented below.
	pullRequest?: [...#PullRequestInitParameters] @go(PullRequest,[]PullRequestInitParameters)

	// Filter to match changes in refs like branches, tags.
	// Structure is documented below.
	push?: [...#PushInitParameters] @go(Push,[]PushInitParameters)

	// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.
	// For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
	repoSlug?: null | string @go(RepoSlug,*string)
}

#BitbucketServerTriggerConfigObservation: {
	// The Bitbucket server config resource that this trigger config maps to.
	bitbucketServerConfigResource?: null | string @go(BitbucketServerConfigResource,*string)

	// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
	projectKey?: null | string @go(ProjectKey,*string)

	// Filter to match changes in pull requests.
	// Structure is documented below.
	pullRequest?: [...#PullRequestObservation] @go(PullRequest,[]PullRequestObservation)

	// Filter to match changes in refs like branches, tags.
	// Structure is documented below.
	push?: [...#PushObservation] @go(Push,[]PushObservation)

	// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.
	// For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
	repoSlug?: null | string @go(RepoSlug,*string)
}

#BitbucketServerTriggerConfigParameters: {
	// The Bitbucket server config resource that this trigger config maps to.
	// +kubebuilder:validation:Optional
	bitbucketServerConfigResource?: null | string @go(BitbucketServerConfigResource,*string)

	// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
	// +kubebuilder:validation:Optional
	projectKey?: null | string @go(ProjectKey,*string)

	// Filter to match changes in pull requests.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	pullRequest?: [...#PullRequestParameters] @go(PullRequest,[]PullRequestParameters)

	// Filter to match changes in refs like branches, tags.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	push?: [...#PushParameters] @go(Push,[]PushParameters)

	// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.
	// For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
	// +kubebuilder:validation:Optional
	repoSlug?: null | string @go(RepoSlug,*string)
}

#BuildInitParameters: {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	// Structure is documented below.
	artifacts?: [...#ArtifactsInitParameters] @go(Artifacts,[]ArtifactsInitParameters)

	// Secrets and secret environment variables.
	// Structure is documented below.
	availableSecrets?: [...#AvailableSecretsInitParameters] @go(AvailableSecrets,[]AvailableSecretsInitParameters)

	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	images?: [...null | string] @go(Images,[]*string)

	// Google Cloud Storage bucket where logs should be written.
	// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
	logsBucket?: null | string @go(LogsBucket,*string)

	// Special options for this build.
	// Structure is documented below.
	options?: [...#OptionsInitParameters] @go(Options,[]OptionsInitParameters)

	// TTL in queue for this build. If provided and the build is enqueued longer than this value,
	// the build will expire and the build status will be EXPIRED.
	// The TTL starts ticking from createTime.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	queueTtl?: null | string @go(QueueTTL,*string)

	// Secrets to decrypt using Cloud Key Management Service.
	// Structure is documented below.
	secret?: [...#SecretInitParameters] @go(Secret,[]SecretInitParameters)

	// The location of the source files to build.
	// One of storageSource or repoSource must be provided.
	// Structure is documented below.
	source?: [...#SourceInitParameters] @go(Source,[]SourceInitParameters)

	// The operations to be performed on the workspace.
	// Structure is documented below.
	step?: [...#StepInitParameters] @go(Step,[]StepInitParameters)

	// Substitutions data for Build resource.
	substitutions?: {[string]: null | string} @go(Substitutions,map[string]*string)

	// Tags for annotation of a Build. These are not docker tags.
	tags?: [...null | string] @go(Tags,[]*string)

	// Amount of time that this build should be allowed to run, to second granularity.
	// If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT.
	// This timeout must be equal to or greater than the sum of the timeouts for build steps within the build.
	// The expected format is the number of seconds followed by s.
	// Default time is ten minutes (600s).
	timeout?: null | string @go(Timeout,*string)
}

#BuildObservation: {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	// Structure is documented below.
	artifacts?: [...#ArtifactsObservation] @go(Artifacts,[]ArtifactsObservation)

	// Secrets and secret environment variables.
	// Structure is documented below.
	availableSecrets?: [...#AvailableSecretsObservation] @go(AvailableSecrets,[]AvailableSecretsObservation)

	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	images?: [...null | string] @go(Images,[]*string)

	// Google Cloud Storage bucket where logs should be written.
	// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
	logsBucket?: null | string @go(LogsBucket,*string)

	// Special options for this build.
	// Structure is documented below.
	options?: [...#OptionsObservation] @go(Options,[]OptionsObservation)

	// TTL in queue for this build. If provided and the build is enqueued longer than this value,
	// the build will expire and the build status will be EXPIRED.
	// The TTL starts ticking from createTime.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	queueTtl?: null | string @go(QueueTTL,*string)

	// Secrets to decrypt using Cloud Key Management Service.
	// Structure is documented below.
	secret?: [...#SecretObservation] @go(Secret,[]SecretObservation)

	// The location of the source files to build.
	// One of storageSource or repoSource must be provided.
	// Structure is documented below.
	source?: [...#SourceObservation] @go(Source,[]SourceObservation)

	// The operations to be performed on the workspace.
	// Structure is documented below.
	step?: [...#StepObservation] @go(Step,[]StepObservation)

	// Substitutions data for Build resource.
	substitutions?: {[string]: null | string} @go(Substitutions,map[string]*string)

	// Tags for annotation of a Build. These are not docker tags.
	tags?: [...null | string] @go(Tags,[]*string)

	// Amount of time that this build should be allowed to run, to second granularity.
	// If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT.
	// This timeout must be equal to or greater than the sum of the timeouts for build steps within the build.
	// The expected format is the number of seconds followed by s.
	// Default time is ten minutes (600s).
	timeout?: null | string @go(Timeout,*string)
}

#BuildParameters: {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	artifacts?: [...#ArtifactsParameters] @go(Artifacts,[]ArtifactsParameters)

	// Secrets and secret environment variables.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	availableSecrets?: [...#AvailableSecretsParameters] @go(AvailableSecrets,[]AvailableSecretsParameters)

	// A list of images to be pushed upon the successful completion of all build steps.
	// The images are pushed using the builder service account's credentials.
	// The digests of the pushed images will be stored in the Build resource's results field.
	// If any of the images fail to be pushed, the build status is marked FAILURE.
	// +kubebuilder:validation:Optional
	images?: [...null | string] @go(Images,[]*string)

	// Google Cloud Storage bucket where logs should be written.
	// Logs file names will be of the format ${logsBucket}/log-${build_id}.txt.
	// +kubebuilder:validation:Optional
	logsBucket?: null | string @go(LogsBucket,*string)

	// Special options for this build.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	options?: [...#OptionsParameters] @go(Options,[]OptionsParameters)

	// TTL in queue for this build. If provided and the build is enqueued longer than this value,
	// the build will expire and the build status will be EXPIRED.
	// The TTL starts ticking from createTime.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	queueTtl?: null | string @go(QueueTTL,*string)

	// Secrets to decrypt using Cloud Key Management Service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	secret?: [...#SecretParameters] @go(Secret,[]SecretParameters)

	// The location of the source files to build.
	// One of storageSource or repoSource must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	source?: [...#SourceParameters] @go(Source,[]SourceParameters)

	// The operations to be performed on the workspace.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	step?: [...#StepParameters] @go(Step,[]StepParameters)

	// Substitutions data for Build resource.
	// +kubebuilder:validation:Optional
	substitutions?: {[string]: null | string} @go(Substitutions,map[string]*string)

	// Tags for annotation of a Build. These are not docker tags.
	// +kubebuilder:validation:Optional
	tags?: [...null | string] @go(Tags,[]*string)

	// Amount of time that this build should be allowed to run, to second granularity.
	// If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT.
	// This timeout must be equal to or greater than the sum of the timeouts for build steps within the build.
	// The expected format is the number of seconds followed by s.
	// Default time is ten minutes (600s).
	// +kubebuilder:validation:Optional
	timeout?: null | string @go(Timeout,*string)
}

#GitFileSourceInitParameters: {
	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	githubEnterpriseConfig?: null | string @go(GithubEnterpriseConfig,*string)

	// The path of the file, with the repo root as the root of the path.
	path?: null | string @go(Path,*string)

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	repoType?: null | string @go(RepoType,*string)

	// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
	// filename . This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
	// If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
	revision?: null | string @go(Revision,*string)

	// The URI of the repo . If unspecified, the repo from which the trigger
	// invocation originated is assumed to be the repo from which to read the specified path.
	uri?: null | string @go(URI,*string)
}

#GitFileSourceObservation: {
	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	githubEnterpriseConfig?: null | string @go(GithubEnterpriseConfig,*string)

	// The path of the file, with the repo root as the root of the path.
	path?: null | string @go(Path,*string)

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	repoType?: null | string @go(RepoType,*string)

	// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
	// filename . This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
	// If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
	revision?: null | string @go(Revision,*string)

	// The URI of the repo . If unspecified, the repo from which the trigger
	// invocation originated is assumed to be the repo from which to read the specified path.
	uri?: null | string @go(URI,*string)
}

#GitFileSourceParameters: {
	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	// +kubebuilder:validation:Optional
	githubEnterpriseConfig?: null | string @go(GithubEnterpriseConfig,*string)

	// The path of the file, with the repo root as the root of the path.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	// +kubebuilder:validation:Optional
	repoType?: null | string @go(RepoType,*string)

	// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
	// filename . This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
	// If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
	// +kubebuilder:validation:Optional
	revision?: null | string @go(Revision,*string)

	// The URI of the repo . If unspecified, the repo from which the trigger
	// invocation originated is assumed to be the repo from which to read the specified path.
	// +kubebuilder:validation:Optional
	uri?: null | string @go(URI,*string)
}

#GithubInitParameters: {
	// The resource name of the github enterprise config that should be applied to this installation.
	// For example: "projects/{$projectId}/locations/{$locationId}/githubEnterpriseConfigs/{$configId}"
	enterpriseConfigResourceName?: null | string @go(EnterpriseConfigResourceName,*string)

	// Name of the repository. For example: The name for
	// https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	name?: null | string @go(Name,*string)

	// Owner of the repository. For example: The owner for
	// https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	owner?: null | string @go(Owner,*string)

	// filter to match changes in pull requests. Specify only one of pull_request or push.
	// Structure is documented below.
	pullRequest?: [...#GithubPullRequestInitParameters] @go(PullRequest,[]GithubPullRequestInitParameters)

	// filter to match changes in refs, like branches or tags. Specify only one of pull_request or push.
	// Structure is documented below.
	push?: [...#GithubPushInitParameters] @go(Push,[]GithubPushInitParameters)
}

#GithubObservation: {
	// The resource name of the github enterprise config that should be applied to this installation.
	// For example: "projects/{$projectId}/locations/{$locationId}/githubEnterpriseConfigs/{$configId}"
	enterpriseConfigResourceName?: null | string @go(EnterpriseConfigResourceName,*string)

	// Name of the repository. For example: The name for
	// https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	name?: null | string @go(Name,*string)

	// Owner of the repository. For example: The owner for
	// https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	owner?: null | string @go(Owner,*string)

	// filter to match changes in pull requests. Specify only one of pull_request or push.
	// Structure is documented below.
	pullRequest?: [...#GithubPullRequestObservation] @go(PullRequest,[]GithubPullRequestObservation)

	// filter to match changes in refs, like branches or tags. Specify only one of pull_request or push.
	// Structure is documented below.
	push?: [...#GithubPushObservation] @go(Push,[]GithubPushObservation)
}

#GithubParameters: {
	// The resource name of the github enterprise config that should be applied to this installation.
	// For example: "projects/{$projectId}/locations/{$locationId}/githubEnterpriseConfigs/{$configId}"
	// +kubebuilder:validation:Optional
	enterpriseConfigResourceName?: null | string @go(EnterpriseConfigResourceName,*string)

	// Name of the repository. For example: The name for
	// https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Owner of the repository. For example: The owner for
	// https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	// +kubebuilder:validation:Optional
	owner?: null | string @go(Owner,*string)

	// filter to match changes in pull requests. Specify only one of pull_request or push.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	pullRequest?: [...#GithubPullRequestParameters] @go(PullRequest,[]GithubPullRequestParameters)

	// filter to match changes in refs, like branches or tags. Specify only one of pull_request or push.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	push?: [...#GithubPushParameters] @go(Push,[]GithubPushParameters)
}

#GithubPullRequestInitParameters: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	branch?: null | string @go(Branch,*string)

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	commentControl?: null | string @go(CommentControl,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)
}

#GithubPullRequestObservation: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	branch?: null | string @go(Branch,*string)

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	commentControl?: null | string @go(CommentControl,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)
}

#GithubPullRequestParameters: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	branch?: null | string @go(Branch,*string)

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	// +kubebuilder:validation:Optional
	commentControl?: null | string @go(CommentControl,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	invertRegex?: null | bool @go(InvertRegex,*bool)
}

#GithubPushInitParameters: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	branch?: null | string @go(Branch,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	tag?: null | string @go(Tag,*string)
}

#GithubPushObservation: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	branch?: null | string @go(Branch,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	tag?: null | string @go(Tag,*string)
}

#GithubPushParameters: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	branch?: null | string @go(Branch,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	tag?: null | string @go(Tag,*string)
}

#ObjectsInitParameters: {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
	// Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
	// this location as a prefix.
	location?: null | string @go(Location,*string)

	// Path globs used to match files in the build's workspace.
	paths?: [...null | string] @go(Paths,[]*string)
}

#ObjectsObservation: {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
	// Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
	// this location as a prefix.
	location?: null | string @go(Location,*string)

	// Path globs used to match files in the build's workspace.
	paths?: [...null | string] @go(Paths,[]*string)

	// Output only. Stores timing information for executing this
	// build step.
	timing?: [...#TimingObservation] @go(Timing,[]TimingObservation)
}

#ObjectsParameters: {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".
	// Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
	// this location as a prefix.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Path globs used to match files in the build's workspace.
	// +kubebuilder:validation:Optional
	paths?: [...null | string] @go(Paths,[]*string)
}

#OptionsInitParameters: {
	// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
	// some of the space will be used by the operating system and build utilities.
	// Also note that this is the minimum disk size that will be allocated for the build --
	// the build may run with a larger disk than requested. At present, the maximum disk size
	// is 1000GB; builds that request more than the maximum are rejected with an error.
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// Option to specify whether or not to apply bash style string operations to the substitutions.
	// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	dynamicSubstitutions?: null | bool @go(DynamicSubstitutions,*bool)

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	env?: [...null | string] @go(Env,[]*string)

	// Option to define build log streaming behavior to Google Cloud Storage.
	// Possible values are: STREAM_DEFAULT, STREAM_ON, STREAM_OFF.
	logStreamingOption?: null | string @go(LogStreamingOption,*string)

	// Option to specify the logging mode, which determines if and where build logs are stored.
	// Possible values are: LOGGING_UNSPECIFIED, LEGACY, GCS_ONLY, STACKDRIVER_ONLY, CLOUD_LOGGING_ONLY, NONE.
	logging?: null | string @go(Logging,*string)

	// Compute Engine machine type on which to run the build.
	// Possible values are: UNSPECIFIED, N1_HIGHCPU_8, N1_HIGHCPU_32, E2_HIGHCPU_8, E2_HIGHCPU_32.
	machineType?: null | string @go(MachineType,*string)

	// Requested verifiability options.
	// Possible values are: NOT_VERIFIED, VERIFIED.
	requestedVerifyOption?: null | string @go(RequestedVerifyOption,*string)

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	secretEnv?: [...null | string] @go(SecretEnv,[]*string)

	// Requested hash for SourceProvenance.
	// Each value may be one of: NONE, SHA256, MD5.
	sourceProvenanceHash?: [...null | string] @go(SourceProvenanceHash,[]*string)

	// Option to specify behavior when there is an error in the substitution checks.
	// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
	// in the build configuration file.
	// Possible values are: MUST_MATCH, ALLOW_LOOSE.
	substitutionOption?: null | string @go(SubstitutionOption,*string)

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	volumes?: [...#VolumesInitParameters] @go(Volumes,[]VolumesInitParameters)

	// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
	// This field is experimental.
	workerPool?: null | string @go(WorkerPool,*string)
}

#OptionsObservation: {
	// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
	// some of the space will be used by the operating system and build utilities.
	// Also note that this is the minimum disk size that will be allocated for the build --
	// the build may run with a larger disk than requested. At present, the maximum disk size
	// is 1000GB; builds that request more than the maximum are rejected with an error.
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// Option to specify whether or not to apply bash style string operations to the substitutions.
	// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	dynamicSubstitutions?: null | bool @go(DynamicSubstitutions,*bool)

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	env?: [...null | string] @go(Env,[]*string)

	// Option to define build log streaming behavior to Google Cloud Storage.
	// Possible values are: STREAM_DEFAULT, STREAM_ON, STREAM_OFF.
	logStreamingOption?: null | string @go(LogStreamingOption,*string)

	// Option to specify the logging mode, which determines if and where build logs are stored.
	// Possible values are: LOGGING_UNSPECIFIED, LEGACY, GCS_ONLY, STACKDRIVER_ONLY, CLOUD_LOGGING_ONLY, NONE.
	logging?: null | string @go(Logging,*string)

	// Compute Engine machine type on which to run the build.
	// Possible values are: UNSPECIFIED, N1_HIGHCPU_8, N1_HIGHCPU_32, E2_HIGHCPU_8, E2_HIGHCPU_32.
	machineType?: null | string @go(MachineType,*string)

	// Requested verifiability options.
	// Possible values are: NOT_VERIFIED, VERIFIED.
	requestedVerifyOption?: null | string @go(RequestedVerifyOption,*string)

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	secretEnv?: [...null | string] @go(SecretEnv,[]*string)

	// Requested hash for SourceProvenance.
	// Each value may be one of: NONE, SHA256, MD5.
	sourceProvenanceHash?: [...null | string] @go(SourceProvenanceHash,[]*string)

	// Option to specify behavior when there is an error in the substitution checks.
	// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
	// in the build configuration file.
	// Possible values are: MUST_MATCH, ALLOW_LOOSE.
	substitutionOption?: null | string @go(SubstitutionOption,*string)

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	volumes?: [...#VolumesObservation] @go(Volumes,[]VolumesObservation)

	// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
	// This field is experimental.
	workerPool?: null | string @go(WorkerPool,*string)
}

#OptionsParameters: {
	// Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
	// some of the space will be used by the operating system and build utilities.
	// Also note that this is the minimum disk size that will be allocated for the build --
	// the build may run with a larger disk than requested. At present, the maximum disk size
	// is 1000GB; builds that request more than the maximum are rejected with an error.
	// +kubebuilder:validation:Optional
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// Option to specify whether or not to apply bash style string operations to the substitutions.
	// NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	// +kubebuilder:validation:Optional
	dynamicSubstitutions?: null | bool @go(DynamicSubstitutions,*bool)

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	// +kubebuilder:validation:Optional
	env?: [...null | string] @go(Env,[]*string)

	// Option to define build log streaming behavior to Google Cloud Storage.
	// Possible values are: STREAM_DEFAULT, STREAM_ON, STREAM_OFF.
	// +kubebuilder:validation:Optional
	logStreamingOption?: null | string @go(LogStreamingOption,*string)

	// Option to specify the logging mode, which determines if and where build logs are stored.
	// Possible values are: LOGGING_UNSPECIFIED, LEGACY, GCS_ONLY, STACKDRIVER_ONLY, CLOUD_LOGGING_ONLY, NONE.
	// +kubebuilder:validation:Optional
	logging?: null | string @go(Logging,*string)

	// Compute Engine machine type on which to run the build.
	// Possible values are: UNSPECIFIED, N1_HIGHCPU_8, N1_HIGHCPU_32, E2_HIGHCPU_8, E2_HIGHCPU_32.
	// +kubebuilder:validation:Optional
	machineType?: null | string @go(MachineType,*string)

	// Requested verifiability options.
	// Possible values are: NOT_VERIFIED, VERIFIED.
	// +kubebuilder:validation:Optional
	requestedVerifyOption?: null | string @go(RequestedVerifyOption,*string)

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	// +kubebuilder:validation:Optional
	secretEnv?: [...null | string] @go(SecretEnv,[]*string)

	// Requested hash for SourceProvenance.
	// Each value may be one of: NONE, SHA256, MD5.
	// +kubebuilder:validation:Optional
	sourceProvenanceHash?: [...null | string] @go(SourceProvenanceHash,[]*string)

	// Option to specify behavior when there is an error in the substitution checks.
	// NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
	// in the build configuration file.
	// Possible values are: MUST_MATCH, ALLOW_LOOSE.
	// +kubebuilder:validation:Optional
	substitutionOption?: null | string @go(SubstitutionOption,*string)

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	volumes?: [...#VolumesParameters] @go(Volumes,[]VolumesParameters)

	// Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}
	// This field is experimental.
	// +kubebuilder:validation:Optional
	workerPool?: null | string @go(WorkerPool,*string)
}

#PubsubConfigInitParameters: {
	// Service account that will make the push request.
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)
}

#PubsubConfigObservation: {
	// Service account that will make the push request.
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// (Output)
	// Potential issues with the underlying Pub/Sub subscription configuration.
	// Only populated on get requests.
	state?: null | string @go(State,*string)

	// (Output)
	// Output only. Name of the subscription.
	subscription?: null | string @go(Subscription,*string)

	// The name of the topic from which this subscription is receiving messages.
	topic?: null | string @go(Topic,*string)
}

#PubsubConfigParameters: {
	// Service account that will make the push request.
	// +kubebuilder:validation:Optional
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// The name of the topic from which this subscription is receiving messages.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/pubsub/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	topic?: null | string @go(Topic,*string)
}

#PullRequestInitParameters: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	branch?: null | string @go(Branch,*string)

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	commentControl?: null | string @go(CommentControl,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)
}

#PullRequestObservation: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	branch?: null | string @go(Branch,*string)

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	commentControl?: null | string @go(CommentControl,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)
}

#PullRequestParameters: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	branch?: null | string @go(Branch,*string)

	// Configure builds to run whether a repository owner or collaborator need to comment /gcbrun.
	// Possible values are: COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY.
	// +kubebuilder:validation:Optional
	commentControl?: null | string @go(CommentControl,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	invertRegex?: null | bool @go(InvertRegex,*bool)
}

#PushInitParameters: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	branch?: null | string @go(Branch,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	tag?: null | string @go(Tag,*string)
}

#PushObservation: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	branch?: null | string @go(Branch,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	tag?: null | string @go(Tag,*string)
}

#PushParameters: {
	// Regex of branches to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	branch?: null | string @go(Branch,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// Regex of tags to match.
	// The syntax of the regular expressions accepted is the syntax accepted by
	// RE2 and described at https://github.com/google/re2/wiki/Syntax
	// +kubebuilder:validation:Optional
	tag?: null | string @go(Tag,*string)
}

#RepoSourceInitParameters: {
	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	branchName?: null | string @go(BranchName,*string)

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	commitSha?: null | string @go(CommitSha,*string)

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	dir?: null | string @go(Dir,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	projectId?: null | string @go(ProjectID,*string)

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	repoName?: null | string @go(RepoName,*string)

	// Substitutions data for Build resource.
	substitutions?: {[string]: null | string} @go(Substitutions,map[string]*string)

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	tagName?: null | string @go(TagName,*string)
}

#RepoSourceObservation: {
	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	branchName?: null | string @go(BranchName,*string)

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	commitSha?: null | string @go(CommitSha,*string)

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	dir?: null | string @go(Dir,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	projectId?: null | string @go(ProjectID,*string)

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	repoName?: null | string @go(RepoName,*string)

	// Substitutions data for Build resource.
	substitutions?: {[string]: null | string} @go(Substitutions,map[string]*string)

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	tagName?: null | string @go(TagName,*string)
}

#RepoSourceParameters: {
	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	// +kubebuilder:validation:Optional
	branchName?: null | string @go(BranchName,*string)

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// +kubebuilder:validation:Optional
	commitSha?: null | string @go(CommitSha,*string)

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	// +kubebuilder:validation:Optional
	dir?: null | string @go(Dir,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	// +kubebuilder:validation:Optional
	projectId?: null | string @go(ProjectID,*string)

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	// +kubebuilder:validation:Optional
	repoName?: null | string @go(RepoName,*string)

	// Substitutions data for Build resource.
	// +kubebuilder:validation:Optional
	substitutions?: {[string]: null | string} @go(Substitutions,map[string]*string)

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	// +kubebuilder:validation:Optional
	tagName?: null | string @go(TagName,*string)
}

#SecretInitParameters: {
	// Cloud KMS key name to use to decrypt these envs.
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	secretEnv?: {[string]: null | string} @go(SecretEnv,map[string]*string)
}

#SecretManagerInitParameters: {
	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	env?: null | string @go(Env,*string)

	// Resource name of the SecretVersion. In format: projects//secrets//versions/*
	versionName?: null | string @go(VersionName,*string)
}

#SecretManagerObservation: {
	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	env?: null | string @go(Env,*string)

	// Resource name of the SecretVersion. In format: projects//secrets//versions/*
	versionName?: null | string @go(VersionName,*string)
}

#SecretManagerParameters: {
	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	// +kubebuilder:validation:Optional
	env?: null | string @go(Env,*string)

	// Resource name of the SecretVersion. In format: projects//secrets//versions/*
	// +kubebuilder:validation:Optional
	versionName?: null | string @go(VersionName,*string)
}

#SecretObservation: {
	// Cloud KMS key name to use to decrypt these envs.
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	secretEnv?: {[string]: null | string} @go(SecretEnv,map[string]*string)
}

#SecretParameters: {
	// Cloud KMS key name to use to decrypt these envs.
	// +kubebuilder:validation:Optional
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	// +kubebuilder:validation:Optional
	secretEnv?: {[string]: null | string} @go(SecretEnv,map[string]*string)
}

#SourceInitParameters: {
	// Location of the source in a Google Cloud Source Repository.
	// Structure is documented below.
	repoSource?: [...#RepoSourceInitParameters] @go(RepoSource,[]RepoSourceInitParameters)

	// Location of the source in an archive file in Google Cloud Storage.
	// Structure is documented below.
	storageSource?: [...#StorageSourceInitParameters] @go(StorageSource,[]StorageSourceInitParameters)
}

#SourceObservation: {
	// Location of the source in a Google Cloud Source Repository.
	// Structure is documented below.
	repoSource?: [...#RepoSourceObservation] @go(RepoSource,[]RepoSourceObservation)

	// Location of the source in an archive file in Google Cloud Storage.
	// Structure is documented below.
	storageSource?: [...#StorageSourceObservation] @go(StorageSource,[]StorageSourceObservation)
}

#SourceParameters: {
	// Location of the source in a Google Cloud Source Repository.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	repoSource?: [...#RepoSourceParameters] @go(RepoSource,[]RepoSourceParameters)

	// Location of the source in an archive file in Google Cloud Storage.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	storageSource?: [...#StorageSourceParameters] @go(StorageSource,[]StorageSourceParameters)
}

#SourceToBuildInitParameters: {
	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	githubEnterpriseConfig?: null | string @go(GithubEnterpriseConfig,*string)

	// The branch or tag to use. Must start with "refs/" .
	ref?: null | string @go(Ref,*string)

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	repoType?: null | string @go(RepoType,*string)

	// The URI of the repo.
	uri?: null | string @go(URI,*string)
}

#SourceToBuildObservation: {
	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	githubEnterpriseConfig?: null | string @go(GithubEnterpriseConfig,*string)

	// The branch or tag to use. Must start with "refs/" .
	ref?: null | string @go(Ref,*string)

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	repoType?: null | string @go(RepoType,*string)

	// The URI of the repo.
	uri?: null | string @go(URI,*string)
}

#SourceToBuildParameters: {
	// The full resource name of the github enterprise config.
	// Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}.
	// +kubebuilder:validation:Optional
	githubEnterpriseConfig?: null | string @go(GithubEnterpriseConfig,*string)

	// The branch or tag to use. Must start with "refs/" .
	// +kubebuilder:validation:Optional
	ref?: null | string @go(Ref,*string)

	// The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	// Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER
	// Possible values are: UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER.
	// +kubebuilder:validation:Optional
	repoType?: null | string @go(RepoType,*string)

	// The URI of the repo.
	// +kubebuilder:validation:Optional
	uri?: null | string @go(URI,*string)
}

#StepInitParameters: {
	// Allow this build step to fail without failing the entire build if and
	// only if the exit code is one of the specified codes.
	// If allowFailure is also specified, this field will take precedence.
	allowExitCodes?: [...null | float64] @go(AllowExitCodes,[]*float64)

	// Allow this build step to fail without failing the entire build.
	// If false, the entire build will fail if this step fails. Otherwise, the
	// build will succeed, but this step will still have a failure status.
	// Error information will be reported in the failureDetail field.
	// allowExitCodes takes precedence over this field.
	allowFailure?: null | bool @go(AllowFailure,*bool)

	// A list of arguments that will be presented to the step when it is started.
	// If the image used to run the step's container has an entrypoint, the args
	// are used as arguments to that entrypoint. If the image does not define an
	// entrypoint, the first element in args is used as the entrypoint, and the
	// remainder will be used as arguments.
	args?: [...null | string] @go(Args,[]*string)

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	dir?: null | string @go(Dir,*string)

	// Entrypoint to be used instead of the build step image's
	// default entrypoint.
	// If unset, the image's default entrypoint is used
	entrypoint?: null | string @go(Entrypoint,*string)

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	env?: [...null | string] @go(Env,[]*string)

	// Unique identifier for this build step, used in wait_for to
	// reference this build step as a dependency.
	id?: null | string @go(ID,*string)

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	name?: null | string @go(Name,*string)

	// A shell script to be executed in the step.
	// When script is provided, the user cannot specify the entrypoint or args.
	script?: null | string @go(Script,*string)

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	secretEnv?: [...null | string] @go(SecretEnv,[]*string)

	// Time limit for executing this build step. If not defined,
	// the step has no
	// time limit and will be allowed to continue to run until either it
	// completes or the build itself times out.
	timeout?: null | string @go(Timeout,*string)

	// Output only. Stores timing information for executing this
	// build step.
	timing?: null | string @go(Timing,*string)

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	volumes?: [...#StepVolumesInitParameters] @go(Volumes,[]StepVolumesInitParameters)

	// The ID(s) of the step(s) that this build step depends on.
	// This build step will not start until all the build steps in wait_for
	// have completed successfully. If wait_for is empty, this build step
	// will start when all previous build steps in the Build.Steps list
	// have completed successfully.
	waitFor?: [...null | string] @go(WaitFor,[]*string)
}

#StepObservation: {
	// Allow this build step to fail without failing the entire build if and
	// only if the exit code is one of the specified codes.
	// If allowFailure is also specified, this field will take precedence.
	allowExitCodes?: [...null | float64] @go(AllowExitCodes,[]*float64)

	// Allow this build step to fail without failing the entire build.
	// If false, the entire build will fail if this step fails. Otherwise, the
	// build will succeed, but this step will still have a failure status.
	// Error information will be reported in the failureDetail field.
	// allowExitCodes takes precedence over this field.
	allowFailure?: null | bool @go(AllowFailure,*bool)

	// A list of arguments that will be presented to the step when it is started.
	// If the image used to run the step's container has an entrypoint, the args
	// are used as arguments to that entrypoint. If the image does not define an
	// entrypoint, the first element in args is used as the entrypoint, and the
	// remainder will be used as arguments.
	args?: [...null | string] @go(Args,[]*string)

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	dir?: null | string @go(Dir,*string)

	// Entrypoint to be used instead of the build step image's
	// default entrypoint.
	// If unset, the image's default entrypoint is used
	entrypoint?: null | string @go(Entrypoint,*string)

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	env?: [...null | string] @go(Env,[]*string)

	// Unique identifier for this build step, used in wait_for to
	// reference this build step as a dependency.
	id?: null | string @go(ID,*string)

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	name?: null | string @go(Name,*string)

	// A shell script to be executed in the step.
	// When script is provided, the user cannot specify the entrypoint or args.
	script?: null | string @go(Script,*string)

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	secretEnv?: [...null | string] @go(SecretEnv,[]*string)

	// Time limit for executing this build step. If not defined,
	// the step has no
	// time limit and will be allowed to continue to run until either it
	// completes or the build itself times out.
	timeout?: null | string @go(Timeout,*string)

	// Output only. Stores timing information for executing this
	// build step.
	timing?: null | string @go(Timing,*string)

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	volumes?: [...#StepVolumesObservation] @go(Volumes,[]StepVolumesObservation)

	// The ID(s) of the step(s) that this build step depends on.
	// This build step will not start until all the build steps in wait_for
	// have completed successfully. If wait_for is empty, this build step
	// will start when all previous build steps in the Build.Steps list
	// have completed successfully.
	waitFor?: [...null | string] @go(WaitFor,[]*string)
}

#StepParameters: {
	// Allow this build step to fail without failing the entire build if and
	// only if the exit code is one of the specified codes.
	// If allowFailure is also specified, this field will take precedence.
	// +kubebuilder:validation:Optional
	allowExitCodes?: [...null | float64] @go(AllowExitCodes,[]*float64)

	// Allow this build step to fail without failing the entire build.
	// If false, the entire build will fail if this step fails. Otherwise, the
	// build will succeed, but this step will still have a failure status.
	// Error information will be reported in the failureDetail field.
	// allowExitCodes takes precedence over this field.
	// +kubebuilder:validation:Optional
	allowFailure?: null | bool @go(AllowFailure,*bool)

	// A list of arguments that will be presented to the step when it is started.
	// If the image used to run the step's container has an entrypoint, the args
	// are used as arguments to that entrypoint. If the image does not define an
	// entrypoint, the first element in args is used as the entrypoint, and the
	// remainder will be used as arguments.
	// +kubebuilder:validation:Optional
	args?: [...null | string] @go(Args,[]*string)

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	// +kubebuilder:validation:Optional
	dir?: null | string @go(Dir,*string)

	// Entrypoint to be used instead of the build step image's
	// default entrypoint.
	// If unset, the image's default entrypoint is used
	// +kubebuilder:validation:Optional
	entrypoint?: null | string @go(Entrypoint,*string)

	// A list of environment variable definitions to be used when
	// running a step.
	// The elements are of the form "KEY=VALUE" for the environment variable
	// "KEY" being given the value "VALUE".
	// +kubebuilder:validation:Optional
	env?: [...null | string] @go(Env,[]*string)

	// Unique identifier for this build step, used in wait_for to
	// reference this build step as a dependency.
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A shell script to be executed in the step.
	// When script is provided, the user cannot specify the entrypoint or args.
	// +kubebuilder:validation:Optional
	script?: null | string @go(Script,*string)

	// A list of environment variables which are encrypted using
	// a Cloud Key
	// Management Service crypto key. These values must be specified in
	// the build's Secret.
	// +kubebuilder:validation:Optional
	secretEnv?: [...null | string] @go(SecretEnv,[]*string)

	// Time limit for executing this build step. If not defined,
	// the step has no
	// time limit and will be allowed to continue to run until either it
	// completes or the build itself times out.
	// +kubebuilder:validation:Optional
	timeout?: null | string @go(Timeout,*string)

	// Output only. Stores timing information for executing this
	// build step.
	// +kubebuilder:validation:Optional
	timing?: null | string @go(Timing,*string)

	// List of volumes to mount into the build step.
	// Each volume is created as an empty volume prior to execution of the
	// build step. Upon completion of the build, volumes and their contents
	// are discarded.
	// Using a named volume in only one step is not valid as it is
	// indicative of a build request with an incorrect configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	volumes?: [...#StepVolumesParameters] @go(Volumes,[]StepVolumesParameters)

	// The ID(s) of the step(s) that this build step depends on.
	// This build step will not start until all the build steps in wait_for
	// have completed successfully. If wait_for is empty, this build step
	// will start when all previous build steps in the Build.Steps list
	// have completed successfully.
	// +kubebuilder:validation:Optional
	waitFor?: [...null | string] @go(WaitFor,[]*string)
}

#StepVolumesInitParameters: {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	name?: null | string @go(Name,*string)

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	path?: null | string @go(Path,*string)
}

#StepVolumesObservation: {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	name?: null | string @go(Name,*string)

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	path?: null | string @go(Path,*string)
}

#StepVolumesParameters: {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#StorageSourceInitParameters: {
	// Google Cloud Storage bucket containing the source.
	bucket?: null | string @go(Bucket,*string)

	// Google Cloud Storage generation for the object.
	// If the generation is omitted, the latest generation will be used
	generation?: null | string @go(Generation,*string)

	// Google Cloud Storage object containing the source.
	// This object must be a gzipped archive file (.tar.gz) containing source to build.
	object?: null | string @go(Object,*string)
}

#StorageSourceObservation: {
	// Google Cloud Storage bucket containing the source.
	bucket?: null | string @go(Bucket,*string)

	// Google Cloud Storage generation for the object.
	// If the generation is omitted, the latest generation will be used
	generation?: null | string @go(Generation,*string)

	// Google Cloud Storage object containing the source.
	// This object must be a gzipped archive file (.tar.gz) containing source to build.
	object?: null | string @go(Object,*string)
}

#StorageSourceParameters: {
	// Google Cloud Storage bucket containing the source.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Google Cloud Storage generation for the object.
	// If the generation is omitted, the latest generation will be used
	// +kubebuilder:validation:Optional
	generation?: null | string @go(Generation,*string)

	// Google Cloud Storage object containing the source.
	// This object must be a gzipped archive file (.tar.gz) containing source to build.
	// +kubebuilder:validation:Optional
	object?: null | string @go(Object,*string)
}

#TimingInitParameters: {
}

#TimingObservation: {
	// End of time span.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	endTime?: null | string @go(EndTime,*string)

	// Start of time span.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	// nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	startTime?: null | string @go(StartTime,*string)
}

#TimingParameters: {
}

#TriggerInitParameters: {
	// Configuration for manual approval to start a build invocation of this BuildTrigger.
	// Builds created by this trigger will require approval before they execute.
	// Any user with a Cloud Build Approver role for the project can approve a build.
	// Structure is documented below.
	approvalConfig?: [...#ApprovalConfigInitParameters] @go(ApprovalConfig,[]ApprovalConfigInitParameters)

	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
	// Structure is documented below.
	bitbucketServerTriggerConfig?: [...#BitbucketServerTriggerConfigInitParameters] @go(BitbucketServerTriggerConfig,[]BitbucketServerTriggerConfigInitParameters)

	// Contents of the build template. Either a filename or build template must be provided.
	// Structure is documented below.
	build?: [...#BuildInitParameters] @go(Build,[]BuildInitParameters)

	// Human-readable description of the trigger.
	description?: null | string @go(Description,*string)

	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	disabled?: null | bool @go(Disabled,*bool)

	// Path, from the source root, to a file whose contents is used for the template.
	// Either a filename or build template must be provided. Set this only when using trigger_template or github.
	// When using Pub/Sub, Webhook or Manual set the file name using git_file_source instead.
	filename?: null | string @go(Filename,*string)

	// A Common Expression Language string. Used only with Pub/Sub and Webhook.
	filter?: null | string @go(Filter,*string)

	// The file source describing the local or remote Build template.
	// Structure is documented below.
	gitFileSource?: [...#GitFileSourceInitParameters] @go(GitFileSource,[]GitFileSourceInitParameters)

	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received.
	// One of trigger_template, github, pubsub_config or webhook_config must be provided.
	// Structure is documented below.
	github?: [...#GithubInitParameters] @go(Github,[]GithubInitParameters)

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If ignoredFiles and changed files are both empty, then they are not
	// used to determine whether or not to trigger a build.
	// If ignoredFiles is not empty, then we ignore any files that match any
	// of the ignored_file globs. If the change has no files that are outside
	// of the ignoredFiles globs, then we do not trigger a build.
	ignoredFiles?: [...null | string] @go(IgnoredFiles,[]*string)

	// Build logs will be sent back to GitHub as part of the checkrun
	// result.  Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	// INCLUDE_BUILD_LOGS_WITH_STATUS
	// Possible values are: INCLUDE_BUILD_LOGS_UNSPECIFIED, INCLUDE_BUILD_LOGS_WITH_STATUS.
	includeBuildLogs?: null | string @go(IncludeBuildLogs,*string)

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is empty, then as far as this filter is concerned, we
	// should trigger the build.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is not empty, then we make sure that at least one of
	// those files matches a includedFiles glob. If not, then we do not trigger
	// a build.
	includedFiles?: [...null | string] @go(IncludedFiles,[]*string)

	// The Cloud Build location for the trigger.
	// If not specified, "global" is used.
	location?: null | string @go(Location,*string)

	// Name of the trigger. Must be unique within the project.
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// PubsubConfig describes the configuration of a trigger that creates
	// a build whenever a Pub/Sub message is published.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	pubsubConfig?: [...#PubsubConfigInitParameters] @go(PubsubConfig,[]PubsubConfigInitParameters)

	// The repo and ref of the repository from which to build.
	// This field is used only for those triggers that do not respond to SCM events.
	// Triggers that respond to such events build source at whatever commit caused the event.
	// This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	sourceToBuild?: [...#SourceToBuildInitParameters] @go(SourceToBuild,[]SourceToBuildInitParameters)

	// Substitutions data for Build resource.
	substitutions?: {[string]: null | string} @go(Substitutions,map[string]*string)

	// Tags for annotation of a BuildTrigger
	tags?: [...null | string] @go(Tags,[]*string)

	// Template describing the types of source changes to trigger a build.
	// Branch and tag names in trigger templates are interpreted as regular
	// expressions. Any branch or tag change that matches that regular
	// expression will trigger a build.
	// One of trigger_template, github, pubsub_config, webhook_config or source_to_build must be provided.
	// Structure is documented below.
	triggerTemplate?: [...#TriggerTemplateInitParameters] @go(TriggerTemplate,[]TriggerTemplateInitParameters)

	// WebhookConfig describes the configuration of a trigger that creates
	// a build whenever a webhook is sent to a trigger's webhook URL.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	webhookConfig?: [...#WebhookConfigInitParameters] @go(WebhookConfig,[]WebhookConfigInitParameters)
}

#TriggerObservation: {
	// Configuration for manual approval to start a build invocation of this BuildTrigger.
	// Builds created by this trigger will require approval before they execute.
	// Any user with a Cloud Build Approver role for the project can approve a build.
	// Structure is documented below.
	approvalConfig?: [...#ApprovalConfigObservation] @go(ApprovalConfig,[]ApprovalConfigObservation)

	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
	// Structure is documented below.
	bitbucketServerTriggerConfig?: [...#BitbucketServerTriggerConfigObservation] @go(BitbucketServerTriggerConfig,[]BitbucketServerTriggerConfigObservation)

	// Contents of the build template. Either a filename or build template must be provided.
	// Structure is documented below.
	build?: [...#BuildObservation] @go(Build,[]BuildObservation)

	// Time when the trigger was created.
	createTime?: null | string @go(CreateTime,*string)

	// Human-readable description of the trigger.
	description?: null | string @go(Description,*string)

	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	disabled?: null | bool @go(Disabled,*bool)

	// Path, from the source root, to a file whose contents is used for the template.
	// Either a filename or build template must be provided. Set this only when using trigger_template or github.
	// When using Pub/Sub, Webhook or Manual set the file name using git_file_source instead.
	filename?: null | string @go(Filename,*string)

	// A Common Expression Language string. Used only with Pub/Sub and Webhook.
	filter?: null | string @go(Filter,*string)

	// The file source describing the local or remote Build template.
	// Structure is documented below.
	gitFileSource?: [...#GitFileSourceObservation] @go(GitFileSource,[]GitFileSourceObservation)

	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received.
	// One of trigger_template, github, pubsub_config or webhook_config must be provided.
	// Structure is documented below.
	github?: [...#GithubObservation] @go(Github,[]GithubObservation)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/triggers/{{trigger_id}}
	id?: null | string @go(ID,*string)

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If ignoredFiles and changed files are both empty, then they are not
	// used to determine whether or not to trigger a build.
	// If ignoredFiles is not empty, then we ignore any files that match any
	// of the ignored_file globs. If the change has no files that are outside
	// of the ignoredFiles globs, then we do not trigger a build.
	ignoredFiles?: [...null | string] @go(IgnoredFiles,[]*string)

	// Build logs will be sent back to GitHub as part of the checkrun
	// result.  Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	// INCLUDE_BUILD_LOGS_WITH_STATUS
	// Possible values are: INCLUDE_BUILD_LOGS_UNSPECIFIED, INCLUDE_BUILD_LOGS_WITH_STATUS.
	includeBuildLogs?: null | string @go(IncludeBuildLogs,*string)

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is empty, then as far as this filter is concerned, we
	// should trigger the build.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is not empty, then we make sure that at least one of
	// those files matches a includedFiles glob. If not, then we do not trigger
	// a build.
	includedFiles?: [...null | string] @go(IncludedFiles,[]*string)

	// The Cloud Build location for the trigger.
	// If not specified, "global" is used.
	location?: null | string @go(Location,*string)

	// Name of the trigger. Must be unique within the project.
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// PubsubConfig describes the configuration of a trigger that creates
	// a build whenever a Pub/Sub message is published.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	pubsubConfig?: [...#PubsubConfigObservation] @go(PubsubConfig,[]PubsubConfigObservation)

	// The service account used for all user-controlled operations including
	// triggers.patch, triggers.run, builds.create, and builds.cancel.
	// If no service account is set, then the standard Cloud Build service account
	// ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead.
	// Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// The repo and ref of the repository from which to build.
	// This field is used only for those triggers that do not respond to SCM events.
	// Triggers that respond to such events build source at whatever commit caused the event.
	// This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	sourceToBuild?: [...#SourceToBuildObservation] @go(SourceToBuild,[]SourceToBuildObservation)

	// Substitutions data for Build resource.
	substitutions?: {[string]: null | string} @go(Substitutions,map[string]*string)

	// Tags for annotation of a BuildTrigger
	tags?: [...null | string] @go(Tags,[]*string)

	// The unique identifier for the trigger.
	triggerId?: null | string @go(TriggerID,*string)

	// Template describing the types of source changes to trigger a build.
	// Branch and tag names in trigger templates are interpreted as regular
	// expressions. Any branch or tag change that matches that regular
	// expression will trigger a build.
	// One of trigger_template, github, pubsub_config, webhook_config or source_to_build must be provided.
	// Structure is documented below.
	triggerTemplate?: [...#TriggerTemplateObservation] @go(TriggerTemplate,[]TriggerTemplateObservation)

	// WebhookConfig describes the configuration of a trigger that creates
	// a build whenever a webhook is sent to a trigger's webhook URL.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	webhookConfig?: [...#WebhookConfigObservation] @go(WebhookConfig,[]WebhookConfigObservation)
}

#TriggerParameters: {
	// Configuration for manual approval to start a build invocation of this BuildTrigger.
	// Builds created by this trigger will require approval before they execute.
	// Any user with a Cloud Build Approver role for the project can approve a build.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	approvalConfig?: [...#ApprovalConfigParameters] @go(ApprovalConfig,[]ApprovalConfigParameters)

	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	bitbucketServerTriggerConfig?: [...#BitbucketServerTriggerConfigParameters] @go(BitbucketServerTriggerConfig,[]BitbucketServerTriggerConfigParameters)

	// Contents of the build template. Either a filename or build template must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	build?: [...#BuildParameters] @go(Build,[]BuildParameters)

	// Human-readable description of the trigger.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Whether the trigger is disabled or not. If true, the trigger will never result in a build.
	// +kubebuilder:validation:Optional
	disabled?: null | bool @go(Disabled,*bool)

	// Path, from the source root, to a file whose contents is used for the template.
	// Either a filename or build template must be provided. Set this only when using trigger_template or github.
	// When using Pub/Sub, Webhook or Manual set the file name using git_file_source instead.
	// +kubebuilder:validation:Optional
	filename?: null | string @go(Filename,*string)

	// A Common Expression Language string. Used only with Pub/Sub and Webhook.
	// +kubebuilder:validation:Optional
	filter?: null | string @go(Filter,*string)

	// The file source describing the local or remote Build template.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	gitFileSource?: [...#GitFileSourceParameters] @go(GitFileSource,[]GitFileSourceParameters)

	// Describes the configuration of a trigger that creates a build whenever a GitHub event is received.
	// One of trigger_template, github, pubsub_config or webhook_config must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	github?: [...#GithubParameters] @go(Github,[]GithubParameters)

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If ignoredFiles and changed files are both empty, then they are not
	// used to determine whether or not to trigger a build.
	// If ignoredFiles is not empty, then we ignore any files that match any
	// of the ignored_file globs. If the change has no files that are outside
	// of the ignoredFiles globs, then we do not trigger a build.
	// +kubebuilder:validation:Optional
	ignoredFiles?: [...null | string] @go(IgnoredFiles,[]*string)

	// Build logs will be sent back to GitHub as part of the checkrun
	// result.  Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	// INCLUDE_BUILD_LOGS_WITH_STATUS
	// Possible values are: INCLUDE_BUILD_LOGS_UNSPECIFIED, INCLUDE_BUILD_LOGS_WITH_STATUS.
	// +kubebuilder:validation:Optional
	includeBuildLogs?: null | string @go(IncludeBuildLogs,*string)

	// ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	// extended with support for **.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is empty, then as far as this filter is concerned, we
	// should trigger the build.
	// If any of the files altered in the commit pass the ignoredFiles filter
	// and includedFiles is not empty, then we make sure that at least one of
	// those files matches a includedFiles glob. If not, then we do not trigger
	// a build.
	// +kubebuilder:validation:Optional
	includedFiles?: [...null | string] @go(IncludedFiles,[]*string)

	// The Cloud Build location for the trigger.
	// If not specified, "global" is used.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Name of the trigger. Must be unique within the project.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// PubsubConfig describes the configuration of a trigger that creates
	// a build whenever a Pub/Sub message is published.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	pubsubConfig?: [...#PubsubConfigParameters] @go(PubsubConfig,[]PubsubConfigParameters)

	// The service account used for all user-controlled operations including
	// triggers.patch, triggers.run, builds.create, and builds.cancel.
	// If no service account is set, then the standard Cloud Build service account
	// ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead.
	// Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.ServiceAccount
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// The repo and ref of the repository from which to build.
	// This field is used only for those triggers that do not respond to SCM events.
	// Triggers that respond to such events build source at whatever commit caused the event.
	// This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	sourceToBuild?: [...#SourceToBuildParameters] @go(SourceToBuild,[]SourceToBuildParameters)

	// Substitutions data for Build resource.
	// +kubebuilder:validation:Optional
	substitutions?: {[string]: null | string} @go(Substitutions,map[string]*string)

	// Tags for annotation of a BuildTrigger
	// +kubebuilder:validation:Optional
	tags?: [...null | string] @go(Tags,[]*string)

	// Template describing the types of source changes to trigger a build.
	// Branch and tag names in trigger templates are interpreted as regular
	// expressions. Any branch or tag change that matches that regular
	// expression will trigger a build.
	// One of trigger_template, github, pubsub_config, webhook_config or source_to_build must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	triggerTemplate?: [...#TriggerTemplateParameters] @go(TriggerTemplate,[]TriggerTemplateParameters)

	// WebhookConfig describes the configuration of a trigger that creates
	// a build whenever a webhook is sent to a trigger's webhook URL.
	// One of trigger_template, github, pubsub_config webhook_config or source_to_build must be provided.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	webhookConfig?: [...#WebhookConfigParameters] @go(WebhookConfig,[]WebhookConfigParameters)
}

#TriggerTemplateInitParameters: {
	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	branchName?: null | string @go(BranchName,*string)

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	commitSha?: null | string @go(CommitSha,*string)

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	dir?: null | string @go(Dir,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	projectId?: null | string @go(ProjectID,*string)

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	repoName?: null | string @go(RepoName,*string)

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	tagName?: null | string @go(TagName,*string)
}

#TriggerTemplateObservation: {
	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	branchName?: null | string @go(BranchName,*string)

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	commitSha?: null | string @go(CommitSha,*string)

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	dir?: null | string @go(Dir,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	projectId?: null | string @go(ProjectID,*string)

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	repoName?: null | string @go(RepoName,*string)

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	tagName?: null | string @go(TagName,*string)
}

#TriggerTemplateParameters: {
	// Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	// +kubebuilder:validation:Optional
	branchName?: null | string @go(BranchName,*string)

	// Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// +kubebuilder:validation:Optional
	commitSha?: null | string @go(CommitSha,*string)

	// Directory, relative to the source root, in which to run the build.
	// This must be a relative path. If a step's dir is specified and
	// is an absolute path, this value is ignored for that step's
	// execution.
	// +kubebuilder:validation:Optional
	dir?: null | string @go(Dir,*string)

	// Only trigger a build if the revision regex does NOT match the revision regex.
	// +kubebuilder:validation:Optional
	invertRegex?: null | bool @go(InvertRegex,*bool)

	// ID of the project that owns the Cloud Source Repository. If
	// omitted, the project ID requesting the build is assumed.
	// +kubebuilder:validation:Optional
	projectId?: null | string @go(ProjectID,*string)

	// Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
	// +kubebuilder:validation:Optional
	repoName?: null | string @go(RepoName,*string)

	// Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	// This field is a regular expression.
	// +kubebuilder:validation:Optional
	tagName?: null | string @go(TagName,*string)
}

#VolumesInitParameters: {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	name?: null | string @go(Name,*string)

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	path?: null | string @go(Path,*string)
}

#VolumesObservation: {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	name?: null | string @go(Name,*string)

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	path?: null | string @go(Path,*string)
}

#VolumesParameters: {
	// Name of the volume to mount.
	// Volume names must be unique per build step and must be valid names for
	// Docker volumes. Each named volume must be used by at least two build steps.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Path at which to mount the volume.
	// Paths must be absolute and cannot conflict with other volume paths on
	// the same build step or with certain reserved volume paths.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#WebhookConfigInitParameters: {
}

#WebhookConfigObservation: {
	// Resource name for the secret required as a URL parameter.
	secret?: null | string @go(Secret,*string)

	// (Output)
	// Potential issues with the underlying Pub/Sub subscription configuration.
	// Only populated on get requests.
	state?: null | string @go(State,*string)
}

#WebhookConfigParameters: {
	// Resource name for the secret required as a URL parameter.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.SecretVersion
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	secret?: null | string @go(Secret,*string)
}

// TriggerSpec defines the desired state of Trigger
#TriggerSpec: {
	forProvider: #TriggerParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TriggerInitParameters @go(InitProvider)
}

// TriggerStatus defines the observed state of Trigger.
#TriggerStatus: {
	atProvider?: #TriggerObservation @go(AtProvider)
}

// Trigger is the Schema for the Triggers API. Configuration for an automated build in response to source repository changes.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Trigger: {
	spec:    #TriggerSpec   @go(Spec)
	status?: #TriggerStatus @go(Status)
}

// TriggerList contains a list of Triggers
#TriggerList: {
	items: [...#Trigger] @go(Items,[]Trigger)
}
