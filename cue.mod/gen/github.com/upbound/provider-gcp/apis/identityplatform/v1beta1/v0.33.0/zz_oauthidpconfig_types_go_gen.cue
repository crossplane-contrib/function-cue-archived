// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/identityplatform/v1beta1

package v1beta1

#OAuthIdPConfigObservation: {
	// Human friendly display name.
	displayName?: null | string @go(DisplayName,*string)

	// If this config allows users to sign in with the provider.
	enabled?: null | bool @go(Enabled,*bool)

	// an identifier for the resource with format projects/{{project}}/oauthIdpConfigs/{{name}}
	id?: null | string @go(ID,*string)

	// For OIDC Idps, the issuer identifier.
	issuer?: null | string @go(Issuer,*string)

	// The name of the OauthIdpConfig. Must start with oidc..
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#OAuthIdPConfigParameters: {
	// Human friendly display name.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// If this config allows users to sign in with the provider.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// For OIDC Idps, the issuer identifier.
	// +kubebuilder:validation:Optional
	issuer?: null | string @go(Issuer,*string)

	// The name of the OauthIdpConfig. Must start with oidc..
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// OAuthIdPConfigSpec defines the desired state of OAuthIdPConfig
#OAuthIdPConfigSpec: {
	forProvider: #OAuthIdPConfigParameters @go(ForProvider)
}

// OAuthIdPConfigStatus defines the observed state of OAuthIdPConfig.
#OAuthIdPConfigStatus: {
	atProvider?: #OAuthIdPConfigObservation @go(AtProvider)
}

// OAuthIdPConfig is the Schema for the OAuthIdPConfigs API. OIDC IdP configuration for a Identity Toolkit project.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#OAuthIdPConfig: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clientIdSecretRef)",message="clientIdSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.issuer)",message="issuer is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	spec:    #OAuthIdPConfigSpec   @go(Spec)
	status?: #OAuthIdPConfigStatus @go(Status)
}

// OAuthIdPConfigList contains a list of OAuthIdPConfigs
#OAuthIdPConfigList: {
	items: [...#OAuthIdPConfig] @go(Items,[]OAuthIdPConfig)
}
