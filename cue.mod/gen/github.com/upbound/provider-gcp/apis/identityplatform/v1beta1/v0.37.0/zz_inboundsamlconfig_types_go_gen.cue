// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/identityplatform/v1beta1

package v1beta1

#IdPCertificatesInitParameters: {
}

#IdPCertificatesObservation: {
}

#IdPConfigInitParameters: {
	// The IdP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	// Structure is documented below.
	idpCertificates?: [...#IdPCertificatesInitParameters] @go(IdPCertificates,[]IdPCertificatesInitParameters)

	// Unique identifier for all SAML entities
	idpEntityId?: null | string @go(IdPEntityID,*string)

	// Indicates if outbounding SAMLRequest should be signed.
	signRequest?: null | bool @go(SignRequest,*bool)

	// URL to send Authentication request to.
	ssoUrl?: null | string @go(SsoURL,*string)
}

#IdPConfigObservation: {
	// Unique identifier for all SAML entities
	idpEntityId?: null | string @go(IdPEntityID,*string)

	// Indicates if outbounding SAMLRequest should be signed.
	signRequest?: null | bool @go(SignRequest,*bool)

	// URL to send Authentication request to.
	ssoUrl?: null | string @go(SsoURL,*string)
}

#IdPConfigParameters: {
	// Unique identifier for all SAML entities
	// +kubebuilder:validation:Optional
	idpEntityId?: null | string @go(IdPEntityID,*string)

	// Indicates if outbounding SAMLRequest should be signed.
	// +kubebuilder:validation:Optional
	signRequest?: null | bool @go(SignRequest,*bool)

	// URL to send Authentication request to.
	// +kubebuilder:validation:Optional
	ssoUrl?: null | string @go(SsoURL,*string)
}

#InboundSAMLConfigInitParameters: {
	// Human friendly display name.
	displayName?: null | string @go(DisplayName,*string)

	// If this config allows users to sign in with the provider.
	enabled?: null | bool @go(Enabled,*bool)

	// SAML IdP configuration when the project acts as the relying party
	// Structure is documented below.
	idpConfig?: [...#IdPConfigInitParameters] @go(IdPConfig,[]IdPConfigInitParameters)

	// The name of the InboundSamlConfig resource. Must start with 'saml.' and can only have alphanumeric characters,
	// hyphens, underscores or periods. The part after 'saml.' must also start with a lowercase letter, end with an
	// alphanumeric character, and have at least 2 characters.
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// SAML SP (Service Provider) configuration when the project acts as the relying party to receive
	// and accept an authentication assertion issued by a SAML identity provider.
	// Structure is documented below.
	spConfig?: [...#SpConfigInitParameters] @go(SpConfig,[]SpConfigInitParameters)
}

#InboundSAMLConfigObservation: {
	// Human friendly display name.
	displayName?: null | string @go(DisplayName,*string)

	// If this config allows users to sign in with the provider.
	enabled?: null | bool @go(Enabled,*bool)

	// an identifier for the resource with format projects/{{project}}/inboundSamlConfigs/{{name}}
	id?: null | string @go(ID,*string)

	// SAML IdP configuration when the project acts as the relying party
	// Structure is documented below.
	idpConfig?: [...#IdPConfigObservation] @go(IdPConfig,[]IdPConfigObservation)

	// The name of the InboundSamlConfig resource. Must start with 'saml.' and can only have alphanumeric characters,
	// hyphens, underscores or periods. The part after 'saml.' must also start with a lowercase letter, end with an
	// alphanumeric character, and have at least 2 characters.
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// SAML SP (Service Provider) configuration when the project acts as the relying party to receive
	// and accept an authentication assertion issued by a SAML identity provider.
	// Structure is documented below.
	spConfig?: [...#SpConfigObservation] @go(SpConfig,[]SpConfigObservation)
}

#InboundSAMLConfigParameters: {
	// Human friendly display name.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// If this config allows users to sign in with the provider.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// SAML IdP configuration when the project acts as the relying party
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	idpConfig?: [...#IdPConfigParameters] @go(IdPConfig,[]IdPConfigParameters)

	// The name of the InboundSamlConfig resource. Must start with 'saml.' and can only have alphanumeric characters,
	// hyphens, underscores or periods. The part after 'saml.' must also start with a lowercase letter, end with an
	// alphanumeric character, and have at least 2 characters.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// SAML SP (Service Provider) configuration when the project acts as the relying party to receive
	// and accept an authentication assertion issued by a SAML identity provider.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	spConfig?: [...#SpConfigParameters] @go(SpConfig,[]SpConfigParameters)
}

#SpCertificatesInitParameters: {
}

#SpCertificatesObservation: {
	// (Output)
	// The x509 certificate
	x509Certificate?: null | string @go(X509Certificate,*string)
}

#SpCertificatesParameters: {
}

#SpConfigInitParameters: {
	// Callback URI where responses from IDP are handled. Must start with https://.
	callbackUri?: null | string @go(CallbackURI,*string)

	// Unique identifier for all SAML entities.
	spEntityId?: null | string @go(SpEntityID,*string)
}

#SpConfigObservation: {
	// Callback URI where responses from IDP are handled. Must start with https://.
	callbackUri?: null | string @go(CallbackURI,*string)

	// (Output)
	// The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP.
	// Structure is documented below.
	spCertificates?: [...#SpCertificatesObservation] @go(SpCertificates,[]SpCertificatesObservation)

	// Unique identifier for all SAML entities.
	spEntityId?: null | string @go(SpEntityID,*string)
}

#SpConfigParameters: {
	// Callback URI where responses from IDP are handled. Must start with https://.
	// +kubebuilder:validation:Optional
	callbackUri?: null | string @go(CallbackURI,*string)

	// Unique identifier for all SAML entities.
	// +kubebuilder:validation:Optional
	spEntityId?: null | string @go(SpEntityID,*string)
}

// InboundSAMLConfigSpec defines the desired state of InboundSAMLConfig
#InboundSAMLConfigSpec: {
	forProvider: #InboundSAMLConfigParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #InboundSAMLConfigInitParameters @go(InitProvider)
}

// InboundSAMLConfigStatus defines the observed state of InboundSAMLConfig.
#InboundSAMLConfigStatus: {
	atProvider?: #InboundSAMLConfigObservation @go(AtProvider)
}

// InboundSAMLConfig is the Schema for the InboundSAMLConfigs API. Inbound SAML configuration for a Identity Toolkit project.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#InboundSAMLConfig: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.idpConfig) || (has(self.initProvider) && has(self.initProvider.idpConfig))",message="spec.forProvider.idpConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spConfig) || (has(self.initProvider) && has(self.initProvider.spConfig))",message="spec.forProvider.spConfig is a required parameter"
	spec:    #InboundSAMLConfigSpec   @go(Spec)
	status?: #InboundSAMLConfigStatus @go(Status)
}

// InboundSAMLConfigList contains a list of InboundSAMLConfigs
#InboundSAMLConfigList: {
	items: [...#InboundSAMLConfig] @go(Items,[]InboundSAMLConfig)
}
