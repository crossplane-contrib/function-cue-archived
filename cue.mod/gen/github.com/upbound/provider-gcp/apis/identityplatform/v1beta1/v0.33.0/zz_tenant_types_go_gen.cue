// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/identityplatform/v1beta1

package v1beta1

#TenantObservation: {
	// Whether to allow email/password user authentication.
	allowPasswordSignup?: null | bool @go(AllowPasswordSignup,*bool)

	// Whether authentication is disabled for the tenant. If true, the users under
	// the disabled tenant are not allowed to sign-in. Admins of the disabled tenant
	// are not able to manage its users.
	disableAuth?: null | bool @go(DisableAuth,*bool)

	// Human friendly display name of the tenant.
	displayName?: null | string @go(DisplayName,*string)

	// Whether to enable email link user authentication.
	enableEmailLinkSignin?: null | bool @go(EnableEmailLinkSignin,*bool)

	// an identifier for the resource with format projects/{{project}}/tenants/{{name}}
	id?: null | string @go(ID,*string)

	// The name of the tenant that is generated by the server
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#TenantParameters: {
	// Whether to allow email/password user authentication.
	// +kubebuilder:validation:Optional
	allowPasswordSignup?: null | bool @go(AllowPasswordSignup,*bool)

	// Whether authentication is disabled for the tenant. If true, the users under
	// the disabled tenant are not allowed to sign-in. Admins of the disabled tenant
	// are not able to manage its users.
	// +kubebuilder:validation:Optional
	disableAuth?: null | bool @go(DisableAuth,*bool)

	// Human friendly display name of the tenant.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// Whether to enable email link user authentication.
	// +kubebuilder:validation:Optional
	enableEmailLinkSignin?: null | bool @go(EnableEmailLinkSignin,*bool)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// TenantSpec defines the desired state of Tenant
#TenantSpec: {
	forProvider: #TenantParameters @go(ForProvider)
}

// TenantStatus defines the observed state of Tenant.
#TenantStatus: {
	atProvider?: #TenantObservation @go(AtProvider)
}

// Tenant is the Schema for the Tenants API. Tenant configuration in a multi-tenant project.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Tenant: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	spec:    #TenantSpec   @go(Spec)
	status?: #TenantStatus @go(Status)
}

// TenantList contains a list of Tenants
#TenantList: {
	items: [...#Tenant] @go(Items,[]Tenant)
}
