// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/cloudfunctions/v1beta1

package v1beta1

#EventTriggerInitParameters: {
	// The type of event to observe. For example: "google.storage.object.finalize".
	// See the documentation on calling Cloud Functions for a
	// full reference of accepted triggers.
	eventType?: null | string @go(EventType,*string)

	// Specifies policy for failed executions. Structure is documented below.
	failurePolicy?: [...#FailurePolicyInitParameters] @go(FailurePolicy,[]FailurePolicyInitParameters)

	// Required. The name or partial URI of the resource from
	// which to observe events. For example, "myBucket" or "projects/my-project/topics/my-topic"
	resource?: null | string @go(Resource,*string)
}

#EventTriggerObservation: {
	// The type of event to observe. For example: "google.storage.object.finalize".
	// See the documentation on calling Cloud Functions for a
	// full reference of accepted triggers.
	eventType?: null | string @go(EventType,*string)

	// Specifies policy for failed executions. Structure is documented below.
	failurePolicy?: [...#FailurePolicyObservation] @go(FailurePolicy,[]FailurePolicyObservation)

	// Required. The name or partial URI of the resource from
	// which to observe events. For example, "myBucket" or "projects/my-project/topics/my-topic"
	resource?: null | string @go(Resource,*string)
}

#EventTriggerParameters: {
	// The type of event to observe. For example: "google.storage.object.finalize".
	// See the documentation on calling Cloud Functions for a
	// full reference of accepted triggers.
	// +kubebuilder:validation:Optional
	eventType?: null | string @go(EventType,*string)

	// Specifies policy for failed executions. Structure is documented below.
	// +kubebuilder:validation:Optional
	failurePolicy?: [...#FailurePolicyParameters] @go(FailurePolicy,[]FailurePolicyParameters)

	// Required. The name or partial URI of the resource from
	// which to observe events. For example, "myBucket" or "projects/my-project/topics/my-topic"
	// +kubebuilder:validation:Optional
	resource?: null | string @go(Resource,*string)
}

#FailurePolicyInitParameters: {
	// Whether the function should be retried on failure. Defaults to false.
	retry?: null | bool @go(Retry,*bool)
}

#FailurePolicyObservation: {
	// Whether the function should be retried on failure. Defaults to false.
	retry?: null | bool @go(Retry,*bool)
}

#FailurePolicyParameters: {
	// Whether the function should be retried on failure. Defaults to false.
	// +kubebuilder:validation:Optional
	retry?: null | bool @go(Retry,*bool)
}

#FunctionInitParameters: {
	// Memory (in MB), available to the function. Default value is 256. Possible values include 128, 256, 512, 1024, etc.
	availableMemoryMb?: null | float64 @go(AvailableMemoryMb,*float64)

	// A set of key/value environment variable pairs available during build time.
	buildEnvironmentVariables?: {[string]: string} @go(BuildEnvironmentVariables,map[string]string)
	buildWorkerPool?: null | string @go(BuildWorkerPool,*string)

	// Description of the function.
	description?: null | string @go(Description,*string)

	// Docker Registry to use for storing the function's Docker images. Allowed values are CONTAINER_REGISTRY (default) and ARTIFACT_REGISTRY.
	dockerRegistry?: null | string @go(DockerRegistry,*string)

	// User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. If unspecified, Container Registry will be used by default, unless specified otherwise by other means.
	dockerRepository?: null | string @go(DockerRepository,*string)

	// Name of the function that will be executed when the Google Cloud Function is triggered.
	entryPoint?: null | string @go(EntryPoint,*string)

	// A set of key/value environment variable pairs to assign to the function.
	environmentVariables?: {[string]: string} @go(EnvironmentVariables,map[string]string)

	// A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
	eventTrigger?: [...#EventTriggerInitParameters] @go(EventTrigger,[]EventTriggerInitParameters)

	// The security level for the function. The following options are available:
	httpsTriggerSecurityLevel?: null | string @go(HTTPSTriggerSecurityLevel,*string)

	// URL which triggers function execution. Returned only if trigger_http is used.
	httpsTriggerUrl?: null | string @go(HTTPSTriggerURL,*string)

	// String value that controls what traffic can reach the function. Allowed values are ALLOW_ALL, ALLOW_INTERNAL_AND_GCLB and ALLOW_INTERNAL_ONLY. Check ingress documentation to see the impact of each settings value. Changes to this field will recreate the cloud function.
	ingressSettings?: null | string @go(IngressSettings,*string)

	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
	// If specified, you must also provide an artifact registry repository using the docker_repository field that was created with the same KMS crypto key. Before deploying, please complete all pre-requisites described in https://cloud.google.com/functions/docs/securing/cmek#granting_service_accounts_access_to_the_key
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// A set of key/value label pairs to assign to the function. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
	labels?: {[string]: string} @go(Labels,map[string]string)

	// The limit on the maximum number of function instances that may coexist at a given time.
	maxInstances?: null | float64 @go(MaxInstances,*float64)

	// The limit on the minimum number of function instances that may coexist at a given time.
	minInstances?: null | float64 @go(MinInstances,*float64)

	// Project of the function. If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The runtime in which the function is going to run.
	// Eg. "nodejs16", "python39", "dotnet3", "go116", "java11", "ruby30", "php74", etc. Check the official doc for the up-to-date list.
	runtime?: null | string @go(Runtime,*string)

	// Secret environment variables configuration. Structure is documented below.
	secretEnvironmentVariables?: [...#SecretEnvironmentVariablesInitParameters] @go(SecretEnvironmentVariables,[]SecretEnvironmentVariablesInitParameters)

	// Secret volumes configuration. Structure is documented below.
	secretVolumes?: [...#SecretVolumesInitParameters] @go(SecretVolumes,[]SecretVolumesInitParameters)

	// If provided, the self-provided service account to run the function with.
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// Represents parameters related to source repository where a function is hosted.
	// Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
	sourceRepository?: [...#SourceRepositoryInitParameters] @go(SourceRepository,[]SourceRepositoryInitParameters)

	// Timeout (in seconds) for the function. Default value is 60 seconds. Cannot be more than 540 seconds.
	timeout?: null | float64 @go(Timeout,*float64)

	// Boolean variable. Any HTTP request (of a supported type) to the endpoint will trigger function execution. Supported HTTP request types are: POST, PUT, GET, DELETE, and OPTIONS. Endpoint is returned as https_trigger_url. Cannot be used with event_trigger.
	triggerHttp?: null | bool @go(TriggerHTTP,*bool)

	// The VPC Network Connector that this cloud function can connect to. It should be set up as fully-qualified URI. The format of this field is projects/*/locations/*/connectors/*.
	vpcConnector?: null | string @go(VPCConnector,*string)

	// The egress settings for the connector, controlling what traffic is diverted through it. Allowed values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY. Defaults to PRIVATE_RANGES_ONLY. If unset, this field preserves the previously set value.
	vpcConnectorEgressSettings?: null | string @go(VPCConnectorEgressSettings,*string)
}

#FunctionObservation: {
	// Memory (in MB), available to the function. Default value is 256. Possible values include 128, 256, 512, 1024, etc.
	availableMemoryMb?: null | float64 @go(AvailableMemoryMb,*float64)

	// A set of key/value environment variable pairs available during build time.
	buildEnvironmentVariables?: {[string]: string} @go(BuildEnvironmentVariables,map[string]string)
	buildWorkerPool?: null | string @go(BuildWorkerPool,*string)

	// Description of the function.
	description?: null | string @go(Description,*string)

	// Docker Registry to use for storing the function's Docker images. Allowed values are CONTAINER_REGISTRY (default) and ARTIFACT_REGISTRY.
	dockerRegistry?: null | string @go(DockerRegistry,*string)

	// User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. If unspecified, Container Registry will be used by default, unless specified otherwise by other means.
	dockerRepository?: null | string @go(DockerRepository,*string)

	// Name of the function that will be executed when the Google Cloud Function is triggered.
	entryPoint?: null | string @go(EntryPoint,*string)

	// A set of key/value environment variable pairs to assign to the function.
	environmentVariables?: {[string]: string} @go(EnvironmentVariables,map[string]string)

	// A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
	eventTrigger?: [...#EventTriggerObservation] @go(EventTrigger,[]EventTriggerObservation)

	// The security level for the function. The following options are available:
	httpsTriggerSecurityLevel?: null | string @go(HTTPSTriggerSecurityLevel,*string)

	// URL which triggers function execution. Returned only if trigger_http is used.
	httpsTriggerUrl?: null | string @go(HTTPSTriggerURL,*string)

	// an identifier for the resource with format {{name}}
	id?: null | string @go(ID,*string)

	// String value that controls what traffic can reach the function. Allowed values are ALLOW_ALL, ALLOW_INTERNAL_AND_GCLB and ALLOW_INTERNAL_ONLY. Check ingress documentation to see the impact of each settings value. Changes to this field will recreate the cloud function.
	ingressSettings?: null | string @go(IngressSettings,*string)

	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
	// If specified, you must also provide an artifact registry repository using the docker_repository field that was created with the same KMS crypto key. Before deploying, please complete all pre-requisites described in https://cloud.google.com/functions/docs/securing/cmek#granting_service_accounts_access_to_the_key
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// A set of key/value label pairs to assign to the function. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
	labels?: {[string]: string} @go(Labels,map[string]string)

	// The limit on the maximum number of function instances that may coexist at a given time.
	maxInstances?: null | float64 @go(MaxInstances,*float64)

	// The limit on the minimum number of function instances that may coexist at a given time.
	minInstances?: null | float64 @go(MinInstances,*float64)

	// Project of the function. If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Region of function. If it is not provided, the provider region is used.
	region?: null | string @go(Region,*string)

	// The runtime in which the function is going to run.
	// Eg. "nodejs16", "python39", "dotnet3", "go116", "java11", "ruby30", "php74", etc. Check the official doc for the up-to-date list.
	runtime?: null | string @go(Runtime,*string)

	// Secret environment variables configuration. Structure is documented below.
	secretEnvironmentVariables?: [...#SecretEnvironmentVariablesObservation] @go(SecretEnvironmentVariables,[]SecretEnvironmentVariablesObservation)

	// Secret volumes configuration. Structure is documented below.
	secretVolumes?: [...#SecretVolumesObservation] @go(SecretVolumes,[]SecretVolumesObservation)

	// If provided, the self-provided service account to run the function with.
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// The GCS bucket containing the zip archive which contains the function.
	sourceArchiveBucket?: null | string @go(SourceArchiveBucket,*string)

	// The source archive object (file) in archive bucket.
	sourceArchiveObject?: null | string @go(SourceArchiveObject,*string)

	// Represents parameters related to source repository where a function is hosted.
	// Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
	sourceRepository?: [...#SourceRepositoryObservation] @go(SourceRepository,[]SourceRepositoryObservation)
	status?: null | string @go(Status,*string)

	// Timeout (in seconds) for the function. Default value is 60 seconds. Cannot be more than 540 seconds.
	timeout?: null | float64 @go(Timeout,*float64)

	// Boolean variable. Any HTTP request (of a supported type) to the endpoint will trigger function execution. Supported HTTP request types are: POST, PUT, GET, DELETE, and OPTIONS. Endpoint is returned as https_trigger_url. Cannot be used with event_trigger.
	triggerHttp?: null | bool @go(TriggerHTTP,*bool)

	// The VPC Network Connector that this cloud function can connect to. It should be set up as fully-qualified URI. The format of this field is projects/*/locations/*/connectors/*.
	vpcConnector?: null | string @go(VPCConnector,*string)

	// The egress settings for the connector, controlling what traffic is diverted through it. Allowed values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY. Defaults to PRIVATE_RANGES_ONLY. If unset, this field preserves the previously set value.
	vpcConnectorEgressSettings?: null | string @go(VPCConnectorEgressSettings,*string)
}

#FunctionParameters: {
	// Memory (in MB), available to the function. Default value is 256. Possible values include 128, 256, 512, 1024, etc.
	// +kubebuilder:validation:Optional
	availableMemoryMb?: null | float64 @go(AvailableMemoryMb,*float64)

	// A set of key/value environment variable pairs available during build time.
	// +kubebuilder:validation:Optional
	buildEnvironmentVariables?: {[string]: string} @go(BuildEnvironmentVariables,map[string]string)

	// +kubebuilder:validation:Optional
	buildWorkerPool?: null | string @go(BuildWorkerPool,*string)

	// Description of the function.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Docker Registry to use for storing the function's Docker images. Allowed values are CONTAINER_REGISTRY (default) and ARTIFACT_REGISTRY.
	// +kubebuilder:validation:Optional
	dockerRegistry?: null | string @go(DockerRegistry,*string)

	// User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. If unspecified, Container Registry will be used by default, unless specified otherwise by other means.
	// +kubebuilder:validation:Optional
	dockerRepository?: null | string @go(DockerRepository,*string)

	// Name of the function that will be executed when the Google Cloud Function is triggered.
	// +kubebuilder:validation:Optional
	entryPoint?: null | string @go(EntryPoint,*string)

	// A set of key/value environment variable pairs to assign to the function.
	// +kubebuilder:validation:Optional
	environmentVariables?: {[string]: string} @go(EnvironmentVariables,map[string]string)

	// A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
	// +kubebuilder:validation:Optional
	eventTrigger?: [...#EventTriggerParameters] @go(EventTrigger,[]EventTriggerParameters)

	// The security level for the function. The following options are available:
	// +kubebuilder:validation:Optional
	httpsTriggerSecurityLevel?: null | string @go(HTTPSTriggerSecurityLevel,*string)

	// URL which triggers function execution. Returned only if trigger_http is used.
	// +kubebuilder:validation:Optional
	httpsTriggerUrl?: null | string @go(HTTPSTriggerURL,*string)

	// String value that controls what traffic can reach the function. Allowed values are ALLOW_ALL, ALLOW_INTERNAL_AND_GCLB and ALLOW_INTERNAL_ONLY. Check ingress documentation to see the impact of each settings value. Changes to this field will recreate the cloud function.
	// +kubebuilder:validation:Optional
	ingressSettings?: null | string @go(IngressSettings,*string)

	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
	// If specified, you must also provide an artifact registry repository using the docker_repository field that was created with the same KMS crypto key. Before deploying, please complete all pre-requisites described in https://cloud.google.com/functions/docs/securing/cmek#granting_service_accounts_access_to_the_key
	// +kubebuilder:validation:Optional
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// A set of key/value label pairs to assign to the function. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
	// +kubebuilder:validation:Optional
	labels?: {[string]: string} @go(Labels,map[string]string)

	// The limit on the maximum number of function instances that may coexist at a given time.
	// +kubebuilder:validation:Optional
	maxInstances?: null | float64 @go(MaxInstances,*float64)

	// The limit on the minimum number of function instances that may coexist at a given time.
	// +kubebuilder:validation:Optional
	minInstances?: null | float64 @go(MinInstances,*float64)

	// Project of the function. If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Region of function. If it is not provided, the provider region is used.
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The runtime in which the function is going to run.
	// Eg. "nodejs16", "python39", "dotnet3", "go116", "java11", "ruby30", "php74", etc. Check the official doc for the up-to-date list.
	// +kubebuilder:validation:Optional
	runtime?: null | string @go(Runtime,*string)

	// Secret environment variables configuration. Structure is documented below.
	// +kubebuilder:validation:Optional
	secretEnvironmentVariables?: [...#SecretEnvironmentVariablesParameters] @go(SecretEnvironmentVariables,[]SecretEnvironmentVariablesParameters)

	// Secret volumes configuration. Structure is documented below.
	// +kubebuilder:validation:Optional
	secretVolumes?: [...#SecretVolumesParameters] @go(SecretVolumes,[]SecretVolumesParameters)

	// If provided, the self-provided service account to run the function with.
	// +kubebuilder:validation:Optional
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// The GCS bucket containing the zip archive which contains the function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/storage/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	sourceArchiveBucket?: null | string @go(SourceArchiveBucket,*string)

	// The source archive object (file) in archive bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/storage/v1beta1.BucketObject
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	sourceArchiveObject?: null | string @go(SourceArchiveObject,*string)

	// Represents parameters related to source repository where a function is hosted.
	// Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
	// +kubebuilder:validation:Optional
	sourceRepository?: [...#SourceRepositoryParameters] @go(SourceRepository,[]SourceRepositoryParameters)

	// Timeout (in seconds) for the function. Default value is 60 seconds. Cannot be more than 540 seconds.
	// +kubebuilder:validation:Optional
	timeout?: null | float64 @go(Timeout,*float64)

	// Boolean variable. Any HTTP request (of a supported type) to the endpoint will trigger function execution. Supported HTTP request types are: POST, PUT, GET, DELETE, and OPTIONS. Endpoint is returned as https_trigger_url. Cannot be used with event_trigger.
	// +kubebuilder:validation:Optional
	triggerHttp?: null | bool @go(TriggerHTTP,*bool)

	// The VPC Network Connector that this cloud function can connect to. It should be set up as fully-qualified URI. The format of this field is projects/*/locations/*/connectors/*.
	// +kubebuilder:validation:Optional
	vpcConnector?: null | string @go(VPCConnector,*string)

	// The egress settings for the connector, controlling what traffic is diverted through it. Allowed values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY. Defaults to PRIVATE_RANGES_ONLY. If unset, this field preserves the previously set value.
	// +kubebuilder:validation:Optional
	vpcConnectorEgressSettings?: null | string @go(VPCConnectorEgressSettings,*string)
}

#SecretEnvironmentVariablesInitParameters: {
	// Name of the environment variable.
	key?: null | string @go(Key,*string)

	// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
	projectId?: null | string @go(ProjectID,*string)

	// ID of the secret in secret manager (not the full resource name).
	secret?: null | string @go(Secret,*string)

	// Version of the secret (version number or the string "latest"). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new clones start.
	version?: null | string @go(Version,*string)
}

#SecretEnvironmentVariablesObservation: {
	// Name of the environment variable.
	key?: null | string @go(Key,*string)

	// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
	projectId?: null | string @go(ProjectID,*string)

	// ID of the secret in secret manager (not the full resource name).
	secret?: null | string @go(Secret,*string)

	// Version of the secret (version number or the string "latest"). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new clones start.
	version?: null | string @go(Version,*string)
}

#SecretEnvironmentVariablesParameters: {
	// Name of the environment variable.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
	// +kubebuilder:validation:Optional
	projectId?: null | string @go(ProjectID,*string)

	// ID of the secret in secret manager (not the full resource name).
	// +kubebuilder:validation:Optional
	secret?: null | string @go(Secret,*string)

	// Version of the secret (version number or the string "latest"). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new clones start.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#SecretVolumesInitParameters: {
	// The path within the container to mount the secret volume. For example, setting the mount_path as "/etc/secrets" would mount the secret value files under the "/etc/secrets" directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: "/etc/secrets" Restricted mount paths: "/cloudsql", "/dev/log", "/pod", "/proc", "/var/log".
	mountPath?: null | string @go(MountPath,*string)

	// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
	projectId?: null | string @go(ProjectID,*string)

	// ID of the secret in secret manager (not the full resource name).
	secret?: null | string @go(Secret,*string)

	// List of secret versions to mount for this secret. If empty, the "latest" version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
	versions?: [...#VersionsInitParameters] @go(Versions,[]VersionsInitParameters)
}

#SecretVolumesObservation: {
	// The path within the container to mount the secret volume. For example, setting the mount_path as "/etc/secrets" would mount the secret value files under the "/etc/secrets" directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: "/etc/secrets" Restricted mount paths: "/cloudsql", "/dev/log", "/pod", "/proc", "/var/log".
	mountPath?: null | string @go(MountPath,*string)

	// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
	projectId?: null | string @go(ProjectID,*string)

	// ID of the secret in secret manager (not the full resource name).
	secret?: null | string @go(Secret,*string)

	// List of secret versions to mount for this secret. If empty, the "latest" version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
	versions?: [...#VersionsObservation] @go(Versions,[]VersionsObservation)
}

#SecretVolumesParameters: {
	// The path within the container to mount the secret volume. For example, setting the mount_path as "/etc/secrets" would mount the secret value files under the "/etc/secrets" directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: "/etc/secrets" Restricted mount paths: "/cloudsql", "/dev/log", "/pod", "/proc", "/var/log".
	// +kubebuilder:validation:Optional
	mountPath?: null | string @go(MountPath,*string)

	// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
	// +kubebuilder:validation:Optional
	projectId?: null | string @go(ProjectID,*string)

	// ID of the secret in secret manager (not the full resource name).
	// +kubebuilder:validation:Optional
	secret?: null | string @go(Secret,*string)

	// List of secret versions to mount for this secret. If empty, the "latest" version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
	// +kubebuilder:validation:Optional
	versions?: [...#VersionsParameters] @go(Versions,[]VersionsParameters)
}

#SourceRepositoryInitParameters: {
	// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats:
	url?: null | string @go(URL,*string)
}

#SourceRepositoryObservation: {
	// The URL pointing to the hosted repository where the function was defined at the time of deployment.
	deployedUrl?: null | string @go(DeployedURL,*string)

	// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats:
	url?: null | string @go(URL,*string)
}

#SourceRepositoryParameters: {
	// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats:
	// +kubebuilder:validation:Optional
	url?: null | string @go(URL,*string)
}

#VersionsInitParameters: {
	// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as "/etc/secrets" and path as "/secret_foo" would mount the secret value file at "/etc/secrets/secret_foo".
	path?: null | string @go(Path,*string)

	// Version of the secret (version number or the string "latest"). It is preferable to use "latest" version with secret volumes as secret value changes are reflected immediately.
	version?: null | string @go(Version,*string)
}

#VersionsObservation: {
	// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as "/etc/secrets" and path as "/secret_foo" would mount the secret value file at "/etc/secrets/secret_foo".
	path?: null | string @go(Path,*string)

	// Version of the secret (version number or the string "latest"). It is preferable to use "latest" version with secret volumes as secret value changes are reflected immediately.
	version?: null | string @go(Version,*string)
}

#VersionsParameters: {
	// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as "/etc/secrets" and path as "/secret_foo" would mount the secret value file at "/etc/secrets/secret_foo".
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Version of the secret (version number or the string "latest"). It is preferable to use "latest" version with secret volumes as secret value changes are reflected immediately.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

// FunctionSpec defines the desired state of Function
#FunctionSpec: {
	forProvider: #FunctionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #FunctionInitParameters @go(InitProvider)
}

// FunctionStatus defines the observed state of Function.
#FunctionStatus: {
	atProvider?: #FunctionObservation @go(AtProvider)
}

// Function is the Schema for the Functions API. Creates a new Cloud Function.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Function: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.runtime) || (has(self.initProvider) && has(self.initProvider.runtime))",message="spec.forProvider.runtime is a required parameter"
	spec:    #FunctionSpec   @go(Spec)
	status?: #FunctionStatus @go(Status)
}

// FunctionList contains a list of Functions
#FunctionList: {
	items: [...#Function] @go(Items,[]Function)
}
