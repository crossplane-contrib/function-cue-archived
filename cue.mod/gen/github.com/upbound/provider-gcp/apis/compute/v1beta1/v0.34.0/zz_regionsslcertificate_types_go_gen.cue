// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/compute/v1beta1

package v1beta1

#RegionSSLCertificateObservation: {
	// The unique identifier for the resource.
	certificateId?: null | float64 @go(CertificateID,*float64)

	// Creation timestamp in RFC3339 text format.
	creationTimestamp?: null | string @go(CreationTimestamp,*string)

	// An optional description of this resource.
	description?: null | string @go(Description,*string)

	// Expire time of the certificate in RFC3339 text format.
	expireTime?: null | string @go(ExpireTime,*string)

	// an identifier for the resource with format projects/{{project}}/regions/{{region}}/sslCertificates/{{name}}
	id?: null | string @go(ID,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The Region in which the created regional ssl certificate should reside.
	// If it is not provided, the provider region is used.
	region?: null | string @go(Region,*string)

	// The URI of the created resource.
	selfLink?: null | string @go(SelfLink,*string)
}

#RegionSSLCertificateParameters: {
	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The Region in which the created regional ssl certificate should reside.
	// If it is not provided, the provider region is used.
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// RegionSSLCertificateSpec defines the desired state of RegionSSLCertificate
#RegionSSLCertificateSpec: {
	forProvider: #RegionSSLCertificateParameters @go(ForProvider)
}

// RegionSSLCertificateStatus defines the observed state of RegionSSLCertificate.
#RegionSSLCertificateStatus: {
	atProvider?: #RegionSSLCertificateObservation @go(AtProvider)
}

// RegionSSLCertificate is the Schema for the RegionSSLCertificates API. A RegionSslCertificate resource, used for HTTPS load balancing.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#RegionSSLCertificate: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.certificateSecretRef)",message="certificateSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.privateKeySecretRef)",message="privateKeySecretRef is a required parameter"
	spec:    #RegionSSLCertificateSpec   @go(Spec)
	status?: #RegionSSLCertificateStatus @go(Status)
}

// RegionSSLCertificateList contains a list of RegionSSLCertificates
#RegionSSLCertificateList: {
	items: [...#RegionSSLCertificate] @go(Items,[]RegionSSLCertificate)
}
