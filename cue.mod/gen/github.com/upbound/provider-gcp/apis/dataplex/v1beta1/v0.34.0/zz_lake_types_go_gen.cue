// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/dataplex/v1beta1

package v1beta1

#AssetStatusObservation: {
	activeAssets?:                 null | float64 @go(ActiveAssets,*float64)
	securityPolicyApplyingAssets?: null | float64 @go(SecurityPolicyApplyingAssets,*float64)

	// Output only. The time when the lake was last updated.
	updateTime?: null | string @go(UpdateTime,*string)
}

#AssetStatusParameters: {
}

#LakeObservation: {
	// Output only. Aggregated status of the underlying assets of the lake.
	assetStatus?: [...#AssetStatusObservation] @go(AssetStatus,[]AssetStatusObservation)

	// Output only. The time when the lake was created.
	createTime?: null | string @go(CreateTime,*string)

	// Optional. Description of the lake.
	description?: null | string @go(Description,*string)

	// Optional. User friendly display name.
	displayName?: null | string @go(DisplayName,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/lakes/{{name}}
	id?: null | string @go(ID,*string)

	// Optional. User-defined labels for the lake.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The location for the resource
	location?: null | string @go(Location,*string)

	// Optional. Settings to manage lake and Dataproc Metastore service instance association.
	metastore?: [...#MetastoreObservation] @go(Metastore,[]MetastoreObservation)

	// Output only. Metastore status of the lake.
	metastoreStatus?: [...#MetastoreStatusObservation] @go(MetastoreStatus,[]MetastoreStatusObservation)

	// The project for the resource
	project?: null | string @go(Project,*string)

	// Output only. Service account associated with this lake. This service account must be authorized to access or operate on resources managed by the lake.
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
	state?: null | string @go(State,*string)

	// Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and re-created with the same name.
	uid?: null | string @go(UID,*string)

	// Output only. The time when the lake was last updated.
	updateTime?: null | string @go(UpdateTime,*string)
}

#LakeParameters: {
	// Optional. Description of the lake.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Optional. User friendly display name.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// Optional. User-defined labels for the lake.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The location for the resource
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// Optional. Settings to manage lake and Dataproc Metastore service instance association.
	// +kubebuilder:validation:Optional
	metastore?: [...#MetastoreParameters] @go(Metastore,[]MetastoreParameters)

	// The project for the resource
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

#MetastoreObservation: {
	// Optional. A relative reference to the Dataproc Metastore (https://cloud.google.com/dataproc-metastore/docs) service associated with the lake: projects/{project_id}/locations/{location_id}/services/{service_id}
	service?: null | string @go(Service,*string)
}

#MetastoreParameters: {
	// Optional. A relative reference to the Dataproc Metastore (https://cloud.google.com/dataproc-metastore/docs) service associated with the lake: projects/{project_id}/locations/{location_id}/services/{service_id}
	// +kubebuilder:validation:Optional
	service?: null | string @go(Service,*string)
}

#MetastoreStatusObservation: {
	endpoint?: null | string @go(Endpoint,*string)
	message?:  null | string @go(Message,*string)

	// Output only. Current state of the lake. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
	state?: null | string @go(State,*string)

	// Output only. The time when the lake was last updated.
	updateTime?: null | string @go(UpdateTime,*string)
}

#MetastoreStatusParameters: {
}

// LakeSpec defines the desired state of Lake
#LakeSpec: {
	forProvider: #LakeParameters @go(ForProvider)
}

// LakeStatus defines the observed state of Lake.
#LakeStatus: {
	atProvider?: #LakeObservation @go(AtProvider)
}

// Lake is the Schema for the Lakes API. The Dataplex Lake resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Lake: {
	spec:    #LakeSpec   @go(Spec)
	status?: #LakeStatus @go(Status)
}

// LakeList contains a list of Lakes
#LakeList: {
	items: [...#Lake] @go(Items,[]Lake)
}
