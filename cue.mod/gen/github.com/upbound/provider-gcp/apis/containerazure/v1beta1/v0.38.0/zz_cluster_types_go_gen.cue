// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/containerazure/v1beta1

package v1beta1

#AdminUsersInitParameters: {
	// The name of the user, e.g. my-gcp-id@gmail.com.
	username?: null | string @go(Username,*string)
}

#AdminUsersObservation: {
	// The name of the user, e.g. my-gcp-id@gmail.com.
	username?: null | string @go(Username,*string)
}

#AdminUsersParameters: {
	// The name of the user, e.g. my-gcp-id@gmail.com.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#AuthorizationInitParameters: {
	// Users that can perform operations as a cluster admin. A new ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
	adminUsers?: [...#AdminUsersInitParameters] @go(AdminUsers,[]AdminUsersInitParameters)
}

#AuthorizationObservation: {
	// Users that can perform operations as a cluster admin. A new ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
	adminUsers?: [...#AdminUsersObservation] @go(AdminUsers,[]AdminUsersObservation)
}

#AuthorizationParameters: {
	// Users that can perform operations as a cluster admin. A new ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
	// +kubebuilder:validation:Optional
	adminUsers: [...#AdminUsersParameters] @go(AdminUsers,[]AdminUsersParameters)
}

#AzureServicesAuthenticationInitParameters: {
	// The Azure Active Directory Application ID for Authentication configuration.
	applicationId?: null | string @go(ApplicationID,*string)

	// The Azure Active Directory Tenant ID for Authentication configuration.
	tenantId?: null | string @go(TenantID,*string)
}

#AzureServicesAuthenticationObservation: {
	// The Azure Active Directory Application ID for Authentication configuration.
	applicationId?: null | string @go(ApplicationID,*string)

	// The Azure Active Directory Tenant ID for Authentication configuration.
	tenantId?: null | string @go(TenantID,*string)
}

#AzureServicesAuthenticationParameters: {
	// The Azure Active Directory Application ID for Authentication configuration.
	// +kubebuilder:validation:Optional
	applicationId?: null | string @go(ApplicationID,*string)

	// The Azure Active Directory Tenant ID for Authentication configuration.
	// +kubebuilder:validation:Optional
	tenantId?: null | string @go(TenantID,*string)
}

#ClusterInitParameters: {
	// Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// Configuration related to the cluster RBAC settings.
	authorization?: [...#AuthorizationInitParameters] @go(Authorization,[]AuthorizationInitParameters)

	// The Azure region where the cluster runs. Each Google Cloud region supports a subset of nearby Azure regions. You can call to list all supported Azure regions within a given Google Cloud region.
	azureRegion?: null | string @go(AzureRegion,*string)

	// Azure authentication configuration for management of Azure resources
	azureServicesAuthentication?: [...#AzureServicesAuthenticationInitParameters] @go(AzureServicesAuthentication,[]AzureServicesAuthenticationInitParameters)

	// Name of the AzureClient. The AzureClient resource must reside on the same GCP project and region as the AzureCluster. AzureClient names are formatted as projects/<project-number>/locations/<region>/azureClients/<client-id>. See Resource Names (https:cloud.google.com/apis/design/resource_names) for more details on Google Cloud resource names.
	client?: null | string @go(Client,*string)

	// Configuration related to the cluster control plane.
	controlPlane?: [...#ControlPlaneInitParameters] @go(ControlPlane,[]ControlPlaneInitParameters)

	// Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
	description?: null | string @go(Description,*string)

	// Fleet configuration.
	fleet?: [...#FleetInitParameters] @go(Fleet,[]FleetInitParameters)

	// Cluster-wide networking configuration.
	networking?: [...#NetworkingInitParameters] @go(Networking,[]NetworkingInitParameters)

	// The project for the resource
	project?: null | string @go(Project,*string)

	// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
	resourceGroupId?: null | string @go(ResourceGroupID,*string)
}

#ClusterObservation: {
	// Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// Configuration related to the cluster RBAC settings.
	authorization?: [...#AuthorizationObservation] @go(Authorization,[]AuthorizationObservation)

	// The Azure region where the cluster runs. Each Google Cloud region supports a subset of nearby Azure regions. You can call to list all supported Azure regions within a given Google Cloud region.
	azureRegion?: null | string @go(AzureRegion,*string)

	// Azure authentication configuration for management of Azure resources
	azureServicesAuthentication?: [...#AzureServicesAuthenticationObservation] @go(AzureServicesAuthentication,[]AzureServicesAuthenticationObservation)

	// Name of the AzureClient. The AzureClient resource must reside on the same GCP project and region as the AzureCluster. AzureClient names are formatted as projects/<project-number>/locations/<region>/azureClients/<client-id>. See Resource Names (https:cloud.google.com/apis/design/resource_names) for more details on Google Cloud resource names.
	client?: null | string @go(Client,*string)

	// Configuration related to the cluster control plane.
	controlPlane?: [...#ControlPlaneObservation] @go(ControlPlane,[]ControlPlaneObservation)

	// Output only. The time at which this cluster was created.
	createTime?: null | string @go(CreateTime,*string)

	// Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
	description?: null | string @go(Description,*string)

	// Output only. The endpoint of the cluster's API server.
	endpoint?: null | string @go(Endpoint,*string)

	// Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	etag?: null | string @go(Etag,*string)

	// Fleet configuration.
	fleet?: [...#FleetObservation] @go(Fleet,[]FleetObservation)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/azureClusters/{{name}}
	id?: null | string @go(ID,*string)

	// The location for the resource
	location?: null | string @go(Location,*string)

	// Cluster-wide networking configuration.
	networking?: [...#NetworkingObservation] @go(Networking,[]NetworkingObservation)

	// The project for the resource
	project?: null | string @go(Project,*string)

	// Output only. If set, there are currently changes in flight to the cluster.
	reconciling?: null | bool @go(Reconciling,*bool)

	// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
	resourceGroupId?: null | string @go(ResourceGroupID,*string)

	// Output only. The current state of the cluster. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
	state?: null | string @go(State,*string)

	// Output only. A globally unique identifier for the cluster.
	uid?: null | string @go(UID,*string)

	// Output only. The time at which this cluster was last updated.
	updateTime?: null | string @go(UpdateTime,*string)

	// Output only. Workload Identity settings.
	workloadIdentityConfig?: [...#WorkloadIdentityConfigObservation] @go(WorkloadIdentityConfig,[]WorkloadIdentityConfigObservation)
}

#ClusterParameters: {
	// Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	// +kubebuilder:validation:Optional
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// Configuration related to the cluster RBAC settings.
	// +kubebuilder:validation:Optional
	authorization?: [...#AuthorizationParameters] @go(Authorization,[]AuthorizationParameters)

	// The Azure region where the cluster runs. Each Google Cloud region supports a subset of nearby Azure regions. You can call to list all supported Azure regions within a given Google Cloud region.
	// +kubebuilder:validation:Optional
	azureRegion?: null | string @go(AzureRegion,*string)

	// Azure authentication configuration for management of Azure resources
	// +kubebuilder:validation:Optional
	azureServicesAuthentication?: [...#AzureServicesAuthenticationParameters] @go(AzureServicesAuthentication,[]AzureServicesAuthenticationParameters)

	// Name of the AzureClient. The AzureClient resource must reside on the same GCP project and region as the AzureCluster. AzureClient names are formatted as projects/<project-number>/locations/<region>/azureClients/<client-id>. See Resource Names (https:cloud.google.com/apis/design/resource_names) for more details on Google Cloud resource names.
	// +kubebuilder:validation:Optional
	client?: null | string @go(Client,*string)

	// Configuration related to the cluster control plane.
	// +kubebuilder:validation:Optional
	controlPlane?: [...#ControlPlaneParameters] @go(ControlPlane,[]ControlPlaneParameters)

	// Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Fleet configuration.
	// +kubebuilder:validation:Optional
	fleet?: [...#FleetParameters] @go(Fleet,[]FleetParameters)

	// The location for the resource
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// Cluster-wide networking configuration.
	// +kubebuilder:validation:Optional
	networking?: [...#NetworkingParameters] @go(Networking,[]NetworkingParameters)

	// The project for the resource
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
	// +kubebuilder:validation:Optional
	resourceGroupId?: null | string @go(ResourceGroupID,*string)
}

#ControlPlaneInitParameters: {
	// Optional. Configuration related to application-layer secrets encryption.
	databaseEncryption?: [...#DatabaseEncryptionInitParameters] @go(DatabaseEncryption,[]DatabaseEncryptionInitParameters)

	// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
	mainVolume?: [...#MainVolumeInitParameters] @go(MainVolume,[]MainVolumeInitParameters)

	// Proxy configuration for outbound HTTP(S) traffic.
	proxyConfig?: [...#ProxyConfigInitParameters] @go(ProxyConfig,[]ProxyConfigInitParameters)

	// Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
	replicaPlacements?: [...#ReplicaPlacementsInitParameters] @go(ReplicaPlacements,[]ReplicaPlacementsInitParameters)

	// Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
	rootVolume?: [...#RootVolumeInitParameters] @go(RootVolume,[]RootVolumeInitParameters)

	// SSH configuration for how to access the underlying control plane machines.
	sshConfig?: [...#SSHConfigInitParameters] @go(SSHConfig,[]SSHConfigInitParameters)

	// The ARM ID of the subnet where the control plane VMs are deployed. Example: /subscriptions//resourceGroups//providers/Microsoft.Network/virtualNetworks//subnets/default.
	subnetId?: null | string @go(SubnetID,*string)

	// Optional. A set of tags to apply to all underlying control plane Azure resources.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Optional. The Azure VM size name. Example: Standard_DS2_v2. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to Standard_DS2_v2.
	vmSize?: null | string @go(VMSize,*string)

	// The Kubernetes version to run on control plane replicas (e.g. 1.19.10-gke.1000). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
	version?: null | string @go(Version,*string)
}

#ControlPlaneObservation: {
	// Optional. Configuration related to application-layer secrets encryption.
	databaseEncryption?: [...#DatabaseEncryptionObservation] @go(DatabaseEncryption,[]DatabaseEncryptionObservation)

	// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
	mainVolume?: [...#MainVolumeObservation] @go(MainVolume,[]MainVolumeObservation)

	// Proxy configuration for outbound HTTP(S) traffic.
	proxyConfig?: [...#ProxyConfigObservation] @go(ProxyConfig,[]ProxyConfigObservation)

	// Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
	replicaPlacements?: [...#ReplicaPlacementsObservation] @go(ReplicaPlacements,[]ReplicaPlacementsObservation)

	// Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
	rootVolume?: [...#RootVolumeObservation] @go(RootVolume,[]RootVolumeObservation)

	// SSH configuration for how to access the underlying control plane machines.
	sshConfig?: [...#SSHConfigObservation] @go(SSHConfig,[]SSHConfigObservation)

	// The ARM ID of the subnet where the control plane VMs are deployed. Example: /subscriptions//resourceGroups//providers/Microsoft.Network/virtualNetworks//subnets/default.
	subnetId?: null | string @go(SubnetID,*string)

	// Optional. A set of tags to apply to all underlying control plane Azure resources.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Optional. The Azure VM size name. Example: Standard_DS2_v2. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to Standard_DS2_v2.
	vmSize?: null | string @go(VMSize,*string)

	// The Kubernetes version to run on control plane replicas (e.g. 1.19.10-gke.1000). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
	version?: null | string @go(Version,*string)
}

#ControlPlaneParameters: {
	// Optional. Configuration related to application-layer secrets encryption.
	// +kubebuilder:validation:Optional
	databaseEncryption?: [...#DatabaseEncryptionParameters] @go(DatabaseEncryption,[]DatabaseEncryptionParameters)

	// Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
	// +kubebuilder:validation:Optional
	mainVolume?: [...#MainVolumeParameters] @go(MainVolume,[]MainVolumeParameters)

	// Proxy configuration for outbound HTTP(S) traffic.
	// +kubebuilder:validation:Optional
	proxyConfig?: [...#ProxyConfigParameters] @go(ProxyConfig,[]ProxyConfigParameters)

	// Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
	// +kubebuilder:validation:Optional
	replicaPlacements?: [...#ReplicaPlacementsParameters] @go(ReplicaPlacements,[]ReplicaPlacementsParameters)

	// Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
	// +kubebuilder:validation:Optional
	rootVolume?: [...#RootVolumeParameters] @go(RootVolume,[]RootVolumeParameters)

	// SSH configuration for how to access the underlying control plane machines.
	// +kubebuilder:validation:Optional
	sshConfig: [...#SSHConfigParameters] @go(SSHConfig,[]SSHConfigParameters)

	// The ARM ID of the subnet where the control plane VMs are deployed. Example: /subscriptions//resourceGroups//providers/Microsoft.Network/virtualNetworks//subnets/default.
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// Optional. A set of tags to apply to all underlying control plane Azure resources.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Optional. The Azure VM size name. Example: Standard_DS2_v2. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to Standard_DS2_v2.
	// +kubebuilder:validation:Optional
	vmSize?: null | string @go(VMSize,*string)

	// The Kubernetes version to run on control plane replicas (e.g. 1.19.10-gke.1000). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#DatabaseEncryptionInitParameters: {
	// The ARM ID of the Azure Key Vault key to encrypt / decrypt data. For example: /subscriptions/<subscription-id>/resourceGroups/<resource-group-id>/providers/Microsoft.KeyVault/vaults/<key-vault-id>/keys/<key-name> Encryption will always take the latest version of the key and hence specific version is not supported.
	keyId?: null | string @go(KeyID,*string)
}

#DatabaseEncryptionObservation: {
	// The ARM ID of the Azure Key Vault key to encrypt / decrypt data. For example: /subscriptions/<subscription-id>/resourceGroups/<resource-group-id>/providers/Microsoft.KeyVault/vaults/<key-vault-id>/keys/<key-name> Encryption will always take the latest version of the key and hence specific version is not supported.
	keyId?: null | string @go(KeyID,*string)
}

#DatabaseEncryptionParameters: {
	// The ARM ID of the Azure Key Vault key to encrypt / decrypt data. For example: /subscriptions/<subscription-id>/resourceGroups/<resource-group-id>/providers/Microsoft.KeyVault/vaults/<key-vault-id>/keys/<key-name> Encryption will always take the latest version of the key and hence specific version is not supported.
	// +kubebuilder:validation:Optional
	keyId?: null | string @go(KeyID,*string)
}

#FleetInitParameters: {
	// The number of the Fleet host project where this cluster will be registered.
	project?: null | string @go(Project,*string)
}

#FleetObservation: {
	// The name of the managed Hub Membership resource associated to this cluster. Membership names are formatted as projects//locations/global/membership/.
	membership?: null | string @go(Membership,*string)

	// The number of the Fleet host project where this cluster will be registered.
	project?: null | string @go(Project,*string)
}

#FleetParameters: {
	// The number of the Fleet host project where this cluster will be registered.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

#MainVolumeInitParameters: {
	// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
	sizeGib?: null | float64 @go(SizeGib,*float64)
}

#MainVolumeObservation: {
	// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
	sizeGib?: null | float64 @go(SizeGib,*float64)
}

#MainVolumeParameters: {
	// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
	// +kubebuilder:validation:Optional
	sizeGib?: null | float64 @go(SizeGib,*float64)
}

#NetworkingInitParameters: {
	// The IP address range of the pods in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All pods in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
	podAddressCidrBlocks?: [...null | string] @go(PodAddressCidrBlocks,[]*string)

	// The IP address range for services in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All services in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creating a cluster.
	serviceAddressCidrBlocks?: [...null | string] @go(ServiceAddressCidrBlocks,[]*string)

	// The Azure Resource Manager (ARM) ID of the VNet associated with your cluster. All components in the cluster (i.e. control plane and node pools) run on a single VNet. Example: /subscriptions/*/resourceGroups/*/providers/Microsoft.Network/virtualNetworks/* This field cannot be changed after creation.
	virtualNetworkId?: null | string @go(VirtualNetworkID,*string)
}

#NetworkingObservation: {
	// The IP address range of the pods in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All pods in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
	podAddressCidrBlocks?: [...null | string] @go(PodAddressCidrBlocks,[]*string)

	// The IP address range for services in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All services in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creating a cluster.
	serviceAddressCidrBlocks?: [...null | string] @go(ServiceAddressCidrBlocks,[]*string)

	// The Azure Resource Manager (ARM) ID of the VNet associated with your cluster. All components in the cluster (i.e. control plane and node pools) run on a single VNet. Example: /subscriptions/*/resourceGroups/*/providers/Microsoft.Network/virtualNetworks/* This field cannot be changed after creation.
	virtualNetworkId?: null | string @go(VirtualNetworkID,*string)
}

#NetworkingParameters: {
	// The IP address range of the pods in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All pods in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
	// +kubebuilder:validation:Optional
	podAddressCidrBlocks: [...null | string] @go(PodAddressCidrBlocks,[]*string)

	// The IP address range for services in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All services in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creating a cluster.
	// +kubebuilder:validation:Optional
	serviceAddressCidrBlocks: [...null | string] @go(ServiceAddressCidrBlocks,[]*string)

	// The Azure Resource Manager (ARM) ID of the VNet associated with your cluster. All components in the cluster (i.e. control plane and node pools) run on a single VNet. Example: /subscriptions/*/resourceGroups/*/providers/Microsoft.Network/virtualNetworks/* This field cannot be changed after creation.
	// +kubebuilder:validation:Optional
	virtualNetworkId?: null | string @go(VirtualNetworkID,*string)
}

#ProxyConfigInitParameters: {
	// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
	resourceGroupId?: null | string @go(ResourceGroupID,*string)

	// The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
	secretId?: null | string @go(SecretID,*string)
}

#ProxyConfigObservation: {
	// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
	resourceGroupId?: null | string @go(ResourceGroupID,*string)

	// The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
	secretId?: null | string @go(SecretID,*string)
}

#ProxyConfigParameters: {
	// The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/*/resourceGroups/*
	// +kubebuilder:validation:Optional
	resourceGroupId?: null | string @go(ResourceGroupID,*string)

	// The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
	// +kubebuilder:validation:Optional
	secretId?: null | string @go(SecretID,*string)
}

#ReplicaPlacementsInitParameters: {
	// For a given replica, the Azure availability zone where to provision the control plane VM and the ETCD disk.
	azureAvailabilityZone?: null | string @go(AzureAvailabilityZone,*string)

	// For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it's a subnet under the virtual network in the cluster configuration.
	subnetId?: null | string @go(SubnetID,*string)
}

#ReplicaPlacementsObservation: {
	// For a given replica, the Azure availability zone where to provision the control plane VM and the ETCD disk.
	azureAvailabilityZone?: null | string @go(AzureAvailabilityZone,*string)

	// For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it's a subnet under the virtual network in the cluster configuration.
	subnetId?: null | string @go(SubnetID,*string)
}

#ReplicaPlacementsParameters: {
	// For a given replica, the Azure availability zone where to provision the control plane VM and the ETCD disk.
	// +kubebuilder:validation:Optional
	azureAvailabilityZone?: null | string @go(AzureAvailabilityZone,*string)

	// For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it's a subnet under the virtual network in the cluster configuration.
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)
}

#RootVolumeInitParameters: {
	// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
	sizeGib?: null | float64 @go(SizeGib,*float64)
}

#RootVolumeObservation: {
	// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
	sizeGib?: null | float64 @go(SizeGib,*float64)
}

#RootVolumeParameters: {
	// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
	// +kubebuilder:validation:Optional
	sizeGib?: null | float64 @go(SizeGib,*float64)
}

#SSHConfigInitParameters: {
	// The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
	authorizedKey?: null | string @go(AuthorizedKey,*string)
}

#SSHConfigObservation: {
	// The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
	authorizedKey?: null | string @go(AuthorizedKey,*string)
}

#SSHConfigParameters: {
	// The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
	// +kubebuilder:validation:Optional
	authorizedKey?: null | string @go(AuthorizedKey,*string)
}

#WorkloadIdentityConfigInitParameters: {
}

#WorkloadIdentityConfigObservation: {
	identityProvider?: null | string @go(IdentityProvider,*string)
	issuerUri?:        null | string @go(IssuerURI,*string)
	workloadPool?:     null | string @go(WorkloadPool,*string)
}

#WorkloadIdentityConfigParameters: {
}

// ClusterSpec defines the desired state of Cluster
#ClusterSpec: {
	forProvider: #ClusterParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ClusterInitParameters @go(InitProvider)
}

// ClusterStatus defines the observed state of Cluster.
#ClusterStatus: {
	atProvider?: #ClusterObservation @go(AtProvider)
}

// Cluster is the Schema for the Clusters API. An Anthos cluster running on Azure.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Cluster: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authorization) || (has(self.initProvider) && has(self.initProvider.authorization))",message="spec.forProvider.authorization is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.azureRegion) || (has(self.initProvider) && has(self.initProvider.azureRegion))",message="spec.forProvider.azureRegion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.controlPlane) || (has(self.initProvider) && has(self.initProvider.controlPlane))",message="spec.forProvider.controlPlane is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fleet) || (has(self.initProvider) && has(self.initProvider.fleet))",message="spec.forProvider.fleet is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networking) || (has(self.initProvider) && has(self.initProvider.networking))",message="spec.forProvider.networking is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceGroupId) || (has(self.initProvider) && has(self.initProvider.resourceGroupId))",message="spec.forProvider.resourceGroupId is a required parameter"
	spec:    #ClusterSpec   @go(Spec)
	status?: #ClusterStatus @go(Status)
}

// ClusterList contains a list of Clusters
#ClusterList: {
	items: [...#Cluster] @go(Items,[]Cluster)
}
