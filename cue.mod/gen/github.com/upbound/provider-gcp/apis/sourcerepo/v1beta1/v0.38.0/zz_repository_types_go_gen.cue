// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/sourcerepo/v1beta1

package v1beta1

#PubsubConfigsInitParameters: {
	// The format of the Cloud Pub/Sub messages.
	messageFormat?: null | string @go(MessageFormat,*string)
}

#PubsubConfigsObservation: {
	// The format of the Cloud Pub/Sub messages.
	messageFormat?: null | string @go(MessageFormat,*string)

	// Email address of the service account used for publishing Cloud Pub/Sub messages.
	// This service account needs to be in the same project as the PubsubConfig. When added,
	// the caller needs to have iam.serviceAccounts.actAs permission on this service account.
	// If unspecified, it defaults to the compute engine default service account.
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// The identifier for this object. Format specified above.
	topic?: null | string @go(Topic,*string)
}

#PubsubConfigsParameters: {
	// The format of the Cloud Pub/Sub messages.
	// +kubebuilder:validation:Optional
	messageFormat?: null | string @go(MessageFormat,*string)

	// Email address of the service account used for publishing Cloud Pub/Sub messages.
	// This service account needs to be in the same project as the PubsubConfig. When added,
	// the caller needs to have iam.serviceAccounts.actAs permission on this service account.
	// If unspecified, it defaults to the compute engine default service account.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.ServiceAccount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("email",true)
	// +kubebuilder:validation:Optional
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// The identifier for this object. Format specified above.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/pubsub/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	topic?: null | string @go(Topic,*string)
}

#RepositoryInitParameters: {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// How this repository publishes a change in the repository through Cloud Pub/Sub.
	// Keyed by the topic names.
	// Structure is documented below.
	pubsubConfigs?: [...#PubsubConfigsInitParameters] @go(PubsubConfigs,[]PubsubConfigsInitParameters)
}

#RepositoryObservation: {
	// an identifier for the resource with format projects/{{project}}/repos/{{name}}
	id?: null | string @go(ID,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// How this repository publishes a change in the repository through Cloud Pub/Sub.
	// Keyed by the topic names.
	// Structure is documented below.
	pubsubConfigs?: [...#PubsubConfigsObservation] @go(PubsubConfigs,[]PubsubConfigsObservation)

	// The disk usage of the repo, in bytes.
	size?: null | float64 @go(Size,*float64)

	// URL to clone the repository from Google Cloud Source Repositories.
	url?: null | string @go(URL,*string)
}

#RepositoryParameters: {
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// How this repository publishes a change in the repository through Cloud Pub/Sub.
	// Keyed by the topic names.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	pubsubConfigs?: [...#PubsubConfigsParameters] @go(PubsubConfigs,[]PubsubConfigsParameters)
}

// RepositorySpec defines the desired state of Repository
#RepositorySpec: {
	forProvider: #RepositoryParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RepositoryInitParameters @go(InitProvider)
}

// RepositoryStatus defines the observed state of Repository.
#RepositoryStatus: {
	atProvider?: #RepositoryObservation @go(AtProvider)
}

// Repository is the Schema for the Repositorys API. A repository (or repo) is a Git repository storing versioned source content.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Repository: {
	spec:    #RepositorySpec   @go(Spec)
	status?: #RepositoryStatus @go(Status)
}

// RepositoryList contains a list of Repositorys
#RepositoryList: {
	items: [...#Repository] @go(Items,[]Repository)
}
