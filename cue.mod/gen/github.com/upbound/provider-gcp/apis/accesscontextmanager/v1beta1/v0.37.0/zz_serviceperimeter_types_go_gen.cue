// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/accesscontextmanager/v1beta1

package v1beta1

#EgressFromInitParameters: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	identityType?: null | string @go(IdentityType,*string)
}

#EgressFromObservation: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	identityType?: null | string @go(IdentityType,*string)
}

#EgressFromParameters: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	// +kubebuilder:validation:Optional
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	// +kubebuilder:validation:Optional
	identityType?: null | string @go(IdentityType,*string)
}

#EgressPoliciesEgressFromInitParameters: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	identityType?: null | string @go(IdentityType,*string)
}

#EgressPoliciesEgressFromObservation: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	identityType?: null | string @go(IdentityType,*string)
}

#EgressPoliciesEgressFromParameters: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	// +kubebuilder:validation:Optional
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	// +kubebuilder:validation:Optional
	identityType?: null | string @go(IdentityType,*string)
}

#EgressPoliciesEgressToInitParameters: {
	// A list of external resources that are allowed to be accessed. A request
	// matches if it contains an external resource in this list (Example:
	// s3://bucket/path). Currently '*' is not allowed.
	externalResources?: [...null | string] @go(ExternalResources,[]*string)

	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	operations?: [...#EgressToOperationsInitParameters] @go(Operations,[]EgressToOperationsInitParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)
}

#EgressPoliciesEgressToObservation: {
	// A list of external resources that are allowed to be accessed. A request
	// matches if it contains an external resource in this list (Example:
	// s3://bucket/path). Currently '*' is not allowed.
	externalResources?: [...null | string] @go(ExternalResources,[]*string)

	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	operations?: [...#EgressToOperationsObservation] @go(Operations,[]EgressToOperationsObservation)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)
}

#EgressPoliciesEgressToParameters: {
	// A list of external resources that are allowed to be accessed. A request
	// matches if it contains an external resource in this list (Example:
	// s3://bucket/path). Currently '*' is not allowed.
	// +kubebuilder:validation:Optional
	externalResources?: [...null | string] @go(ExternalResources,[]*string)

	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	operations?: [...#EgressToOperationsParameters] @go(Operations,[]EgressToOperationsParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	// +kubebuilder:validation:Optional
	resources?: [...null | string] @go(Resources,[]*string)
}

#EgressPoliciesInitParameters: {
	// Defines conditions on the source of a request causing this EgressPolicy to apply.
	// Structure is documented below.
	egressFrom?: [...#EgressFromInitParameters] @go(EgressFrom,[]EgressFromInitParameters)

	// Defines the conditions on the ApiOperation and destination resources that
	// cause this EgressPolicy to apply.
	// Structure is documented below.
	egressTo?: [...#EgressToInitParameters] @go(EgressTo,[]EgressToInitParameters)
}

#EgressPoliciesObservation: {
	// Defines conditions on the source of a request causing this EgressPolicy to apply.
	// Structure is documented below.
	egressFrom?: [...#EgressFromObservation] @go(EgressFrom,[]EgressFromObservation)

	// Defines the conditions on the ApiOperation and destination resources that
	// cause this EgressPolicy to apply.
	// Structure is documented below.
	egressTo?: [...#EgressToObservation] @go(EgressTo,[]EgressToObservation)
}

#EgressPoliciesParameters: {
	// Defines conditions on the source of a request causing this EgressPolicy to apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	egressFrom?: [...#EgressFromParameters] @go(EgressFrom,[]EgressFromParameters)

	// Defines the conditions on the ApiOperation and destination resources that
	// cause this EgressPolicy to apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	egressTo?: [...#EgressToParameters] @go(EgressTo,[]EgressToParameters)
}

#EgressToInitParameters: {
	// A list of external resources that are allowed to be accessed. A request
	// matches if it contains an external resource in this list (Example:
	// s3://bucket/path). Currently '*' is not allowed.
	externalResources?: [...null | string] @go(ExternalResources,[]*string)

	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	operations?: [...#OperationsInitParameters] @go(Operations,[]OperationsInitParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)
}

#EgressToObservation: {
	// A list of external resources that are allowed to be accessed. A request
	// matches if it contains an external resource in this list (Example:
	// s3://bucket/path). Currently '*' is not allowed.
	externalResources?: [...null | string] @go(ExternalResources,[]*string)

	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	operations?: [...#OperationsObservation] @go(Operations,[]OperationsObservation)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)
}

#EgressToOperationsInitParameters: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	methodSelectors?: [...#EgressToOperationsMethodSelectorsInitParameters] @go(MethodSelectors,[]EgressToOperationsMethodSelectorsInitParameters)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	serviceName?: null | string @go(ServiceName,*string)
}

#EgressToOperationsMethodSelectorsInitParameters: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	permission?: null | string @go(Permission,*string)
}

#EgressToOperationsMethodSelectorsObservation: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	permission?: null | string @go(Permission,*string)
}

#EgressToOperationsMethodSelectorsParameters: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	// +kubebuilder:validation:Optional
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	// +kubebuilder:validation:Optional
	permission?: null | string @go(Permission,*string)
}

#EgressToOperationsObservation: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	methodSelectors?: [...#EgressToOperationsMethodSelectorsObservation] @go(MethodSelectors,[]EgressToOperationsMethodSelectorsObservation)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	serviceName?: null | string @go(ServiceName,*string)
}

#EgressToOperationsParameters: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	methodSelectors?: [...#EgressToOperationsMethodSelectorsParameters] @go(MethodSelectors,[]EgressToOperationsMethodSelectorsParameters)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)
}

#EgressToParameters: {
	// A list of external resources that are allowed to be accessed. A request
	// matches if it contains an external resource in this list (Example:
	// s3://bucket/path). Currently '*' is not allowed.
	// +kubebuilder:validation:Optional
	externalResources?: [...null | string] @go(ExternalResources,[]*string)

	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	operations?: [...#OperationsParameters] @go(Operations,[]OperationsParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	// +kubebuilder:validation:Optional
	resources?: [...null | string] @go(Resources,[]*string)
}

#IngressFromInitParameters: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	identityType?: null | string @go(IdentityType,*string)

	// Sources that this IngressPolicy authorizes access from.
	// Structure is documented below.
	sources?: [...#SourcesInitParameters] @go(Sources,[]SourcesInitParameters)
}

#IngressFromObservation: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	identityType?: null | string @go(IdentityType,*string)

	// Sources that this IngressPolicy authorizes access from.
	// Structure is documented below.
	sources?: [...#SourcesObservation] @go(Sources,[]SourcesObservation)
}

#IngressFromParameters: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	// +kubebuilder:validation:Optional
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	// +kubebuilder:validation:Optional
	identityType?: null | string @go(IdentityType,*string)

	// Sources that this IngressPolicy authorizes access from.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	sources?: [...#SourcesParameters] @go(Sources,[]SourcesParameters)
}

#IngressFromSourcesInitParameters: {
	// A Google Cloud resource that is allowed to ingress the perimeter.
	// Requests from these resources will be allowed to access perimeter data.
	// Currently only projects are allowed. Format projects/{project_number}
	// The project may be in any Google Cloud organization, not just the
	// organization that the perimeter is defined in. * is not allowed, the case
	// of allowing all Google Cloud resources only is not supported.
	resource?: null | string @go(Resource,*string)
}

#IngressFromSourcesObservation: {
	// An AccessLevel resource name that allow resources within the
	// ServicePerimeters to be accessed from the internet. AccessLevels listed
	// must be in the same policy as this ServicePerimeter. Referencing a nonexistent
	// AccessLevel will cause an error. If no AccessLevel names are listed,
	// resources within the perimeter can only be accessed via Google Cloud calls
	// with request origins within the perimeter.
	// Example accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.
	// If * is specified, then all IngressSources will be allowed.
	accessLevel?: null | string @go(AccessLevel,*string)

	// A Google Cloud resource that is allowed to ingress the perimeter.
	// Requests from these resources will be allowed to access perimeter data.
	// Currently only projects are allowed. Format projects/{project_number}
	// The project may be in any Google Cloud organization, not just the
	// organization that the perimeter is defined in. * is not allowed, the case
	// of allowing all Google Cloud resources only is not supported.
	resource?: null | string @go(Resource,*string)
}

#IngressFromSourcesParameters: {
	// An AccessLevel resource name that allow resources within the
	// ServicePerimeters to be accessed from the internet. AccessLevels listed
	// must be in the same policy as this ServicePerimeter. Referencing a nonexistent
	// AccessLevel will cause an error. If no AccessLevel names are listed,
	// resources within the perimeter can only be accessed via Google Cloud calls
	// with request origins within the perimeter.
	// Example accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.
	// If * is specified, then all IngressSources will be allowed.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/accesscontextmanager/v1beta1.AccessLevel
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	accessLevel?: null | string @go(AccessLevel,*string)

	// A Google Cloud resource that is allowed to ingress the perimeter.
	// Requests from these resources will be allowed to access perimeter data.
	// Currently only projects are allowed. Format projects/{project_number}
	// The project may be in any Google Cloud organization, not just the
	// organization that the perimeter is defined in. * is not allowed, the case
	// of allowing all Google Cloud resources only is not supported.
	// +kubebuilder:validation:Optional
	resource?: null | string @go(Resource,*string)
}

#IngressPoliciesIngressFromInitParameters: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	identityType?: null | string @go(IdentityType,*string)

	// Sources that this IngressPolicy authorizes access from.
	// Structure is documented below.
	sources?: [...#IngressFromSourcesInitParameters] @go(Sources,[]IngressFromSourcesInitParameters)
}

#IngressPoliciesIngressFromObservation: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	identityType?: null | string @go(IdentityType,*string)

	// Sources that this IngressPolicy authorizes access from.
	// Structure is documented below.
	sources?: [...#IngressFromSourcesObservation] @go(Sources,[]IngressFromSourcesObservation)
}

#IngressPoliciesIngressFromParameters: {
	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	// +kubebuilder:validation:Optional
	identities?: [...null | string] @go(Identities,[]*string)

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: IDENTITY_TYPE_UNSPECIFIED, ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	// +kubebuilder:validation:Optional
	identityType?: null | string @go(IdentityType,*string)

	// Sources that this IngressPolicy authorizes access from.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	sources?: [...#IngressFromSourcesParameters] @go(Sources,[]IngressFromSourcesParameters)
}

#IngressPoliciesIngressToInitParameters: {
	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	operations?: [...#IngressPoliciesIngressToOperationsInitParameters] @go(Operations,[]IngressPoliciesIngressToOperationsInitParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)
}

#IngressPoliciesIngressToObservation: {
	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	operations?: [...#IngressPoliciesIngressToOperationsObservation] @go(Operations,[]IngressPoliciesIngressToOperationsObservation)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)
}

#IngressPoliciesIngressToOperationsInitParameters: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	methodSelectors?: [...#IngressToOperationsMethodSelectorsInitParameters] @go(MethodSelectors,[]IngressToOperationsMethodSelectorsInitParameters)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	serviceName?: null | string @go(ServiceName,*string)
}

#IngressPoliciesIngressToOperationsObservation: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	methodSelectors?: [...#IngressToOperationsMethodSelectorsObservation] @go(MethodSelectors,[]IngressToOperationsMethodSelectorsObservation)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	serviceName?: null | string @go(ServiceName,*string)
}

#IngressPoliciesIngressToOperationsParameters: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	methodSelectors?: [...#IngressToOperationsMethodSelectorsParameters] @go(MethodSelectors,[]IngressToOperationsMethodSelectorsParameters)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)
}

#IngressPoliciesIngressToParameters: {
	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	operations?: [...#IngressPoliciesIngressToOperationsParameters] @go(Operations,[]IngressPoliciesIngressToOperationsParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	// +kubebuilder:validation:Optional
	resources?: [...null | string] @go(Resources,[]*string)
}

#IngressPoliciesInitParameters: {
	// Defines the conditions on the source of a request causing this IngressPolicy
	// to apply.
	// Structure is documented below.
	ingressFrom?: [...#IngressFromInitParameters] @go(IngressFrom,[]IngressFromInitParameters)

	// Defines the conditions on the ApiOperation and request destination that cause
	// this IngressPolicy to apply.
	// Structure is documented below.
	ingressTo?: [...#IngressToInitParameters] @go(IngressTo,[]IngressToInitParameters)
}

#IngressPoliciesObservation: {
	// Defines the conditions on the source of a request causing this IngressPolicy
	// to apply.
	// Structure is documented below.
	ingressFrom?: [...#IngressFromObservation] @go(IngressFrom,[]IngressFromObservation)

	// Defines the conditions on the ApiOperation and request destination that cause
	// this IngressPolicy to apply.
	// Structure is documented below.
	ingressTo?: [...#IngressToObservation] @go(IngressTo,[]IngressToObservation)
}

#IngressPoliciesParameters: {
	// Defines the conditions on the source of a request causing this IngressPolicy
	// to apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ingressFrom?: [...#IngressFromParameters] @go(IngressFrom,[]IngressFromParameters)

	// Defines the conditions on the ApiOperation and request destination that cause
	// this IngressPolicy to apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ingressTo?: [...#IngressToParameters] @go(IngressTo,[]IngressToParameters)
}

#IngressToInitParameters: {
	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	operations?: [...#IngressToOperationsInitParameters] @go(Operations,[]IngressToOperationsInitParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)
}

#IngressToObservation: {
	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	operations?: [...#IngressToOperationsObservation] @go(Operations,[]IngressToOperationsObservation)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)
}

#IngressToOperationsInitParameters: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	methodSelectors?: [...#OperationsMethodSelectorsInitParameters] @go(MethodSelectors,[]OperationsMethodSelectorsInitParameters)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	serviceName?: null | string @go(ServiceName,*string)
}

#IngressToOperationsMethodSelectorsInitParameters: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	permission?: null | string @go(Permission,*string)
}

#IngressToOperationsMethodSelectorsObservation: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	permission?: null | string @go(Permission,*string)
}

#IngressToOperationsMethodSelectorsParameters: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	// +kubebuilder:validation:Optional
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	// +kubebuilder:validation:Optional
	permission?: null | string @go(Permission,*string)
}

#IngressToOperationsObservation: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	methodSelectors?: [...#OperationsMethodSelectorsObservation] @go(MethodSelectors,[]OperationsMethodSelectorsObservation)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	serviceName?: null | string @go(ServiceName,*string)
}

#IngressToOperationsParameters: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	methodSelectors?: [...#OperationsMethodSelectorsParameters] @go(MethodSelectors,[]OperationsMethodSelectorsParameters)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)
}

#IngressToParameters: {
	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	operations?: [...#IngressToOperationsParameters] @go(Operations,[]IngressToOperationsParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	// +kubebuilder:validation:Optional
	resources?: [...null | string] @go(Resources,[]*string)
}

#MethodSelectorsInitParameters: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	permission?: null | string @go(Permission,*string)
}

#MethodSelectorsObservation: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	permission?: null | string @go(Permission,*string)
}

#MethodSelectorsParameters: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	// +kubebuilder:validation:Optional
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	// +kubebuilder:validation:Optional
	permission?: null | string @go(Permission,*string)
}

#OperationsInitParameters: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	methodSelectors?: [...#MethodSelectorsInitParameters] @go(MethodSelectors,[]MethodSelectorsInitParameters)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	serviceName?: null | string @go(ServiceName,*string)
}

#OperationsMethodSelectorsInitParameters: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	permission?: null | string @go(Permission,*string)
}

#OperationsMethodSelectorsObservation: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	permission?: null | string @go(Permission,*string)
}

#OperationsMethodSelectorsParameters: {
	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	// +kubebuilder:validation:Optional
	method?: null | string @go(Method,*string)

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	// +kubebuilder:validation:Optional
	permission?: null | string @go(Permission,*string)
}

#OperationsObservation: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	methodSelectors?: [...#MethodSelectorsObservation] @go(MethodSelectors,[]MethodSelectorsObservation)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	serviceName?: null | string @go(ServiceName,*string)
}

#OperationsParameters: {
	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	methodSelectors?: [...#MethodSelectorsParameters] @go(MethodSelectors,[]MethodSelectorsParameters)

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)
}

#ServicePerimeterInitParameters: {
	// Description of the ServicePerimeter and its use. Does not affect
	// behavior.
	description?: null | string @go(Description,*string)

	// Resource name for the ServicePerimeter. The short_name component must
	// begin with a letter and only include alphanumeric and '_'.
	// Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
	name?: null | string @go(Name,*string)

	// The AccessPolicy this ServicePerimeter lives in.
	// Format: accessPolicies/{policy_id}
	parent?: null | string @go(Parent,*string)

	// Specifies the type of the Perimeter. There are two types: regular and
	// bridge. Regular Service Perimeter contains resources, access levels,
	// and restricted services. Every resource can be in at most
	// ONE regular Service Perimeter.
	// In addition to being in a regular service perimeter, a resource can also
	// be in zero or more perimeter bridges. A perimeter bridge only contains
	// resources. Cross project operations are permitted if all effected
	// resources share some perimeter (whether bridge or regular). Perimeter
	// Bridge does not contain access levels or services: those are governed
	// entirely by the regular perimeter that resource is in.
	// Perimeter Bridges are typically useful when building more complex
	// topologies with many independent perimeters that need to share some data
	// with a common perimeter, but should not be able to share data among
	// themselves.
	// Default value is PERIMETER_TYPE_REGULAR.
	// Possible values are: PERIMETER_TYPE_REGULAR, PERIMETER_TYPE_BRIDGE.
	perimeterType?: null | string @go(PerimeterType,*string)

	// Proposed (or dry run) ServicePerimeter configuration.
	// This configuration allows to specify and test ServicePerimeter configuration
	// without enforcing actual access restrictions. Only allowed to be set when
	// the useExplicitDryRunSpec flag is set.
	// Structure is documented below.
	spec?: [...#SpecInitParameters] @go(Spec,[]SpecInitParameters)

	// ServicePerimeter configuration. Specifies sets of resources,
	// restricted services and access levels that determine
	// perimeter content and boundaries.
	// Structure is documented below.
	status?: [...#StatusInitParameters] @go(Status,[]StatusInitParameters)

	// Human readable title. Must be unique within the Policy.
	title?: null | string @go(Title,*string)

	// Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
	// for all Service Perimeters, and that spec is identical to the status for those
	// Service Perimeters. When this flag is set, it inhibits the generation of the
	// implicit spec, thereby allowing the user to explicitly provide a
	// configuration ("spec") to use in a dry-run version of the Service Perimeter.
	// This allows the user to test changes to the enforced config ("status") without
	// actually enforcing them. This testing is done through analyzing the differences
	// between currently enforced and suggested restrictions. useExplicitDryRunSpec must
	// bet set to True if any of the fields in the spec are set to non-default values.
	useExplicitDryRunSpec?: null | bool @go(UseExplicitDryRunSpec,*bool)
}

#ServicePerimeterObservation: {
	// Time the AccessPolicy was created in UTC.
	createTime?: null | string @go(CreateTime,*string)

	// Description of the ServicePerimeter and its use. Does not affect
	// behavior.
	description?: null | string @go(Description,*string)

	// an identifier for the resource with format {{name}}
	id?: null | string @go(ID,*string)

	// Resource name for the ServicePerimeter. The short_name component must
	// begin with a letter and only include alphanumeric and '_'.
	// Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
	name?: null | string @go(Name,*string)

	// The AccessPolicy this ServicePerimeter lives in.
	// Format: accessPolicies/{policy_id}
	parent?: null | string @go(Parent,*string)

	// Specifies the type of the Perimeter. There are two types: regular and
	// bridge. Regular Service Perimeter contains resources, access levels,
	// and restricted services. Every resource can be in at most
	// ONE regular Service Perimeter.
	// In addition to being in a regular service perimeter, a resource can also
	// be in zero or more perimeter bridges. A perimeter bridge only contains
	// resources. Cross project operations are permitted if all effected
	// resources share some perimeter (whether bridge or regular). Perimeter
	// Bridge does not contain access levels or services: those are governed
	// entirely by the regular perimeter that resource is in.
	// Perimeter Bridges are typically useful when building more complex
	// topologies with many independent perimeters that need to share some data
	// with a common perimeter, but should not be able to share data among
	// themselves.
	// Default value is PERIMETER_TYPE_REGULAR.
	// Possible values are: PERIMETER_TYPE_REGULAR, PERIMETER_TYPE_BRIDGE.
	perimeterType?: null | string @go(PerimeterType,*string)

	// Proposed (or dry run) ServicePerimeter configuration.
	// This configuration allows to specify and test ServicePerimeter configuration
	// without enforcing actual access restrictions. Only allowed to be set when
	// the useExplicitDryRunSpec flag is set.
	// Structure is documented below.
	spec?: [...#SpecObservation] @go(Spec,[]SpecObservation)

	// ServicePerimeter configuration. Specifies sets of resources,
	// restricted services and access levels that determine
	// perimeter content and boundaries.
	// Structure is documented below.
	status?: [...#StatusObservation] @go(Status,[]StatusObservation)

	// Human readable title. Must be unique within the Policy.
	title?: null | string @go(Title,*string)

	// Time the AccessPolicy was updated in UTC.
	updateTime?: null | string @go(UpdateTime,*string)

	// Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
	// for all Service Perimeters, and that spec is identical to the status for those
	// Service Perimeters. When this flag is set, it inhibits the generation of the
	// implicit spec, thereby allowing the user to explicitly provide a
	// configuration ("spec") to use in a dry-run version of the Service Perimeter.
	// This allows the user to test changes to the enforced config ("status") without
	// actually enforcing them. This testing is done through analyzing the differences
	// between currently enforced and suggested restrictions. useExplicitDryRunSpec must
	// bet set to True if any of the fields in the spec are set to non-default values.
	useExplicitDryRunSpec?: null | bool @go(UseExplicitDryRunSpec,*bool)
}

#ServicePerimeterParameters: {
	// Description of the ServicePerimeter and its use. Does not affect
	// behavior.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Resource name for the ServicePerimeter. The short_name component must
	// begin with a letter and only include alphanumeric and '_'.
	// Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The AccessPolicy this ServicePerimeter lives in.
	// Format: accessPolicies/{policy_id}
	// +kubebuilder:validation:Optional
	parent?: null | string @go(Parent,*string)

	// Specifies the type of the Perimeter. There are two types: regular and
	// bridge. Regular Service Perimeter contains resources, access levels,
	// and restricted services. Every resource can be in at most
	// ONE regular Service Perimeter.
	// In addition to being in a regular service perimeter, a resource can also
	// be in zero or more perimeter bridges. A perimeter bridge only contains
	// resources. Cross project operations are permitted if all effected
	// resources share some perimeter (whether bridge or regular). Perimeter
	// Bridge does not contain access levels or services: those are governed
	// entirely by the regular perimeter that resource is in.
	// Perimeter Bridges are typically useful when building more complex
	// topologies with many independent perimeters that need to share some data
	// with a common perimeter, but should not be able to share data among
	// themselves.
	// Default value is PERIMETER_TYPE_REGULAR.
	// Possible values are: PERIMETER_TYPE_REGULAR, PERIMETER_TYPE_BRIDGE.
	// +kubebuilder:validation:Optional
	perimeterType?: null | string @go(PerimeterType,*string)

	// Proposed (or dry run) ServicePerimeter configuration.
	// This configuration allows to specify and test ServicePerimeter configuration
	// without enforcing actual access restrictions. Only allowed to be set when
	// the useExplicitDryRunSpec flag is set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	spec?: [...#SpecParameters] @go(Spec,[]SpecParameters)

	// ServicePerimeter configuration. Specifies sets of resources,
	// restricted services and access levels that determine
	// perimeter content and boundaries.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	status?: [...#StatusParameters] @go(Status,[]StatusParameters)

	// Human readable title. Must be unique within the Policy.
	// +kubebuilder:validation:Optional
	title?: null | string @go(Title,*string)

	// Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
	// for all Service Perimeters, and that spec is identical to the status for those
	// Service Perimeters. When this flag is set, it inhibits the generation of the
	// implicit spec, thereby allowing the user to explicitly provide a
	// configuration ("spec") to use in a dry-run version of the Service Perimeter.
	// This allows the user to test changes to the enforced config ("status") without
	// actually enforcing them. This testing is done through analyzing the differences
	// between currently enforced and suggested restrictions. useExplicitDryRunSpec must
	// bet set to True if any of the fields in the spec are set to non-default values.
	// +kubebuilder:validation:Optional
	useExplicitDryRunSpec?: null | bool @go(UseExplicitDryRunSpec,*bool)
}

#SourcesInitParameters: {
	// An AccessLevel resource name that allow resources within the
	// ServicePerimeters to be accessed from the internet. AccessLevels listed
	// must be in the same policy as this ServicePerimeter. Referencing a nonexistent
	// AccessLevel will cause an error. If no AccessLevel names are listed,
	// resources within the perimeter can only be accessed via Google Cloud calls
	// with request origins within the perimeter.
	// Example accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.
	// If * is specified, then all IngressSources will be allowed.
	accessLevel?: null | string @go(AccessLevel,*string)

	// A Google Cloud resource that is allowed to ingress the perimeter.
	// Requests from these resources will be allowed to access perimeter data.
	// Currently only projects are allowed. Format projects/{project_number}
	// The project may be in any Google Cloud organization, not just the
	// organization that the perimeter is defined in. * is not allowed, the case
	// of allowing all Google Cloud resources only is not supported.
	resource?: null | string @go(Resource,*string)
}

#SourcesObservation: {
	// An AccessLevel resource name that allow resources within the
	// ServicePerimeters to be accessed from the internet. AccessLevels listed
	// must be in the same policy as this ServicePerimeter. Referencing a nonexistent
	// AccessLevel will cause an error. If no AccessLevel names are listed,
	// resources within the perimeter can only be accessed via Google Cloud calls
	// with request origins within the perimeter.
	// Example accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.
	// If * is specified, then all IngressSources will be allowed.
	accessLevel?: null | string @go(AccessLevel,*string)

	// A Google Cloud resource that is allowed to ingress the perimeter.
	// Requests from these resources will be allowed to access perimeter data.
	// Currently only projects are allowed. Format projects/{project_number}
	// The project may be in any Google Cloud organization, not just the
	// organization that the perimeter is defined in. * is not allowed, the case
	// of allowing all Google Cloud resources only is not supported.
	resource?: null | string @go(Resource,*string)
}

#SourcesParameters: {
	// An AccessLevel resource name that allow resources within the
	// ServicePerimeters to be accessed from the internet. AccessLevels listed
	// must be in the same policy as this ServicePerimeter. Referencing a nonexistent
	// AccessLevel will cause an error. If no AccessLevel names are listed,
	// resources within the perimeter can only be accessed via Google Cloud calls
	// with request origins within the perimeter.
	// Example accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.
	// If * is specified, then all IngressSources will be allowed.
	// +kubebuilder:validation:Optional
	accessLevel?: null | string @go(AccessLevel,*string)

	// A Google Cloud resource that is allowed to ingress the perimeter.
	// Requests from these resources will be allowed to access perimeter data.
	// Currently only projects are allowed. Format projects/{project_number}
	// The project may be in any Google Cloud organization, not just the
	// organization that the perimeter is defined in. * is not allowed, the case
	// of allowing all Google Cloud resources only is not supported.
	// +kubebuilder:validation:Optional
	resource?: null | string @go(Resource,*string)
}

#SpecInitParameters: {
	// List of EgressPolicies to apply to the perimeter. A perimeter may
	// have multiple EgressPolicies, each of which is evaluated separately.
	// Access is granted if any EgressPolicy grants it. Must be empty for
	// a perimeter bridge.
	// Structure is documented below.
	egressPolicies?: [...#EgressPoliciesInitParameters] @go(EgressPolicies,[]EgressPoliciesInitParameters)

	// List of IngressPolicies to apply to the perimeter. A perimeter may
	// have multiple IngressPolicies, each of which is evaluated
	// separately. Access is granted if any Ingress Policy grants it.
	// Must be empty for a perimeter bridge.
	// Structure is documented below.
	ingressPolicies?: [...#IngressPoliciesInitParameters] @go(IngressPolicies,[]IngressPoliciesInitParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)

	// GCP services that are subject to the Service Perimeter
	// restrictions. Must contain a list of services. For example, if
	// storage.googleapis.com is specified, access to the storage
	// buckets inside the perimeter must meet the perimeter's access
	// restrictions.
	restrictedServices?: [...null | string] @go(RestrictedServices,[]*string)

	// Specifies how APIs are allowed to communicate within the Service
	// Perimeter.
	// Structure is documented below.
	vpcAccessibleServices?: [...#VPCAccessibleServicesInitParameters] @go(VPCAccessibleServices,[]VPCAccessibleServicesInitParameters)
}

#SpecObservation: {
	// A list of AccessLevel resource names that allow resources within
	// the ServicePerimeter to be accessed from the internet.
	// AccessLevels listed must be in the same policy as this
	// ServicePerimeter. Referencing a nonexistent AccessLevel is a
	// syntax error. If no AccessLevel names are listed, resources within
	// the perimeter can only be accessed via GCP calls with request
	// origins within the perimeter. For Service Perimeter Bridge, must
	// be empty.
	// Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
	accessLevels?: [...null | string] @go(AccessLevels,[]*string)

	// List of EgressPolicies to apply to the perimeter. A perimeter may
	// have multiple EgressPolicies, each of which is evaluated separately.
	// Access is granted if any EgressPolicy grants it. Must be empty for
	// a perimeter bridge.
	// Structure is documented below.
	egressPolicies?: [...#EgressPoliciesObservation] @go(EgressPolicies,[]EgressPoliciesObservation)

	// List of IngressPolicies to apply to the perimeter. A perimeter may
	// have multiple IngressPolicies, each of which is evaluated
	// separately. Access is granted if any Ingress Policy grants it.
	// Must be empty for a perimeter bridge.
	// Structure is documented below.
	ingressPolicies?: [...#IngressPoliciesObservation] @go(IngressPolicies,[]IngressPoliciesObservation)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)

	// GCP services that are subject to the Service Perimeter
	// restrictions. Must contain a list of services. For example, if
	// storage.googleapis.com is specified, access to the storage
	// buckets inside the perimeter must meet the perimeter's access
	// restrictions.
	restrictedServices?: [...null | string] @go(RestrictedServices,[]*string)

	// Specifies how APIs are allowed to communicate within the Service
	// Perimeter.
	// Structure is documented below.
	vpcAccessibleServices?: [...#VPCAccessibleServicesObservation] @go(VPCAccessibleServices,[]VPCAccessibleServicesObservation)
}

#SpecParameters: {
	// A list of AccessLevel resource names that allow resources within
	// the ServicePerimeter to be accessed from the internet.
	// AccessLevels listed must be in the same policy as this
	// ServicePerimeter. Referencing a nonexistent AccessLevel is a
	// syntax error. If no AccessLevel names are listed, resources within
	// the perimeter can only be accessed via GCP calls with request
	// origins within the perimeter. For Service Perimeter Bridge, must
	// be empty.
	// Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
	// +crossplane:generate:reference:type=AccessLevel
	// +kubebuilder:validation:Optional
	accessLevels?: [...null | string] @go(AccessLevels,[]*string)

	// List of EgressPolicies to apply to the perimeter. A perimeter may
	// have multiple EgressPolicies, each of which is evaluated separately.
	// Access is granted if any EgressPolicy grants it. Must be empty for
	// a perimeter bridge.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	egressPolicies?: [...#EgressPoliciesParameters] @go(EgressPolicies,[]EgressPoliciesParameters)

	// List of IngressPolicies to apply to the perimeter. A perimeter may
	// have multiple IngressPolicies, each of which is evaluated
	// separately. Access is granted if any Ingress Policy grants it.
	// Must be empty for a perimeter bridge.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ingressPolicies?: [...#IngressPoliciesParameters] @go(IngressPolicies,[]IngressPoliciesParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	// +kubebuilder:validation:Optional
	resources?: [...null | string] @go(Resources,[]*string)

	// GCP services that are subject to the Service Perimeter
	// restrictions. Must contain a list of services. For example, if
	// storage.googleapis.com is specified, access to the storage
	// buckets inside the perimeter must meet the perimeter's access
	// restrictions.
	// +kubebuilder:validation:Optional
	restrictedServices?: [...null | string] @go(RestrictedServices,[]*string)

	// Specifies how APIs are allowed to communicate within the Service
	// Perimeter.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	vpcAccessibleServices?: [...#VPCAccessibleServicesParameters] @go(VPCAccessibleServices,[]VPCAccessibleServicesParameters)
}

#StatusEgressPoliciesInitParameters: {
	// Defines conditions on the source of a request causing this EgressPolicy to apply.
	// Structure is documented below.
	egressFrom?: [...#EgressPoliciesEgressFromInitParameters] @go(EgressFrom,[]EgressPoliciesEgressFromInitParameters)

	// Defines the conditions on the ApiOperation and destination resources that
	// cause this EgressPolicy to apply.
	// Structure is documented below.
	egressTo?: [...#EgressPoliciesEgressToInitParameters] @go(EgressTo,[]EgressPoliciesEgressToInitParameters)
}

#StatusEgressPoliciesObservation: {
	// Defines conditions on the source of a request causing this EgressPolicy to apply.
	// Structure is documented below.
	egressFrom?: [...#EgressPoliciesEgressFromObservation] @go(EgressFrom,[]EgressPoliciesEgressFromObservation)

	// Defines the conditions on the ApiOperation and destination resources that
	// cause this EgressPolicy to apply.
	// Structure is documented below.
	egressTo?: [...#EgressPoliciesEgressToObservation] @go(EgressTo,[]EgressPoliciesEgressToObservation)
}

#StatusEgressPoliciesParameters: {
	// Defines conditions on the source of a request causing this EgressPolicy to apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	egressFrom?: [...#EgressPoliciesEgressFromParameters] @go(EgressFrom,[]EgressPoliciesEgressFromParameters)

	// Defines the conditions on the ApiOperation and destination resources that
	// cause this EgressPolicy to apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	egressTo?: [...#EgressPoliciesEgressToParameters] @go(EgressTo,[]EgressPoliciesEgressToParameters)
}

#StatusIngressPoliciesInitParameters: {
	// Defines the conditions on the source of a request causing this IngressPolicy
	// to apply.
	// Structure is documented below.
	ingressFrom?: [...#IngressPoliciesIngressFromInitParameters] @go(IngressFrom,[]IngressPoliciesIngressFromInitParameters)

	// Defines the conditions on the ApiOperation and request destination that cause
	// this IngressPolicy to apply.
	// Structure is documented below.
	ingressTo?: [...#IngressPoliciesIngressToInitParameters] @go(IngressTo,[]IngressPoliciesIngressToInitParameters)
}

#StatusIngressPoliciesObservation: {
	// Defines the conditions on the source of a request causing this IngressPolicy
	// to apply.
	// Structure is documented below.
	ingressFrom?: [...#IngressPoliciesIngressFromObservation] @go(IngressFrom,[]IngressPoliciesIngressFromObservation)

	// Defines the conditions on the ApiOperation and request destination that cause
	// this IngressPolicy to apply.
	// Structure is documented below.
	ingressTo?: [...#IngressPoliciesIngressToObservation] @go(IngressTo,[]IngressPoliciesIngressToObservation)
}

#StatusIngressPoliciesParameters: {
	// Defines the conditions on the source of a request causing this IngressPolicy
	// to apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ingressFrom?: [...#IngressPoliciesIngressFromParameters] @go(IngressFrom,[]IngressPoliciesIngressFromParameters)

	// Defines the conditions on the ApiOperation and request destination that cause
	// this IngressPolicy to apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ingressTo?: [...#IngressPoliciesIngressToParameters] @go(IngressTo,[]IngressPoliciesIngressToParameters)
}

#StatusInitParameters: {
	// List of EgressPolicies to apply to the perimeter. A perimeter may
	// have multiple EgressPolicies, each of which is evaluated separately.
	// Access is granted if any EgressPolicy grants it. Must be empty for
	// a perimeter bridge.
	// Structure is documented below.
	egressPolicies?: [...#StatusEgressPoliciesInitParameters] @go(EgressPolicies,[]StatusEgressPoliciesInitParameters)

	// List of IngressPolicies to apply to the perimeter. A perimeter may
	// have multiple IngressPolicies, each of which is evaluated
	// separately. Access is granted if any Ingress Policy grants it.
	// Must be empty for a perimeter bridge.
	// Structure is documented below.
	ingressPolicies?: [...#StatusIngressPoliciesInitParameters] @go(IngressPolicies,[]StatusIngressPoliciesInitParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)

	// GCP services that are subject to the Service Perimeter
	// restrictions. Must contain a list of services. For example, if
	// storage.googleapis.com is specified, access to the storage
	// buckets inside the perimeter must meet the perimeter's access
	// restrictions.
	restrictedServices?: [...null | string] @go(RestrictedServices,[]*string)

	// Specifies how APIs are allowed to communicate within the Service
	// Perimeter.
	// Structure is documented below.
	vpcAccessibleServices?: [...#StatusVPCAccessibleServicesInitParameters] @go(VPCAccessibleServices,[]StatusVPCAccessibleServicesInitParameters)
}

#StatusObservation: {
	// A list of AccessLevel resource names that allow resources within
	// the ServicePerimeter to be accessed from the internet.
	// AccessLevels listed must be in the same policy as this
	// ServicePerimeter. Referencing a nonexistent AccessLevel is a
	// syntax error. If no AccessLevel names are listed, resources within
	// the perimeter can only be accessed via GCP calls with request
	// origins within the perimeter. For Service Perimeter Bridge, must
	// be empty.
	// Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
	accessLevels?: [...null | string] @go(AccessLevels,[]*string)

	// List of EgressPolicies to apply to the perimeter. A perimeter may
	// have multiple EgressPolicies, each of which is evaluated separately.
	// Access is granted if any EgressPolicy grants it. Must be empty for
	// a perimeter bridge.
	// Structure is documented below.
	egressPolicies?: [...#StatusEgressPoliciesObservation] @go(EgressPolicies,[]StatusEgressPoliciesObservation)

	// List of IngressPolicies to apply to the perimeter. A perimeter may
	// have multiple IngressPolicies, each of which is evaluated
	// separately. Access is granted if any Ingress Policy grants it.
	// Must be empty for a perimeter bridge.
	// Structure is documented below.
	ingressPolicies?: [...#StatusIngressPoliciesObservation] @go(IngressPolicies,[]StatusIngressPoliciesObservation)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	resources?: [...null | string] @go(Resources,[]*string)

	// GCP services that are subject to the Service Perimeter
	// restrictions. Must contain a list of services. For example, if
	// storage.googleapis.com is specified, access to the storage
	// buckets inside the perimeter must meet the perimeter's access
	// restrictions.
	restrictedServices?: [...null | string] @go(RestrictedServices,[]*string)

	// Specifies how APIs are allowed to communicate within the Service
	// Perimeter.
	// Structure is documented below.
	vpcAccessibleServices?: [...#StatusVPCAccessibleServicesObservation] @go(VPCAccessibleServices,[]StatusVPCAccessibleServicesObservation)
}

#StatusParameters: {
	// A list of AccessLevel resource names that allow resources within
	// the ServicePerimeter to be accessed from the internet.
	// AccessLevels listed must be in the same policy as this
	// ServicePerimeter. Referencing a nonexistent AccessLevel is a
	// syntax error. If no AccessLevel names are listed, resources within
	// the perimeter can only be accessed via GCP calls with request
	// origins within the perimeter. For Service Perimeter Bridge, must
	// be empty.
	// Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
	// +crossplane:generate:reference:type=AccessLevel
	// +kubebuilder:validation:Optional
	accessLevels?: [...null | string] @go(AccessLevels,[]*string)

	// List of EgressPolicies to apply to the perimeter. A perimeter may
	// have multiple EgressPolicies, each of which is evaluated separately.
	// Access is granted if any EgressPolicy grants it. Must be empty for
	// a perimeter bridge.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	egressPolicies?: [...#StatusEgressPoliciesParameters] @go(EgressPolicies,[]StatusEgressPoliciesParameters)

	// List of IngressPolicies to apply to the perimeter. A perimeter may
	// have multiple IngressPolicies, each of which is evaluated
	// separately. Access is granted if any Ingress Policy grants it.
	// Must be empty for a perimeter bridge.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ingressPolicies?: [...#StatusIngressPoliciesParameters] @go(IngressPolicies,[]StatusIngressPoliciesParameters)

	// A list of GCP resources that are inside of the service perimeter.
	// Currently only projects are allowed.
	// Format: projects/{project_number}
	// +kubebuilder:validation:Optional
	resources?: [...null | string] @go(Resources,[]*string)

	// GCP services that are subject to the Service Perimeter
	// restrictions. Must contain a list of services. For example, if
	// storage.googleapis.com is specified, access to the storage
	// buckets inside the perimeter must meet the perimeter's access
	// restrictions.
	// +kubebuilder:validation:Optional
	restrictedServices?: [...null | string] @go(RestrictedServices,[]*string)

	// Specifies how APIs are allowed to communicate within the Service
	// Perimeter.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	vpcAccessibleServices?: [...#StatusVPCAccessibleServicesParameters] @go(VPCAccessibleServices,[]StatusVPCAccessibleServicesParameters)
}

#StatusVPCAccessibleServicesInitParameters: {
	// The list of APIs usable within the Service Perimeter.
	// Must be empty unless enableRestriction is True.
	allowedServices?: [...null | string] @go(AllowedServices,[]*string)

	// Whether to restrict API calls within the Service Perimeter to the
	// list of APIs specified in 'allowedServices'.
	enableRestriction?: null | bool @go(EnableRestriction,*bool)
}

#StatusVPCAccessibleServicesObservation: {
	// The list of APIs usable within the Service Perimeter.
	// Must be empty unless enableRestriction is True.
	allowedServices?: [...null | string] @go(AllowedServices,[]*string)

	// Whether to restrict API calls within the Service Perimeter to the
	// list of APIs specified in 'allowedServices'.
	enableRestriction?: null | bool @go(EnableRestriction,*bool)
}

#StatusVPCAccessibleServicesParameters: {
	// The list of APIs usable within the Service Perimeter.
	// Must be empty unless enableRestriction is True.
	// +kubebuilder:validation:Optional
	allowedServices?: [...null | string] @go(AllowedServices,[]*string)

	// Whether to restrict API calls within the Service Perimeter to the
	// list of APIs specified in 'allowedServices'.
	// +kubebuilder:validation:Optional
	enableRestriction?: null | bool @go(EnableRestriction,*bool)
}

#VPCAccessibleServicesInitParameters: {
	// The list of APIs usable within the Service Perimeter.
	// Must be empty unless enableRestriction is True.
	allowedServices?: [...null | string] @go(AllowedServices,[]*string)

	// Whether to restrict API calls within the Service Perimeter to the
	// list of APIs specified in 'allowedServices'.
	enableRestriction?: null | bool @go(EnableRestriction,*bool)
}

#VPCAccessibleServicesObservation: {
	// The list of APIs usable within the Service Perimeter.
	// Must be empty unless enableRestriction is True.
	allowedServices?: [...null | string] @go(AllowedServices,[]*string)

	// Whether to restrict API calls within the Service Perimeter to the
	// list of APIs specified in 'allowedServices'.
	enableRestriction?: null | bool @go(EnableRestriction,*bool)
}

#VPCAccessibleServicesParameters: {
	// The list of APIs usable within the Service Perimeter.
	// Must be empty unless enableRestriction is True.
	// +kubebuilder:validation:Optional
	allowedServices?: [...null | string] @go(AllowedServices,[]*string)

	// Whether to restrict API calls within the Service Perimeter to the
	// list of APIs specified in 'allowedServices'.
	// +kubebuilder:validation:Optional
	enableRestriction?: null | bool @go(EnableRestriction,*bool)
}

// ServicePerimeterSpec defines the desired state of ServicePerimeter
#ServicePerimeterSpec: {
	forProvider: #ServicePerimeterParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ServicePerimeterInitParameters @go(InitProvider)
}

// ServicePerimeterStatus defines the observed state of ServicePerimeter.
#ServicePerimeterStatus: {
	atProvider?: #ServicePerimeterObservation @go(AtProvider)
}

// ServicePerimeter is the Schema for the ServicePerimeters API. ServicePerimeter describes a set of GCP resources which can freely import and export data amongst themselves, but not export outside of the ServicePerimeter.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#ServicePerimeter: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parent) || (has(self.initProvider) && has(self.initProvider.parent))",message="spec.forProvider.parent is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.title) || (has(self.initProvider) && has(self.initProvider.title))",message="spec.forProvider.title is a required parameter"
	spec:    #ServicePerimeterSpec   @go(Spec)
	status?: #ServicePerimeterStatus @go(Status)
}

// ServicePerimeterList contains a list of ServicePerimeters
#ServicePerimeterList: {
	items: [...#ServicePerimeter] @go(Items,[]ServicePerimeter)
}
