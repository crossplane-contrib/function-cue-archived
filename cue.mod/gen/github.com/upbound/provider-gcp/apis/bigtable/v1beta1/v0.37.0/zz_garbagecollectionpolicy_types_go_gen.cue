// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/bigtable/v1beta1

package v1beta1

#GarbageCollectionPolicyInitParameters: {
	// The name of the column family.
	columnFamily?: null | string @go(ColumnFamily,*string)

	// The deletion policy for the GC policy.
	// Setting ABANDON allows the resource to be abandoned rather than deleted. This is useful for GC policy as it cannot be deleted in a replicated instance.
	deletionPolicy?: null | string @go(DeletionPolicy,*string)

	// Serialized JSON object to represent a more complex GC policy. Conflicts with mode, max_age and max_version. Conflicts with mode, max_age and max_version.
	gcRules?: null | string @go(GcRules,*string)

	// GC policy that applies to all cells older than the given age.
	maxAge?: [...#MaxAgeInitParameters] @go(MaxAge,[]MaxAgeInitParameters)

	// GC policy that applies to all versions of a cell except for the most recent.
	maxVersion?: [...#MaxVersionInitParameters] @go(MaxVersion,[]MaxVersionInitParameters)

	// If multiple policies are set, you should choose between UNION OR INTERSECTION.
	mode?: null | string @go(Mode,*string)

	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#GarbageCollectionPolicyObservation: {
	// The name of the column family.
	columnFamily?: null | string @go(ColumnFamily,*string)

	// The deletion policy for the GC policy.
	// Setting ABANDON allows the resource to be abandoned rather than deleted. This is useful for GC policy as it cannot be deleted in a replicated instance.
	deletionPolicy?: null | string @go(DeletionPolicy,*string)

	// Serialized JSON object to represent a more complex GC policy. Conflicts with mode, max_age and max_version. Conflicts with mode, max_age and max_version.
	gcRules?: null | string @go(GcRules,*string)
	id?:      null | string @go(ID,*string)

	// The name of the Bigtable instance.
	instanceName?: null | string @go(InstanceName,*string)

	// GC policy that applies to all cells older than the given age.
	maxAge?: [...#MaxAgeObservation] @go(MaxAge,[]MaxAgeObservation)

	// GC policy that applies to all versions of a cell except for the most recent.
	maxVersion?: [...#MaxVersionObservation] @go(MaxVersion,[]MaxVersionObservation)

	// If multiple policies are set, you should choose between UNION OR INTERSECTION.
	mode?: null | string @go(Mode,*string)

	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The name of the table.
	table?: null | string @go(Table,*string)
}

#GarbageCollectionPolicyParameters: {
	// The name of the column family.
	// +kubebuilder:validation:Optional
	columnFamily?: null | string @go(ColumnFamily,*string)

	// The deletion policy for the GC policy.
	// Setting ABANDON allows the resource to be abandoned rather than deleted. This is useful for GC policy as it cannot be deleted in a replicated instance.
	// +kubebuilder:validation:Optional
	deletionPolicy?: null | string @go(DeletionPolicy,*string)

	// Serialized JSON object to represent a more complex GC policy. Conflicts with mode, max_age and max_version. Conflicts with mode, max_age and max_version.
	// +kubebuilder:validation:Optional
	gcRules?: null | string @go(GcRules,*string)

	// The name of the Bigtable instance.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/bigtable/v1beta1.Instance
	// +kubebuilder:validation:Optional
	instanceName?: null | string @go(InstanceName,*string)

	// GC policy that applies to all cells older than the given age.
	// +kubebuilder:validation:Optional
	maxAge?: [...#MaxAgeParameters] @go(MaxAge,[]MaxAgeParameters)

	// GC policy that applies to all versions of a cell except for the most recent.
	// +kubebuilder:validation:Optional
	maxVersion?: [...#MaxVersionParameters] @go(MaxVersion,[]MaxVersionParameters)

	// If multiple policies are set, you should choose between UNION OR INTERSECTION.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The name of the table.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/bigtable/v1beta1.Table
	// +kubebuilder:validation:Optional
	table?: null | string @go(Table,*string)
}

#MaxAgeInitParameters: {
	// Number of days before applying GC policy.
	days?: null | float64 @go(Days,*float64)

	// Duration before applying GC policy (ex. "8h"). This is required when days isn't set
	duration?: null | string @go(Duration,*string)
}

#MaxAgeObservation: {
	// Number of days before applying GC policy.
	days?: null | float64 @go(Days,*float64)

	// Duration before applying GC policy (ex. "8h"). This is required when days isn't set
	duration?: null | string @go(Duration,*string)
}

#MaxAgeParameters: {
	// Number of days before applying GC policy.
	// +kubebuilder:validation:Optional
	days?: null | float64 @go(Days,*float64)

	// Duration before applying GC policy (ex. "8h"). This is required when days isn't set
	// +kubebuilder:validation:Optional
	duration?: null | string @go(Duration,*string)
}

#MaxVersionInitParameters: {
	// Number of version before applying the GC policy.
	number?: null | float64 @go(Number,*float64)
}

#MaxVersionObservation: {
	// Number of version before applying the GC policy.
	number?: null | float64 @go(Number,*float64)
}

#MaxVersionParameters: {
	// Number of version before applying the GC policy.
	// +kubebuilder:validation:Optional
	number?: null | float64 @go(Number,*float64)
}

// GarbageCollectionPolicySpec defines the desired state of GarbageCollectionPolicy
#GarbageCollectionPolicySpec: {
	forProvider: #GarbageCollectionPolicyParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #GarbageCollectionPolicyInitParameters @go(InitProvider)
}

// GarbageCollectionPolicyStatus defines the observed state of GarbageCollectionPolicy.
#GarbageCollectionPolicyStatus: {
	atProvider?: #GarbageCollectionPolicyObservation @go(AtProvider)
}

// GarbageCollectionPolicy is the Schema for the GarbageCollectionPolicys API. Creates a Google Cloud Bigtable GC Policy inside a family.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#GarbageCollectionPolicy: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.columnFamily) || (has(self.initProvider) && has(self.initProvider.columnFamily))",message="spec.forProvider.columnFamily is a required parameter"
	spec:    #GarbageCollectionPolicySpec   @go(Spec)
	status?: #GarbageCollectionPolicyStatus @go(Status)
}

// GarbageCollectionPolicyList contains a list of GarbageCollectionPolicys
#GarbageCollectionPolicyList: {
	items: [...#GarbageCollectionPolicy] @go(Items,[]GarbageCollectionPolicy)
}
