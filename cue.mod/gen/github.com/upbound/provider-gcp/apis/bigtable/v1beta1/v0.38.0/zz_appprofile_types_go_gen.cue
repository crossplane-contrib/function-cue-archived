// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/bigtable/v1beta1

package v1beta1

#AppProfileInitParameters: {
	// Long form description of the use case for this app profile.
	description?: null | string @go(Description,*string)

	// If true, ignore safety checks when deleting/updating the app profile.
	ignoreWarnings?: null | bool @go(IgnoreWarnings,*bool)
	multiClusterRoutingClusterIds?: [...null | string] @go(MultiClusterRoutingClusterIds,[]*string)

	// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
	// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
	// consistency to improve availability.
	multiClusterRoutingUseAny?: null | bool @go(MultiClusterRoutingUseAny,*bool)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Use a single-cluster routing policy.
	// Structure is documented below.
	singleClusterRouting?: [...#SingleClusterRoutingInitParameters] @go(SingleClusterRouting,[]SingleClusterRoutingInitParameters)
}

#AppProfileObservation: {
	// Long form description of the use case for this app profile.
	description?: null | string @go(Description,*string)

	// an identifier for the resource with format projects/{{project}}/instances/{{instance}}/appProfiles/{{app_profile_id}}
	id?: null | string @go(ID,*string)

	// If true, ignore safety checks when deleting/updating the app profile.
	ignoreWarnings?: null | bool @go(IgnoreWarnings,*bool)

	// The name of the instance to create the app profile within.
	instance?: null | string @go(Instance,*string)
	multiClusterRoutingClusterIds?: [...null | string] @go(MultiClusterRoutingClusterIds,[]*string)

	// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
	// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
	// consistency to improve availability.
	multiClusterRoutingUseAny?: null | bool @go(MultiClusterRoutingUseAny,*bool)

	// The unique name of the requested app profile. Values are of the form projects/<project>/instances/<instance>/appProfiles/<appProfileId>.
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Use a single-cluster routing policy.
	// Structure is documented below.
	singleClusterRouting?: [...#SingleClusterRoutingObservation] @go(SingleClusterRouting,[]SingleClusterRoutingObservation)
}

#AppProfileParameters: {
	// Long form description of the use case for this app profile.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// If true, ignore safety checks when deleting/updating the app profile.
	// +kubebuilder:validation:Optional
	ignoreWarnings?: null | bool @go(IgnoreWarnings,*bool)

	// The name of the instance to create the app profile within.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/bigtable/v1beta1.Instance
	// +kubebuilder:validation:Optional
	instance?: null | string @go(Instance,*string)

	// +kubebuilder:validation:Optional
	multiClusterRoutingClusterIds?: [...null | string] @go(MultiClusterRoutingClusterIds,[]*string)

	// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
	// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
	// consistency to improve availability.
	// +kubebuilder:validation:Optional
	multiClusterRoutingUseAny?: null | bool @go(MultiClusterRoutingUseAny,*bool)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Use a single-cluster routing policy.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	singleClusterRouting?: [...#SingleClusterRoutingParameters] @go(SingleClusterRouting,[]SingleClusterRoutingParameters)
}

#SingleClusterRoutingInitParameters: {
	// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
	// It is unsafe to send these requests to the same table/row/column in multiple clusters.
	allowTransactionalWrites?: null | bool @go(AllowTransactionalWrites,*bool)

	// The cluster to which read/write requests should be routed.
	clusterId?: null | string @go(ClusterID,*string)
}

#SingleClusterRoutingObservation: {
	// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
	// It is unsafe to send these requests to the same table/row/column in multiple clusters.
	allowTransactionalWrites?: null | bool @go(AllowTransactionalWrites,*bool)

	// The cluster to which read/write requests should be routed.
	clusterId?: null | string @go(ClusterID,*string)
}

#SingleClusterRoutingParameters: {
	// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
	// It is unsafe to send these requests to the same table/row/column in multiple clusters.
	// +kubebuilder:validation:Optional
	allowTransactionalWrites?: null | bool @go(AllowTransactionalWrites,*bool)

	// The cluster to which read/write requests should be routed.
	// +kubebuilder:validation:Optional
	clusterId?: null | string @go(ClusterID,*string)
}

// AppProfileSpec defines the desired state of AppProfile
#AppProfileSpec: {
	forProvider: #AppProfileParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #AppProfileInitParameters @go(InitProvider)
}

// AppProfileStatus defines the observed state of AppProfile.
#AppProfileStatus: {
	atProvider?: #AppProfileObservation @go(AtProvider)
}

// AppProfile is the Schema for the AppProfiles API. App profile is a configuration object describing how Cloud Bigtable should treat traffic from a particular end user application.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#AppProfile: {
	spec:    #AppProfileSpec   @go(Spec)
	status?: #AppProfileStatus @go(Status)
}

// AppProfileList contains a list of AppProfiles
#AppProfileList: {
	items: [...#AppProfile] @go(Items,[]AppProfile)
}
