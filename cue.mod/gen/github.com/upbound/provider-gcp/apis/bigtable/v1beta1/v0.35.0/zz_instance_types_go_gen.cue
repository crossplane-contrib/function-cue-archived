// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/bigtable/v1beta1

package v1beta1

#AutoscalingConfigInitParameters: {
	// The target CPU utilization for autoscaling, in percentage. Must be between 10 and 80.
	cpuTarget?: null | float64 @go(CPUTarget,*float64)

	// The maximum number of nodes for autoscaling.
	maxNodes?: null | float64 @go(MaxNodes,*float64)

	// The minimum number of nodes for autoscaling.
	minNodes?: null | float64 @go(MinNodes,*float64)

	// The target storage utilization for autoscaling, in GB, for each node in a cluster. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16 TiB) for an HDD cluster. If not set, whatever is already set for the cluster will not change, or if the cluster is just being created, it will use the default value of 2560 for SSD clusters and 8192 for HDD clusters.
	storageTarget?: null | float64 @go(StorageTarget,*float64)
}

#AutoscalingConfigObservation: {
	// The target CPU utilization for autoscaling, in percentage. Must be between 10 and 80.
	cpuTarget?: null | float64 @go(CPUTarget,*float64)

	// The maximum number of nodes for autoscaling.
	maxNodes?: null | float64 @go(MaxNodes,*float64)

	// The minimum number of nodes for autoscaling.
	minNodes?: null | float64 @go(MinNodes,*float64)

	// The target storage utilization for autoscaling, in GB, for each node in a cluster. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16 TiB) for an HDD cluster. If not set, whatever is already set for the cluster will not change, or if the cluster is just being created, it will use the default value of 2560 for SSD clusters and 8192 for HDD clusters.
	storageTarget?: null | float64 @go(StorageTarget,*float64)
}

#AutoscalingConfigParameters: {
	// The target CPU utilization for autoscaling, in percentage. Must be between 10 and 80.
	// +kubebuilder:validation:Optional
	cpuTarget?: null | float64 @go(CPUTarget,*float64)

	// The maximum number of nodes for autoscaling.
	// +kubebuilder:validation:Optional
	maxNodes?: null | float64 @go(MaxNodes,*float64)

	// The minimum number of nodes for autoscaling.
	// +kubebuilder:validation:Optional
	minNodes?: null | float64 @go(MinNodes,*float64)

	// The target storage utilization for autoscaling, in GB, for each node in a cluster. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16 TiB) for an HDD cluster. If not set, whatever is already set for the cluster will not change, or if the cluster is just being created, it will use the default value of 2560 for SSD clusters and 8192 for HDD clusters.
	// +kubebuilder:validation:Optional
	storageTarget?: null | float64 @go(StorageTarget,*float64)
}

#ClusterInitParameters: {
	// Autoscaling config for the cluster, contains the following arguments:
	autoscalingConfig?: [...#AutoscalingConfigInitParameters] @go(AutoscalingConfig,[]AutoscalingConfigInitParameters)

	// The ID of the Cloud Bigtable cluster. Must be 6-30 characters and must only contain hyphens, lowercase letters and numbers.
	clusterId?: null | string @go(ClusterID,*string)

	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the cloudkms.cryptoKeyEncrypterDecrypter role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster.
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// The number of nodes in your Cloud Bigtable cluster.
	// Required, with a minimum of 1 for each cluster in an instance.
	numNodes?: null | float64 @go(NumNodes,*float64)

	// The storage type to use. One of "SSD" or
	// "HDD". Defaults to "SSD".
	storageType?: null | string @go(StorageType,*string)

	// The zone to create the Cloud Bigtable cluster in. If it not
	// specified, the provider zone is used. Each cluster must have a different zone in the same region. Zones that support
	// Bigtable instances are noted on the Cloud Bigtable locations page.
	zone?: null | string @go(Zone,*string)
}

#ClusterObservation: {
	// Autoscaling config for the cluster, contains the following arguments:
	autoscalingConfig?: [...#AutoscalingConfigObservation] @go(AutoscalingConfig,[]AutoscalingConfigObservation)

	// The ID of the Cloud Bigtable cluster. Must be 6-30 characters and must only contain hyphens, lowercase letters and numbers.
	clusterId?: null | string @go(ClusterID,*string)

	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the cloudkms.cryptoKeyEncrypterDecrypter role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster.
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// The number of nodes in your Cloud Bigtable cluster.
	// Required, with a minimum of 1 for each cluster in an instance.
	numNodes?: null | float64 @go(NumNodes,*float64)

	// The storage type to use. One of "SSD" or
	// "HDD". Defaults to "SSD".
	storageType?: null | string @go(StorageType,*string)

	// The zone to create the Cloud Bigtable cluster in. If it not
	// specified, the provider zone is used. Each cluster must have a different zone in the same region. Zones that support
	// Bigtable instances are noted on the Cloud Bigtable locations page.
	zone?: null | string @go(Zone,*string)
}

#ClusterParameters: {
	// Autoscaling config for the cluster, contains the following arguments:
	// +kubebuilder:validation:Optional
	autoscalingConfig?: [...#AutoscalingConfigParameters] @go(AutoscalingConfig,[]AutoscalingConfigParameters)

	// The ID of the Cloud Bigtable cluster. Must be 6-30 characters and must only contain hyphens, lowercase letters and numbers.
	// +kubebuilder:validation:Optional
	clusterId?: null | string @go(ClusterID,*string)

	// Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the cloudkms.cryptoKeyEncrypterDecrypter role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster.
	// +kubebuilder:validation:Optional
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// The number of nodes in your Cloud Bigtable cluster.
	// Required, with a minimum of 1 for each cluster in an instance.
	// +kubebuilder:validation:Optional
	numNodes?: null | float64 @go(NumNodes,*float64)

	// The storage type to use. One of "SSD" or
	// "HDD". Defaults to "SSD".
	// +kubebuilder:validation:Optional
	storageType?: null | string @go(StorageType,*string)

	// The zone to create the Cloud Bigtable cluster in. If it not
	// specified, the provider zone is used. Each cluster must have a different zone in the same region. Zones that support
	// Bigtable instances are noted on the Cloud Bigtable locations page.
	// +kubebuilder:validation:Optional
	zone?: null | string @go(Zone,*string)
}

#InstanceInitParameters: {
	// A block of cluster configuration options. This can be specified at least once, and up
	// to as many as possible within 8 cloud regions. Removing the field entirely from the config will cause the provider
	// to default to the backend value. See structure below.
	cluster?: [...#ClusterInitParameters] @go(Cluster,[]ClusterInitParameters)
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// The human-readable display name of the Bigtable instance. Defaults to the instance name.
	displayName?: null | string @go(DisplayName,*string)

	// The instance type to create. One of "DEVELOPMENT" or "PRODUCTION". Defaults to "PRODUCTION".
	// It is recommended to leave this field unspecified since the distinction between "DEVELOPMENT" and "PRODUCTION" instances is going away,
	// and all instances will become "PRODUCTION" instances. This means that new and existing "DEVELOPMENT" instances will be converted to
	// "PRODUCTION" instances. It is recommended for users to use "PRODUCTION" instances in any case, since a 1-node "PRODUCTION" instance
	// is functionally identical to a "DEVELOPMENT" instance, but without the accompanying restrictions.
	instanceType?: null | string @go(InstanceType,*string)

	// A set of key/value label pairs to assign to the resource. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#InstanceObservation: {
	// A block of cluster configuration options. This can be specified at least once, and up
	// to as many as possible within 8 cloud regions. Removing the field entirely from the config will cause the provider
	// to default to the backend value. See structure below.
	cluster?: [...#ClusterObservation] @go(Cluster,[]ClusterObservation)
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// The human-readable display name of the Bigtable instance. Defaults to the instance name.
	displayName?: null | string @go(DisplayName,*string)

	// an identifier for the resource with format projects/{{project}}/instances/{{name}}
	id?: null | string @go(ID,*string)

	// The instance type to create. One of "DEVELOPMENT" or "PRODUCTION". Defaults to "PRODUCTION".
	// It is recommended to leave this field unspecified since the distinction between "DEVELOPMENT" and "PRODUCTION" instances is going away,
	// and all instances will become "PRODUCTION" instances. This means that new and existing "DEVELOPMENT" instances will be converted to
	// "PRODUCTION" instances. It is recommended for users to use "PRODUCTION" instances in any case, since a 1-node "PRODUCTION" instance
	// is functionally identical to a "DEVELOPMENT" instance, but without the accompanying restrictions.
	instanceType?: null | string @go(InstanceType,*string)

	// A set of key/value label pairs to assign to the resource. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#InstanceParameters: {
	// A block of cluster configuration options. This can be specified at least once, and up
	// to as many as possible within 8 cloud regions. Removing the field entirely from the config will cause the provider
	// to default to the backend value. See structure below.
	// +kubebuilder:validation:Optional
	cluster?: [...#ClusterParameters] @go(Cluster,[]ClusterParameters)

	// +kubebuilder:validation:Optional
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// The human-readable display name of the Bigtable instance. Defaults to the instance name.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// The instance type to create. One of "DEVELOPMENT" or "PRODUCTION". Defaults to "PRODUCTION".
	// It is recommended to leave this field unspecified since the distinction between "DEVELOPMENT" and "PRODUCTION" instances is going away,
	// and all instances will become "PRODUCTION" instances. This means that new and existing "DEVELOPMENT" instances will be converted to
	// "PRODUCTION" instances. It is recommended for users to use "PRODUCTION" instances in any case, since a 1-node "PRODUCTION" instance
	// is functionally identical to a "DEVELOPMENT" instance, but without the accompanying restrictions.
	// +kubebuilder:validation:Optional
	instanceType?: null | string @go(InstanceType,*string)

	// A set of key/value label pairs to assign to the resource. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// InstanceSpec defines the desired state of Instance
#InstanceSpec: {
	forProvider: #InstanceParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #InstanceInitParameters @go(InitProvider)
}

// InstanceStatus defines the observed state of Instance.
#InstanceStatus: {
	atProvider?: #InstanceObservation @go(AtProvider)
}

// Instance is the Schema for the Instances API. Creates a Google Bigtable instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Instance: {
	spec:    #InstanceSpec   @go(Spec)
	status?: #InstanceStatus @go(Status)
}

// InstanceList contains a list of Instances
#InstanceList: {
	items: [...#Instance] @go(Items,[]Instance)
}
