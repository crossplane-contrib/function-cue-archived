// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/bigtable/v1beta1

package v1beta1

#InstanceIAMPolicyObservation: {
	// (Computed) The etag of the instances's IAM policy.
	etag?: null | string @go(Etag,*string)
	id?:   null | string @go(ID,*string)

	// The name or relative resource id of the instance to manage IAM policies for.
	instance?: null | string @go(Instance,*string)

	// The policy data generated by a google_iam_policy data source.
	policyData?: null | string @go(PolicyData,*string)

	// The project in which the instance belongs.
	project?: null | string @go(Project,*string)
}

#InstanceIAMPolicyParameters: {
	// The name or relative resource id of the instance to manage IAM policies for.
	// +kubebuilder:validation:Required
	instance?: null | string @go(Instance,*string)

	// The policy data generated by a google_iam_policy data source.
	// +kubebuilder:validation:Optional
	policyData?: null | string @go(PolicyData,*string)

	// The project in which the instance belongs.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// InstanceIAMPolicySpec defines the desired state of InstanceIAMPolicy
#InstanceIAMPolicySpec: {
	forProvider: #InstanceIAMPolicyParameters @go(ForProvider)
}

// InstanceIAMPolicyStatus defines the observed state of InstanceIAMPolicy.
#InstanceIAMPolicyStatus: {
	atProvider?: #InstanceIAMPolicyObservation @go(AtProvider)
}

// InstanceIAMPolicy is the Schema for the InstanceIAMPolicys API. Collection of resources to manage IAM policy for a Bigtable instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#InstanceIAMPolicy: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.policyData)",message="policyData is a required parameter"
	spec:    #InstanceIAMPolicySpec   @go(Spec)
	status?: #InstanceIAMPolicyStatus @go(Status)
}

// InstanceIAMPolicyList contains a list of InstanceIAMPolicys
#InstanceIAMPolicyList: {
	items: [...#InstanceIAMPolicy] @go(Items,[]InstanceIAMPolicy)
}
