// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/cloudiot/v1beta1

package v1beta1

#EventNotificationConfigsInitParameters: {
	// If the subfolder name matches this string exactly, this
	// configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty
	// value can only be used for the last event_notification_configs
	// item.
	subfolderMatches?: null | string @go(SubfolderMatches,*string)
}

#EventNotificationConfigsObservation: {
	// PubSub topic name to publish device events.
	pubsubTopicName?: null | string @go(PubsubTopicName,*string)

	// If the subfolder name matches this string exactly, this
	// configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty
	// value can only be used for the last event_notification_configs
	// item.
	subfolderMatches?: null | string @go(SubfolderMatches,*string)
}

#EventNotificationConfigsParameters: {
	// PubSub topic name to publish device events.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/pubsub/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	pubsubTopicName?: null | string @go(PubsubTopicName,*string)

	// If the subfolder name matches this string exactly, this
	// configuration will be used. The string must not include the
	// leading '/' character. If empty, all strings are matched. Empty
	// value can only be used for the last event_notification_configs
	// item.
	// +kubebuilder:validation:Optional
	subfolderMatches?: null | string @go(SubfolderMatches,*string)
}

#RegistryCredentialsInitParameters: {
	// A public key certificate format and data.
	publicKeyCertificate?: {[string]: string} @go(PublicKeyCertificate,map[string]string)
}

#RegistryCredentialsObservation: {
	// A public key certificate format and data.
	publicKeyCertificate?: {[string]: string} @go(PublicKeyCertificate,map[string]string)
}

#RegistryCredentialsParameters: {
	// A public key certificate format and data.
	// +kubebuilder:validation:Optional
	publicKeyCertificate?: {[string]: string} @go(PublicKeyCertificate,map[string]string)
}

#RegistryInitParameters: {
	// List of public key certificates to authenticate devices.
	// The structure is documented below.
	credentials?: [...#RegistryCredentialsInitParameters] @go(Credentials,[]RegistryCredentialsInitParameters)

	// List of configurations for event notifications, such as PubSub topics
	// to publish device events to.
	// Structure is documented below.
	eventNotificationConfigs?: [...#EventNotificationConfigsInitParameters] @go(EventNotificationConfigs,[]EventNotificationConfigsInitParameters)

	// Activate or deactivate HTTP.
	// The structure is documented below.
	httpConfig?: {[string]: string} @go(HTTPConfig,map[string]string)

	// The default logging verbosity for activity from devices in this
	// registry. Specifies which events should be written to logs. For
	// example, if the LogLevel is ERROR, only events that terminate in
	// errors will be logged. LogLevel is inclusive; enabling INFO logging
	// will also enable ERROR logging.
	// Default value is NONE.
	// Possible values are: NONE, ERROR, INFO, DEBUG.
	logLevel?: null | string @go(LogLevel,*string)

	// Activate or deactivate MQTT.
	// The structure is documented below.
	mqttConfig?: {[string]: string} @go(MqttConfig,map[string]string)

	// A unique name for the resource, required by device registry.
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	region?: null | string @go(Region,*string)

	// A PubSub topic to publish device state updates.
	// The structure is documented below.
	stateNotificationConfig?: {[string]: string} @go(StateNotificationConfig,map[string]string)
}

#RegistryObservation: {
	// List of public key certificates to authenticate devices.
	// The structure is documented below.
	credentials?: [...#RegistryCredentialsObservation] @go(Credentials,[]RegistryCredentialsObservation)

	// List of configurations for event notifications, such as PubSub topics
	// to publish device events to.
	// Structure is documented below.
	eventNotificationConfigs?: [...#EventNotificationConfigsObservation] @go(EventNotificationConfigs,[]EventNotificationConfigsObservation)

	// Activate or deactivate HTTP.
	// The structure is documented below.
	httpConfig?: {[string]: string} @go(HTTPConfig,map[string]string)

	// an identifier for the resource with format projects/{{project}}/locations/{{region}}/registries/{{name}}
	id?: null | string @go(ID,*string)

	// The default logging verbosity for activity from devices in this
	// registry. Specifies which events should be written to logs. For
	// example, if the LogLevel is ERROR, only events that terminate in
	// errors will be logged. LogLevel is inclusive; enabling INFO logging
	// will also enable ERROR logging.
	// Default value is NONE.
	// Possible values are: NONE, ERROR, INFO, DEBUG.
	logLevel?: null | string @go(LogLevel,*string)

	// Activate or deactivate MQTT.
	// The structure is documented below.
	mqttConfig?: {[string]: string} @go(MqttConfig,map[string]string)

	// A unique name for the resource, required by device registry.
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	region?: null | string @go(Region,*string)

	// A PubSub topic to publish device state updates.
	// The structure is documented below.
	stateNotificationConfig?: {[string]: string} @go(StateNotificationConfig,map[string]string)
}

#RegistryParameters: {
	// List of public key certificates to authenticate devices.
	// The structure is documented below.
	// +kubebuilder:validation:Optional
	credentials?: [...#RegistryCredentialsParameters] @go(Credentials,[]RegistryCredentialsParameters)

	// List of configurations for event notifications, such as PubSub topics
	// to publish device events to.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	eventNotificationConfigs?: [...#EventNotificationConfigsParameters] @go(EventNotificationConfigs,[]EventNotificationConfigsParameters)

	// Activate or deactivate HTTP.
	// The structure is documented below.
	// +kubebuilder:validation:Optional
	httpConfig?: {[string]: string} @go(HTTPConfig,map[string]string)

	// The default logging verbosity for activity from devices in this
	// registry. Specifies which events should be written to logs. For
	// example, if the LogLevel is ERROR, only events that terminate in
	// errors will be logged. LogLevel is inclusive; enabling INFO logging
	// will also enable ERROR logging.
	// Default value is NONE.
	// Possible values are: NONE, ERROR, INFO, DEBUG.
	// +kubebuilder:validation:Optional
	logLevel?: null | string @go(LogLevel,*string)

	// Activate or deactivate MQTT.
	// The structure is documented below.
	// +kubebuilder:validation:Optional
	mqttConfig?: {[string]: string} @go(MqttConfig,map[string]string)

	// A unique name for the resource, required by device registry.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The region in which the created registry should reside.
	// If it is not provided, the provider region is used.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// A PubSub topic to publish device state updates.
	// The structure is documented below.
	// +kubebuilder:validation:Optional
	stateNotificationConfig?: {[string]: string} @go(StateNotificationConfig,map[string]string)
}

// RegistrySpec defines the desired state of Registry
#RegistrySpec: {
	forProvider: #RegistryParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #RegistryInitParameters @go(InitProvider)
}

// RegistryStatus defines the observed state of Registry.
#RegistryStatus: {
	atProvider?: #RegistryObservation @go(AtProvider)
}

// Registry is the Schema for the Registrys API. A Google Cloud IoT Core device registry.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Registry: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	spec:    #RegistrySpec   @go(Spec)
	status?: #RegistryStatus @go(Status)
}

// RegistryList contains a list of Registrys
#RegistryList: {
	items: [...#Registry] @go(Items,[]Registry)
}
