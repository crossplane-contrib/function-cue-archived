// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/artifact/v1beta1

package v1beta1

#ConditionObservation: {
	description?: null | string @go(Description,*string)
	expression?:  null | string @go(Expression,*string)
	title?:       null | string @go(Title,*string)
}

#ConditionParameters: {
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// +kubebuilder:validation:Required
	expression?: null | string @go(Expression,*string)

	// +kubebuilder:validation:Required
	title?: null | string @go(Title,*string)
}

#RegistryRepositoryIAMMemberObservation: {
	condition?: [...#ConditionObservation] @go(Condition,[]ConditionObservation)
	etag?:       null | string @go(Etag,*string)
	id?:         null | string @go(ID,*string)
	location?:   null | string @go(Location,*string)
	member?:     null | string @go(Member,*string)
	project?:    null | string @go(Project,*string)
	repository?: null | string @go(Repository,*string)
	role?:       null | string @go(Role,*string)
}

#RegistryRepositoryIAMMemberParameters: {
	// +kubebuilder:validation:Optional
	condition?: [...#ConditionParameters] @go(Condition,[]ConditionParameters)

	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// +kubebuilder:validation:Optional
	member?: null | string @go(Member,*string)

	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// +kubebuilder:validation:Optional
	repository?: null | string @go(Repository,*string)

	// +kubebuilder:validation:Optional
	role?: null | string @go(Role,*string)
}

// RegistryRepositoryIAMMemberSpec defines the desired state of RegistryRepositoryIAMMember
#RegistryRepositoryIAMMemberSpec: {
	forProvider: #RegistryRepositoryIAMMemberParameters @go(ForProvider)
}

// RegistryRepositoryIAMMemberStatus defines the observed state of RegistryRepositoryIAMMember.
#RegistryRepositoryIAMMemberStatus: {
	atProvider?: #RegistryRepositoryIAMMemberObservation @go(AtProvider)
}

// RegistryRepositoryIAMMember is the Schema for the RegistryRepositoryIAMMembers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#RegistryRepositoryIAMMember: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.member)",message="member is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.repository)",message="repository is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.role)",message="role is a required parameter"
	spec:    #RegistryRepositoryIAMMemberSpec   @go(Spec)
	status?: #RegistryRepositoryIAMMemberStatus @go(Status)
}

// RegistryRepositoryIAMMemberList contains a list of RegistryRepositoryIAMMembers
#RegistryRepositoryIAMMemberList: {
	items: [...#RegistryRepositoryIAMMember] @go(Items,[]RegistryRepositoryIAMMember)
}
