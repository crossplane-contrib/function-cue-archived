// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/composer/v1beta1

package v1beta1

#AllowedIPRangeInitParameters: {
	// A description of this ip range.
	description?: null | string @go(Description,*string)

	// IP address or range, defined using CIDR notation, of requests that this rule applies to.
	// Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334.
	// IP range prefixes should be properly truncated. For example,
	// 1.2.3.4/24 should be truncated to 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 should be truncated to 2001:db8::/32.
	value?: null | string @go(Value,*string)
}

#AllowedIPRangeObservation: {
	// A description of this ip range.
	description?: null | string @go(Description,*string)

	// IP address or range, defined using CIDR notation, of requests that this rule applies to.
	// Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334.
	// IP range prefixes should be properly truncated. For example,
	// 1.2.3.4/24 should be truncated to 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 should be truncated to 2001:db8::/32.
	value?: null | string @go(Value,*string)
}

#AllowedIPRangeParameters: {
	// A description of this ip range.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// IP address or range, defined using CIDR notation, of requests that this rule applies to.
	// Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334.
	// IP range prefixes should be properly truncated. For example,
	// 1.2.3.4/24 should be truncated to 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 should be truncated to 2001:db8::/32.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#CidrBlocksInitParameters: {
	// `cidr_block< must be specified in CIDR notation.
	cidrBlock?: null | string @go(CidrBlock,*string)

	// display_name is a field for users to identify CIDR blocks.
	displayName?: null | string @go(DisplayName,*string)
}

#CidrBlocksObservation: {
	// `cidr_block< must be specified in CIDR notation.
	cidrBlock?: null | string @go(CidrBlock,*string)

	// display_name is a field for users to identify CIDR blocks.
	displayName?: null | string @go(DisplayName,*string)
}

#CidrBlocksParameters: {
	// `cidr_block< must be specified in CIDR notation.
	// +kubebuilder:validation:Optional
	cidrBlock?: null | string @go(CidrBlock,*string)

	// display_name is a field for users to identify CIDR blocks.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)
}

#ConfigInitParameters: {
	// The configuration settings for Cloud SQL instance used internally
	// by Apache Airflow software.
	databaseConfig?: [...#DatabaseConfigInitParameters] @go(DatabaseConfig,[]DatabaseConfigInitParameters)

	// The encryption options for the Cloud Composer environment and its
	// dependencies.
	encryptionConfig?: [...#EncryptionConfigInitParameters] @go(EncryptionConfig,[]EncryptionConfigInitParameters)

	// The environment size controls the performance parameters of the managed
	// Cloud Composer infrastructure that includes the Airflow database. Values for
	// environment size are ENVIRONMENT_SIZE_SMALL, ENVIRONMENT_SIZE_MEDIUM,
	// and ENVIRONMENT_SIZE_LARGE.
	environmentSize?: null | string @go(EnvironmentSize,*string)

	// The configuration settings for Cloud Composer maintenance windows.
	maintenanceWindow?: [...#MaintenanceWindowInitParameters] @go(MaintenanceWindow,[]MaintenanceWindowInitParameters)

	// Configuration options for the master authorized networks feature. Enabled
	// master authorized networks will disallow all external traffic to access
	// Kubernetes master through HTTPS except traffic from the given CIDR blocks,
	// Google Compute Engine Public IPs and Google Prod IPs. Structure is
	// documented below.
	masterAuthorizedNetworksConfig?: [...#MasterAuthorizedNetworksConfigInitParameters] @go(MasterAuthorizedNetworksConfig,[]MasterAuthorizedNetworksConfigInitParameters)

	// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
	nodeConfig?: [...#NodeConfigInitParameters] @go(NodeConfig,[]NodeConfigInitParameters)

	// The number of nodes in the Kubernetes Engine cluster of the environment.
	nodeCount?: null | float64 @go(NodeCount,*float64)

	// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
	privateEnvironmentConfig?: [...#PrivateEnvironmentConfigInitParameters] @go(PrivateEnvironmentConfig,[]PrivateEnvironmentConfigInitParameters)

	// The configuration settings for recovery. Structure is documented below.
	recoveryConfig?: [...#RecoveryConfigInitParameters] @go(RecoveryConfig,[]RecoveryConfigInitParameters)

	// The resilience mode states whether high resilience is enabled for
	// the environment or not. Values for resilience mode are HIGH_RESILIENCE
	// for high resilience and STANDARD_RESILIENCE for standard
	// resilience.
	resilienceMode?: null | string @go(ResilienceMode,*string)

	// The configuration settings for software inside the environment.  Structure is documented below.
	softwareConfig?: [...#SoftwareConfigInitParameters] @go(SoftwareConfig,[]SoftwareConfigInitParameters)

	// The configuration settings for the Airflow web server App Engine instance.
	webServerConfig?: [...#WebServerConfigInitParameters] @go(WebServerConfig,[]WebServerConfigInitParameters)

	// The network-level access control policy for the Airflow web server.
	// If unspecified, no network-level access restrictions are applied.
	webServerNetworkAccessControl?: [...#WebServerNetworkAccessControlInitParameters] @go(WebServerNetworkAccessControl,[]WebServerNetworkAccessControlInitParameters)

	// The Kubernetes workloads configuration for GKE cluster associated with the
	// Cloud Composer environment.
	workloadsConfig?: [...#WorkloadsConfigInitParameters] @go(WorkloadsConfig,[]WorkloadsConfigInitParameters)
}

#ConfigObservation: {
	// The URI of the Apache Airflow Web UI hosted within this
	// environment.
	airflowUri?: null | string @go(AirflowURI,*string)

	// The Cloud Storage prefix of the DAGs for this environment.
	// Although Cloud Storage objects reside in a flat namespace, a
	// hierarchical file tree can be simulated using '/'-delimited
	// object name prefixes. DAG objects for this environment
	// reside in a simulated directory with this prefix.
	dagGcsPrefix?: null | string @go(DagGcsPrefix,*string)

	// The configuration settings for Cloud SQL instance used internally
	// by Apache Airflow software.
	databaseConfig?: [...#DatabaseConfigObservation] @go(DatabaseConfig,[]DatabaseConfigObservation)

	// The encryption options for the Cloud Composer environment and its
	// dependencies.
	encryptionConfig?: [...#EncryptionConfigObservation] @go(EncryptionConfig,[]EncryptionConfigObservation)

	// The environment size controls the performance parameters of the managed
	// Cloud Composer infrastructure that includes the Airflow database. Values for
	// environment size are ENVIRONMENT_SIZE_SMALL, ENVIRONMENT_SIZE_MEDIUM,
	// and ENVIRONMENT_SIZE_LARGE.
	environmentSize?: null | string @go(EnvironmentSize,*string)

	// The Kubernetes Engine cluster used to run this environment.
	gkeCluster?: null | string @go(GkeCluster,*string)

	// The configuration settings for Cloud Composer maintenance windows.
	maintenanceWindow?: [...#MaintenanceWindowObservation] @go(MaintenanceWindow,[]MaintenanceWindowObservation)

	// Configuration options for the master authorized networks feature. Enabled
	// master authorized networks will disallow all external traffic to access
	// Kubernetes master through HTTPS except traffic from the given CIDR blocks,
	// Google Compute Engine Public IPs and Google Prod IPs. Structure is
	// documented below.
	masterAuthorizedNetworksConfig?: [...#MasterAuthorizedNetworksConfigObservation] @go(MasterAuthorizedNetworksConfig,[]MasterAuthorizedNetworksConfigObservation)

	// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
	nodeConfig?: [...#NodeConfigObservation] @go(NodeConfig,[]NodeConfigObservation)

	// The number of nodes in the Kubernetes Engine cluster of the environment.
	nodeCount?: null | float64 @go(NodeCount,*float64)

	// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
	privateEnvironmentConfig?: [...#PrivateEnvironmentConfigObservation] @go(PrivateEnvironmentConfig,[]PrivateEnvironmentConfigObservation)

	// The configuration settings for recovery. Structure is documented below.
	recoveryConfig?: [...#RecoveryConfigObservation] @go(RecoveryConfig,[]RecoveryConfigObservation)

	// The resilience mode states whether high resilience is enabled for
	// the environment or not. Values for resilience mode are HIGH_RESILIENCE
	// for high resilience and STANDARD_RESILIENCE for standard
	// resilience.
	resilienceMode?: null | string @go(ResilienceMode,*string)

	// The configuration settings for software inside the environment.  Structure is documented below.
	softwareConfig?: [...#SoftwareConfigObservation] @go(SoftwareConfig,[]SoftwareConfigObservation)

	// The configuration settings for the Airflow web server App Engine instance.
	webServerConfig?: [...#WebServerConfigObservation] @go(WebServerConfig,[]WebServerConfigObservation)

	// The network-level access control policy for the Airflow web server.
	// If unspecified, no network-level access restrictions are applied.
	webServerNetworkAccessControl?: [...#WebServerNetworkAccessControlObservation] @go(WebServerNetworkAccessControl,[]WebServerNetworkAccessControlObservation)

	// The Kubernetes workloads configuration for GKE cluster associated with the
	// Cloud Composer environment.
	workloadsConfig?: [...#WorkloadsConfigObservation] @go(WorkloadsConfig,[]WorkloadsConfigObservation)
}

#ConfigParameters: {
	// The configuration settings for Cloud SQL instance used internally
	// by Apache Airflow software.
	// +kubebuilder:validation:Optional
	databaseConfig?: [...#DatabaseConfigParameters] @go(DatabaseConfig,[]DatabaseConfigParameters)

	// The encryption options for the Cloud Composer environment and its
	// dependencies.
	// +kubebuilder:validation:Optional
	encryptionConfig?: [...#EncryptionConfigParameters] @go(EncryptionConfig,[]EncryptionConfigParameters)

	// The environment size controls the performance parameters of the managed
	// Cloud Composer infrastructure that includes the Airflow database. Values for
	// environment size are ENVIRONMENT_SIZE_SMALL, ENVIRONMENT_SIZE_MEDIUM,
	// and ENVIRONMENT_SIZE_LARGE.
	// +kubebuilder:validation:Optional
	environmentSize?: null | string @go(EnvironmentSize,*string)

	// The configuration settings for Cloud Composer maintenance windows.
	// +kubebuilder:validation:Optional
	maintenanceWindow?: [...#MaintenanceWindowParameters] @go(MaintenanceWindow,[]MaintenanceWindowParameters)

	// Configuration options for the master authorized networks feature. Enabled
	// master authorized networks will disallow all external traffic to access
	// Kubernetes master through HTTPS except traffic from the given CIDR blocks,
	// Google Compute Engine Public IPs and Google Prod IPs. Structure is
	// documented below.
	// +kubebuilder:validation:Optional
	masterAuthorizedNetworksConfig?: [...#MasterAuthorizedNetworksConfigParameters] @go(MasterAuthorizedNetworksConfig,[]MasterAuthorizedNetworksConfigParameters)

	// The configuration used for the Kubernetes Engine cluster.  Structure is documented below.
	// +kubebuilder:validation:Optional
	nodeConfig?: [...#NodeConfigParameters] @go(NodeConfig,[]NodeConfigParameters)

	// The number of nodes in the Kubernetes Engine cluster of the environment.
	// +kubebuilder:validation:Optional
	nodeCount?: null | float64 @go(NodeCount,*float64)

	// The configuration used for the Private IP Cloud Composer environment. Structure is documented below.
	// +kubebuilder:validation:Optional
	privateEnvironmentConfig?: [...#PrivateEnvironmentConfigParameters] @go(PrivateEnvironmentConfig,[]PrivateEnvironmentConfigParameters)

	// The configuration settings for recovery. Structure is documented below.
	// +kubebuilder:validation:Optional
	recoveryConfig?: [...#RecoveryConfigParameters] @go(RecoveryConfig,[]RecoveryConfigParameters)

	// The resilience mode states whether high resilience is enabled for
	// the environment or not. Values for resilience mode are HIGH_RESILIENCE
	// for high resilience and STANDARD_RESILIENCE for standard
	// resilience.
	// +kubebuilder:validation:Optional
	resilienceMode?: null | string @go(ResilienceMode,*string)

	// The configuration settings for software inside the environment.  Structure is documented below.
	// +kubebuilder:validation:Optional
	softwareConfig?: [...#SoftwareConfigParameters] @go(SoftwareConfig,[]SoftwareConfigParameters)

	// The configuration settings for the Airflow web server App Engine instance.
	// +kubebuilder:validation:Optional
	webServerConfig?: [...#WebServerConfigParameters] @go(WebServerConfig,[]WebServerConfigParameters)

	// The network-level access control policy for the Airflow web server.
	// If unspecified, no network-level access restrictions are applied.
	// +kubebuilder:validation:Optional
	webServerNetworkAccessControl?: [...#WebServerNetworkAccessControlParameters] @go(WebServerNetworkAccessControl,[]WebServerNetworkAccessControlParameters)

	// The Kubernetes workloads configuration for GKE cluster associated with the
	// Cloud Composer environment.
	// +kubebuilder:validation:Optional
	workloadsConfig?: [...#WorkloadsConfigParameters] @go(WorkloadsConfig,[]WorkloadsConfigParameters)
}

#DatabaseConfigInitParameters: {
	// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
	// composer-n1-webserver-4 or composer-n1-webserver-8.
	// Value custom is returned only in response, if Airflow web server parameters were
	// manually changed to a non-standard values.
	machineType?: null | string @go(MachineType,*string)
}

#DatabaseConfigObservation: {
	// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
	// composer-n1-webserver-4 or composer-n1-webserver-8.
	// Value custom is returned only in response, if Airflow web server parameters were
	// manually changed to a non-standard values.
	machineType?: null | string @go(MachineType,*string)
}

#DatabaseConfigParameters: {
	// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
	// composer-n1-webserver-4 or composer-n1-webserver-8.
	// Value custom is returned only in response, if Airflow web server parameters were
	// manually changed to a non-standard values.
	// +kubebuilder:validation:Optional
	machineType?: null | string @go(MachineType,*string)
}

#EncryptionConfigInitParameters: {
	// Customer-managed Encryption Key available through Google's Key Management Service. It must
	// be the fully qualified resource name,
	// i.e. projects/project-id/locations/location/keyRings/keyring/cryptoKeys/key. Cannot be updated.
	kmsKeyName?: null | string @go(KMSKeyName,*string)
}

#EncryptionConfigObservation: {
	// Customer-managed Encryption Key available through Google's Key Management Service. It must
	// be the fully qualified resource name,
	// i.e. projects/project-id/locations/location/keyRings/keyring/cryptoKeys/key. Cannot be updated.
	kmsKeyName?: null | string @go(KMSKeyName,*string)
}

#EncryptionConfigParameters: {
	// Customer-managed Encryption Key available through Google's Key Management Service. It must
	// be the fully qualified resource name,
	// i.e. projects/project-id/locations/location/keyRings/keyring/cryptoKeys/key. Cannot be updated.
	// +kubebuilder:validation:Optional
	kmsKeyName?: null | string @go(KMSKeyName,*string)
}

#EnvironmentInitParameters: {
	// Configuration parameters for this environment  Structure is documented below.
	config?: [...#ConfigInitParameters] @go(Config,[]ConfigInitParameters)

	// User-defined labels for this environment. The labels map can contain
	// no more than 64 entries. Entries of the labels map are UTF8 strings
	// that comply with the following restrictions:
	// Label keys must be between 1 and 63 characters long and must conform
	// to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])?.
	// Label values must be between 0 and 63 characters long and must
	// conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?.
	// No more than 64 labels can be associated with a given environment.
	// Both keys and values must be <= 128 bytes in size.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)
}

#EnvironmentObservation: {
	// Configuration parameters for this environment  Structure is documented below.
	config?: [...#ConfigObservation] @go(Config,[]ConfigObservation)

	// an identifier for the resource with format projects/{{project}}/locations/{{region}}/environments/{{name}}
	id?: null | string @go(ID,*string)

	// User-defined labels for this environment. The labels map can contain
	// no more than 64 entries. Entries of the labels map are UTF8 strings
	// that comply with the following restrictions:
	// Label keys must be between 1 and 63 characters long and must conform
	// to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])?.
	// Label values must be between 0 and 63 characters long and must
	// conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?.
	// No more than 64 labels can be associated with a given environment.
	// Both keys and values must be <= 128 bytes in size.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The location or Compute Engine region for the environment.
	region?: null | string @go(Region,*string)
}

#EnvironmentParameters: {
	// Configuration parameters for this environment  Structure is documented below.
	// +kubebuilder:validation:Optional
	config?: [...#ConfigParameters] @go(Config,[]ConfigParameters)

	// User-defined labels for this environment. The labels map can contain
	// no more than 64 entries. Entries of the labels map are UTF8 strings
	// that comply with the following restrictions:
	// Label keys must be between 1 and 63 characters long and must conform
	// to the following regular expression: [a-z]([-a-z0-9]*[a-z0-9])?.
	// Label values must be between 0 and 63 characters long and must
	// conform to the regular expression ([a-z]([-a-z0-9]*[a-z0-9])?)?.
	// No more than 64 labels can be associated with a given environment.
	// Both keys and values must be <= 128 bytes in size.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.Project
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The location or Compute Engine region for the environment.
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#IPAllocationPolicyInitParameters: {
	// The IP address range used to allocate IP addresses to pods in the cluster.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	// Set to blank to have GKE choose a range with the default size.
	// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
	// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
	// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
	// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
	clusterIpv4CidrBlock?: null | string @go(ClusterIPv4CidrBlock,*string)

	// The name of the cluster's secondary range used to allocate IP addresses to pods.
	// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	clusterSecondaryRangeName?: null | string @go(ClusterSecondaryRangeName,*string)

	// The IP address range used to allocate IP addresses in this cluster.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	// Set to blank to have GKE choose a range with the default size.
	// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
	// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
	// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
	// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
	servicesIpv4CidrBlock?: null | string @go(ServicesIPv4CidrBlock,*string)

	// The name of the services' secondary range used to allocate IP addresses to the cluster.
	// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	servicesSecondaryRangeName?: null | string @go(ServicesSecondaryRangeName,*string)

	// Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
	// Defaults to true if the ip_allocation_policy block is present in config.
	useIpAliases?: null | bool @go(UseIPAliases,*bool)
}

#IPAllocationPolicyObservation: {
	// The IP address range used to allocate IP addresses to pods in the cluster.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	// Set to blank to have GKE choose a range with the default size.
	// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
	// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
	// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
	// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
	clusterIpv4CidrBlock?: null | string @go(ClusterIPv4CidrBlock,*string)

	// The name of the cluster's secondary range used to allocate IP addresses to pods.
	// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	clusterSecondaryRangeName?: null | string @go(ClusterSecondaryRangeName,*string)

	// The IP address range used to allocate IP addresses in this cluster.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	// Set to blank to have GKE choose a range with the default size.
	// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
	// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
	// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
	// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
	servicesIpv4CidrBlock?: null | string @go(ServicesIPv4CidrBlock,*string)

	// The name of the services' secondary range used to allocate IP addresses to the cluster.
	// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	servicesSecondaryRangeName?: null | string @go(ServicesSecondaryRangeName,*string)

	// Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
	// Defaults to true if the ip_allocation_policy block is present in config.
	useIpAliases?: null | bool @go(UseIPAliases,*bool)
}

#IPAllocationPolicyParameters: {
	// The IP address range used to allocate IP addresses to pods in the cluster.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	// Set to blank to have GKE choose a range with the default size.
	// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
	// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
	// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
	// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
	// +kubebuilder:validation:Optional
	clusterIpv4CidrBlock?: null | string @go(ClusterIPv4CidrBlock,*string)

	// The name of the cluster's secondary range used to allocate IP addresses to pods.
	// Specify either cluster_secondary_range_name or cluster_ipv4_cidr_block but not both.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	// +kubebuilder:validation:Optional
	clusterSecondaryRangeName?: null | string @go(ClusterSecondaryRangeName,*string)

	// The IP address range used to allocate IP addresses in this cluster.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	// Set to blank to have GKE choose a range with the default size.
	// Set to /netmask (e.g. /14) to have GKE choose a range with a specific netmask.
	// Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks
	// (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
	// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
	// +kubebuilder:validation:Optional
	servicesIpv4CidrBlock?: null | string @go(ServicesIPv4CidrBlock,*string)

	// The name of the services' secondary range used to allocate IP addresses to the cluster.
	// Specify either services_secondary_range_name or services_ipv4_cidr_block but not both.
	// For Cloud Composer 1 environments, this field is applicable only when use_ip_aliases is true.
	// +kubebuilder:validation:Optional
	servicesSecondaryRangeName?: null | string @go(ServicesSecondaryRangeName,*string)

	// Whether or not to enable Alias IPs in the GKE cluster. If true, a VPC-native cluster is created.
	// Defaults to true if the ip_allocation_policy block is present in config.
	// +kubebuilder:validation:Optional
	useIpAliases?: null | bool @go(UseIPAliases,*bool)
}

#MaintenanceWindowInitParameters: {
	// Maintenance window end time. It is used only to calculate the duration of the maintenance window.
	// The value for end-time must be in the future, relative to 'start_time'.
	endTime?: null | string @go(EndTime,*string)

	// Maintenance window recurrence. Format is a subset of RFC-5545 (https://tools.ietf.org/html/rfc5545) 'RRULE'.
	// The only allowed values for 'FREQ' field are 'FREQ=DAILY' and 'FREQ=WEEKLY;BYDAY=...'.
	// Example values: 'FREQ=WEEKLY;BYDAY=TU,WE', 'FREQ=DAILY'.
	recurrence?: null | string @go(Recurrence,*string)

	// Start time of the first recurrence of the maintenance window.
	startTime?: null | string @go(StartTime,*string)
}

#MaintenanceWindowObservation: {
	// Maintenance window end time. It is used only to calculate the duration of the maintenance window.
	// The value for end-time must be in the future, relative to 'start_time'.
	endTime?: null | string @go(EndTime,*string)

	// Maintenance window recurrence. Format is a subset of RFC-5545 (https://tools.ietf.org/html/rfc5545) 'RRULE'.
	// The only allowed values for 'FREQ' field are 'FREQ=DAILY' and 'FREQ=WEEKLY;BYDAY=...'.
	// Example values: 'FREQ=WEEKLY;BYDAY=TU,WE', 'FREQ=DAILY'.
	recurrence?: null | string @go(Recurrence,*string)

	// Start time of the first recurrence of the maintenance window.
	startTime?: null | string @go(StartTime,*string)
}

#MaintenanceWindowParameters: {
	// Maintenance window end time. It is used only to calculate the duration of the maintenance window.
	// The value for end-time must be in the future, relative to 'start_time'.
	// +kubebuilder:validation:Optional
	endTime?: null | string @go(EndTime,*string)

	// Maintenance window recurrence. Format is a subset of RFC-5545 (https://tools.ietf.org/html/rfc5545) 'RRULE'.
	// The only allowed values for 'FREQ' field are 'FREQ=DAILY' and 'FREQ=WEEKLY;BYDAY=...'.
	// Example values: 'FREQ=WEEKLY;BYDAY=TU,WE', 'FREQ=DAILY'.
	// +kubebuilder:validation:Optional
	recurrence?: null | string @go(Recurrence,*string)

	// Start time of the first recurrence of the maintenance window.
	// +kubebuilder:validation:Optional
	startTime?: null | string @go(StartTime,*string)
}

#MasterAuthorizedNetworksConfigInitParameters: {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS. Structure is documented below.
	cidrBlocks?: [...#CidrBlocksInitParameters] @go(CidrBlocks,[]CidrBlocksInitParameters)

	// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
	enabled?: null | bool @go(Enabled,*bool)
}

#MasterAuthorizedNetworksConfigObservation: {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS. Structure is documented below.
	cidrBlocks?: [...#CidrBlocksObservation] @go(CidrBlocks,[]CidrBlocksObservation)

	// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
	enabled?: null | bool @go(Enabled,*bool)
}

#MasterAuthorizedNetworksConfigParameters: {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS. Structure is documented below.
	// +kubebuilder:validation:Optional
	cidrBlocks?: [...#CidrBlocksParameters] @go(CidrBlocks,[]CidrBlocksParameters)

	// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)
}

#NodeConfigInitParameters: {
	// The disk size in GB used for node VMs. Minimum size is 20GB.
	// If unspecified, defaults to 100GB. Cannot be updated.
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines
	// nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for
	// all destination addresses, except between pods traffic.
	// See the documentation.
	enableIpMasqAgent?: null | bool @go(EnableIPMasqAgent,*bool)

	// Configuration for controlling how IPs are allocated in the GKE cluster.
	// Structure is documented below.
	// Cannot be updated.
	ipAllocationPolicy?: [...#IPAllocationPolicyInitParameters] @go(IPAllocationPolicy,[]IPAllocationPolicyInitParameters)

	// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
	// composer-n1-webserver-4 or composer-n1-webserver-8.
	// Value custom is returned only in response, if Airflow web server parameters were
	// manually changed to a non-standard values.
	machineType?: null | string @go(MachineType,*string)

	// The set of Google API scopes to be made available on all node
	// VMs. Cannot be updated. If empty, defaults to
	// ["https://www.googleapis.com/auth/cloud-platform"].
	oauthScopes?: [...null | string] @go(OAuthScopes,[]*string)

	// The list of instance tags applied to all node VMs. Tags are
	// used to identify valid sources or targets for network
	// firewalls. Each tag within the list must comply with RFC1035.
	// Cannot be updated.
	tags?: [...null | string] @go(Tags,[]*string)

	// The Compute Engine zone in which to deploy the VMs running the
	// Apache Airflow software, specified as the zone name or
	// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must
	// belong to the enclosing environment's project and region.
	zone?: null | string @go(Zone,*string)
}

#NodeConfigObservation: {
	// The disk size in GB used for node VMs. Minimum size is 20GB.
	// If unspecified, defaults to 100GB. Cannot be updated.
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines
	// nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for
	// all destination addresses, except between pods traffic.
	// See the documentation.
	enableIpMasqAgent?: null | bool @go(EnableIPMasqAgent,*bool)

	// Configuration for controlling how IPs are allocated in the GKE cluster.
	// Structure is documented below.
	// Cannot be updated.
	ipAllocationPolicy?: [...#IPAllocationPolicyObservation] @go(IPAllocationPolicy,[]IPAllocationPolicyObservation)

	// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
	// composer-n1-webserver-4 or composer-n1-webserver-8.
	// Value custom is returned only in response, if Airflow web server parameters were
	// manually changed to a non-standard values.
	machineType?: null | string @go(MachineType,*string)

	// The Compute Engine network to be used for machine
	// communications, specified as a self-link, relative resource name
	// (for example "projects/{project}/global/networks/{network}"), by name.
	network?: null | string @go(Network,*string)

	// The set of Google API scopes to be made available on all node
	// VMs. Cannot be updated. If empty, defaults to
	// ["https://www.googleapis.com/auth/cloud-platform"].
	oauthScopes?: [...null | string] @go(OAuthScopes,[]*string)

	// The Google Cloud Platform Service Account to be used by the
	// node VMs. If a service account is not specified, the "default"
	// Compute Engine service account is used. Cannot be updated. If given,
	// note that the service account must have roles/composer.worker
	// for any GCP resources created under the Cloud Composer Environment.
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// The Compute Engine subnetwork to be used for machine
	// communications, specified as a self-link, relative resource name (for example,
	// "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided,
	// network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
	subnetwork?: null | string @go(Subnetwork,*string)

	// The list of instance tags applied to all node VMs. Tags are
	// used to identify valid sources or targets for network
	// firewalls. Each tag within the list must comply with RFC1035.
	// Cannot be updated.
	tags?: [...null | string] @go(Tags,[]*string)

	// The Compute Engine zone in which to deploy the VMs running the
	// Apache Airflow software, specified as the zone name or
	// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must
	// belong to the enclosing environment's project and region.
	zone?: null | string @go(Zone,*string)
}

#NodeConfigParameters: {
	// The disk size in GB used for node VMs. Minimum size is 20GB.
	// If unspecified, defaults to 100GB. Cannot be updated.
	// +kubebuilder:validation:Optional
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines
	// nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for
	// all destination addresses, except between pods traffic.
	// See the documentation.
	// +kubebuilder:validation:Optional
	enableIpMasqAgent?: null | bool @go(EnableIPMasqAgent,*bool)

	// Configuration for controlling how IPs are allocated in the GKE cluster.
	// Structure is documented below.
	// Cannot be updated.
	// +kubebuilder:validation:Optional
	ipAllocationPolicy?: [...#IPAllocationPolicyParameters] @go(IPAllocationPolicy,[]IPAllocationPolicyParameters)

	// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
	// composer-n1-webserver-4 or composer-n1-webserver-8.
	// Value custom is returned only in response, if Airflow web server parameters were
	// manually changed to a non-standard values.
	// +kubebuilder:validation:Optional
	machineType?: null | string @go(MachineType,*string)

	// The Compute Engine network to be used for machine
	// communications, specified as a self-link, relative resource name
	// (for example "projects/{project}/global/networks/{network}"), by name.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	network?: null | string @go(Network,*string)

	// The set of Google API scopes to be made available on all node
	// VMs. Cannot be updated. If empty, defaults to
	// ["https://www.googleapis.com/auth/cloud-platform"].
	// +kubebuilder:validation:Optional
	oauthScopes?: [...null | string] @go(OAuthScopes,[]*string)

	// The Google Cloud Platform Service Account to be used by the
	// node VMs. If a service account is not specified, the "default"
	// Compute Engine service account is used. Cannot be updated. If given,
	// note that the service account must have roles/composer.worker
	// for any GCP resources created under the Cloud Composer Environment.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.ServiceAccount
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",true)
	// +kubebuilder:validation:Optional
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// The Compute Engine subnetwork to be used for machine
	// communications, specified as a self-link, relative resource name (for example,
	// "projects/{project}/regions/{region}/subnetworks/{subnetwork}"), or by name. If subnetwork is provided,
	// network must also be provided and the subnetwork must belong to the enclosing environment's project and region.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Subnetwork
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetwork?: null | string @go(Subnetwork,*string)

	// The list of instance tags applied to all node VMs. Tags are
	// used to identify valid sources or targets for network
	// firewalls. Each tag within the list must comply with RFC1035.
	// Cannot be updated.
	// +kubebuilder:validation:Optional
	tags?: [...null | string] @go(Tags,[]*string)

	// The Compute Engine zone in which to deploy the VMs running the
	// Apache Airflow software, specified as the zone name or
	// relative resource name (e.g. "projects/{project}/zones/{zone}"). Must
	// belong to the enclosing environment's project and region.
	// +kubebuilder:validation:Optional
	zone?: null | string @go(Zone,*string)
}

#PrivateEnvironmentConfigInitParameters: {
	// When specified, the environment will use Private Service Connect instead of VPC peerings to connect
	// to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP
	// address from this subnetwork. This field is supported for Cloud Composer environments in
	// versions composer-2.*.*-airflow-*.*.* and newer.
	cloudComposerConnectionSubnetwork?: null | string @go(CloudComposerConnectionSubnetwork,*string)
	cloudComposerNetworkIpv4CidrBlock?: null | string @go(CloudComposerNetworkIPv4CidrBlock,*string)

	// The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
	cloudSqlIpv4CidrBlock?: null | string @go(CloudSQLIPv4CidrBlock,*string)

	// If true, access to the public endpoint of the GKE cluster is denied.
	// If this field is set to true, the ip_allocation_policy.use_ip_aliases field must
	// also be set to true for Cloud Composer 1 environments.
	enablePrivateEndpoint?: null | bool @go(EnablePrivateEndpoint,*bool)

	// When enabled, IPs from public (non-RFC1918) ranges can be used for
	// ip_allocation_policy.cluster_ipv4_cidr_block and ip_allocation_policy.service_ipv4_cidr_block.
	enablePrivatelyUsedPublicIps?: null | bool @go(EnablePrivatelyUsedPublicIps,*bool)

	// The IP range in CIDR notation to use for the hosted master network. This range is used
	// for assigning internal IP addresses to the cluster master or set of masters and to the
	// internal load balancer virtual IP. This range must not overlap with any other ranges
	// in use within the cluster's network.
	// If left blank, the default value of is used. See documentation for default values per region.
	masterIpv4CidrBlock?: null | string @go(MasterIPv4CidrBlock,*string)

	// The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block.
	webServerIpv4CidrBlock?: null | string @go(WebServerIPv4CidrBlock,*string)
}

#PrivateEnvironmentConfigObservation: {
	// When specified, the environment will use Private Service Connect instead of VPC peerings to connect
	// to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP
	// address from this subnetwork. This field is supported for Cloud Composer environments in
	// versions composer-2.*.*-airflow-*.*.* and newer.
	cloudComposerConnectionSubnetwork?: null | string @go(CloudComposerConnectionSubnetwork,*string)
	cloudComposerNetworkIpv4CidrBlock?: null | string @go(CloudComposerNetworkIPv4CidrBlock,*string)

	// The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
	cloudSqlIpv4CidrBlock?: null | string @go(CloudSQLIPv4CidrBlock,*string)

	// If true, access to the public endpoint of the GKE cluster is denied.
	// If this field is set to true, the ip_allocation_policy.use_ip_aliases field must
	// also be set to true for Cloud Composer 1 environments.
	enablePrivateEndpoint?: null | bool @go(EnablePrivateEndpoint,*bool)

	// When enabled, IPs from public (non-RFC1918) ranges can be used for
	// ip_allocation_policy.cluster_ipv4_cidr_block and ip_allocation_policy.service_ipv4_cidr_block.
	enablePrivatelyUsedPublicIps?: null | bool @go(EnablePrivatelyUsedPublicIps,*bool)

	// The IP range in CIDR notation to use for the hosted master network. This range is used
	// for assigning internal IP addresses to the cluster master or set of masters and to the
	// internal load balancer virtual IP. This range must not overlap with any other ranges
	// in use within the cluster's network.
	// If left blank, the default value of is used. See documentation for default values per region.
	masterIpv4CidrBlock?: null | string @go(MasterIPv4CidrBlock,*string)

	// The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block.
	webServerIpv4CidrBlock?: null | string @go(WebServerIPv4CidrBlock,*string)
}

#PrivateEnvironmentConfigParameters: {
	// When specified, the environment will use Private Service Connect instead of VPC peerings to connect
	// to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP
	// address from this subnetwork. This field is supported for Cloud Composer environments in
	// versions composer-2.*.*-airflow-*.*.* and newer.
	// +kubebuilder:validation:Optional
	cloudComposerConnectionSubnetwork?: null | string @go(CloudComposerConnectionSubnetwork,*string)

	// +kubebuilder:validation:Optional
	cloudComposerNetworkIpv4CidrBlock?: null | string @go(CloudComposerNetworkIPv4CidrBlock,*string)

	// The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
	// +kubebuilder:validation:Optional
	cloudSqlIpv4CidrBlock?: null | string @go(CloudSQLIPv4CidrBlock,*string)

	// If true, access to the public endpoint of the GKE cluster is denied.
	// If this field is set to true, the ip_allocation_policy.use_ip_aliases field must
	// also be set to true for Cloud Composer 1 environments.
	// +kubebuilder:validation:Optional
	enablePrivateEndpoint?: null | bool @go(EnablePrivateEndpoint,*bool)

	// When enabled, IPs from public (non-RFC1918) ranges can be used for
	// ip_allocation_policy.cluster_ipv4_cidr_block and ip_allocation_policy.service_ipv4_cidr_block.
	// +kubebuilder:validation:Optional
	enablePrivatelyUsedPublicIps?: null | bool @go(EnablePrivatelyUsedPublicIps,*bool)

	// The IP range in CIDR notation to use for the hosted master network. This range is used
	// for assigning internal IP addresses to the cluster master or set of masters and to the
	// internal load balancer virtual IP. This range must not overlap with any other ranges
	// in use within the cluster's network.
	// If left blank, the default value of is used. See documentation for default values per region.
	// +kubebuilder:validation:Optional
	masterIpv4CidrBlock?: null | string @go(MasterIPv4CidrBlock,*string)

	// The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block.
	// +kubebuilder:validation:Optional
	webServerIpv4CidrBlock?: null | string @go(WebServerIPv4CidrBlock,*string)
}

#RecoveryConfigInitParameters: {
	// The recovery configuration settings for the Cloud Composer environment.
	scheduledSnapshotsConfig?: [...#ScheduledSnapshotsConfigInitParameters] @go(ScheduledSnapshotsConfig,[]ScheduledSnapshotsConfigInitParameters)
}

#RecoveryConfigObservation: {
	// The recovery configuration settings for the Cloud Composer environment.
	scheduledSnapshotsConfig?: [...#ScheduledSnapshotsConfigObservation] @go(ScheduledSnapshotsConfig,[]ScheduledSnapshotsConfigObservation)
}

#RecoveryConfigParameters: {
	// The recovery configuration settings for the Cloud Composer environment.
	// +kubebuilder:validation:Optional
	scheduledSnapshotsConfig?: [...#ScheduledSnapshotsConfigParameters] @go(ScheduledSnapshotsConfig,[]ScheduledSnapshotsConfigParameters)
}

#ScheduledSnapshotsConfigInitParameters: {
	// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
	enabled?: null | bool @go(Enabled,*bool)

	// Snapshot schedule, in the unix-cron format.
	snapshotCreationSchedule?: null | string @go(SnapshotCreationSchedule,*string)

	// The URI of a bucket folder where to save the snapshot.
	snapshotLocation?: null | string @go(SnapshotLocation,*string)

	// A time zone for the schedule. This value is a time offset and does not take into account daylight saving time changes. Valid values are from UTC-12 to UTC+12. Examples: UTC, UTC-01, UTC+03.
	timeZone?: null | string @go(TimeZone,*string)
}

#ScheduledSnapshotsConfigObservation: {
	// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
	enabled?: null | bool @go(Enabled,*bool)

	// Snapshot schedule, in the unix-cron format.
	snapshotCreationSchedule?: null | string @go(SnapshotCreationSchedule,*string)

	// The URI of a bucket folder where to save the snapshot.
	snapshotLocation?: null | string @go(SnapshotLocation,*string)

	// A time zone for the schedule. This value is a time offset and does not take into account daylight saving time changes. Valid values are from UTC-12 to UTC+12. Examples: UTC, UTC-01, UTC+03.
	timeZone?: null | string @go(TimeZone,*string)
}

#ScheduledSnapshotsConfigParameters: {
	// When enabled, Cloud Composer periodically saves snapshots of your environment to a Cloud Storage bucket.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Snapshot schedule, in the unix-cron format.
	// +kubebuilder:validation:Optional
	snapshotCreationSchedule?: null | string @go(SnapshotCreationSchedule,*string)

	// The URI of a bucket folder where to save the snapshot.
	// +kubebuilder:validation:Optional
	snapshotLocation?: null | string @go(SnapshotLocation,*string)

	// A time zone for the schedule. This value is a time offset and does not take into account daylight saving time changes. Valid values are from UTC-12 to UTC+12. Examples: UTC, UTC-01, UTC+03.
	// +kubebuilder:validation:Optional
	timeZone?: null | string @go(TimeZone,*string)
}

#SchedulerInitParameters: {
	// The number of CPUs for a single Airflow worker.
	cpu?: null | float64 @go(CPU,*float64)

	// The number of Airflow triggerers.
	count?: null | float64 @go(Count,*float64)

	// The amount of memory (GB) for a single Airflow worker.
	memoryGb?: null | float64 @go(MemoryGb,*float64)

	// The amount of storage (GB) for the Airflow web server.
	storageGb?: null | float64 @go(StorageGb,*float64)
}

#SchedulerObservation: {
	// The number of CPUs for a single Airflow worker.
	cpu?: null | float64 @go(CPU,*float64)

	// The number of Airflow triggerers.
	count?: null | float64 @go(Count,*float64)

	// The amount of memory (GB) for a single Airflow worker.
	memoryGb?: null | float64 @go(MemoryGb,*float64)

	// The amount of storage (GB) for the Airflow web server.
	storageGb?: null | float64 @go(StorageGb,*float64)
}

#SchedulerParameters: {
	// The number of CPUs for a single Airflow worker.
	// +kubebuilder:validation:Optional
	cpu?: null | float64 @go(CPU,*float64)

	// The number of Airflow triggerers.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)

	// The amount of memory (GB) for a single Airflow worker.
	// +kubebuilder:validation:Optional
	memoryGb?: null | float64 @go(MemoryGb,*float64)

	// The amount of storage (GB) for the Airflow web server.
	// +kubebuilder:validation:Optional
	storageGb?: null | float64 @go(StorageGb,*float64)
}

#SoftwareConfigInitParameters: {
	// Apache Airflow configuration properties to override. Property keys contain the section and property names,
	// separated by a hyphen, for example "core-dags_are_paused_at_creation".
	airflowConfigOverrides?: {[string]: null | string} @go(AirflowConfigOverrides,map[string]*string)

	// Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
	// Environment variable names must match the regular expression [a-zA-Z_][a-zA-Z0-9_]*.
	// They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
	// AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+), and they cannot match any of the following reserved names:
	envVariables?: {[string]: null | string} @go(EnvVariables,map[string]*string)
	imageVersion?: null | string @go(ImageVersion,*string)

	// Custom Python Package Index (PyPI) packages to be installed
	// in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
	// version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
	// pinning it to a version specifier, use the empty string as the value.
	pypiPackages?: {[string]: null | string} @go(PypiPackages,map[string]*string)

	// The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
	// Can be set to '2' or '3'. If not specified, the default is '3'.
	pythonVersion?: null | string @go(PythonVersion,*string)

	// The number of schedulers for Airflow.
	schedulerCount?: null | float64 @go(SchedulerCount,*float64)
}

#SoftwareConfigObservation: {
	// Apache Airflow configuration properties to override. Property keys contain the section and property names,
	// separated by a hyphen, for example "core-dags_are_paused_at_creation".
	airflowConfigOverrides?: {[string]: null | string} @go(AirflowConfigOverrides,map[string]*string)

	// Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
	// Environment variable names must match the regular expression [a-zA-Z_][a-zA-Z0-9_]*.
	// They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
	// AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+), and they cannot match any of the following reserved names:
	envVariables?: {[string]: null | string} @go(EnvVariables,map[string]*string)
	imageVersion?: null | string @go(ImageVersion,*string)

	// Custom Python Package Index (PyPI) packages to be installed
	// in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
	// version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
	// pinning it to a version specifier, use the empty string as the value.
	pypiPackages?: {[string]: null | string} @go(PypiPackages,map[string]*string)

	// The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
	// Can be set to '2' or '3'. If not specified, the default is '3'.
	pythonVersion?: null | string @go(PythonVersion,*string)

	// The number of schedulers for Airflow.
	schedulerCount?: null | float64 @go(SchedulerCount,*float64)
}

#SoftwareConfigParameters: {
	// Apache Airflow configuration properties to override. Property keys contain the section and property names,
	// separated by a hyphen, for example "core-dags_are_paused_at_creation".
	// +kubebuilder:validation:Optional
	airflowConfigOverrides?: {[string]: null | string} @go(AirflowConfigOverrides,map[string]*string)

	// Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes.
	// Environment variable names must match the regular expression [a-zA-Z_][a-zA-Z0-9_]*.
	// They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression
	// AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+), and they cannot match any of the following reserved names:
	// +kubebuilder:validation:Optional
	envVariables?: {[string]: null | string} @go(EnvVariables,map[string]*string)

	// +kubebuilder:validation:Optional
	imageVersion?: null | string @go(ImageVersion,*string)

	// Custom Python Package Index (PyPI) packages to be installed
	// in the environment. Keys refer to the lowercase package name (e.g. "numpy"). Values are the lowercase extras and
	// version specifier (e.g. "==1.12.0", "[devel,gcp_api]", "[devel]>=1.8.2, <1.9.2"). To specify a package without
	// pinning it to a version specifier, use the empty string as the value.
	// +kubebuilder:validation:Optional
	pypiPackages?: {[string]: null | string} @go(PypiPackages,map[string]*string)

	// The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes.
	// Can be set to '2' or '3'. If not specified, the default is '3'.
	// +kubebuilder:validation:Optional
	pythonVersion?: null | string @go(PythonVersion,*string)

	// The number of schedulers for Airflow.
	// +kubebuilder:validation:Optional
	schedulerCount?: null | float64 @go(SchedulerCount,*float64)
}

#WebServerConfigInitParameters: {
	// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
	// composer-n1-webserver-4 or composer-n1-webserver-8.
	// Value custom is returned only in response, if Airflow web server parameters were
	// manually changed to a non-standard values.
	machineType?: null | string @go(MachineType,*string)
}

#WebServerConfigObservation: {
	// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
	// composer-n1-webserver-4 or composer-n1-webserver-8.
	// Value custom is returned only in response, if Airflow web server parameters were
	// manually changed to a non-standard values.
	machineType?: null | string @go(MachineType,*string)
}

#WebServerConfigParameters: {
	// Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2,
	// composer-n1-webserver-4 or composer-n1-webserver-8.
	// Value custom is returned only in response, if Airflow web server parameters were
	// manually changed to a non-standard values.
	// +kubebuilder:validation:Optional
	machineType?: null | string @go(MachineType,*string)
}

#WebServerInitParameters: {
	// The number of CPUs for a single Airflow worker.
	cpu?: null | float64 @go(CPU,*float64)

	// The amount of memory (GB) for a single Airflow worker.
	memoryGb?: null | float64 @go(MemoryGb,*float64)

	// The amount of storage (GB) for the Airflow web server.
	storageGb?: null | float64 @go(StorageGb,*float64)
}

#WebServerNetworkAccessControlInitParameters: {
	// A collection of allowed IP ranges with descriptions. Structure is documented below.
	allowedIpRange?: [...#AllowedIPRangeInitParameters] @go(AllowedIPRange,[]AllowedIPRangeInitParameters)
}

#WebServerNetworkAccessControlObservation: {
	// A collection of allowed IP ranges with descriptions. Structure is documented below.
	allowedIpRange?: [...#AllowedIPRangeObservation] @go(AllowedIPRange,[]AllowedIPRangeObservation)
}

#WebServerNetworkAccessControlParameters: {
	// A collection of allowed IP ranges with descriptions. Structure is documented below.
	// +kubebuilder:validation:Optional
	allowedIpRange?: [...#AllowedIPRangeParameters] @go(AllowedIPRange,[]AllowedIPRangeParameters)
}

#WebServerObservation: {
	// The number of CPUs for a single Airflow worker.
	cpu?: null | float64 @go(CPU,*float64)

	// The amount of memory (GB) for a single Airflow worker.
	memoryGb?: null | float64 @go(MemoryGb,*float64)

	// The amount of storage (GB) for the Airflow web server.
	storageGb?: null | float64 @go(StorageGb,*float64)
}

#WebServerParameters: {
	// The number of CPUs for a single Airflow worker.
	// +kubebuilder:validation:Optional
	cpu?: null | float64 @go(CPU,*float64)

	// The amount of memory (GB) for a single Airflow worker.
	// +kubebuilder:validation:Optional
	memoryGb?: null | float64 @go(MemoryGb,*float64)

	// The amount of storage (GB) for the Airflow web server.
	// +kubebuilder:validation:Optional
	storageGb?: null | float64 @go(StorageGb,*float64)
}

#WorkerInitParameters: {
	// The number of CPUs for a single Airflow worker.
	cpu?: null | float64 @go(CPU,*float64)

	// The maximum number of Airflow workers that the environment can run. The number of workers in the
	// environment does not go above this number, even if a higher number of workers is required to
	// handle the load.
	maxCount?: null | float64 @go(MaxCount,*float64)

	// The amount of memory (GB) for a single Airflow worker.
	memoryGb?: null | float64 @go(MemoryGb,*float64)

	// The minimum number of Airflow workers that the environment can run. The number of workers in the
	// environment does not go above this number, even if a lower number of workers can handle the load.
	minCount?: null | float64 @go(MinCount,*float64)

	// The amount of storage (GB) for the Airflow web server.
	storageGb?: null | float64 @go(StorageGb,*float64)
}

#WorkerObservation: {
	// The number of CPUs for a single Airflow worker.
	cpu?: null | float64 @go(CPU,*float64)

	// The maximum number of Airflow workers that the environment can run. The number of workers in the
	// environment does not go above this number, even if a higher number of workers is required to
	// handle the load.
	maxCount?: null | float64 @go(MaxCount,*float64)

	// The amount of memory (GB) for a single Airflow worker.
	memoryGb?: null | float64 @go(MemoryGb,*float64)

	// The minimum number of Airflow workers that the environment can run. The number of workers in the
	// environment does not go above this number, even if a lower number of workers can handle the load.
	minCount?: null | float64 @go(MinCount,*float64)

	// The amount of storage (GB) for the Airflow web server.
	storageGb?: null | float64 @go(StorageGb,*float64)
}

#WorkerParameters: {
	// The number of CPUs for a single Airflow worker.
	// +kubebuilder:validation:Optional
	cpu?: null | float64 @go(CPU,*float64)

	// The maximum number of Airflow workers that the environment can run. The number of workers in the
	// environment does not go above this number, even if a higher number of workers is required to
	// handle the load.
	// +kubebuilder:validation:Optional
	maxCount?: null | float64 @go(MaxCount,*float64)

	// The amount of memory (GB) for a single Airflow worker.
	// +kubebuilder:validation:Optional
	memoryGb?: null | float64 @go(MemoryGb,*float64)

	// The minimum number of Airflow workers that the environment can run. The number of workers in the
	// environment does not go above this number, even if a lower number of workers can handle the load.
	// +kubebuilder:validation:Optional
	minCount?: null | float64 @go(MinCount,*float64)

	// The amount of storage (GB) for the Airflow web server.
	// +kubebuilder:validation:Optional
	storageGb?: null | float64 @go(StorageGb,*float64)
}

#WorkloadsConfigInitParameters: {
	// Configuration for resources used by Airflow schedulers.
	scheduler?: [...#SchedulerInitParameters] @go(Scheduler,[]SchedulerInitParameters)

	// Configuration for resources used by Airflow web server.
	webServer?: [...#WebServerInitParameters] @go(WebServer,[]WebServerInitParameters)

	// Configuration for resources used by Airflow workers.
	worker?: [...#WorkerInitParameters] @go(Worker,[]WorkerInitParameters)
}

#WorkloadsConfigObservation: {
	// Configuration for resources used by Airflow schedulers.
	scheduler?: [...#SchedulerObservation] @go(Scheduler,[]SchedulerObservation)

	// Configuration for resources used by Airflow web server.
	webServer?: [...#WebServerObservation] @go(WebServer,[]WebServerObservation)

	// Configuration for resources used by Airflow workers.
	worker?: [...#WorkerObservation] @go(Worker,[]WorkerObservation)
}

#WorkloadsConfigParameters: {
	// Configuration for resources used by Airflow schedulers.
	// +kubebuilder:validation:Optional
	scheduler?: [...#SchedulerParameters] @go(Scheduler,[]SchedulerParameters)

	// Configuration for resources used by Airflow web server.
	// +kubebuilder:validation:Optional
	webServer?: [...#WebServerParameters] @go(WebServer,[]WebServerParameters)

	// Configuration for resources used by Airflow workers.
	// +kubebuilder:validation:Optional
	worker?: [...#WorkerParameters] @go(Worker,[]WorkerParameters)
}

// EnvironmentSpec defines the desired state of Environment
#EnvironmentSpec: {
	forProvider: #EnvironmentParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EnvironmentInitParameters @go(InitProvider)
}

// EnvironmentStatus defines the observed state of Environment.
#EnvironmentStatus: {
	atProvider?: #EnvironmentObservation @go(AtProvider)
}

// Environment is the Schema for the Environments API. An environment for running orchestration tasks.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Environment: {
	spec:    #EnvironmentSpec   @go(Spec)
	status?: #EnvironmentStatus @go(Status)
}

// EnvironmentList contains a list of Environments
#EnvironmentList: {
	items: [...#Environment] @go(Items,[]Environment)
}
