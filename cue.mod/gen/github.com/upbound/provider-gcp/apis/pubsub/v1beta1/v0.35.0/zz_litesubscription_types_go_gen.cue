// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/pubsub/v1beta1

package v1beta1

#DeliveryConfigInitParameters: {
	// When this subscription should send messages to subscribers relative to messages persistence in storage.
	// Possible values are: DELIVER_IMMEDIATELY, DELIVER_AFTER_STORED, DELIVERY_REQUIREMENT_UNSPECIFIED.
	deliveryRequirement?: null | string @go(DeliveryRequirement,*string)
}

#DeliveryConfigObservation: {
	// When this subscription should send messages to subscribers relative to messages persistence in storage.
	// Possible values are: DELIVER_IMMEDIATELY, DELIVER_AFTER_STORED, DELIVERY_REQUIREMENT_UNSPECIFIED.
	deliveryRequirement?: null | string @go(DeliveryRequirement,*string)
}

#DeliveryConfigParameters: {
	// When this subscription should send messages to subscribers relative to messages persistence in storage.
	// Possible values are: DELIVER_IMMEDIATELY, DELIVER_AFTER_STORED, DELIVERY_REQUIREMENT_UNSPECIFIED.
	// +kubebuilder:validation:Optional
	deliveryRequirement?: null | string @go(DeliveryRequirement,*string)
}

#LiteSubscriptionInitParameters: {
	// The settings for this subscription's message delivery.
	// Structure is documented below.
	deliveryConfig?: [...#DeliveryConfigInitParameters] @go(DeliveryConfig,[]DeliveryConfigInitParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The region of the pubsub lite topic.
	region?: null | string @go(Region,*string)
}

#LiteSubscriptionObservation: {
	// The settings for this subscription's message delivery.
	// Structure is documented below.
	deliveryConfig?: [...#DeliveryConfigObservation] @go(DeliveryConfig,[]DeliveryConfigObservation)

	// an identifier for the resource with format projects/{{project}}/locations/{{zone}}/subscriptions/{{name}}
	id?: null | string @go(ID,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The region of the pubsub lite topic.
	region?: null | string @go(Region,*string)

	// A reference to a Topic resource.
	topic?: null | string @go(Topic,*string)

	// The zone of the pubsub lite topic.
	zone?: null | string @go(Zone,*string)
}

#LiteSubscriptionParameters: {
	// The settings for this subscription's message delivery.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	deliveryConfig?: [...#DeliveryConfigParameters] @go(DeliveryConfig,[]DeliveryConfigParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The region of the pubsub lite topic.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// A reference to a Topic resource.
	// +crossplane:generate:reference:type=LiteTopic
	// +kubebuilder:validation:Optional
	topic?: null | string @go(Topic,*string)

	// The zone of the pubsub lite topic.
	// +kubebuilder:validation:Required
	zone?: null | string @go(Zone,*string)
}

// LiteSubscriptionSpec defines the desired state of LiteSubscription
#LiteSubscriptionSpec: {
	forProvider: #LiteSubscriptionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #LiteSubscriptionInitParameters @go(InitProvider)
}

// LiteSubscriptionStatus defines the observed state of LiteSubscription.
#LiteSubscriptionStatus: {
	atProvider?: #LiteSubscriptionObservation @go(AtProvider)
}

// LiteSubscription is the Schema for the LiteSubscriptions API. A named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#LiteSubscription: {
	spec:    #LiteSubscriptionSpec   @go(Spec)
	status?: #LiteSubscriptionStatus @go(Status)
}

// LiteSubscriptionList contains a list of LiteSubscriptions
#LiteSubscriptionList: {
	items: [...#LiteSubscription] @go(Items,[]LiteSubscription)
}
