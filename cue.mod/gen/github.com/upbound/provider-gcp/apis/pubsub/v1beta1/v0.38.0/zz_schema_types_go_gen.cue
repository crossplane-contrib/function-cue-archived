// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/pubsub/v1beta1

package v1beta1

#SchemaInitParameters: {
	// The definition of the schema.
	// This should contain a string representing the full definition of the schema
	// that is a valid schema definition of the type specified in type.
	definition?: null | string @go(Definition,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The type of the schema definition
	// Default value is TYPE_UNSPECIFIED.
	// Possible values are: TYPE_UNSPECIFIED, PROTOCOL_BUFFER, AVRO.
	type?: null | string @go(Type,*string)
}

#SchemaObservation: {
	// The definition of the schema.
	// This should contain a string representing the full definition of the schema
	// that is a valid schema definition of the type specified in type.
	definition?: null | string @go(Definition,*string)

	// an identifier for the resource with format projects/{{project}}/schemas/{{name}}
	id?: null | string @go(ID,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The type of the schema definition
	// Default value is TYPE_UNSPECIFIED.
	// Possible values are: TYPE_UNSPECIFIED, PROTOCOL_BUFFER, AVRO.
	type?: null | string @go(Type,*string)
}

#SchemaParameters: {
	// The definition of the schema.
	// This should contain a string representing the full definition of the schema
	// that is a valid schema definition of the type specified in type.
	// +kubebuilder:validation:Optional
	definition?: null | string @go(Definition,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The type of the schema definition
	// Default value is TYPE_UNSPECIFIED.
	// Possible values are: TYPE_UNSPECIFIED, PROTOCOL_BUFFER, AVRO.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// SchemaSpec defines the desired state of Schema
#SchemaSpec: {
	forProvider: #SchemaParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SchemaInitParameters @go(InitProvider)
}

// SchemaStatus defines the observed state of Schema.
#SchemaStatus: {
	atProvider?: #SchemaObservation @go(AtProvider)
}

// Schema is the Schema for the Schemas API. A schema is a format that messages must follow, creating a contract between publisher and subscriber that Pub/Sub will enforce.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Schema: {
	spec:    #SchemaSpec   @go(Spec)
	status?: #SchemaStatus @go(Status)
}

// SchemaList contains a list of Schemas
#SchemaList: {
	items: [...#Schema] @go(Items,[]Schema)
}
