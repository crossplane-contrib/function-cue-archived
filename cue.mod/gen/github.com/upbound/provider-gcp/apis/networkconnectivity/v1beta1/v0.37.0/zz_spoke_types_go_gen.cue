// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/networkconnectivity/v1beta1

package v1beta1

#InstancesInitParameters: {
	// The IP address on the VM to use for peering.
	ipAddress?: null | string @go(IPAddress,*string)
}

#InstancesObservation: {
	// The IP address on the VM to use for peering.
	ipAddress?: null | string @go(IPAddress,*string)

	// The URI of the virtual machine resource
	virtualMachine?: null | string @go(VirtualMachine,*string)
}

#InstancesParameters: {
	// The IP address on the VM to use for peering.
	// +kubebuilder:validation:Optional
	ipAddress?: null | string @go(IPAddress,*string)

	// The URI of the virtual machine resource
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("self_link",true)
	// +kubebuilder:validation:Optional
	virtualMachine?: null | string @go(VirtualMachine,*string)
}

#LinkedInterconnectAttachmentsInitParameters: {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	siteToSiteDataTransfer?: null | bool @go(SiteToSiteDataTransfer,*bool)

	// The URIs of linked interconnect attachment resources
	uris?: [...null | string] @go(Uris,[]*string)
}

#LinkedInterconnectAttachmentsObservation: {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	siteToSiteDataTransfer?: null | bool @go(SiteToSiteDataTransfer,*bool)

	// The URIs of linked interconnect attachment resources
	uris?: [...null | string] @go(Uris,[]*string)
}

#LinkedInterconnectAttachmentsParameters: {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	// +kubebuilder:validation:Optional
	siteToSiteDataTransfer?: null | bool @go(SiteToSiteDataTransfer,*bool)

	// The URIs of linked interconnect attachment resources
	// +kubebuilder:validation:Optional
	uris: [...null | string] @go(Uris,[]*string)
}

#LinkedRouterApplianceInstancesInitParameters: {
	// The list of router appliance instances
	instances?: [...#InstancesInitParameters] @go(Instances,[]InstancesInitParameters)

	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	siteToSiteDataTransfer?: null | bool @go(SiteToSiteDataTransfer,*bool)
}

#LinkedRouterApplianceInstancesObservation: {
	// The list of router appliance instances
	instances?: [...#InstancesObservation] @go(Instances,[]InstancesObservation)

	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	siteToSiteDataTransfer?: null | bool @go(SiteToSiteDataTransfer,*bool)
}

#LinkedRouterApplianceInstancesParameters: {
	// The list of router appliance instances
	// +kubebuilder:validation:Optional
	instances: [...#InstancesParameters] @go(Instances,[]InstancesParameters)

	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	// +kubebuilder:validation:Optional
	siteToSiteDataTransfer?: null | bool @go(SiteToSiteDataTransfer,*bool)
}

#LinkedVPNTunnelsInitParameters: {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	siteToSiteDataTransfer?: null | bool @go(SiteToSiteDataTransfer,*bool)

	// The URIs of linked VPN tunnel resources.
	uris?: [...null | string] @go(Uris,[]*string)
}

#LinkedVPNTunnelsObservation: {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	siteToSiteDataTransfer?: null | bool @go(SiteToSiteDataTransfer,*bool)

	// The URIs of linked VPN tunnel resources.
	uris?: [...null | string] @go(Uris,[]*string)
}

#LinkedVPNTunnelsParameters: {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	// +kubebuilder:validation:Optional
	siteToSiteDataTransfer?: null | bool @go(SiteToSiteDataTransfer,*bool)

	// The URIs of linked VPN tunnel resources.
	// +kubebuilder:validation:Optional
	uris: [...null | string] @go(Uris,[]*string)
}

#SpokeInitParameters: {
	// An optional description of the spoke.
	description?: null | string @go(Description,*string)

	// Optional labels in key:value format. For more information about labels, see Requirements for labels.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
	linkedInterconnectAttachments?: [...#LinkedInterconnectAttachmentsInitParameters] @go(LinkedInterconnectAttachments,[]LinkedInterconnectAttachmentsInitParameters)

	// The URIs of linked Router appliance resources
	linkedRouterApplianceInstances?: [...#LinkedRouterApplianceInstancesInitParameters] @go(LinkedRouterApplianceInstances,[]LinkedRouterApplianceInstancesInitParameters)

	// The URIs of linked VPN tunnel resources
	linkedVpnTunnels?: [...#LinkedVPNTunnelsInitParameters] @go(LinkedVPNTunnels,[]LinkedVPNTunnelsInitParameters)

	// The location for the resource
	location?: null | string @go(Location,*string)

	// Immutable. The name of the spoke. Spoke names must be unique.
	name?: null | string @go(Name,*string)

	// The project for the resource
	project?: null | string @go(Project,*string)
}

#SpokeObservation: {
	// Output only. The time the spoke was created.
	createTime?: null | string @go(CreateTime,*string)

	// An optional description of the spoke.
	description?: null | string @go(Description,*string)

	// Immutable. The URI of the hub that this spoke is attached to.
	hub?: null | string @go(Hub,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/spokes/{{name}}
	id?: null | string @go(ID,*string)

	// Optional labels in key:value format. For more information about labels, see Requirements for labels.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
	linkedInterconnectAttachments?: [...#LinkedInterconnectAttachmentsObservation] @go(LinkedInterconnectAttachments,[]LinkedInterconnectAttachmentsObservation)

	// The URIs of linked Router appliance resources
	linkedRouterApplianceInstances?: [...#LinkedRouterApplianceInstancesObservation] @go(LinkedRouterApplianceInstances,[]LinkedRouterApplianceInstancesObservation)

	// The URIs of linked VPN tunnel resources
	linkedVpnTunnels?: [...#LinkedVPNTunnelsObservation] @go(LinkedVPNTunnels,[]LinkedVPNTunnelsObservation)

	// The location for the resource
	location?: null | string @go(Location,*string)

	// Immutable. The name of the spoke. Spoke names must be unique.
	name?: null | string @go(Name,*string)

	// The project for the resource
	project?: null | string @go(Project,*string)

	// Output only. The current lifecycle state of this spoke. Possible values: STATE_UNSPECIFIED, CREATING, ACTIVE, DELETING
	state?: null | string @go(State,*string)

	// Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
	uniqueId?: null | string @go(UniqueID,*string)

	// Output only. The time the spoke was last updated.
	updateTime?: null | string @go(UpdateTime,*string)
}

#SpokeParameters: {
	// An optional description of the spoke.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Immutable. The URI of the hub that this spoke is attached to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/networkconnectivity/v1beta1.Hub
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	hub?: null | string @go(Hub,*string)

	// Optional labels in key:value format. For more information about labels, see Requirements for labels.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
	// +kubebuilder:validation:Optional
	linkedInterconnectAttachments?: [...#LinkedInterconnectAttachmentsParameters] @go(LinkedInterconnectAttachments,[]LinkedInterconnectAttachmentsParameters)

	// The URIs of linked Router appliance resources
	// +kubebuilder:validation:Optional
	linkedRouterApplianceInstances?: [...#LinkedRouterApplianceInstancesParameters] @go(LinkedRouterApplianceInstances,[]LinkedRouterApplianceInstancesParameters)

	// The URIs of linked VPN tunnel resources
	// +kubebuilder:validation:Optional
	linkedVpnTunnels?: [...#LinkedVPNTunnelsParameters] @go(LinkedVPNTunnels,[]LinkedVPNTunnelsParameters)

	// The location for the resource
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Immutable. The name of the spoke. Spoke names must be unique.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The project for the resource
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// SpokeSpec defines the desired state of Spoke
#SpokeSpec: {
	forProvider: #SpokeParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #SpokeInitParameters @go(InitProvider)
}

// SpokeStatus defines the observed state of Spoke.
#SpokeStatus: {
	atProvider?: #SpokeObservation @go(AtProvider)
}

// Spoke is the Schema for the Spokes API. The NetworkConnectivity Spoke resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Spoke: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	spec:    #SpokeSpec   @go(Spec)
	status?: #SpokeStatus @go(Status)
}

// SpokeList contains a list of Spokes
#SpokeList: {
	items: [...#Spoke] @go(Items,[]Spoke)
}
