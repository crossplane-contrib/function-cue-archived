// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/cloudrun/v1beta1

package v1beta1

#BinaryAuthorizationInitParameters: {
	// If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	breakglassJustification?: null | string @go(BreakglassJustification,*string)

	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	useDefault?: null | bool @go(UseDefault,*bool)
}

#BinaryAuthorizationObservation: {
	// If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	breakglassJustification?: null | string @go(BreakglassJustification,*string)

	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	useDefault?: null | bool @go(UseDefault,*bool)
}

#BinaryAuthorizationParameters: {
	// If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	// +kubebuilder:validation:Optional
	breakglassJustification?: null | string @go(BreakglassJustification,*string)

	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	// +kubebuilder:validation:Optional
	useDefault?: null | bool @go(UseDefault,*bool)
}

#CloudSQLInstanceInitParameters: {
	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	instances?: [...null | string] @go(Instances,[]*string)
}

#CloudSQLInstanceObservation: {
	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	instances?: [...null | string] @go(Instances,[]*string)
}

#CloudSQLInstanceParameters: {
	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	// +kubebuilder:validation:Optional
	instances?: [...null | string] @go(Instances,[]*string)
}

#ContainersEnvInitParameters: {
	// Volume's name.
	name?: null | string @go(Name,*string)

	// The header field value
	value?: null | string @go(Value,*string)

	// Source for the environment variable's value.
	// Structure is documented below.
	valueSource?: [...#ValueSourceInitParameters] @go(ValueSource,[]ValueSourceInitParameters)
}

#ContainersEnvObservation: {
	// Volume's name.
	name?: null | string @go(Name,*string)

	// The header field value
	value?: null | string @go(Value,*string)

	// Source for the environment variable's value.
	// Structure is documented below.
	valueSource?: [...#ValueSourceObservation] @go(ValueSource,[]ValueSourceObservation)
}

#ContainersEnvParameters: {
	// Volume's name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The header field value
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)

	// Source for the environment variable's value.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	valueSource?: [...#ValueSourceParameters] @go(ValueSource,[]ValueSourceParameters)
}

#ContainersLivenessProbeInitParameters: {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | float64 @go(FailureThreshold,*float64)

	// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	httpGet?: [...#LivenessProbeHTTPGetInitParameters] @go(HTTPGet,[]LivenessProbeHTTPGetInitParameters)

	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	initialDelaySeconds?: null | float64 @go(InitialDelaySeconds,*float64)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
	periodSeconds?: null | float64 @go(PeriodSeconds,*float64)

	// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	tcpSocket?: [...#LivenessProbeTCPSocketInitParameters] @go(TCPSocket,[]LivenessProbeTCPSocketInitParameters)

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#ContainersLivenessProbeObservation: {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | float64 @go(FailureThreshold,*float64)

	// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	httpGet?: [...#LivenessProbeHTTPGetObservation] @go(HTTPGet,[]LivenessProbeHTTPGetObservation)

	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	initialDelaySeconds?: null | float64 @go(InitialDelaySeconds,*float64)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
	periodSeconds?: null | float64 @go(PeriodSeconds,*float64)

	// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	tcpSocket?: [...#LivenessProbeTCPSocketObservation] @go(TCPSocket,[]LivenessProbeTCPSocketObservation)

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#ContainersLivenessProbeParameters: {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	// +kubebuilder:validation:Optional
	failureThreshold?: null | float64 @go(FailureThreshold,*float64)

	// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	httpGet?: [...#LivenessProbeHTTPGetParameters] @go(HTTPGet,[]LivenessProbeHTTPGetParameters)

	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +kubebuilder:validation:Optional
	initialDelaySeconds?: null | float64 @go(InitialDelaySeconds,*float64)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
	// +kubebuilder:validation:Optional
	periodSeconds?: null | float64 @go(PeriodSeconds,*float64)

	// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	tcpSocket?: [...#LivenessProbeTCPSocketParameters] @go(TCPSocket,[]LivenessProbeTCPSocketParameters)

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +kubebuilder:validation:Optional
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#ContainersPortsInitParameters: {
	// Port number the container listens on. This must be a valid TCP port number, 0 < containerPort < 65536.
	containerPort?: null | float64 @go(ContainerPort,*float64)

	// Volume's name.
	name?: null | string @go(Name,*string)
}

#ContainersPortsObservation: {
	// Port number the container listens on. This must be a valid TCP port number, 0 < containerPort < 65536.
	containerPort?: null | float64 @go(ContainerPort,*float64)

	// Volume's name.
	name?: null | string @go(Name,*string)
}

#ContainersPortsParameters: {
	// Port number the container listens on. This must be a valid TCP port number, 0 < containerPort < 65536.
	// +kubebuilder:validation:Optional
	containerPort?: null | float64 @go(ContainerPort,*float64)

	// Volume's name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#ContainersResourcesInitParameters: {
	// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	limits?: {[string]: null | string} @go(Limits,map[string]*string)
}

#ContainersResourcesObservation: {
	// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	limits?: {[string]: null | string} @go(Limits,map[string]*string)
}

#ContainersResourcesParameters: {
	// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	// +kubebuilder:validation:Optional
	limits?: {[string]: null | string} @go(Limits,map[string]*string)
}

#ContainersStartupProbeHTTPGetInitParameters: {
	// Custom headers to set in the request. HTTP allows repeated headers.
	// Structure is documented below.
	httpHeaders?: [...#StartupProbeHTTPGetHTTPHeadersInitParameters] @go(HTTPHeaders,[]StartupProbeHTTPGetHTTPHeadersInitParameters)

	// The relative path of the secret in the container.
	path?: null | string @go(Path,*string)
}

#ContainersStartupProbeHTTPGetObservation: {
	// Custom headers to set in the request. HTTP allows repeated headers.
	// Structure is documented below.
	httpHeaders?: [...#StartupProbeHTTPGetHTTPHeadersObservation] @go(HTTPHeaders,[]StartupProbeHTTPGetHTTPHeadersObservation)

	// The relative path of the secret in the container.
	path?: null | string @go(Path,*string)
}

#ContainersStartupProbeHTTPGetParameters: {
	// Custom headers to set in the request. HTTP allows repeated headers.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	httpHeaders?: [...#StartupProbeHTTPGetHTTPHeadersParameters] @go(HTTPHeaders,[]StartupProbeHTTPGetHTTPHeadersParameters)

	// The relative path of the secret in the container.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#ContainersStartupProbeInitParameters: {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | float64 @go(FailureThreshold,*float64)

	// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	httpGet?: [...#ContainersStartupProbeHTTPGetInitParameters] @go(HTTPGet,[]ContainersStartupProbeHTTPGetInitParameters)

	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	initialDelaySeconds?: null | float64 @go(InitialDelaySeconds,*float64)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
	periodSeconds?: null | float64 @go(PeriodSeconds,*float64)

	// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	tcpSocket?: [...#StartupProbeTCPSocketInitParameters] @go(TCPSocket,[]StartupProbeTCPSocketInitParameters)

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#ContainersStartupProbeObservation: {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | float64 @go(FailureThreshold,*float64)

	// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	httpGet?: [...#ContainersStartupProbeHTTPGetObservation] @go(HTTPGet,[]ContainersStartupProbeHTTPGetObservation)

	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	initialDelaySeconds?: null | float64 @go(InitialDelaySeconds,*float64)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
	periodSeconds?: null | float64 @go(PeriodSeconds,*float64)

	// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	tcpSocket?: [...#StartupProbeTCPSocketObservation] @go(TCPSocket,[]StartupProbeTCPSocketObservation)

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#ContainersStartupProbeParameters: {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	// +kubebuilder:validation:Optional
	failureThreshold?: null | float64 @go(FailureThreshold,*float64)

	// HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	httpGet?: [...#ContainersStartupProbeHTTPGetParameters] @go(HTTPGet,[]ContainersStartupProbeHTTPGetParameters)

	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +kubebuilder:validation:Optional
	initialDelaySeconds?: null | float64 @go(InitialDelaySeconds,*float64)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds
	// +kubebuilder:validation:Optional
	periodSeconds?: null | float64 @go(PeriodSeconds,*float64)

	// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	tcpSocket?: [...#StartupProbeTCPSocketParameters] @go(TCPSocket,[]StartupProbeTCPSocketParameters)

	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +kubebuilder:validation:Optional
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#ContainersVolumeMountsInitParameters: {
	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	mountPath?: null | string @go(MountPath,*string)

	// Volume's name.
	name?: null | string @go(Name,*string)
}

#ContainersVolumeMountsObservation: {
	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	mountPath?: null | string @go(MountPath,*string)

	// Volume's name.
	name?: null | string @go(Name,*string)
}

#ContainersVolumeMountsParameters: {
	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	// +kubebuilder:validation:Optional
	mountPath?: null | string @go(MountPath,*string)

	// Volume's name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#LatestCreatedExecutionInitParameters: {
}

#LatestCreatedExecutionObservation: {
	// (Output)
	// Completion timestamp of the execution.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	completionTime?: null | string @go(CompletionTime,*string)

	// (Output)
	// Creation timestamp of the execution.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	createTime?: null | string @go(CreateTime,*string)

	// (Output)
	// Name of the execution.
	name?: null | string @go(Name,*string)
}

#LatestCreatedExecutionParameters: {
}

#LivenessProbeHTTPGetHTTPHeadersInitParameters: {
	// Volume's name.
	name?: null | string @go(Name,*string)

	// The header field value
	value?: null | string @go(Value,*string)
}

#LivenessProbeHTTPGetHTTPHeadersObservation: {
	// Volume's name.
	name?: null | string @go(Name,*string)

	// The header field value
	value?: null | string @go(Value,*string)
}

#LivenessProbeHTTPGetHTTPHeadersParameters: {
	// Volume's name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The header field value
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#LivenessProbeHTTPGetInitParameters: {
	// Custom headers to set in the request. HTTP allows repeated headers.
	// Structure is documented below.
	httpHeaders?: [...#LivenessProbeHTTPGetHTTPHeadersInitParameters] @go(HTTPHeaders,[]LivenessProbeHTTPGetHTTPHeadersInitParameters)

	// The relative path of the secret in the container.
	path?: null | string @go(Path,*string)
}

#LivenessProbeHTTPGetObservation: {
	// Custom headers to set in the request. HTTP allows repeated headers.
	// Structure is documented below.
	httpHeaders?: [...#LivenessProbeHTTPGetHTTPHeadersObservation] @go(HTTPHeaders,[]LivenessProbeHTTPGetHTTPHeadersObservation)

	// The relative path of the secret in the container.
	path?: null | string @go(Path,*string)
}

#LivenessProbeHTTPGetParameters: {
	// Custom headers to set in the request. HTTP allows repeated headers.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	httpHeaders?: [...#LivenessProbeHTTPGetHTTPHeadersParameters] @go(HTTPHeaders,[]LivenessProbeHTTPGetHTTPHeadersParameters)

	// The relative path of the secret in the container.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#LivenessProbeTCPSocketInitParameters: {
	// Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to 8080.
	port?: null | float64 @go(Port,*float64)
}

#LivenessProbeTCPSocketObservation: {
	// Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to 8080.
	port?: null | float64 @go(Port,*float64)
}

#LivenessProbeTCPSocketParameters: {
	// Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to 8080.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)
}

#SecretItemsInitParameters: {
	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.
	mode?: null | float64 @go(Mode,*float64)

	// The relative path of the secret in the container.
	path?: null | string @go(Path,*string)

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	version?: null | string @go(Version,*string)
}

#SecretItemsObservation: {
	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.
	mode?: null | float64 @go(Mode,*float64)

	// The relative path of the secret in the container.
	path?: null | string @go(Path,*string)

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	version?: null | string @go(Version,*string)
}

#SecretItemsParameters: {
	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.
	// +kubebuilder:validation:Optional
	mode?: null | float64 @go(Mode,*float64)

	// The relative path of the secret in the container.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#StartupProbeHTTPGetHTTPHeadersInitParameters: {
	// Volume's name.
	name?: null | string @go(Name,*string)

	// The header field value
	value?: null | string @go(Value,*string)
}

#StartupProbeHTTPGetHTTPHeadersObservation: {
	// Volume's name.
	name?: null | string @go(Name,*string)

	// The header field value
	value?: null | string @go(Value,*string)
}

#StartupProbeHTTPGetHTTPHeadersParameters: {
	// Volume's name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The header field value
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#StartupProbeTCPSocketInitParameters: {
	// Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to 8080.
	port?: null | float64 @go(Port,*float64)
}

#StartupProbeTCPSocketObservation: {
	// Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to 8080.
	port?: null | float64 @go(Port,*float64)
}

#StartupProbeTCPSocketParameters: {
	// Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to 8080.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)
}

#TemplateContainersInitParameters: {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	args?: [...null | string] @go(Args,[]*string)

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	command?: [...null | string] @go(Command,[]*string)

	// List of environment variables to set in the container.
	// Structure is documented below.
	env?: [...#ContainersEnvInitParameters] @go(Env,[]ContainersEnvInitParameters)

	// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
	image?: null | string @go(Image,*string)

	// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// This field is not supported in Cloud Run Job currently.
	// Structure is documented below.
	livenessProbe?: [...#ContainersLivenessProbeInitParameters] @go(LivenessProbe,[]ContainersLivenessProbeInitParameters)

	// Volume's name.
	name?: null | string @go(Name,*string)

	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
	// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
	// Structure is documented below.
	ports?: [...#ContainersPortsInitParameters] @go(Ports,[]ContainersPortsInitParameters)

	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	// Structure is documented below.
	resources?: [...#ContainersResourcesInitParameters] @go(Resources,[]ContainersResourcesInitParameters)

	// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// This field is not supported in Cloud Run Job currently.
	// Structure is documented below.
	startupProbe?: [...#ContainersStartupProbeInitParameters] @go(StartupProbe,[]ContainersStartupProbeInitParameters)

	// Volume to mount into the container's filesystem.
	// Structure is documented below.
	volumeMounts?: [...#ContainersVolumeMountsInitParameters] @go(VolumeMounts,[]ContainersVolumeMountsInitParameters)

	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	workingDir?: null | string @go(WorkingDir,*string)
}

#TemplateContainersObservation: {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	args?: [...null | string] @go(Args,[]*string)

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	command?: [...null | string] @go(Command,[]*string)

	// List of environment variables to set in the container.
	// Structure is documented below.
	env?: [...#ContainersEnvObservation] @go(Env,[]ContainersEnvObservation)

	// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
	image?: null | string @go(Image,*string)

	// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// This field is not supported in Cloud Run Job currently.
	// Structure is documented below.
	livenessProbe?: [...#ContainersLivenessProbeObservation] @go(LivenessProbe,[]ContainersLivenessProbeObservation)

	// Volume's name.
	name?: null | string @go(Name,*string)

	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
	// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
	// Structure is documented below.
	ports?: [...#ContainersPortsObservation] @go(Ports,[]ContainersPortsObservation)

	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	// Structure is documented below.
	resources?: [...#ContainersResourcesObservation] @go(Resources,[]ContainersResourcesObservation)

	// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// This field is not supported in Cloud Run Job currently.
	// Structure is documented below.
	startupProbe?: [...#ContainersStartupProbeObservation] @go(StartupProbe,[]ContainersStartupProbeObservation)

	// Volume to mount into the container's filesystem.
	// Structure is documented below.
	volumeMounts?: [...#ContainersVolumeMountsObservation] @go(VolumeMounts,[]ContainersVolumeMountsObservation)

	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	workingDir?: null | string @go(WorkingDir,*string)
}

#TemplateContainersParameters: {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	// +kubebuilder:validation:Optional
	args?: [...null | string] @go(Args,[]*string)

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	// +kubebuilder:validation:Optional
	command?: [...null | string] @go(Command,[]*string)

	// List of environment variables to set in the container.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	env?: [...#ContainersEnvParameters] @go(Env,[]ContainersEnvParameters)

	// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
	// +kubebuilder:validation:Optional
	image?: null | string @go(Image,*string)

	// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// This field is not supported in Cloud Run Job currently.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	livenessProbe?: [...#ContainersLivenessProbeParameters] @go(LivenessProbe,[]ContainersLivenessProbeParameters)

	// Volume's name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.
	// If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ports?: [...#ContainersPortsParameters] @go(Ports,[]ContainersPortsParameters)

	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	resources?: [...#ContainersResourcesParameters] @go(Resources,[]ContainersResourcesParameters)

	// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// This field is not supported in Cloud Run Job currently.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	startupProbe?: [...#ContainersStartupProbeParameters] @go(StartupProbe,[]ContainersStartupProbeParameters)

	// Volume to mount into the container's filesystem.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	volumeMounts?: [...#ContainersVolumeMountsParameters] @go(VolumeMounts,[]ContainersVolumeMountsParameters)

	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	// +kubebuilder:validation:Optional
	workingDir?: null | string @go(WorkingDir,*string)
}

#TemplateTemplateInitParameters: {
	// Holds the single container that defines the unit of execution for this task.
	// Structure is documented below.
	containers?: [...#TemplateContainersInitParameters] @go(Containers,[]TemplateContainersInitParameters)

	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	encryptionKey?: null | string @go(EncryptionKey,*string)

	// The execution environment being used to host this Task.
	// Possible values are: EXECUTION_ENVIRONMENT_GEN1, EXECUTION_ENVIRONMENT_GEN2.
	executionEnvironment?: null | string @go(ExecutionEnvironment,*string)

	// Number of retries allowed per Task, before marking this Task failed.
	maxRetries?: null | float64 @go(MaxRetries,*float64)

	// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	timeout?: null | string @go(Timeout,*string)

	// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	// Structure is documented below.
	vpcAccess?: [...#VPCAccessInitParameters] @go(VPCAccess,[]VPCAccessInitParameters)

	// A list of Volumes to make available to containers.
	// Structure is documented below.
	volumes?: [...#TemplateVolumesInitParameters] @go(Volumes,[]TemplateVolumesInitParameters)
}

#TemplateTemplateObservation: {
	// Holds the single container that defines the unit of execution for this task.
	// Structure is documented below.
	containers?: [...#TemplateContainersObservation] @go(Containers,[]TemplateContainersObservation)

	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	encryptionKey?: null | string @go(EncryptionKey,*string)

	// The execution environment being used to host this Task.
	// Possible values are: EXECUTION_ENVIRONMENT_GEN1, EXECUTION_ENVIRONMENT_GEN2.
	executionEnvironment?: null | string @go(ExecutionEnvironment,*string)

	// Number of retries allowed per Task, before marking this Task failed.
	maxRetries?: null | float64 @go(MaxRetries,*float64)

	// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	timeout?: null | string @go(Timeout,*string)

	// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	// Structure is documented below.
	vpcAccess?: [...#VPCAccessObservation] @go(VPCAccess,[]VPCAccessObservation)

	// A list of Volumes to make available to containers.
	// Structure is documented below.
	volumes?: [...#TemplateVolumesObservation] @go(Volumes,[]TemplateVolumesObservation)
}

#TemplateTemplateParameters: {
	// Holds the single container that defines the unit of execution for this task.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	containers?: [...#TemplateContainersParameters] @go(Containers,[]TemplateContainersParameters)

	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	// +kubebuilder:validation:Optional
	encryptionKey?: null | string @go(EncryptionKey,*string)

	// The execution environment being used to host this Task.
	// Possible values are: EXECUTION_ENVIRONMENT_GEN1, EXECUTION_ENVIRONMENT_GEN2.
	// +kubebuilder:validation:Optional
	executionEnvironment?: null | string @go(ExecutionEnvironment,*string)

	// Number of retries allowed per Task, before marking this Task failed.
	// +kubebuilder:validation:Optional
	maxRetries?: null | float64 @go(MaxRetries,*float64)

	// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	// +kubebuilder:validation:Optional
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
	// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	timeout?: null | string @go(Timeout,*string)

	// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	vpcAccess?: [...#VPCAccessParameters] @go(VPCAccess,[]VPCAccessParameters)

	// A list of Volumes to make available to containers.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	volumes?: [...#TemplateVolumesParameters] @go(Volumes,[]TemplateVolumesParameters)
}

#TemplateVolumesInitParameters: {
	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	// Structure is documented below.
	cloudSqlInstance?: [...#CloudSQLInstanceInitParameters] @go(CloudSQLInstance,[]CloudSQLInstanceInitParameters)

	// Volume's name.
	name?: null | string @go(Name,*string)

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	secret?: [...#VolumesSecretInitParameters] @go(Secret,[]VolumesSecretInitParameters)
}

#TemplateVolumesObservation: {
	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	// Structure is documented below.
	cloudSqlInstance?: [...#CloudSQLInstanceObservation] @go(CloudSQLInstance,[]CloudSQLInstanceObservation)

	// Volume's name.
	name?: null | string @go(Name,*string)

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	secret?: [...#VolumesSecretObservation] @go(Secret,[]VolumesSecretObservation)
}

#TemplateVolumesParameters: {
	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cloudSqlInstance?: [...#CloudSQLInstanceParameters] @go(CloudSQLInstance,[]CloudSQLInstanceParameters)

	// Volume's name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	secret?: [...#VolumesSecretParameters] @go(Secret,[]VolumesSecretParameters)
}

#TerminalConditionInitParameters: {
}

#TerminalConditionObservation: {
	// (Output)
	// A reason for the execution condition.
	executionReason?: null | string @go(ExecutionReason,*string)

	// (Output)
	// Last time the condition transitioned from one status to another.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	lastTransitionTime?: null | string @go(LastTransitionTime,*string)

	// (Output)
	// Human readable message indicating details about the current status.
	message?: null | string @go(Message,*string)

	// (Output)
	// A common (service-level) reason for this condition.
	reason?: null | string @go(Reason,*string)

	// (Output)
	// A reason for the revision condition.
	revisionReason?: null | string @go(RevisionReason,*string)

	// (Output)
	// How to interpret failures of this condition, one of Error, Warning, Info
	severity?: null | string @go(Severity,*string)

	// (Output)
	// State of the condition.
	state?: null | string @go(State,*string)

	// (Output)
	// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
	type?: null | string @go(Type,*string)
}

#TerminalConditionParameters: {
}

#V2JobConditionsInitParameters: {
}

#V2JobConditionsObservation: {
	// (Output)
	// A reason for the execution condition.
	executionReason?: null | string @go(ExecutionReason,*string)

	// (Output)
	// Last time the condition transitioned from one status to another.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	lastTransitionTime?: null | string @go(LastTransitionTime,*string)

	// (Output)
	// Human readable message indicating details about the current status.
	message?: null | string @go(Message,*string)

	// (Output)
	// A common (service-level) reason for this condition.
	reason?: null | string @go(Reason,*string)

	// (Output)
	// A reason for the revision condition.
	revisionReason?: null | string @go(RevisionReason,*string)

	// (Output)
	// How to interpret failures of this condition, one of Error, Warning, Info
	severity?: null | string @go(Severity,*string)

	// (Output)
	// State of the condition.
	state?: null | string @go(State,*string)

	// (Output)
	// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
	type?: null | string @go(Type,*string)
}

#V2JobConditionsParameters: {
}

#V2JobInitParameters: {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected on new resources.
	// All system annotations in v1 now have a corresponding field in v2 Job.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	binaryAuthorization?: [...#BinaryAuthorizationInitParameters] @go(BinaryAuthorization,[]BinaryAuthorizationInitParameters)

	// Arbitrary identifier for the API client.
	client?: null | string @go(Client,*string)

	// Arbitrary version identifier for the API client.
	clientVersion?: null | string @go(ClientVersion,*string)

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
	// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 Job.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA.
	// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
	// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
	// Possible values are: UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED.
	launchStage?: null | string @go(LaunchStage,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The template used to create executions for this Job.
	// Structure is documented below.
	template?: [...#V2JobTemplateInitParameters] @go(Template,[]V2JobTemplateInitParameters)
}

#V2JobObservation: {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected on new resources.
	// All system annotations in v1 now have a corresponding field in v2 Job.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	binaryAuthorization?: [...#BinaryAuthorizationObservation] @go(BinaryAuthorization,[]BinaryAuthorizationObservation)

	// Arbitrary identifier for the API client.
	client?: null | string @go(Client,*string)

	// Arbitrary version identifier for the API client.
	clientVersion?: null | string @go(ClientVersion,*string)

	// The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Job does not reach its desired state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	// Structure is documented below.
	conditions?: [...#V2JobConditionsObservation] @go(Conditions,[]V2JobConditionsObservation)

	// A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
	etag?: null | string @go(Etag,*string)

	// Number of executions created for this job.
	executionCount?: null | float64 @go(ExecutionCount,*float64)

	// A number that monotonically increases every time the user modifies the desired state.
	generation?: null | string @go(Generation,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/jobs/{{name}}
	id?: null | string @go(ID,*string)

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
	// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 Job.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Name of the last created execution.
	// Structure is documented below.
	latestCreatedExecution?: [...#LatestCreatedExecutionObservation] @go(LatestCreatedExecution,[]LatestCreatedExecutionObservation)

	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA.
	// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
	// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
	// Possible values are: UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED.
	launchStage?: null | string @go(LaunchStage,*string)

	// The location of the cloud run job
	location?: null | string @go(Location,*string)

	// The generation of this Job. See comments in reconciling for additional information on reconciliation process in Cloud Run.
	observedGeneration?: null | string @go(ObservedGeneration,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Returns true if the Job is currently being acted upon by the system to bring it into the desired state.
	// When a new Job is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Job to the desired state. This process is called reconciliation. While reconciliation is in process, observedGeneration and latest_succeeded_execution, will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the state matches the Job, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.
	// If reconciliation succeeded, the following fields will match: observedGeneration and generation, latest_succeeded_execution and latestCreatedExecution.
	// If reconciliation failed, observedGeneration and latest_succeeded_execution will have the state of the last succeeded execution or empty for newly created Job. Additional information on the failure can be found in terminalCondition and conditions
	reconciling?: null | bool @go(Reconciling,*bool)

	// The template used to create executions for this Job.
	// Structure is documented below.
	template?: [...#V2JobTemplateObservation] @go(Template,[]V2JobTemplateObservation)

	// The Condition of this Job, containing its readiness status, and detailed error information in case it did not reach the desired state
	// Structure is documented below.
	terminalCondition?: [...#TerminalConditionObservation] @go(TerminalCondition,[]TerminalConditionObservation)

	// Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	uid?: null | string @go(UID,*string)
}

#V2JobParameters: {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected on new resources.
	// All system annotations in v1 now have a corresponding field in v2 Job.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// +kubebuilder:validation:Optional
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// Settings for the Binary Authorization feature.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	binaryAuthorization?: [...#BinaryAuthorizationParameters] @go(BinaryAuthorization,[]BinaryAuthorizationParameters)

	// Arbitrary identifier for the API client.
	// +kubebuilder:validation:Optional
	client?: null | string @go(Client,*string)

	// Arbitrary version identifier for the API client.
	// +kubebuilder:validation:Optional
	clientVersion?: null | string @go(ClientVersion,*string)

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component,
	// environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 Job.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA.
	// If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.
	// For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.
	// Possible values are: UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED.
	// +kubebuilder:validation:Optional
	launchStage?: null | string @go(LaunchStage,*string)

	// The location of the cloud run job
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The template used to create executions for this Job.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	template?: [...#V2JobTemplateParameters] @go(Template,[]V2JobTemplateParameters)
}

#V2JobTemplateInitParameters: {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter,
	// or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
	// https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= taskCount. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
	parallelism?: null | float64 @go(Parallelism,*float64)

	// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	taskCount?: null | float64 @go(TaskCount,*float64)

	// Describes the task(s) that will be created when executing an execution
	// Structure is documented below.
	template?: [...#TemplateTemplateInitParameters] @go(Template,[]TemplateTemplateInitParameters)
}

#V2JobTemplateObservation: {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter,
	// or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
	// https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= taskCount. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
	parallelism?: null | float64 @go(Parallelism,*float64)

	// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	taskCount?: null | float64 @go(TaskCount,*float64)

	// Describes the task(s) that will be created when executing an execution
	// Structure is documented below.
	template?: [...#TemplateTemplateObservation] @go(Template,[]TemplateTemplateObservation)
}

#V2JobTemplateParameters: {
	// Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
	// Cloud Run API v2 does not support annotations with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate.
	// This field follows Kubernetes annotations' namespacing, limits, and rules.
	// +kubebuilder:validation:Optional
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter,
	// or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or
	// https://cloud.google.com/run/docs/configuring/labels.
	// Cloud Run API v2 does not support labels with run.googleapis.com, cloud.googleapis.com, serving.knative.dev, or autoscaling.knative.dev namespaces, and they will be rejected.
	// All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= taskCount. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
	// +kubebuilder:validation:Optional
	parallelism?: null | float64 @go(Parallelism,*float64)

	// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	// +kubebuilder:validation:Optional
	taskCount?: null | float64 @go(TaskCount,*float64)

	// Describes the task(s) that will be created when executing an execution
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	template: [...#TemplateTemplateParameters] @go(Template,[]TemplateTemplateParameters)
}

#VPCAccessInitParameters: {
	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.
	connector?: null | string @go(Connector,*string)

	// Traffic VPC egress settings.
	// Possible values are: ALL_TRAFFIC, PRIVATE_RANGES_ONLY.
	egress?: null | string @go(Egress,*string)
}

#VPCAccessObservation: {
	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.
	connector?: null | string @go(Connector,*string)

	// Traffic VPC egress settings.
	// Possible values are: ALL_TRAFFIC, PRIVATE_RANGES_ONLY.
	egress?: null | string @go(Egress,*string)
}

#VPCAccessParameters: {
	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.
	// +kubebuilder:validation:Optional
	connector?: null | string @go(Connector,*string)

	// Traffic VPC egress settings.
	// Possible values are: ALL_TRAFFIC, PRIVATE_RANGES_ONLY.
	// +kubebuilder:validation:Optional
	egress?: null | string @go(Egress,*string)
}

#ValueSourceInitParameters: {
	// Selects a secret and a specific version from Cloud Secret Manager.
	// Structure is documented below.
	secretKeyRef?: [...#ValueSourceSecretKeyRefInitParameters] @go(SecretKeyRef,[]ValueSourceSecretKeyRefInitParameters)
}

#ValueSourceObservation: {
	// Selects a secret and a specific version from Cloud Secret Manager.
	// Structure is documented below.
	secretKeyRef?: [...#ValueSourceSecretKeyRefObservation] @go(SecretKeyRef,[]ValueSourceSecretKeyRefObservation)
}

#ValueSourceParameters: {
	// Selects a secret and a specific version from Cloud Secret Manager.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	secretKeyRef?: [...#ValueSourceSecretKeyRefParameters] @go(SecretKeyRef,[]ValueSourceSecretKeyRefParameters)
}

#ValueSourceSecretKeyRefInitParameters: {
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	version?: null | string @go(Version,*string)
}

#ValueSourceSecretKeyRefObservation: {
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	secret?: null | string @go(Secret,*string)

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	version?: null | string @go(Version,*string)
}

#ValueSourceSecretKeyRefParameters: {
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.Secret
	// +kubebuilder:validation:Optional
	secret?: null | string @go(Secret,*string)

	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#VolumesSecretInitParameters: {
	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.
	defaultMode?: null | float64 @go(DefaultMode,*float64)

	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	// Structure is documented below.
	items?: [...#SecretItemsInitParameters] @go(Items,[]SecretItemsInitParameters)
}

#VolumesSecretObservation: {
	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.
	defaultMode?: null | float64 @go(DefaultMode,*float64)

	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	// Structure is documented below.
	items?: [...#SecretItemsObservation] @go(Items,[]SecretItemsObservation)

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	secret?: null | string @go(Secret,*string)
}

#VolumesSecretParameters: {
	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.
	// +kubebuilder:validation:Optional
	defaultMode?: null | float64 @go(DefaultMode,*float64)

	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	items?: [...#SecretItemsParameters] @go(Items,[]SecretItemsParameters)

	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	// Structure is documented below.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/secretmanager/v1beta1.Secret
	// +kubebuilder:validation:Optional
	secret?: null | string @go(Secret,*string)
}

// V2JobSpec defines the desired state of V2Job
#V2JobSpec: {
	forProvider: #V2JobParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #V2JobInitParameters @go(InitProvider)
}

// V2JobStatus defines the observed state of V2Job.
#V2JobStatus: {
	atProvider?: #V2JobObservation @go(AtProvider)
}

// V2Job is the Schema for the V2Jobs API. A Cloud Run Job resource that references a container image which is run to completion.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#V2Job: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.template) || (has(self.initProvider) && has(self.initProvider.template))",message="spec.forProvider.template is a required parameter"
	spec:    #V2JobSpec   @go(Spec)
	status?: #V2JobStatus @go(Status)
}

// V2JobList contains a list of V2Jobs
#V2JobList: {
	items: [...#V2Job] @go(Items,[]V2Job)
}
