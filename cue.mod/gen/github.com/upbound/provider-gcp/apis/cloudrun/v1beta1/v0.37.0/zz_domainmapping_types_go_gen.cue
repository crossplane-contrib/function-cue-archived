// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/cloudrun/v1beta1

package v1beta1

#ConditionsInitParameters: {
}

#ConditionsObservation: {
	// (Output)
	// Human readable message indicating details about the current status.
	message?: null | string @go(Message,*string)

	// (Output)
	// One-word CamelCase reason for the condition's current status.
	reason?: null | string @go(Reason,*string)

	// The current status of the DomainMapping.
	// Structure is documented below.
	status?: null | string @go(Status,*string)

	// Resource record type. Example: AAAA.
	// Possible values are: A, AAAA, CNAME.
	type?: null | string @go(Type,*string)
}

#ConditionsParameters: {
}

#DomainMappingInitParameters: {
	// The location of the cloud run instance. eg us-central1
	location?: null | string @go(Location,*string)

	// Metadata associated with this DomainMapping.
	// Structure is documented below.
	metadata?: [...#MetadataInitParameters] @go(Metadata,[]MetadataInitParameters)

	// Name should be a verified domain
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The spec for this DomainMapping.
	// Structure is documented below.
	spec?: [...#SpecInitParameters] @go(Spec,[]SpecInitParameters)
}

#DomainMappingObservation: {
	// an identifier for the resource with format locations/{{location}}/namespaces/{{project}}/domainmappings/{{name}}
	id?: null | string @go(ID,*string)

	// The location of the cloud run instance. eg us-central1
	location?: null | string @go(Location,*string)

	// Metadata associated with this DomainMapping.
	// Structure is documented below.
	metadata?: [...#MetadataObservation] @go(Metadata,[]MetadataObservation)

	// Name should be a verified domain
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The spec for this DomainMapping.
	// Structure is documented below.
	spec?: [...#SpecObservation] @go(Spec,[]SpecObservation)

	// The current status of the DomainMapping.
	// Structure is documented below.
	status?: [...#StatusObservation] @go(Status,[]StatusObservation)
}

#DomainMappingParameters: {
	// The location of the cloud run instance. eg us-central1
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Metadata associated with this DomainMapping.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	metadata?: [...#MetadataParameters] @go(Metadata,[]MetadataParameters)

	// Name should be a verified domain
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The spec for this DomainMapping.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	spec?: [...#SpecParameters] @go(Spec,[]SpecParameters)
}

#MetadataInitParameters: {
	// Annotations is a key value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata. More
	// info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	// Note: The Cloud Run API may add additional annotations that were not provided in your config.ignore_changes rule to the metadata.0.annotations field.
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and routes.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	labels?: {[string]: null | string} @go(Labels,map[string]*string)
}

#MetadataObservation: {
	// Annotations is a key value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata. More
	// info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	// Note: The Cloud Run API may add additional annotations that were not provided in your config.ignore_changes rule to the metadata.0.annotations field.
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// (Output)
	// A sequence number representing a specific generation of the desired state.
	generation?: null | float64 @go(Generation,*float64)

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and routes.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// In Cloud Run the namespace must be equal to either the
	// project ID or project number.
	namespace?: null | string @go(Namespace,*string)

	// (Output)
	// An opaque value that represents the internal version of this object that
	// can be used by clients to determine when objects have changed. May be used
	// for optimistic concurrency, change detection, and the watch operation on a
	// resource or set of resources. They may only be valid for a
	// particular resource or set of resources.
	// More info:
	// https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
	resourceVersion?: null | string @go(ResourceVersion,*string)

	// (Output)
	// SelfLink is a URL representing this object.
	selfLink?: null | string @go(SelfLink,*string)

	// (Output)
	// UID is a unique id generated by the server on successful creation of a resource and is not
	// allowed to change on PUT operations.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	uid?: null | string @go(UID,*string)
}

#MetadataParameters: {
	// Annotations is a key value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata. More
	// info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	// Note: The Cloud Run API may add additional annotations that were not provided in your config.ignore_changes rule to the metadata.0.annotations field.
	// +kubebuilder:validation:Optional
	annotations?: {[string]: null | string} @go(Annotations,map[string]*string)

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and routes.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// In Cloud Run the namespace must be equal to either the
	// project ID or project number.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.Project
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)
}

#ResourceRecordsInitParameters: {
}

#ResourceRecordsObservation: {
	// (Output)
	// Relative name of the object affected by this record. Only applicable for
	// CNAME records. Example: 'www'.
	name?: null | string @go(Name,*string)

	// (Output)
	// Data for this record. Values vary by record type, as defined in RFC 1035
	// (section 5) and RFC 1034 (section 3.6.1).
	rrdata?: null | string @go(Rrdata,*string)

	// Resource record type. Example: AAAA.
	// Possible values are: A, AAAA, CNAME.
	type?: null | string @go(Type,*string)
}

#ResourceRecordsParameters: {
}

#SpecInitParameters: {
	// The mode of the certificate.
	// Default value is AUTOMATIC.
	// Possible values are: NONE, AUTOMATIC.
	certificateMode?: null | string @go(CertificateMode,*string)

	// If set, the mapping will override any mapping set before this spec was set.
	// It is recommended that the user leaves this empty to receive an error
	// warning about a potential conflict and only set it once the respective UI
	// has given such a warning.
	forceOverride?: null | bool @go(ForceOverride,*bool)
}

#SpecObservation: {
	// The mode of the certificate.
	// Default value is AUTOMATIC.
	// Possible values are: NONE, AUTOMATIC.
	certificateMode?: null | string @go(CertificateMode,*string)

	// If set, the mapping will override any mapping set before this spec was set.
	// It is recommended that the user leaves this empty to receive an error
	// warning about a potential conflict and only set it once the respective UI
	// has given such a warning.
	forceOverride?: null | bool @go(ForceOverride,*bool)

	// The name of the Cloud Run Service that this DomainMapping applies to.
	// The route must exist.
	routeName?: null | string @go(RouteName,*string)
}

#SpecParameters: {
	// The mode of the certificate.
	// Default value is AUTOMATIC.
	// Possible values are: NONE, AUTOMATIC.
	// +kubebuilder:validation:Optional
	certificateMode?: null | string @go(CertificateMode,*string)

	// If set, the mapping will override any mapping set before this spec was set.
	// It is recommended that the user leaves this empty to receive an error
	// warning about a potential conflict and only set it once the respective UI
	// has given such a warning.
	// +kubebuilder:validation:Optional
	forceOverride?: null | bool @go(ForceOverride,*bool)

	// The name of the Cloud Run Service that this DomainMapping applies to.
	// The route must exist.
	// +crossplane:generate:reference:type=Service
	// +kubebuilder:validation:Optional
	routeName?: null | string @go(RouteName,*string)
}

#StatusInitParameters: {
}

#StatusObservation: {
	// (Output)
	// Array of observed DomainMappingConditions, indicating the current state
	// of the DomainMapping.
	// Structure is documented below.
	conditions?: [...#ConditionsObservation] @go(Conditions,[]ConditionsObservation)

	// (Output)
	// The name of the route that the mapping currently points to.
	mappedRouteName?: null | string @go(MappedRouteName,*string)

	// (Output)
	// ObservedGeneration is the 'Generation' of the DomainMapping that
	// was last processed by the controller.
	observedGeneration?: null | float64 @go(ObservedGeneration,*float64)

	// The resource records required to configure this domain mapping. These
	// records must be added to the domain's DNS configuration in order to
	// serve the application via this domain mapping.
	// Structure is documented below.
	resourceRecords?: [...#ResourceRecordsObservation] @go(ResourceRecords,[]ResourceRecordsObservation)
}

#StatusParameters: {
}

// DomainMappingSpec defines the desired state of DomainMapping
#DomainMappingSpec: {
	forProvider: #DomainMappingParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DomainMappingInitParameters @go(InitProvider)
}

// DomainMappingStatus defines the observed state of DomainMapping.
#DomainMappingStatus: {
	atProvider?: #DomainMappingObservation @go(AtProvider)
}

// DomainMapping is the Schema for the DomainMappings API. Resource to hold the state and status of a user's domain mapping.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#DomainMapping: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metadata) || (has(self.initProvider) && has(self.initProvider.metadata))",message="spec.forProvider.metadata is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	spec:    #DomainMappingSpec   @go(Spec)
	status?: #DomainMappingStatus @go(Status)
}

// DomainMappingList contains a list of DomainMappings
#DomainMappingList: {
	items: [...#DomainMapping] @go(Items,[]DomainMapping)
}
