// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/binaryauthorization/v1beta1

package v1beta1

#AdmissionWhitelistPatternsInitParameters: {
	// An image name pattern to whitelist, in the form
	// registry/path/to/image. This supports a trailing * as a
	// wildcard, but this is allowed only in text after the registry/
	// part.
	namePattern?: null | string @go(NamePattern,*string)
}

#AdmissionWhitelistPatternsObservation: {
	// An image name pattern to whitelist, in the form
	// registry/path/to/image. This supports a trailing * as a
	// wildcard, but this is allowed only in text after the registry/
	// part.
	namePattern?: null | string @go(NamePattern,*string)
}

#AdmissionWhitelistPatternsParameters: {
	// An image name pattern to whitelist, in the form
	// registry/path/to/image. This supports a trailing * as a
	// wildcard, but this is allowed only in text after the registry/
	// part.
	// +kubebuilder:validation:Optional
	namePattern?: null | string @go(NamePattern,*string)
}

#ClusterAdmissionRulesInitParameters: {
	// The identifier for this object. Format specified above.
	cluster?: null | string @go(Cluster,*string)

	// The action when a pod creation is denied by the admission rule.
	// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
	enforcementMode?: null | string @go(EnforcementMode,*string)

	// How this admission rule will be evaluated.
	// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
	evaluationMode?: null | string @go(EvaluationMode,*string)

	// The resource names of the attestors that must attest to a
	// container image. If the attestor is in a different project from the
	// policy, it should be specified in the format projects/*/attestors/*.
	// Each attestor must exist before a policy can reference it. To add an
	// attestor to a policy the principal issuing the policy change
	// request must be able to read the attestor resource.
	// Note: this field must be non-empty when the evaluation_mode field
	// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
	requireAttestationsBy?: [...null | string] @go(RequireAttestationsBy,[]*string)
}

#ClusterAdmissionRulesObservation: {
	// The identifier for this object. Format specified above.
	cluster?: null | string @go(Cluster,*string)

	// The action when a pod creation is denied by the admission rule.
	// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
	enforcementMode?: null | string @go(EnforcementMode,*string)

	// How this admission rule will be evaluated.
	// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
	evaluationMode?: null | string @go(EvaluationMode,*string)

	// The resource names of the attestors that must attest to a
	// container image. If the attestor is in a different project from the
	// policy, it should be specified in the format projects/*/attestors/*.
	// Each attestor must exist before a policy can reference it. To add an
	// attestor to a policy the principal issuing the policy change
	// request must be able to read the attestor resource.
	// Note: this field must be non-empty when the evaluation_mode field
	// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
	requireAttestationsBy?: [...null | string] @go(RequireAttestationsBy,[]*string)
}

#ClusterAdmissionRulesParameters: {
	// The identifier for this object. Format specified above.
	// +kubebuilder:validation:Optional
	cluster?: null | string @go(Cluster,*string)

	// The action when a pod creation is denied by the admission rule.
	// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
	// +kubebuilder:validation:Optional
	enforcementMode?: null | string @go(EnforcementMode,*string)

	// How this admission rule will be evaluated.
	// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
	// +kubebuilder:validation:Optional
	evaluationMode?: null | string @go(EvaluationMode,*string)

	// The resource names of the attestors that must attest to a
	// container image. If the attestor is in a different project from the
	// policy, it should be specified in the format projects/*/attestors/*.
	// Each attestor must exist before a policy can reference it. To add an
	// attestor to a policy the principal issuing the policy change
	// request must be able to read the attestor resource.
	// Note: this field must be non-empty when the evaluation_mode field
	// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
	// +kubebuilder:validation:Optional
	requireAttestationsBy?: [...null | string] @go(RequireAttestationsBy,[]*string)
}

#DefaultAdmissionRuleInitParameters: {
	// The action when a pod creation is denied by the admission rule.
	// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
	enforcementMode?: null | string @go(EnforcementMode,*string)

	// How this admission rule will be evaluated.
	// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
	evaluationMode?: null | string @go(EvaluationMode,*string)

	// The resource names of the attestors that must attest to a
	// container image. If the attestor is in a different project from the
	// policy, it should be specified in the format projects/*/attestors/*.
	// Each attestor must exist before a policy can reference it. To add an
	// attestor to a policy the principal issuing the policy change
	// request must be able to read the attestor resource.
	// Note: this field must be non-empty when the evaluation_mode field
	// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
	requireAttestationsBy?: [...null | string] @go(RequireAttestationsBy,[]*string)
}

#DefaultAdmissionRuleObservation: {
	// The action when a pod creation is denied by the admission rule.
	// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
	enforcementMode?: null | string @go(EnforcementMode,*string)

	// How this admission rule will be evaluated.
	// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
	evaluationMode?: null | string @go(EvaluationMode,*string)

	// The resource names of the attestors that must attest to a
	// container image. If the attestor is in a different project from the
	// policy, it should be specified in the format projects/*/attestors/*.
	// Each attestor must exist before a policy can reference it. To add an
	// attestor to a policy the principal issuing the policy change
	// request must be able to read the attestor resource.
	// Note: this field must be non-empty when the evaluation_mode field
	// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
	requireAttestationsBy?: [...null | string] @go(RequireAttestationsBy,[]*string)
}

#DefaultAdmissionRuleParameters: {
	// The action when a pod creation is denied by the admission rule.
	// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
	// +kubebuilder:validation:Optional
	enforcementMode?: null | string @go(EnforcementMode,*string)

	// How this admission rule will be evaluated.
	// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
	// +kubebuilder:validation:Optional
	evaluationMode?: null | string @go(EvaluationMode,*string)

	// The resource names of the attestors that must attest to a
	// container image. If the attestor is in a different project from the
	// policy, it should be specified in the format projects/*/attestors/*.
	// Each attestor must exist before a policy can reference it. To add an
	// attestor to a policy the principal issuing the policy change
	// request must be able to read the attestor resource.
	// Note: this field must be non-empty when the evaluation_mode field
	// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
	// +kubebuilder:validation:Optional
	requireAttestationsBy?: [...null | string] @go(RequireAttestationsBy,[]*string)
}

#PolicyInitParameters: {
	// A whitelist of image patterns to exclude from admission rules. If an
	// image's name matches a whitelist pattern, the image's admission
	// requests will always be permitted regardless of your admission rules.
	// Structure is documented below.
	admissionWhitelistPatterns?: [...#AdmissionWhitelistPatternsInitParameters] @go(AdmissionWhitelistPatterns,[]AdmissionWhitelistPatternsInitParameters)

	// Per-cluster admission rules. An admission rule specifies either that
	// all container images used in a pod creation request must be attested
	// to by one or more attestors, that all pod creations will be allowed,
	// or that all pod creations will be denied. There can be at most one
	// admission rule per cluster spec.
	clusterAdmissionRules?: [...#ClusterAdmissionRulesInitParameters] @go(ClusterAdmissionRules,[]ClusterAdmissionRulesInitParameters)

	// Default admission rule for a cluster without a per-cluster admission
	// rule.
	// Structure is documented below.
	defaultAdmissionRule?: [...#DefaultAdmissionRuleInitParameters] @go(DefaultAdmissionRule,[]DefaultAdmissionRuleInitParameters)

	// A descriptive comment.
	description?: null | string @go(Description,*string)

	// Controls the evaluation of a Google-maintained global admission policy
	// for common system-level images. Images not covered by the global
	// policy will be subject to the project admission policy.
	// Possible values are: ENABLE, DISABLE.
	globalPolicyEvaluationMode?: null | string @go(GlobalPolicyEvaluationMode,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#PolicyObservation: {
	// A whitelist of image patterns to exclude from admission rules. If an
	// image's name matches a whitelist pattern, the image's admission
	// requests will always be permitted regardless of your admission rules.
	// Structure is documented below.
	admissionWhitelistPatterns?: [...#AdmissionWhitelistPatternsObservation] @go(AdmissionWhitelistPatterns,[]AdmissionWhitelistPatternsObservation)

	// Per-cluster admission rules. An admission rule specifies either that
	// all container images used in a pod creation request must be attested
	// to by one or more attestors, that all pod creations will be allowed,
	// or that all pod creations will be denied. There can be at most one
	// admission rule per cluster spec.
	clusterAdmissionRules?: [...#ClusterAdmissionRulesObservation] @go(ClusterAdmissionRules,[]ClusterAdmissionRulesObservation)

	// Default admission rule for a cluster without a per-cluster admission
	// rule.
	// Structure is documented below.
	defaultAdmissionRule?: [...#DefaultAdmissionRuleObservation] @go(DefaultAdmissionRule,[]DefaultAdmissionRuleObservation)

	// A descriptive comment.
	description?: null | string @go(Description,*string)

	// Controls the evaluation of a Google-maintained global admission policy
	// for common system-level images. Images not covered by the global
	// policy will be subject to the project admission policy.
	// Possible values are: ENABLE, DISABLE.
	globalPolicyEvaluationMode?: null | string @go(GlobalPolicyEvaluationMode,*string)

	// an identifier for the resource with format projects/{{project}}
	id?: null | string @go(ID,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#PolicyParameters: {
	// A whitelist of image patterns to exclude from admission rules. If an
	// image's name matches a whitelist pattern, the image's admission
	// requests will always be permitted regardless of your admission rules.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	admissionWhitelistPatterns?: [...#AdmissionWhitelistPatternsParameters] @go(AdmissionWhitelistPatterns,[]AdmissionWhitelistPatternsParameters)

	// Per-cluster admission rules. An admission rule specifies either that
	// all container images used in a pod creation request must be attested
	// to by one or more attestors, that all pod creations will be allowed,
	// or that all pod creations will be denied. There can be at most one
	// admission rule per cluster spec.
	// +kubebuilder:validation:Optional
	clusterAdmissionRules?: [...#ClusterAdmissionRulesParameters] @go(ClusterAdmissionRules,[]ClusterAdmissionRulesParameters)

	// Default admission rule for a cluster without a per-cluster admission
	// rule.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	defaultAdmissionRule?: [...#DefaultAdmissionRuleParameters] @go(DefaultAdmissionRule,[]DefaultAdmissionRuleParameters)

	// A descriptive comment.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Controls the evaluation of a Google-maintained global admission policy
	// for common system-level images. Images not covered by the global
	// policy will be subject to the project admission policy.
	// Possible values are: ENABLE, DISABLE.
	// +kubebuilder:validation:Optional
	globalPolicyEvaluationMode?: null | string @go(GlobalPolicyEvaluationMode,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// PolicySpec defines the desired state of Policy
#PolicySpec: {
	forProvider: #PolicyParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PolicyInitParameters @go(InitProvider)
}

// PolicyStatus defines the observed state of Policy.
#PolicyStatus: {
	atProvider?: #PolicyObservation @go(AtProvider)
}

// Policy is the Schema for the Policys API. A policy for container image binary authorization.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Policy: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.defaultAdmissionRule) || (has(self.initProvider) && has(self.initProvider.defaultAdmissionRule))",message="spec.forProvider.defaultAdmissionRule is a required parameter"
	spec:    #PolicySpec   @go(Spec)
	status?: #PolicyStatus @go(Status)
}

// PolicyList contains a list of Policys
#PolicyList: {
	items: [...#Policy] @go(Items,[]Policy)
}
