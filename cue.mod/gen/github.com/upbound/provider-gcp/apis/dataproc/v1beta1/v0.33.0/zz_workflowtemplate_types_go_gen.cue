// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/dataproc/v1beta1

package v1beta1

#ClusterSelectorObservation: {
	// Required. The cluster labels. Cluster must have all labels to match.
	clusterLabels?: {[string]: null | string} @go(ClusterLabels,map[string]*string)

	// Optional. The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ * us-central1-f
	zone?: null | string @go(Zone,*string)
}

#ClusterSelectorParameters: {
	// Required. The cluster labels. Cluster must have all labels to match.
	// +kubebuilder:validation:Required
	clusterLabels: {[string]: null | string} @go(ClusterLabels,map[string]*string)

	// Optional. The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ * us-central1-f
	// +kubebuilder:validation:Optional
	zone?: null | string @go(Zone,*string)
}

#ConfigAutoscalingConfigObservation: {
	// Optional. The autoscaling policy used by the cluster. Only resource names including projectid and location (region) are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ Note that the policy must be in the same project and Dataproc region.
	policy?: null | string @go(Policy,*string)
}

#ConfigAutoscalingConfigParameters: {
	// Optional. The autoscaling policy used by the cluster. Only resource names including projectid and location (region) are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ Note that the policy must be in the same project and Dataproc region.
	// +kubebuilder:validation:Optional
	policy?: null | string @go(Policy,*string)
}

#ConfigEncryptionConfigObservation: {
	// Optional. The Cloud KMS key name to use for PD disk encryption for all instances in the cluster.
	gcePdKmsKeyName?: null | string @go(GcePdKMSKeyName,*string)
}

#ConfigEncryptionConfigParameters: {
	// Optional. The Cloud KMS key name to use for PD disk encryption for all instances in the cluster.
	// +kubebuilder:validation:Optional
	gcePdKmsKeyName?: null | string @go(GcePdKMSKeyName,*string)
}

#ConfigEndpointConfigObservation: {
	// Optional. If true, enable http access to specific ports on the cluster from external sources. Defaults to false.
	enableHttpPortAccess?: null | bool @go(EnableHTTPPortAccess,*bool)

	// Output only. The map of port descriptions to URLs. Will only be populated if enable_http_port_access is true.
	httpPorts?: {[string]: null | string} @go(HTTPPorts,map[string]*string)
}

#ConfigEndpointConfigParameters: {
	// Optional. If true, enable http access to specific ports on the cluster from external sources. Defaults to false.
	// +kubebuilder:validation:Optional
	enableHttpPortAccess?: null | bool @go(EnableHTTPPortAccess,*bool)
}

#ConfigGceClusterConfigObservation: {
	// Optional. If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.
	internalIpOnly?: null | bool @go(InternalIPOnly,*bool)

	// The Compute Engine metadata entries to add to all instances (see (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the "default" network of the project is used, if it exists. Cannot be a "Custom Subnet Network" (see /regions/global/default*default`
	network?: null | string @go(Network,*string)

	// Optional. Node Group Affinity for sole-tenant clusters.
	nodeGroupAffinity?: [...#GceClusterConfigNodeGroupAffinityObservation] @go(NodeGroupAffinity,[]GceClusterConfigNodeGroupAffinityObservation)

	// Optional. The type of IPv6 access for a cluster. Possible values: PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED, INHERIT_FROM_SUBNETWORK, OUTBOUND, BIDIRECTIONAL
	privateIpv6GoogleAccess?: null | string @go(PrivateIPv6GoogleAccess,*string)

	// Optional. Reservation Affinity for consuming Zonal reservation.
	reservationAffinity?: [...#GceClusterConfigReservationAffinityObservation] @go(ReservationAffinity,[]GceClusterConfigReservationAffinityObservation)

	// Optional. The (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// Optional. The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: * https://www.googleapis.com/auth/cloud.useraccounts.readonly * https://www.googleapis.com/auth/devstorage.read_write * https://www.googleapis.com/auth/logging.write If no scopes are specified, the following defaults are also provided: * https://www.googleapis.com/auth/bigquery * https://www.googleapis.com/auth/bigtable.admin.table * https://www.googleapis.com/auth/bigtable.data * https://www.googleapis.com/auth/devstorage.full_control
	serviceAccountScopes?: [...null | string] @go(ServiceAccountScopes,[]*string)

	// Optional. Shielded Instance Config for clusters using Compute Engine Shielded VMs. Structure defined below.
	shieldedInstanceConfig?: [...#GceClusterConfigShieldedInstanceConfigObservation] @go(ShieldedInstanceConfig,[]GceClusterConfigShieldedInstanceConfigObservation)

	// Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects//regions/us-east1/subnetworks/sub0 * sub0
	subnetwork?: null | string @go(Subnetwork,*string)

	// The Compute Engine tags to add to all instances (see (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	tags?: [...null | string] @go(Tags,[]*string)

	// Optional. The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ * us-central1-f
	zone?: null | string @go(Zone,*string)
}

#ConfigGceClusterConfigParameters: {
	// Optional. If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.
	// +kubebuilder:validation:Optional
	internalIpOnly?: null | bool @go(InternalIPOnly,*bool)

	// The Compute Engine metadata entries to add to all instances (see (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
	// +kubebuilder:validation:Optional
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the "default" network of the project is used, if it exists. Cannot be a "Custom Subnet Network" (see /regions/global/default*default`
	// +kubebuilder:validation:Optional
	network?: null | string @go(Network,*string)

	// Optional. Node Group Affinity for sole-tenant clusters.
	// +kubebuilder:validation:Optional
	nodeGroupAffinity?: [...#GceClusterConfigNodeGroupAffinityParameters] @go(NodeGroupAffinity,[]GceClusterConfigNodeGroupAffinityParameters)

	// Optional. The type of IPv6 access for a cluster. Possible values: PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED, INHERIT_FROM_SUBNETWORK, OUTBOUND, BIDIRECTIONAL
	// +kubebuilder:validation:Optional
	privateIpv6GoogleAccess?: null | string @go(PrivateIPv6GoogleAccess,*string)

	// Optional. Reservation Affinity for consuming Zonal reservation.
	// +kubebuilder:validation:Optional
	reservationAffinity?: [...#GceClusterConfigReservationAffinityParameters] @go(ReservationAffinity,[]GceClusterConfigReservationAffinityParameters)

	// Optional. The (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
	// +kubebuilder:validation:Optional
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// Optional. The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: * https://www.googleapis.com/auth/cloud.useraccounts.readonly * https://www.googleapis.com/auth/devstorage.read_write * https://www.googleapis.com/auth/logging.write If no scopes are specified, the following defaults are also provided: * https://www.googleapis.com/auth/bigquery * https://www.googleapis.com/auth/bigtable.admin.table * https://www.googleapis.com/auth/bigtable.data * https://www.googleapis.com/auth/devstorage.full_control
	// +kubebuilder:validation:Optional
	serviceAccountScopes?: [...null | string] @go(ServiceAccountScopes,[]*string)

	// Optional. Shielded Instance Config for clusters using Compute Engine Shielded VMs. Structure defined below.
	// +kubebuilder:validation:Optional
	shieldedInstanceConfig?: [...#GceClusterConfigShieldedInstanceConfigParameters] @go(ShieldedInstanceConfig,[]GceClusterConfigShieldedInstanceConfigParameters)

	// Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects//regions/us-east1/subnetworks/sub0 * sub0
	// +kubebuilder:validation:Optional
	subnetwork?: null | string @go(Subnetwork,*string)

	// The Compute Engine tags to add to all instances (see (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	// +kubebuilder:validation:Optional
	tags?: [...null | string] @go(Tags,[]*string)

	// Optional. The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/ * us-central1-f
	// +kubebuilder:validation:Optional
	zone?: null | string @go(Zone,*string)
}

#ConfigLifecycleConfigObservation: {
	// Optional. The lifetime duration of cluster. The cluster will be auto-deleted at the end of this period. Minimum value is 10 minutes; maximum value is 14 days (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	autoDeleteTtl?: null | string @go(AutoDeleteTTL,*string)

	// Optional. The time when cluster will be auto-deleted (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	autoDeleteTime?: null | string @go(AutoDeleteTime,*string)

	// Optional. The duration to keep the cluster alive while idling (when no jobs are running). Passing this threshold will cause the cluster to be deleted. Minimum value is 5 minutes; maximum value is 14 days (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json).
	idleDeleteTtl?: null | string @go(IdleDeleteTTL,*string)

	// Output only. The time when cluster became idle (most recent job finished) and became eligible for deletion due to idleness (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	idleStartTime?: null | string @go(IdleStartTime,*string)
}

#ConfigLifecycleConfigParameters: {
	// Optional. The lifetime duration of cluster. The cluster will be auto-deleted at the end of this period. Minimum value is 10 minutes; maximum value is 14 days (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	// +kubebuilder:validation:Optional
	autoDeleteTtl?: null | string @go(AutoDeleteTTL,*string)

	// Optional. The time when cluster will be auto-deleted (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	// +kubebuilder:validation:Optional
	autoDeleteTime?: null | string @go(AutoDeleteTime,*string)

	// Optional. The duration to keep the cluster alive while idling (when no jobs are running). Passing this threshold will cause the cluster to be deleted. Minimum value is 5 minutes; maximum value is 14 days (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json).
	// +kubebuilder:validation:Optional
	idleDeleteTtl?: null | string @go(IdleDeleteTTL,*string)
}

#ConfigMasterConfigObservation: {
	// Optional. The Compute Engine accelerator configuration for these instances.
	accelerators?: [...#MasterConfigAcceleratorsObservation] @go(Accelerators,[]MasterConfigAcceleratorsObservation)

	// Optional. Disk option config settings.
	diskConfig?: [...#MasterConfigDiskConfigObservation] @go(DiskConfig,[]MasterConfigDiskConfigObservation)

	// Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	image?: null | string @go(Image,*string)

	// Output only. The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.
	instanceNames?: [...null | string] @go(InstanceNames,[]*string)

	// Output only. Specifies that this instance group contains preemptible instances.
	isPreemptible?: null | bool @go(IsPreemptible,*bool)

	// Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	machineType?: null | string @go(MachineType,*string)

	// Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.
	managedGroupConfig?: [...#ManagedGroupConfigObservation] @go(ManagedGroupConfig,[]ManagedGroupConfigObservation)

	// Optional. Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	minCpuPlatform?: null | string @go(MinCPUPlatform,*string)

	// Optional. The number of VM instances in the instance group. For master instance groups, must be set to 1.
	numInstances?: null | float64 @go(NumInstances,*float64)

	// Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	preemptibility?: null | string @go(Preemptibility,*string)
}

#ConfigMasterConfigParameters: {
	// Optional. The Compute Engine accelerator configuration for these instances.
	// +kubebuilder:validation:Optional
	accelerators?: [...#MasterConfigAcceleratorsParameters] @go(Accelerators,[]MasterConfigAcceleratorsParameters)

	// Optional. Disk option config settings.
	// +kubebuilder:validation:Optional
	diskConfig?: [...#MasterConfigDiskConfigParameters] @go(DiskConfig,[]MasterConfigDiskConfigParameters)

	// Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	// +kubebuilder:validation:Optional
	image?: null | string @go(Image,*string)

	// Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	// +kubebuilder:validation:Optional
	machineType?: null | string @go(MachineType,*string)

	// Optional. Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	// +kubebuilder:validation:Optional
	minCpuPlatform?: null | string @go(MinCPUPlatform,*string)

	// Optional. The number of VM instances in the instance group. For master instance groups, must be set to 1.
	// +kubebuilder:validation:Optional
	numInstances?: null | float64 @go(NumInstances,*float64)

	// Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	// +kubebuilder:validation:Optional
	preemptibility?: null | string @go(Preemptibility,*string)
}

#ConfigSecondaryWorkerConfigObservation: {
	// Optional. The Compute Engine accelerator configuration for these instances.
	accelerators?: [...#SecondaryWorkerConfigAcceleratorsObservation] @go(Accelerators,[]SecondaryWorkerConfigAcceleratorsObservation)

	// Optional. Disk option config settings.
	diskConfig?: [...#SecondaryWorkerConfigDiskConfigObservation] @go(DiskConfig,[]SecondaryWorkerConfigDiskConfigObservation)

	// Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	image?: null | string @go(Image,*string)

	// Output only. The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.
	instanceNames?: [...null | string] @go(InstanceNames,[]*string)

	// Output only. Specifies that this instance group contains preemptible instances.
	isPreemptible?: null | bool @go(IsPreemptible,*bool)

	// Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	machineType?: null | string @go(MachineType,*string)

	// Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.
	managedGroupConfig?: [...#SecondaryWorkerConfigManagedGroupConfigObservation] @go(ManagedGroupConfig,[]SecondaryWorkerConfigManagedGroupConfigObservation)

	// Optional. Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	minCpuPlatform?: null | string @go(MinCPUPlatform,*string)

	// Optional. The number of VM instances in the instance group. For master instance groups, must be set to 1.
	numInstances?: null | float64 @go(NumInstances,*float64)

	// Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	preemptibility?: null | string @go(Preemptibility,*string)
}

#ConfigSecondaryWorkerConfigParameters: {
	// Optional. The Compute Engine accelerator configuration for these instances.
	// +kubebuilder:validation:Optional
	accelerators?: [...#SecondaryWorkerConfigAcceleratorsParameters] @go(Accelerators,[]SecondaryWorkerConfigAcceleratorsParameters)

	// Optional. Disk option config settings.
	// +kubebuilder:validation:Optional
	diskConfig?: [...#SecondaryWorkerConfigDiskConfigParameters] @go(DiskConfig,[]SecondaryWorkerConfigDiskConfigParameters)

	// Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	// +kubebuilder:validation:Optional
	image?: null | string @go(Image,*string)

	// Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	// +kubebuilder:validation:Optional
	machineType?: null | string @go(MachineType,*string)

	// Optional. Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	// +kubebuilder:validation:Optional
	minCpuPlatform?: null | string @go(MinCPUPlatform,*string)

	// Optional. The number of VM instances in the instance group. For master instance groups, must be set to 1.
	// +kubebuilder:validation:Optional
	numInstances?: null | float64 @go(NumInstances,*float64)

	// Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	// +kubebuilder:validation:Optional
	preemptibility?: null | string @go(Preemptibility,*string)
}

#ConfigSecurityConfigObservation: {
	// Kerberos related configuration.
	kerberosConfig?: [...#SecurityConfigKerberosConfigObservation] @go(KerberosConfig,[]SecurityConfigKerberosConfigObservation)
}

#ConfigSecurityConfigParameters: {
	// Kerberos related configuration.
	// +kubebuilder:validation:Optional
	kerberosConfig?: [...#SecurityConfigKerberosConfigParameters] @go(KerberosConfig,[]SecurityConfigKerberosConfigParameters)
}

#ConfigSoftwareConfigObservation: {
	// Optional. The version of software inside the cluster. It must be one of the supported (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.
	imageVersion?: null | string @go(ImageVersion,*string)
	optionalComponents?: [...null | string] @go(OptionalComponents,[]*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)
}

#ConfigSoftwareConfigParameters: {
	// Optional. The version of software inside the cluster. It must be one of the supported (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.
	// +kubebuilder:validation:Optional
	imageVersion?: null | string @go(ImageVersion,*string)

	// +kubebuilder:validation:Optional
	optionalComponents?: [...null | string] @go(OptionalComponents,[]*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	properties?: {[string]: null | string} @go(Properties,map[string]*string)
}

#ConfigWorkerConfigAcceleratorsObservation: {
	// The number of the accelerator cards of this type exposed to this instance.
	acceleratorCount?: null | float64 @go(AcceleratorCount,*float64)

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	acceleratorType?: null | string @go(AcceleratorType,*string)
}

#ConfigWorkerConfigAcceleratorsParameters: {
	// The number of the accelerator cards of this type exposed to this instance.
	// +kubebuilder:validation:Optional
	acceleratorCount?: null | float64 @go(AcceleratorCount,*float64)

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	// +kubebuilder:validation:Optional
	acceleratorType?: null | string @go(AcceleratorType,*string)
}

#ConfigWorkerConfigDiskConfigObservation: {
	// Optional. Size in GB of the boot disk (default is 500GB).
	bootDiskSizeGb?: null | float64 @go(BootDiskSizeGb,*float64)

	// Optional. Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	bootDiskType?: null | string @go(BootDiskType,*string)

	// Optional. Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	numLocalSsds?: null | float64 @go(NumLocalSsds,*float64)
}

#ConfigWorkerConfigDiskConfigParameters: {
	// Optional. Size in GB of the boot disk (default is 500GB).
	// +kubebuilder:validation:Optional
	bootDiskSizeGb?: null | float64 @go(BootDiskSizeGb,*float64)

	// Optional. Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	// +kubebuilder:validation:Optional
	bootDiskType?: null | string @go(BootDiskType,*string)

	// Optional. Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	// +kubebuilder:validation:Optional
	numLocalSsds?: null | float64 @go(NumLocalSsds,*float64)
}

#ConfigWorkerConfigObservation: {
	// Optional. The Compute Engine accelerator configuration for these instances.
	accelerators?: [...#ConfigWorkerConfigAcceleratorsObservation] @go(Accelerators,[]ConfigWorkerConfigAcceleratorsObservation)

	// Optional. Disk option config settings.
	diskConfig?: [...#ConfigWorkerConfigDiskConfigObservation] @go(DiskConfig,[]ConfigWorkerConfigDiskConfigObservation)

	// Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	image?: null | string @go(Image,*string)

	// Output only. The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.
	instanceNames?: [...null | string] @go(InstanceNames,[]*string)

	// Output only. Specifies that this instance group contains preemptible instances.
	isPreemptible?: null | bool @go(IsPreemptible,*bool)

	// Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	machineType?: null | string @go(MachineType,*string)

	// Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.
	managedGroupConfig?: [...#WorkerConfigManagedGroupConfigObservation] @go(ManagedGroupConfig,[]WorkerConfigManagedGroupConfigObservation)

	// Optional. Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	minCpuPlatform?: null | string @go(MinCPUPlatform,*string)

	// Optional. The number of VM instances in the instance group. For master instance groups, must be set to 1.
	numInstances?: null | float64 @go(NumInstances,*float64)

	// Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	preemptibility?: null | string @go(Preemptibility,*string)
}

#ConfigWorkerConfigParameters: {
	// Optional. The Compute Engine accelerator configuration for these instances.
	// +kubebuilder:validation:Optional
	accelerators?: [...#ConfigWorkerConfigAcceleratorsParameters] @go(Accelerators,[]ConfigWorkerConfigAcceleratorsParameters)

	// Optional. Disk option config settings.
	// +kubebuilder:validation:Optional
	diskConfig?: [...#ConfigWorkerConfigDiskConfigParameters] @go(DiskConfig,[]ConfigWorkerConfigDiskConfigParameters)

	// Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * https://www.googleapis.com/compute/beta/projects/ If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
	// +kubebuilder:validation:Optional
	image?: null | string @go(Image,*string)

	// Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * https://www.googleapis.com/compute/v1/projects/(https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2`.
	// +kubebuilder:validation:Optional
	machineType?: null | string @go(MachineType,*string)

	// Optional. Specifies the minimum cpu platform for the Instance Group. See (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
	// +kubebuilder:validation:Optional
	minCpuPlatform?: null | string @go(MinCPUPlatform,*string)

	// Optional. The number of VM instances in the instance group. For master instance groups, must be set to 1.
	// +kubebuilder:validation:Optional
	numInstances?: null | float64 @go(NumInstances,*float64)

	// Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed. The default value for secondary instances is PREEMPTIBLE. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE
	// +kubebuilder:validation:Optional
	preemptibility?: null | string @go(Preemptibility,*string)
}

#GceClusterConfigNodeGroupAffinityObservation: {
	// Required. The URI of a sole-tenant /zones/us-central1-a/nodeGroups/node-group-1*node-group-1`
	nodeGroup?: null | string @go(NodeGroup,*string)
}

#GceClusterConfigNodeGroupAffinityParameters: {
	// Required. The URI of a sole-tenant /zones/us-central1-a/nodeGroups/node-group-1*node-group-1`
	// +kubebuilder:validation:Required
	nodeGroup?: null | string @go(NodeGroup,*string)
}

#GceClusterConfigReservationAffinityObservation: {
	// Optional. Type of reservation to consume Possible values: TYPE_UNSPECIFIED, NO_RESERVATION, ANY_RESERVATION, SPECIFIC_RESERVATION
	consumeReservationType?: null | string @go(ConsumeReservationType,*string)

	// Optional. Corresponds to the label key of reservation resource.
	key?: null | string @go(Key,*string)

	// Required. List of allowed values for the parameter.
	values?: [...null | string] @go(Values,[]*string)
}

#GceClusterConfigReservationAffinityParameters: {
	// Optional. Type of reservation to consume Possible values: TYPE_UNSPECIFIED, NO_RESERVATION, ANY_RESERVATION, SPECIFIC_RESERVATION
	// +kubebuilder:validation:Optional
	consumeReservationType?: null | string @go(ConsumeReservationType,*string)

	// Optional. Corresponds to the label key of reservation resource.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// Required. List of allowed values for the parameter.
	// +kubebuilder:validation:Optional
	values?: [...null | string] @go(Values,[]*string)
}

#GceClusterConfigShieldedInstanceConfigObservation: {
	// Optional. Defines whether instances have Integrity Monitoring enabled.
	enableIntegrityMonitoring?: null | bool @go(EnableIntegrityMonitoring,*bool)

	// Optional. Defines whether instances have Secure Boot enabled.
	enableSecureBoot?: null | bool @go(EnableSecureBoot,*bool)

	// Optional. Defines whether instances have the vTPM enabled.
	enableVtpm?: null | bool @go(EnableVtpm,*bool)
}

#GceClusterConfigShieldedInstanceConfigParameters: {
	// Optional. Defines whether instances have Integrity Monitoring enabled.
	// +kubebuilder:validation:Optional
	enableIntegrityMonitoring?: null | bool @go(EnableIntegrityMonitoring,*bool)

	// Optional. Defines whether instances have Secure Boot enabled.
	// +kubebuilder:validation:Optional
	enableSecureBoot?: null | bool @go(EnableSecureBoot,*bool)

	// Optional. Defines whether instances have the vTPM enabled.
	// +kubebuilder:validation:Optional
	enableVtpm?: null | bool @go(EnableVtpm,*bool)
}

#HadoopJobLoggingConfigObservation: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#HadoopJobLoggingConfigParameters: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#HadoopJobObservation: {
	// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	archiveUris?: [...null | string] @go(ArchiveUris,[]*string)

	// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	args?: [...null | string] @go(Args,[]*string)

	// Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	fileUris?: [...null | string] @go(FileUris,[]*string)

	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. The runtime log config for job execution.
	loggingConfig?: [...#HadoopJobLoggingConfigObservation] @go(LoggingConfig,[]HadoopJobLoggingConfigObservation)

	// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
	mainClass?: null | string @go(MainClass,*string)

	// The HCFS URI of the jar file that contains the main class.
	mainJarFileUri?: null | string @go(MainJarFileURI,*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)
}

#HadoopJobParameters: {
	// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	// +kubebuilder:validation:Optional
	archiveUris?: [...null | string] @go(ArchiveUris,[]*string)

	// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	// +kubebuilder:validation:Optional
	args?: [...null | string] @go(Args,[]*string)

	// Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	// +kubebuilder:validation:Optional
	fileUris?: [...null | string] @go(FileUris,[]*string)

	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	loggingConfig?: [...#HadoopJobLoggingConfigParameters] @go(LoggingConfig,[]HadoopJobLoggingConfigParameters)

	// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
	// +kubebuilder:validation:Optional
	mainClass?: null | string @go(MainClass,*string)

	// The HCFS URI of the jar file that contains the main class.
	// +kubebuilder:validation:Optional
	mainJarFileUri?: null | string @go(MainJarFileURI,*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	properties?: {[string]: null | string} @go(Properties,map[string]*string)
}

#HiveJobObservation: {
	// Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	continueOnFailure?: null | bool @go(ContinueOnFailure,*bool)

	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// The HCFS URI of the script that contains SQL queries.
	queryFileUri?: null | string @go(QueryFileURI,*string)

	// A list of queries.
	queryList?: [...#QueryListObservation] @go(QueryList,[]QueryListObservation)

	// Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	scriptVariables?: {[string]: null | string} @go(ScriptVariables,map[string]*string)
}

#HiveJobParameters: {
	// Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	// +kubebuilder:validation:Optional
	continueOnFailure?: null | bool @go(ContinueOnFailure,*bool)

	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// The HCFS URI of the script that contains SQL queries.
	// +kubebuilder:validation:Optional
	queryFileUri?: null | string @go(QueryFileURI,*string)

	// A list of queries.
	// +kubebuilder:validation:Optional
	queryList?: [...#QueryListParameters] @go(QueryList,[]QueryListParameters)

	// Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +kubebuilder:validation:Optional
	scriptVariables?: {[string]: null | string} @go(ScriptVariables,map[string]*string)
}

#InitializationActionsObservation: {
	// Required. Cloud Storage URI of executable file.
	executableFile?: null | string @go(ExecutableFile,*string)

	// Optional. Amount of time executable has to complete. Default is 10 minutes (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)). Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.
	executionTimeout?: null | string @go(ExecutionTimeout,*string)
}

#InitializationActionsParameters: {
	// Required. Cloud Storage URI of executable file.
	// +kubebuilder:validation:Optional
	executableFile?: null | string @go(ExecutableFile,*string)

	// Optional. Amount of time executable has to complete. Default is 10 minutes (see JSON representation of (https://developers.google.com/protocol-buffers/docs/proto3#json)). Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.
	// +kubebuilder:validation:Optional
	executionTimeout?: null | string @go(ExecutionTimeout,*string)
}

#JobsObservation: {
	// Optional. Job is a Hadoop job.
	hadoopJob?: [...#HadoopJobObservation] @go(HadoopJob,[]HadoopJobObservation)

	// Optional. Job is a Hive job.
	hiveJob?: [...#HiveJobObservation] @go(HiveJob,[]HiveJobObservation)

	// Optional. The labels to associate with this job. Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: {0,63} No more than 32 labels can be associated with a given job.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Optional. Job is a Pig job.
	pigJob?: [...#PigJobObservation] @go(PigJob,[]PigJobObservation)

	// Optional. The optional list of prerequisite job step_ids. If not specified, the job will start at the beginning of workflow.
	prerequisiteStepIds?: [...null | string] @go(PrerequisiteStepIds,[]*string)

	// Optional. Job is a Presto job.
	prestoJob?: [...#PrestoJobObservation] @go(PrestoJob,[]PrestoJobObservation)

	// Optional. Job is a PySpark job.
	pysparkJob?: [...#PysparkJobObservation] @go(PysparkJob,[]PysparkJobObservation)

	// Optional. Job scheduling configuration.
	scheduling?: [...#JobsSchedulingObservation] @go(Scheduling,[]JobsSchedulingObservation)

	// Optional. Job is a Spark job.
	sparkJob?: [...#SparkJobObservation] @go(SparkJob,[]SparkJobObservation)

	// Optional. Job is a SparkR job.
	sparkRJob?: [...#SparkRJobObservation] @go(SparkRJob,[]SparkRJobObservation)

	// Optional. Job is a SparkSql job.
	sparkSqlJob?: [...#SparkSQLJobObservation] @go(SparkSQLJob,[]SparkSQLJobObservation)

	// Required. The step id. The id must be unique among all jobs within the template. The step id is used as prefix for job id, as job goog-dataproc-workflow-step-id label, and in field from other steps. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
	stepId?: null | string @go(StepID,*string)
}

#JobsParameters: {
	// Optional. Job is a Hadoop job.
	// +kubebuilder:validation:Optional
	hadoopJob?: [...#HadoopJobParameters] @go(HadoopJob,[]HadoopJobParameters)

	// Optional. Job is a Hive job.
	// +kubebuilder:validation:Optional
	hiveJob?: [...#HiveJobParameters] @go(HiveJob,[]HiveJobParameters)

	// Optional. The labels to associate with this job. Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: {0,63} No more than 32 labels can be associated with a given job.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Optional. Job is a Pig job.
	// +kubebuilder:validation:Optional
	pigJob?: [...#PigJobParameters] @go(PigJob,[]PigJobParameters)

	// Optional. The optional list of prerequisite job step_ids. If not specified, the job will start at the beginning of workflow.
	// +kubebuilder:validation:Optional
	prerequisiteStepIds?: [...null | string] @go(PrerequisiteStepIds,[]*string)

	// Optional. Job is a Presto job.
	// +kubebuilder:validation:Optional
	prestoJob?: [...#PrestoJobParameters] @go(PrestoJob,[]PrestoJobParameters)

	// Optional. Job is a PySpark job.
	// +kubebuilder:validation:Optional
	pysparkJob?: [...#PysparkJobParameters] @go(PysparkJob,[]PysparkJobParameters)

	// Optional. Job scheduling configuration.
	// +kubebuilder:validation:Optional
	scheduling?: [...#JobsSchedulingParameters] @go(Scheduling,[]JobsSchedulingParameters)

	// Optional. Job is a Spark job.
	// +kubebuilder:validation:Optional
	sparkJob?: [...#SparkJobParameters] @go(SparkJob,[]SparkJobParameters)

	// Optional. Job is a SparkR job.
	// +kubebuilder:validation:Optional
	sparkRJob?: [...#SparkRJobParameters] @go(SparkRJob,[]SparkRJobParameters)

	// Optional. Job is a SparkSql job.
	// +kubebuilder:validation:Optional
	sparkSqlJob?: [...#SparkSQLJobParameters] @go(SparkSQLJob,[]SparkSQLJobParameters)

	// Required. The step id. The id must be unique among all jobs within the template. The step id is used as prefix for job id, as job goog-dataproc-workflow-step-id label, and in field from other steps. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.
	// +kubebuilder:validation:Required
	stepId?: null | string @go(StepID,*string)
}

#JobsSchedulingObservation: {
	// Optional. Maximum number of times per hour a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. A job may be reported as thrashing if driver exits with non-zero code 4 times within 10 minute window. Maximum value is 10.
	maxFailuresPerHour?: null | float64 @go(MaxFailuresPerHour,*float64)

	// Optional. Maximum number of times in total a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. Maximum value is 240
	maxFailuresTotal?: null | float64 @go(MaxFailuresTotal,*float64)
}

#JobsSchedulingParameters: {
	// Optional. Maximum number of times per hour a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. A job may be reported as thrashing if driver exits with non-zero code 4 times within 10 minute window. Maximum value is 10.
	// +kubebuilder:validation:Optional
	maxFailuresPerHour?: null | float64 @go(MaxFailuresPerHour,*float64)

	// Optional. Maximum number of times in total a driver may be restarted as a result of driver exiting with non-zero code before job is reported failed. Maximum value is 240
	// +kubebuilder:validation:Optional
	maxFailuresTotal?: null | float64 @go(MaxFailuresTotal,*float64)
}

#ManagedClusterConfigObservation: {
	// Optional. Autoscaling config for the policy associated with the cluster. Cluster does not autoscale if this field is unset.
	autoscalingConfig?: [...#ConfigAutoscalingConfigObservation] @go(AutoscalingConfig,[]ConfigAutoscalingConfigObservation)

	// Optional. Encryption settings for the cluster.
	encryptionConfig?: [...#ConfigEncryptionConfigObservation] @go(EncryptionConfig,[]ConfigEncryptionConfigObservation)

	// Optional. Port/endpoint configuration for this cluster
	endpointConfig?: [...#ConfigEndpointConfigObservation] @go(EndpointConfig,[]ConfigEndpointConfigObservation)

	// Optional. The shared Compute Engine config settings for all instances in a cluster.
	gceClusterConfig?: [...#ConfigGceClusterConfigObservation] @go(GceClusterConfig,[]ConfigGceClusterConfigObservation)

	// Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if ; then ... master specific actions ... else ... worker specific actions ... fi
	initializationActions?: [...#InitializationActionsObservation] @go(InitializationActions,[]InitializationActionsObservation)

	// Optional. Lifecycle setting for the cluster.
	lifecycleConfig?: [...#ConfigLifecycleConfigObservation] @go(LifecycleConfig,[]ConfigLifecycleConfigObservation)

	// Optional. The Compute Engine config settings for additional worker instances in a cluster.
	masterConfig?: [...#ConfigMasterConfigObservation] @go(MasterConfig,[]ConfigMasterConfigObservation)

	// Optional. The Compute Engine config settings for additional worker instances in a cluster.
	secondaryWorkerConfig?: [...#ConfigSecondaryWorkerConfigObservation] @go(SecondaryWorkerConfig,[]ConfigSecondaryWorkerConfigObservation)

	// Optional. Security settings for the cluster.
	securityConfig?: [...#ConfigSecurityConfigObservation] @go(SecurityConfig,[]ConfigSecurityConfigObservation)

	// Optional. The config settings for software inside the cluster.
	softwareConfig?: [...#ConfigSoftwareConfigObservation] @go(SoftwareConfig,[]ConfigSoftwareConfigObservation)

	// Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)).
	stagingBucket?: null | string @go(StagingBucket,*string)

	// Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket.
	tempBucket?: null | string @go(TempBucket,*string)

	// Optional. The Compute Engine config settings for additional worker instances in a cluster.
	workerConfig?: [...#ConfigWorkerConfigObservation] @go(WorkerConfig,[]ConfigWorkerConfigObservation)
}

#ManagedClusterConfigParameters: {
	// Optional. Autoscaling config for the policy associated with the cluster. Cluster does not autoscale if this field is unset.
	// +kubebuilder:validation:Optional
	autoscalingConfig?: [...#ConfigAutoscalingConfigParameters] @go(AutoscalingConfig,[]ConfigAutoscalingConfigParameters)

	// Optional. Encryption settings for the cluster.
	// +kubebuilder:validation:Optional
	encryptionConfig?: [...#ConfigEncryptionConfigParameters] @go(EncryptionConfig,[]ConfigEncryptionConfigParameters)

	// Optional. Port/endpoint configuration for this cluster
	// +kubebuilder:validation:Optional
	endpointConfig?: [...#ConfigEndpointConfigParameters] @go(EndpointConfig,[]ConfigEndpointConfigParameters)

	// Optional. The shared Compute Engine config settings for all instances in a cluster.
	// +kubebuilder:validation:Optional
	gceClusterConfig?: [...#ConfigGceClusterConfigParameters] @go(GceClusterConfig,[]ConfigGceClusterConfigParameters)

	// Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if ; then ... master specific actions ... else ... worker specific actions ... fi
	// +kubebuilder:validation:Optional
	initializationActions?: [...#InitializationActionsParameters] @go(InitializationActions,[]InitializationActionsParameters)

	// Optional. Lifecycle setting for the cluster.
	// +kubebuilder:validation:Optional
	lifecycleConfig?: [...#ConfigLifecycleConfigParameters] @go(LifecycleConfig,[]ConfigLifecycleConfigParameters)

	// Optional. The Compute Engine config settings for additional worker instances in a cluster.
	// +kubebuilder:validation:Optional
	masterConfig?: [...#ConfigMasterConfigParameters] @go(MasterConfig,[]ConfigMasterConfigParameters)

	// Optional. The Compute Engine config settings for additional worker instances in a cluster.
	// +kubebuilder:validation:Optional
	secondaryWorkerConfig?: [...#ConfigSecondaryWorkerConfigParameters] @go(SecondaryWorkerConfig,[]ConfigSecondaryWorkerConfigParameters)

	// Optional. Security settings for the cluster.
	// +kubebuilder:validation:Optional
	securityConfig?: [...#ConfigSecurityConfigParameters] @go(SecurityConfig,[]ConfigSecurityConfigParameters)

	// Optional. The config settings for software inside the cluster.
	// +kubebuilder:validation:Optional
	softwareConfig?: [...#ConfigSoftwareConfigParameters] @go(SoftwareConfig,[]ConfigSoftwareConfigParameters)

	// Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)).
	// +kubebuilder:validation:Optional
	stagingBucket?: null | string @go(StagingBucket,*string)

	// Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket.
	// +kubebuilder:validation:Optional
	tempBucket?: null | string @go(TempBucket,*string)

	// Optional. The Compute Engine config settings for additional worker instances in a cluster.
	// +kubebuilder:validation:Optional
	workerConfig?: [...#ConfigWorkerConfigParameters] @go(WorkerConfig,[]ConfigWorkerConfigParameters)
}

#ManagedClusterObservation: {
	// Required. The cluster name prefix. A unique cluster name will be formed by appending a random suffix. The name must contain only lower-case letters (a-z), numbers (0-9), and hyphens (-). Must begin with a letter. Cannot begin or end with hyphen. Must consist of between 2 and 35 characters.
	clusterName?: null | string @go(ClusterName,*string)

	// Required. The cluster configuration.
	config?: [...#ManagedClusterConfigObservation] @go(Config,[]ManagedClusterConfigObservation)

	// Optional. The labels to associate with this cluster. Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: {0,63} No more than 32 labels can be associated with a given cluster.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)
}

#ManagedClusterParameters: {
	// Required. The cluster name prefix. A unique cluster name will be formed by appending a random suffix. The name must contain only lower-case letters (a-z), numbers (0-9), and hyphens (-). Must begin with a letter. Cannot begin or end with hyphen. Must consist of between 2 and 35 characters.
	// +kubebuilder:validation:Required
	clusterName?: null | string @go(ClusterName,*string)

	// Required. The cluster configuration.
	// +kubebuilder:validation:Required
	config: [...#ManagedClusterConfigParameters] @go(Config,[]ManagedClusterConfigParameters)

	// Optional. The labels to associate with this cluster. Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: {0,63} No more than 32 labels can be associated with a given cluster.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)
}

#ManagedGroupConfigObservation: {
	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	instanceGroupManagerName?: null | string @go(InstanceGroupManagerName,*string)

	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	instanceTemplateName?: null | string @go(InstanceTemplateName,*string)
}

#ManagedGroupConfigParameters: {
}

#MasterConfigAcceleratorsObservation: {
	// The number of the accelerator cards of this type exposed to this instance.
	acceleratorCount?: null | float64 @go(AcceleratorCount,*float64)

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	acceleratorType?: null | string @go(AcceleratorType,*string)
}

#MasterConfigAcceleratorsParameters: {
	// The number of the accelerator cards of this type exposed to this instance.
	// +kubebuilder:validation:Optional
	acceleratorCount?: null | float64 @go(AcceleratorCount,*float64)

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	// +kubebuilder:validation:Optional
	acceleratorType?: null | string @go(AcceleratorType,*string)
}

#MasterConfigDiskConfigObservation: {
	// Optional. Size in GB of the boot disk (default is 500GB).
	bootDiskSizeGb?: null | float64 @go(BootDiskSizeGb,*float64)

	// Optional. Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	bootDiskType?: null | string @go(BootDiskType,*string)

	// Optional. Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	numLocalSsds?: null | float64 @go(NumLocalSsds,*float64)
}

#MasterConfigDiskConfigParameters: {
	// Optional. Size in GB of the boot disk (default is 500GB).
	// +kubebuilder:validation:Optional
	bootDiskSizeGb?: null | float64 @go(BootDiskSizeGb,*float64)

	// Optional. Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	// +kubebuilder:validation:Optional
	bootDiskType?: null | string @go(BootDiskType,*string)

	// Optional. Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	// +kubebuilder:validation:Optional
	numLocalSsds?: null | float64 @go(NumLocalSsds,*float64)
}

#ParametersObservation: {
	// Optional. Brief description of the parameter. Must not exceed 1024 characters.
	description?: null | string @go(Description,*string)

	// Required. Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter's list of field paths. A field path is similar in syntax to a .sparkJob.args
	fields?: [...null | string] @go(Fields,[]*string)

	// Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.
	name?: null | string @go(Name,*string)

	// Optional. Validation rules to be applied to this parameter's value.
	validation?: [...#ValidationObservation] @go(Validation,[]ValidationObservation)
}

#ParametersParameters: {
	// Optional. Brief description of the parameter. Must not exceed 1024 characters.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Required. Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter's list of field paths. A field path is similar in syntax to a .sparkJob.args
	// +kubebuilder:validation:Required
	fields: [...null | string] @go(Fields,[]*string)

	// Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Optional. Validation rules to be applied to this parameter's value.
	// +kubebuilder:validation:Optional
	validation?: [...#ValidationParameters] @go(Validation,[]ValidationParameters)
}

#PigJobLoggingConfigObservation: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#PigJobLoggingConfigParameters: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#PigJobObservation: {
	// Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	continueOnFailure?: null | bool @go(ContinueOnFailure,*bool)

	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. The runtime log config for job execution.
	loggingConfig?: [...#PigJobLoggingConfigObservation] @go(LoggingConfig,[]PigJobLoggingConfigObservation)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// The HCFS URI of the script that contains SQL queries.
	queryFileUri?: null | string @go(QueryFileURI,*string)

	// A list of queries.
	queryList?: [...#PigJobQueryListObservation] @go(QueryList,[]PigJobQueryListObservation)

	// Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	scriptVariables?: {[string]: null | string} @go(ScriptVariables,map[string]*string)
}

#PigJobParameters: {
	// Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	// +kubebuilder:validation:Optional
	continueOnFailure?: null | bool @go(ContinueOnFailure,*bool)

	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	loggingConfig?: [...#PigJobLoggingConfigParameters] @go(LoggingConfig,[]PigJobLoggingConfigParameters)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// The HCFS URI of the script that contains SQL queries.
	// +kubebuilder:validation:Optional
	queryFileUri?: null | string @go(QueryFileURI,*string)

	// A list of queries.
	// +kubebuilder:validation:Optional
	queryList?: [...#PigJobQueryListParameters] @go(QueryList,[]PigJobQueryListParameters)

	// Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +kubebuilder:validation:Optional
	scriptVariables?: {[string]: null | string} @go(ScriptVariables,map[string]*string)
}

#PigJobQueryListObservation: {
	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	queries?: [...null | string] @go(Queries,[]*string)
}

#PigJobQueryListParameters: {
	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	// +kubebuilder:validation:Required
	queries: [...null | string] @go(Queries,[]*string)
}

#PrestoJobLoggingConfigObservation: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#PrestoJobLoggingConfigParameters: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#PrestoJobObservation: {
	// Optional. Presto client tags to attach to this query
	clientTags?: [...null | string] @go(ClientTags,[]*string)

	// Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	continueOnFailure?: null | bool @go(ContinueOnFailure,*bool)

	// Optional. The runtime log config for job execution.
	loggingConfig?: [...#PrestoJobLoggingConfigObservation] @go(LoggingConfig,[]PrestoJobLoggingConfigObservation)

	// Optional. The format in which query output will be displayed. See the Presto documentation for supported output formats
	outputFormat?: null | string @go(OutputFormat,*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// The HCFS URI of the script that contains SQL queries.
	queryFileUri?: null | string @go(QueryFileURI,*string)

	// A list of queries.
	queryList?: [...#PrestoJobQueryListObservation] @go(QueryList,[]PrestoJobQueryListObservation)
}

#PrestoJobParameters: {
	// Optional. Presto client tags to attach to this query
	// +kubebuilder:validation:Optional
	clientTags?: [...null | string] @go(ClientTags,[]*string)

	// Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
	// +kubebuilder:validation:Optional
	continueOnFailure?: null | bool @go(ContinueOnFailure,*bool)

	// Optional. The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	loggingConfig?: [...#PrestoJobLoggingConfigParameters] @go(LoggingConfig,[]PrestoJobLoggingConfigParameters)

	// Optional. The format in which query output will be displayed. See the Presto documentation for supported output formats
	// +kubebuilder:validation:Optional
	outputFormat?: null | string @go(OutputFormat,*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// The HCFS URI of the script that contains SQL queries.
	// +kubebuilder:validation:Optional
	queryFileUri?: null | string @go(QueryFileURI,*string)

	// A list of queries.
	// +kubebuilder:validation:Optional
	queryList?: [...#PrestoJobQueryListParameters] @go(QueryList,[]PrestoJobQueryListParameters)
}

#PrestoJobQueryListObservation: {
	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	queries?: [...null | string] @go(Queries,[]*string)
}

#PrestoJobQueryListParameters: {
	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	// +kubebuilder:validation:Required
	queries: [...null | string] @go(Queries,[]*string)
}

#PysparkJobLoggingConfigObservation: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#PysparkJobLoggingConfigParameters: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#PysparkJobObservation: {
	// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	archiveUris?: [...null | string] @go(ArchiveUris,[]*string)

	// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	args?: [...null | string] @go(Args,[]*string)

	// Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	fileUris?: [...null | string] @go(FileUris,[]*string)

	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. The runtime log config for job execution.
	loggingConfig?: [...#PysparkJobLoggingConfigObservation] @go(LoggingConfig,[]PysparkJobLoggingConfigObservation)

	// Required. The HCFS URI of the main Python file to use as the driver. Must be a .py file.
	mainPythonFileUri?: null | string @go(MainPythonFileURI,*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// Optional. HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
	pythonFileUris?: [...null | string] @go(PythonFileUris,[]*string)
}

#PysparkJobParameters: {
	// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	// +kubebuilder:validation:Optional
	archiveUris?: [...null | string] @go(ArchiveUris,[]*string)

	// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	// +kubebuilder:validation:Optional
	args?: [...null | string] @go(Args,[]*string)

	// Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	// +kubebuilder:validation:Optional
	fileUris?: [...null | string] @go(FileUris,[]*string)

	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	loggingConfig?: [...#PysparkJobLoggingConfigParameters] @go(LoggingConfig,[]PysparkJobLoggingConfigParameters)

	// Required. The HCFS URI of the main Python file to use as the driver. Must be a .py file.
	// +kubebuilder:validation:Required
	mainPythonFileUri?: null | string @go(MainPythonFileURI,*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// Optional. HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
	// +kubebuilder:validation:Optional
	pythonFileUris?: [...null | string] @go(PythonFileUris,[]*string)
}

#QueryListObservation: {
	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	queries?: [...null | string] @go(Queries,[]*string)
}

#QueryListParameters: {
	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	// +kubebuilder:validation:Required
	queries: [...null | string] @go(Queries,[]*string)
}

#RegexObservation: {
	// Required. RE2 regular expressions used to validate the parameter's value. The value must match the regex in its entirety (substring matches are not sufficient).
	regexes?: [...null | string] @go(Regexes,[]*string)
}

#RegexParameters: {
	// Required. RE2 regular expressions used to validate the parameter's value. The value must match the regex in its entirety (substring matches are not sufficient).
	// +kubebuilder:validation:Required
	regexes: [...null | string] @go(Regexes,[]*string)
}

#SecondaryWorkerConfigAcceleratorsObservation: {
	// The number of the accelerator cards of this type exposed to this instance.
	acceleratorCount?: null | float64 @go(AcceleratorCount,*float64)

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	acceleratorType?: null | string @go(AcceleratorType,*string)
}

#SecondaryWorkerConfigAcceleratorsParameters: {
	// The number of the accelerator cards of this type exposed to this instance.
	// +kubebuilder:validation:Optional
	acceleratorCount?: null | float64 @go(AcceleratorCount,*float64)

	// Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, nvidia-tesla-k80.
	// +kubebuilder:validation:Optional
	acceleratorType?: null | string @go(AcceleratorType,*string)
}

#SecondaryWorkerConfigDiskConfigObservation: {
	// Optional. Size in GB of the boot disk (default is 500GB).
	bootDiskSizeGb?: null | float64 @go(BootDiskSizeGb,*float64)

	// Optional. Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	bootDiskType?: null | string @go(BootDiskType,*string)

	// Optional. Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	numLocalSsds?: null | float64 @go(NumLocalSsds,*float64)
}

#SecondaryWorkerConfigDiskConfigParameters: {
	// Optional. Size in GB of the boot disk (default is 500GB).
	// +kubebuilder:validation:Optional
	bootDiskSizeGb?: null | float64 @go(BootDiskSizeGb,*float64)

	// Optional. Type of the boot disk (default is "pd-standard"). Valid values: "pd-ssd" (Persistent Disk Solid State Drive) or "pd-standard" (Persistent Disk Hard Disk Drive).
	// +kubebuilder:validation:Optional
	bootDiskType?: null | string @go(BootDiskType,*string)

	// Optional. Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and (https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.
	// +kubebuilder:validation:Optional
	numLocalSsds?: null | float64 @go(NumLocalSsds,*float64)
}

#SecondaryWorkerConfigManagedGroupConfigObservation: {
	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	instanceGroupManagerName?: null | string @go(InstanceGroupManagerName,*string)

	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	instanceTemplateName?: null | string @go(InstanceTemplateName,*string)
}

#SecondaryWorkerConfigManagedGroupConfigParameters: {
}

#SecurityConfigKerberosConfigObservation: {
	// Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
	crossRealmTrustAdminServer?: null | string @go(CrossRealmTrustAdminServer,*string)

	// Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
	crossRealmTrustKdc?: null | string @go(CrossRealmTrustKdc,*string)

	// Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
	crossRealmTrustRealm?: null | string @go(CrossRealmTrustRealm,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
	crossRealmTrustSharedPassword?: null | string @go(CrossRealmTrustSharedPassword,*string)

	// Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
	enableKerberos?: null | bool @go(EnableKerberos,*bool)

	// Optional. The uri of the KMS key used to encrypt various sensitive files.
	kmsKey?: null | string @go(KMSKey,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
	kdcDbKey?: null | string @go(KdcDBKey,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
	keyPassword?: null | string @go(KeyPassword,*string)

	// Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	keystore?: null | string @go(Keystore,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
	keystorePassword?: null | string @go(KeystorePassword,*string)

	// Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
	realm?: null | string @go(Realm,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
	rootPrincipalPassword?: null | string @go(RootPrincipalPassword,*string)

	// Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
	tgtLifetimeHours?: null | float64 @go(TgtLifetimeHours,*float64)

	// Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	truststore?: null | string @go(Truststore,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
	truststorePassword?: null | string @go(TruststorePassword,*string)
}

#SecurityConfigKerberosConfigParameters: {
	// Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
	// +kubebuilder:validation:Optional
	crossRealmTrustAdminServer?: null | string @go(CrossRealmTrustAdminServer,*string)

	// Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
	// +kubebuilder:validation:Optional
	crossRealmTrustKdc?: null | string @go(CrossRealmTrustKdc,*string)

	// Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
	// +kubebuilder:validation:Optional
	crossRealmTrustRealm?: null | string @go(CrossRealmTrustRealm,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
	// +kubebuilder:validation:Optional
	crossRealmTrustSharedPassword?: null | string @go(CrossRealmTrustSharedPassword,*string)

	// Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
	// +kubebuilder:validation:Optional
	enableKerberos?: null | bool @go(EnableKerberos,*bool)

	// Optional. The uri of the KMS key used to encrypt various sensitive files.
	// +kubebuilder:validation:Optional
	kmsKey?: null | string @go(KMSKey,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
	// +kubebuilder:validation:Optional
	kdcDbKey?: null | string @go(KdcDBKey,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
	// +kubebuilder:validation:Optional
	keyPassword?: null | string @go(KeyPassword,*string)

	// Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	// +kubebuilder:validation:Optional
	keystore?: null | string @go(Keystore,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
	// +kubebuilder:validation:Optional
	keystorePassword?: null | string @go(KeystorePassword,*string)

	// Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
	// +kubebuilder:validation:Optional
	realm?: null | string @go(Realm,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
	// +kubebuilder:validation:Optional
	rootPrincipalPassword?: null | string @go(RootPrincipalPassword,*string)

	// Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
	// +kubebuilder:validation:Optional
	tgtLifetimeHours?: null | float64 @go(TgtLifetimeHours,*float64)

	// Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
	// +kubebuilder:validation:Optional
	truststore?: null | string @go(Truststore,*string)

	// Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
	// +kubebuilder:validation:Optional
	truststorePassword?: null | string @go(TruststorePassword,*string)
}

#SparkJobLoggingConfigObservation: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#SparkJobLoggingConfigParameters: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#SparkJobObservation: {
	// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	archiveUris?: [...null | string] @go(ArchiveUris,[]*string)

	// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	args?: [...null | string] @go(Args,[]*string)

	// Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	fileUris?: [...null | string] @go(FileUris,[]*string)

	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. The runtime log config for job execution.
	loggingConfig?: [...#SparkJobLoggingConfigObservation] @go(LoggingConfig,[]SparkJobLoggingConfigObservation)

	// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
	mainClass?: null | string @go(MainClass,*string)

	// The HCFS URI of the jar file that contains the main class.
	mainJarFileUri?: null | string @go(MainJarFileURI,*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)
}

#SparkJobParameters: {
	// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	// +kubebuilder:validation:Optional
	archiveUris?: [...null | string] @go(ArchiveUris,[]*string)

	// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	// +kubebuilder:validation:Optional
	args?: [...null | string] @go(Args,[]*string)

	// Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	// +kubebuilder:validation:Optional
	fileUris?: [...null | string] @go(FileUris,[]*string)

	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	loggingConfig?: [...#SparkJobLoggingConfigParameters] @go(LoggingConfig,[]SparkJobLoggingConfigParameters)

	// The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.
	// +kubebuilder:validation:Optional
	mainClass?: null | string @go(MainClass,*string)

	// The HCFS URI of the jar file that contains the main class.
	// +kubebuilder:validation:Optional
	mainJarFileUri?: null | string @go(MainJarFileURI,*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	properties?: {[string]: null | string} @go(Properties,map[string]*string)
}

#SparkRJobLoggingConfigObservation: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#SparkRJobLoggingConfigParameters: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#SparkRJobObservation: {
	// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	archiveUris?: [...null | string] @go(ArchiveUris,[]*string)

	// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	args?: [...null | string] @go(Args,[]*string)

	// Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	fileUris?: [...null | string] @go(FileUris,[]*string)

	// Optional. The runtime log config for job execution.
	loggingConfig?: [...#SparkRJobLoggingConfigObservation] @go(LoggingConfig,[]SparkRJobLoggingConfigObservation)

	// Required. The HCFS URI of the main R file to use as the driver. Must be a .R file.
	mainRFileUri?: null | string @go(MainRFileURI,*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)
}

#SparkRJobParameters: {
	// Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
	// +kubebuilder:validation:Optional
	archiveUris?: [...null | string] @go(ArchiveUris,[]*string)

	// Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.
	// +kubebuilder:validation:Optional
	args?: [...null | string] @go(Args,[]*string)

	// Optional. HCFS URIs of files to be placed in the working directory of each executor. Useful for naively parallel tasks.
	// +kubebuilder:validation:Optional
	fileUris?: [...null | string] @go(FileUris,[]*string)

	// Optional. The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	loggingConfig?: [...#SparkRJobLoggingConfigParameters] @go(LoggingConfig,[]SparkRJobLoggingConfigParameters)

	// Required. The HCFS URI of the main R file to use as the driver. Must be a .R file.
	// +kubebuilder:validation:Required
	mainRFileUri?: null | string @go(MainRFileURI,*string)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	properties?: {[string]: null | string} @go(Properties,map[string]*string)
}

#SparkSQLJobLoggingConfigObservation: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#SparkSQLJobLoggingConfigParameters: {
	// The per-package log levels for the driver. This may include "root" package name to configure rootLogger. Examples: 'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
	// +kubebuilder:validation:Optional
	driverLogLevels?: {[string]: null | string} @go(DriverLogLevels,map[string]*string)
}

#SparkSQLJobObservation: {
	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. The runtime log config for job execution.
	loggingConfig?: [...#SparkSQLJobLoggingConfigObservation] @go(LoggingConfig,[]SparkSQLJobLoggingConfigObservation)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// The HCFS URI of the script that contains SQL queries.
	queryFileUri?: null | string @go(QueryFileURI,*string)

	// A list of queries.
	queryList?: [...#SparkSQLJobQueryListObservation] @go(QueryList,[]SparkSQLJobQueryListObservation)

	// Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	scriptVariables?: {[string]: null | string} @go(ScriptVariables,map[string]*string)
}

#SparkSQLJobParameters: {
	// Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
	// +kubebuilder:validation:Optional
	jarFileUris?: [...null | string] @go(JarFileUris,[]*string)

	// Optional. The runtime log config for job execution.
	// +kubebuilder:validation:Optional
	loggingConfig?: [...#SparkSQLJobLoggingConfigParameters] @go(LoggingConfig,[]SparkSQLJobLoggingConfigParameters)

	// Optional. A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Dataproc API may be overwritten.
	// +kubebuilder:validation:Optional
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// The HCFS URI of the script that contains SQL queries.
	// +kubebuilder:validation:Optional
	queryFileUri?: null | string @go(QueryFileURI,*string)

	// A list of queries.
	// +kubebuilder:validation:Optional
	queryList?: [...#SparkSQLJobQueryListParameters] @go(QueryList,[]SparkSQLJobQueryListParameters)

	// Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name="value";).
	// +kubebuilder:validation:Optional
	scriptVariables?: {[string]: null | string} @go(ScriptVariables,map[string]*string)
}

#SparkSQLJobQueryListObservation: {
	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	queries?: [...null | string] @go(Queries,[]*string)
}

#SparkSQLJobQueryListParameters: {
	// Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: "hiveJob": { "queryList": { "queries": } }
	// +kubebuilder:validation:Required
	queries: [...null | string] @go(Queries,[]*string)
}

#ValidationObservation: {
	// Validation based on regular expressions.
	regex?: [...#RegexObservation] @go(Regex,[]RegexObservation)

	// Required. List of allowed values for the parameter.
	values?: [...#ValuesObservation] @go(Values,[]ValuesObservation)
}

#ValidationParameters: {
	// Validation based on regular expressions.
	// +kubebuilder:validation:Optional
	regex?: [...#RegexParameters] @go(Regex,[]RegexParameters)

	// Required. List of allowed values for the parameter.
	// +kubebuilder:validation:Optional
	values?: [...#ValuesParameters] @go(Values,[]ValuesParameters)
}

#ValuesObservation: {
	// Required. List of allowed values for the parameter.
	values?: [...null | string] @go(Values,[]*string)
}

#ValuesParameters: {
	// Required. List of allowed values for the parameter.
	// +kubebuilder:validation:Required
	values: [...null | string] @go(Values,[]*string)
}

#WorkerConfigManagedGroupConfigObservation: {
	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	instanceGroupManagerName?: null | string @go(InstanceGroupManagerName,*string)

	// Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. * For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} * For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
	instanceTemplateName?: null | string @go(InstanceTemplateName,*string)
}

#WorkerConfigManagedGroupConfigParameters: {
}

#WorkflowTemplateObservation: {
	// Output only. The time template was created.
	createTime?: null | string @go(CreateTime,*string)

	// (Beta only) Optional. Timeout duration for the DAG of jobs. You can use "s", "m", "h", and "d" suffixes for second, minute, hour, and day duration values, respectively. The timeout duration must be from 10 minutes ("10m") to 24 hours ("24h" or "1d"). The timer begins when the first job is submitted. If the workflow is running at the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running on a (/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the cluster is deleted.
	dagTimeout?: null | string @go(DagTimeout,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/workflowTemplates/{{name}}
	id?: null | string @go(ID,*string)

	// Required. The Directed Acyclic Graph of Jobs to submit.
	jobs?: [...#JobsObservation] @go(Jobs,[]JobsObservation)

	// Optional. The labels to associate with this cluster. Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: {0,63} No more than 32 labels can be associated with a given cluster.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The location for the resource
	location?: null | string @go(Location,*string)

	// Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided when the template is instantiated.
	parameters?: [...#ParametersObservation] @go(Parameters,[]ParametersObservation)

	// Required. WorkflowTemplate scheduling information.
	placement?: [...#WorkflowTemplatePlacementObservation] @go(Placement,[]WorkflowTemplatePlacementObservation)

	// The project for the resource
	project?: null | string @go(Project,*string)

	// Output only. The time template was last updated.
	updateTime?: null | string @go(UpdateTime,*string)

	// Optional. Used to perform a consistent read-modify-write. This field should be left blank for a CreateWorkflowTemplate request. It is required for an UpdateWorkflowTemplate request, and must match the current server version. A typical update template flow would fetch the current template with a GetWorkflowTemplate request, which will return the current template with the version field filled in with the current server version. The user updates other fields in the template, then returns it as part of the UpdateWorkflowTemplate request.
	version?: null | float64 @go(Version,*float64)
}

#WorkflowTemplateParameters: {
	// (Beta only) Optional. Timeout duration for the DAG of jobs. You can use "s", "m", "h", and "d" suffixes for second, minute, hour, and day duration values, respectively. The timeout duration must be from 10 minutes ("10m") to 24 hours ("24h" or "1d"). The timer begins when the first job is submitted. If the workflow is running at the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running on a (/dataproc/docs/concepts/workflows/using-workflows#configuring_or_selecting_a_cluster), the cluster is deleted.
	// +kubebuilder:validation:Optional
	dagTimeout?: null | string @go(DagTimeout,*string)

	// Required. The Directed Acyclic Graph of Jobs to submit.
	// +kubebuilder:validation:Optional
	jobs?: [...#JobsParameters] @go(Jobs,[]JobsParameters)

	// Optional. The labels to associate with this cluster. Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: {0,63} No more than 32 labels can be associated with a given cluster.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The location for the resource
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided when the template is instantiated.
	// +kubebuilder:validation:Optional
	parameters?: [...#ParametersParameters] @go(Parameters,[]ParametersParameters)

	// Required. WorkflowTemplate scheduling information.
	// +kubebuilder:validation:Optional
	placement?: [...#WorkflowTemplatePlacementParameters] @go(Placement,[]WorkflowTemplatePlacementParameters)

	// The project for the resource
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Optional. Used to perform a consistent read-modify-write. This field should be left blank for a CreateWorkflowTemplate request. It is required for an UpdateWorkflowTemplate request, and must match the current server version. A typical update template flow would fetch the current template with a GetWorkflowTemplate request, which will return the current template with the version field filled in with the current server version. The user updates other fields in the template, then returns it as part of the UpdateWorkflowTemplate request.
	// +kubebuilder:validation:Optional
	version?: null | float64 @go(Version,*float64)
}

#WorkflowTemplatePlacementObservation: {
	// Optional. A selector that chooses target cluster for jobs based on metadata. The selector is evaluated at the time each job is submitted.
	clusterSelector?: [...#ClusterSelectorObservation] @go(ClusterSelector,[]ClusterSelectorObservation)

	// A cluster that is managed by the workflow.
	managedCluster?: [...#ManagedClusterObservation] @go(ManagedCluster,[]ManagedClusterObservation)
}

#WorkflowTemplatePlacementParameters: {
	// Optional. A selector that chooses target cluster for jobs based on metadata. The selector is evaluated at the time each job is submitted.
	// +kubebuilder:validation:Optional
	clusterSelector?: [...#ClusterSelectorParameters] @go(ClusterSelector,[]ClusterSelectorParameters)

	// A cluster that is managed by the workflow.
	// +kubebuilder:validation:Optional
	managedCluster?: [...#ManagedClusterParameters] @go(ManagedCluster,[]ManagedClusterParameters)
}

// WorkflowTemplateSpec defines the desired state of WorkflowTemplate
#WorkflowTemplateSpec: {
	forProvider: #WorkflowTemplateParameters @go(ForProvider)
}

// WorkflowTemplateStatus defines the observed state of WorkflowTemplate.
#WorkflowTemplateStatus: {
	atProvider?: #WorkflowTemplateObservation @go(AtProvider)
}

// WorkflowTemplate is the Schema for the WorkflowTemplates API. A Workflow Template is a reusable workflow configuration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#WorkflowTemplate: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.jobs)",message="jobs is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.placement)",message="placement is a required parameter"
	spec:    #WorkflowTemplateSpec   @go(Spec)
	status?: #WorkflowTemplateStatus @go(Status)
}

// WorkflowTemplateList contains a list of WorkflowTemplates
#WorkflowTemplateList: {
	items: [...#WorkflowTemplate] @go(Items,[]WorkflowTemplate)
}
