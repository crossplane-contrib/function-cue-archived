// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1

package v1beta1

#ProjectUsageExportBucketInitParameters: {
	// :  A prefix for the reports, for instance, the project name.
	prefix?: null | string @go(Prefix,*string)
}

#ProjectUsageExportBucketObservation: {
	// :  The bucket to store reports in.
	bucketName?: null | string @go(BucketName,*string)
	id?:         null | string @go(ID,*string)

	// :  A prefix for the reports, for instance, the project name.
	prefix?: null | string @go(Prefix,*string)

	// :  The project to set the export bucket on. If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#ProjectUsageExportBucketParameters: {
	// :  The bucket to store reports in.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/storage/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// :  A prefix for the reports, for instance, the project name.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)

	// :  The project to set the export bucket on. If it is not provided, the provider project is used.
	// +crossplane:generate:reference:type=Project
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// ProjectUsageExportBucketSpec defines the desired state of ProjectUsageExportBucket
#ProjectUsageExportBucketSpec: {
	forProvider: #ProjectUsageExportBucketParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ProjectUsageExportBucketInitParameters @go(InitProvider)
}

// ProjectUsageExportBucketStatus defines the observed state of ProjectUsageExportBucket.
#ProjectUsageExportBucketStatus: {
	atProvider?: #ProjectUsageExportBucketObservation @go(AtProvider)
}

// ProjectUsageExportBucket is the Schema for the ProjectUsageExportBuckets API. Manages a project's usage export bucket.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#ProjectUsageExportBucket: {
	spec:    #ProjectUsageExportBucketSpec   @go(Spec)
	status?: #ProjectUsageExportBucketStatus @go(Status)
}

// ProjectUsageExportBucketList contains a list of ProjectUsageExportBuckets
#ProjectUsageExportBucketList: {
	items: [...#ProjectUsageExportBucket] @go(Items,[]ProjectUsageExportBucket)
}
