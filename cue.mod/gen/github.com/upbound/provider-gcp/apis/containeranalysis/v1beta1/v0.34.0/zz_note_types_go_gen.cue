// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/containeranalysis/v1beta1

package v1beta1

#AttestationAuthorityObservation: {
	// This submessage provides human-readable hints about the purpose of
	// the AttestationAuthority. Because the name of a Note acts as its
	// resource reference, it is important to disambiguate the canonical
	// name of the Note (which might be a UUID for security purposes)
	// from "readable" names more suitable for debug output. Note that
	// these hints should NOT be used to look up AttestationAuthorities
	// in security sensitive contexts, such as when looking up
	// Attestations to verify.
	// Structure is documented below.
	hint?: [...#HintObservation] @go(Hint,[]HintObservation)
}

#AttestationAuthorityParameters: {
	// This submessage provides human-readable hints about the purpose of
	// the AttestationAuthority. Because the name of a Note acts as its
	// resource reference, it is important to disambiguate the canonical
	// name of the Note (which might be a UUID for security purposes)
	// from "readable" names more suitable for debug output. Note that
	// these hints should NOT be used to look up AttestationAuthorities
	// in security sensitive contexts, such as when looking up
	// Attestations to verify.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	hint: [...#HintParameters] @go(Hint,[]HintParameters)
}

#HintObservation: {
	// The human readable name of this Attestation Authority, for
	// example "qa".
	humanReadableName?: null | string @go(HumanReadableName,*string)
}

#HintParameters: {
	// The human readable name of this Attestation Authority, for
	// example "qa".
	// +kubebuilder:validation:Required
	humanReadableName?: null | string @go(HumanReadableName,*string)
}

#NoteObservation: {
	// Note kind that represents a logical attestation "role" or "authority".
	// For example, an organization might have one AttestationAuthority for
	// "QA" and one for "build". This Note is intended to act strictly as a
	// grouping mechanism for the attached Occurrences (Attestations). This
	// grouping mechanism also provides a security boundary, since IAM ACLs
	// gate the ability for a principle to attach an Occurrence to a given
	// Note. It also provides a single point of lookup to find all attached
	// Attestation Occurrences, even if they don't all live in the same
	// project.
	// Structure is documented below.
	attestationAuthority?: [...#AttestationAuthorityObservation] @go(AttestationAuthority,[]AttestationAuthorityObservation)

	// The time this note was created.
	createTime?: null | string @go(CreateTime,*string)

	// Time of expiration for this note. Leave empty if note does not expire.
	expirationTime?: null | string @go(ExpirationTime,*string)

	// an identifier for the resource with format projects/{{project}}/notes/{{name}}
	id?: null | string @go(ID,*string)

	// The type of analysis this note describes
	kind?: null | string @go(Kind,*string)

	// A detailed description of the note
	longDescription?: null | string @go(LongDescription,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Names of other notes related to this note.
	relatedNoteNames?: [...null | string] @go(RelatedNoteNames,[]*string)

	// URLs associated with this note and related metadata.
	// Structure is documented below.
	relatedUrl?: [...#RelatedURLObservation] @go(RelatedURL,[]RelatedURLObservation)

	// A one sentence description of the note.
	shortDescription?: null | string @go(ShortDescription,*string)

	// The time this note was last updated.
	updateTime?: null | string @go(UpdateTime,*string)
}

#NoteParameters: {
	// Note kind that represents a logical attestation "role" or "authority".
	// For example, an organization might have one AttestationAuthority for
	// "QA" and one for "build". This Note is intended to act strictly as a
	// grouping mechanism for the attached Occurrences (Attestations). This
	// grouping mechanism also provides a security boundary, since IAM ACLs
	// gate the ability for a principle to attach an Occurrence to a given
	// Note. It also provides a single point of lookup to find all attached
	// Attestation Occurrences, even if they don't all live in the same
	// project.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	attestationAuthority?: [...#AttestationAuthorityParameters] @go(AttestationAuthority,[]AttestationAuthorityParameters)

	// Time of expiration for this note. Leave empty if note does not expire.
	// +kubebuilder:validation:Optional
	expirationTime?: null | string @go(ExpirationTime,*string)

	// A detailed description of the note
	// +kubebuilder:validation:Optional
	longDescription?: null | string @go(LongDescription,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Names of other notes related to this note.
	// +kubebuilder:validation:Optional
	relatedNoteNames?: [...null | string] @go(RelatedNoteNames,[]*string)

	// URLs associated with this note and related metadata.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	relatedUrl?: [...#RelatedURLParameters] @go(RelatedURL,[]RelatedURLParameters)

	// A one sentence description of the note.
	// +kubebuilder:validation:Optional
	shortDescription?: null | string @go(ShortDescription,*string)
}

#RelatedURLObservation: {
	// Label to describe usage of the URL
	label?: null | string @go(Label,*string)

	// Specific URL associated with the resource.
	url?: null | string @go(URL,*string)
}

#RelatedURLParameters: {
	// Label to describe usage of the URL
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// Specific URL associated with the resource.
	// +kubebuilder:validation:Required
	url?: null | string @go(URL,*string)
}

// NoteSpec defines the desired state of Note
#NoteSpec: {
	forProvider: #NoteParameters @go(ForProvider)
}

// NoteStatus defines the observed state of Note.
#NoteStatus: {
	atProvider?: #NoteObservation @go(AtProvider)
}

// Note is the Schema for the Notes API. A Container Analysis note is a high-level piece of metadata that describes a type of analysis that can be done for a resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Note: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.attestationAuthority)",message="attestationAuthority is a required parameter"
	spec:    #NoteSpec   @go(Spec)
	status?: #NoteStatus @go(Status)
}

// NoteList contains a list of Notes
#NoteList: {
	items: [...#Note] @go(Items,[]Note)
}
