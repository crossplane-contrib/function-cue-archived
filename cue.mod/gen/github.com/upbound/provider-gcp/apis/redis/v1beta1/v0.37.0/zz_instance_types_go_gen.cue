// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/redis/v1beta1

package v1beta1

#InstanceInitParameters: {
	// Only applicable to STANDARD_HA tier which protects the instance
	// against zonal failures by provisioning it across two zones.
	// If provided, it must be a different zone from the one provided in
	// [locationId].
	alternativeLocationId?: null | string @go(AlternativeLocationID,*string)

	// Optional. Indicates whether OSS Redis AUTH is enabled for the
	// instance. If set to "true" AUTH is enabled on the instance.
	// Default value is "false" meaning AUTH is disabled.
	authEnabled?: null | bool @go(AuthEnabled,*bool)

	// The full name of the Google Compute Engine network to which the
	// instance is connected. If left unspecified, the default network
	// will be used.
	authorizedNetwork?: null | string @go(AuthorizedNetwork,*string)

	// The connection mode of the Redis instance.
	// Default value is DIRECT_PEERING.
	// Possible values are: DIRECT_PEERING, PRIVATE_SERVICE_ACCESS.
	connectMode?: null | string @go(ConnectMode,*string)

	// An arbitrary and optional user-provided name for the instance.
	displayName?: null | string @go(DisplayName,*string)

	// Resource labels to represent user provided metadata.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The zone where the instance will be provisioned. If not provided,
	// the service will choose a zone for the instance. For STANDARD_HA tier,
	// instances will be created across two zones for protection against
	// zonal failures. If [alternativeLocationId] is also provided, it must
	// be different from [locationId].
	locationId?: null | string @go(LocationID,*string)

	// Maintenance policy for an instance.
	// Structure is documented below.
	maintenancePolicy?: [...#MaintenancePolicyInitParameters] @go(MaintenancePolicy,[]MaintenancePolicyInitParameters)

	// Redis memory size in GiB.
	memorySizeGb?: null | float64 @go(MemorySizeGb,*float64)

	// Persistence configuration for an instance.
	// Structure is documented below.
	persistenceConfig?: [...#PersistenceConfigInitParameters] @go(PersistenceConfig,[]PersistenceConfigInitParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Optional. Read replica mode. Can only be specified when trying to create the instance.
	// If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
	readReplicasMode?: null | string @go(ReadReplicasMode,*string)

	// Redis configuration parameters, according to http://redis.io/topics/config.
	// Please check Memorystore documentation for the list of supported parameters:
	// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
	redisConfigs?: {[string]: null | string} @go(RedisConfigs,map[string]*string)

	// The version of Redis software. If not provided, latest supported
	// version will be used. Please check the API documentation linked
	// at the top for the latest valid values.
	redisVersion?: null | string @go(RedisVersion,*string)

	// Optional. The number of replica nodes. The valid range for the Standard Tier with
	// read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
	// for a Standard Tier instance, the only valid value is 1 and the default is 1.
	// The valid value for basic tier is 0 and the default is also 0.
	replicaCount?: null | float64 @go(ReplicaCount,*float64)

	// The CIDR range of internal addresses that are reserved for this
	// instance. If not provided, the service will choose an unused /29
	// block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
	// unique and non-overlapping with existing subnets in an authorized
	// network.
	reservedIpRange?: null | string @go(ReservedIPRange,*string)

	// Optional. Additional IP range for node placement. Required when enabling read replicas on
	// an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
	// "auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
	// range associated with the private service access connection, or "auto".
	secondaryIpRange?: null | string @go(SecondaryIPRange,*string)

	// The service tier of the instance. Must be one of these values:
	tier?: null | string @go(Tier,*string)

	// The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
	transitEncryptionMode?: null | string @go(TransitEncryptionMode,*string)
}

#InstanceObservation: {
	// Only applicable to STANDARD_HA tier which protects the instance
	// against zonal failures by provisioning it across two zones.
	// If provided, it must be a different zone from the one provided in
	// [locationId].
	alternativeLocationId?: null | string @go(AlternativeLocationID,*string)

	// Optional. Indicates whether OSS Redis AUTH is enabled for the
	// instance. If set to "true" AUTH is enabled on the instance.
	// Default value is "false" meaning AUTH is disabled.
	authEnabled?: null | bool @go(AuthEnabled,*bool)

	// The full name of the Google Compute Engine network to which the
	// instance is connected. If left unspecified, the default network
	// will be used.
	authorizedNetwork?: null | string @go(AuthorizedNetwork,*string)

	// The connection mode of the Redis instance.
	// Default value is DIRECT_PEERING.
	// Possible values are: DIRECT_PEERING, PRIVATE_SERVICE_ACCESS.
	connectMode?: null | string @go(ConnectMode,*string)

	// The time the instance was created in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds.
	createTime?: null | string @go(CreateTime,*string)

	// The current zone where the Redis endpoint is placed.
	// For Basic Tier instances, this will always be the same as the
	// [locationId] provided by the user at creation time. For Standard Tier
	// instances, this can be either [locationId] or [alternativeLocationId]
	// and can change after a failover event.
	currentLocationId?: null | string @go(CurrentLocationID,*string)

	// Optional. The KMS key reference that you want to use to encrypt the data at rest for this Redis
	// instance. If this is provided, CMEK is enabled.
	customerManagedKey?: null | string @go(CustomerManagedKey,*string)

	// An arbitrary and optional user-provided name for the instance.
	displayName?: null | string @go(DisplayName,*string)

	// Hostname or IP address of the exposed Redis endpoint used by clients
	// to connect to the service.
	host?: null | string @go(Host,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{region}}/instances/{{name}}
	id?: null | string @go(ID,*string)

	// Resource labels to represent user provided metadata.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The zone where the instance will be provisioned. If not provided,
	// the service will choose a zone for the instance. For STANDARD_HA tier,
	// instances will be created across two zones for protection against
	// zonal failures. If [alternativeLocationId] is also provided, it must
	// be different from [locationId].
	locationId?: null | string @go(LocationID,*string)

	// Maintenance policy for an instance.
	// Structure is documented below.
	maintenancePolicy?: [...#MaintenancePolicyObservation] @go(MaintenancePolicy,[]MaintenancePolicyObservation)

	// Upcoming maintenance schedule.
	// Structure is documented below.
	maintenanceSchedule?: [...#MaintenanceScheduleObservation] @go(MaintenanceSchedule,[]MaintenanceScheduleObservation)

	// Redis memory size in GiB.
	memorySizeGb?: null | float64 @go(MemorySizeGb,*float64)

	// Output only. Info per node.
	// Structure is documented below.
	nodes?: [...#NodesObservation] @go(Nodes,[]NodesObservation)

	// Persistence configuration for an instance.
	// Structure is documented below.
	persistenceConfig?: [...#PersistenceConfigObservation] @go(PersistenceConfig,[]PersistenceConfigObservation)

	// Output only. Cloud IAM identity used by import / export operations
	// to transfer data to/from Cloud Storage. Format is "serviceAccount:".
	// The value may change over time for a given instance so should be
	// checked before each import/export operation.
	persistenceIamIdentity?: null | string @go(PersistenceIAMIdentity,*string)

	// The port number of the exposed Redis endpoint.
	port?: null | float64 @go(Port,*float64)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Output only. Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only.
	// Targets all healthy replica nodes in instance. Replication is asynchronous and replica nodes
	// will exhibit some lag behind the primary. Write requests must target 'host'.
	readEndpoint?: null | string @go(ReadEndpoint,*string)

	// Output only. The port number of the exposed readonly redis endpoint. Standard tier only.
	// Write requests should target 'port'.
	readEndpointPort?: null | float64 @go(ReadEndpointPort,*float64)

	// Optional. Read replica mode. Can only be specified when trying to create the instance.
	// If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
	readReplicasMode?: null | string @go(ReadReplicasMode,*string)

	// Redis configuration parameters, according to http://redis.io/topics/config.
	// Please check Memorystore documentation for the list of supported parameters:
	// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
	redisConfigs?: {[string]: null | string} @go(RedisConfigs,map[string]*string)

	// The version of Redis software. If not provided, latest supported
	// version will be used. Please check the API documentation linked
	// at the top for the latest valid values.
	redisVersion?: null | string @go(RedisVersion,*string)

	// The name of the Redis region of the instance.
	region?: null | string @go(Region,*string)

	// Optional. The number of replica nodes. The valid range for the Standard Tier with
	// read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
	// for a Standard Tier instance, the only valid value is 1 and the default is 1.
	// The valid value for basic tier is 0 and the default is also 0.
	replicaCount?: null | float64 @go(ReplicaCount,*float64)

	// The CIDR range of internal addresses that are reserved for this
	// instance. If not provided, the service will choose an unused /29
	// block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
	// unique and non-overlapping with existing subnets in an authorized
	// network.
	reservedIpRange?: null | string @go(ReservedIPRange,*string)

	// Optional. Additional IP range for node placement. Required when enabling read replicas on
	// an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
	// "auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
	// range associated with the private service access connection, or "auto".
	secondaryIpRange?: null | string @go(SecondaryIPRange,*string)

	// List of server CA certificates for the instance.
	// Structure is documented below.
	serverCaCerts?: [...#ServerCACertsObservation] @go(ServerCACerts,[]ServerCACertsObservation)

	// The service tier of the instance. Must be one of these values:
	tier?: null | string @go(Tier,*string)

	// The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
	transitEncryptionMode?: null | string @go(TransitEncryptionMode,*string)
}

#InstanceParameters: {
	// Only applicable to STANDARD_HA tier which protects the instance
	// against zonal failures by provisioning it across two zones.
	// If provided, it must be a different zone from the one provided in
	// [locationId].
	// +kubebuilder:validation:Optional
	alternativeLocationId?: null | string @go(AlternativeLocationID,*string)

	// Optional. Indicates whether OSS Redis AUTH is enabled for the
	// instance. If set to "true" AUTH is enabled on the instance.
	// Default value is "false" meaning AUTH is disabled.
	// +kubebuilder:validation:Optional
	authEnabled?: null | bool @go(AuthEnabled,*bool)

	// The full name of the Google Compute Engine network to which the
	// instance is connected. If left unspecified, the default network
	// will be used.
	// +kubebuilder:validation:Optional
	authorizedNetwork?: null | string @go(AuthorizedNetwork,*string)

	// The connection mode of the Redis instance.
	// Default value is DIRECT_PEERING.
	// Possible values are: DIRECT_PEERING, PRIVATE_SERVICE_ACCESS.
	// +kubebuilder:validation:Optional
	connectMode?: null | string @go(ConnectMode,*string)

	// Optional. The KMS key reference that you want to use to encrypt the data at rest for this Redis
	// instance. If this is provided, CMEK is enabled.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/kms/v1beta1.CryptoKey
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	customerManagedKey?: null | string @go(CustomerManagedKey,*string)

	// An arbitrary and optional user-provided name for the instance.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// Resource labels to represent user provided metadata.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The zone where the instance will be provisioned. If not provided,
	// the service will choose a zone for the instance. For STANDARD_HA tier,
	// instances will be created across two zones for protection against
	// zonal failures. If [alternativeLocationId] is also provided, it must
	// be different from [locationId].
	// +kubebuilder:validation:Optional
	locationId?: null | string @go(LocationID,*string)

	// Maintenance policy for an instance.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	maintenancePolicy?: [...#MaintenancePolicyParameters] @go(MaintenancePolicy,[]MaintenancePolicyParameters)

	// Redis memory size in GiB.
	// +kubebuilder:validation:Optional
	memorySizeGb?: null | float64 @go(MemorySizeGb,*float64)

	// Persistence configuration for an instance.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	persistenceConfig?: [...#PersistenceConfigParameters] @go(PersistenceConfig,[]PersistenceConfigParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Optional. Read replica mode. Can only be specified when trying to create the instance.
	// If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
	// +kubebuilder:validation:Optional
	readReplicasMode?: null | string @go(ReadReplicasMode,*string)

	// Redis configuration parameters, according to http://redis.io/topics/config.
	// Please check Memorystore documentation for the list of supported parameters:
	// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
	// +kubebuilder:validation:Optional
	redisConfigs?: {[string]: null | string} @go(RedisConfigs,map[string]*string)

	// The version of Redis software. If not provided, latest supported
	// version will be used. Please check the API documentation linked
	// at the top for the latest valid values.
	// +kubebuilder:validation:Optional
	redisVersion?: null | string @go(RedisVersion,*string)

	// The name of the Redis region of the instance.
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Optional. The number of replica nodes. The valid range for the Standard Tier with
	// read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
	// for a Standard Tier instance, the only valid value is 1 and the default is 1.
	// The valid value for basic tier is 0 and the default is also 0.
	// +kubebuilder:validation:Optional
	replicaCount?: null | float64 @go(ReplicaCount,*float64)

	// The CIDR range of internal addresses that are reserved for this
	// instance. If not provided, the service will choose an unused /29
	// block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
	// unique and non-overlapping with existing subnets in an authorized
	// network.
	// +kubebuilder:validation:Optional
	reservedIpRange?: null | string @go(ReservedIPRange,*string)

	// Optional. Additional IP range for node placement. Required when enabling read replicas on
	// an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
	// "auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
	// range associated with the private service access connection, or "auto".
	// +kubebuilder:validation:Optional
	secondaryIpRange?: null | string @go(SecondaryIPRange,*string)

	// The service tier of the instance. Must be one of these values:
	// +kubebuilder:validation:Optional
	tier?: null | string @go(Tier,*string)

	// The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
	// +kubebuilder:validation:Optional
	transitEncryptionMode?: null | string @go(TransitEncryptionMode,*string)
}

#MaintenancePolicyInitParameters: {
	// Optional. Description of what this policy is for.
	// Create/Update methods return INVALID_ARGUMENT if the
	// length is greater than 512.
	description?: null | string @go(Description,*string)

	// Optional. Maintenance window that is applied to resources covered by this policy.
	// Minimum 1. For the current version, the maximum number
	// of weekly_window is expected to be one.
	// Structure is documented below.
	weeklyMaintenanceWindow?: [...#WeeklyMaintenanceWindowInitParameters] @go(WeeklyMaintenanceWindow,[]WeeklyMaintenanceWindowInitParameters)
}

#MaintenancePolicyObservation: {
	// (Output)
	// Output only. The time when the policy was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	createTime?: null | string @go(CreateTime,*string)

	// Optional. Description of what this policy is for.
	// Create/Update methods return INVALID_ARGUMENT if the
	// length is greater than 512.
	description?: null | string @go(Description,*string)

	// (Output)
	// Output only. The time when the policy was last updated.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	updateTime?: null | string @go(UpdateTime,*string)

	// Optional. Maintenance window that is applied to resources covered by this policy.
	// Minimum 1. For the current version, the maximum number
	// of weekly_window is expected to be one.
	// Structure is documented below.
	weeklyMaintenanceWindow?: [...#WeeklyMaintenanceWindowObservation] @go(WeeklyMaintenanceWindow,[]WeeklyMaintenanceWindowObservation)
}

#MaintenancePolicyParameters: {
	// Optional. Description of what this policy is for.
	// Create/Update methods return INVALID_ARGUMENT if the
	// length is greater than 512.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Optional. Maintenance window that is applied to resources covered by this policy.
	// Minimum 1. For the current version, the maximum number
	// of weekly_window is expected to be one.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	weeklyMaintenanceWindow?: [...#WeeklyMaintenanceWindowParameters] @go(WeeklyMaintenanceWindow,[]WeeklyMaintenanceWindowParameters)
}

#MaintenanceScheduleInitParameters: {
}

#MaintenanceScheduleObservation: {
	// (Output)
	// Output only. The end time of any upcoming scheduled maintenance for this instance.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	endTime?: null | string @go(EndTime,*string)

	// (Output)
	// Output only. The deadline that the maintenance schedule start time
	// can not go beyond, including reschedule.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	scheduleDeadlineTime?: null | string @go(ScheduleDeadlineTime,*string)

	// (Output)
	// Output only. The start time of any upcoming scheduled maintenance for this instance.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	startTime?: null | string @go(StartTime,*string)
}

#MaintenanceScheduleParameters: {
}

#NodesInitParameters: {
}

#NodesObservation: {
	// (Output)
	// Node identifying string. e.g. 'node-0', 'node-1'
	id?: null | string @go(ID,*string)

	// (Output)
	// Location of the node.
	zone?: null | string @go(Zone,*string)
}

#NodesParameters: {
}

#PersistenceConfigInitParameters: {
	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	persistenceMode?: null | string @go(PersistenceMode,*string)

	// Optional. Available snapshot periods for scheduling.
	rdbSnapshotPeriod?: null | string @go(RdbSnapshotPeriod,*string)

	// Optional. Date and time that the first snapshot was/will be attempted,
	// and to which future snapshots will be aligned. If not provided,
	// the current time will be used.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution
	// and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	rdbSnapshotStartTime?: null | string @go(RdbSnapshotStartTime,*string)
}

#PersistenceConfigObservation: {
	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	persistenceMode?: null | string @go(PersistenceMode,*string)

	// (Output)
	// Output only. The next time that a snapshot attempt is scheduled to occur.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
	// to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	rdbNextSnapshotTime?: null | string @go(RdbNextSnapshotTime,*string)

	// Optional. Available snapshot periods for scheduling.
	rdbSnapshotPeriod?: null | string @go(RdbSnapshotPeriod,*string)

	// Optional. Date and time that the first snapshot was/will be attempted,
	// and to which future snapshots will be aligned. If not provided,
	// the current time will be used.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution
	// and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	rdbSnapshotStartTime?: null | string @go(RdbSnapshotStartTime,*string)
}

#PersistenceConfigParameters: {
	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	// +kubebuilder:validation:Optional
	persistenceMode?: null | string @go(PersistenceMode,*string)

	// Optional. Available snapshot periods for scheduling.
	// +kubebuilder:validation:Optional
	rdbSnapshotPeriod?: null | string @go(RdbSnapshotPeriod,*string)

	// Optional. Date and time that the first snapshot was/will be attempted,
	// and to which future snapshots will be aligned. If not provided,
	// the current time will be used.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution
	// and up to nine fractional digits.
	// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	rdbSnapshotStartTime?: null | string @go(RdbSnapshotStartTime,*string)
}

#ServerCACertsInitParameters: {
}

#ServerCACertsObservation: {
	// (Output)
	// The certificate data in PEM format.
	cert?: null | string @go(Cert,*string)

	// (Output)
	// The time when the certificate was created.
	createTime?: null | string @go(CreateTime,*string)

	// (Output)
	// The time when the certificate expires.
	expireTime?: null | string @go(ExpireTime,*string)

	// (Output)
	// Serial number, as extracted from the certificate.
	serialNumber?: null | string @go(SerialNumber,*string)

	// (Output)
	// Sha1 Fingerprint of the certificate.
	sha1Fingerprint?: null | string @go(Sha1Fingerprint,*string)
}

#ServerCACertsParameters: {
}

#StartTimeInitParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// An API may allow the value 60 if it allows leap-seconds.
	seconds?: null | float64 @go(Seconds,*float64)
}

#StartTimeObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// An API may allow the value 60 if it allows leap-seconds.
	seconds?: null | float64 @go(Seconds,*float64)
}

#StartTimeParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// An API may allow the value 60 if it allows leap-seconds.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#WeeklyMaintenanceWindowInitParameters: {
	// Required. The day of week that maintenance updates occur.
	day?: null | string @go(Day,*string)

	// Required. Start time of the window in UTC time.
	// Structure is documented below.
	startTime?: [...#StartTimeInitParameters] @go(StartTime,[]StartTimeInitParameters)
}

#WeeklyMaintenanceWindowObservation: {
	// Required. The day of week that maintenance updates occur.
	day?: null | string @go(Day,*string)

	// (Output)
	// Output only. Duration of the maintenance window.
	// The current window is fixed at 1 hour.
	// A duration in seconds with up to nine fractional digits,
	// terminated by 's'. Example: "3.5s".
	duration?: null | string @go(Duration,*string)

	// Required. Start time of the window in UTC time.
	// Structure is documented below.
	startTime?: [...#StartTimeObservation] @go(StartTime,[]StartTimeObservation)
}

#WeeklyMaintenanceWindowParameters: {
	// Required. The day of week that maintenance updates occur.
	// +kubebuilder:validation:Optional
	day?: null | string @go(Day,*string)

	// Required. Start time of the window in UTC time.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	startTime: [...#StartTimeParameters] @go(StartTime,[]StartTimeParameters)
}

// InstanceSpec defines the desired state of Instance
#InstanceSpec: {
	forProvider: #InstanceParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #InstanceInitParameters @go(InitProvider)
}

// InstanceStatus defines the observed state of Instance.
#InstanceStatus: {
	atProvider?: #InstanceObservation @go(AtProvider)
}

// Instance is the Schema for the Instances API. A Google Cloud Redis instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Instance: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.memorySizeGb) || (has(self.initProvider) && has(self.initProvider.memorySizeGb))",message="spec.forProvider.memorySizeGb is a required parameter"
	spec:    #InstanceSpec   @go(Spec)
	status?: #InstanceStatus @go(Status)
}

// InstanceList contains a list of Instances
#InstanceList: {
	items: [...#Instance] @go(Items,[]Instance)
}
