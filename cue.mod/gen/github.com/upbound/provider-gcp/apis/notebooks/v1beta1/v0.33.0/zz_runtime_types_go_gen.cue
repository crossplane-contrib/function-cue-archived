// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/notebooks/v1beta1

package v1beta1

#AccessConfigObservation: {
	// The type of access mode this instance. For valid values, see
	// https://cloud.google.com/vertex-ai/docs/workbench/reference/ rest/v1/projects.locations.runtimes#RuntimeAccessType.
	accessType?: null | string @go(AccessType,*string)

	// (Output)
	// The proxy endpoint that is used to access the runtime.
	proxyUri?: null | string @go(ProxyURI,*string)

	// The owner of this runtime after creation. Format: alias@example.com.
	// Currently supports one owner only.
	runtimeOwner?: null | string @go(RuntimeOwner,*string)
}

#AccessConfigParameters: {
	// The type of access mode this instance. For valid values, see
	// https://cloud.google.com/vertex-ai/docs/workbench/reference/ rest/v1/projects.locations.runtimes#RuntimeAccessType.
	// +kubebuilder:validation:Optional
	accessType?: null | string @go(AccessType,*string)

	// The owner of this runtime after creation. Format: alias@example.com.
	// Currently supports one owner only.
	// +kubebuilder:validation:Optional
	runtimeOwner?: null | string @go(RuntimeOwner,*string)
}

#ContainerImagesObservation: {
	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	repository?: null | string @go(Repository,*string)

	// The tag of the container image. If not specified, this defaults to the latest tag.
	tag?: null | string @go(Tag,*string)
}

#ContainerImagesParameters: {
	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	// +kubebuilder:validation:Required
	repository?: null | string @go(Repository,*string)

	// The tag of the container image. If not specified, this defaults to the latest tag.
	// +kubebuilder:validation:Optional
	tag?: null | string @go(Tag,*string)
}

#DataDiskObservation: {
	// (Output)
	// Optional. Specifies whether the disk will be auto-deleted
	// when the instance is deleted (but not when the disk is
	// detached from the instance).
	autoDelete?: null | bool @go(AutoDelete,*bool)

	// (Output)
	// Optional. Indicates that this is a boot disk. The virtual
	// machine will use the first partition of the disk for its
	// root filesystem.
	boot?: null | bool @go(Boot,*bool)

	// (Output)
	// Optional. Specifies a unique device name of your choice
	// that is reflected into the /dev/disk/by-id/google-* tree
	// of a Linux operating system running within the instance.
	// This name can be used to reference the device for mounting,
	// resizing, and so on, from within the instance.
	// If not specified, the server chooses a default device name
	// to apply to this disk, in the form persistent-disk-x, where
	// x is a number assigned by Google Compute Engine. This field
	// is only applicable for persistent disks.
	deviceName?: null | string @go(DeviceName,*string)

	// (Output)
	// Indicates a list of features to enable on the guest operating
	// system. Applicable only for bootable images. To see a list of
	// available features, read https://cloud.google.com/compute/docs/ images/create-delete-deprecate-private-images#guest-os-features
	// options.
	guestOsFeatures?: [...null | string] @go(GuestOsFeatures,[]*string)

	// (Output)
	// Output only. A zero-based index to this disk, where 0 is
	// reserved for the boot disk. If you have many disks attached
	// to an instance, each disk would have a unique index number.
	index?: null | float64 @go(Index,*float64)

	// Input only. Specifies the parameters for a new disk that will
	// be created alongside the new instance. Use initialization
	// parameters to create boot disks or local SSDs attached to the
	// new instance. This property is mutually exclusive with the
	// source property; you can only define one or the other, but not
	// both.
	// Structure is documented below.
	initializeParams?: [...#InitializeParamsObservation] @go(InitializeParams,[]InitializeParamsObservation)

	// "Specifies the disk interface to use for attaching this disk,
	// which is either SCSI or NVME. The default is SCSI. Persistent
	// disks must always use SCSI and the request will fail if you attempt
	// to attach a persistent disk in any other format than SCSI. Local SSDs
	// can use either NVME or SCSI. For performance characteristics of SCSI
	// over NVMe, see Local SSD performance. Valid values: * NVME * SCSI".
	interface?: null | string @go(Interface,*string)

	// (Output)
	// Type of the resource. Always compute#attachedDisk for attached
	// disks.
	kind?: null | string @go(Kind,*string)

	// (Output)
	// Output only. Any valid publicly visible licenses.
	licenses?: [...null | string] @go(Licenses,[]*string)

	// The mode in which to attach this disk, either READ_WRITE
	// or READ_ONLY. If not specified, the default is to attach
	// the disk in READ_WRITE mode.
	mode?: null | string @go(Mode,*string)

	// Specifies a valid partial or full URL to an existing
	// Persistent Disk resource.
	source?: null | string @go(Source,*string)

	// Specifies the type of the disk, either SCRATCH or PERSISTENT.
	// If not specified, the default is PERSISTENT.
	type?: null | string @go(Type,*string)
}

#DataDiskParameters: {
	// Input only. Specifies the parameters for a new disk that will
	// be created alongside the new instance. Use initialization
	// parameters to create boot disks or local SSDs attached to the
	// new instance. This property is mutually exclusive with the
	// source property; you can only define one or the other, but not
	// both.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	initializeParams?: [...#InitializeParamsParameters] @go(InitializeParams,[]InitializeParamsParameters)

	// "Specifies the disk interface to use for attaching this disk,
	// which is either SCSI or NVME. The default is SCSI. Persistent
	// disks must always use SCSI and the request will fail if you attempt
	// to attach a persistent disk in any other format than SCSI. Local SSDs
	// can use either NVME or SCSI. For performance characteristics of SCSI
	// over NVMe, see Local SSD performance. Valid values: * NVME * SCSI".
	// +kubebuilder:validation:Optional
	interface?: null | string @go(Interface,*string)

	// The mode in which to attach this disk, either READ_WRITE
	// or READ_ONLY. If not specified, the default is to attach
	// the disk in READ_WRITE mode.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// Specifies a valid partial or full URL to an existing
	// Persistent Disk resource.
	// +kubebuilder:validation:Optional
	source?: null | string @go(Source,*string)

	// Specifies the type of the disk, either SCRATCH or PERSISTENT.
	// If not specified, the default is PERSISTENT.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#EncryptionConfigObservation: {
	// The Cloud KMS resource identifier of the customer-managed
	// encryption key used to protect a resource, such as a disks.
	// It has the following format:
	// projects/{PROJECT_ID}/locations/{REGION}/keyRings/ {KEY_RING_NAME}/cryptoKeys/{KEY_NAME}
	kmsKey?: null | string @go(KMSKey,*string)
}

#EncryptionConfigParameters: {
	// The Cloud KMS resource identifier of the customer-managed
	// encryption key used to protect a resource, such as a disks.
	// It has the following format:
	// projects/{PROJECT_ID}/locations/{REGION}/keyRings/ {KEY_RING_NAME}/cryptoKeys/{KEY_NAME}
	// +kubebuilder:validation:Optional
	kmsKey?: null | string @go(KMSKey,*string)
}

#InitializeParamsObservation: {
	// Provide this property when creating the disk.
	description?: null | string @go(Description,*string)

	// Specifies the disk name. If not specified, the default is
	// to use the name of the instance. If the disk with the
	// instance name exists already in the given zone/region, a
	// new name will be automatically generated.
	diskName?: null | string @go(DiskName,*string)

	// Specifies the size of the disk in base-2 GB. If not
	// specified, the disk will be the same size as the image
	// (usually 10GB). If specified, the size must be equal to
	// or larger than 10GB. Default 100 GB.
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// The type of the boot disk attached to this runtime,
	// defaults to standard persistent disk. For valid values,
	// see https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#disktype
	diskType?: null | string @go(DiskType,*string)

	// The labels to associate with this runtime. Label keys must
	// contain 1 to 63 characters, and must conform to [RFC 1035]
	// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
	// empty, but, if present, must contain 1 to 63 characters, and must
	// conform to RFC 1035. No
	// more than 32 labels can be associated with a cluster.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)
}

#InitializeParamsParameters: {
	// Provide this property when creating the disk.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Specifies the disk name. If not specified, the default is
	// to use the name of the instance. If the disk with the
	// instance name exists already in the given zone/region, a
	// new name will be automatically generated.
	// +kubebuilder:validation:Optional
	diskName?: null | string @go(DiskName,*string)

	// Specifies the size of the disk in base-2 GB. If not
	// specified, the disk will be the same size as the image
	// (usually 10GB). If specified, the size must be equal to
	// or larger than 10GB. Default 100 GB.
	// +kubebuilder:validation:Optional
	diskSizeGb?: null | float64 @go(DiskSizeGb,*float64)

	// The type of the boot disk attached to this runtime,
	// defaults to standard persistent disk. For valid values,
	// see https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#disktype
	// +kubebuilder:validation:Optional
	diskType?: null | string @go(DiskType,*string)

	// The labels to associate with this runtime. Label keys must
	// contain 1 to 63 characters, and must conform to [RFC 1035]
	// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
	// empty, but, if present, must contain 1 to 63 characters, and must
	// conform to RFC 1035. No
	// more than 32 labels can be associated with a cluster.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)
}

#KernelsObservation: {
	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	repository?: null | string @go(Repository,*string)

	// The tag of the container image. If not specified, this defaults to the latest tag.
	tag?: null | string @go(Tag,*string)
}

#KernelsParameters: {
	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	// +kubebuilder:validation:Required
	repository?: null | string @go(Repository,*string)

	// The tag of the container image. If not specified, this defaults to the latest tag.
	// +kubebuilder:validation:Optional
	tag?: null | string @go(Tag,*string)
}

#MetricsObservation: {
	// (Output)
	// Contains runtime daemon metrics, such as OS and kernels and
	// sessions stats.
	systemMetrics?: {[string]: null | string} @go(SystemMetrics,map[string]*string)
}

#MetricsParameters: {
}

#RuntimeObservation: {
	// The config settings for accessing runtime.
	// Structure is documented below.
	accessConfig?: [...#AccessConfigObservation] @go(AccessConfig,[]AccessConfigObservation)

	// The health state of this runtime. For a list of possible output
	// values, see https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#healthstate.
	healthState?: null | string @go(HealthState,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/runtimes/{{name}}
	id?: null | string @go(ID,*string)

	// A reference to the zone where the machine resides.
	location?: null | string @go(Location,*string)

	// Contains Runtime daemon metrics such as Service status and JupyterLab
	// status
	// Structure is documented below.
	metrics?: [...#MetricsObservation] @go(Metrics,[]MetricsObservation)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The config settings for software inside the runtime.
	// Structure is documented below.
	softwareConfig?: [...#SoftwareConfigObservation] @go(SoftwareConfig,[]SoftwareConfigObservation)

	// The state of this runtime.
	state?: null | string @go(State,*string)

	// Use a Compute Engine VM image to start the managed notebook instance.
	// Structure is documented below.
	virtualMachine?: [...#VirtualMachineObservation] @go(VirtualMachine,[]VirtualMachineObservation)
}

#RuntimeParameters: {
	// The config settings for accessing runtime.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	accessConfig?: [...#AccessConfigParameters] @go(AccessConfig,[]AccessConfigParameters)

	// A reference to the zone where the machine resides.
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The config settings for software inside the runtime.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	softwareConfig?: [...#SoftwareConfigParameters] @go(SoftwareConfig,[]SoftwareConfigParameters)

	// Use a Compute Engine VM image to start the managed notebook instance.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	virtualMachine?: [...#VirtualMachineParameters] @go(VirtualMachine,[]VirtualMachineParameters)
}

#SoftwareConfigObservation: {
	// Specify a custom Cloud Storage path where the GPU driver is stored.
	// If not specified, we'll automatically choose from official GPU drivers.
	customGpuDriverPath?: null | string @go(CustomGpuDriverPath,*string)

	// Verifies core internal services are running. Default: True.
	enableHealthMonitoring?: null | bool @go(EnableHealthMonitoring,*bool)

	// Runtime will automatically shutdown after idle_shutdown_time.
	// Default: True
	idleShutdown?: null | bool @go(IdleShutdown,*bool)

	// Time in minutes to wait before shuting down runtime.
	// Default: 180 minutes
	idleShutdownTimeout?: null | float64 @go(IdleShutdownTimeout,*float64)

	// Install Nvidia Driver automatically.
	installGpuDriver?: null | bool @go(InstallGpuDriver,*bool)

	// Use a list of container images to use as Kernels in the notebook instance.
	// Structure is documented below.
	kernels?: [...#KernelsObservation] @go(Kernels,[]KernelsObservation)

	// Cron expression in UTC timezone for schedule instance auto upgrade.
	// Please follow the cron format.
	notebookUpgradeSchedule?: null | string @go(NotebookUpgradeSchedule,*string)

	// Path to a Bash script that automatically runs after a notebook instance
	// fully boots up. The path must be a URL or
	// Cloud Storage path (gs://path-to-file/file-name).
	postStartupScript?: null | string @go(PostStartupScript,*string)

	// Behavior for the post startup script.
	// Possible values are: POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED, RUN_EVERY_START, DOWNLOAD_AND_RUN_EVERY_START.
	postStartupScriptBehavior?: null | string @go(PostStartupScriptBehavior,*string)

	// (Output)
	// Bool indicating whether an newer image is available in an image family.
	upgradeable?: null | bool @go(Upgradeable,*bool)
}

#SoftwareConfigParameters: {
	// Specify a custom Cloud Storage path where the GPU driver is stored.
	// If not specified, we'll automatically choose from official GPU drivers.
	// +kubebuilder:validation:Optional
	customGpuDriverPath?: null | string @go(CustomGpuDriverPath,*string)

	// Verifies core internal services are running. Default: True.
	// +kubebuilder:validation:Optional
	enableHealthMonitoring?: null | bool @go(EnableHealthMonitoring,*bool)

	// Runtime will automatically shutdown after idle_shutdown_time.
	// Default: True
	// +kubebuilder:validation:Optional
	idleShutdown?: null | bool @go(IdleShutdown,*bool)

	// Time in minutes to wait before shuting down runtime.
	// Default: 180 minutes
	// +kubebuilder:validation:Optional
	idleShutdownTimeout?: null | float64 @go(IdleShutdownTimeout,*float64)

	// Install Nvidia Driver automatically.
	// +kubebuilder:validation:Optional
	installGpuDriver?: null | bool @go(InstallGpuDriver,*bool)

	// Use a list of container images to use as Kernels in the notebook instance.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	kernels?: [...#KernelsParameters] @go(Kernels,[]KernelsParameters)

	// Cron expression in UTC timezone for schedule instance auto upgrade.
	// Please follow the cron format.
	// +kubebuilder:validation:Optional
	notebookUpgradeSchedule?: null | string @go(NotebookUpgradeSchedule,*string)

	// Path to a Bash script that automatically runs after a notebook instance
	// fully boots up. The path must be a URL or
	// Cloud Storage path (gs://path-to-file/file-name).
	// +kubebuilder:validation:Optional
	postStartupScript?: null | string @go(PostStartupScript,*string)

	// Behavior for the post startup script.
	// Possible values are: POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED, RUN_EVERY_START, DOWNLOAD_AND_RUN_EVERY_START.
	// +kubebuilder:validation:Optional
	postStartupScriptBehavior?: null | string @go(PostStartupScriptBehavior,*string)
}

#VirtualMachineConfigAcceleratorConfigObservation: {
	// Count of cores of this accelerator.
	coreCount?: null | float64 @go(CoreCount,*float64)

	// Specifies the type of the disk, either SCRATCH or PERSISTENT.
	// If not specified, the default is PERSISTENT.
	type?: null | string @go(Type,*string)
}

#VirtualMachineConfigAcceleratorConfigParameters: {
	// Count of cores of this accelerator.
	// +kubebuilder:validation:Optional
	coreCount?: null | float64 @go(CoreCount,*float64)

	// Specifies the type of the disk, either SCRATCH or PERSISTENT.
	// If not specified, the default is PERSISTENT.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#VirtualMachineConfigObservation: {
	// The Compute Engine accelerator configuration for this runtime.
	// Structure is documented below.
	acceleratorConfig?: [...#VirtualMachineConfigAcceleratorConfigObservation] @go(AcceleratorConfig,[]VirtualMachineConfigAcceleratorConfigObservation)

	// Use a list of container images to start the notebook instance.
	// Structure is documented below.
	containerImages?: [...#ContainerImagesObservation] @go(ContainerImages,[]ContainerImagesObservation)

	// Data disk option configuration settings.
	// Structure is documented below.
	dataDisk?: [...#DataDiskObservation] @go(DataDisk,[]DataDiskObservation)

	// Encryption settings for virtual machine data disk.
	// Structure is documented below.
	encryptionConfig?: [...#EncryptionConfigObservation] @go(EncryptionConfig,[]EncryptionConfigObservation)

	// (Output)
	// The Compute Engine guest attributes. (see [Project and instance
	// guest attributes](https://cloud.google.com/compute/docs/
	// storing-retrieving-metadata#guest_attributes)).
	guestAttributes?: {[string]: null | string} @go(GuestAttributes,map[string]*string)

	// If true, runtime will only have internal IP addresses. By default,
	// runtimes are not restricted to internal IP addresses, and will
	// have ephemeral external IP addresses assigned to each vm. This
	// internal_ip_only restriction can only be enabled for subnetwork
	// enabled networks, and all dependencies must be configured to be
	// accessible without external IP addresses.
	internalIpOnly?: null | bool @go(InternalIPOnly,*bool)

	// The labels to associate with this runtime. Label keys must
	// contain 1 to 63 characters, and must conform to [RFC 1035]
	// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
	// empty, but, if present, must contain 1 to 63 characters, and must
	// conform to RFC 1035. No
	// more than 32 labels can be associated with a cluster.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The Compute Engine machine type used for runtimes.
	machineType?: null | string @go(MachineType,*string)

	// The Compute Engine metadata entries to add to virtual machine.
	// (see [Project and instance metadata](https://cloud.google.com
	// /compute/docs/storing-retrieving-metadata#project_and_instance
	// _metadata)).
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// The Compute Engine network to be used for machine communications.
	// Cannot be specified with subnetwork. If neither network nor
	// subnet is specified, the "default" network of the project is
	// used, if it exists. A full URL or partial URI. Examples:
	network?: null | string @go(Network,*string)

	// The type of vNIC to be used on this interface. This may be gVNIC
	// or VirtioNet.
	// Possible values are: UNSPECIFIED_NIC_TYPE, VIRTIO_NET, GVNIC.
	nicType?: null | string @go(NicType,*string)

	// Reserved IP Range name is used for VPC Peering. The
	// subnetwork allocation will use the range name if it's assigned.
	reservedIpRange?: null | string @go(ReservedIPRange,*string)

	// Shielded VM Instance configuration settings.
	// Structure is documented below.
	shieldedInstanceConfig?: [...#VirtualMachineConfigShieldedInstanceConfigObservation] @go(ShieldedInstanceConfig,[]VirtualMachineConfigShieldedInstanceConfigObservation)

	// The Compute Engine subnetwork to be used for machine
	// communications. Cannot be specified with network. A full URL or
	// partial URI are valid. Examples:
	subnet?: null | string @go(Subnet,*string)

	// The Compute Engine tags to add to runtime (see [Tagging instances]
	// (https://cloud.google.com/compute/docs/
	// label-or-tag-resources#tags)).
	tags?: [...null | string] @go(Tags,[]*string)

	// (Output)
	// The zone where the virtual machine is located.
	zone?: null | string @go(Zone,*string)
}

#VirtualMachineConfigParameters: {
	// The Compute Engine accelerator configuration for this runtime.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	acceleratorConfig?: [...#VirtualMachineConfigAcceleratorConfigParameters] @go(AcceleratorConfig,[]VirtualMachineConfigAcceleratorConfigParameters)

	// Use a list of container images to start the notebook instance.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	containerImages?: [...#ContainerImagesParameters] @go(ContainerImages,[]ContainerImagesParameters)

	// Data disk option configuration settings.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	dataDisk: [...#DataDiskParameters] @go(DataDisk,[]DataDiskParameters)

	// Encryption settings for virtual machine data disk.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	encryptionConfig?: [...#EncryptionConfigParameters] @go(EncryptionConfig,[]EncryptionConfigParameters)

	// If true, runtime will only have internal IP addresses. By default,
	// runtimes are not restricted to internal IP addresses, and will
	// have ephemeral external IP addresses assigned to each vm. This
	// internal_ip_only restriction can only be enabled for subnetwork
	// enabled networks, and all dependencies must be configured to be
	// accessible without external IP addresses.
	// +kubebuilder:validation:Optional
	internalIpOnly?: null | bool @go(InternalIPOnly,*bool)

	// The labels to associate with this runtime. Label keys must
	// contain 1 to 63 characters, and must conform to [RFC 1035]
	// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
	// empty, but, if present, must contain 1 to 63 characters, and must
	// conform to RFC 1035. No
	// more than 32 labels can be associated with a cluster.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The Compute Engine machine type used for runtimes.
	// +kubebuilder:validation:Required
	machineType?: null | string @go(MachineType,*string)

	// The Compute Engine metadata entries to add to virtual machine.
	// (see [Project and instance metadata](https://cloud.google.com
	// /compute/docs/storing-retrieving-metadata#project_and_instance
	// _metadata)).
	// +kubebuilder:validation:Optional
	metadata?: {[string]: null | string} @go(Metadata,map[string]*string)

	// The Compute Engine network to be used for machine communications.
	// Cannot be specified with subnetwork. If neither network nor
	// subnet is specified, the "default" network of the project is
	// used, if it exists. A full URL or partial URI. Examples:
	// +kubebuilder:validation:Optional
	network?: null | string @go(Network,*string)

	// The type of vNIC to be used on this interface. This may be gVNIC
	// or VirtioNet.
	// Possible values are: UNSPECIFIED_NIC_TYPE, VIRTIO_NET, GVNIC.
	// +kubebuilder:validation:Optional
	nicType?: null | string @go(NicType,*string)

	// Reserved IP Range name is used for VPC Peering. The
	// subnetwork allocation will use the range name if it's assigned.
	// +kubebuilder:validation:Optional
	reservedIpRange?: null | string @go(ReservedIPRange,*string)

	// Shielded VM Instance configuration settings.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	shieldedInstanceConfig?: [...#VirtualMachineConfigShieldedInstanceConfigParameters] @go(ShieldedInstanceConfig,[]VirtualMachineConfigShieldedInstanceConfigParameters)

	// The Compute Engine subnetwork to be used for machine
	// communications. Cannot be specified with network. A full URL or
	// partial URI are valid. Examples:
	// +kubebuilder:validation:Optional
	subnet?: null | string @go(Subnet,*string)

	// The Compute Engine tags to add to runtime (see [Tagging instances]
	// (https://cloud.google.com/compute/docs/
	// label-or-tag-resources#tags)).
	// +kubebuilder:validation:Optional
	tags?: [...null | string] @go(Tags,[]*string)
}

#VirtualMachineConfigShieldedInstanceConfigObservation: {
	// Defines whether the instance has integrity monitoring enabled.
	// Enables monitoring and attestation of the boot integrity of
	// the instance. The attestation is performed against the
	// integrity policy baseline. This baseline is initially derived
	// from the implicitly trusted boot image when the instance is
	// created. Enabled by default.
	enableIntegrityMonitoring?: null | bool @go(EnableIntegrityMonitoring,*bool)

	// Defines whether the instance has Secure Boot enabled.Secure
	// Boot helps ensure that the system only runs authentic software
	// by verifying the digital signature of all boot components, and
	// halting the boot process if signature verification fails.
	// Disabled by default.
	enableSecureBoot?: null | bool @go(EnableSecureBoot,*bool)

	// Defines whether the instance has the vTPM enabled. Enabled by
	// default.
	enableVtpm?: null | bool @go(EnableVtpm,*bool)
}

#VirtualMachineConfigShieldedInstanceConfigParameters: {
	// Defines whether the instance has integrity monitoring enabled.
	// Enables monitoring and attestation of the boot integrity of
	// the instance. The attestation is performed against the
	// integrity policy baseline. This baseline is initially derived
	// from the implicitly trusted boot image when the instance is
	// created. Enabled by default.
	// +kubebuilder:validation:Optional
	enableIntegrityMonitoring?: null | bool @go(EnableIntegrityMonitoring,*bool)

	// Defines whether the instance has Secure Boot enabled.Secure
	// Boot helps ensure that the system only runs authentic software
	// by verifying the digital signature of all boot components, and
	// halting the boot process if signature verification fails.
	// Disabled by default.
	// +kubebuilder:validation:Optional
	enableSecureBoot?: null | bool @go(EnableSecureBoot,*bool)

	// Defines whether the instance has the vTPM enabled. Enabled by
	// default.
	// +kubebuilder:validation:Optional
	enableVtpm?: null | bool @go(EnableVtpm,*bool)
}

#VirtualMachineObservation: {
	// (Output)
	// The unique identifier of the Managed Compute Engine instance.
	instanceId?: null | string @go(InstanceID,*string)

	// (Output)
	// The user-friendly name of the Managed Compute Engine instance.
	instanceName?: null | string @go(InstanceName,*string)

	// Virtual Machine configuration settings.
	// Structure is documented below.
	virtualMachineConfig?: [...#VirtualMachineConfigObservation] @go(VirtualMachineConfig,[]VirtualMachineConfigObservation)
}

#VirtualMachineParameters: {
	// Virtual Machine configuration settings.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	virtualMachineConfig?: [...#VirtualMachineConfigParameters] @go(VirtualMachineConfig,[]VirtualMachineConfigParameters)
}

// RuntimeSpec defines the desired state of Runtime
#RuntimeSpec: {
	forProvider: #RuntimeParameters @go(ForProvider)
}

// RuntimeStatus defines the observed state of Runtime.
#RuntimeStatus: {
	atProvider?: #RuntimeObservation @go(AtProvider)
}

// Runtime is the Schema for the Runtimes API. A Cloud AI Platform Notebook runtime.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Runtime: {
	spec:    #RuntimeSpec   @go(Spec)
	status?: #RuntimeStatus @go(Status)
}

// RuntimeList contains a list of Runtimes
#RuntimeList: {
	items: [...#Runtime] @go(Items,[]Runtime)
}
