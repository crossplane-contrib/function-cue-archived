// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/notebooks/v1beta1

package v1beta1

#ContainerImageInitParameters: {
	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	repository?: null | string @go(Repository,*string)

	// The tag of the container image. If not specified, this defaults to the latest tag.
	tag?: null | string @go(Tag,*string)
}

#ContainerImageObservation: {
	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	repository?: null | string @go(Repository,*string)

	// The tag of the container image. If not specified, this defaults to the latest tag.
	tag?: null | string @go(Tag,*string)
}

#ContainerImageParameters: {
	// The path to the container image repository.
	// For example: gcr.io/{project_id}/{imageName}
	// +kubebuilder:validation:Optional
	repository?: null | string @go(Repository,*string)

	// The tag of the container image. If not specified, this defaults to the latest tag.
	// +kubebuilder:validation:Optional
	tag?: null | string @go(Tag,*string)
}

#EnvironmentInitParameters: {
	// Use a container image to start the notebook instance.
	// Structure is documented below.
	containerImage?: [...#ContainerImageInitParameters] @go(ContainerImage,[]ContainerImageInitParameters)

	// A brief description of this environment.
	description?: null | string @go(Description,*string)

	// Display name of this environment for the UI.
	displayName?: null | string @go(DisplayName,*string)

	// Path to a Bash script that automatically runs after a notebook instance fully boots up.
	// The path must be a URL or Cloud Storage path. Example: "gs://path-to-file/file-name"
	postStartupScript?: null | string @go(PostStartupScript,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Use a Compute Engine VM image to start the notebook instance.
	// Structure is documented below.
	vmImage?: [...#VMImageInitParameters] @go(VMImage,[]VMImageInitParameters)
}

#EnvironmentObservation: {
	// Use a container image to start the notebook instance.
	// Structure is documented below.
	containerImage?: [...#ContainerImageObservation] @go(ContainerImage,[]ContainerImageObservation)

	// Instance creation time
	createTime?: null | string @go(CreateTime,*string)

	// A brief description of this environment.
	description?: null | string @go(Description,*string)

	// Display name of this environment for the UI.
	displayName?: null | string @go(DisplayName,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/environments/{{name}}
	id?: null | string @go(ID,*string)

	// A reference to the zone where the machine resides.
	location?: null | string @go(Location,*string)

	// Path to a Bash script that automatically runs after a notebook instance fully boots up.
	// The path must be a URL or Cloud Storage path. Example: "gs://path-to-file/file-name"
	postStartupScript?: null | string @go(PostStartupScript,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Use a Compute Engine VM image to start the notebook instance.
	// Structure is documented below.
	vmImage?: [...#VMImageObservation] @go(VMImage,[]VMImageObservation)
}

#EnvironmentParameters: {
	// Use a container image to start the notebook instance.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	containerImage?: [...#ContainerImageParameters] @go(ContainerImage,[]ContainerImageParameters)

	// A brief description of this environment.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Display name of this environment for the UI.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// A reference to the zone where the machine resides.
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// Path to a Bash script that automatically runs after a notebook instance fully boots up.
	// The path must be a URL or Cloud Storage path. Example: "gs://path-to-file/file-name"
	// +kubebuilder:validation:Optional
	postStartupScript?: null | string @go(PostStartupScript,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Use a Compute Engine VM image to start the notebook instance.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	vmImage?: [...#VMImageParameters] @go(VMImage,[]VMImageParameters)
}

#VMImageInitParameters: {
	// Use this VM image family to find the image; the newest image in this family will be used.
	imageFamily?: null | string @go(ImageFamily,*string)

	// Use VM image name to find the image.
	imageName?: null | string @go(ImageName,*string)

	// The name of the Google Cloud project that this VM image belongs to.
	// Format: projects/{project_id}
	project?: null | string @go(Project,*string)
}

#VMImageObservation: {
	// Use this VM image family to find the image; the newest image in this family will be used.
	imageFamily?: null | string @go(ImageFamily,*string)

	// Use VM image name to find the image.
	imageName?: null | string @go(ImageName,*string)

	// The name of the Google Cloud project that this VM image belongs to.
	// Format: projects/{project_id}
	project?: null | string @go(Project,*string)
}

#VMImageParameters: {
	// Use this VM image family to find the image; the newest image in this family will be used.
	// +kubebuilder:validation:Optional
	imageFamily?: null | string @go(ImageFamily,*string)

	// Use VM image name to find the image.
	// +kubebuilder:validation:Optional
	imageName?: null | string @go(ImageName,*string)

	// The name of the Google Cloud project that this VM image belongs to.
	// Format: projects/{project_id}
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// EnvironmentSpec defines the desired state of Environment
#EnvironmentSpec: {
	forProvider: #EnvironmentParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EnvironmentInitParameters @go(InitProvider)
}

// EnvironmentStatus defines the observed state of Environment.
#EnvironmentStatus: {
	atProvider?: #EnvironmentObservation @go(AtProvider)
}

// Environment is the Schema for the Environments API. A Cloud AI Platform Notebook environment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Environment: {
	spec:    #EnvironmentSpec   @go(Spec)
	status?: #EnvironmentStatus @go(Status)
}

// EnvironmentList contains a list of Environments
#EnvironmentList: {
	items: [...#Environment] @go(Items,[]Environment)
}
