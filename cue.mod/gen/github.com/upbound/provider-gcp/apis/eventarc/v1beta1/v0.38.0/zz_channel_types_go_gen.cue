// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/eventarc/v1beta1

package v1beta1

#ChannelInitParameters: {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern projects/*/locations/*/keyRings/*/cryptoKeys/*.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The project for the resource
	project?: null | string @go(Project,*string)

	// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: projects/{project}/locations/{location}/providers/{provider_id}.
	thirdPartyProvider?: null | string @go(ThirdPartyProvider,*string)
}

#ChannelObservation: {
	// Output only. The activation token for the channel. The token must be used by the provider to register the channel for publishing.
	activationToken?: null | string @go(ActivationToken,*string)

	// Output only. The creation time.
	createTime?: null | string @go(CreateTime,*string)

	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern projects/*/locations/*/keyRings/*/cryptoKeys/*.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/channels/{{name}}
	id?: null | string @go(ID,*string)

	// The location for the resource
	location?: null | string @go(Location,*string)

	// The project for the resource
	project?: null | string @go(Project,*string)

	// Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: projects/{project}/topics/{topic_id}.
	pubsubTopic?: null | string @go(PubsubTopic,*string)

	// Output only. The state of a Channel. Possible values: STATE_UNSPECIFIED, PENDING, ACTIVE, INACTIVE
	state?: null | string @go(State,*string)

	// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: projects/{project}/locations/{location}/providers/{provider_id}.
	thirdPartyProvider?: null | string @go(ThirdPartyProvider,*string)

	// Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	uid?: null | string @go(UID,*string)

	// Output only. The last-modified time.
	updateTime?: null | string @go(UpdateTime,*string)
}

#ChannelParameters: {
	// Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern projects/*/locations/*/keyRings/*/cryptoKeys/*.
	// +kubebuilder:validation:Optional
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The location for the resource
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// The project for the resource
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: projects/{project}/locations/{location}/providers/{provider_id}.
	// +kubebuilder:validation:Optional
	thirdPartyProvider?: null | string @go(ThirdPartyProvider,*string)
}

// ChannelSpec defines the desired state of Channel
#ChannelSpec: {
	forProvider: #ChannelParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ChannelInitParameters @go(InitProvider)
}

// ChannelStatus defines the observed state of Channel.
#ChannelStatus: {
	atProvider?: #ChannelObservation @go(AtProvider)
}

// Channel is the Schema for the Channels API. The Eventarc Channel resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Channel: {
	spec:    #ChannelSpec   @go(Spec)
	status?: #ChannelStatus @go(Status)
}

// ChannelList contains a list of Channels
#ChannelList: {
	items: [...#Channel] @go(Items,[]Channel)
}
