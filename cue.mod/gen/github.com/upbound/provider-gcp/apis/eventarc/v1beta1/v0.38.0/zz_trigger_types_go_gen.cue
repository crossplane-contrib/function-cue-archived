// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/eventarc/v1beta1

package v1beta1

#CloudRunServiceInitParameters: {
	// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	path?: null | string @go(Path,*string)

	// Required. The region the Cloud Run service is deployed in.
	region?: null | string @go(Region,*string)
}

#CloudRunServiceObservation: {
	// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	path?: null | string @go(Path,*string)

	// Required. The region the Cloud Run service is deployed in.
	region?: null | string @go(Region,*string)

	// Required. Name of the GKE service.
	service?: null | string @go(Service,*string)
}

#CloudRunServiceParameters: {
	// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Required. The region the Cloud Run service is deployed in.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// Required. Name of the GKE service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudrun/v1beta1.Service
	// +kubebuilder:validation:Optional
	service?: null | string @go(Service,*string)
}

#DestinationInitParameters: {
	// [WARNING] Configuring a Cloud Function in Trigger is not supported as of today. The Cloud Function resource name. Format: projects/{project}/locations/{location}/functions/{function}
	cloudFunction?: null | string @go(CloudFunction,*string)

	// Cloud Run fully-managed service that receives the events. The service should be running in the same project of the trigger.
	cloudRunService?: [...#CloudRunServiceInitParameters] @go(CloudRunService,[]CloudRunServiceInitParameters)

	// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
	gke?: [...#GkeInitParameters] @go(Gke,[]GkeInitParameters)

	// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: projects/{project}/locations/{location}/workflows/{workflow}
	workflow?: null | string @go(Workflow,*string)
}

#DestinationObservation: {
	// [WARNING] Configuring a Cloud Function in Trigger is not supported as of today. The Cloud Function resource name. Format: projects/{project}/locations/{location}/functions/{function}
	cloudFunction?: null | string @go(CloudFunction,*string)

	// Cloud Run fully-managed service that receives the events. The service should be running in the same project of the trigger.
	cloudRunService?: [...#CloudRunServiceObservation] @go(CloudRunService,[]CloudRunServiceObservation)

	// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
	gke?: [...#GkeObservation] @go(Gke,[]GkeObservation)

	// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: projects/{project}/locations/{location}/workflows/{workflow}
	workflow?: null | string @go(Workflow,*string)
}

#DestinationParameters: {
	// [WARNING] Configuring a Cloud Function in Trigger is not supported as of today. The Cloud Function resource name. Format: projects/{project}/locations/{location}/functions/{function}
	// +kubebuilder:validation:Optional
	cloudFunction?: null | string @go(CloudFunction,*string)

	// Cloud Run fully-managed service that receives the events. The service should be running in the same project of the trigger.
	// +kubebuilder:validation:Optional
	cloudRunService?: [...#CloudRunServiceParameters] @go(CloudRunService,[]CloudRunServiceParameters)

	// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
	// +kubebuilder:validation:Optional
	gke?: [...#GkeParameters] @go(Gke,[]GkeParameters)

	// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: projects/{project}/locations/{location}/workflows/{workflow}
	// +kubebuilder:validation:Optional
	workflow?: null | string @go(Workflow,*string)
}

#GkeInitParameters: {
	// Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
	cluster?: null | string @go(Cluster,*string)

	// Required. The namespace the GKE service is running in.
	namespace?: null | string @go(Namespace,*string)

	// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	path?: null | string @go(Path,*string)

	// Required. Name of the GKE service.
	service?: null | string @go(Service,*string)
}

#GkeObservation: {
	// Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
	cluster?: null | string @go(Cluster,*string)

	// The location for the resource
	location?: null | string @go(Location,*string)

	// Required. The namespace the GKE service is running in.
	namespace?: null | string @go(Namespace,*string)

	// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	path?: null | string @go(Path,*string)

	// Required. Name of the GKE service.
	service?: null | string @go(Service,*string)
}

#GkeParameters: {
	// Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
	// +kubebuilder:validation:Optional
	cluster?: null | string @go(Cluster,*string)

	// The location for the resource
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// Required. The namespace the GKE service is running in.
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Required. Name of the GKE service.
	// +kubebuilder:validation:Optional
	service?: null | string @go(Service,*string)
}

#MatchingCriteriaInitParameters: {
	// Required. The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. All triggers MUST provide a filter for the 'type' attribute.
	attribute?: null | string @go(Attribute,*string)

	// Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is match-path-pattern.
	operator?: null | string @go(Operator,*string)

	// Required. The value for the attribute. See https://cloud.google.com/eventarc/docs/creating-triggers#trigger-gcloud for available values.
	value?: null | string @go(Value,*string)
}

#MatchingCriteriaObservation: {
	// Required. The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. All triggers MUST provide a filter for the 'type' attribute.
	attribute?: null | string @go(Attribute,*string)

	// Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is match-path-pattern.
	operator?: null | string @go(Operator,*string)

	// Required. The value for the attribute. See https://cloud.google.com/eventarc/docs/creating-triggers#trigger-gcloud for available values.
	value?: null | string @go(Value,*string)
}

#MatchingCriteriaParameters: {
	// Required. The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. All triggers MUST provide a filter for the 'type' attribute.
	// +kubebuilder:validation:Optional
	attribute?: null | string @go(Attribute,*string)

	// Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is match-path-pattern.
	// +kubebuilder:validation:Optional
	operator?: null | string @go(Operator,*string)

	// Required. The value for the attribute. See https://cloud.google.com/eventarc/docs/creating-triggers#trigger-gcloud for available values.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#PubsubInitParameters: {
	// Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: projects/{PROJECT_ID}/topics/{TOPIC_NAME}. You may set an existing topic for triggers of the type google.cloud.pubsub.topic.v1.messagePublished only. The topic you provide here will not be deleted by Eventarc at trigger deletion.
	topic?: null | string @go(Topic,*string)
}

#PubsubObservation: {
	// Output only. The name of the Pub/Sub subscription created and managed by Eventarc system as a transport for the event delivery. Format: projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}.
	subscription?: null | string @go(Subscription,*string)

	// Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: projects/{PROJECT_ID}/topics/{TOPIC_NAME}. You may set an existing topic for triggers of the type google.cloud.pubsub.topic.v1.messagePublished only. The topic you provide here will not be deleted by Eventarc at trigger deletion.
	topic?: null | string @go(Topic,*string)
}

#PubsubParameters: {
	// Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: projects/{PROJECT_ID}/topics/{TOPIC_NAME}. You may set an existing topic for triggers of the type google.cloud.pubsub.topic.v1.messagePublished only. The topic you provide here will not be deleted by Eventarc at trigger deletion.
	// +kubebuilder:validation:Optional
	topic?: null | string @go(Topic,*string)
}

#TransportInitParameters: {
	// The Pub/Sub topic and subscription used by Eventarc as delivery intermediary.
	pubsub?: [...#PubsubInitParameters] @go(Pubsub,[]PubsubInitParameters)
}

#TransportObservation: {
	// The Pub/Sub topic and subscription used by Eventarc as delivery intermediary.
	pubsub?: [...#PubsubObservation] @go(Pubsub,[]PubsubObservation)
}

#TransportParameters: {
	// The Pub/Sub topic and subscription used by Eventarc as delivery intermediary.
	// +kubebuilder:validation:Optional
	pubsub?: [...#PubsubParameters] @go(Pubsub,[]PubsubParameters)
}

#TriggerInitParameters: {
	// Optional. The name of the channel associated with the trigger in projects/{project}/locations/{location}/channels/{channel} format. You must provide a channel to receive events from Eventarc SaaS partners.
	channel?: null | string @go(Channel,*string)

	// Required. Destination specifies where the events should be sent to.
	destination?: [...#DestinationInitParameters] @go(Destination,[]DestinationInitParameters)
	eventDataContentType?: null | string @go(EventDataContentType,*string)

	// Optional. User labels attached to the triggers that can be used to group resources.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Required. null The list of filters that applies to event attributes. Only events that match all the provided filters will be sent to the destination.
	matchingCriteria?: [...#MatchingCriteriaInitParameters] @go(MatchingCriteria,[]MatchingCriteriaInitParameters)

	// The project for the resource
	project?: null | string @go(Project,*string)

	// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have iam.serviceAccounts.actAs permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have roles/eventarc.eventReceiver IAM role.
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
	transport?: [...#TransportInitParameters] @go(Transport,[]TransportInitParameters)
}

#TriggerObservation: {
	// Optional. The name of the channel associated with the trigger in projects/{project}/locations/{location}/channels/{channel} format. You must provide a channel to receive events from Eventarc SaaS partners.
	channel?: null | string @go(Channel,*string)

	// Output only. The reason(s) why a trigger is in FAILED state.
	conditions?: {[string]: null | string} @go(Conditions,map[string]*string)

	// Output only. The creation time.
	createTime?: null | string @go(CreateTime,*string)

	// Required. Destination specifies where the events should be sent to.
	destination?: [...#DestinationObservation] @go(Destination,[]DestinationObservation)

	// Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create requests to ensure the client has an up-to-date value before proceeding.
	etag?:                 null | string @go(Etag,*string)
	eventDataContentType?: null | string @go(EventDataContentType,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/triggers/{{name}}
	id?: null | string @go(ID,*string)

	// Optional. User labels attached to the triggers that can be used to group resources.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The location for the resource
	location?: null | string @go(Location,*string)

	// Required. null The list of filters that applies to event attributes. Only events that match all the provided filters will be sent to the destination.
	matchingCriteria?: [...#MatchingCriteriaObservation] @go(MatchingCriteria,[]MatchingCriteriaObservation)

	// The project for the resource
	project?: null | string @go(Project,*string)

	// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have iam.serviceAccounts.actAs permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have roles/eventarc.eventReceiver IAM role.
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
	transport?: [...#TransportObservation] @go(Transport,[]TransportObservation)

	// Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	uid?: null | string @go(UID,*string)

	// Output only. The last-modified time.
	updateTime?: null | string @go(UpdateTime,*string)
}

#TriggerParameters: {
	// Optional. The name of the channel associated with the trigger in projects/{project}/locations/{location}/channels/{channel} format. You must provide a channel to receive events from Eventarc SaaS partners.
	// +kubebuilder:validation:Optional
	channel?: null | string @go(Channel,*string)

	// Required. Destination specifies where the events should be sent to.
	// +kubebuilder:validation:Optional
	destination?: [...#DestinationParameters] @go(Destination,[]DestinationParameters)

	// +kubebuilder:validation:Optional
	eventDataContentType?: null | string @go(EventDataContentType,*string)

	// Optional. User labels attached to the triggers that can be used to group resources.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The location for the resource
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// Required. null The list of filters that applies to event attributes. Only events that match all the provided filters will be sent to the destination.
	// +kubebuilder:validation:Optional
	matchingCriteria?: [...#MatchingCriteriaParameters] @go(MatchingCriteria,[]MatchingCriteriaParameters)

	// The project for the resource
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have iam.serviceAccounts.actAs permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have roles/eventarc.eventReceiver IAM role.
	// +kubebuilder:validation:Optional
	serviceAccount?: null | string @go(ServiceAccount,*string)

	// Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
	// +kubebuilder:validation:Optional
	transport?: [...#TransportParameters] @go(Transport,[]TransportParameters)
}

// TriggerSpec defines the desired state of Trigger
#TriggerSpec: {
	forProvider: #TriggerParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TriggerInitParameters @go(InitProvider)
}

// TriggerStatus defines the observed state of Trigger.
#TriggerStatus: {
	atProvider?: #TriggerObservation @go(AtProvider)
}

// Trigger is the Schema for the Triggers API. The Eventarc Trigger resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Trigger: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) && has(self.initProvider.destination))",message="spec.forProvider.destination is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.matchingCriteria) || (has(self.initProvider) && has(self.initProvider.matchingCriteria))",message="spec.forProvider.matchingCriteria is a required parameter"
	spec:    #TriggerSpec   @go(Spec)
	status?: #TriggerStatus @go(Status)
}

// TriggerList contains a list of Triggers
#TriggerList: {
	items: [...#Trigger] @go(Items,[]Trigger)
}
