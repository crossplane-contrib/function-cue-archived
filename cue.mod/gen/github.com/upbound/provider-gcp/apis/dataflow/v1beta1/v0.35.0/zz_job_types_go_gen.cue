// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/dataflow/v1beta1

package v1beta1

#JobInitParameters: {
	// List of experiments that should be used by the job. An example value is ["enable_stackdriver_agent_metrics"].
	additionalExperiments?: [...null | string] @go(AdditionalExperiments,[]*string)

	// Enable/disable the use of Streaming Engine for the job. Note that Streaming Engine is enabled by default for pipelines developed against the Beam SDK for Python v2.21.0 or later when using Python 3.
	enableStreamingEngine?: null | bool @go(EnableStreamingEngine,*bool)

	// The configuration for VM IPs.  Options are "WORKER_IP_PUBLIC" or "WORKER_IP_PRIVATE".
	ipConfiguration?: null | string @go(IPConfiguration,*string)

	// The name for the Cloud KMS key for the job. Key format is: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// User labels to be specified for the job. Keys and values should follow the restrictions
	// specified in the labeling restrictions page.
	// NOTE: Google-provided Dataflow templates often provide default labels that begin with goog-dataflow-provided.
	// Unless explicitly set in config, these labels will be ignored to prevent diffs on re-apply.
	labels?: {[string]: string} @go(Labels,map[string]string)

	// The machine type to use for the job.
	machineType?: null | string @go(MachineType,*string)

	// The number of workers permitted to work on the job.  More workers may improve processing speed at additional cost.
	maxWorkers?: null | float64 @go(MaxWorkers,*float64)

	// A unique name for the resource, required by Dataflow.
	name?: null | string @go(Name,*string)

	// The network to which VMs will be assigned. If it is not provided, "default" will be used.
	network?: null | string @go(Network,*string)

	// One of "drain" or "cancel".  See above note.
	onDelete?: null | string @go(OnDelete,*string)

	// Key/Value pairs to be passed to the Dataflow job (as used in the template).
	parameters?: {[string]: string} @go(Parameters,map[string]string)

	// The project in which the resource belongs. If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The region in which the created job should run.
	region?: null | string @go(Region,*string)

	// The Service Account email used to create the job.
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// See above note.
	skipWaitOnJobTermination?: null | bool @go(SkipWaitOnJobTermination,*bool)

	// The subnetwork to which VMs will be assigned. Should be of the form "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL. For example "googleapis.com/compute/v1/projects/PROJECT_ID/regions/REGION/subnetworks/SUBNET_NAME"
	subnetwork?: null | string @go(Subnetwork,*string)

	// A writeable location on GCS for the Dataflow job to dump its temporary data.
	tempGcsLocation?: null | string @go(TempGcsLocation,*string)

	// The GCS path to the Dataflow job template.
	templateGcsPath?: null | string @go(TemplateGcsPath,*string)

	// Only applicable when updating a pipeline. Map of transform name prefixes of the job to be replaced with the corresponding name prefixes of the new job. This field is not used outside of update.
	transformNameMapping?: {[string]: string} @go(TransformNameMapping,map[string]string)

	// The zone in which the created job should run. If it is not provided, the provider zone is used.
	zone?: null | string @go(Zone,*string)
}

#JobObservation: {
	// List of experiments that should be used by the job. An example value is ["enable_stackdriver_agent_metrics"].
	additionalExperiments?: [...null | string] @go(AdditionalExperiments,[]*string)

	// Enable/disable the use of Streaming Engine for the job. Note that Streaming Engine is enabled by default for pipelines developed against the Beam SDK for Python v2.21.0 or later when using Python 3.
	enableStreamingEngine?: null | bool   @go(EnableStreamingEngine,*bool)
	id?:                    null | string @go(ID,*string)

	// The configuration for VM IPs.  Options are "WORKER_IP_PUBLIC" or "WORKER_IP_PRIVATE".
	ipConfiguration?: null | string @go(IPConfiguration,*string)

	// The unique ID of this job.
	jobId?: null | string @go(JobID,*string)

	// The name for the Cloud KMS key for the job. Key format is: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// User labels to be specified for the job. Keys and values should follow the restrictions
	// specified in the labeling restrictions page.
	// NOTE: Google-provided Dataflow templates often provide default labels that begin with goog-dataflow-provided.
	// Unless explicitly set in config, these labels will be ignored to prevent diffs on re-apply.
	labels?: {[string]: string} @go(Labels,map[string]string)

	// The machine type to use for the job.
	machineType?: null | string @go(MachineType,*string)

	// The number of workers permitted to work on the job.  More workers may improve processing speed at additional cost.
	maxWorkers?: null | float64 @go(MaxWorkers,*float64)

	// A unique name for the resource, required by Dataflow.
	name?: null | string @go(Name,*string)

	// The network to which VMs will be assigned. If it is not provided, "default" will be used.
	network?: null | string @go(Network,*string)

	// One of "drain" or "cancel".  See above note.
	onDelete?: null | string @go(OnDelete,*string)

	// Key/Value pairs to be passed to the Dataflow job (as used in the template).
	parameters?: {[string]: string} @go(Parameters,map[string]string)

	// The project in which the resource belongs. If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The region in which the created job should run.
	region?: null | string @go(Region,*string)

	// The Service Account email used to create the job.
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// See above note.
	skipWaitOnJobTermination?: null | bool @go(SkipWaitOnJobTermination,*bool)

	// The current state of the resource, selected from the JobState enum
	state?: null | string @go(State,*string)

	// The subnetwork to which VMs will be assigned. Should be of the form "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL. For example "googleapis.com/compute/v1/projects/PROJECT_ID/regions/REGION/subnetworks/SUBNET_NAME"
	subnetwork?: null | string @go(Subnetwork,*string)

	// A writeable location on GCS for the Dataflow job to dump its temporary data.
	tempGcsLocation?: null | string @go(TempGcsLocation,*string)

	// The GCS path to the Dataflow job template.
	templateGcsPath?: null | string @go(TemplateGcsPath,*string)

	// Only applicable when updating a pipeline. Map of transform name prefixes of the job to be replaced with the corresponding name prefixes of the new job. This field is not used outside of update.
	transformNameMapping?: {[string]: string} @go(TransformNameMapping,map[string]string)

	// The type of this job, selected from the JobType enum
	type?: null | string @go(Type,*string)

	// The zone in which the created job should run. If it is not provided, the provider zone is used.
	zone?: null | string @go(Zone,*string)
}

#JobParameters: {
	// List of experiments that should be used by the job. An example value is ["enable_stackdriver_agent_metrics"].
	// +kubebuilder:validation:Optional
	additionalExperiments?: [...null | string] @go(AdditionalExperiments,[]*string)

	// Enable/disable the use of Streaming Engine for the job. Note that Streaming Engine is enabled by default for pipelines developed against the Beam SDK for Python v2.21.0 or later when using Python 3.
	// +kubebuilder:validation:Optional
	enableStreamingEngine?: null | bool @go(EnableStreamingEngine,*bool)

	// The configuration for VM IPs.  Options are "WORKER_IP_PUBLIC" or "WORKER_IP_PRIVATE".
	// +kubebuilder:validation:Optional
	ipConfiguration?: null | string @go(IPConfiguration,*string)

	// The name for the Cloud KMS key for the job. Key format is: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
	// +kubebuilder:validation:Optional
	kmsKeyName?: null | string @go(KMSKeyName,*string)

	// User labels to be specified for the job. Keys and values should follow the restrictions
	// specified in the labeling restrictions page.
	// NOTE: Google-provided Dataflow templates often provide default labels that begin with goog-dataflow-provided.
	// Unless explicitly set in config, these labels will be ignored to prevent diffs on re-apply.
	// +kubebuilder:validation:Optional
	labels?: {[string]: string} @go(Labels,map[string]string)

	// The machine type to use for the job.
	// +kubebuilder:validation:Optional
	machineType?: null | string @go(MachineType,*string)

	// The number of workers permitted to work on the job.  More workers may improve processing speed at additional cost.
	// +kubebuilder:validation:Optional
	maxWorkers?: null | float64 @go(MaxWorkers,*float64)

	// A unique name for the resource, required by Dataflow.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The network to which VMs will be assigned. If it is not provided, "default" will be used.
	// +kubebuilder:validation:Optional
	network?: null | string @go(Network,*string)

	// One of "drain" or "cancel".  See above note.
	// +kubebuilder:validation:Optional
	onDelete?: null | string @go(OnDelete,*string)

	// Key/Value pairs to be passed to the Dataflow job (as used in the template).
	// +kubebuilder:validation:Optional
	parameters?: {[string]: string} @go(Parameters,map[string]string)

	// The project in which the resource belongs. If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The region in which the created job should run.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// The Service Account email used to create the job.
	// +kubebuilder:validation:Optional
	serviceAccountEmail?: null | string @go(ServiceAccountEmail,*string)

	// See above note.
	// +kubebuilder:validation:Optional
	skipWaitOnJobTermination?: null | bool @go(SkipWaitOnJobTermination,*bool)

	// The subnetwork to which VMs will be assigned. Should be of the form "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL. For example "googleapis.com/compute/v1/projects/PROJECT_ID/regions/REGION/subnetworks/SUBNET_NAME"
	// +kubebuilder:validation:Optional
	subnetwork?: null | string @go(Subnetwork,*string)

	// A writeable location on GCS for the Dataflow job to dump its temporary data.
	// +kubebuilder:validation:Optional
	tempGcsLocation?: null | string @go(TempGcsLocation,*string)

	// The GCS path to the Dataflow job template.
	// +kubebuilder:validation:Optional
	templateGcsPath?: null | string @go(TemplateGcsPath,*string)

	// Only applicable when updating a pipeline. Map of transform name prefixes of the job to be replaced with the corresponding name prefixes of the new job. This field is not used outside of update.
	// +kubebuilder:validation:Optional
	transformNameMapping?: {[string]: string} @go(TransformNameMapping,map[string]string)

	// The zone in which the created job should run. If it is not provided, the provider zone is used.
	// +kubebuilder:validation:Optional
	zone?: null | string @go(Zone,*string)
}

// JobSpec defines the desired state of Job
#JobSpec: {
	forProvider: #JobParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #JobInitParameters @go(InitProvider)
}

// JobStatus defines the observed state of Job.
#JobStatus: {
	atProvider?: #JobObservation @go(AtProvider)
}

// Job is the Schema for the Jobs API. Creates a job in Dataflow according to a provided config file.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Job: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tempGcsLocation) || has(self.initProvider.tempGcsLocation)",message="tempGcsLocation is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.templateGcsPath) || has(self.initProvider.templateGcsPath)",message="templateGcsPath is a required parameter"
	spec:    #JobSpec   @go(Spec)
	status?: #JobStatus @go(Status)
}

// JobList contains a list of Jobs
#JobList: {
	items: [...#Job] @go(Items,[]Job)
}
