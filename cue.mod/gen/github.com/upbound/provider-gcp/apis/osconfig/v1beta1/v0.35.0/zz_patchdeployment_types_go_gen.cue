// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/osconfig/v1beta1

package v1beta1

#GcsObjectInitParameters: {
	// Bucket of the Cloud Storage object.
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	object?: null | string @go(Object,*string)
}

#GcsObjectObservation: {
	// Bucket of the Cloud Storage object.
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	object?: null | string @go(Object,*string)
}

#GcsObjectParameters: {
	// Bucket of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	// +kubebuilder:validation:Optional
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	object?: null | string @go(Object,*string)
}

#GroupLabelsInitParameters: {
	// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter
	labels?: {[string]: null | string} @go(Labels,map[string]*string)
}

#GroupLabelsObservation: {
	// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter
	labels?: {[string]: null | string} @go(Labels,map[string]*string)
}

#GroupLabelsParameters: {
	// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)
}

#LinuxExecStepConfigGcsObjectInitParameters: {
	// Bucket of the Cloud Storage object.
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	object?: null | string @go(Object,*string)
}

#LinuxExecStepConfigGcsObjectObservation: {
	// Bucket of the Cloud Storage object.
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	object?: null | string @go(Object,*string)
}

#LinuxExecStepConfigGcsObjectParameters: {
	// Bucket of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	// +kubebuilder:validation:Optional
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	object?: null | string @go(Object,*string)
}

#LinuxExecStepConfigInitParameters: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	gcsObject?: [...#GcsObjectInitParameters] @go(GcsObject,[]GcsObjectInitParameters)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	localPath?: null | string @go(LocalPath,*string)
}

#LinuxExecStepConfigObservation: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	gcsObject?: [...#GcsObjectObservation] @go(GcsObject,[]GcsObjectObservation)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	localPath?: null | string @go(LocalPath,*string)
}

#LinuxExecStepConfigParameters: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	// +kubebuilder:validation:Optional
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	gcsObject?: [...#GcsObjectParameters] @go(GcsObject,[]GcsObjectParameters)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	// +kubebuilder:validation:Optional
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	// +kubebuilder:validation:Optional
	localPath?: null | string @go(LocalPath,*string)
}

#MonthlyInitParameters: {
	// One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month.
	// Months without the target day will be skipped. For example, a schedule to run "every month on the 31st"
	// will not run in February, April, June, etc.
	monthDay?: null | float64 @go(MonthDay,*float64)

	// Week day in a month.
	// Structure is documented below.
	weekDayOfMonth?: [...#WeekDayOfMonthInitParameters] @go(WeekDayOfMonth,[]WeekDayOfMonthInitParameters)
}

#MonthlyObservation: {
	// One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month.
	// Months without the target day will be skipped. For example, a schedule to run "every month on the 31st"
	// will not run in February, April, June, etc.
	monthDay?: null | float64 @go(MonthDay,*float64)

	// Week day in a month.
	// Structure is documented below.
	weekDayOfMonth?: [...#WeekDayOfMonthObservation] @go(WeekDayOfMonth,[]WeekDayOfMonthObservation)
}

#MonthlyParameters: {
	// One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month.
	// Months without the target day will be skipped. For example, a schedule to run "every month on the 31st"
	// will not run in February, April, June, etc.
	// +kubebuilder:validation:Optional
	monthDay?: null | float64 @go(MonthDay,*float64)

	// Week day in a month.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	weekDayOfMonth?: [...#WeekDayOfMonthParameters] @go(WeekDayOfMonth,[]WeekDayOfMonthParameters)
}

#OneTimeScheduleInitParameters: {
	// The desired patch job execution time. A timestamp in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	executeTime?: null | string @go(ExecuteTime,*string)
}

#OneTimeScheduleObservation: {
	// The desired patch job execution time. A timestamp in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	executeTime?: null | string @go(ExecuteTime,*string)
}

#OneTimeScheduleParameters: {
	// The desired patch job execution time. A timestamp in RFC3339 UTC "Zulu" format,
	// accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	executeTime?: null | string @go(ExecuteTime,*string)
}

#PatchConfigAptInitParameters: {
	// List of packages to exclude from update.
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of packages to be updated. These are the only packages that will be updated.
	// If these packages are not installed, they will be ignored. This field cannot be specified with
	// any other patch configuration fields.
	exclusivePackages?: [...null | string] @go(ExclusivePackages,[]*string)

	// By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead.
	// Possible values are: DIST, UPGRADE.
	type?: null | string @go(Type,*string)
}

#PatchConfigAptObservation: {
	// List of packages to exclude from update.
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of packages to be updated. These are the only packages that will be updated.
	// If these packages are not installed, they will be ignored. This field cannot be specified with
	// any other patch configuration fields.
	exclusivePackages?: [...null | string] @go(ExclusivePackages,[]*string)

	// By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead.
	// Possible values are: DIST, UPGRADE.
	type?: null | string @go(Type,*string)
}

#PatchConfigAptParameters: {
	// List of packages to exclude from update.
	// +kubebuilder:validation:Optional
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of packages to be updated. These are the only packages that will be updated.
	// If these packages are not installed, they will be ignored. This field cannot be specified with
	// any other patch configuration fields.
	// +kubebuilder:validation:Optional
	exclusivePackages?: [...null | string] @go(ExclusivePackages,[]*string)

	// By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead.
	// Possible values are: DIST, UPGRADE.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#PatchConfigGooInitParameters: {
	// goo update settings. Use this setting to override the default goo patch rules.
	enabled?: null | bool @go(Enabled,*bool)
}

#PatchConfigGooObservation: {
	// goo update settings. Use this setting to override the default goo patch rules.
	enabled?: null | bool @go(Enabled,*bool)
}

#PatchConfigGooParameters: {
	// goo update settings. Use this setting to override the default goo patch rules.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)
}

#PatchConfigInitParameters: {
	// Apt update settings. Use this setting to override the default apt patch rules.
	// Structure is documented below.
	apt?: [...#PatchConfigAptInitParameters] @go(Apt,[]PatchConfigAptInitParameters)

	// goo update settings. Use this setting to override the default goo patch rules.
	// Structure is documented below.
	goo?: [...#PatchConfigGooInitParameters] @go(Goo,[]PatchConfigGooInitParameters)

	// Allows the patch job to run on Managed instance groups (MIGs).
	migInstancesAllowed?: null | bool @go(MigInstancesAllowed,*bool)

	// The ExecStep to run after the patch update.
	// Structure is documented below.
	postStep?: [...#PostStepInitParameters] @go(PostStep,[]PostStepInitParameters)

	// The ExecStep to run before the patch update.
	// Structure is documented below.
	preStep?: [...#PreStepInitParameters] @go(PreStep,[]PreStepInitParameters)

	// Post-patch reboot settings.
	// Possible values are: DEFAULT, ALWAYS, NEVER.
	rebootConfig?: null | string @go(RebootConfig,*string)

	// Windows update settings. Use this setting to override the default Windows patch rules.
	// Structure is documented below.
	windowsUpdate?: [...#WindowsUpdateInitParameters] @go(WindowsUpdate,[]WindowsUpdateInitParameters)

	// Yum update settings. Use this setting to override the default yum patch rules.
	// Structure is documented below.
	yum?: [...#PatchConfigYumInitParameters] @go(Yum,[]PatchConfigYumInitParameters)

	// zypper update settings. Use this setting to override the default zypper patch rules.
	// Structure is documented below.
	zypper?: [...#PatchConfigZypperInitParameters] @go(Zypper,[]PatchConfigZypperInitParameters)
}

#PatchConfigObservation: {
	// Apt update settings. Use this setting to override the default apt patch rules.
	// Structure is documented below.
	apt?: [...#PatchConfigAptObservation] @go(Apt,[]PatchConfigAptObservation)

	// goo update settings. Use this setting to override the default goo patch rules.
	// Structure is documented below.
	goo?: [...#PatchConfigGooObservation] @go(Goo,[]PatchConfigGooObservation)

	// Allows the patch job to run on Managed instance groups (MIGs).
	migInstancesAllowed?: null | bool @go(MigInstancesAllowed,*bool)

	// The ExecStep to run after the patch update.
	// Structure is documented below.
	postStep?: [...#PostStepObservation] @go(PostStep,[]PostStepObservation)

	// The ExecStep to run before the patch update.
	// Structure is documented below.
	preStep?: [...#PreStepObservation] @go(PreStep,[]PreStepObservation)

	// Post-patch reboot settings.
	// Possible values are: DEFAULT, ALWAYS, NEVER.
	rebootConfig?: null | string @go(RebootConfig,*string)

	// Windows update settings. Use this setting to override the default Windows patch rules.
	// Structure is documented below.
	windowsUpdate?: [...#WindowsUpdateObservation] @go(WindowsUpdate,[]WindowsUpdateObservation)

	// Yum update settings. Use this setting to override the default yum patch rules.
	// Structure is documented below.
	yum?: [...#PatchConfigYumObservation] @go(Yum,[]PatchConfigYumObservation)

	// zypper update settings. Use this setting to override the default zypper patch rules.
	// Structure is documented below.
	zypper?: [...#PatchConfigZypperObservation] @go(Zypper,[]PatchConfigZypperObservation)
}

#PatchConfigParameters: {
	// Apt update settings. Use this setting to override the default apt patch rules.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	apt?: [...#PatchConfigAptParameters] @go(Apt,[]PatchConfigAptParameters)

	// goo update settings. Use this setting to override the default goo patch rules.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	goo?: [...#PatchConfigGooParameters] @go(Goo,[]PatchConfigGooParameters)

	// Allows the patch job to run on Managed instance groups (MIGs).
	// +kubebuilder:validation:Optional
	migInstancesAllowed?: null | bool @go(MigInstancesAllowed,*bool)

	// The ExecStep to run after the patch update.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	postStep?: [...#PostStepParameters] @go(PostStep,[]PostStepParameters)

	// The ExecStep to run before the patch update.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	preStep?: [...#PreStepParameters] @go(PreStep,[]PreStepParameters)

	// Post-patch reboot settings.
	// Possible values are: DEFAULT, ALWAYS, NEVER.
	// +kubebuilder:validation:Optional
	rebootConfig?: null | string @go(RebootConfig,*string)

	// Windows update settings. Use this setting to override the default Windows patch rules.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	windowsUpdate?: [...#WindowsUpdateParameters] @go(WindowsUpdate,[]WindowsUpdateParameters)

	// Yum update settings. Use this setting to override the default yum patch rules.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	yum?: [...#PatchConfigYumParameters] @go(Yum,[]PatchConfigYumParameters)

	// zypper update settings. Use this setting to override the default zypper patch rules.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	zypper?: [...#PatchConfigZypperParameters] @go(Zypper,[]PatchConfigZypperParameters)
}

#PatchConfigYumInitParameters: {
	// List of packages to exclude from update.
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of packages to be updated. These are the only packages that will be updated.
	// If these packages are not installed, they will be ignored. This field cannot be specified with
	// any other patch configuration fields.
	exclusivePackages?: [...null | string] @go(ExclusivePackages,[]*string)

	// Will cause patch to run yum update-minimal instead.
	minimal?: null | bool @go(Minimal,*bool)

	// Adds the --security flag to yum update. Not supported on all platforms.
	security?: null | bool @go(Security,*bool)
}

#PatchConfigYumObservation: {
	// List of packages to exclude from update.
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of packages to be updated. These are the only packages that will be updated.
	// If these packages are not installed, they will be ignored. This field cannot be specified with
	// any other patch configuration fields.
	exclusivePackages?: [...null | string] @go(ExclusivePackages,[]*string)

	// Will cause patch to run yum update-minimal instead.
	minimal?: null | bool @go(Minimal,*bool)

	// Adds the --security flag to yum update. Not supported on all platforms.
	security?: null | bool @go(Security,*bool)
}

#PatchConfigYumParameters: {
	// List of packages to exclude from update.
	// +kubebuilder:validation:Optional
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of packages to be updated. These are the only packages that will be updated.
	// If these packages are not installed, they will be ignored. This field cannot be specified with
	// any other patch configuration fields.
	// +kubebuilder:validation:Optional
	exclusivePackages?: [...null | string] @go(ExclusivePackages,[]*string)

	// Will cause patch to run yum update-minimal instead.
	// +kubebuilder:validation:Optional
	minimal?: null | bool @go(Minimal,*bool)

	// Adds the --security flag to yum update. Not supported on all platforms.
	// +kubebuilder:validation:Optional
	security?: null | bool @go(Security,*bool)
}

#PatchConfigZypperInitParameters: {
	// Install only patches with these categories. Common categories include security, recommended, and feature.
	categories?: [...null | string] @go(Categories,[]*string)

	// List of packages to exclude from update.
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command.
	// This field must not be used with any other patch configuration fields.
	exclusivePatches?: [...null | string] @go(ExclusivePatches,[]*string)

	// Install only patches with these severities. Common severities include critical, important, moderate, and low.
	severities?: [...null | string] @go(Severities,[]*string)

	// Adds the --with-optional flag to zypper patch.
	withOptional?: null | bool @go(WithOptional,*bool)

	// Adds the --with-update flag, to zypper patch.
	withUpdate?: null | bool @go(WithUpdate,*bool)
}

#PatchConfigZypperObservation: {
	// Install only patches with these categories. Common categories include security, recommended, and feature.
	categories?: [...null | string] @go(Categories,[]*string)

	// List of packages to exclude from update.
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command.
	// This field must not be used with any other patch configuration fields.
	exclusivePatches?: [...null | string] @go(ExclusivePatches,[]*string)

	// Install only patches with these severities. Common severities include critical, important, moderate, and low.
	severities?: [...null | string] @go(Severities,[]*string)

	// Adds the --with-optional flag to zypper patch.
	withOptional?: null | bool @go(WithOptional,*bool)

	// Adds the --with-update flag, to zypper patch.
	withUpdate?: null | bool @go(WithUpdate,*bool)
}

#PatchConfigZypperParameters: {
	// Install only patches with these categories. Common categories include security, recommended, and feature.
	// +kubebuilder:validation:Optional
	categories?: [...null | string] @go(Categories,[]*string)

	// List of packages to exclude from update.
	// +kubebuilder:validation:Optional
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command.
	// This field must not be used with any other patch configuration fields.
	// +kubebuilder:validation:Optional
	exclusivePatches?: [...null | string] @go(ExclusivePatches,[]*string)

	// Install only patches with these severities. Common severities include critical, important, moderate, and low.
	// +kubebuilder:validation:Optional
	severities?: [...null | string] @go(Severities,[]*string)

	// Adds the --with-optional flag to zypper patch.
	// +kubebuilder:validation:Optional
	withOptional?: null | bool @go(WithOptional,*bool)

	// Adds the --with-update flag, to zypper patch.
	// +kubebuilder:validation:Optional
	withUpdate?: null | bool @go(WithUpdate,*bool)
}

#PatchDeploymentInitParameters: {
	// Description of the patch deployment. Length of the description is limited to 1024 characters.
	description?: null | string @go(Description,*string)

	// Duration of the patch. After the duration ends, the patch times out.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"
	duration?: null | string @go(Duration,*string)

	// VM instances to patch.
	// Structure is documented below.
	instanceFilter?: [...#PatchDeploymentInstanceFilterInitParameters] @go(InstanceFilter,[]PatchDeploymentInstanceFilterInitParameters)

	// Schedule a one-time execution.
	// Structure is documented below.
	oneTimeSchedule?: [...#OneTimeScheduleInitParameters] @go(OneTimeSchedule,[]OneTimeScheduleInitParameters)

	// Patch configuration that is applied.
	// Structure is documented below.
	patchConfig?: [...#PatchConfigInitParameters] @go(PatchConfig,[]PatchConfigInitParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Schedule recurring executions.
	// Structure is documented below.
	recurringSchedule?: [...#RecurringScheduleInitParameters] @go(RecurringSchedule,[]RecurringScheduleInitParameters)

	// Rollout strategy of the patch job.
	// Structure is documented below.
	rollout?: [...#PatchDeploymentRolloutInitParameters] @go(Rollout,[]PatchDeploymentRolloutInitParameters)
}

#PatchDeploymentInstanceFilterInitParameters: {
	// Target all VM instances in the project. If true, no other criteria is permitted.
	all?: null | bool @go(All,*bool)

	// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
	// Structure is documented below.
	groupLabels?: [...#GroupLabelsInitParameters] @go(GroupLabels,[]GroupLabelsInitParameters)

	// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group
	// VMs when targeting configs, for example prefix="prod-".
	instanceNamePrefixes?: [...null | string] @go(InstanceNamePrefixes,[]*string)

	// Targets any of the VM instances specified. Instances are specified by their URI in the form zones/{{zone}}/instances/{{instance_name}},
	// projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}, or
	// https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}
	instances?: [...null | string] @go(Instances,[]*string)

	// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
	zones?: [...null | string] @go(Zones,[]*string)
}

#PatchDeploymentInstanceFilterObservation: {
	// Target all VM instances in the project. If true, no other criteria is permitted.
	all?: null | bool @go(All,*bool)

	// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
	// Structure is documented below.
	groupLabels?: [...#GroupLabelsObservation] @go(GroupLabels,[]GroupLabelsObservation)

	// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group
	// VMs when targeting configs, for example prefix="prod-".
	instanceNamePrefixes?: [...null | string] @go(InstanceNamePrefixes,[]*string)

	// Targets any of the VM instances specified. Instances are specified by their URI in the form zones/{{zone}}/instances/{{instance_name}},
	// projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}, or
	// https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}
	instances?: [...null | string] @go(Instances,[]*string)

	// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
	zones?: [...null | string] @go(Zones,[]*string)
}

#PatchDeploymentInstanceFilterParameters: {
	// Target all VM instances in the project. If true, no other criteria is permitted.
	// +kubebuilder:validation:Optional
	all?: null | bool @go(All,*bool)

	// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	groupLabels?: [...#GroupLabelsParameters] @go(GroupLabels,[]GroupLabelsParameters)

	// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group
	// VMs when targeting configs, for example prefix="prod-".
	// +kubebuilder:validation:Optional
	instanceNamePrefixes?: [...null | string] @go(InstanceNamePrefixes,[]*string)

	// Targets any of the VM instances specified. Instances are specified by their URI in the form zones/{{zone}}/instances/{{instance_name}},
	// projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}, or
	// https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}
	// +kubebuilder:validation:Optional
	instances?: [...null | string] @go(Instances,[]*string)

	// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
	// +kubebuilder:validation:Optional
	zones?: [...null | string] @go(Zones,[]*string)
}

#PatchDeploymentObservation: {
	// Time the patch deployment was created. Timestamp is in RFC3339 text format.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	createTime?: null | string @go(CreateTime,*string)

	// Description of the patch deployment. Length of the description is limited to 1024 characters.
	description?: null | string @go(Description,*string)

	// Duration of the patch. After the duration ends, the patch times out.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"
	duration?: null | string @go(Duration,*string)

	// an identifier for the resource with format {{name}}
	id?: null | string @go(ID,*string)

	// VM instances to patch.
	// Structure is documented below.
	instanceFilter?: [...#PatchDeploymentInstanceFilterObservation] @go(InstanceFilter,[]PatchDeploymentInstanceFilterObservation)

	// The last time a patch job was started by this deployment. Timestamp is in RFC3339 text format.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	lastExecuteTime?: null | string @go(LastExecuteTime,*string)

	// Unique name for the patch deployment resource in a project.
	// The patch deployment name is in the form: projects/{project_id}/patchDeployments/{patchDeploymentId}.
	name?: null | string @go(Name,*string)

	// Schedule a one-time execution.
	// Structure is documented below.
	oneTimeSchedule?: [...#OneTimeScheduleObservation] @go(OneTimeSchedule,[]OneTimeScheduleObservation)

	// Patch configuration that is applied.
	// Structure is documented below.
	patchConfig?: [...#PatchConfigObservation] @go(PatchConfig,[]PatchConfigObservation)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Schedule recurring executions.
	// Structure is documented below.
	recurringSchedule?: [...#RecurringScheduleObservation] @go(RecurringSchedule,[]RecurringScheduleObservation)

	// Rollout strategy of the patch job.
	// Structure is documented below.
	rollout?: [...#PatchDeploymentRolloutObservation] @go(Rollout,[]PatchDeploymentRolloutObservation)

	// Time the patch deployment was last updated. Timestamp is in RFC3339 text format.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	updateTime?: null | string @go(UpdateTime,*string)
}

#PatchDeploymentParameters: {
	// Description of the patch deployment. Length of the description is limited to 1024 characters.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Duration of the patch. After the duration ends, the patch times out.
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s"
	// +kubebuilder:validation:Optional
	duration?: null | string @go(Duration,*string)

	// VM instances to patch.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	instanceFilter?: [...#PatchDeploymentInstanceFilterParameters] @go(InstanceFilter,[]PatchDeploymentInstanceFilterParameters)

	// Schedule a one-time execution.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	oneTimeSchedule?: [...#OneTimeScheduleParameters] @go(OneTimeSchedule,[]OneTimeScheduleParameters)

	// Patch configuration that is applied.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	patchConfig?: [...#PatchConfigParameters] @go(PatchConfig,[]PatchConfigParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Schedule recurring executions.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	recurringSchedule?: [...#RecurringScheduleParameters] @go(RecurringSchedule,[]RecurringScheduleParameters)

	// Rollout strategy of the patch job.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	rollout?: [...#PatchDeploymentRolloutParameters] @go(Rollout,[]PatchDeploymentRolloutParameters)
}

#PatchDeploymentRolloutInitParameters: {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up.
	// During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps.
	// A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget.
	// For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone.
	// For example, if the disruption budget has a fixed value of 10, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
	// Structure is documented below.
	disruptionBudget?: [...#RolloutDisruptionBudgetInitParameters] @go(DisruptionBudget,[]RolloutDisruptionBudgetInitParameters)

	// Mode of the patch rollout.
	// Possible values are: ZONE_BY_ZONE, CONCURRENT_ZONES.
	mode?: null | string @go(Mode,*string)
}

#PatchDeploymentRolloutObservation: {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up.
	// During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps.
	// A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget.
	// For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone.
	// For example, if the disruption budget has a fixed value of 10, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
	// Structure is documented below.
	disruptionBudget?: [...#RolloutDisruptionBudgetObservation] @go(DisruptionBudget,[]RolloutDisruptionBudgetObservation)

	// Mode of the patch rollout.
	// Possible values are: ZONE_BY_ZONE, CONCURRENT_ZONES.
	mode?: null | string @go(Mode,*string)
}

#PatchDeploymentRolloutParameters: {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up.
	// During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps.
	// A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget.
	// For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone.
	// For example, if the disruption budget has a fixed value of 10, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	disruptionBudget?: [...#RolloutDisruptionBudgetParameters] @go(DisruptionBudget,[]RolloutDisruptionBudgetParameters)

	// Mode of the patch rollout.
	// Possible values are: ZONE_BY_ZONE, CONCURRENT_ZONES.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)
}

#PostStepInitParameters: {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	// Structure is documented below.
	linuxExecStepConfig?: [...#LinuxExecStepConfigInitParameters] @go(LinuxExecStepConfig,[]LinuxExecStepConfigInitParameters)

	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	// Structure is documented below.
	windowsExecStepConfig?: [...#WindowsExecStepConfigInitParameters] @go(WindowsExecStepConfig,[]WindowsExecStepConfigInitParameters)
}

#PostStepObservation: {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	// Structure is documented below.
	linuxExecStepConfig?: [...#LinuxExecStepConfigObservation] @go(LinuxExecStepConfig,[]LinuxExecStepConfigObservation)

	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	// Structure is documented below.
	windowsExecStepConfig?: [...#WindowsExecStepConfigObservation] @go(WindowsExecStepConfig,[]WindowsExecStepConfigObservation)
}

#PostStepParameters: {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	linuxExecStepConfig?: [...#LinuxExecStepConfigParameters] @go(LinuxExecStepConfig,[]LinuxExecStepConfigParameters)

	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	windowsExecStepConfig?: [...#WindowsExecStepConfigParameters] @go(WindowsExecStepConfig,[]WindowsExecStepConfigParameters)
}

#PreStepInitParameters: {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	// Structure is documented below.
	linuxExecStepConfig?: [...#PreStepLinuxExecStepConfigInitParameters] @go(LinuxExecStepConfig,[]PreStepLinuxExecStepConfigInitParameters)

	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	// Structure is documented below.
	windowsExecStepConfig?: [...#PreStepWindowsExecStepConfigInitParameters] @go(WindowsExecStepConfig,[]PreStepWindowsExecStepConfigInitParameters)
}

#PreStepLinuxExecStepConfigInitParameters: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	gcsObject?: [...#LinuxExecStepConfigGcsObjectInitParameters] @go(GcsObject,[]LinuxExecStepConfigGcsObjectInitParameters)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	localPath?: null | string @go(LocalPath,*string)
}

#PreStepLinuxExecStepConfigObservation: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	gcsObject?: [...#LinuxExecStepConfigGcsObjectObservation] @go(GcsObject,[]LinuxExecStepConfigGcsObjectObservation)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	localPath?: null | string @go(LocalPath,*string)
}

#PreStepLinuxExecStepConfigParameters: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	// +kubebuilder:validation:Optional
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	gcsObject?: [...#LinuxExecStepConfigGcsObjectParameters] @go(GcsObject,[]LinuxExecStepConfigGcsObjectParameters)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	// +kubebuilder:validation:Optional
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	// +kubebuilder:validation:Optional
	localPath?: null | string @go(LocalPath,*string)
}

#PreStepObservation: {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	// Structure is documented below.
	linuxExecStepConfig?: [...#PreStepLinuxExecStepConfigObservation] @go(LinuxExecStepConfig,[]PreStepLinuxExecStepConfigObservation)

	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	// Structure is documented below.
	windowsExecStepConfig?: [...#PreStepWindowsExecStepConfigObservation] @go(WindowsExecStepConfig,[]PreStepWindowsExecStepConfigObservation)
}

#PreStepParameters: {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	linuxExecStepConfig?: [...#PreStepLinuxExecStepConfigParameters] @go(LinuxExecStepConfig,[]PreStepLinuxExecStepConfigParameters)

	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	windowsExecStepConfig?: [...#PreStepWindowsExecStepConfigParameters] @go(WindowsExecStepConfig,[]PreStepWindowsExecStepConfigParameters)
}

#PreStepWindowsExecStepConfigGcsObjectInitParameters: {
	// Bucket of the Cloud Storage object.
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	object?: null | string @go(Object,*string)
}

#PreStepWindowsExecStepConfigGcsObjectObservation: {
	// Bucket of the Cloud Storage object.
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	object?: null | string @go(Object,*string)
}

#PreStepWindowsExecStepConfigGcsObjectParameters: {
	// Bucket of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	// +kubebuilder:validation:Optional
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	object?: null | string @go(Object,*string)
}

#PreStepWindowsExecStepConfigInitParameters: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	gcsObject?: [...#PreStepWindowsExecStepConfigGcsObjectInitParameters] @go(GcsObject,[]PreStepWindowsExecStepConfigGcsObjectInitParameters)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	localPath?: null | string @go(LocalPath,*string)
}

#PreStepWindowsExecStepConfigObservation: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	gcsObject?: [...#PreStepWindowsExecStepConfigGcsObjectObservation] @go(GcsObject,[]PreStepWindowsExecStepConfigGcsObjectObservation)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	localPath?: null | string @go(LocalPath,*string)
}

#PreStepWindowsExecStepConfigParameters: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	// +kubebuilder:validation:Optional
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	gcsObject?: [...#PreStepWindowsExecStepConfigGcsObjectParameters] @go(GcsObject,[]PreStepWindowsExecStepConfigGcsObjectParameters)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	// +kubebuilder:validation:Optional
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	// +kubebuilder:validation:Optional
	localPath?: null | string @go(LocalPath,*string)
}

#RecurringScheduleInitParameters: {
	// The end time at which a recurring patch deployment schedule is no longer active.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	endTime?: null | string @go(EndTime,*string)

	// Schedule with monthly executions.
	// Structure is documented below.
	monthly?: [...#MonthlyInitParameters] @go(Monthly,[]MonthlyInitParameters)

	// The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	startTime?: null | string @go(StartTime,*string)

	// Time of the day to run a recurring deployment.
	// Structure is documented below.
	timeOfDay?: [...#TimeOfDayInitParameters] @go(TimeOfDay,[]TimeOfDayInitParameters)

	// Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
	// determined by the chosen time zone.
	// Structure is documented below.
	timeZone?: [...#TimeZoneInitParameters] @go(TimeZone,[]TimeZoneInitParameters)

	// Schedule with weekly executions.
	// Structure is documented below.
	weekly?: [...#WeeklyInitParameters] @go(Weekly,[]WeeklyInitParameters)
}

#RecurringScheduleObservation: {
	// The end time at which a recurring patch deployment schedule is no longer active.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	endTime?: null | string @go(EndTime,*string)

	// (Output)
	// The time the last patch job ran successfully.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	lastExecuteTime?: null | string @go(LastExecuteTime,*string)

	// Schedule with monthly executions.
	// Structure is documented below.
	monthly?: [...#MonthlyObservation] @go(Monthly,[]MonthlyObservation)

	// (Output)
	// The time the next patch job is scheduled to run.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	nextExecuteTime?: null | string @go(NextExecuteTime,*string)

	// The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	startTime?: null | string @go(StartTime,*string)

	// Time of the day to run a recurring deployment.
	// Structure is documented below.
	timeOfDay?: [...#TimeOfDayObservation] @go(TimeOfDay,[]TimeOfDayObservation)

	// Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
	// determined by the chosen time zone.
	// Structure is documented below.
	timeZone?: [...#TimeZoneObservation] @go(TimeZone,[]TimeZoneObservation)

	// Schedule with weekly executions.
	// Structure is documented below.
	weekly?: [...#WeeklyObservation] @go(Weekly,[]WeeklyObservation)
}

#RecurringScheduleParameters: {
	// The end time at which a recurring patch deployment schedule is no longer active.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	endTime?: null | string @go(EndTime,*string)

	// Schedule with monthly executions.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	monthly?: [...#MonthlyParameters] @go(Monthly,[]MonthlyParameters)

	// The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment.
	// A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	startTime?: null | string @go(StartTime,*string)

	// Time of the day to run a recurring deployment.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeOfDay?: [...#TimeOfDayParameters] @go(TimeOfDay,[]TimeOfDayParameters)

	// Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are
	// determined by the chosen time zone.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeZone?: [...#TimeZoneParameters] @go(TimeZone,[]TimeZoneParameters)

	// Schedule with weekly executions.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	weekly?: [...#WeeklyParameters] @go(Weekly,[]WeeklyParameters)
}

#RolloutDisruptionBudgetInitParameters: {
	// Specifies a fixed value.
	fixed?: null | float64 @go(Fixed,*float64)

	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	percentage?: null | float64 @go(Percentage,*float64)
}

#RolloutDisruptionBudgetObservation: {
	// Specifies a fixed value.
	fixed?: null | float64 @go(Fixed,*float64)

	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	percentage?: null | float64 @go(Percentage,*float64)
}

#RolloutDisruptionBudgetParameters: {
	// Specifies a fixed value.
	// +kubebuilder:validation:Optional
	fixed?: null | float64 @go(Fixed,*float64)

	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)
}

#TimeOfDayInitParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	seconds?: null | float64 @go(Seconds,*float64)
}

#TimeOfDayObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	seconds?: null | float64 @go(Seconds,*float64)
}

#TimeOfDayParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#TimeZoneInitParameters: {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	id?: null | string @go(ID,*string)

	// IANA Time Zone Database version number, e.g. "2019a".
	version?: null | string @go(Version,*string)
}

#TimeZoneObservation: {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	id?: null | string @go(ID,*string)

	// IANA Time Zone Database version number, e.g. "2019a".
	version?: null | string @go(Version,*string)
}

#TimeZoneParameters: {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// IANA Time Zone Database version number, e.g. "2019a".
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#WeekDayOfMonthInitParameters: {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeek?: null | string @go(DayOfWeek,*string)

	// Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
	weekOrdinal?: null | float64 @go(WeekOrdinal,*float64)
}

#WeekDayOfMonthObservation: {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeek?: null | string @go(DayOfWeek,*string)

	// Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
	weekOrdinal?: null | float64 @go(WeekOrdinal,*float64)
}

#WeekDayOfMonthParameters: {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	// +kubebuilder:validation:Optional
	dayOfWeek?: null | string @go(DayOfWeek,*string)

	// Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
	// +kubebuilder:validation:Optional
	weekOrdinal?: null | float64 @go(WeekOrdinal,*float64)
}

#WeeklyInitParameters: {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeek?: null | string @go(DayOfWeek,*string)
}

#WeeklyObservation: {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeek?: null | string @go(DayOfWeek,*string)
}

#WeeklyParameters: {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	// +kubebuilder:validation:Optional
	dayOfWeek?: null | string @go(DayOfWeek,*string)
}

#WindowsExecStepConfigGcsObjectInitParameters: {
	// Bucket of the Cloud Storage object.
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	object?: null | string @go(Object,*string)
}

#WindowsExecStepConfigGcsObjectObservation: {
	// Bucket of the Cloud Storage object.
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	object?: null | string @go(Object,*string)
}

#WindowsExecStepConfigGcsObjectParameters: {
	// Bucket of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	// +kubebuilder:validation:Optional
	generationNumber?: null | string @go(GenerationNumber,*string)

	// Name of the Cloud Storage object.
	// +kubebuilder:validation:Optional
	object?: null | string @go(Object,*string)
}

#WindowsExecStepConfigInitParameters: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	gcsObject?: [...#WindowsExecStepConfigGcsObjectInitParameters] @go(GcsObject,[]WindowsExecStepConfigGcsObjectInitParameters)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	localPath?: null | string @go(LocalPath,*string)
}

#WindowsExecStepConfigObservation: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	gcsObject?: [...#WindowsExecStepConfigGcsObjectObservation] @go(GcsObject,[]WindowsExecStepConfigGcsObjectObservation)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	localPath?: null | string @go(LocalPath,*string)
}

#WindowsExecStepConfigParameters: {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	// +kubebuilder:validation:Optional
	allowedSuccessCodes?: [...null | float64] @go(AllowedSuccessCodes,[]*float64)

	// A Cloud Storage object containing the executable.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	gcsObject?: [...#WindowsExecStepConfigGcsObjectParameters] @go(GcsObject,[]WindowsExecStepConfigGcsObjectParameters)

	// The script interpreter to use to run the script. If no interpreter is specified the script will
	// be executed directly, which will likely only succeed for scripts with shebang lines.
	// Possible values are: SHELL, POWERSHELL.
	// +kubebuilder:validation:Optional
	interpreter?: null | string @go(Interpreter,*string)

	// An absolute path to the executable on the VM.
	// +kubebuilder:validation:Optional
	localPath?: null | string @go(LocalPath,*string)
}

#WindowsUpdateInitParameters: {
	// Only apply updates of these windows update classifications. If empty, all updates are applied.
	// Each value may be one of: CRITICAL, SECURITY, DEFINITION, DRIVER, FEATURE_PACK, SERVICE_PACK, TOOL, UPDATE_ROLLUP, UPDATE.
	classifications?: [...null | string] @go(Classifications,[]*string)

	// List of packages to exclude from update.
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command.
	// This field must not be used with any other patch configuration fields.
	exclusivePatches?: [...null | string] @go(ExclusivePatches,[]*string)
}

#WindowsUpdateObservation: {
	// Only apply updates of these windows update classifications. If empty, all updates are applied.
	// Each value may be one of: CRITICAL, SECURITY, DEFINITION, DRIVER, FEATURE_PACK, SERVICE_PACK, TOOL, UPDATE_ROLLUP, UPDATE.
	classifications?: [...null | string] @go(Classifications,[]*string)

	// List of packages to exclude from update.
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command.
	// This field must not be used with any other patch configuration fields.
	exclusivePatches?: [...null | string] @go(ExclusivePatches,[]*string)
}

#WindowsUpdateParameters: {
	// Only apply updates of these windows update classifications. If empty, all updates are applied.
	// Each value may be one of: CRITICAL, SECURITY, DEFINITION, DRIVER, FEATURE_PACK, SERVICE_PACK, TOOL, UPDATE_ROLLUP, UPDATE.
	// +kubebuilder:validation:Optional
	classifications?: [...null | string] @go(Classifications,[]*string)

	// List of packages to exclude from update.
	// +kubebuilder:validation:Optional
	excludes?: [...null | string] @go(Excludes,[]*string)

	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command.
	// This field must not be used with any other patch configuration fields.
	// +kubebuilder:validation:Optional
	exclusivePatches?: [...null | string] @go(ExclusivePatches,[]*string)
}

// PatchDeploymentSpec defines the desired state of PatchDeployment
#PatchDeploymentSpec: {
	forProvider: #PatchDeploymentParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PatchDeploymentInitParameters @go(InitProvider)
}

// PatchDeploymentStatus defines the observed state of PatchDeployment.
#PatchDeploymentStatus: {
	atProvider?: #PatchDeploymentObservation @go(AtProvider)
}

// PatchDeployment is the Schema for the PatchDeployments API. Patch deployments are configurations that individual patch jobs use to complete a patch.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#PatchDeployment: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceFilter) || has(self.initProvider.instanceFilter)",message="instanceFilter is a required parameter"
	spec:    #PatchDeploymentSpec   @go(Spec)
	status?: #PatchDeploymentStatus @go(Status)
}

// PatchDeploymentList contains a list of PatchDeployments
#PatchDeploymentList: {
	items: [...#PatchDeployment] @go(Items,[]PatchDeployment)
}
