// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/datacatalog/v1beta1

package v1beta1

#EntryGroupInitParameters: {
	// Entry group description, which can consist of several sentences or paragraphs that describe entry group contents.
	description?: null | string @go(Description,*string)

	// A short name to identify the entry group, for example, "analytics data - jan 2011".
	displayName?: null | string @go(DisplayName,*string)

	// The id of the entry group to create. The id must begin with a letter or underscore,
	// contain only English letters, numbers and underscores, and be at most 64 characters.
	entryGroupId?: null | string @go(EntryGroupID,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// EntryGroup location region.
	region?: null | string @go(Region,*string)
}

#EntryGroupObservation: {
	// Entry group description, which can consist of several sentences or paragraphs that describe entry group contents.
	description?: null | string @go(Description,*string)

	// A short name to identify the entry group, for example, "analytics data - jan 2011".
	displayName?: null | string @go(DisplayName,*string)

	// The id of the entry group to create. The id must begin with a letter or underscore,
	// contain only English letters, numbers and underscores, and be at most 64 characters.
	entryGroupId?: null | string @go(EntryGroupID,*string)

	// an identifier for the resource with format {{name}}
	id?: null | string @go(ID,*string)

	// The resource name of the entry group in URL format. Example: projects/{project}/locations/{location}/entryGroups/{entryGroupId}
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// EntryGroup location region.
	region?: null | string @go(Region,*string)
}

#EntryGroupParameters: {
	// Entry group description, which can consist of several sentences or paragraphs that describe entry group contents.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A short name to identify the entry group, for example, "analytics data - jan 2011".
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// The id of the entry group to create. The id must begin with a letter or underscore,
	// contain only English letters, numbers and underscores, and be at most 64 characters.
	// +kubebuilder:validation:Optional
	entryGroupId?: null | string @go(EntryGroupID,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// EntryGroup location region.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)
}

// EntryGroupSpec defines the desired state of EntryGroup
#EntryGroupSpec: {
	forProvider: #EntryGroupParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #EntryGroupInitParameters @go(InitProvider)
}

// EntryGroupStatus defines the observed state of EntryGroup.
#EntryGroupStatus: {
	atProvider?: #EntryGroupObservation @go(AtProvider)
}

// EntryGroup is the Schema for the EntryGroups API. An EntryGroup resource represents a logical grouping of zero or more Data Catalog Entry resources.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#EntryGroup: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.entryGroupId) || (has(self.initProvider) && has(self.initProvider.entryGroupId))",message="spec.forProvider.entryGroupId is a required parameter"
	spec:    #EntryGroupSpec   @go(Spec)
	status?: #EntryGroupStatus @go(Status)
}

// EntryGroupList contains a list of EntryGroups
#EntryGroupList: {
	items: [...#EntryGroup] @go(Items,[]EntryGroup)
}
