// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/datacatalog/v1beta1

package v1beta1

#AllowedValuesInitParameters: {
	// The display name for this field.
	displayName?: null | string @go(DisplayName,*string)
}

#AllowedValuesObservation: {
	// The display name for this field.
	displayName?: null | string @go(DisplayName,*string)
}

#AllowedValuesParameters: {
	// The display name for this field.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)
}

#EnumTypeInitParameters: {
	// The set of allowed values for this enum. The display names of the
	// values must be case-insensitively unique within this set. Currently,
	// enum values can only be added to the list of allowed values. Deletion
	// and renaming of enum values are not supported.
	// Can have up to 500 allowed values.
	// Structure is documented below.
	allowedValues?: [...#AllowedValuesInitParameters] @go(AllowedValues,[]AllowedValuesInitParameters)
}

#EnumTypeObservation: {
	// The set of allowed values for this enum. The display names of the
	// values must be case-insensitively unique within this set. Currently,
	// enum values can only be added to the list of allowed values. Deletion
	// and renaming of enum values are not supported.
	// Can have up to 500 allowed values.
	// Structure is documented below.
	allowedValues?: [...#AllowedValuesObservation] @go(AllowedValues,[]AllowedValuesObservation)
}

#EnumTypeParameters: {
	// The set of allowed values for this enum. The display names of the
	// values must be case-insensitively unique within this set. Currently,
	// enum values can only be added to the list of allowed values. Deletion
	// and renaming of enum values are not supported.
	// Can have up to 500 allowed values.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	allowedValues?: [...#AllowedValuesParameters] @go(AllowedValues,[]AllowedValuesParameters)
}

#TagTemplateFieldsInitParameters: {
	// A description for this field.
	description?: null | string @go(Description,*string)

	// The display name for this field.
	displayName?: null | string @go(DisplayName,*string)

	// The identifier for this object. Format specified above.
	fieldId?: null | string @go(FieldID,*string)

	// Whether this is a required field. Defaults to false.
	isRequired?: null | bool @go(IsRequired,*bool)

	// The order of this field with respect to other fields in this tag template.
	// A higher value indicates a more important field. The value can be negative.
	// Multiple fields can have the same order, and field orders within a tag do not have to be sequential.
	order?: null | float64 @go(Order,*float64)

	// The type of value this tag field can contain.
	// Structure is documented below.
	type?: [...#TypeInitParameters] @go(Type,[]TypeInitParameters)
}

#TagTemplateFieldsObservation: {
	// A description for this field.
	description?: null | string @go(Description,*string)

	// The display name for this field.
	displayName?: null | string @go(DisplayName,*string)

	// The identifier for this object. Format specified above.
	fieldId?: null | string @go(FieldID,*string)

	// Whether this is a required field. Defaults to false.
	isRequired?: null | bool @go(IsRequired,*bool)

	// (Output)
	// The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
	name?: null | string @go(Name,*string)

	// The order of this field with respect to other fields in this tag template.
	// A higher value indicates a more important field. The value can be negative.
	// Multiple fields can have the same order, and field orders within a tag do not have to be sequential.
	order?: null | float64 @go(Order,*float64)

	// The type of value this tag field can contain.
	// Structure is documented below.
	type?: [...#TypeObservation] @go(Type,[]TypeObservation)
}

#TagTemplateFieldsParameters: {
	// A description for this field.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The display name for this field.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// The identifier for this object. Format specified above.
	// +kubebuilder:validation:Optional
	fieldId?: null | string @go(FieldID,*string)

	// Whether this is a required field. Defaults to false.
	// +kubebuilder:validation:Optional
	isRequired?: null | bool @go(IsRequired,*bool)

	// The order of this field with respect to other fields in this tag template.
	// A higher value indicates a more important field. The value can be negative.
	// Multiple fields can have the same order, and field orders within a tag do not have to be sequential.
	// +kubebuilder:validation:Optional
	order?: null | float64 @go(Order,*float64)

	// The type of value this tag field can contain.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	type?: [...#TypeParameters] @go(Type,[]TypeParameters)
}

#TagTemplateInitParameters: {
	// The display name for this field.
	displayName?: null | string @go(DisplayName,*string)

	// Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields. The change of field_id will be resulting in re-creating of field. The change of primitive_type will be resulting in re-creating of field, however if the field is a required, you cannot update it.
	// Structure is documented below.
	fields?: [...#TagTemplateFieldsInitParameters] @go(Fields,[]TagTemplateFieldsInitParameters)

	// This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
	forceDelete?: null | bool @go(ForceDelete,*bool)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#TagTemplateObservation: {
	// The display name for this field.
	displayName?: null | string @go(DisplayName,*string)

	// Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields. The change of field_id will be resulting in re-creating of field. The change of primitive_type will be resulting in re-creating of field, however if the field is a required, you cannot update it.
	// Structure is documented below.
	fields?: [...#TagTemplateFieldsObservation] @go(Fields,[]TagTemplateFieldsObservation)

	// This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
	forceDelete?: null | bool @go(ForceDelete,*bool)

	// an identifier for the resource with format {{name}}
	id?: null | string @go(ID,*string)

	// The resource name of the tag template in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Template location region.
	region?: null | string @go(Region,*string)
}

#TagTemplateParameters: {
	// The display name for this field.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields. The change of field_id will be resulting in re-creating of field. The change of primitive_type will be resulting in re-creating of field, however if the field is a required, you cannot update it.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	fields?: [...#TagTemplateFieldsParameters] @go(Fields,[]TagTemplateFieldsParameters)

	// This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
	// +kubebuilder:validation:Optional
	forceDelete?: null | bool @go(ForceDelete,*bool)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Template location region.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)
}

#TypeInitParameters: {
	// Represents an enum type.
	// Exactly one of primitive_type or enum_type must be set
	// Structure is documented below.
	enumType?: [...#EnumTypeInitParameters] @go(EnumType,[]EnumTypeInitParameters)

	// Represents primitive types - string, bool etc.
	// Exactly one of primitive_type or enum_type must be set
	// Possible values are: DOUBLE, STRING, BOOL, TIMESTAMP.
	primitiveType?: null | string @go(PrimitiveType,*string)
}

#TypeObservation: {
	// Represents an enum type.
	// Exactly one of primitive_type or enum_type must be set
	// Structure is documented below.
	enumType?: [...#EnumTypeObservation] @go(EnumType,[]EnumTypeObservation)

	// Represents primitive types - string, bool etc.
	// Exactly one of primitive_type or enum_type must be set
	// Possible values are: DOUBLE, STRING, BOOL, TIMESTAMP.
	primitiveType?: null | string @go(PrimitiveType,*string)
}

#TypeParameters: {
	// Represents an enum type.
	// Exactly one of primitive_type or enum_type must be set
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	enumType?: [...#EnumTypeParameters] @go(EnumType,[]EnumTypeParameters)

	// Represents primitive types - string, bool etc.
	// Exactly one of primitive_type or enum_type must be set
	// Possible values are: DOUBLE, STRING, BOOL, TIMESTAMP.
	// +kubebuilder:validation:Optional
	primitiveType?: null | string @go(PrimitiveType,*string)
}

// TagTemplateSpec defines the desired state of TagTemplate
#TagTemplateSpec: {
	forProvider: #TagTemplateParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TagTemplateInitParameters @go(InitProvider)
}

// TagTemplateStatus defines the observed state of TagTemplate.
#TagTemplateStatus: {
	atProvider?: #TagTemplateObservation @go(AtProvider)
}

// TagTemplate is the Schema for the TagTemplates API. A tag template defines a tag, which can have one or more typed fields.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#TagTemplate: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fields) || has(self.initProvider.fields)",message="fields is a required parameter"
	spec:    #TagTemplateSpec   @go(Spec)
	status?: #TagTemplateStatus @go(Status)
}

// TagTemplateList contains a list of TagTemplates
#TagTemplateList: {
	items: [...#TagTemplate] @go(Items,[]TagTemplate)
}
