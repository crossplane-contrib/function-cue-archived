// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/sql/v1beta1

package v1beta1

#SourceRepresentationInstanceObservation: {
	// The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
	caCertificate?: null | string @go(CACertificate,*string)

	// The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
	clientCertificate?: null | string @go(ClientCertificate,*string)

	// The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
	clientKey?: null | string @go(ClientKey,*string)

	// The MySQL version running on your source database server.
	// Possible values are: MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14.
	databaseVersion?: null | string @go(DatabaseVersion,*string)

	// A file in the bucket that contains the data from the external server.
	dumpFilePath?: null | string @go(DumpFilePath,*string)

	// The externally accessible IPv4 address for the source database server.
	host?: null | string @go(Host,*string)

	// an identifier for the resource with format projects/{{project}}/instances/{{name}}
	id?: null | string @go(ID,*string)

	// The externally accessible port for the source database server.
	// Defaults to 3306.
	port?: null | float64 @go(Port,*float64)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The Region in which the created instance should reside.
	// If it is not provided, the provider region is used.
	region?: null | string @go(Region,*string)

	// The replication user account on the external server.
	username?: null | string @go(Username,*string)
}

#SourceRepresentationInstanceParameters: {
	// The CA certificate on the external server. Include only if SSL/TLS is used on the external server.
	// +kubebuilder:validation:Optional
	caCertificate?: null | string @go(CACertificate,*string)

	// The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
	// +kubebuilder:validation:Optional
	clientCertificate?: null | string @go(ClientCertificate,*string)

	// The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.
	// +kubebuilder:validation:Optional
	clientKey?: null | string @go(ClientKey,*string)

	// The MySQL version running on your source database server.
	// Possible values are: MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14.
	// +kubebuilder:validation:Optional
	databaseVersion?: null | string @go(DatabaseVersion,*string)

	// A file in the bucket that contains the data from the external server.
	// +kubebuilder:validation:Optional
	dumpFilePath?: null | string @go(DumpFilePath,*string)

	// The externally accessible IPv4 address for the source database server.
	// +kubebuilder:validation:Optional
	host?: null | string @go(Host,*string)

	// The externally accessible port for the source database server.
	// Defaults to 3306.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The Region in which the created instance should reside.
	// If it is not provided, the provider region is used.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// The replication user account on the external server.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

// SourceRepresentationInstanceSpec defines the desired state of SourceRepresentationInstance
#SourceRepresentationInstanceSpec: {
	forProvider: #SourceRepresentationInstanceParameters @go(ForProvider)
}

// SourceRepresentationInstanceStatus defines the observed state of SourceRepresentationInstance.
#SourceRepresentationInstanceStatus: {
	atProvider?: #SourceRepresentationInstanceObservation @go(AtProvider)
}

// SourceRepresentationInstance is the Schema for the SourceRepresentationInstances API. A source representation instance is a Cloud SQL instance that represents the source database server to the Cloud SQL replica.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#SourceRepresentationInstance: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.databaseVersion)",message="databaseVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.host)",message="host is a required parameter"
	spec:    #SourceRepresentationInstanceSpec   @go(Spec)
	status?: #SourceRepresentationInstanceStatus @go(Status)
}

// SourceRepresentationInstanceList contains a list of SourceRepresentationInstances
#SourceRepresentationInstanceList: {
	items: [...#SourceRepresentationInstance] @go(Items,[]SourceRepresentationInstance)
}
