// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/sql/v1beta1

package v1beta1

#PasswordPolicyInitParameters: {
	// Number of failed attempts allowed before the user get locked.
	allowedFailedAttempts?: null | float64 @go(AllowedFailedAttempts,*float64)

	// If true, the check that will lock user after too many failed login attempts will be enabled.
	enableFailedAttemptsCheck?: null | bool @go(EnableFailedAttemptsCheck,*bool)

	// If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
	enablePasswordVerification?: null | bool @go(EnablePasswordVerification,*bool)

	// Password expiration duration with one week grace period.
	passwordExpirationDuration?: null | string @go(PasswordExpirationDuration,*string)
}

#PasswordPolicyObservation: {
	// Number of failed attempts allowed before the user get locked.
	allowedFailedAttempts?: null | float64 @go(AllowedFailedAttempts,*float64)

	// If true, the check that will lock user after too many failed login attempts will be enabled.
	enableFailedAttemptsCheck?: null | bool @go(EnableFailedAttemptsCheck,*bool)

	// If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
	enablePasswordVerification?: null | bool @go(EnablePasswordVerification,*bool)

	// Password expiration duration with one week grace period.
	passwordExpirationDuration?: null | string @go(PasswordExpirationDuration,*string)
	status?: [...#StatusObservation] @go(Status,[]StatusObservation)
}

#PasswordPolicyParameters: {
	// Number of failed attempts allowed before the user get locked.
	// +kubebuilder:validation:Optional
	allowedFailedAttempts?: null | float64 @go(AllowedFailedAttempts,*float64)

	// If true, the check that will lock user after too many failed login attempts will be enabled.
	// +kubebuilder:validation:Optional
	enableFailedAttemptsCheck?: null | bool @go(EnableFailedAttemptsCheck,*bool)

	// If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
	// +kubebuilder:validation:Optional
	enablePasswordVerification?: null | bool @go(EnablePasswordVerification,*bool)

	// Password expiration duration with one week grace period.
	// +kubebuilder:validation:Optional
	passwordExpirationDuration?: null | string @go(PasswordExpirationDuration,*string)
}

#SQLServerUserDetailsInitParameters: {
}

#SQLServerUserDetailsObservation: {
	disabled?: null | bool @go(Disabled,*bool)
	serverRoles?: [...null | string] @go(ServerRoles,[]*string)
}

#SQLServerUserDetailsParameters: {
}

#StatusInitParameters: {
}

#StatusObservation: {
	// (read only) If true, user does not have login privileges.
	locked?: null | bool @go(Locked,*bool)

	// (read only) Password expiration duration with one week grace period.
	passwordExpirationTime?: null | string @go(PasswordExpirationTime,*string)
}

#StatusParameters: {
}

#UserInitParameters: {
	// The deletion policy for the user.
	// Setting ABANDON allows the resource to be abandoned rather than deleted. This is useful
	// for Postgres, where users cannot be deleted from the API if they have been granted SQL roles.
	deletionPolicy?: null | string @go(DeletionPolicy,*string)

	// The host the user can connect from. This is only supported
	// for BUILT_IN users in MySQL instances. Don't set this field for PostgreSQL and SQL Server instances.
	// Can be an IP address. Changing this forces a new resource to be created.
	host?: null | string @go(Host,*string)
	passwordPolicy?: [...#PasswordPolicyInitParameters] @go(PasswordPolicy,[]PasswordPolicyInitParameters)

	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The user type. It determines the method to authenticate the
	// user during login. The default is the database's built-in user type. Flags
	// include "BUILT_IN", "CLOUD_IAM_USER", or "CLOUD_IAM_SERVICE_ACCOUNT".
	type?: null | string @go(Type,*string)
}

#UserObservation: {
	// The deletion policy for the user.
	// Setting ABANDON allows the resource to be abandoned rather than deleted. This is useful
	// for Postgres, where users cannot be deleted from the API if they have been granted SQL roles.
	deletionPolicy?: null | string @go(DeletionPolicy,*string)

	// The host the user can connect from. This is only supported
	// for BUILT_IN users in MySQL instances. Don't set this field for PostgreSQL and SQL Server instances.
	// Can be an IP address. Changing this forces a new resource to be created.
	host?: null | string @go(Host,*string)
	id?:   null | string @go(ID,*string)

	// The name of the Cloud SQL instance. Changing this
	// forces a new resource to be created.
	instance?: null | string @go(Instance,*string)
	passwordPolicy?: [...#PasswordPolicyObservation] @go(PasswordPolicy,[]PasswordPolicyObservation)

	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
	sqlServerUserDetails?: [...#SQLServerUserDetailsObservation] @go(SQLServerUserDetails,[]SQLServerUserDetailsObservation)

	// The user type. It determines the method to authenticate the
	// user during login. The default is the database's built-in user type. Flags
	// include "BUILT_IN", "CLOUD_IAM_USER", or "CLOUD_IAM_SERVICE_ACCOUNT".
	type?: null | string @go(Type,*string)
}

#UserParameters: {
	// The deletion policy for the user.
	// Setting ABANDON allows the resource to be abandoned rather than deleted. This is useful
	// for Postgres, where users cannot be deleted from the API if they have been granted SQL roles.
	// +kubebuilder:validation:Optional
	deletionPolicy?: null | string @go(DeletionPolicy,*string)

	// The host the user can connect from. This is only supported
	// for BUILT_IN users in MySQL instances. Don't set this field for PostgreSQL and SQL Server instances.
	// Can be an IP address. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	host?: null | string @go(Host,*string)

	// The name of the Cloud SQL instance. Changing this
	// forces a new resource to be created.
	// +crossplane:generate:reference:type=DatabaseInstance
	// +kubebuilder:validation:Optional
	instance?: null | string @go(Instance,*string)

	// +kubebuilder:validation:Optional
	passwordPolicy?: [...#PasswordPolicyParameters] @go(PasswordPolicy,[]PasswordPolicyParameters)

	// The ID of the project in which the resource belongs. If it
	// is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The user type. It determines the method to authenticate the
	// user during login. The default is the database's built-in user type. Flags
	// include "BUILT_IN", "CLOUD_IAM_USER", or "CLOUD_IAM_SERVICE_ACCOUNT".
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// UserSpec defines the desired state of User
#UserSpec: {
	forProvider: #UserParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #UserInitParameters @go(InitProvider)
}

// UserStatus defines the observed state of User.
#UserStatus: {
	atProvider?: #UserObservation @go(AtProvider)
}

// User is the Schema for the Users API. Creates a new SQL user in Google Cloud SQL.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#User: {
	spec:    #UserSpec   @go(Spec)
	status?: #UserStatus @go(Status)
}

// UserList contains a list of Users
#UserList: {
	items: [...#User] @go(Items,[]User)
}
