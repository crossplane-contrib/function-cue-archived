// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/monitoring/v1beta1

package v1beta1

#DashboardObservation: {
	// The JSON representation of a dashboard, following the format at https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards.
	// The representation of an existing dashboard can be found by using the API Explorer
	dashboardJson?: null | string @go(DashboardJSON,*string)

	// an identifier for the resource with format projects/{project_id_or_number}/dashboards/{dashboard_id}
	id?: null | string @go(ID,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#DashboardParameters: {
	// The JSON representation of a dashboard, following the format at https://cloud.google.com/monitoring/api/ref_v3/rest/v1/projects.dashboards.
	// The representation of an existing dashboard can be found by using the API Explorer
	// +kubebuilder:validation:Optional
	dashboardJson?: null | string @go(DashboardJSON,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

// DashboardSpec defines the desired state of Dashboard
#DashboardSpec: {
	forProvider: #DashboardParameters @go(ForProvider)
}

// DashboardStatus defines the observed state of Dashboard.
#DashboardStatus: {
	atProvider?: #DashboardObservation @go(AtProvider)
}

// Dashboard is the Schema for the Dashboards API. A Google Stackdriver dashboard.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Dashboard: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.dashboardJson)",message="dashboardJson is a required parameter"
	spec:    #DashboardSpec   @go(Spec)
	status?: #DashboardStatus @go(Status)
}

// DashboardList contains a list of Dashboards
#DashboardList: {
	items: [...#Dashboard] @go(Items,[]Dashboard)
}
