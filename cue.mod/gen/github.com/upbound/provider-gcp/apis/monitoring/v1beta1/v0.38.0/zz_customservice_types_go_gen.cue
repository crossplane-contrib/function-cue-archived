// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/monitoring/v1beta1

package v1beta1

#CustomServiceInitParameters: {
	// Name used for UI elements listing this Service.
	displayName?: null | string @go(DisplayName,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// An optional service ID to use. If not given, the server will generate a
	// service ID.
	serviceId?: null | string @go(ServiceID,*string)

	// Configuration for how to query telemetry on a Service.
	// Structure is documented below.
	telemetry?: [...#TelemetryInitParameters] @go(Telemetry,[]TelemetryInitParameters)

	// Labels which have been used to annotate the service. Label keys must start
	// with a letter. Label keys and values may contain lowercase letters,
	// numbers, underscores, and dashes. Label keys and values have a maximum
	// length of 63 characters, and must be less than 128 bytes in size. Up to 64
	// label entries may be stored. For labels which do not have a semantic value,
	// the empty string may be supplied for the label value.
	userLabels?: {[string]: null | string} @go(UserLabels,map[string]*string)
}

#CustomServiceObservation: {
	// Name used for UI elements listing this Service.
	displayName?: null | string @go(DisplayName,*string)

	// an identifier for the resource with format {{name}}
	id?: null | string @go(ID,*string)

	// The full resource name for this service. The syntax is:
	// projects/[PROJECT_ID]/services/[SERVICE_ID].
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// An optional service ID to use. If not given, the server will generate a
	// service ID.
	serviceId?: null | string @go(ServiceID,*string)

	// Configuration for how to query telemetry on a Service.
	// Structure is documented below.
	telemetry?: [...#TelemetryObservation] @go(Telemetry,[]TelemetryObservation)

	// Labels which have been used to annotate the service. Label keys must start
	// with a letter. Label keys and values may contain lowercase letters,
	// numbers, underscores, and dashes. Label keys and values have a maximum
	// length of 63 characters, and must be less than 128 bytes in size. Up to 64
	// label entries may be stored. For labels which do not have a semantic value,
	// the empty string may be supplied for the label value.
	userLabels?: {[string]: null | string} @go(UserLabels,map[string]*string)
}

#CustomServiceParameters: {
	// Name used for UI elements listing this Service.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// An optional service ID to use. If not given, the server will generate a
	// service ID.
	// +kubebuilder:validation:Optional
	serviceId?: null | string @go(ServiceID,*string)

	// Configuration for how to query telemetry on a Service.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	telemetry?: [...#TelemetryParameters] @go(Telemetry,[]TelemetryParameters)

	// Labels which have been used to annotate the service. Label keys must start
	// with a letter. Label keys and values may contain lowercase letters,
	// numbers, underscores, and dashes. Label keys and values have a maximum
	// length of 63 characters, and must be less than 128 bytes in size. Up to 64
	// label entries may be stored. For labels which do not have a semantic value,
	// the empty string may be supplied for the label value.
	// +kubebuilder:validation:Optional
	userLabels?: {[string]: null | string} @go(UserLabels,map[string]*string)
}

#TelemetryInitParameters: {
	// The full name of the resource that defines this service.
	// Formatted as described in
	// https://cloud.google.com/apis/design/resource_names.
	resourceName?: null | string @go(ResourceName,*string)
}

#TelemetryObservation: {
	// The full name of the resource that defines this service.
	// Formatted as described in
	// https://cloud.google.com/apis/design/resource_names.
	resourceName?: null | string @go(ResourceName,*string)
}

#TelemetryParameters: {
	// The full name of the resource that defines this service.
	// Formatted as described in
	// https://cloud.google.com/apis/design/resource_names.
	// +kubebuilder:validation:Optional
	resourceName?: null | string @go(ResourceName,*string)
}

// CustomServiceSpec defines the desired state of CustomService
#CustomServiceSpec: {
	forProvider: #CustomServiceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CustomServiceInitParameters @go(InitProvider)
}

// CustomServiceStatus defines the observed state of CustomService.
#CustomServiceStatus: {
	atProvider?: #CustomServiceObservation @go(AtProvider)
}

// CustomService is the Schema for the CustomServices API. A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern (Wikipedia).
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#CustomService: {
	spec:    #CustomServiceSpec   @go(Spec)
	status?: #CustomServiceStatus @go(Status)
}

// CustomServiceList contains a list of CustomServices
#CustomServiceList: {
	items: [...#CustomService] @go(Items,[]CustomService)
}
