// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/cloudtasks/v1beta1

package v1beta1

#AppEngineRoutingOverrideInitParameters: {
	// App instance.
	// By default, the task is sent to an instance which is available when the task is attempted.
	instance?: null | string @go(Instance,*string)

	// App service.
	// By default, the task is sent to the service which is the default service when the task is attempted.
	service?: null | string @go(Service,*string)

	// App version.
	// By default, the task is sent to the version which is the default version when the task is attempted.
	version?: null | string @go(Version,*string)
}

#AppEngineRoutingOverrideObservation: {
	// (Output)
	// The host that the task is sent to.
	host?: null | string @go(Host,*string)

	// App instance.
	// By default, the task is sent to an instance which is available when the task is attempted.
	instance?: null | string @go(Instance,*string)

	// App service.
	// By default, the task is sent to the service which is the default service when the task is attempted.
	service?: null | string @go(Service,*string)

	// App version.
	// By default, the task is sent to the version which is the default version when the task is attempted.
	version?: null | string @go(Version,*string)
}

#AppEngineRoutingOverrideParameters: {
	// App instance.
	// By default, the task is sent to an instance which is available when the task is attempted.
	// +kubebuilder:validation:Optional
	instance?: null | string @go(Instance,*string)

	// App service.
	// By default, the task is sent to the service which is the default service when the task is attempted.
	// +kubebuilder:validation:Optional
	service?: null | string @go(Service,*string)

	// App version.
	// By default, the task is sent to the version which is the default version when the task is attempted.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#QueueInitParameters: {
	// Overrides for task-level appEngineRouting. These settings apply only
	// to App Engine tasks in this queue
	// Structure is documented below.
	appEngineRoutingOverride?: [...#AppEngineRoutingOverrideInitParameters] @go(AppEngineRoutingOverride,[]AppEngineRoutingOverrideInitParameters)

	// Rate limits for task dispatches.
	// The queue's actual dispatch rate is the result of:
	rateLimits?: [...#RateLimitsInitParameters] @go(RateLimits,[]RateLimitsInitParameters)

	// Settings that determine the retry behavior.
	// Structure is documented below.
	retryConfig?: [...#RetryConfigInitParameters] @go(RetryConfig,[]RetryConfigInitParameters)

	// Configuration options for writing logs to Stackdriver Logging.
	// Structure is documented below.
	stackdriverLoggingConfig?: [...#StackdriverLoggingConfigInitParameters] @go(StackdriverLoggingConfig,[]StackdriverLoggingConfigInitParameters)
}

#QueueObservation: {
	// Overrides for task-level appEngineRouting. These settings apply only
	// to App Engine tasks in this queue
	// Structure is documented below.
	appEngineRoutingOverride?: [...#AppEngineRoutingOverrideObservation] @go(AppEngineRoutingOverride,[]AppEngineRoutingOverrideObservation)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/queues/{{name}}
	id?: null | string @go(ID,*string)

	// The location of the queue
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Rate limits for task dispatches.
	// The queue's actual dispatch rate is the result of:
	rateLimits?: [...#RateLimitsObservation] @go(RateLimits,[]RateLimitsObservation)

	// Settings that determine the retry behavior.
	// Structure is documented below.
	retryConfig?: [...#RetryConfigObservation] @go(RetryConfig,[]RetryConfigObservation)

	// Configuration options for writing logs to Stackdriver Logging.
	// Structure is documented below.
	stackdriverLoggingConfig?: [...#StackdriverLoggingConfigObservation] @go(StackdriverLoggingConfig,[]StackdriverLoggingConfigObservation)
}

#QueueParameters: {
	// Overrides for task-level appEngineRouting. These settings apply only
	// to App Engine tasks in this queue
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	appEngineRoutingOverride?: [...#AppEngineRoutingOverrideParameters] @go(AppEngineRoutingOverride,[]AppEngineRoutingOverrideParameters)

	// The location of the queue
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/cloudplatform/v1beta1.Project
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Rate limits for task dispatches.
	// The queue's actual dispatch rate is the result of:
	// +kubebuilder:validation:Optional
	rateLimits?: [...#RateLimitsParameters] @go(RateLimits,[]RateLimitsParameters)

	// Settings that determine the retry behavior.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	retryConfig?: [...#RetryConfigParameters] @go(RetryConfig,[]RetryConfigParameters)

	// Configuration options for writing logs to Stackdriver Logging.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	stackdriverLoggingConfig?: [...#StackdriverLoggingConfigParameters] @go(StackdriverLoggingConfig,[]StackdriverLoggingConfigParameters)
}

#RateLimitsInitParameters: {
	// The maximum number of concurrent tasks that Cloud Tasks allows to
	// be dispatched for this queue. After this threshold has been
	// reached, Cloud Tasks stops dispatching tasks until the number of
	// concurrent requests decreases.
	maxConcurrentDispatches?: null | float64 @go(MaxConcurrentDispatches,*float64)

	// The maximum rate at which tasks are dispatched from this queue.
	// If unspecified when the queue is created, Cloud Tasks will pick the default.
	maxDispatchesPerSecond?: null | float64 @go(MaxDispatchesPerSecond,*float64)
}

#RateLimitsObservation: {
	// (Output)
	// The max burst size.
	// Max burst size limits how fast tasks in queue are processed when many tasks are
	// in the queue and the rate is high. This field allows the queue to have a high
	// rate so processing starts shortly after a task is enqueued, but still limits
	// resource usage when many tasks are enqueued in a short period of time.
	maxBurstSize?: null | float64 @go(MaxBurstSize,*float64)

	// The maximum number of concurrent tasks that Cloud Tasks allows to
	// be dispatched for this queue. After this threshold has been
	// reached, Cloud Tasks stops dispatching tasks until the number of
	// concurrent requests decreases.
	maxConcurrentDispatches?: null | float64 @go(MaxConcurrentDispatches,*float64)

	// The maximum rate at which tasks are dispatched from this queue.
	// If unspecified when the queue is created, Cloud Tasks will pick the default.
	maxDispatchesPerSecond?: null | float64 @go(MaxDispatchesPerSecond,*float64)
}

#RateLimitsParameters: {
	// The maximum number of concurrent tasks that Cloud Tasks allows to
	// be dispatched for this queue. After this threshold has been
	// reached, Cloud Tasks stops dispatching tasks until the number of
	// concurrent requests decreases.
	// +kubebuilder:validation:Optional
	maxConcurrentDispatches?: null | float64 @go(MaxConcurrentDispatches,*float64)

	// The maximum rate at which tasks are dispatched from this queue.
	// If unspecified when the queue is created, Cloud Tasks will pick the default.
	// +kubebuilder:validation:Optional
	maxDispatchesPerSecond?: null | float64 @go(MaxDispatchesPerSecond,*float64)
}

#RetryConfigInitParameters: {
	// Number of attempts per task.
	// Cloud Tasks will attempt the task maxAttempts times (that is, if
	// the first attempt fails, then there will be maxAttempts - 1
	// retries). Must be >= -1.
	// If unspecified when the queue is created, Cloud Tasks will pick
	// the default.
	// -1 indicates unlimited attempts.
	maxAttempts?: null | float64 @go(MaxAttempts,*float64)

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	maxBackoff?: null | string @go(MaxBackoff,*string)

	// The time between retries will double maxDoublings times.
	// A task's retry interval starts at minBackoff, then doubles maxDoublings times,
	// then increases linearly, and finally retries retries at intervals of maxBackoff
	// up to maxAttempts times.
	maxDoublings?: null | float64 @go(MaxDoublings,*float64)

	// If positive, maxRetryDuration specifies the time limit for
	// retrying a failed task, measured from when the task was first
	// attempted. Once maxRetryDuration time has passed and the task has
	// been attempted maxAttempts times, no further attempts will be
	// made and the task will be deleted.
	// If zero, then the task age is unlimited.
	maxRetryDuration?: null | string @go(MaxRetryDuration,*string)

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	minBackoff?: null | string @go(MinBackoff,*string)
}

#RetryConfigObservation: {
	// Number of attempts per task.
	// Cloud Tasks will attempt the task maxAttempts times (that is, if
	// the first attempt fails, then there will be maxAttempts - 1
	// retries). Must be >= -1.
	// If unspecified when the queue is created, Cloud Tasks will pick
	// the default.
	// -1 indicates unlimited attempts.
	maxAttempts?: null | float64 @go(MaxAttempts,*float64)

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	maxBackoff?: null | string @go(MaxBackoff,*string)

	// The time between retries will double maxDoublings times.
	// A task's retry interval starts at minBackoff, then doubles maxDoublings times,
	// then increases linearly, and finally retries retries at intervals of maxBackoff
	// up to maxAttempts times.
	maxDoublings?: null | float64 @go(MaxDoublings,*float64)

	// If positive, maxRetryDuration specifies the time limit for
	// retrying a failed task, measured from when the task was first
	// attempted. Once maxRetryDuration time has passed and the task has
	// been attempted maxAttempts times, no further attempts will be
	// made and the task will be deleted.
	// If zero, then the task age is unlimited.
	maxRetryDuration?: null | string @go(MaxRetryDuration,*string)

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	minBackoff?: null | string @go(MinBackoff,*string)
}

#RetryConfigParameters: {
	// Number of attempts per task.
	// Cloud Tasks will attempt the task maxAttempts times (that is, if
	// the first attempt fails, then there will be maxAttempts - 1
	// retries). Must be >= -1.
	// If unspecified when the queue is created, Cloud Tasks will pick
	// the default.
	// -1 indicates unlimited attempts.
	// +kubebuilder:validation:Optional
	maxAttempts?: null | float64 @go(MaxAttempts,*float64)

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	// +kubebuilder:validation:Optional
	maxBackoff?: null | string @go(MaxBackoff,*string)

	// The time between retries will double maxDoublings times.
	// A task's retry interval starts at minBackoff, then doubles maxDoublings times,
	// then increases linearly, and finally retries retries at intervals of maxBackoff
	// up to maxAttempts times.
	// +kubebuilder:validation:Optional
	maxDoublings?: null | float64 @go(MaxDoublings,*float64)

	// If positive, maxRetryDuration specifies the time limit for
	// retrying a failed task, measured from when the task was first
	// attempted. Once maxRetryDuration time has passed and the task has
	// been attempted maxAttempts times, no further attempts will be
	// made and the task will be deleted.
	// If zero, then the task age is unlimited.
	// +kubebuilder:validation:Optional
	maxRetryDuration?: null | string @go(MaxRetryDuration,*string)

	// A task will be scheduled for retry between minBackoff and
	// maxBackoff duration after it fails, if the queue's RetryConfig
	// specifies that the task should be retried.
	// +kubebuilder:validation:Optional
	minBackoff?: null | string @go(MinBackoff,*string)
}

#StackdriverLoggingConfigInitParameters: {
	// Specifies the fraction of operations to write to Stackdriver Logging.
	// This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the
	// default and means that no operations are logged.
	samplingRatio?: null | float64 @go(SamplingRatio,*float64)
}

#StackdriverLoggingConfigObservation: {
	// Specifies the fraction of operations to write to Stackdriver Logging.
	// This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the
	// default and means that no operations are logged.
	samplingRatio?: null | float64 @go(SamplingRatio,*float64)
}

#StackdriverLoggingConfigParameters: {
	// Specifies the fraction of operations to write to Stackdriver Logging.
	// This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the
	// default and means that no operations are logged.
	// +kubebuilder:validation:Optional
	samplingRatio?: null | float64 @go(SamplingRatio,*float64)
}

// QueueSpec defines the desired state of Queue
#QueueSpec: {
	forProvider: #QueueParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #QueueInitParameters @go(InitProvider)
}

// QueueStatus defines the observed state of Queue.
#QueueStatus: {
	atProvider?: #QueueObservation @go(AtProvider)
}

// Queue is the Schema for the Queues API. A named resource to which messages are sent by publishers.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Queue: {
	spec:    #QueueSpec   @go(Spec)
	status?: #QueueStatus @go(Status)
}

// QueueList contains a list of Queues
#QueueList: {
	items: [...#Queue] @go(Items,[]Queue)
}
