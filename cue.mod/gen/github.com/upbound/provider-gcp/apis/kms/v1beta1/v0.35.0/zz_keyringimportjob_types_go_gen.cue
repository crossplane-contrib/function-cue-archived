// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/kms/v1beta1

package v1beta1

#KeyRingImportJobAttestationInitParameters: {
}

#KeyRingImportJobAttestationObservation: {
	// (Output)
	// The attestation data provided by the HSM when the key operation was performed.
	// A base64-encoded string.
	content?: null | string @go(Content,*string)

	// (Output)
	// The format of the attestation data.
	format?: null | string @go(Format,*string)
}

#KeyRingImportJobAttestationParameters: {
}

#KeyRingImportJobInitParameters: {
	// The wrapping method to be used for incoming key material.
	// Possible values are: RSA_OAEP_3072_SHA1_AES_256, RSA_OAEP_4096_SHA1_AES_256.
	importMethod?: null | string @go(ImportMethod,*string)

	// The protection level of the ImportJob. This must match the protectionLevel of the
	// versionTemplate on the CryptoKey you attempt to import into.
	// Possible values are: SOFTWARE, HSM, EXTERNAL.
	protectionLevel?: null | string @go(ProtectionLevel,*string)
}

#KeyRingImportJobObservation: {
	// Statement that was generated and signed by the key creator (for example, an HSM) at key creation time.
	// Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
	// Only present if the chosen ImportMethod is one with a protection level of HSM.
	// Structure is documented below.
	attestation?: [...#KeyRingImportJobAttestationObservation] @go(Attestation,[]KeyRingImportJobAttestationObservation)

	// The time at which this resource is scheduled for expiration and can no longer be used.
	// This is in RFC3339 text format.
	expireTime?: null | string @go(ExpireTime,*string)

	// an identifier for the resource with format {{name}}
	id?: null | string @go(ID,*string)

	// The wrapping method to be used for incoming key material.
	// Possible values are: RSA_OAEP_3072_SHA1_AES_256, RSA_OAEP_4096_SHA1_AES_256.
	importMethod?: null | string @go(ImportMethod,*string)

	// The KeyRing that this import job belongs to.
	// Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.
	keyRing?: null | string @go(KeyRing,*string)

	// The resource name for this ImportJob in the format projects//locations//keyRings//importJobs/.
	name?: null | string @go(Name,*string)

	// The protection level of the ImportJob. This must match the protectionLevel of the
	// versionTemplate on the CryptoKey you attempt to import into.
	// Possible values are: SOFTWARE, HSM, EXTERNAL.
	protectionLevel?: null | string @go(ProtectionLevel,*string)

	// The public key with which to wrap key material prior to import. Only returned if state is ACTIVE.
	// Structure is documented below.
	publicKey?: [...#PublicKeyObservation] @go(PublicKey,[]PublicKeyObservation)

	// The current state of the ImportJob, indicating if it can be used.
	state?: null | string @go(State,*string)
}

#KeyRingImportJobParameters: {
	// The wrapping method to be used for incoming key material.
	// Possible values are: RSA_OAEP_3072_SHA1_AES_256, RSA_OAEP_4096_SHA1_AES_256.
	// +kubebuilder:validation:Optional
	importMethod?: null | string @go(ImportMethod,*string)

	// The KeyRing that this import job belongs to.
	// Format: 'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'.
	// +crossplane:generate:reference:type=KeyRing
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-gcp/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	keyRing?: null | string @go(KeyRing,*string)

	// The protection level of the ImportJob. This must match the protectionLevel of the
	// versionTemplate on the CryptoKey you attempt to import into.
	// Possible values are: SOFTWARE, HSM, EXTERNAL.
	// +kubebuilder:validation:Optional
	protectionLevel?: null | string @go(ProtectionLevel,*string)
}

#PublicKeyInitParameters: {
}

#PublicKeyObservation: {
	// (Output)
	// The public key, encoded in PEM format. For more information, see the RFC 7468 sections
	// for General Considerations and Textual Encoding of Subject Public Key Info.
	pem?: null | string @go(Pem,*string)
}

#PublicKeyParameters: {
}

// KeyRingImportJobSpec defines the desired state of KeyRingImportJob
#KeyRingImportJobSpec: {
	forProvider: #KeyRingImportJobParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #KeyRingImportJobInitParameters @go(InitProvider)
}

// KeyRingImportJobStatus defines the observed state of KeyRingImportJob.
#KeyRingImportJobStatus: {
	atProvider?: #KeyRingImportJobObservation @go(AtProvider)
}

// KeyRingImportJob is the Schema for the KeyRingImportJobs API. A
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#KeyRingImportJob: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.importMethod) || has(self.initProvider.importMethod)",message="importMethod is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protectionLevel) || has(self.initProvider.protectionLevel)",message="protectionLevel is a required parameter"
	spec:    #KeyRingImportJobSpec   @go(Spec)
	status?: #KeyRingImportJobStatus @go(Status)
}

// KeyRingImportJobList contains a list of KeyRingImportJobs
#KeyRingImportJobList: {
	items: [...#KeyRingImportJob] @go(Items,[]KeyRingImportJob)
}
