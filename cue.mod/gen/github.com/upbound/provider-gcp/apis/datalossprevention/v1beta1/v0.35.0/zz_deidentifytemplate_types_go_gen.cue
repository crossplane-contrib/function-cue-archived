// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/datalossprevention/v1beta1

package v1beta1

#AllInfoTypesInitParameters: {
}

#AllInfoTypesObservation: {
}

#AllInfoTypesParameters: {
}

#AllTextInitParameters: {
}

#AllTextObservation: {
}

#AllTextParameters: {
}

#BucketingConfigInitParameters: {
	// Set of buckets. Ranges must be non-overlapping.
	// Bucket is represented as a range, along with replacement values.
	// Structure is documented below.
	buckets?: [...#BucketsInitParameters] @go(Buckets,[]BucketsInitParameters)
}

#BucketingConfigObservation: {
	// Set of buckets. Ranges must be non-overlapping.
	// Bucket is represented as a range, along with replacement values.
	// Structure is documented below.
	buckets?: [...#BucketsObservation] @go(Buckets,[]BucketsObservation)
}

#BucketingConfigParameters: {
	// Set of buckets. Ranges must be non-overlapping.
	// Bucket is represented as a range, along with replacement values.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	buckets?: [...#BucketsParameters] @go(Buckets,[]BucketsParameters)
}

#BucketsInitParameters: {
	// Upper bound of the range, exclusive; type must match min.
	// The max block must only contain one argument. See the bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	max?: [...#MaxInitParameters] @go(Max,[]MaxInitParameters)

	// Lower bound of the range, inclusive. Type should be the same as max if used.
	// The min block must only contain one argument. See the bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	min?: [...#MinInitParameters] @go(Min,[]MinInitParameters)

	// Replacement value for this bucket.
	// The replacement_value block must only contain one argument.
	// Structure is documented below.
	replacementValue?: [...#ReplacementValueInitParameters] @go(ReplacementValue,[]ReplacementValueInitParameters)
}

#BucketsObservation: {
	// Upper bound of the range, exclusive; type must match min.
	// The max block must only contain one argument. See the bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	max?: [...#MaxObservation] @go(Max,[]MaxObservation)

	// Lower bound of the range, inclusive. Type should be the same as max if used.
	// The min block must only contain one argument. See the bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	min?: [...#MinObservation] @go(Min,[]MinObservation)

	// Replacement value for this bucket.
	// The replacement_value block must only contain one argument.
	// Structure is documented below.
	replacementValue?: [...#ReplacementValueObservation] @go(ReplacementValue,[]ReplacementValueObservation)
}

#BucketsParameters: {
	// Upper bound of the range, exclusive; type must match min.
	// The max block must only contain one argument. See the bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	max?: [...#MaxParameters] @go(Max,[]MaxParameters)

	// Lower bound of the range, inclusive. Type should be the same as max if used.
	// The min block must only contain one argument. See the bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	min?: [...#MinParameters] @go(Min,[]MinParameters)

	// Replacement value for this bucket.
	// The replacement_value block must only contain one argument.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	replacementValue?: [...#ReplacementValueParameters] @go(ReplacementValue,[]ReplacementValueParameters)
}

#CharacterMaskConfigCharactersToIgnoreInitParameters: {
	// Characters to not transform when masking.
	charactersToSkip?: null | string @go(CharactersToSkip,*string)

	// Common characters to not transform when masking. Useful to avoid removing punctuation.
	// Possible values are: NUMERIC, ALPHA_UPPER_CASE, ALPHA_LOWER_CASE, PUNCTUATION, WHITESPACE.
	commonCharactersToIgnore?: null | string @go(CommonCharactersToIgnore,*string)
}

#CharacterMaskConfigCharactersToIgnoreObservation: {
	// Characters to not transform when masking.
	charactersToSkip?: null | string @go(CharactersToSkip,*string)

	// Common characters to not transform when masking. Useful to avoid removing punctuation.
	// Possible values are: NUMERIC, ALPHA_UPPER_CASE, ALPHA_LOWER_CASE, PUNCTUATION, WHITESPACE.
	commonCharactersToIgnore?: null | string @go(CommonCharactersToIgnore,*string)
}

#CharacterMaskConfigCharactersToIgnoreParameters: {
	// Characters to not transform when masking.
	// +kubebuilder:validation:Optional
	charactersToSkip?: null | string @go(CharactersToSkip,*string)

	// Common characters to not transform when masking. Useful to avoid removing punctuation.
	// Possible values are: NUMERIC, ALPHA_UPPER_CASE, ALPHA_LOWER_CASE, PUNCTUATION, WHITESPACE.
	// +kubebuilder:validation:Optional
	commonCharactersToIgnore?: null | string @go(CommonCharactersToIgnore,*string)
}

#CharacterMaskConfigInitParameters: {
	charactersToIgnore?: [...#CharactersToIgnoreInitParameters] @go(CharactersToIgnore,[]CharactersToIgnoreInitParameters)

	// is *
	maskingCharacter?: null | string @go(MaskingCharacter,*string)

	// 4
	numberToMask?: null | float64 @go(NumberToMask,*float64)

	// is false
	reverseOrder?: null | bool @go(ReverseOrder,*bool)
}

#CharacterMaskConfigObservation: {
	charactersToIgnore?: [...#CharactersToIgnoreObservation] @go(CharactersToIgnore,[]CharactersToIgnoreObservation)

	// is *
	maskingCharacter?: null | string @go(MaskingCharacter,*string)

	// 4
	numberToMask?: null | float64 @go(NumberToMask,*float64)

	// is false
	reverseOrder?: null | bool @go(ReverseOrder,*bool)
}

#CharacterMaskConfigParameters: {
	// +kubebuilder:validation:Optional
	charactersToIgnore?: [...#CharactersToIgnoreParameters] @go(CharactersToIgnore,[]CharactersToIgnoreParameters)

	// is *
	// +kubebuilder:validation:Optional
	maskingCharacter?: null | string @go(MaskingCharacter,*string)

	// 4
	// +kubebuilder:validation:Optional
	numberToMask?: null | float64 @go(NumberToMask,*float64)

	// is false
	// +kubebuilder:validation:Optional
	reverseOrder?: null | bool @go(ReverseOrder,*bool)
}

#CharactersToIgnoreInitParameters: {
	// Characters to not transform when masking.
	charactersToSkip?: null | string @go(CharactersToSkip,*string)

	// Common characters to not transform when masking. Useful to avoid removing punctuation.
	// Possible values are: NUMERIC, ALPHA_UPPER_CASE, ALPHA_LOWER_CASE, PUNCTUATION, WHITESPACE.
	commonCharactersToIgnore?: null | string @go(CommonCharactersToIgnore,*string)
}

#CharactersToIgnoreObservation: {
	// Characters to not transform when masking.
	charactersToSkip?: null | string @go(CharactersToSkip,*string)

	// Common characters to not transform when masking. Useful to avoid removing punctuation.
	// Possible values are: NUMERIC, ALPHA_UPPER_CASE, ALPHA_LOWER_CASE, PUNCTUATION, WHITESPACE.
	commonCharactersToIgnore?: null | string @go(CommonCharactersToIgnore,*string)
}

#CharactersToIgnoreParameters: {
	// Characters to not transform when masking.
	// +kubebuilder:validation:Optional
	charactersToSkip?: null | string @go(CharactersToSkip,*string)

	// Common characters to not transform when masking. Useful to avoid removing punctuation.
	// Possible values are: NUMERIC, ALPHA_UPPER_CASE, ALPHA_LOWER_CASE, PUNCTUATION, WHITESPACE.
	// +kubebuilder:validation:Optional
	commonCharactersToIgnore?: null | string @go(CommonCharactersToIgnore,*string)
}

#ConditionExpressionsInitParameters: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	conditions?: [...#ExpressionsConditionsInitParameters] @go(Conditions,[]ExpressionsConditionsInitParameters)

	// The operator to apply to the result of conditions. Default and currently only supported value is AND.
	// Default value is AND.
	// Possible values are: AND.
	logicalOperator?: null | string @go(LogicalOperator,*string)
}

#ConditionExpressionsObservation: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	conditions?: [...#ExpressionsConditionsObservation] @go(Conditions,[]ExpressionsConditionsObservation)

	// The operator to apply to the result of conditions. Default and currently only supported value is AND.
	// Default value is AND.
	// Possible values are: AND.
	logicalOperator?: null | string @go(LogicalOperator,*string)
}

#ConditionExpressionsParameters: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	conditions?: [...#ExpressionsConditionsParameters] @go(Conditions,[]ExpressionsConditionsParameters)

	// The operator to apply to the result of conditions. Default and currently only supported value is AND.
	// Default value is AND.
	// Possible values are: AND.
	// +kubebuilder:validation:Optional
	logicalOperator?: null | string @go(LogicalOperator,*string)
}

#ConditionInitParameters: {
	// An expression, consisting of an operator and conditions.
	// Structure is documented below.
	expressions?: [...#ExpressionsInitParameters] @go(Expressions,[]ExpressionsInitParameters)
}

#ConditionObservation: {
	// An expression, consisting of an operator and conditions.
	// Structure is documented below.
	expressions?: [...#ExpressionsObservation] @go(Expressions,[]ExpressionsObservation)
}

#ConditionParameters: {
	// An expression, consisting of an operator and conditions.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	expressions?: [...#ExpressionsParameters] @go(Expressions,[]ExpressionsParameters)
}

#ConditionsConditionsInitParameters: {
	// Field within the record this condition is evaluated against.
	// Structure is documented below.
	field?: [...#FieldInitParameters] @go(Field,[]FieldInitParameters)

	// Operator used to compare the field or infoType to the value.
	// Possible values are: EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN_OR_EQUALS, EXISTS.
	operator?: null | string @go(Operator,*string)

	// Value to compare against.
	// The value block must only contain one argument. For example when a condition is evaluated against a string-type field, only string_value should be set.
	// This argument is mandatory, except for conditions using the EXISTS operator.
	// Structure is documented below.
	value?: [...#ValueInitParameters] @go(Value,[]ValueInitParameters)
}

#ConditionsConditionsObservation: {
	// Field within the record this condition is evaluated against.
	// Structure is documented below.
	field?: [...#FieldObservation] @go(Field,[]FieldObservation)

	// Operator used to compare the field or infoType to the value.
	// Possible values are: EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN_OR_EQUALS, EXISTS.
	operator?: null | string @go(Operator,*string)

	// Value to compare against.
	// The value block must only contain one argument. For example when a condition is evaluated against a string-type field, only string_value should be set.
	// This argument is mandatory, except for conditions using the EXISTS operator.
	// Structure is documented below.
	value?: [...#ValueObservation] @go(Value,[]ValueObservation)
}

#ConditionsConditionsParameters: {
	// Field within the record this condition is evaluated against.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	field?: [...#FieldParameters] @go(Field,[]FieldParameters)

	// Operator used to compare the field or infoType to the value.
	// Possible values are: EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN_OR_EQUALS, EXISTS.
	// +kubebuilder:validation:Optional
	operator?: null | string @go(Operator,*string)

	// Value to compare against.
	// The value block must only contain one argument. For example when a condition is evaluated against a string-type field, only string_value should be set.
	// This argument is mandatory, except for conditions using the EXISTS operator.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	value?: [...#ValueParameters] @go(Value,[]ValueParameters)
}

#ConditionsFieldInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#ConditionsFieldObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#ConditionsFieldParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#ConditionsInitParameters: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	conditions?: [...#ConditionsConditionsInitParameters] @go(Conditions,[]ConditionsConditionsInitParameters)
}

#ConditionsObservation: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	conditions?: [...#ConditionsConditionsObservation] @go(Conditions,[]ConditionsConditionsObservation)
}

#ConditionsParameters: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	conditions?: [...#ConditionsConditionsParameters] @go(Conditions,[]ConditionsConditionsParameters)
}

#ConditionsValueDateValueInitParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#ConditionsValueDateValueObservation: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#ConditionsValueDateValueParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	// +kubebuilder:validation:Optional
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	// +kubebuilder:validation:Optional
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	// +kubebuilder:validation:Optional
	year?: null | float64 @go(Year,*float64)
}

#ConditionsValueInitParameters: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#ConditionsValueDateValueInitParameters] @go(DateValue,[]ConditionsValueDateValueInitParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#ConditionsValueTimeValueInitParameters] @go(TimeValue,[]ConditionsValueTimeValueInitParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ConditionsValueObservation: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#ConditionsValueDateValueObservation] @go(DateValue,[]ConditionsValueDateValueObservation)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#ConditionsValueTimeValueObservation] @go(TimeValue,[]ConditionsValueTimeValueObservation)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ConditionsValueParameters: {
	// A boolean value.
	// +kubebuilder:validation:Optional
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	dateValue?: [...#ConditionsValueDateValueParameters] @go(DateValue,[]ConditionsValueDateValueParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	// +kubebuilder:validation:Optional
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	// +kubebuilder:validation:Optional
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	// +kubebuilder:validation:Optional
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	// +kubebuilder:validation:Optional
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeValue?: [...#ConditionsValueTimeValueParameters] @go(TimeValue,[]ConditionsValueTimeValueParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ConditionsValueTimeValueInitParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#ConditionsValueTimeValueObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#ConditionsValueTimeValueParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#ContextInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#ContextObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#ContextParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#CryptoDeterministicConfigContextInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoDeterministicConfigContextObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoDeterministicConfigContextParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#CryptoDeterministicConfigCryptoKeyInitParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#CryptoDeterministicConfigCryptoKeyKMSWrappedInitParameters] @go(KMSWrapped,[]CryptoDeterministicConfigCryptoKeyKMSWrappedInitParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#CryptoDeterministicConfigCryptoKeyTransientInitParameters] @go(Transient,[]CryptoDeterministicConfigCryptoKeyTransientInitParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#CryptoDeterministicConfigCryptoKeyUnwrappedInitParameters] @go(Unwrapped,[]CryptoDeterministicConfigCryptoKeyUnwrappedInitParameters)
}

#CryptoDeterministicConfigCryptoKeyKMSWrappedInitParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoDeterministicConfigCryptoKeyKMSWrappedObservation: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoDeterministicConfigCryptoKeyKMSWrappedParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	// +kubebuilder:validation:Optional
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoDeterministicConfigCryptoKeyObservation: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#CryptoDeterministicConfigCryptoKeyKMSWrappedObservation] @go(KMSWrapped,[]CryptoDeterministicConfigCryptoKeyKMSWrappedObservation)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#CryptoDeterministicConfigCryptoKeyTransientObservation] @go(Transient,[]CryptoDeterministicConfigCryptoKeyTransientObservation)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#CryptoDeterministicConfigCryptoKeyUnwrappedObservation] @go(Unwrapped,[]CryptoDeterministicConfigCryptoKeyUnwrappedObservation)
}

#CryptoDeterministicConfigCryptoKeyParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	kmsWrapped?: [...#CryptoDeterministicConfigCryptoKeyKMSWrappedParameters] @go(KMSWrapped,[]CryptoDeterministicConfigCryptoKeyKMSWrappedParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	transient?: [...#CryptoDeterministicConfigCryptoKeyTransientParameters] @go(Transient,[]CryptoDeterministicConfigCryptoKeyTransientParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	unwrapped?: [...#CryptoDeterministicConfigCryptoKeyUnwrappedParameters] @go(Unwrapped,[]CryptoDeterministicConfigCryptoKeyUnwrappedParameters)
}

#CryptoDeterministicConfigCryptoKeyTransientInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoDeterministicConfigCryptoKeyTransientObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoDeterministicConfigCryptoKeyTransientParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#CryptoDeterministicConfigCryptoKeyUnwrappedInitParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#CryptoDeterministicConfigCryptoKeyUnwrappedObservation: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#CryptoDeterministicConfigCryptoKeyUnwrappedParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#CryptoDeterministicConfigInitParameters: {
	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	context?: [...#ContextInitParameters] @go(Context,[]ContextInitParameters)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#CryptoKeyInitParameters] @go(CryptoKey,[]CryptoKeyInitParameters)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	surrogateInfoType?: [...#SurrogateInfoTypeInitParameters] @go(SurrogateInfoType,[]SurrogateInfoTypeInitParameters)
}

#CryptoDeterministicConfigObservation: {
	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	context?: [...#ContextObservation] @go(Context,[]ContextObservation)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#CryptoKeyObservation] @go(CryptoKey,[]CryptoKeyObservation)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	surrogateInfoType?: [...#SurrogateInfoTypeObservation] @go(SurrogateInfoType,[]SurrogateInfoTypeObservation)
}

#CryptoDeterministicConfigParameters: {
	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	context?: [...#ContextParameters] @go(Context,[]ContextParameters)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoKey?: [...#CryptoKeyParameters] @go(CryptoKey,[]CryptoKeyParameters)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	surrogateInfoType?: [...#SurrogateInfoTypeParameters] @go(SurrogateInfoType,[]SurrogateInfoTypeParameters)
}

#CryptoDeterministicConfigSurrogateInfoTypeInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#CryptoDeterministicConfigSurrogateInfoTypeObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#CryptoDeterministicConfigSurrogateInfoTypeParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#CryptoHashConfigCryptoKeyInitParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#CryptoHashConfigCryptoKeyKMSWrappedInitParameters] @go(KMSWrapped,[]CryptoHashConfigCryptoKeyKMSWrappedInitParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#CryptoHashConfigCryptoKeyTransientInitParameters] @go(Transient,[]CryptoHashConfigCryptoKeyTransientInitParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#CryptoHashConfigCryptoKeyUnwrappedInitParameters] @go(Unwrapped,[]CryptoHashConfigCryptoKeyUnwrappedInitParameters)
}

#CryptoHashConfigCryptoKeyKMSWrappedInitParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoHashConfigCryptoKeyKMSWrappedObservation: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoHashConfigCryptoKeyKMSWrappedParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	// +kubebuilder:validation:Optional
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoHashConfigCryptoKeyObservation: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#CryptoHashConfigCryptoKeyKMSWrappedObservation] @go(KMSWrapped,[]CryptoHashConfigCryptoKeyKMSWrappedObservation)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#CryptoHashConfigCryptoKeyTransientObservation] @go(Transient,[]CryptoHashConfigCryptoKeyTransientObservation)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#CryptoHashConfigCryptoKeyUnwrappedObservation] @go(Unwrapped,[]CryptoHashConfigCryptoKeyUnwrappedObservation)
}

#CryptoHashConfigCryptoKeyParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	kmsWrapped?: [...#CryptoHashConfigCryptoKeyKMSWrappedParameters] @go(KMSWrapped,[]CryptoHashConfigCryptoKeyKMSWrappedParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	transient?: [...#CryptoHashConfigCryptoKeyTransientParameters] @go(Transient,[]CryptoHashConfigCryptoKeyTransientParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	unwrapped?: [...#CryptoHashConfigCryptoKeyUnwrappedParameters] @go(Unwrapped,[]CryptoHashConfigCryptoKeyUnwrappedParameters)
}

#CryptoHashConfigCryptoKeyTransientInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoHashConfigCryptoKeyTransientObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoHashConfigCryptoKeyTransientParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#CryptoHashConfigCryptoKeyUnwrappedInitParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#CryptoHashConfigCryptoKeyUnwrappedObservation: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#CryptoHashConfigCryptoKeyUnwrappedParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#CryptoHashConfigInitParameters: {
	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#CryptoHashConfigCryptoKeyInitParameters] @go(CryptoKey,[]CryptoHashConfigCryptoKeyInitParameters)
}

#CryptoHashConfigObservation: {
	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#CryptoHashConfigCryptoKeyObservation] @go(CryptoKey,[]CryptoHashConfigCryptoKeyObservation)
}

#CryptoHashConfigParameters: {
	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoKey?: [...#CryptoHashConfigCryptoKeyParameters] @go(CryptoKey,[]CryptoHashConfigCryptoKeyParameters)
}

#CryptoKeyInitParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#KMSWrappedInitParameters] @go(KMSWrapped,[]KMSWrappedInitParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#TransientInitParameters] @go(Transient,[]TransientInitParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#UnwrappedInitParameters] @go(Unwrapped,[]UnwrappedInitParameters)
}

#CryptoKeyKMSWrappedInitParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoKeyKMSWrappedObservation: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoKeyKMSWrappedParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	// +kubebuilder:validation:Optional
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoKeyObservation: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#KMSWrappedObservation] @go(KMSWrapped,[]KMSWrappedObservation)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#TransientObservation] @go(Transient,[]TransientObservation)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#UnwrappedObservation] @go(Unwrapped,[]UnwrappedObservation)
}

#CryptoKeyParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	kmsWrapped?: [...#KMSWrappedParameters] @go(KMSWrapped,[]KMSWrappedParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	transient?: [...#TransientParameters] @go(Transient,[]TransientParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	unwrapped?: [...#UnwrappedParameters] @go(Unwrapped,[]UnwrappedParameters)
}

#CryptoKeyTransientInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoKeyTransientObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoKeyTransientParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#CryptoKeyUnwrappedInitParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#CryptoKeyUnwrappedObservation: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#CryptoKeyUnwrappedParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#CryptoReplaceFfxFpeConfigContextInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoReplaceFfxFpeConfigContextObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoReplaceFfxFpeConfigContextParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#CryptoReplaceFfxFpeConfigCryptoKeyInitParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#CryptoKeyKMSWrappedInitParameters] @go(KMSWrapped,[]CryptoKeyKMSWrappedInitParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#CryptoKeyTransientInitParameters] @go(Transient,[]CryptoKeyTransientInitParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#CryptoKeyUnwrappedInitParameters] @go(Unwrapped,[]CryptoKeyUnwrappedInitParameters)
}

#CryptoReplaceFfxFpeConfigCryptoKeyKMSWrappedInitParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoReplaceFfxFpeConfigCryptoKeyKMSWrappedObservation: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoReplaceFfxFpeConfigCryptoKeyKMSWrappedParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	// +kubebuilder:validation:Optional
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#CryptoReplaceFfxFpeConfigCryptoKeyObservation: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#CryptoKeyKMSWrappedObservation] @go(KMSWrapped,[]CryptoKeyKMSWrappedObservation)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#CryptoKeyTransientObservation] @go(Transient,[]CryptoKeyTransientObservation)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#CryptoKeyUnwrappedObservation] @go(Unwrapped,[]CryptoKeyUnwrappedObservation)
}

#CryptoReplaceFfxFpeConfigCryptoKeyParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	kmsWrapped?: [...#CryptoKeyKMSWrappedParameters] @go(KMSWrapped,[]CryptoKeyKMSWrappedParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	transient?: [...#CryptoKeyTransientParameters] @go(Transient,[]CryptoKeyTransientParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	unwrapped?: [...#CryptoKeyUnwrappedParameters] @go(Unwrapped,[]CryptoKeyUnwrappedParameters)
}

#CryptoReplaceFfxFpeConfigCryptoKeyTransientInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoReplaceFfxFpeConfigCryptoKeyTransientObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#CryptoReplaceFfxFpeConfigCryptoKeyTransientParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#CryptoReplaceFfxFpeConfigCryptoKeyUnwrappedInitParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#CryptoReplaceFfxFpeConfigCryptoKeyUnwrappedObservation: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#CryptoReplaceFfxFpeConfigCryptoKeyUnwrappedParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#CryptoReplaceFfxFpeConfigInitParameters: {
	// Common alphabets.
	// Possible values are: FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED, NUMERIC, HEXADECIMAL, UPPER_CASE_ALPHA_NUMERIC, ALPHA_NUMERIC.
	commonAlphabet?: null | string @go(CommonAlphabet,*string)

	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	context?: [...#CryptoReplaceFfxFpeConfigContextInitParameters] @go(Context,[]CryptoReplaceFfxFpeConfigContextInitParameters)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#CryptoReplaceFfxFpeConfigCryptoKeyInitParameters] @go(CryptoKey,[]CryptoReplaceFfxFpeConfigCryptoKeyInitParameters)

	// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is:
	// 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|:;"'<,>.?/
	customAlphabet?: null | string @go(CustomAlphabet,*string)

	// The native way to select the alphabet. Must be in the range [2, 95].
	radix?: null | float64 @go(Radix,*float64)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	surrogateInfoType?: [...#CryptoReplaceFfxFpeConfigSurrogateInfoTypeInitParameters] @go(SurrogateInfoType,[]CryptoReplaceFfxFpeConfigSurrogateInfoTypeInitParameters)
}

#CryptoReplaceFfxFpeConfigObservation: {
	// Common alphabets.
	// Possible values are: FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED, NUMERIC, HEXADECIMAL, UPPER_CASE_ALPHA_NUMERIC, ALPHA_NUMERIC.
	commonAlphabet?: null | string @go(CommonAlphabet,*string)

	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	context?: [...#CryptoReplaceFfxFpeConfigContextObservation] @go(Context,[]CryptoReplaceFfxFpeConfigContextObservation)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#CryptoReplaceFfxFpeConfigCryptoKeyObservation] @go(CryptoKey,[]CryptoReplaceFfxFpeConfigCryptoKeyObservation)

	// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is:
	// 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|:;"'<,>.?/
	customAlphabet?: null | string @go(CustomAlphabet,*string)

	// The native way to select the alphabet. Must be in the range [2, 95].
	radix?: null | float64 @go(Radix,*float64)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	surrogateInfoType?: [...#CryptoReplaceFfxFpeConfigSurrogateInfoTypeObservation] @go(SurrogateInfoType,[]CryptoReplaceFfxFpeConfigSurrogateInfoTypeObservation)
}

#CryptoReplaceFfxFpeConfigParameters: {
	// Common alphabets.
	// Possible values are: FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED, NUMERIC, HEXADECIMAL, UPPER_CASE_ALPHA_NUMERIC, ALPHA_NUMERIC.
	// +kubebuilder:validation:Optional
	commonAlphabet?: null | string @go(CommonAlphabet,*string)

	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	context?: [...#CryptoReplaceFfxFpeConfigContextParameters] @go(Context,[]CryptoReplaceFfxFpeConfigContextParameters)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoKey?: [...#CryptoReplaceFfxFpeConfigCryptoKeyParameters] @go(CryptoKey,[]CryptoReplaceFfxFpeConfigCryptoKeyParameters)

	// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is:
	// 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|:;"'<,>.?/
	// +kubebuilder:validation:Optional
	customAlphabet?: null | string @go(CustomAlphabet,*string)

	// The native way to select the alphabet. Must be in the range [2, 95].
	// +kubebuilder:validation:Optional
	radix?: null | float64 @go(Radix,*float64)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	surrogateInfoType?: [...#CryptoReplaceFfxFpeConfigSurrogateInfoTypeParameters] @go(SurrogateInfoType,[]CryptoReplaceFfxFpeConfigSurrogateInfoTypeParameters)
}

#CryptoReplaceFfxFpeConfigSurrogateInfoTypeInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#CryptoReplaceFfxFpeConfigSurrogateInfoTypeObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#CryptoReplaceFfxFpeConfigSurrogateInfoTypeParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#DateShiftConfigContextInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#DateShiftConfigContextObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#DateShiftConfigContextParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#DateShiftConfigCryptoKeyInitParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#DateShiftConfigCryptoKeyKMSWrappedInitParameters] @go(KMSWrapped,[]DateShiftConfigCryptoKeyKMSWrappedInitParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#DateShiftConfigCryptoKeyTransientInitParameters] @go(Transient,[]DateShiftConfigCryptoKeyTransientInitParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#DateShiftConfigCryptoKeyUnwrappedInitParameters] @go(Unwrapped,[]DateShiftConfigCryptoKeyUnwrappedInitParameters)
}

#DateShiftConfigCryptoKeyKMSWrappedInitParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#DateShiftConfigCryptoKeyKMSWrappedObservation: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#DateShiftConfigCryptoKeyKMSWrappedParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	// +kubebuilder:validation:Optional
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#DateShiftConfigCryptoKeyObservation: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#DateShiftConfigCryptoKeyKMSWrappedObservation] @go(KMSWrapped,[]DateShiftConfigCryptoKeyKMSWrappedObservation)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#DateShiftConfigCryptoKeyTransientObservation] @go(Transient,[]DateShiftConfigCryptoKeyTransientObservation)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#DateShiftConfigCryptoKeyUnwrappedObservation] @go(Unwrapped,[]DateShiftConfigCryptoKeyUnwrappedObservation)
}

#DateShiftConfigCryptoKeyParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	kmsWrapped?: [...#DateShiftConfigCryptoKeyKMSWrappedParameters] @go(KMSWrapped,[]DateShiftConfigCryptoKeyKMSWrappedParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	transient?: [...#DateShiftConfigCryptoKeyTransientParameters] @go(Transient,[]DateShiftConfigCryptoKeyTransientParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	unwrapped?: [...#DateShiftConfigCryptoKeyUnwrappedParameters] @go(Unwrapped,[]DateShiftConfigCryptoKeyUnwrappedParameters)
}

#DateShiftConfigCryptoKeyTransientInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#DateShiftConfigCryptoKeyTransientObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#DateShiftConfigCryptoKeyTransientParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#DateShiftConfigCryptoKeyUnwrappedInitParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#DateShiftConfigCryptoKeyUnwrappedObservation: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#DateShiftConfigCryptoKeyUnwrappedParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#DateShiftConfigInitParameters: {
	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	context?: [...#DateShiftConfigContextInitParameters] @go(Context,[]DateShiftConfigContextInitParameters)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#DateShiftConfigCryptoKeyInitParameters] @go(CryptoKey,[]DateShiftConfigCryptoKeyInitParameters)

	// For example, -5 means shift date to at most 5 days back in the past.
	lowerBoundDays?: null | float64 @go(LowerBoundDays,*float64)

	// Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction.
	// For example, 3 means shift date to at most 3 days into the future.
	upperBoundDays?: null | float64 @go(UpperBoundDays,*float64)
}

#DateShiftConfigObservation: {
	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	context?: [...#DateShiftConfigContextObservation] @go(Context,[]DateShiftConfigContextObservation)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#DateShiftConfigCryptoKeyObservation] @go(CryptoKey,[]DateShiftConfigCryptoKeyObservation)

	// For example, -5 means shift date to at most 5 days back in the past.
	lowerBoundDays?: null | float64 @go(LowerBoundDays,*float64)

	// Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction.
	// For example, 3 means shift date to at most 3 days into the future.
	upperBoundDays?: null | float64 @go(UpperBoundDays,*float64)
}

#DateShiftConfigParameters: {
	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	context?: [...#DateShiftConfigContextParameters] @go(Context,[]DateShiftConfigContextParameters)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoKey?: [...#DateShiftConfigCryptoKeyParameters] @go(CryptoKey,[]DateShiftConfigCryptoKeyParameters)

	// For example, -5 means shift date to at most 5 days back in the past.
	// +kubebuilder:validation:Optional
	lowerBoundDays?: null | float64 @go(LowerBoundDays,*float64)

	// Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction.
	// For example, 3 means shift date to at most 3 days into the future.
	// +kubebuilder:validation:Optional
	upperBoundDays?: null | float64 @go(UpperBoundDays,*float64)
}

#DateValueInitParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#DateValueObservation: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#DateValueParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	// +kubebuilder:validation:Optional
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	// +kubebuilder:validation:Optional
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	// +kubebuilder:validation:Optional
	year?: null | float64 @go(Year,*float64)
}

#DeidentifyConfigInitParameters: {
	// Treat the dataset as an image and redact.
	// Structure is documented below.
	imageTransformations?: [...#ImageTransformationsInitParameters] @go(ImageTransformations,[]ImageTransformationsInitParameters)

	// Treat the dataset as free-form text and apply the same free text transformation everywhere
	// Structure is documented below.
	infoTypeTransformations?: [...#InfoTypeTransformationsInitParameters] @go(InfoTypeTransformations,[]InfoTypeTransformationsInitParameters)

	// Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
	// Structure is documented below.
	recordTransformations?: [...#RecordTransformationsInitParameters] @go(RecordTransformations,[]RecordTransformationsInitParameters)
}

#DeidentifyConfigObservation: {
	// Treat the dataset as an image and redact.
	// Structure is documented below.
	imageTransformations?: [...#ImageTransformationsObservation] @go(ImageTransformations,[]ImageTransformationsObservation)

	// Treat the dataset as free-form text and apply the same free text transformation everywhere
	// Structure is documented below.
	infoTypeTransformations?: [...#InfoTypeTransformationsObservation] @go(InfoTypeTransformations,[]InfoTypeTransformationsObservation)

	// Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
	// Structure is documented below.
	recordTransformations?: [...#RecordTransformationsObservation] @go(RecordTransformations,[]RecordTransformationsObservation)
}

#DeidentifyConfigParameters: {
	// Treat the dataset as an image and redact.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	imageTransformations?: [...#ImageTransformationsParameters] @go(ImageTransformations,[]ImageTransformationsParameters)

	// Treat the dataset as free-form text and apply the same free text transformation everywhere
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	infoTypeTransformations?: [...#InfoTypeTransformationsParameters] @go(InfoTypeTransformations,[]InfoTypeTransformationsParameters)

	// Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	recordTransformations?: [...#RecordTransformationsParameters] @go(RecordTransformations,[]RecordTransformationsParameters)
}

#DeidentifyTemplateInitParameters: {
	// Configuration of the deidentify template
	// Structure is documented below.
	deidentifyConfig?: [...#DeidentifyConfigInitParameters] @go(DeidentifyConfig,[]DeidentifyConfigInitParameters)

	// A description of the template.
	description?: null | string @go(Description,*string)

	// User set display name of the template.
	displayName?: null | string @go(DisplayName,*string)

	// The parent of the template in any of the following formats:
	parent?: null | string @go(Parent,*string)
}

#DeidentifyTemplateObservation: {
	// The creation timestamp of an deidentifyTemplate. Set by the server.
	createTime?: null | string @go(CreateTime,*string)

	// Configuration of the deidentify template
	// Structure is documented below.
	deidentifyConfig?: [...#DeidentifyConfigObservation] @go(DeidentifyConfig,[]DeidentifyConfigObservation)

	// A description of the template.
	description?: null | string @go(Description,*string)

	// User set display name of the template.
	displayName?: null | string @go(DisplayName,*string)

	// an identifier for the resource with format {{parent}}/deidentifyTemplates/{{name}}
	id?: null | string @go(ID,*string)

	// The resource name of the template. Set by the server.
	name?: null | string @go(Name,*string)

	// The parent of the template in any of the following formats:
	parent?: null | string @go(Parent,*string)

	// The last update timestamp of an deidentifyTemplate. Set by the server.
	updateTime?: null | string @go(UpdateTime,*string)
}

#DeidentifyTemplateParameters: {
	// Configuration of the deidentify template
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	deidentifyConfig?: [...#DeidentifyConfigParameters] @go(DeidentifyConfig,[]DeidentifyConfigParameters)

	// A description of the template.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// User set display name of the template.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// The parent of the template in any of the following formats:
	// +kubebuilder:validation:Optional
	parent?: null | string @go(Parent,*string)
}

#ExpressionsConditionsConditionsInitParameters: {
	// Field within the record this condition is evaluated against.
	// Structure is documented below.
	field?: [...#ConditionsFieldInitParameters] @go(Field,[]ConditionsFieldInitParameters)

	// Operator used to compare the field or infoType to the value.
	// Possible values are: EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN_OR_EQUALS, EXISTS.
	operator?: null | string @go(Operator,*string)

	// Value to compare against.
	// The value block must only contain one argument. For example when a condition is evaluated against a string-type field, only string_value should be set.
	// This argument is mandatory, except for conditions using the EXISTS operator.
	// Structure is documented below.
	value?: [...#ConditionsValueInitParameters] @go(Value,[]ConditionsValueInitParameters)
}

#ExpressionsConditionsConditionsObservation: {
	// Field within the record this condition is evaluated against.
	// Structure is documented below.
	field?: [...#ConditionsFieldObservation] @go(Field,[]ConditionsFieldObservation)

	// Operator used to compare the field or infoType to the value.
	// Possible values are: EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN_OR_EQUALS, EXISTS.
	operator?: null | string @go(Operator,*string)

	// Value to compare against.
	// The value block must only contain one argument. For example when a condition is evaluated against a string-type field, only string_value should be set.
	// This argument is mandatory, except for conditions using the EXISTS operator.
	// Structure is documented below.
	value?: [...#ConditionsValueObservation] @go(Value,[]ConditionsValueObservation)
}

#ExpressionsConditionsConditionsParameters: {
	// Field within the record this condition is evaluated against.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	field?: [...#ConditionsFieldParameters] @go(Field,[]ConditionsFieldParameters)

	// Operator used to compare the field or infoType to the value.
	// Possible values are: EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN_OR_EQUALS, EXISTS.
	// +kubebuilder:validation:Optional
	operator?: null | string @go(Operator,*string)

	// Value to compare against.
	// The value block must only contain one argument. For example when a condition is evaluated against a string-type field, only string_value should be set.
	// This argument is mandatory, except for conditions using the EXISTS operator.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	value?: [...#ConditionsValueParameters] @go(Value,[]ConditionsValueParameters)
}

#ExpressionsConditionsInitParameters: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	conditions?: [...#ExpressionsConditionsConditionsInitParameters] @go(Conditions,[]ExpressionsConditionsConditionsInitParameters)
}

#ExpressionsConditionsObservation: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	conditions?: [...#ExpressionsConditionsConditionsObservation] @go(Conditions,[]ExpressionsConditionsConditionsObservation)
}

#ExpressionsConditionsParameters: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	conditions?: [...#ExpressionsConditionsConditionsParameters] @go(Conditions,[]ExpressionsConditionsConditionsParameters)
}

#ExpressionsInitParameters: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	conditions?: [...#ConditionsInitParameters] @go(Conditions,[]ConditionsInitParameters)

	// The operator to apply to the result of conditions. Default and currently only supported value is AND.
	// Default value is AND.
	// Possible values are: AND.
	logicalOperator?: null | string @go(LogicalOperator,*string)
}

#ExpressionsObservation: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	conditions?: [...#ConditionsObservation] @go(Conditions,[]ConditionsObservation)

	// The operator to apply to the result of conditions. Default and currently only supported value is AND.
	// Default value is AND.
	// Possible values are: AND.
	logicalOperator?: null | string @go(LogicalOperator,*string)
}

#ExpressionsParameters: {
	// Conditions to apply to the expression.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	conditions?: [...#ConditionsParameters] @go(Conditions,[]ConditionsParameters)

	// The operator to apply to the result of conditions. Default and currently only supported value is AND.
	// Default value is AND.
	// Possible values are: AND.
	// +kubebuilder:validation:Optional
	logicalOperator?: null | string @go(LogicalOperator,*string)
}

#FieldInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#FieldObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#FieldParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#FieldTransformationsInitParameters: {
	// A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
	// Structure is documented below.
	condition?: [...#ConditionInitParameters] @go(Condition,[]ConditionInitParameters)

	// Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId.
	// FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
	// Structure is documented below.
	fields?: [...#FieldsInitParameters] @go(Fields,[]FieldsInitParameters)

	// Primitive transformation to apply to the infoType.
	// The primitive_transformation block must only contain one argument, corresponding to the type of transformation.
	// Structure is documented below.
	primitiveTransformation?: [...#FieldTransformationsPrimitiveTransformationInitParameters] @go(PrimitiveTransformation,[]FieldTransformationsPrimitiveTransformationInitParameters)
}

#FieldTransformationsObservation: {
	// A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
	// Structure is documented below.
	condition?: [...#ConditionObservation] @go(Condition,[]ConditionObservation)

	// Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId.
	// FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
	// Structure is documented below.
	fields?: [...#FieldsObservation] @go(Fields,[]FieldsObservation)

	// Primitive transformation to apply to the infoType.
	// The primitive_transformation block must only contain one argument, corresponding to the type of transformation.
	// Structure is documented below.
	primitiveTransformation?: [...#FieldTransformationsPrimitiveTransformationObservation] @go(PrimitiveTransformation,[]FieldTransformationsPrimitiveTransformationObservation)
}

#FieldTransformationsParameters: {
	// A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	condition?: [...#ConditionParameters] @go(Condition,[]ConditionParameters)

	// Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId.
	// FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	fields?: [...#FieldsParameters] @go(Fields,[]FieldsParameters)

	// Primitive transformation to apply to the infoType.
	// The primitive_transformation block must only contain one argument, corresponding to the type of transformation.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	primitiveTransformation?: [...#FieldTransformationsPrimitiveTransformationParameters] @go(PrimitiveTransformation,[]FieldTransformationsPrimitiveTransformationParameters)
}

#FieldTransformationsPrimitiveTransformationInitParameters: {
	// Generalization function that buckets values based on ranges. The ranges and replacement values are dynamically provided by the user for custom behavior, such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH
	// This can be used on data of type: number, long, string, timestamp.
	// If the provided value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing.
	// See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
	// Structure is documented below.
	bucketingConfig?: [...#BucketingConfigInitParameters] @go(BucketingConfig,[]BucketingConfigInitParameters)

	// Partially mask a string by replacing a given number of characters with a fixed character.
	// Masking can start from the beginning or end of the string.
	// Structure is documented below.
	characterMaskConfig?: [...#PrimitiveTransformationCharacterMaskConfigInitParameters] @go(CharacterMaskConfig,[]PrimitiveTransformationCharacterMaskConfigInitParameters)

	// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
	// Structure is documented below.
	cryptoDeterministicConfig?: [...#PrimitiveTransformationCryptoDeterministicConfigInitParameters] @go(CryptoDeterministicConfig,[]PrimitiveTransformationCryptoDeterministicConfigInitParameters)

	// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes.
	// Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=).
	// Currently, only string and integer values can be hashed.
	// See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
	// Structure is documented below.
	cryptoHashConfig?: [...#CryptoHashConfigInitParameters] @go(CryptoHashConfig,[]CryptoHashConfigInitParameters)

	// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the content.reidentify API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
	// Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
	// Structure is documented below.
	cryptoReplaceFfxFpeConfig?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigInitParameters] @go(CryptoReplaceFfxFpeConfig,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigInitParameters)

	// Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting to learn more.
	// Structure is documented below.
	dateShiftConfig?: [...#DateShiftConfigInitParameters] @go(DateShiftConfig,[]DateShiftConfigInitParameters)

	// Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies.
	// The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and upper_bound = 20, all values that are within this bucket will be replaced with "10-20".
	// This can be used on data of type: double, long.
	// If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing.
	// See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
	// Structure is documented below.
	fixedSizeBucketingConfig?: [...#FixedSizeBucketingConfigInitParameters] @go(FixedSizeBucketingConfig,[]FixedSizeBucketingConfigInitParameters)

	// Redact a given value. For example, if used with an InfoTypeTransformation transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the output would be 'My phone number is '.
	redactConfig?: [...#RedactConfigInitParameters] @go(RedactConfig,[]RedactConfigInitParameters)

	// Replace each input value with a given value.
	// Structure is documented below.
	replaceConfig?: [...#PrimitiveTransformationReplaceConfigInitParameters] @go(ReplaceConfig,[]PrimitiveTransformationReplaceConfigInitParameters)

	// Replace with a value randomly drawn (with replacement) from a dictionary.
	// Structure is documented below.
	replaceDictionaryConfig?: [...#PrimitiveTransformationReplaceDictionaryConfigInitParameters] @go(ReplaceDictionaryConfig,[]PrimitiveTransformationReplaceDictionaryConfigInitParameters)

	// For use with Date, Timestamp, and TimeOfDay, extract or preserve a portion of the value.
	// Structure is documented below.
	timePartConfig?: [...#TimePartConfigInitParameters] @go(TimePartConfig,[]TimePartConfigInitParameters)
}

#FieldTransformationsPrimitiveTransformationObservation: {
	// Generalization function that buckets values based on ranges. The ranges and replacement values are dynamically provided by the user for custom behavior, such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH
	// This can be used on data of type: number, long, string, timestamp.
	// If the provided value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing.
	// See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
	// Structure is documented below.
	bucketingConfig?: [...#BucketingConfigObservation] @go(BucketingConfig,[]BucketingConfigObservation)

	// Partially mask a string by replacing a given number of characters with a fixed character.
	// Masking can start from the beginning or end of the string.
	// Structure is documented below.
	characterMaskConfig?: [...#PrimitiveTransformationCharacterMaskConfigObservation] @go(CharacterMaskConfig,[]PrimitiveTransformationCharacterMaskConfigObservation)

	// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
	// Structure is documented below.
	cryptoDeterministicConfig?: [...#PrimitiveTransformationCryptoDeterministicConfigObservation] @go(CryptoDeterministicConfig,[]PrimitiveTransformationCryptoDeterministicConfigObservation)

	// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes.
	// Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=).
	// Currently, only string and integer values can be hashed.
	// See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
	// Structure is documented below.
	cryptoHashConfig?: [...#CryptoHashConfigObservation] @go(CryptoHashConfig,[]CryptoHashConfigObservation)

	// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the content.reidentify API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
	// Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
	// Structure is documented below.
	cryptoReplaceFfxFpeConfig?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigObservation] @go(CryptoReplaceFfxFpeConfig,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigObservation)

	// Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting to learn more.
	// Structure is documented below.
	dateShiftConfig?: [...#DateShiftConfigObservation] @go(DateShiftConfig,[]DateShiftConfigObservation)

	// Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies.
	// The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and upper_bound = 20, all values that are within this bucket will be replaced with "10-20".
	// This can be used on data of type: double, long.
	// If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing.
	// See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
	// Structure is documented below.
	fixedSizeBucketingConfig?: [...#FixedSizeBucketingConfigObservation] @go(FixedSizeBucketingConfig,[]FixedSizeBucketingConfigObservation)

	// Redact a given value. For example, if used with an InfoTypeTransformation transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the output would be 'My phone number is '.
	redactConfig?: [...#RedactConfigParameters] @go(RedactConfig,[]RedactConfigParameters)

	// Replace each input value with a given value.
	// Structure is documented below.
	replaceConfig?: [...#PrimitiveTransformationReplaceConfigObservation] @go(ReplaceConfig,[]PrimitiveTransformationReplaceConfigObservation)

	// Replace with a value randomly drawn (with replacement) from a dictionary.
	// Structure is documented below.
	replaceDictionaryConfig?: [...#PrimitiveTransformationReplaceDictionaryConfigObservation] @go(ReplaceDictionaryConfig,[]PrimitiveTransformationReplaceDictionaryConfigObservation)

	// For use with Date, Timestamp, and TimeOfDay, extract or preserve a portion of the value.
	// Structure is documented below.
	timePartConfig?: [...#TimePartConfigObservation] @go(TimePartConfig,[]TimePartConfigObservation)
}

#FieldTransformationsPrimitiveTransformationParameters: {
	// Generalization function that buckets values based on ranges. The ranges and replacement values are dynamically provided by the user for custom behavior, such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH
	// This can be used on data of type: number, long, string, timestamp.
	// If the provided value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing.
	// See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	bucketingConfig?: [...#BucketingConfigParameters] @go(BucketingConfig,[]BucketingConfigParameters)

	// Partially mask a string by replacing a given number of characters with a fixed character.
	// Masking can start from the beginning or end of the string.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	characterMaskConfig?: [...#PrimitiveTransformationCharacterMaskConfigParameters] @go(CharacterMaskConfig,[]PrimitiveTransformationCharacterMaskConfigParameters)

	// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoDeterministicConfig?: [...#PrimitiveTransformationCryptoDeterministicConfigParameters] @go(CryptoDeterministicConfig,[]PrimitiveTransformationCryptoDeterministicConfigParameters)

	// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes.
	// Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=).
	// Currently, only string and integer values can be hashed.
	// See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoHashConfig?: [...#CryptoHashConfigParameters] @go(CryptoHashConfig,[]CryptoHashConfigParameters)

	// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the content.reidentify API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
	// Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoReplaceFfxFpeConfig?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigParameters] @go(CryptoReplaceFfxFpeConfig,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigParameters)

	// Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting to learn more.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	dateShiftConfig?: [...#DateShiftConfigParameters] @go(DateShiftConfig,[]DateShiftConfigParameters)

	// Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies.
	// The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and upper_bound = 20, all values that are within this bucket will be replaced with "10-20".
	// This can be used on data of type: double, long.
	// If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing.
	// See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	fixedSizeBucketingConfig?: [...#FixedSizeBucketingConfigParameters] @go(FixedSizeBucketingConfig,[]FixedSizeBucketingConfigParameters)

	// Redact a given value. For example, if used with an InfoTypeTransformation transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the output would be 'My phone number is '.
	// +kubebuilder:validation:Optional
	redactConfig?: [...#RedactConfigParameters] @go(RedactConfig,[]RedactConfigParameters)

	// Replace each input value with a given value.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	replaceConfig?: [...#PrimitiveTransformationReplaceConfigParameters] @go(ReplaceConfig,[]PrimitiveTransformationReplaceConfigParameters)

	// Replace with a value randomly drawn (with replacement) from a dictionary.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	replaceDictionaryConfig?: [...#PrimitiveTransformationReplaceDictionaryConfigParameters] @go(ReplaceDictionaryConfig,[]PrimitiveTransformationReplaceDictionaryConfigParameters)

	// For use with Date, Timestamp, and TimeOfDay, extract or preserve a portion of the value.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timePartConfig?: [...#TimePartConfigParameters] @go(TimePartConfig,[]TimePartConfigParameters)
}

#FieldsInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#FieldsObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#FieldsParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#FixedSizeBucketingConfigInitParameters: {
	// Size of each bucket (except for minimum and maximum buckets).
	// So if lower_bound = 10, upper_bound = 89, and bucketSize = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+.
	// Precision up to 2 decimals works.
	bucketSize?: null | float64 @go(BucketSize,*float64)

	// Lower bound value of buckets.
	// All values less than lower_bound are grouped together into a single bucket; for example if lower_bound = 10, then all values less than 10 are replaced with the value "-10".
	// The lower_bound block must only contain one argument. See the fixed_size_bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	lowerBound?: [...#LowerBoundInitParameters] @go(LowerBound,[]LowerBoundInitParameters)

	// Upper bound value of buckets.
	// All values greater than upper_bound are grouped together into a single bucket; for example if upper_bound = 89, then all values greater than 89 are replaced with the value "89+".
	// The upper_bound block must only contain one argument. See the fixed_size_bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	upperBound?: [...#UpperBoundInitParameters] @go(UpperBound,[]UpperBoundInitParameters)
}

#FixedSizeBucketingConfigObservation: {
	// Size of each bucket (except for minimum and maximum buckets).
	// So if lower_bound = 10, upper_bound = 89, and bucketSize = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+.
	// Precision up to 2 decimals works.
	bucketSize?: null | float64 @go(BucketSize,*float64)

	// Lower bound value of buckets.
	// All values less than lower_bound are grouped together into a single bucket; for example if lower_bound = 10, then all values less than 10 are replaced with the value "-10".
	// The lower_bound block must only contain one argument. See the fixed_size_bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	lowerBound?: [...#LowerBoundObservation] @go(LowerBound,[]LowerBoundObservation)

	// Upper bound value of buckets.
	// All values greater than upper_bound are grouped together into a single bucket; for example if upper_bound = 89, then all values greater than 89 are replaced with the value "89+".
	// The upper_bound block must only contain one argument. See the fixed_size_bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	upperBound?: [...#UpperBoundObservation] @go(UpperBound,[]UpperBoundObservation)
}

#FixedSizeBucketingConfigParameters: {
	// Size of each bucket (except for minimum and maximum buckets).
	// So if lower_bound = 10, upper_bound = 89, and bucketSize = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+.
	// Precision up to 2 decimals works.
	// +kubebuilder:validation:Optional
	bucketSize?: null | float64 @go(BucketSize,*float64)

	// Lower bound value of buckets.
	// All values less than lower_bound are grouped together into a single bucket; for example if lower_bound = 10, then all values less than 10 are replaced with the value "-10".
	// The lower_bound block must only contain one argument. See the fixed_size_bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	lowerBound?: [...#LowerBoundParameters] @go(LowerBound,[]LowerBoundParameters)

	// Upper bound value of buckets.
	// All values greater than upper_bound are grouped together into a single bucket; for example if upper_bound = 89, then all values greater than 89 are replaced with the value "89+".
	// The upper_bound block must only contain one argument. See the fixed_size_bucketing_config block description for more information about choosing a data type.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	upperBound?: [...#UpperBoundParameters] @go(UpperBound,[]UpperBoundParameters)
}

#ImageTransformationsInitParameters: {
	// For determination of how redaction of images should occur.
	// Structure is documented below.
	transforms?: [...#TransformsInitParameters] @go(Transforms,[]TransformsInitParameters)
}

#ImageTransformationsObservation: {
	// For determination of how redaction of images should occur.
	// Structure is documented below.
	transforms?: [...#TransformsObservation] @go(Transforms,[]TransformsObservation)
}

#ImageTransformationsParameters: {
	// For determination of how redaction of images should occur.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	transforms?: [...#TransformsParameters] @go(Transforms,[]TransformsParameters)
}

#InfoTypeTransformationsInitParameters: {
	// Transformation for each infoType. Cannot specify more than one for a given infoType.
	// Structure is documented below.
	transformations?: [...#TransformationsInitParameters] @go(Transformations,[]TransformationsInitParameters)
}

#InfoTypeTransformationsObservation: {
	// Transformation for each infoType. Cannot specify more than one for a given infoType.
	// Structure is documented below.
	transformations?: [...#TransformationsObservation] @go(Transformations,[]TransformationsObservation)
}

#InfoTypeTransformationsParameters: {
	// Transformation for each infoType. Cannot specify more than one for a given infoType.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	transformations?: [...#TransformationsParameters] @go(Transformations,[]TransformationsParameters)
}

#InfoTypesInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#InfoTypesObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#InfoTypesParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#KMSWrappedInitParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#KMSWrappedObservation: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#KMSWrappedParameters: {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	// +kubebuilder:validation:Optional
	cryptoKeyName?: null | string @go(CryptoKeyName,*string)

	// The wrapped data crypto key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	wrappedKey?: null | string @go(WrappedKey,*string)
}

#LowerBoundDateValueInitParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#LowerBoundDateValueObservation: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#LowerBoundDateValueParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	// +kubebuilder:validation:Optional
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	// +kubebuilder:validation:Optional
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	// +kubebuilder:validation:Optional
	year?: null | float64 @go(Year,*float64)
}

#LowerBoundInitParameters: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#LowerBoundDateValueInitParameters] @go(DateValue,[]LowerBoundDateValueInitParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#LowerBoundTimeValueInitParameters] @go(TimeValue,[]LowerBoundTimeValueInitParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#LowerBoundObservation: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#LowerBoundDateValueObservation] @go(DateValue,[]LowerBoundDateValueObservation)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#LowerBoundTimeValueObservation] @go(TimeValue,[]LowerBoundTimeValueObservation)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#LowerBoundParameters: {
	// A boolean value.
	// +kubebuilder:validation:Optional
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	dateValue?: [...#LowerBoundDateValueParameters] @go(DateValue,[]LowerBoundDateValueParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	// +kubebuilder:validation:Optional
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	// +kubebuilder:validation:Optional
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	// +kubebuilder:validation:Optional
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	// +kubebuilder:validation:Optional
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeValue?: [...#LowerBoundTimeValueParameters] @go(TimeValue,[]LowerBoundTimeValueParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	timestampValue?: null | string @go(TimestampValue,*string)
}

#LowerBoundTimeValueInitParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#LowerBoundTimeValueObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#LowerBoundTimeValueParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#MaxDateValueInitParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#MaxDateValueObservation: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#MaxDateValueParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	// +kubebuilder:validation:Optional
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	// +kubebuilder:validation:Optional
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	// +kubebuilder:validation:Optional
	year?: null | float64 @go(Year,*float64)
}

#MaxInitParameters: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#MaxDateValueInitParameters] @go(DateValue,[]MaxDateValueInitParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#MaxTimeValueInitParameters] @go(TimeValue,[]MaxTimeValueInitParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#MaxObservation: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#MaxDateValueObservation] @go(DateValue,[]MaxDateValueObservation)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#MaxTimeValueObservation] @go(TimeValue,[]MaxTimeValueObservation)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#MaxParameters: {
	// A boolean value.
	// +kubebuilder:validation:Optional
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	dateValue?: [...#MaxDateValueParameters] @go(DateValue,[]MaxDateValueParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	// +kubebuilder:validation:Optional
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	// +kubebuilder:validation:Optional
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	// +kubebuilder:validation:Optional
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	// +kubebuilder:validation:Optional
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeValue?: [...#MaxTimeValueParameters] @go(TimeValue,[]MaxTimeValueParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	timestampValue?: null | string @go(TimestampValue,*string)
}

#MaxTimeValueInitParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#MaxTimeValueObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#MaxTimeValueParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#MinDateValueInitParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#MinDateValueObservation: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#MinDateValueParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	// +kubebuilder:validation:Optional
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	// +kubebuilder:validation:Optional
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	// +kubebuilder:validation:Optional
	year?: null | float64 @go(Year,*float64)
}

#MinInitParameters: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#MinDateValueInitParameters] @go(DateValue,[]MinDateValueInitParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#MinTimeValueInitParameters] @go(TimeValue,[]MinTimeValueInitParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#MinObservation: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#MinDateValueObservation] @go(DateValue,[]MinDateValueObservation)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#MinTimeValueObservation] @go(TimeValue,[]MinTimeValueObservation)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#MinParameters: {
	// A boolean value.
	// +kubebuilder:validation:Optional
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	dateValue?: [...#MinDateValueParameters] @go(DateValue,[]MinDateValueParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	// +kubebuilder:validation:Optional
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	// +kubebuilder:validation:Optional
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	// +kubebuilder:validation:Optional
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	// +kubebuilder:validation:Optional
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeValue?: [...#MinTimeValueParameters] @go(TimeValue,[]MinTimeValueParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	timestampValue?: null | string @go(TimestampValue,*string)
}

#MinTimeValueInitParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#MinTimeValueObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#MinTimeValueParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#NewValueDateValueInitParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#NewValueDateValueObservation: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#NewValueDateValueParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	// +kubebuilder:validation:Optional
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	// +kubebuilder:validation:Optional
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	// +kubebuilder:validation:Optional
	year?: null | float64 @go(Year,*float64)
}

#NewValueInitParameters: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#DateValueInitParameters] @go(DateValue,[]DateValueInitParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | float64 @go(IntegerValue,*float64)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#TimeValueInitParameters] @go(TimeValue,[]TimeValueInitParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#NewValueObservation: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#DateValueObservation] @go(DateValue,[]DateValueObservation)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | float64 @go(IntegerValue,*float64)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#TimeValueObservation] @go(TimeValue,[]TimeValueObservation)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#NewValueParameters: {
	// A boolean value.
	// +kubebuilder:validation:Optional
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	dateValue?: [...#DateValueParameters] @go(DateValue,[]DateValueParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	// +kubebuilder:validation:Optional
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	// +kubebuilder:validation:Optional
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	// +kubebuilder:validation:Optional
	integerValue?: null | float64 @go(IntegerValue,*float64)

	// A string value.
	// +kubebuilder:validation:Optional
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeValue?: [...#TimeValueParameters] @go(TimeValue,[]TimeValueParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	timestampValue?: null | string @go(TimestampValue,*string)
}

#NewValueTimeValueInitParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#NewValueTimeValueObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#NewValueTimeValueParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#PrimitiveTransformationCharacterMaskConfigInitParameters: {
	charactersToIgnore?: [...#CharacterMaskConfigCharactersToIgnoreInitParameters] @go(CharactersToIgnore,[]CharacterMaskConfigCharactersToIgnoreInitParameters)

	// is *
	maskingCharacter?: null | string @go(MaskingCharacter,*string)

	// 4
	numberToMask?: null | float64 @go(NumberToMask,*float64)

	// is false
	reverseOrder?: null | bool @go(ReverseOrder,*bool)
}

#PrimitiveTransformationCharacterMaskConfigObservation: {
	charactersToIgnore?: [...#CharacterMaskConfigCharactersToIgnoreObservation] @go(CharactersToIgnore,[]CharacterMaskConfigCharactersToIgnoreObservation)

	// is *
	maskingCharacter?: null | string @go(MaskingCharacter,*string)

	// 4
	numberToMask?: null | float64 @go(NumberToMask,*float64)

	// is false
	reverseOrder?: null | bool @go(ReverseOrder,*bool)
}

#PrimitiveTransformationCharacterMaskConfigParameters: {
	// +kubebuilder:validation:Optional
	charactersToIgnore?: [...#CharacterMaskConfigCharactersToIgnoreParameters] @go(CharactersToIgnore,[]CharacterMaskConfigCharactersToIgnoreParameters)

	// is *
	// +kubebuilder:validation:Optional
	maskingCharacter?: null | string @go(MaskingCharacter,*string)

	// 4
	// +kubebuilder:validation:Optional
	numberToMask?: null | float64 @go(NumberToMask,*float64)

	// is false
	// +kubebuilder:validation:Optional
	reverseOrder?: null | bool @go(ReverseOrder,*bool)
}

#PrimitiveTransformationCryptoDeterministicConfigInitParameters: {
	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	context?: [...#CryptoDeterministicConfigContextInitParameters] @go(Context,[]CryptoDeterministicConfigContextInitParameters)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#CryptoDeterministicConfigCryptoKeyInitParameters] @go(CryptoKey,[]CryptoDeterministicConfigCryptoKeyInitParameters)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	surrogateInfoType?: [...#CryptoDeterministicConfigSurrogateInfoTypeInitParameters] @go(SurrogateInfoType,[]CryptoDeterministicConfigSurrogateInfoTypeInitParameters)
}

#PrimitiveTransformationCryptoDeterministicConfigObservation: {
	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	context?: [...#CryptoDeterministicConfigContextObservation] @go(Context,[]CryptoDeterministicConfigContextObservation)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#CryptoDeterministicConfigCryptoKeyObservation] @go(CryptoKey,[]CryptoDeterministicConfigCryptoKeyObservation)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	surrogateInfoType?: [...#CryptoDeterministicConfigSurrogateInfoTypeObservation] @go(SurrogateInfoType,[]CryptoDeterministicConfigSurrogateInfoTypeObservation)
}

#PrimitiveTransformationCryptoDeterministicConfigParameters: {
	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	context?: [...#CryptoDeterministicConfigContextParameters] @go(Context,[]CryptoDeterministicConfigContextParameters)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoKey?: [...#CryptoDeterministicConfigCryptoKeyParameters] @go(CryptoKey,[]CryptoDeterministicConfigCryptoKeyParameters)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	surrogateInfoType?: [...#CryptoDeterministicConfigSurrogateInfoTypeParameters] @go(SurrogateInfoType,[]CryptoDeterministicConfigSurrogateInfoTypeParameters)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigContextInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigContextObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigContextParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyInitParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#CryptoReplaceFfxFpeConfigCryptoKeyKMSWrappedInitParameters] @go(KMSWrapped,[]CryptoReplaceFfxFpeConfigCryptoKeyKMSWrappedInitParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#CryptoReplaceFfxFpeConfigCryptoKeyTransientInitParameters] @go(Transient,[]CryptoReplaceFfxFpeConfigCryptoKeyTransientInitParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#CryptoReplaceFfxFpeConfigCryptoKeyUnwrappedInitParameters] @go(Unwrapped,[]CryptoReplaceFfxFpeConfigCryptoKeyUnwrappedInitParameters)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyObservation: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	kmsWrapped?: [...#CryptoReplaceFfxFpeConfigCryptoKeyKMSWrappedObservation] @go(KMSWrapped,[]CryptoReplaceFfxFpeConfigCryptoKeyKMSWrappedObservation)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	transient?: [...#CryptoReplaceFfxFpeConfigCryptoKeyTransientObservation] @go(Transient,[]CryptoReplaceFfxFpeConfigCryptoKeyTransientObservation)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	unwrapped?: [...#CryptoReplaceFfxFpeConfigCryptoKeyUnwrappedObservation] @go(Unwrapped,[]CryptoReplaceFfxFpeConfigCryptoKeyUnwrappedObservation)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyParameters: {
	// KMS wrapped key.
	// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt
	// For more information, see Creating a wrapped key.
	// Note: When you use Cloud KMS for cryptographic operations, charges apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	kmsWrapped?: [...#CryptoReplaceFfxFpeConfigCryptoKeyKMSWrappedParameters] @go(KMSWrapped,[]CryptoReplaceFfxFpeConfigCryptoKeyKMSWrappedParameters)

	// Transient crypto key. Use this to have a random data crypto key generated. It will be discarded after the request finishes.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	transient?: [...#CryptoReplaceFfxFpeConfigCryptoKeyTransientParameters] @go(Transient,[]CryptoReplaceFfxFpeConfigCryptoKeyTransientParameters)

	// Unwrapped crypto key. Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	unwrapped?: [...#CryptoReplaceFfxFpeConfigCryptoKeyUnwrappedParameters] @go(Unwrapped,[]CryptoReplaceFfxFpeConfigCryptoKeyUnwrappedParameters)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigInitParameters: {
	// Common alphabets.
	// Possible values are: FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED, NUMERIC, HEXADECIMAL, UPPER_CASE_ALPHA_NUMERIC, ALPHA_NUMERIC.
	commonAlphabet?: null | string @go(CommonAlphabet,*string)

	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	context?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigContextInitParameters] @go(Context,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigContextInitParameters)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyInitParameters] @go(CryptoKey,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyInitParameters)

	// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is:
	// 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|:;"'<,>.?/
	customAlphabet?: null | string @go(CustomAlphabet,*string)

	// The native way to select the alphabet. Must be in the range [2, 95].
	radix?: null | float64 @go(Radix,*float64)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	surrogateInfoType?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeInitParameters] @go(SurrogateInfoType,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeInitParameters)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigObservation: {
	// Common alphabets.
	// Possible values are: FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED, NUMERIC, HEXADECIMAL, UPPER_CASE_ALPHA_NUMERIC, ALPHA_NUMERIC.
	commonAlphabet?: null | string @go(CommonAlphabet,*string)

	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	context?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigContextObservation] @go(Context,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigContextObservation)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	cryptoKey?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyObservation] @go(CryptoKey,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyObservation)

	// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is:
	// 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|:;"'<,>.?/
	customAlphabet?: null | string @go(CustomAlphabet,*string)

	// The native way to select the alphabet. Must be in the range [2, 95].
	radix?: null | float64 @go(Radix,*float64)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	surrogateInfoType?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeObservation] @go(SurrogateInfoType,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeObservation)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigParameters: {
	// Common alphabets.
	// Possible values are: FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED, NUMERIC, HEXADECIMAL, UPPER_CASE_ALPHA_NUMERIC, ALPHA_NUMERIC.
	// +kubebuilder:validation:Optional
	commonAlphabet?: null | string @go(CommonAlphabet,*string)

	// Points to the field that contains the context, for example, an entity id.
	// If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	context?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigContextParameters] @go(Context,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigContextParameters)

	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and cryptoKey. If set, must also set context. Can only be applied to table items.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoKey?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyParameters] @go(CryptoKey,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyParameters)

	// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is:
	// 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|:;"'<,>.?/
	// +kubebuilder:validation:Optional
	customAlphabet?: null | string @go(CustomAlphabet,*string)

	// The native way to select the alphabet. Must be in the range [2, 95].
	// +kubebuilder:validation:Optional
	radix?: null | float64 @go(Radix,*float64)

	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate
	// For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc'
	// This annotation identifies the surrogate when inspecting content using the custom infoType SurrogateType. This facilitates reversal of the surrogate when it occurs in free text.
	// In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	surrogateInfoType?: [...#PrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeParameters] @go(SurrogateInfoType,[]PrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeParameters)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#PrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoTypeParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#PrimitiveTransformationInitParameters: {
	// Partially mask a string by replacing a given number of characters with a fixed character.
	// Masking can start from the beginning or end of the string.
	// Structure is documented below.
	characterMaskConfig?: [...#CharacterMaskConfigInitParameters] @go(CharacterMaskConfig,[]CharacterMaskConfigInitParameters)

	// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
	// Structure is documented below.
	cryptoDeterministicConfig?: [...#CryptoDeterministicConfigInitParameters] @go(CryptoDeterministicConfig,[]CryptoDeterministicConfigInitParameters)

	// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the content.reidentify API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
	// Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
	// Structure is documented below.
	cryptoReplaceFfxFpeConfig?: [...#CryptoReplaceFfxFpeConfigInitParameters] @go(CryptoReplaceFfxFpeConfig,[]CryptoReplaceFfxFpeConfigInitParameters)

	// Replace each input value with a given value.
	// Structure is documented below.
	replaceConfig?: [...#ReplaceConfigInitParameters] @go(ReplaceConfig,[]ReplaceConfigInitParameters)

	// Replace with a value randomly drawn (with replacement) from a dictionary.
	// Structure is documented below.
	replaceDictionaryConfig?: [...#ReplaceDictionaryConfigInitParameters] @go(ReplaceDictionaryConfig,[]ReplaceDictionaryConfigInitParameters)

	// Replace each matching finding with the name of the info type.
	replaceWithInfoTypeConfig?: null | bool @go(ReplaceWithInfoTypeConfig,*bool)
}

#PrimitiveTransformationObservation: {
	// Partially mask a string by replacing a given number of characters with a fixed character.
	// Masking can start from the beginning or end of the string.
	// Structure is documented below.
	characterMaskConfig?: [...#CharacterMaskConfigObservation] @go(CharacterMaskConfig,[]CharacterMaskConfigObservation)

	// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
	// Structure is documented below.
	cryptoDeterministicConfig?: [...#CryptoDeterministicConfigObservation] @go(CryptoDeterministicConfig,[]CryptoDeterministicConfigObservation)

	// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the content.reidentify API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
	// Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
	// Structure is documented below.
	cryptoReplaceFfxFpeConfig?: [...#CryptoReplaceFfxFpeConfigObservation] @go(CryptoReplaceFfxFpeConfig,[]CryptoReplaceFfxFpeConfigObservation)

	// Replace each input value with a given value.
	// Structure is documented below.
	replaceConfig?: [...#ReplaceConfigObservation] @go(ReplaceConfig,[]ReplaceConfigObservation)

	// Replace with a value randomly drawn (with replacement) from a dictionary.
	// Structure is documented below.
	replaceDictionaryConfig?: [...#ReplaceDictionaryConfigObservation] @go(ReplaceDictionaryConfig,[]ReplaceDictionaryConfigObservation)

	// Replace each matching finding with the name of the info type.
	replaceWithInfoTypeConfig?: null | bool @go(ReplaceWithInfoTypeConfig,*bool)
}

#PrimitiveTransformationParameters: {
	// Partially mask a string by replacing a given number of characters with a fixed character.
	// Masking can start from the beginning or end of the string.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	characterMaskConfig?: [...#CharacterMaskConfigParameters] @go(CharacterMaskConfig,[]CharacterMaskConfigParameters)

	// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoDeterministicConfig?: [...#CryptoDeterministicConfigParameters] @go(CryptoDeterministicConfig,[]CryptoDeterministicConfigParameters)

	// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the content.reidentify API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
	// Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoReplaceFfxFpeConfig?: [...#CryptoReplaceFfxFpeConfigParameters] @go(CryptoReplaceFfxFpeConfig,[]CryptoReplaceFfxFpeConfigParameters)

	// Replace each input value with a given value.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	replaceConfig?: [...#ReplaceConfigParameters] @go(ReplaceConfig,[]ReplaceConfigParameters)

	// Replace with a value randomly drawn (with replacement) from a dictionary.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	replaceDictionaryConfig?: [...#ReplaceDictionaryConfigParameters] @go(ReplaceDictionaryConfig,[]ReplaceDictionaryConfigParameters)

	// Replace each matching finding with the name of the info type.
	// +kubebuilder:validation:Optional
	replaceWithInfoTypeConfig?: null | bool @go(ReplaceWithInfoTypeConfig,*bool)
}

#PrimitiveTransformationReplaceConfigInitParameters: {
	// Replace each input value with a given value.
	// The new_value block must only contain one argument. For example when replacing the contents of a string-type field, only string_value should be set.
	// Structure is documented below.
	newValue?: [...#ReplaceConfigNewValueInitParameters] @go(NewValue,[]ReplaceConfigNewValueInitParameters)
}

#PrimitiveTransformationReplaceConfigObservation: {
	// Replace each input value with a given value.
	// The new_value block must only contain one argument. For example when replacing the contents of a string-type field, only string_value should be set.
	// Structure is documented below.
	newValue?: [...#ReplaceConfigNewValueObservation] @go(NewValue,[]ReplaceConfigNewValueObservation)
}

#PrimitiveTransformationReplaceConfigParameters: {
	// Replace each input value with a given value.
	// The new_value block must only contain one argument. For example when replacing the contents of a string-type field, only string_value should be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	newValue?: [...#ReplaceConfigNewValueParameters] @go(NewValue,[]ReplaceConfigNewValueParameters)
}

#PrimitiveTransformationReplaceDictionaryConfigInitParameters: {
	// A list of words to select from for random replacement. The limits page contains details about the size limits of dictionaries.
	// Structure is documented below.
	wordList?: [...#ReplaceDictionaryConfigWordListInitParameters] @go(WordList,[]ReplaceDictionaryConfigWordListInitParameters)
}

#PrimitiveTransformationReplaceDictionaryConfigObservation: {
	// A list of words to select from for random replacement. The limits page contains details about the size limits of dictionaries.
	// Structure is documented below.
	wordList?: [...#ReplaceDictionaryConfigWordListObservation] @go(WordList,[]ReplaceDictionaryConfigWordListObservation)
}

#PrimitiveTransformationReplaceDictionaryConfigParameters: {
	// A list of words to select from for random replacement. The limits page contains details about the size limits of dictionaries.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	wordList?: [...#ReplaceDictionaryConfigWordListParameters] @go(WordList,[]ReplaceDictionaryConfigWordListParameters)
}

#RecordSuppressionsConditionInitParameters: {
	// An expression, consisting of an operator and conditions.
	// Structure is documented below.
	expressions?: [...#ConditionExpressionsInitParameters] @go(Expressions,[]ConditionExpressionsInitParameters)
}

#RecordSuppressionsConditionObservation: {
	// An expression, consisting of an operator and conditions.
	// Structure is documented below.
	expressions?: [...#ConditionExpressionsObservation] @go(Expressions,[]ConditionExpressionsObservation)
}

#RecordSuppressionsConditionParameters: {
	// An expression, consisting of an operator and conditions.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	expressions?: [...#ConditionExpressionsParameters] @go(Expressions,[]ConditionExpressionsParameters)
}

#RecordSuppressionsInitParameters: {
	// A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
	// Structure is documented below.
	condition?: [...#RecordSuppressionsConditionInitParameters] @go(Condition,[]RecordSuppressionsConditionInitParameters)
}

#RecordSuppressionsObservation: {
	// A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
	// Structure is documented below.
	condition?: [...#RecordSuppressionsConditionObservation] @go(Condition,[]RecordSuppressionsConditionObservation)
}

#RecordSuppressionsParameters: {
	// A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	condition?: [...#RecordSuppressionsConditionParameters] @go(Condition,[]RecordSuppressionsConditionParameters)
}

#RecordTransformationsInitParameters: {
	// Transform the record by applying various field transformations.
	// Structure is documented below.
	fieldTransformations?: [...#FieldTransformationsInitParameters] @go(FieldTransformations,[]FieldTransformationsInitParameters)

	// Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.
	// Structure is documented below.
	recordSuppressions?: [...#RecordSuppressionsInitParameters] @go(RecordSuppressions,[]RecordSuppressionsInitParameters)
}

#RecordTransformationsObservation: {
	// Transform the record by applying various field transformations.
	// Structure is documented below.
	fieldTransformations?: [...#FieldTransformationsObservation] @go(FieldTransformations,[]FieldTransformationsObservation)

	// Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.
	// Structure is documented below.
	recordSuppressions?: [...#RecordSuppressionsObservation] @go(RecordSuppressions,[]RecordSuppressionsObservation)
}

#RecordTransformationsParameters: {
	// Transform the record by applying various field transformations.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	fieldTransformations?: [...#FieldTransformationsParameters] @go(FieldTransformations,[]FieldTransformationsParameters)

	// Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	recordSuppressions?: [...#RecordSuppressionsParameters] @go(RecordSuppressions,[]RecordSuppressionsParameters)
}

#RedactConfigInitParameters: {
}

#RedactConfigObservation: {
}

#RedactConfigParameters: {
}

#RedactionColorInitParameters: {
	// The amount of blue in the color as a value in the interval [0, 1].
	blue?: null | float64 @go(Blue,*float64)

	// The amount of green in the color as a value in the interval [0, 1].
	green?: null | float64 @go(Green,*float64)

	// The amount of red in the color as a value in the interval [0, 1].
	red?: null | float64 @go(Red,*float64)
}

#RedactionColorObservation: {
	// The amount of blue in the color as a value in the interval [0, 1].
	blue?: null | float64 @go(Blue,*float64)

	// The amount of green in the color as a value in the interval [0, 1].
	green?: null | float64 @go(Green,*float64)

	// The amount of red in the color as a value in the interval [0, 1].
	red?: null | float64 @go(Red,*float64)
}

#RedactionColorParameters: {
	// The amount of blue in the color as a value in the interval [0, 1].
	// +kubebuilder:validation:Optional
	blue?: null | float64 @go(Blue,*float64)

	// The amount of green in the color as a value in the interval [0, 1].
	// +kubebuilder:validation:Optional
	green?: null | float64 @go(Green,*float64)

	// The amount of red in the color as a value in the interval [0, 1].
	// +kubebuilder:validation:Optional
	red?: null | float64 @go(Red,*float64)
}

#ReplaceConfigInitParameters: {
	// Replace each input value with a given value.
	// The new_value block must only contain one argument. For example when replacing the contents of a string-type field, only string_value should be set.
	// Structure is documented below.
	newValue?: [...#NewValueInitParameters] @go(NewValue,[]NewValueInitParameters)
}

#ReplaceConfigNewValueInitParameters: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#NewValueDateValueInitParameters] @go(DateValue,[]NewValueDateValueInitParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#NewValueTimeValueInitParameters] @go(TimeValue,[]NewValueTimeValueInitParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ReplaceConfigNewValueObservation: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#NewValueDateValueObservation] @go(DateValue,[]NewValueDateValueObservation)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#NewValueTimeValueObservation] @go(TimeValue,[]NewValueTimeValueObservation)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ReplaceConfigNewValueParameters: {
	// A boolean value.
	// +kubebuilder:validation:Optional
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	dateValue?: [...#NewValueDateValueParameters] @go(DateValue,[]NewValueDateValueParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	// +kubebuilder:validation:Optional
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	// +kubebuilder:validation:Optional
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	// +kubebuilder:validation:Optional
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	// +kubebuilder:validation:Optional
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeValue?: [...#NewValueTimeValueParameters] @go(TimeValue,[]NewValueTimeValueParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ReplaceConfigObservation: {
	// Replace each input value with a given value.
	// The new_value block must only contain one argument. For example when replacing the contents of a string-type field, only string_value should be set.
	// Structure is documented below.
	newValue?: [...#NewValueObservation] @go(NewValue,[]NewValueObservation)
}

#ReplaceConfigParameters: {
	// Replace each input value with a given value.
	// The new_value block must only contain one argument. For example when replacing the contents of a string-type field, only string_value should be set.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	newValue?: [...#NewValueParameters] @go(NewValue,[]NewValueParameters)
}

#ReplaceDictionaryConfigInitParameters: {
	// A list of words to select from for random replacement. The limits page contains details about the size limits of dictionaries.
	// Structure is documented below.
	wordList?: [...#WordListInitParameters] @go(WordList,[]WordListInitParameters)
}

#ReplaceDictionaryConfigObservation: {
	// A list of words to select from for random replacement. The limits page contains details about the size limits of dictionaries.
	// Structure is documented below.
	wordList?: [...#WordListObservation] @go(WordList,[]WordListObservation)
}

#ReplaceDictionaryConfigParameters: {
	// A list of words to select from for random replacement. The limits page contains details about the size limits of dictionaries.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	wordList?: [...#WordListParameters] @go(WordList,[]WordListParameters)
}

#ReplaceDictionaryConfigWordListInitParameters: {
	// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits.
	words?: [...null | string] @go(Words,[]*string)
}

#ReplaceDictionaryConfigWordListObservation: {
	// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits.
	words?: [...null | string] @go(Words,[]*string)
}

#ReplaceDictionaryConfigWordListParameters: {
	// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits.
	// +kubebuilder:validation:Optional
	words?: [...null | string] @go(Words,[]*string)
}

#ReplacementValueDateValueInitParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#ReplacementValueDateValueObservation: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#ReplacementValueDateValueParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	// +kubebuilder:validation:Optional
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	// +kubebuilder:validation:Optional
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	// +kubebuilder:validation:Optional
	year?: null | float64 @go(Year,*float64)
}

#ReplacementValueInitParameters: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#ReplacementValueDateValueInitParameters] @go(DateValue,[]ReplacementValueDateValueInitParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#ReplacementValueTimeValueInitParameters] @go(TimeValue,[]ReplacementValueTimeValueInitParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ReplacementValueObservation: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#ReplacementValueDateValueObservation] @go(DateValue,[]ReplacementValueDateValueObservation)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#ReplacementValueTimeValueObservation] @go(TimeValue,[]ReplacementValueTimeValueObservation)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ReplacementValueParameters: {
	// A boolean value.
	// +kubebuilder:validation:Optional
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	dateValue?: [...#ReplacementValueDateValueParameters] @go(DateValue,[]ReplacementValueDateValueParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	// +kubebuilder:validation:Optional
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	// +kubebuilder:validation:Optional
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	// +kubebuilder:validation:Optional
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	// +kubebuilder:validation:Optional
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeValue?: [...#ReplacementValueTimeValueParameters] @go(TimeValue,[]ReplacementValueTimeValueParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ReplacementValueTimeValueInitParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#ReplacementValueTimeValueObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#ReplacementValueTimeValueParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#SelectedInfoTypesInitParameters: {
	// InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
	// all findings that correspond to infoTypes that were requested in InspectConfig.
	// Structure is documented below.
	infoTypes?: [...#InfoTypesInitParameters] @go(InfoTypes,[]InfoTypesInitParameters)
}

#SelectedInfoTypesObservation: {
	// InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
	// all findings that correspond to infoTypes that were requested in InspectConfig.
	// Structure is documented below.
	infoTypes?: [...#InfoTypesObservation] @go(InfoTypes,[]InfoTypesObservation)
}

#SelectedInfoTypesParameters: {
	// InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
	// all findings that correspond to infoTypes that were requested in InspectConfig.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	infoTypes?: [...#InfoTypesParameters] @go(InfoTypes,[]InfoTypesParameters)
}

#SurrogateInfoTypeInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#SurrogateInfoTypeObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#SurrogateInfoTypeParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#TimePartConfigInitParameters: {
	// The part of the time to keep.
	// Possible values are: YEAR, MONTH, DAY_OF_MONTH, DAY_OF_WEEK, WEEK_OF_YEAR, HOUR_OF_DAY.
	partToExtract?: null | string @go(PartToExtract,*string)
}

#TimePartConfigObservation: {
	// The part of the time to keep.
	// Possible values are: YEAR, MONTH, DAY_OF_MONTH, DAY_OF_WEEK, WEEK_OF_YEAR, HOUR_OF_DAY.
	partToExtract?: null | string @go(PartToExtract,*string)
}

#TimePartConfigParameters: {
	// The part of the time to keep.
	// Possible values are: YEAR, MONTH, DAY_OF_MONTH, DAY_OF_WEEK, WEEK_OF_YEAR, HOUR_OF_DAY.
	// +kubebuilder:validation:Optional
	partToExtract?: null | string @go(PartToExtract,*string)
}

#TimeValueInitParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#TimeValueObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#TimeValueParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#TransformationsInfoTypesInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#TransformationsInfoTypesObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	version?: null | string @go(Version,*string)
}

#TransformationsInfoTypesParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Optional version name for this InfoType.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)
}

#TransformationsInitParameters: {
	// InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
	// all findings that correspond to infoTypes that were requested in InspectConfig.
	// Structure is documented below.
	infoTypes?: [...#TransformationsInfoTypesInitParameters] @go(InfoTypes,[]TransformationsInfoTypesInitParameters)

	// Primitive transformation to apply to the infoType.
	// The primitive_transformation block must only contain one argument, corresponding to the type of transformation.
	// Structure is documented below.
	primitiveTransformation?: [...#PrimitiveTransformationInitParameters] @go(PrimitiveTransformation,[]PrimitiveTransformationInitParameters)
}

#TransformationsObservation: {
	// InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
	// all findings that correspond to infoTypes that were requested in InspectConfig.
	// Structure is documented below.
	infoTypes?: [...#TransformationsInfoTypesObservation] @go(InfoTypes,[]TransformationsInfoTypesObservation)

	// Primitive transformation to apply to the infoType.
	// The primitive_transformation block must only contain one argument, corresponding to the type of transformation.
	// Structure is documented below.
	primitiveTransformation?: [...#PrimitiveTransformationObservation] @go(PrimitiveTransformation,[]PrimitiveTransformationObservation)
}

#TransformationsParameters: {
	// InfoTypes to apply the transformation to. Leaving this empty will apply the transformation to apply to
	// all findings that correspond to infoTypes that were requested in InspectConfig.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	infoTypes?: [...#TransformationsInfoTypesParameters] @go(InfoTypes,[]TransformationsInfoTypesParameters)

	// Primitive transformation to apply to the infoType.
	// The primitive_transformation block must only contain one argument, corresponding to the type of transformation.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	primitiveTransformation?: [...#PrimitiveTransformationParameters] @go(PrimitiveTransformation,[]PrimitiveTransformationParameters)
}

#TransformsInitParameters: {
	// Apply transformation to all findings not specified in other ImageTransformation's selectedInfoTypes.
	allInfoTypes?: [...#AllInfoTypesInitParameters] @go(AllInfoTypes,[]AllInfoTypesInitParameters)

	// Apply transformation to all text that doesn't match an infoType.
	allText?: [...#AllTextInitParameters] @go(AllText,[]AllTextInitParameters)

	// The color to use when redacting content from an image. If not specified, the default is black.
	// Structure is documented below.
	redactionColor?: [...#RedactionColorInitParameters] @go(RedactionColor,[]RedactionColorInitParameters)

	// Apply transformation to the selected infoTypes.
	// Structure is documented below.
	selectedInfoTypes?: [...#SelectedInfoTypesInitParameters] @go(SelectedInfoTypes,[]SelectedInfoTypesInitParameters)
}

#TransformsObservation: {
	// Apply transformation to all findings not specified in other ImageTransformation's selectedInfoTypes.
	allInfoTypes?: [...#AllInfoTypesParameters] @go(AllInfoTypes,[]AllInfoTypesParameters)

	// Apply transformation to all text that doesn't match an infoType.
	allText?: [...#AllTextParameters] @go(AllText,[]AllTextParameters)

	// The color to use when redacting content from an image. If not specified, the default is black.
	// Structure is documented below.
	redactionColor?: [...#RedactionColorObservation] @go(RedactionColor,[]RedactionColorObservation)

	// Apply transformation to the selected infoTypes.
	// Structure is documented below.
	selectedInfoTypes?: [...#SelectedInfoTypesObservation] @go(SelectedInfoTypes,[]SelectedInfoTypesObservation)
}

#TransformsParameters: {
	// Apply transformation to all findings not specified in other ImageTransformation's selectedInfoTypes.
	// +kubebuilder:validation:Optional
	allInfoTypes?: [...#AllInfoTypesParameters] @go(AllInfoTypes,[]AllInfoTypesParameters)

	// Apply transformation to all text that doesn't match an infoType.
	// +kubebuilder:validation:Optional
	allText?: [...#AllTextParameters] @go(AllText,[]AllTextParameters)

	// The color to use when redacting content from an image. If not specified, the default is black.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	redactionColor?: [...#RedactionColorParameters] @go(RedactionColor,[]RedactionColorParameters)

	// Apply transformation to the selected infoTypes.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	selectedInfoTypes?: [...#SelectedInfoTypesParameters] @go(SelectedInfoTypes,[]SelectedInfoTypesParameters)
}

#TransientInitParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#TransientObservation: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	name?: null | string @go(Name,*string)
}

#TransientParameters: {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate TransientCryptoKey protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#UnwrappedInitParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#UnwrappedObservation: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#UnwrappedParameters: {
	// A 128/192/256 bit key.
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#UpperBoundDateValueInitParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#UpperBoundDateValueObservation: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#UpperBoundDateValueParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	// +kubebuilder:validation:Optional
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	// +kubebuilder:validation:Optional
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	// +kubebuilder:validation:Optional
	year?: null | float64 @go(Year,*float64)
}

#UpperBoundInitParameters: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#UpperBoundDateValueInitParameters] @go(DateValue,[]UpperBoundDateValueInitParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#UpperBoundTimeValueInitParameters] @go(TimeValue,[]UpperBoundTimeValueInitParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#UpperBoundObservation: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#UpperBoundDateValueObservation] @go(DateValue,[]UpperBoundDateValueObservation)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#UpperBoundTimeValueObservation] @go(TimeValue,[]UpperBoundTimeValueObservation)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#UpperBoundParameters: {
	// A boolean value.
	// +kubebuilder:validation:Optional
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	dateValue?: [...#UpperBoundDateValueParameters] @go(DateValue,[]UpperBoundDateValueParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	// +kubebuilder:validation:Optional
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	// +kubebuilder:validation:Optional
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	// +kubebuilder:validation:Optional
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	// +kubebuilder:validation:Optional
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeValue?: [...#UpperBoundTimeValueParameters] @go(TimeValue,[]UpperBoundTimeValueParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	timestampValue?: null | string @go(TimestampValue,*string)
}

#UpperBoundTimeValueInitParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#UpperBoundTimeValueObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#UpperBoundTimeValueParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#ValueDateValueInitParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#ValueDateValueObservation: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	year?: null | float64 @go(Year,*float64)
}

#ValueDateValueParameters: {
	// Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a
	// year by itself or a year and month where the day is not significant.
	// +kubebuilder:validation:Optional
	day?: null | float64 @go(Day,*float64)

	// Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.
	// +kubebuilder:validation:Optional
	month?: null | float64 @go(Month,*float64)

	// Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
	// +kubebuilder:validation:Optional
	year?: null | float64 @go(Year,*float64)
}

#ValueInitParameters: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#ValueDateValueInitParameters] @go(DateValue,[]ValueDateValueInitParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#ValueTimeValueInitParameters] @go(TimeValue,[]ValueTimeValueInitParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ValueObservation: {
	// A boolean value.
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	dateValue?: [...#ValueDateValueObservation] @go(DateValue,[]ValueDateValueObservation)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	timeValue?: [...#ValueTimeValueObservation] @go(TimeValue,[]ValueTimeValueObservation)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ValueParameters: {
	// A boolean value.
	// +kubebuilder:validation:Optional
	booleanValue?: null | bool @go(BooleanValue,*bool)

	// Represents a whole or partial calendar date.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	dateValue?: [...#ValueDateValueParameters] @go(DateValue,[]ValueDateValueParameters)

	// Represents a day of the week.
	// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	// +kubebuilder:validation:Optional
	dayOfWeekValue?: null | string @go(DayOfWeekValue,*string)

	// A float value.
	// +kubebuilder:validation:Optional
	floatValue?: null | float64 @go(FloatValue,*float64)

	// An integer value (int64 format)
	// +kubebuilder:validation:Optional
	integerValue?: null | string @go(IntegerValue,*string)

	// A string value.
	// +kubebuilder:validation:Optional
	stringValue?: null | string @go(StringValue,*string)

	// Represents a time of day.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	timeValue?: [...#ValueTimeValueParameters] @go(TimeValue,[]ValueTimeValueParameters)

	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	// +kubebuilder:validation:Optional
	timestampValue?: null | string @go(TimestampValue,*string)
}

#ValueTimeValueInitParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#ValueTimeValueObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	seconds?: null | float64 @go(Seconds,*float64)
}

#ValueTimeValueParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#WordListInitParameters: {
	// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits.
	words?: [...null | string] @go(Words,[]*string)
}

#WordListObservation: {
	// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits.
	words?: [...null | string] @go(Words,[]*string)
}

#WordListParameters: {
	// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits.
	// +kubebuilder:validation:Optional
	words?: [...null | string] @go(Words,[]*string)
}

// DeidentifyTemplateSpec defines the desired state of DeidentifyTemplate
#DeidentifyTemplateSpec: {
	forProvider: #DeidentifyTemplateParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #DeidentifyTemplateInitParameters @go(InitProvider)
}

// DeidentifyTemplateStatus defines the observed state of DeidentifyTemplate.
#DeidentifyTemplateStatus: {
	atProvider?: #DeidentifyTemplateObservation @go(AtProvider)
}

// DeidentifyTemplate is the Schema for the DeidentifyTemplates API. Allows creation of templates to de-identify content.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#DeidentifyTemplate: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.deidentifyConfig) || has(self.initProvider.deidentifyConfig)",message="deidentifyConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parent) || has(self.initProvider.parent)",message="parent is a required parameter"
	spec:    #DeidentifyTemplateSpec   @go(Spec)
	status?: #DeidentifyTemplateStatus @go(Status)
}

// DeidentifyTemplateList contains a list of DeidentifyTemplates
#DeidentifyTemplateList: {
	items: [...#DeidentifyTemplate] @go(Items,[]DeidentifyTemplate)
}
