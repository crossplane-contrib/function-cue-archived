// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/networkmanagement/v1beta1

package v1beta1

#ConnectivityTestInitParameters: {
	// The user-supplied description of the Connectivity Test.
	// Maximum of 512 characters.
	description?: null | string @go(Description,*string)

	// Required. Destination specification of the Connectivity Test.
	// You can use a combination of destination IP address, Compute
	// Engine VM instance, or VPC network to uniquely identify the
	// destination location.
	// Even if the destination IP address is not unique, the source IP
	// location is unique. Usually, the analysis can infer the destination
	// endpoint from route information.
	// If the destination you specify is a VM instance and the instance has
	// multiple network interfaces, then you must also specify either a
	// destination IP address or VPC network to identify the destination
	// interface.
	// A reachability analysis proceeds even if the destination location
	// is ambiguous. However, the result can include endpoints that you
	// don't intend to test.
	// Structure is documented below.
	destination?: [...#DestinationInitParameters] @go(Destination,[]DestinationInitParameters)

	// Resource labels to represent user-provided metadata.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Unique name for the connectivity test.
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// IP Protocol of the test. When not provided, "TCP" is assumed.
	protocol?: null | string @go(Protocol,*string)

	// Other projects that may be relevant for reachability analysis.
	// This is applicable to scenarios where a test can cross project
	// boundaries.
	relatedProjects?: [...null | string] @go(RelatedProjects,[]*string)

	// Required. Source specification of the Connectivity Test.
	// You can use a combination of source IP address, virtual machine
	// (VM) instance, or Compute Engine network to uniquely identify the
	// source location.
	// Examples: If the source IP address is an internal IP address within
	// a Google Cloud Virtual Private Cloud (VPC) network, then you must
	// also specify the VPC network. Otherwise, specify the VM instance,
	// which already contains its internal IP address and VPC network
	// information.
	// If the source of the test is within an on-premises network, then
	// you must provide the destination VPC network.
	// If the source endpoint is a Compute Engine VM instance with multiple
	// network interfaces, the instance itself is not sufficient to
	// identify the endpoint. So, you must also specify the source IP
	// address or VPC network.
	// A reachability analysis proceeds even if the source location is
	// ambiguous. However, the test result may include endpoints that
	// you don't intend to test.
	// Structure is documented below.
	source?: [...#SourceInitParameters] @go(Source,[]SourceInitParameters)
}

#ConnectivityTestObservation: {
	// The user-supplied description of the Connectivity Test.
	// Maximum of 512 characters.
	description?: null | string @go(Description,*string)

	// Required. Destination specification of the Connectivity Test.
	// You can use a combination of destination IP address, Compute
	// Engine VM instance, or VPC network to uniquely identify the
	// destination location.
	// Even if the destination IP address is not unique, the source IP
	// location is unique. Usually, the analysis can infer the destination
	// endpoint from route information.
	// If the destination you specify is a VM instance and the instance has
	// multiple network interfaces, then you must also specify either a
	// destination IP address or VPC network to identify the destination
	// interface.
	// A reachability analysis proceeds even if the destination location
	// is ambiguous. However, the result can include endpoints that you
	// don't intend to test.
	// Structure is documented below.
	destination?: [...#DestinationObservation] @go(Destination,[]DestinationObservation)

	// an identifier for the resource with format projects/{{project}}/locations/global/connectivityTests/{{name}}
	id?: null | string @go(ID,*string)

	// Resource labels to represent user-provided metadata.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Unique name for the connectivity test.
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// IP Protocol of the test. When not provided, "TCP" is assumed.
	protocol?: null | string @go(Protocol,*string)

	// Other projects that may be relevant for reachability analysis.
	// This is applicable to scenarios where a test can cross project
	// boundaries.
	relatedProjects?: [...null | string] @go(RelatedProjects,[]*string)

	// Required. Source specification of the Connectivity Test.
	// You can use a combination of source IP address, virtual machine
	// (VM) instance, or Compute Engine network to uniquely identify the
	// source location.
	// Examples: If the source IP address is an internal IP address within
	// a Google Cloud Virtual Private Cloud (VPC) network, then you must
	// also specify the VPC network. Otherwise, specify the VM instance,
	// which already contains its internal IP address and VPC network
	// information.
	// If the source of the test is within an on-premises network, then
	// you must provide the destination VPC network.
	// If the source endpoint is a Compute Engine VM instance with multiple
	// network interfaces, the instance itself is not sufficient to
	// identify the endpoint. So, you must also specify the source IP
	// address or VPC network.
	// A reachability analysis proceeds even if the source location is
	// ambiguous. However, the test result may include endpoints that
	// you don't intend to test.
	// Structure is documented below.
	source?: [...#SourceObservation] @go(Source,[]SourceObservation)
}

#ConnectivityTestParameters: {
	// The user-supplied description of the Connectivity Test.
	// Maximum of 512 characters.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Required. Destination specification of the Connectivity Test.
	// You can use a combination of destination IP address, Compute
	// Engine VM instance, or VPC network to uniquely identify the
	// destination location.
	// Even if the destination IP address is not unique, the source IP
	// location is unique. Usually, the analysis can infer the destination
	// endpoint from route information.
	// If the destination you specify is a VM instance and the instance has
	// multiple network interfaces, then you must also specify either a
	// destination IP address or VPC network to identify the destination
	// interface.
	// A reachability analysis proceeds even if the destination location
	// is ambiguous. However, the result can include endpoints that you
	// don't intend to test.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	destination?: [...#DestinationParameters] @go(Destination,[]DestinationParameters)

	// Resource labels to represent user-provided metadata.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Unique name for the connectivity test.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// IP Protocol of the test. When not provided, "TCP" is assumed.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)

	// Other projects that may be relevant for reachability analysis.
	// This is applicable to scenarios where a test can cross project
	// boundaries.
	// +kubebuilder:validation:Optional
	relatedProjects?: [...null | string] @go(RelatedProjects,[]*string)

	// Required. Source specification of the Connectivity Test.
	// You can use a combination of source IP address, virtual machine
	// (VM) instance, or Compute Engine network to uniquely identify the
	// source location.
	// Examples: If the source IP address is an internal IP address within
	// a Google Cloud Virtual Private Cloud (VPC) network, then you must
	// also specify the VPC network. Otherwise, specify the VM instance,
	// which already contains its internal IP address and VPC network
	// information.
	// If the source of the test is within an on-premises network, then
	// you must provide the destination VPC network.
	// If the source endpoint is a Compute Engine VM instance with multiple
	// network interfaces, the instance itself is not sufficient to
	// identify the endpoint. So, you must also specify the source IP
	// address or VPC network.
	// A reachability analysis proceeds even if the source location is
	// ambiguous. However, the test result may include endpoints that
	// you don't intend to test.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	source?: [...#SourceParameters] @go(Source,[]SourceParameters)
}

#DestinationInitParameters: {
	// The IP protocol port of the endpoint. Only applicable when
	// protocol is TCP or UDP.
	port?: null | float64 @go(Port,*float64)
}

#DestinationObservation: {
	// The IP address of the endpoint, which can be an external or
	// internal IP. An IPv6 address is only allowed when the test's
	// destination is a global load balancer VIP.
	ipAddress?: null | string @go(IPAddress,*string)

	// A Compute Engine instance URI.
	instance?: null | string @go(Instance,*string)

	// A Compute Engine network URI.
	network?: null | string @go(Network,*string)

	// The IP protocol port of the endpoint. Only applicable when
	// protocol is TCP or UDP.
	port?: null | float64 @go(Port,*float64)

	// Project ID where the endpoint is located. The Project ID can be
	// derived from the URI if you provide a VM instance or network URI.
	// The following are two cases where you must provide the project ID:
	projectId?: null | string @go(ProjectID,*string)
}

#DestinationParameters: {
	// The IP address of the endpoint, which can be an external or
	// internal IP. An IPv6 address is only allowed when the test's
	// destination is a global load balancer VIP.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Address
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("address",false)
	// +kubebuilder:validation:Optional
	ipAddress?: null | string @go(IPAddress,*string)

	// A Compute Engine instance URI.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	instance?: null | string @go(Instance,*string)

	// A Compute Engine network URI.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	network?: null | string @go(Network,*string)

	// The IP protocol port of the endpoint. Only applicable when
	// protocol is TCP or UDP.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Project ID where the endpoint is located. The Project ID can be
	// derived from the URI if you provide a VM instance or network URI.
	// The following are two cases where you must provide the project ID:
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Address
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("project",false)
	// +kubebuilder:validation:Optional
	projectId?: null | string @go(ProjectID,*string)
}

#SourceInitParameters: {
	// Type of the network where the endpoint is located.
	// Possible values are: GCP_NETWORK, NON_GCP_NETWORK.
	networkType?: null | string @go(NetworkType,*string)

	// The IP protocol port of the endpoint. Only applicable when
	// protocol is TCP or UDP.
	port?: null | float64 @go(Port,*float64)
}

#SourceObservation: {
	// The IP address of the endpoint, which can be an external or
	// internal IP. An IPv6 address is only allowed when the test's
	// destination is a global load balancer VIP.
	ipAddress?: null | string @go(IPAddress,*string)

	// A Compute Engine instance URI.
	instance?: null | string @go(Instance,*string)

	// A Compute Engine network URI.
	network?: null | string @go(Network,*string)

	// Type of the network where the endpoint is located.
	// Possible values are: GCP_NETWORK, NON_GCP_NETWORK.
	networkType?: null | string @go(NetworkType,*string)

	// The IP protocol port of the endpoint. Only applicable when
	// protocol is TCP or UDP.
	port?: null | float64 @go(Port,*float64)

	// Project ID where the endpoint is located. The Project ID can be
	// derived from the URI if you provide a VM instance or network URI.
	// The following are two cases where you must provide the project ID:
	projectId?: null | string @go(ProjectID,*string)
}

#SourceParameters: {
	// The IP address of the endpoint, which can be an external or
	// internal IP. An IPv6 address is only allowed when the test's
	// destination is a global load balancer VIP.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Address
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("address",false)
	// +kubebuilder:validation:Optional
	ipAddress?: null | string @go(IPAddress,*string)

	// A Compute Engine instance URI.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Instance
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	instance?: null | string @go(Instance,*string)

	// A Compute Engine network URI.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	network?: null | string @go(Network,*string)

	// Type of the network where the endpoint is located.
	// Possible values are: GCP_NETWORK, NON_GCP_NETWORK.
	// +kubebuilder:validation:Optional
	networkType?: null | string @go(NetworkType,*string)

	// The IP protocol port of the endpoint. Only applicable when
	// protocol is TCP or UDP.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Project ID where the endpoint is located. The Project ID can be
	// derived from the URI if you provide a VM instance or network URI.
	// The following are two cases where you must provide the project ID:
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Address
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("project",false)
	// +kubebuilder:validation:Optional
	projectId?: null | string @go(ProjectID,*string)
}

// ConnectivityTestSpec defines the desired state of ConnectivityTest
#ConnectivityTestSpec: {
	forProvider: #ConnectivityTestParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #ConnectivityTestInitParameters @go(InitProvider)
}

// ConnectivityTestStatus defines the observed state of ConnectivityTest.
#ConnectivityTestStatus: {
	atProvider?: #ConnectivityTestObservation @go(AtProvider)
}

// ConnectivityTest is the Schema for the ConnectivityTests API. A connectivity test are a static analysis of your resource configurations that enables you to evaluate connectivity to and from Google Cloud resources in your Virtual Private Cloud (VPC) network.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#ConnectivityTest: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) && has(self.initProvider.destination))",message="spec.forProvider.destination is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.source) || (has(self.initProvider) && has(self.initProvider.source))",message="spec.forProvider.source is a required parameter"
	spec:    #ConnectivityTestSpec   @go(Spec)
	status?: #ConnectivityTestStatus @go(Status)
}

// ConnectivityTestList contains a list of ConnectivityTests
#ConnectivityTestList: {
	items: [...#ConnectivityTest] @go(Items,[]ConnectivityTest)
}
