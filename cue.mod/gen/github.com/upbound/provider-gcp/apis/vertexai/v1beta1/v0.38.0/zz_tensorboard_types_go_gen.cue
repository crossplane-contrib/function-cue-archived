// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/vertexai/v1beta1

package v1beta1

#TensorboardEncryptionSpecInitParameters: {
	// The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
	// Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
	kmsKeyName?: null | string @go(KMSKeyName,*string)
}

#TensorboardEncryptionSpecObservation: {
	// The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
	// Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
	kmsKeyName?: null | string @go(KMSKeyName,*string)
}

#TensorboardEncryptionSpecParameters: {
	// The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
	// Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
	// +kubebuilder:validation:Optional
	kmsKeyName?: null | string @go(KMSKeyName,*string)
}

#TensorboardInitParameters: {
	// Description of this Tensorboard.
	description?: null | string @go(Description,*string)

	// Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this Tensorboard will be secured by this key.
	// Structure is documented below.
	encryptionSpec?: [...#TensorboardEncryptionSpecInitParameters] @go(EncryptionSpec,[]TensorboardEncryptionSpecInitParameters)

	// The labels with user-defined metadata to organize your Tensorboards.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#TensorboardObservation: {
	// Consumer project Cloud Storage path prefix used to store blob data, which can either be a bucket or directory. Does not end with a '/'.
	blobStoragePathPrefix?: null | string @go(BlobStoragePathPrefix,*string)

	// The timestamp of when the Tensorboard was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	createTime?: null | string @go(CreateTime,*string)

	// Description of this Tensorboard.
	description?: null | string @go(Description,*string)

	// Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this Tensorboard will be secured by this key.
	// Structure is documented below.
	encryptionSpec?: [...#TensorboardEncryptionSpecObservation] @go(EncryptionSpec,[]TensorboardEncryptionSpecObservation)

	// an identifier for the resource with format {{name}}
	id?: null | string @go(ID,*string)

	// The labels with user-defined metadata to organize your Tensorboards.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Name of the Tensorboard.
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The region of the tensorboard. eg us-central1
	region?: null | string @go(Region,*string)

	// The number of Runs stored in this Tensorboard.
	runCount?: null | string @go(RunCount,*string)

	// The timestamp of when the Tensorboard was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
	updateTime?: null | string @go(UpdateTime,*string)
}

#TensorboardParameters: {
	// Description of this Tensorboard.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this Tensorboard will be secured by this key.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	encryptionSpec?: [...#TensorboardEncryptionSpecParameters] @go(EncryptionSpec,[]TensorboardEncryptionSpecParameters)

	// The labels with user-defined metadata to organize your Tensorboards.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The region of the tensorboard. eg us-central1
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// TensorboardSpec defines the desired state of Tensorboard
#TensorboardSpec: {
	forProvider: #TensorboardParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #TensorboardInitParameters @go(InitProvider)
}

// TensorboardStatus defines the observed state of Tensorboard.
#TensorboardStatus: {
	atProvider?: #TensorboardObservation @go(AtProvider)
}

// Tensorboard is the Schema for the Tensorboards API. Tensorboard is a physical database that stores users' training metrics.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Tensorboard: {
	spec:    #TensorboardSpec   @go(Spec)
	status?: #TensorboardStatus @go(Status)
}

// TensorboardList contains a list of Tensorboards
#TensorboardList: {
	items: [...#Tensorboard] @go(Items,[]Tensorboard)
}
