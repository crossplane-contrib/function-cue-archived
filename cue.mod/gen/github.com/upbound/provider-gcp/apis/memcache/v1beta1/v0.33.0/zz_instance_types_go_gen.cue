// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/memcache/v1beta1

package v1beta1

#InstanceObservation: {
	// The full name of the GCE network to connect the instance to.  If not provided,
	// 'default' will be used.
	authorizedNetwork?: null | string @go(AuthorizedNetwork,*string)

	// Creation timestamp in RFC3339 text format.
	createTime?: null | string @go(CreateTime,*string)

	// Endpoint for Discovery API
	discoveryEndpoint?: null | string @go(DiscoveryEndpoint,*string)

	// A user-visible name for the instance.
	displayName?: null | string @go(DisplayName,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{region}}/instances/{{name}}
	id?: null | string @go(ID,*string)

	// Resource labels to represent user-provided metadata.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Maintenance policy for an instance.
	// Structure is documented below.
	maintenancePolicy?: [...#MaintenancePolicyObservation] @go(MaintenancePolicy,[]MaintenancePolicyObservation)

	// Output only. Published maintenance schedule.
	// Structure is documented below.
	maintenanceSchedule?: [...#MaintenanceScheduleObservation] @go(MaintenanceSchedule,[]MaintenanceScheduleObservation)

	// The full version of memcached server running on this instance.
	memcacheFullVersion?: null | string @go(MemcacheFullVersion,*string)

	// Additional information about the instance state, if available.
	// Structure is documented below.
	memcacheNodes?: [...#MemcacheNodesObservation] @go(MemcacheNodes,[]MemcacheNodesObservation)

	// User-specified parameters for this memcache instance.
	// Structure is documented below.
	memcacheParameters?: [...#MemcacheParametersObservation] @go(MemcacheParameters,[]MemcacheParametersObservation)

	// The major version of Memcached software. If not provided, latest supported version will be used.
	// Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
	// determined by our system based on the latest supported minor version.
	// Default value is MEMCACHE_1_5.
	// Possible values are: MEMCACHE_1_5.
	memcacheVersion?: null | string @go(MemcacheVersion,*string)

	// The resource name of the instance.
	name?: null | string @go(Name,*string)

	// Configuration for memcache nodes.
	// Structure is documented below.
	nodeConfig?: [...#NodeConfigObservation] @go(NodeConfig,[]NodeConfigObservation)

	// Number of nodes in the memcache instance.
	nodeCount?: null | float64 @go(NodeCount,*float64)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The region of the Memcache instance. If it is not provided, the provider region is used.
	region?: null | string @go(Region,*string)

	// Zones where memcache nodes should be provisioned.  If not
	// provided, all zones will be used.
	zones?: [...null | string] @go(Zones,[]*string)
}

#InstanceParameters: {
	// The full name of the GCE network to connect the instance to.  If not provided,
	// 'default' will be used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/servicenetworking/v1beta1.Connection
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("network",false)
	// +kubebuilder:validation:Optional
	authorizedNetwork?: null | string @go(AuthorizedNetwork,*string)

	// A user-visible name for the instance.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// Resource labels to represent user-provided metadata.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Maintenance policy for an instance.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	maintenancePolicy?: [...#MaintenancePolicyParameters] @go(MaintenancePolicy,[]MaintenancePolicyParameters)

	// User-specified parameters for this memcache instance.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	memcacheParameters?: [...#MemcacheParametersParameters] @go(MemcacheParameters,[]MemcacheParametersParameters)

	// The major version of Memcached software. If not provided, latest supported version will be used.
	// Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
	// determined by our system based on the latest supported minor version.
	// Default value is MEMCACHE_1_5.
	// Possible values are: MEMCACHE_1_5.
	// +kubebuilder:validation:Optional
	memcacheVersion?: null | string @go(MemcacheVersion,*string)

	// The resource name of the instance.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Configuration for memcache nodes.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	nodeConfig?: [...#NodeConfigParameters] @go(NodeConfig,[]NodeConfigParameters)

	// Number of nodes in the memcache instance.
	// +kubebuilder:validation:Optional
	nodeCount?: null | float64 @go(NodeCount,*float64)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The region of the Memcache instance. If it is not provided, the provider region is used.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// Zones where memcache nodes should be provisioned.  If not
	// provided, all zones will be used.
	// +kubebuilder:validation:Optional
	zones?: [...null | string] @go(Zones,[]*string)
}

#MaintenancePolicyObservation: {
	// (Output)
	// Output only. The time when the policy was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits
	createTime?: null | string @go(CreateTime,*string)

	// Optional. Description of what this policy is for.
	// Create/Update methods return INVALID_ARGUMENT if the
	// length is greater than 512.
	description?: null | string @go(Description,*string)

	// (Output)
	// Output only. The time when the policy was updated.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	updateTime?: null | string @go(UpdateTime,*string)

	// Required. Maintenance window that is applied to resources covered by this policy.
	// Minimum 1. For the current version, the maximum number of weekly_maintenance_windows
	// is expected to be one.
	// Structure is documented below.
	weeklyMaintenanceWindow?: [...#WeeklyMaintenanceWindowObservation] @go(WeeklyMaintenanceWindow,[]WeeklyMaintenanceWindowObservation)
}

#MaintenancePolicyParameters: {
	// Optional. Description of what this policy is for.
	// Create/Update methods return INVALID_ARGUMENT if the
	// length is greater than 512.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Required. Maintenance window that is applied to resources covered by this policy.
	// Minimum 1. For the current version, the maximum number of weekly_maintenance_windows
	// is expected to be one.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	weeklyMaintenanceWindow: [...#WeeklyMaintenanceWindowParameters] @go(WeeklyMaintenanceWindow,[]WeeklyMaintenanceWindowParameters)
}

#MaintenanceScheduleObservation: {
	// (Output)
	// Output only. The end time of any upcoming scheduled maintenance for this instance.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	endTime?: null | string @go(EndTime,*string)

	// (Output)
	// Output only. The deadline that the maintenance schedule start time
	// can not go beyond, including reschedule.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	scheduleDeadlineTime?: null | string @go(ScheduleDeadlineTime,*string)

	// (Output)
	// Output only. The start time of any upcoming scheduled maintenance for this instance.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
	// resolution and up to nine fractional digits.
	startTime?: null | string @go(StartTime,*string)
}

#MaintenanceScheduleParameters: {
}

#MemcacheNodesObservation: {
	// (Output)
	// Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
	host?: null | string @go(Host,*string)

	// (Output)
	// Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
	nodeId?: null | string @go(NodeID,*string)

	// (Output)
	// The port number of the Memcached server on this node.
	port?: null | float64 @go(Port,*float64)

	// (Output)
	// Current state of the Memcached node.
	state?: null | string @go(State,*string)

	// (Output)
	// Location (GCP Zone) for the Memcached node.
	zone?: null | string @go(Zone,*string)
}

#MemcacheNodesParameters: {
}

#MemcacheParametersObservation: {
	// (Output)
	// This is a unique ID associated with this set of parameters.
	id?: null | string @go(ID,*string)

	// User-defined set of parameters to use in the memcache process.
	params?: {[string]: null | string} @go(Params,map[string]*string)
}

#MemcacheParametersParameters: {
	// User-defined set of parameters to use in the memcache process.
	// +kubebuilder:validation:Optional
	params?: {[string]: null | string} @go(Params,map[string]*string)
}

#NodeConfigObservation: {
	// Number of CPUs per node.
	cpuCount?: null | float64 @go(CPUCount,*float64)

	// Memory size in Mebibytes for each memcache node.
	memorySizeMb?: null | float64 @go(MemorySizeMb,*float64)
}

#NodeConfigParameters: {
	// Number of CPUs per node.
	// +kubebuilder:validation:Required
	cpuCount?: null | float64 @go(CPUCount,*float64)

	// Memory size in Mebibytes for each memcache node.
	// +kubebuilder:validation:Required
	memorySizeMb?: null | float64 @go(MemorySizeMb,*float64)
}

#StartTimeObservation: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// An API may allow the value 60 if it allows leap-seconds.
	seconds?: null | float64 @go(Seconds,*float64)
}

#StartTimeParameters: {
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	// +kubebuilder:validation:Optional
	hours?: null | float64 @go(Hours,*float64)

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Optional
	minutes?: null | float64 @go(Minutes,*float64)

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Optional
	nanos?: null | float64 @go(Nanos,*float64)

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// An API may allow the value 60 if it allows leap-seconds.
	// +kubebuilder:validation:Optional
	seconds?: null | float64 @go(Seconds,*float64)
}

#WeeklyMaintenanceWindowObservation: {
	// Required. The day of week that maintenance updates occur.
	day?: null | string @go(Day,*string)

	// Required. The length of the maintenance window, ranging from 3 hours to 8 hours.
	// A duration in seconds with up to nine fractional digits,
	// terminated by 's'. Example: "3.5s".
	duration?: null | string @go(Duration,*string)

	// Required. Start time of the window in UTC time.
	// Structure is documented below.
	startTime?: [...#StartTimeObservation] @go(StartTime,[]StartTimeObservation)
}

#WeeklyMaintenanceWindowParameters: {
	// Required. The day of week that maintenance updates occur.
	// +kubebuilder:validation:Required
	day?: null | string @go(Day,*string)

	// Required. The length of the maintenance window, ranging from 3 hours to 8 hours.
	// A duration in seconds with up to nine fractional digits,
	// terminated by 's'. Example: "3.5s".
	// +kubebuilder:validation:Required
	duration?: null | string @go(Duration,*string)

	// Required. Start time of the window in UTC time.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	startTime: [...#StartTimeParameters] @go(StartTime,[]StartTimeParameters)
}

// InstanceSpec defines the desired state of Instance
#InstanceSpec: {
	forProvider: #InstanceParameters @go(ForProvider)
}

// InstanceStatus defines the observed state of Instance.
#InstanceStatus: {
	atProvider?: #InstanceObservation @go(AtProvider)
}

// Instance is the Schema for the Instances API. A Google Cloud Memcache instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Instance: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.nodeConfig)",message="nodeConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.nodeCount)",message="nodeCount is a required parameter"
	spec:    #InstanceSpec   @go(Spec)
	status?: #InstanceStatus @go(Status)
}

// InstanceList contains a list of Instances
#InstanceList: {
	items: [...#Instance] @go(Items,[]Instance)
}
