// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/datastream/v1beta1

package v1beta1

#ErrorInitParameters: {
}

#ErrorObservation: {
	// A list of messages that carry the error details.
	details?: {[string]: null | string} @go(Details,map[string]*string)

	// A message containing more information about the error that occurred.
	message?: null | string @go(Message,*string)
}

#ErrorParameters: {
}

#PrivateConnectionInitParameters: {
	// Display name.
	displayName?: null | string @go(DisplayName,*string)

	// Labels.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The VPC Peering configuration is used to create VPC peering
	// between Datastream and the consumer's VPC.
	// Structure is documented below.
	vpcPeeringConfig?: [...#VPCPeeringConfigInitParameters] @go(VPCPeeringConfig,[]VPCPeeringConfigInitParameters)
}

#PrivateConnectionObservation: {
	// Display name.
	displayName?: null | string @go(DisplayName,*string)

	// The PrivateConnection error in case of failure.
	// Structure is documented below.
	error?: [...#ErrorObservation] @go(Error,[]ErrorObservation)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/privateConnections/{{private_connection_id}}
	id?: null | string @go(ID,*string)

	// Labels.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The name of the location this private connection is located in.
	location?: null | string @go(Location,*string)

	// The resource's name.
	name?: null | string @go(Name,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// State of the PrivateConnection.
	state?: null | string @go(State,*string)

	// The VPC Peering configuration is used to create VPC peering
	// between Datastream and the consumer's VPC.
	// Structure is documented below.
	vpcPeeringConfig?: [...#VPCPeeringConfigObservation] @go(VPCPeeringConfig,[]VPCPeeringConfigObservation)
}

#PrivateConnectionParameters: {
	// Display name.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// Labels.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The name of the location this private connection is located in.
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The VPC Peering configuration is used to create VPC peering
	// between Datastream and the consumer's VPC.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	vpcPeeringConfig?: [...#VPCPeeringConfigParameters] @go(VPCPeeringConfig,[]VPCPeeringConfigParameters)
}

#VPCPeeringConfigInitParameters: {
	// A free subnet for peering. (CIDR of /29)
	subnet?: null | string @go(Subnet,*string)
}

#VPCPeeringConfigObservation: {
	// A free subnet for peering. (CIDR of /29)
	subnet?: null | string @go(Subnet,*string)

	// Fully qualified name of the VPC that Datastream will peer to.
	// Format: projects/{project}/global/{networks}/{name}
	vpc?: null | string @go(VPC,*string)
}

#VPCPeeringConfigParameters: {
	// A free subnet for peering. (CIDR of /29)
	// +kubebuilder:validation:Optional
	subnet?: null | string @go(Subnet,*string)

	// Fully qualified name of the VPC that Datastream will peer to.
	// Format: projects/{project}/global/{networks}/{name}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/compute/v1beta1.Network
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	vpc?: null | string @go(VPC,*string)
}

// PrivateConnectionSpec defines the desired state of PrivateConnection
#PrivateConnectionSpec: {
	forProvider: #PrivateConnectionParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PrivateConnectionInitParameters @go(InitProvider)
}

// PrivateConnectionStatus defines the observed state of PrivateConnection.
#PrivateConnectionStatus: {
	atProvider?: #PrivateConnectionObservation @go(AtProvider)
}

// PrivateConnection is the Schema for the PrivateConnections API. The PrivateConnection resource is used to establish private connectivity between Datastream and a customer's network.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#PrivateConnection: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || has(self.initProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vpcPeeringConfig) || has(self.initProvider.vpcPeeringConfig)",message="vpcPeeringConfig is a required parameter"
	spec:    #PrivateConnectionSpec   @go(Spec)
	status?: #PrivateConnectionStatus @go(Status)
}

// PrivateConnectionList contains a list of PrivateConnections
#PrivateConnectionList: {
	items: [...#PrivateConnection] @go(Items,[]PrivateConnection)
}
