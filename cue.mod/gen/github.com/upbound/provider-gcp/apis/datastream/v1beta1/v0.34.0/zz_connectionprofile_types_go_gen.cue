// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/datastream/v1beta1

package v1beta1

#BigqueryProfileObservation: {
}

#BigqueryProfileParameters: {
}

#ConnectionProfileObservation: {
	// BigQuery warehouse profile.
	bigqueryProfile?: [...#BigqueryProfileParameters] @go(BigqueryProfile,[]BigqueryProfileParameters)

	// Display name.
	displayName?: null | string @go(DisplayName,*string)

	// Forward SSH tunnel connectivity.
	// Structure is documented below.
	forwardSshConnectivity?: [...#ForwardSSHConnectivityObservation] @go(ForwardSSHConnectivity,[]ForwardSSHConnectivityObservation)

	// Cloud Storage bucket profile.
	// Structure is documented below.
	gcsProfile?: [...#GcsProfileObservation] @go(GcsProfile,[]GcsProfileObservation)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/connectionProfiles/{{connection_profile_id}}
	id?: null | string @go(ID,*string)

	// Labels.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The name of the location this connection profile is located in.
	location?: null | string @go(Location,*string)

	// MySQL database profile.
	// Structure is documented below.
	mysqlProfile?: [...#MySQLProfileObservation] @go(MySQLProfile,[]MySQLProfileObservation)

	// The resource's name.
	name?: null | string @go(Name,*string)

	// Oracle database profile.
	// Structure is documented below.
	oracleProfile?: [...#OracleProfileObservation] @go(OracleProfile,[]OracleProfileObservation)

	// PostgreSQL database profile.
	// Structure is documented below.
	postgresqlProfile?: [...#PostgresqlProfileObservation] @go(PostgresqlProfile,[]PostgresqlProfileObservation)

	// Private connectivity.
	// Structure is documented below.
	privateConnectivity?: [...#PrivateConnectivityObservation] @go(PrivateConnectivity,[]PrivateConnectivityObservation)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#ConnectionProfileParameters: {
	// BigQuery warehouse profile.
	// +kubebuilder:validation:Optional
	bigqueryProfile?: [...#BigqueryProfileParameters] @go(BigqueryProfile,[]BigqueryProfileParameters)

	// Display name.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// Forward SSH tunnel connectivity.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	forwardSshConnectivity?: [...#ForwardSSHConnectivityParameters] @go(ForwardSSHConnectivity,[]ForwardSSHConnectivityParameters)

	// Cloud Storage bucket profile.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	gcsProfile?: [...#GcsProfileParameters] @go(GcsProfile,[]GcsProfileParameters)

	// Labels.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The name of the location this connection profile is located in.
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// MySQL database profile.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	mysqlProfile?: [...#MySQLProfileParameters] @go(MySQLProfile,[]MySQLProfileParameters)

	// Oracle database profile.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	oracleProfile?: [...#OracleProfileParameters] @go(OracleProfile,[]OracleProfileParameters)

	// PostgreSQL database profile.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	postgresqlProfile?: [...#PostgresqlProfileParameters] @go(PostgresqlProfile,[]PostgresqlProfileParameters)

	// Private connectivity.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	privateConnectivity?: [...#PrivateConnectivityParameters] @go(PrivateConnectivity,[]PrivateConnectivityParameters)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

#ForwardSSHConnectivityObservation: {
	// Hostname for the SSH tunnel.
	hostname?: null | string @go(Hostname,*string)

	// Port for the SSH tunnel.
	port?: null | float64 @go(Port,*float64)

	// Username for the SSH tunnel.
	username?: null | string @go(Username,*string)
}

#ForwardSSHConnectivityParameters: {
	// Hostname for the SSH tunnel.
	// +kubebuilder:validation:Required
	hostname?: null | string @go(Hostname,*string)

	// Port for the SSH tunnel.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Username for the SSH tunnel.
	// +kubebuilder:validation:Required
	username?: null | string @go(Username,*string)
}

#GcsProfileObservation: {
	// The Cloud Storage bucket name.
	bucket?: null | string @go(Bucket,*string)

	// The root path inside the Cloud Storage bucket.
	rootPath?: null | string @go(RootPath,*string)
}

#GcsProfileParameters: {
	// The Cloud Storage bucket name.
	// +kubebuilder:validation:Required
	bucket?: null | string @go(Bucket,*string)

	// The root path inside the Cloud Storage bucket.
	// +kubebuilder:validation:Optional
	rootPath?: null | string @go(RootPath,*string)
}

#MySQLProfileObservation: {
	// Hostname for the MySQL connection.
	hostname?: null | string @go(Hostname,*string)

	// Port for the MySQL connection.
	port?: null | float64 @go(Port,*float64)

	// SSL configuration for the MySQL connection.
	// Structure is documented below.
	sslConfig?: [...#SSLConfigObservation] @go(SSLConfig,[]SSLConfigObservation)

	// Username for the MySQL connection.
	username?: null | string @go(Username,*string)
}

#MySQLProfileParameters: {
	// Hostname for the MySQL connection.
	// +kubebuilder:validation:Required
	hostname?: null | string @go(Hostname,*string)

	// Port for the MySQL connection.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Username for the MySQL connection.
	// +kubebuilder:validation:Required
	username?: null | string @go(Username,*string)
}

#OracleProfileObservation: {
	// Connection string attributes
	connectionAttributes?: {[string]: null | string} @go(ConnectionAttributes,map[string]*string)

	// Database for the Oracle connection.
	databaseService?: null | string @go(DatabaseService,*string)

	// Hostname for the Oracle connection.
	hostname?: null | string @go(Hostname,*string)

	// Port for the Oracle connection.
	port?: null | float64 @go(Port,*float64)

	// Username for the Oracle connection.
	username?: null | string @go(Username,*string)
}

#OracleProfileParameters: {
	// Connection string attributes
	// +kubebuilder:validation:Optional
	connectionAttributes?: {[string]: null | string} @go(ConnectionAttributes,map[string]*string)

	// Database for the Oracle connection.
	// +kubebuilder:validation:Required
	databaseService?: null | string @go(DatabaseService,*string)

	// Hostname for the Oracle connection.
	// +kubebuilder:validation:Required
	hostname?: null | string @go(Hostname,*string)

	// Port for the Oracle connection.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Username for the Oracle connection.
	// +kubebuilder:validation:Required
	username?: null | string @go(Username,*string)
}

#PostgresqlProfileObservation: {
	// Database for the PostgreSQL connection.
	database?: null | string @go(Database,*string)

	// Hostname for the PostgreSQL connection.
	hostname?: null | string @go(Hostname,*string)

	// Port for the PostgreSQL connection.
	port?: null | float64 @go(Port,*float64)

	// Username for the PostgreSQL connection.
	username?: null | string @go(Username,*string)
}

#PostgresqlProfileParameters: {
	// Database for the PostgreSQL connection.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/sql/v1beta1.Database
	// +kubebuilder:validation:Optional
	database?: null | string @go(Database,*string)

	// Hostname for the PostgreSQL connection.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/sql/v1beta1.DatabaseInstance
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("public_ip_address",true)
	// +kubebuilder:validation:Optional
	hostname?: null | string @go(Hostname,*string)

	// Port for the PostgreSQL connection.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Username for the PostgreSQL connection.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/sql/v1beta1.User
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#PrivateConnectivityObservation: {
	// A reference to a private connection resource. Format: projects/{project}/locations/{location}/privateConnections/{name}
	privateConnection?: null | string @go(PrivateConnection,*string)
}

#PrivateConnectivityParameters: {
	// A reference to a private connection resource. Format: projects/{project}/locations/{location}/privateConnections/{name}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/datastream/v1beta1.PrivateConnection
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	privateConnection?: null | string @go(PrivateConnection,*string)
}

#SSLConfigObservation: {
	// (Output)
	// Indicates whether the clientKey field is set.
	caCertificateSet?: null | bool @go(CACertificateSet,*bool)

	// (Output)
	// Indicates whether the clientCertificate field is set.
	clientCertificateSet?: null | bool @go(ClientCertificateSet,*bool)

	// (Output)
	// Indicates whether the clientKey field is set.
	clientKeySet?: null | bool @go(ClientKeySet,*bool)
}

// ConnectionProfileSpec defines the desired state of ConnectionProfile
#ConnectionProfileSpec: {
	forProvider: #ConnectionProfileParameters @go(ForProvider)
}

// ConnectionProfileStatus defines the observed state of ConnectionProfile.
#ConnectionProfileStatus: {
	atProvider?: #ConnectionProfileObservation @go(AtProvider)
}

// ConnectionProfile is the Schema for the ConnectionProfiles API. A set of reusable connection configurations to be used as a source or destination for a stream.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#ConnectionProfile: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	spec:    #ConnectionProfileSpec   @go(Spec)
	status?: #ConnectionProfileStatus @go(Status)
}

// ConnectionProfileList contains a list of ConnectionProfiles
#ConnectionProfileList: {
	items: [...#ConnectionProfile] @go(Items,[]ConnectionProfile)
}
