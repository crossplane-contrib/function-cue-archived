// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/dialogflowcx/v1beta1

package v1beta1

#EntryFulfillmentInitParameters: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	messages?: [...#EntryFulfillmentMessagesInitParameters] @go(Messages,[]EntryFulfillmentMessagesInitParameters)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	webhook?: null | string @go(Webhook,*string)
}

#EntryFulfillmentMessagesInitParameters: {
	// A collection of text responses.
	text?: [...#EntryFulfillmentMessagesTextInitParameters] @go(Text,[]EntryFulfillmentMessagesTextInitParameters)
}

#EntryFulfillmentMessagesObservation: {
	// A collection of text responses.
	text?: [...#EntryFulfillmentMessagesTextObservation] @go(Text,[]EntryFulfillmentMessagesTextObservation)
}

#EntryFulfillmentMessagesParameters: {
	// A collection of text responses.
	// +kubebuilder:validation:Optional
	text?: [...#EntryFulfillmentMessagesTextParameters] @go(Text,[]EntryFulfillmentMessagesTextParameters)
}

#EntryFulfillmentMessagesTextInitParameters: {
	// A collection of text responses.
	text?: [...null | string] @go(Text,[]*string)
}

#EntryFulfillmentMessagesTextObservation: {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	allowPlaybackInterruption?: null | bool @go(AllowPlaybackInterruption,*bool)

	// A collection of text responses.
	text?: [...null | string] @go(Text,[]*string)
}

#EntryFulfillmentMessagesTextParameters: {
	// A collection of text responses.
	// +kubebuilder:validation:Optional
	text?: [...null | string] @go(Text,[]*string)
}

#EntryFulfillmentObservation: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	messages?: [...#EntryFulfillmentMessagesObservation] @go(Messages,[]EntryFulfillmentMessagesObservation)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	webhook?: null | string @go(Webhook,*string)
}

#EntryFulfillmentParameters: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	messages?: [...#EntryFulfillmentMessagesParameters] @go(Messages,[]EntryFulfillmentMessagesParameters)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	// +kubebuilder:validation:Optional
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	// +kubebuilder:validation:Optional
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	// +kubebuilder:validation:Optional
	webhook?: null | string @go(Webhook,*string)
}

#EventHandlersTriggerFulfillmentInitParameters: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	messages?: [...#EventHandlersTriggerFulfillmentMessagesInitParameters] @go(Messages,[]EventHandlersTriggerFulfillmentMessagesInitParameters)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	webhook?: null | string @go(Webhook,*string)
}

#EventHandlersTriggerFulfillmentMessagesInitParameters: {
	// A collection of text responses.
	text?: [...#TriggerFulfillmentMessagesTextInitParameters] @go(Text,[]TriggerFulfillmentMessagesTextInitParameters)
}

#EventHandlersTriggerFulfillmentMessagesObservation: {
	// A collection of text responses.
	text?: [...#TriggerFulfillmentMessagesTextObservation] @go(Text,[]TriggerFulfillmentMessagesTextObservation)
}

#EventHandlersTriggerFulfillmentMessagesParameters: {
	// A collection of text responses.
	// +kubebuilder:validation:Optional
	text?: [...#TriggerFulfillmentMessagesTextParameters] @go(Text,[]TriggerFulfillmentMessagesTextParameters)
}

#EventHandlersTriggerFulfillmentObservation: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	messages?: [...#EventHandlersTriggerFulfillmentMessagesObservation] @go(Messages,[]EventHandlersTriggerFulfillmentMessagesObservation)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	webhook?: null | string @go(Webhook,*string)
}

#EventHandlersTriggerFulfillmentParameters: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	messages?: [...#EventHandlersTriggerFulfillmentMessagesParameters] @go(Messages,[]EventHandlersTriggerFulfillmentMessagesParameters)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	// +kubebuilder:validation:Optional
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	// +kubebuilder:validation:Optional
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	// +kubebuilder:validation:Optional
	webhook?: null | string @go(Webhook,*string)
}

#FillBehaviorInitParameters: {
	// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
	// Structure is documented below.
	initialPromptFulfillment?: [...#InitialPromptFulfillmentInitParameters] @go(InitialPromptFulfillment,[]InitialPromptFulfillmentInitParameters)
}

#FillBehaviorObservation: {
	// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
	// Structure is documented below.
	initialPromptFulfillment?: [...#InitialPromptFulfillmentObservation] @go(InitialPromptFulfillment,[]InitialPromptFulfillmentObservation)
}

#FillBehaviorParameters: {
	// The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	initialPromptFulfillment?: [...#InitialPromptFulfillmentParameters] @go(InitialPromptFulfillment,[]InitialPromptFulfillmentParameters)
}

#FormInitParameters: {
	// Parameters to collect from the user.
	// Structure is documented below.
	parameters?: [...#FormParametersInitParameters] @go(Parameters,[]FormParametersInitParameters)
}

#FormObservation: {
	// Parameters to collect from the user.
	// Structure is documented below.
	parameters?: [...#FormParametersObservation] @go(Parameters,[]FormParametersObservation)
}

#FormParameters: {
	// Parameters to collect from the user.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	parameters?: [...#FormParametersParameters] @go(Parameters,[]FormParametersParameters)
}

#FormParametersInitParameters: {
	// The human-readable name of the parameter, unique within the form.
	displayName?: null | string @go(DisplayName,*string)

	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/ for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects//locations//agents//entityTypes/ for developer entity types.
	entityType?: null | string @go(EntityType,*string)

	// Defines fill behavior for the parameter.
	// Structure is documented below.
	fillBehavior?: [...#FillBehaviorInitParameters] @go(FillBehavior,[]FillBehaviorInitParameters)

	// Indicates whether the parameter represents a list of values.
	isList?: null | bool @go(IsList,*bool)

	// Indicates whether the parameter content should be redacted in log.
	// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	redact?: null | bool @go(Redact,*bool)

	// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
	// Required parameters must be filled before form filling concludes.
	required?: null | bool @go(Required,*bool)
}

#FormParametersObservation: {
	// The human-readable name of the parameter, unique within the form.
	displayName?: null | string @go(DisplayName,*string)

	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/ for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects//locations//agents//entityTypes/ for developer entity types.
	entityType?: null | string @go(EntityType,*string)

	// Defines fill behavior for the parameter.
	// Structure is documented below.
	fillBehavior?: [...#FillBehaviorObservation] @go(FillBehavior,[]FillBehaviorObservation)

	// Indicates whether the parameter represents a list of values.
	isList?: null | bool @go(IsList,*bool)

	// Indicates whether the parameter content should be redacted in log.
	// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	redact?: null | bool @go(Redact,*bool)

	// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
	// Required parameters must be filled before form filling concludes.
	required?: null | bool @go(Required,*bool)
}

#FormParametersParameters: {
	// The human-readable name of the parameter, unique within the form.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// The entity type of the parameter.
	// Format: projects/-/locations/-/agents/-/entityTypes/ for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects//locations//agents//entityTypes/ for developer entity types.
	// +kubebuilder:validation:Optional
	entityType?: null | string @go(EntityType,*string)

	// Defines fill behavior for the parameter.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	fillBehavior?: [...#FillBehaviorParameters] @go(FillBehavior,[]FillBehaviorParameters)

	// Indicates whether the parameter represents a list of values.
	// +kubebuilder:validation:Optional
	isList?: null | bool @go(IsList,*bool)

	// Indicates whether the parameter content should be redacted in log.
	// If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.
	// +kubebuilder:validation:Optional
	redact?: null | bool @go(Redact,*bool)

	// Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.
	// Required parameters must be filled before form filling concludes.
	// +kubebuilder:validation:Optional
	required?: null | bool @go(Required,*bool)
}

#InitialPromptFulfillmentInitParameters: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	messages?: [...#InitialPromptFulfillmentMessagesInitParameters] @go(Messages,[]InitialPromptFulfillmentMessagesInitParameters)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	webhook?: null | string @go(Webhook,*string)
}

#InitialPromptFulfillmentMessagesInitParameters: {
	// A collection of text responses.
	text?: [...#InitialPromptFulfillmentMessagesTextInitParameters] @go(Text,[]InitialPromptFulfillmentMessagesTextInitParameters)
}

#InitialPromptFulfillmentMessagesObservation: {
	// A collection of text responses.
	text?: [...#InitialPromptFulfillmentMessagesTextObservation] @go(Text,[]InitialPromptFulfillmentMessagesTextObservation)
}

#InitialPromptFulfillmentMessagesParameters: {
	// A collection of text responses.
	// +kubebuilder:validation:Optional
	text?: [...#InitialPromptFulfillmentMessagesTextParameters] @go(Text,[]InitialPromptFulfillmentMessagesTextParameters)
}

#InitialPromptFulfillmentMessagesTextInitParameters: {
	// A collection of text responses.
	text?: [...null | string] @go(Text,[]*string)
}

#InitialPromptFulfillmentMessagesTextObservation: {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	allowPlaybackInterruption?: null | bool @go(AllowPlaybackInterruption,*bool)

	// A collection of text responses.
	text?: [...null | string] @go(Text,[]*string)
}

#InitialPromptFulfillmentMessagesTextParameters: {
	// A collection of text responses.
	// +kubebuilder:validation:Optional
	text?: [...null | string] @go(Text,[]*string)
}

#InitialPromptFulfillmentObservation: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	messages?: [...#InitialPromptFulfillmentMessagesObservation] @go(Messages,[]InitialPromptFulfillmentMessagesObservation)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	webhook?: null | string @go(Webhook,*string)
}

#InitialPromptFulfillmentParameters: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	messages?: [...#InitialPromptFulfillmentMessagesParameters] @go(Messages,[]InitialPromptFulfillmentMessagesParameters)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	// +kubebuilder:validation:Optional
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	// +kubebuilder:validation:Optional
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	// +kubebuilder:validation:Optional
	webhook?: null | string @go(Webhook,*string)
}

#PageEventHandlersInitParameters: {
	// The name of the event to handle.
	event?: null | string @go(Event,*string)

	// The target flow to transition to.
	// Format: projects//locations//agents//flows/.
	targetFlow?: null | string @go(TargetFlow,*string)

	// The target page to transition to.
	// Format: projects//locations//agents//flows//pages/.
	targetPage?: null | string @go(TargetPage,*string)

	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	triggerFulfillment?: [...#EventHandlersTriggerFulfillmentInitParameters] @go(TriggerFulfillment,[]EventHandlersTriggerFulfillmentInitParameters)
}

#PageEventHandlersObservation: {
	// The name of the event to handle.
	event?: null | string @go(Event,*string)

	// (Output)
	// The unique identifier of this event handler.
	name?: null | string @go(Name,*string)

	// The target flow to transition to.
	// Format: projects//locations//agents//flows/.
	targetFlow?: null | string @go(TargetFlow,*string)

	// The target page to transition to.
	// Format: projects//locations//agents//flows//pages/.
	targetPage?: null | string @go(TargetPage,*string)

	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	triggerFulfillment?: [...#EventHandlersTriggerFulfillmentObservation] @go(TriggerFulfillment,[]EventHandlersTriggerFulfillmentObservation)
}

#PageEventHandlersParameters: {
	// The name of the event to handle.
	// +kubebuilder:validation:Optional
	event?: null | string @go(Event,*string)

	// The target flow to transition to.
	// Format: projects//locations//agents//flows/.
	// +kubebuilder:validation:Optional
	targetFlow?: null | string @go(TargetFlow,*string)

	// The target page to transition to.
	// Format: projects//locations//agents//flows//pages/.
	// +kubebuilder:validation:Optional
	targetPage?: null | string @go(TargetPage,*string)

	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	triggerFulfillment?: [...#EventHandlersTriggerFulfillmentParameters] @go(TriggerFulfillment,[]EventHandlersTriggerFulfillmentParameters)
}

#PageInitParameters: {
	// The human-readable name of the page, unique within the agent.
	displayName?: null | string @go(DisplayName,*string)

	// The fulfillment to call when the session is entering the page.
	// Structure is documented below.
	entryFulfillment?: [...#EntryFulfillmentInitParameters] @go(EntryFulfillment,[]EntryFulfillmentInitParameters)

	// Handlers associated with the page to handle events such as webhook errors, no match or no input.
	// Structure is documented below.
	eventHandlers?: [...#PageEventHandlersInitParameters] @go(EventHandlers,[]PageEventHandlersInitParameters)

	// The form associated with the page, used for collecting parameters relevant to the page.
	// Structure is documented below.
	form?: [...#FormInitParameters] @go(Form,[]FormInitParameters)

	// The language of the following fields in page:
	// Page.entry_fulfillment.messages
	// Page.entry_fulfillment.conditional_cases
	// Page.event_handlers.trigger_fulfillment.messages
	// Page.event_handlers.trigger_fulfillment.conditional_cases
	// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
	// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
	// Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
	// Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
	// Page.transition_routes.trigger_fulfillment.messages
	// Page.transition_routes.trigger_fulfillment.conditional_cases
	// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
	languageCode?: null | string @go(LanguageCode,*string)

	// Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
	// If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes.
	// If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
	// Format:projects//locations//agents//flows//transitionRouteGroups/.
	transitionRouteGroups?: [...null | string] @go(TransitionRouteGroups,[]*string)

	// A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
	// When we are in a certain page, the TransitionRoutes are evalauted in the following order:
	// TransitionRoutes defined in the page with intent specified.
	// TransitionRoutes defined in the transition route groups with intent specified.
	// TransitionRoutes defined in flow with intent specified.
	// TransitionRoutes defined in the transition route groups with intent specified.
	// TransitionRoutes defined in the page with only condition specified.
	// TransitionRoutes defined in the transition route groups with only condition specified.
	// Structure is documented below.
	transitionRoutes?: [...#PageTransitionRoutesInitParameters] @go(TransitionRoutes,[]PageTransitionRoutesInitParameters)
}

#PageObservation: {
	// The human-readable name of the page, unique within the agent.
	displayName?: null | string @go(DisplayName,*string)

	// The fulfillment to call when the session is entering the page.
	// Structure is documented below.
	entryFulfillment?: [...#EntryFulfillmentObservation] @go(EntryFulfillment,[]EntryFulfillmentObservation)

	// Handlers associated with the page to handle events such as webhook errors, no match or no input.
	// Structure is documented below.
	eventHandlers?: [...#PageEventHandlersObservation] @go(EventHandlers,[]PageEventHandlersObservation)

	// The form associated with the page, used for collecting parameters relevant to the page.
	// Structure is documented below.
	form?: [...#FormObservation] @go(Form,[]FormObservation)

	// an identifier for the resource with format {{parent}}/pages/{{name}}
	id?: null | string @go(ID,*string)

	// The language of the following fields in page:
	// Page.entry_fulfillment.messages
	// Page.entry_fulfillment.conditional_cases
	// Page.event_handlers.trigger_fulfillment.messages
	// Page.event_handlers.trigger_fulfillment.conditional_cases
	// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
	// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
	// Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
	// Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
	// Page.transition_routes.trigger_fulfillment.messages
	// Page.transition_routes.trigger_fulfillment.conditional_cases
	// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
	languageCode?: null | string @go(LanguageCode,*string)

	// The unique identifier of the page.
	// Format: projects//locations//agents//flows//pages/.
	name?: null | string @go(Name,*string)

	// The flow to create a page for.
	// Format: projects//locations//agents//flows/.
	parent?: null | string @go(Parent,*string)

	// Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
	// If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes.
	// If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
	// Format:projects//locations//agents//flows//transitionRouteGroups/.
	transitionRouteGroups?: [...null | string] @go(TransitionRouteGroups,[]*string)

	// A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
	// When we are in a certain page, the TransitionRoutes are evalauted in the following order:
	// TransitionRoutes defined in the page with intent specified.
	// TransitionRoutes defined in the transition route groups with intent specified.
	// TransitionRoutes defined in flow with intent specified.
	// TransitionRoutes defined in the transition route groups with intent specified.
	// TransitionRoutes defined in the page with only condition specified.
	// TransitionRoutes defined in the transition route groups with only condition specified.
	// Structure is documented below.
	transitionRoutes?: [...#PageTransitionRoutesObservation] @go(TransitionRoutes,[]PageTransitionRoutesObservation)
}

#PageParameters: {
	// The human-readable name of the page, unique within the agent.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// The fulfillment to call when the session is entering the page.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	entryFulfillment?: [...#EntryFulfillmentParameters] @go(EntryFulfillment,[]EntryFulfillmentParameters)

	// Handlers associated with the page to handle events such as webhook errors, no match or no input.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	eventHandlers?: [...#PageEventHandlersParameters] @go(EventHandlers,[]PageEventHandlersParameters)

	// The form associated with the page, used for collecting parameters relevant to the page.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	form?: [...#FormParameters] @go(Form,[]FormParameters)

	// The language of the following fields in page:
	// Page.entry_fulfillment.messages
	// Page.entry_fulfillment.conditional_cases
	// Page.event_handlers.trigger_fulfillment.messages
	// Page.event_handlers.trigger_fulfillment.conditional_cases
	// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
	// Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
	// Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
	// Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
	// Page.transition_routes.trigger_fulfillment.messages
	// Page.transition_routes.trigger_fulfillment.conditional_cases
	// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
	// +kubebuilder:validation:Optional
	languageCode?: null | string @go(LanguageCode,*string)

	// The flow to create a page for.
	// Format: projects//locations//agents//flows/.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/dialogflowcx/v1beta1.Agent
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("start_flow",true)
	// +kubebuilder:validation:Optional
	parent?: null | string @go(Parent,*string)

	// Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
	// If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes.
	// If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
	// Format:projects//locations//agents//flows//transitionRouteGroups/.
	// +kubebuilder:validation:Optional
	transitionRouteGroups?: [...null | string] @go(TransitionRouteGroups,[]*string)

	// A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
	// When we are in a certain page, the TransitionRoutes are evalauted in the following order:
	// TransitionRoutes defined in the page with intent specified.
	// TransitionRoutes defined in the transition route groups with intent specified.
	// TransitionRoutes defined in flow with intent specified.
	// TransitionRoutes defined in the transition route groups with intent specified.
	// TransitionRoutes defined in the page with only condition specified.
	// TransitionRoutes defined in the transition route groups with only condition specified.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	transitionRoutes?: [...#PageTransitionRoutesParameters] @go(TransitionRoutes,[]PageTransitionRoutesParameters)
}

#PageTransitionRoutesInitParameters: {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	condition?: null | string @go(Condition,*string)

	// The unique identifier of an Intent.
	// Format: projects//locations//agents//intents/. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	intent?: null | string @go(Intent,*string)

	// The target flow to transition to.
	// Format: projects//locations//agents//flows/.
	targetFlow?: null | string @go(TargetFlow,*string)

	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	triggerFulfillment?: [...#PageTransitionRoutesTriggerFulfillmentInitParameters] @go(TriggerFulfillment,[]PageTransitionRoutesTriggerFulfillmentInitParameters)
}

#PageTransitionRoutesObservation: {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	condition?: null | string @go(Condition,*string)

	// The unique identifier of an Intent.
	// Format: projects//locations//agents//intents/. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	intent?: null | string @go(Intent,*string)

	// (Output)
	// The unique identifier of this transition route.
	name?: null | string @go(Name,*string)

	// The target flow to transition to.
	// Format: projects//locations//agents//flows/.
	targetFlow?: null | string @go(TargetFlow,*string)

	// The target page to transition to.
	// Format: projects//locations//agents//flows//pages/.
	targetPage?: null | string @go(TargetPage,*string)

	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	triggerFulfillment?: [...#PageTransitionRoutesTriggerFulfillmentObservation] @go(TriggerFulfillment,[]PageTransitionRoutesTriggerFulfillmentObservation)
}

#PageTransitionRoutesParameters: {
	// The condition to evaluate against form parameters or session parameters.
	// At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	// +kubebuilder:validation:Optional
	condition?: null | string @go(Condition,*string)

	// The unique identifier of an Intent.
	// Format: projects//locations//agents//intents/. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.
	// +kubebuilder:validation:Optional
	intent?: null | string @go(Intent,*string)

	// The target flow to transition to.
	// Format: projects//locations//agents//flows/.
	// +kubebuilder:validation:Optional
	targetFlow?: null | string @go(TargetFlow,*string)

	// The target page to transition to.
	// Format: projects//locations//agents//flows//pages/.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/dialogflowcx/v1beta1.Page
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	targetPage?: null | string @go(TargetPage,*string)

	// The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	triggerFulfillment?: [...#PageTransitionRoutesTriggerFulfillmentParameters] @go(TriggerFulfillment,[]PageTransitionRoutesTriggerFulfillmentParameters)
}

#PageTransitionRoutesTriggerFulfillmentInitParameters: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	messages?: [...#TransitionRoutesTriggerFulfillmentMessagesInitParameters] @go(Messages,[]TransitionRoutesTriggerFulfillmentMessagesInitParameters)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	webhook?: null | string @go(Webhook,*string)
}

#PageTransitionRoutesTriggerFulfillmentObservation: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	messages?: [...#TransitionRoutesTriggerFulfillmentMessagesObservation] @go(Messages,[]TransitionRoutesTriggerFulfillmentMessagesObservation)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	webhook?: null | string @go(Webhook,*string)
}

#PageTransitionRoutesTriggerFulfillmentParameters: {
	// The list of rich message responses to present to the user.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	messages?: [...#TransitionRoutesTriggerFulfillmentMessagesParameters] @go(Messages,[]TransitionRoutesTriggerFulfillmentMessagesParameters)

	// Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.
	// +kubebuilder:validation:Optional
	returnPartialResponses?: null | bool @go(ReturnPartialResponses,*bool)

	// The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.
	// +kubebuilder:validation:Optional
	tag?: null | string @go(Tag,*string)

	// The webhook to call. Format: projects//locations//agents//webhooks/.
	// +kubebuilder:validation:Optional
	webhook?: null | string @go(Webhook,*string)
}

#TransitionRoutesTriggerFulfillmentMessagesInitParameters: {
	// A collection of text responses.
	text?: [...#TransitionRoutesTriggerFulfillmentMessagesTextInitParameters] @go(Text,[]TransitionRoutesTriggerFulfillmentMessagesTextInitParameters)
}

#TransitionRoutesTriggerFulfillmentMessagesObservation: {
	// A collection of text responses.
	text?: [...#TransitionRoutesTriggerFulfillmentMessagesTextObservation] @go(Text,[]TransitionRoutesTriggerFulfillmentMessagesTextObservation)
}

#TransitionRoutesTriggerFulfillmentMessagesParameters: {
	// A collection of text responses.
	// +kubebuilder:validation:Optional
	text?: [...#TransitionRoutesTriggerFulfillmentMessagesTextParameters] @go(Text,[]TransitionRoutesTriggerFulfillmentMessagesTextParameters)
}

#TransitionRoutesTriggerFulfillmentMessagesTextInitParameters: {
	// A collection of text responses.
	text?: [...null | string] @go(Text,[]*string)
}

#TransitionRoutesTriggerFulfillmentMessagesTextObservation: {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	allowPlaybackInterruption?: null | bool @go(AllowPlaybackInterruption,*bool)

	// A collection of text responses.
	text?: [...null | string] @go(Text,[]*string)
}

#TransitionRoutesTriggerFulfillmentMessagesTextParameters: {
	// A collection of text responses.
	// +kubebuilder:validation:Optional
	text?: [...null | string] @go(Text,[]*string)
}

#TriggerFulfillmentMessagesTextInitParameters: {
	// A collection of text responses.
	text?: [...null | string] @go(Text,[]*string)
}

#TriggerFulfillmentMessagesTextObservation: {
	// (Output)
	// Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.
	allowPlaybackInterruption?: null | bool @go(AllowPlaybackInterruption,*bool)

	// A collection of text responses.
	text?: [...null | string] @go(Text,[]*string)
}

#TriggerFulfillmentMessagesTextParameters: {
	// A collection of text responses.
	// +kubebuilder:validation:Optional
	text?: [...null | string] @go(Text,[]*string)
}

// PageSpec defines the desired state of Page
#PageSpec: {
	forProvider: #PageParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #PageInitParameters @go(InitProvider)
}

// PageStatus defines the observed state of Page.
#PageStatus: {
	atProvider?: #PageObservation @go(AtProvider)
}

// Page is the Schema for the Pages API. A Dialogflow CX conversation (session) can be described and visualized as a state machine.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Page: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || has(self.initProvider.displayName)",message="displayName is a required parameter"
	spec:    #PageSpec   @go(Spec)
	status?: #PageStatus @go(Status)
}

// PageList contains a list of Pages
#PageList: {
	items: [...#Page] @go(Items,[]Page)
}
