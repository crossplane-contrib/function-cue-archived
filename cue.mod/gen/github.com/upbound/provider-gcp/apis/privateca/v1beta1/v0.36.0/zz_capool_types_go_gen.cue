// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/privateca/v1beta1

package v1beta1

#AdditionalExtensionsInitParameters: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	objectId?: [...#ObjectIDInitParameters] @go(ObjectID,[]ObjectIDInitParameters)

	// The value of this X.509 extension. A base64-encoded string.
	value?: null | string @go(Value,*string)
}

#AdditionalExtensionsObservation: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	objectId?: [...#ObjectIDObservation] @go(ObjectID,[]ObjectIDObservation)

	// The value of this X.509 extension. A base64-encoded string.
	value?: null | string @go(Value,*string)
}

#AdditionalExtensionsParameters: {
	// Indicates whether or not the name constraints are marked critical.
	// +kubebuilder:validation:Optional
	critical?: null | bool @go(Critical,*bool)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	objectId: [...#ObjectIDParameters] @go(ObjectID,[]ObjectIDParameters)

	// The value of this X.509 extension. A base64-encoded string.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#AllowedIssuanceModesInitParameters: {
	// When true, allows callers to create Certificates by specifying a CertificateConfig.
	allowConfigBasedIssuance?: null | bool @go(AllowConfigBasedIssuance,*bool)

	// When true, allows callers to create Certificates by specifying a CSR.
	allowCsrBasedIssuance?: null | bool @go(AllowCsrBasedIssuance,*bool)
}

#AllowedIssuanceModesObservation: {
	// When true, allows callers to create Certificates by specifying a CertificateConfig.
	allowConfigBasedIssuance?: null | bool @go(AllowConfigBasedIssuance,*bool)

	// When true, allows callers to create Certificates by specifying a CSR.
	allowCsrBasedIssuance?: null | bool @go(AllowCsrBasedIssuance,*bool)
}

#AllowedIssuanceModesParameters: {
	// When true, allows callers to create Certificates by specifying a CertificateConfig.
	// +kubebuilder:validation:Optional
	allowConfigBasedIssuance?: null | bool @go(AllowConfigBasedIssuance,*bool)

	// When true, allows callers to create Certificates by specifying a CSR.
	// +kubebuilder:validation:Optional
	allowCsrBasedIssuance?: null | bool @go(AllowCsrBasedIssuance,*bool)
}

#AllowedKeyTypesInitParameters: {
	// Represents an allowed Elliptic Curve key type.
	// Structure is documented below.
	ellipticCurve?: [...#EllipticCurveInitParameters] @go(EllipticCurve,[]EllipticCurveInitParameters)

	// Describes an RSA key that may be used in a Certificate issued from a CaPool.
	// Structure is documented below.
	rsa?: [...#RsaInitParameters] @go(Rsa,[]RsaInitParameters)
}

#AllowedKeyTypesObservation: {
	// Represents an allowed Elliptic Curve key type.
	// Structure is documented below.
	ellipticCurve?: [...#EllipticCurveObservation] @go(EllipticCurve,[]EllipticCurveObservation)

	// Describes an RSA key that may be used in a Certificate issued from a CaPool.
	// Structure is documented below.
	rsa?: [...#RsaObservation] @go(Rsa,[]RsaObservation)
}

#AllowedKeyTypesParameters: {
	// Represents an allowed Elliptic Curve key type.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ellipticCurve?: [...#EllipticCurveParameters] @go(EllipticCurve,[]EllipticCurveParameters)

	// Describes an RSA key that may be used in a Certificate issued from a CaPool.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	rsa?: [...#RsaParameters] @go(Rsa,[]RsaParameters)
}

#BaseKeyUsageInitParameters: {
	// The key may be used to sign certificates.
	certSign?: null | bool @go(CertSign,*bool)

	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	contentCommitment?: null | bool @go(ContentCommitment,*bool)

	// The key may be used sign certificate revocation lists.
	crlSign?: null | bool @go(CrlSign,*bool)

	// The key may be used to encipher data.
	dataEncipherment?: null | bool @go(DataEncipherment,*bool)

	// The key may be used to decipher only.
	decipherOnly?: null | bool @go(DecipherOnly,*bool)

	// The key may be used for digital signatures.
	digitalSignature?: null | bool @go(DigitalSignature,*bool)

	// The key may be used to encipher only.
	encipherOnly?: null | bool @go(EncipherOnly,*bool)

	// The key may be used in a key agreement protocol.
	keyAgreement?: null | bool @go(KeyAgreement,*bool)

	// The key may be used to encipher other keys.
	keyEncipherment?: null | bool @go(KeyEncipherment,*bool)
}

#BaseKeyUsageObservation: {
	// The key may be used to sign certificates.
	certSign?: null | bool @go(CertSign,*bool)

	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	contentCommitment?: null | bool @go(ContentCommitment,*bool)

	// The key may be used sign certificate revocation lists.
	crlSign?: null | bool @go(CrlSign,*bool)

	// The key may be used to encipher data.
	dataEncipherment?: null | bool @go(DataEncipherment,*bool)

	// The key may be used to decipher only.
	decipherOnly?: null | bool @go(DecipherOnly,*bool)

	// The key may be used for digital signatures.
	digitalSignature?: null | bool @go(DigitalSignature,*bool)

	// The key may be used to encipher only.
	encipherOnly?: null | bool @go(EncipherOnly,*bool)

	// The key may be used in a key agreement protocol.
	keyAgreement?: null | bool @go(KeyAgreement,*bool)

	// The key may be used to encipher other keys.
	keyEncipherment?: null | bool @go(KeyEncipherment,*bool)
}

#BaseKeyUsageParameters: {
	// The key may be used to sign certificates.
	// +kubebuilder:validation:Optional
	certSign?: null | bool @go(CertSign,*bool)

	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	// +kubebuilder:validation:Optional
	contentCommitment?: null | bool @go(ContentCommitment,*bool)

	// The key may be used sign certificate revocation lists.
	// +kubebuilder:validation:Optional
	crlSign?: null | bool @go(CrlSign,*bool)

	// The key may be used to encipher data.
	// +kubebuilder:validation:Optional
	dataEncipherment?: null | bool @go(DataEncipherment,*bool)

	// The key may be used to decipher only.
	// +kubebuilder:validation:Optional
	decipherOnly?: null | bool @go(DecipherOnly,*bool)

	// The key may be used for digital signatures.
	// +kubebuilder:validation:Optional
	digitalSignature?: null | bool @go(DigitalSignature,*bool)

	// The key may be used to encipher only.
	// +kubebuilder:validation:Optional
	encipherOnly?: null | bool @go(EncipherOnly,*bool)

	// The key may be used in a key agreement protocol.
	// +kubebuilder:validation:Optional
	keyAgreement?: null | bool @go(KeyAgreement,*bool)

	// The key may be used to encipher other keys.
	// +kubebuilder:validation:Optional
	keyEncipherment?: null | bool @go(KeyEncipherment,*bool)
}

#BaselineValuesInitParameters: {
	// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
	// Structure is documented below.
	additionalExtensions?: [...#AdditionalExtensionsInitParameters] @go(AdditionalExtensions,[]AdditionalExtensionsInitParameters)

	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	aiaOcspServers?: [...null | string] @go(AiaOcspServers,[]*string)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	caOptions?: [...#CAOptionsInitParameters] @go(CAOptions,[]CAOptionsInitParameters)

	// Indicates the intended use for keys that correspond to a certificate.
	// Structure is documented below.
	keyUsage?: [...#KeyUsageInitParameters] @go(KeyUsage,[]KeyUsageInitParameters)

	// Describes the X.509 name constraints extension.
	// Structure is documented below.
	nameConstraints?: [...#NameConstraintsInitParameters] @go(NameConstraints,[]NameConstraintsInitParameters)

	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// Structure is documented below.
	policyIds?: [...#PolicyIdsInitParameters] @go(PolicyIds,[]PolicyIdsInitParameters)
}

#BaselineValuesObservation: {
	// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
	// Structure is documented below.
	additionalExtensions?: [...#AdditionalExtensionsObservation] @go(AdditionalExtensions,[]AdditionalExtensionsObservation)

	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	aiaOcspServers?: [...null | string] @go(AiaOcspServers,[]*string)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	caOptions?: [...#CAOptionsObservation] @go(CAOptions,[]CAOptionsObservation)

	// Indicates the intended use for keys that correspond to a certificate.
	// Structure is documented below.
	keyUsage?: [...#KeyUsageObservation] @go(KeyUsage,[]KeyUsageObservation)

	// Describes the X.509 name constraints extension.
	// Structure is documented below.
	nameConstraints?: [...#NameConstraintsObservation] @go(NameConstraints,[]NameConstraintsObservation)

	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// Structure is documented below.
	policyIds?: [...#PolicyIdsObservation] @go(PolicyIds,[]PolicyIdsObservation)
}

#BaselineValuesParameters: {
	// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	additionalExtensions?: [...#AdditionalExtensionsParameters] @go(AdditionalExtensions,[]AdditionalExtensionsParameters)

	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	// +kubebuilder:validation:Optional
	aiaOcspServers?: [...null | string] @go(AiaOcspServers,[]*string)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	caOptions: [...#CAOptionsParameters] @go(CAOptions,[]CAOptionsParameters)

	// Indicates the intended use for keys that correspond to a certificate.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	keyUsage: [...#KeyUsageParameters] @go(KeyUsage,[]KeyUsageParameters)

	// Describes the X.509 name constraints extension.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	nameConstraints?: [...#NameConstraintsParameters] @go(NameConstraints,[]NameConstraintsParameters)

	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	policyIds?: [...#PolicyIdsParameters] @go(PolicyIds,[]PolicyIdsParameters)
}

#CAOptionsInitParameters: {
	// When true, the "CA" in Basic Constraints extension will be set to true.
	isCa?: null | bool @go(IsCA,*bool)

	// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
	maxIssuerPathLength?: null | float64 @go(MaxIssuerPathLength,*float64)

	// When true, the "CA" in Basic Constraints extension will be set to false.
	// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
	nonCa?: null | bool @go(NonCA,*bool)

	// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
	// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
	// the max path length will be omitted from the CA certificate.
	zeroMaxIssuerPathLength?: null | bool @go(ZeroMaxIssuerPathLength,*bool)
}

#CAOptionsObservation: {
	// When true, the "CA" in Basic Constraints extension will be set to true.
	isCa?: null | bool @go(IsCA,*bool)

	// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
	maxIssuerPathLength?: null | float64 @go(MaxIssuerPathLength,*float64)

	// When true, the "CA" in Basic Constraints extension will be set to false.
	// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
	nonCa?: null | bool @go(NonCA,*bool)

	// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
	// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
	// the max path length will be omitted from the CA certificate.
	zeroMaxIssuerPathLength?: null | bool @go(ZeroMaxIssuerPathLength,*bool)
}

#CAOptionsParameters: {
	// When true, the "CA" in Basic Constraints extension will be set to true.
	// +kubebuilder:validation:Optional
	isCa?: null | bool @go(IsCA,*bool)

	// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
	// +kubebuilder:validation:Optional
	maxIssuerPathLength?: null | float64 @go(MaxIssuerPathLength,*float64)

	// When true, the "CA" in Basic Constraints extension will be set to false.
	// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
	// +kubebuilder:validation:Optional
	nonCa?: null | bool @go(NonCA,*bool)

	// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
	// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
	// the max path length will be omitted from the CA certificate.
	// +kubebuilder:validation:Optional
	zeroMaxIssuerPathLength?: null | bool @go(ZeroMaxIssuerPathLength,*bool)
}

#CAPoolInitParameters: {
	// The IssuancePolicy to control how Certificates will be issued from this CaPool.
	// Structure is documented below.
	issuancePolicy?: [...#IssuancePolicyInitParameters] @go(IssuancePolicy,[]IssuancePolicyInitParameters)

	// Labels with user-defined metadata.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
	// "1.3kg", "count": "3" }.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
	// Structure is documented below.
	publishingOptions?: [...#PublishingOptionsInitParameters] @go(PublishingOptions,[]PublishingOptionsInitParameters)

	// The Tier of this CaPool.
	// Possible values are: ENTERPRISE, DEVOPS.
	tier?: null | string @go(Tier,*string)
}

#CAPoolObservation: {
	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/caPools/{{name}}
	id?: null | string @go(ID,*string)

	// The IssuancePolicy to control how Certificates will be issued from this CaPool.
	// Structure is documented below.
	issuancePolicy?: [...#IssuancePolicyObservation] @go(IssuancePolicy,[]IssuancePolicyObservation)

	// Labels with user-defined metadata.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
	// "1.3kg", "count": "3" }.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Location of the CaPool. A full list of valid locations can be found by
	// running gcloud privateca locations list.
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
	// Structure is documented below.
	publishingOptions?: [...#PublishingOptionsObservation] @go(PublishingOptions,[]PublishingOptionsObservation)

	// The Tier of this CaPool.
	// Possible values are: ENTERPRISE, DEVOPS.
	tier?: null | string @go(Tier,*string)
}

#CAPoolParameters: {
	// The IssuancePolicy to control how Certificates will be issued from this CaPool.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	issuancePolicy?: [...#IssuancePolicyParameters] @go(IssuancePolicy,[]IssuancePolicyParameters)

	// Labels with user-defined metadata.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
	// "1.3kg", "count": "3" }.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Location of the CaPool. A full list of valid locations can be found by
	// running gcloud privateca locations list.
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	publishingOptions?: [...#PublishingOptionsParameters] @go(PublishingOptions,[]PublishingOptionsParameters)

	// The Tier of this CaPool.
	// Possible values are: ENTERPRISE, DEVOPS.
	// +kubebuilder:validation:Optional
	tier?: null | string @go(Tier,*string)
}

#CelExpressionInitParameters: {
	// Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	description?: null | string @go(Description,*string)

	// Textual representation of an expression in Common Expression Language syntax.
	expression?: null | string @go(Expression,*string)

	// Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	title?: null | string @go(Title,*string)
}

#CelExpressionObservation: {
	// Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	description?: null | string @go(Description,*string)

	// Textual representation of an expression in Common Expression Language syntax.
	expression?: null | string @go(Expression,*string)

	// Location of the CaPool. A full list of valid locations can be found by
	// running gcloud privateca locations list.
	location?: null | string @go(Location,*string)

	// Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	title?: null | string @go(Title,*string)
}

#CelExpressionParameters: {
	// Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Textual representation of an expression in Common Expression Language syntax.
	// +kubebuilder:validation:Optional
	expression?: null | string @go(Expression,*string)

	// Location of the CaPool. A full list of valid locations can be found by
	// running gcloud privateca locations list.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	// +kubebuilder:validation:Optional
	title?: null | string @go(Title,*string)
}

#EllipticCurveInitParameters: {
	// The algorithm used.
	// Possible values are: ECDSA_P256, ECDSA_P384, EDDSA_25519.
	signatureAlgorithm?: null | string @go(SignatureAlgorithm,*string)
}

#EllipticCurveObservation: {
	// The algorithm used.
	// Possible values are: ECDSA_P256, ECDSA_P384, EDDSA_25519.
	signatureAlgorithm?: null | string @go(SignatureAlgorithm,*string)
}

#EllipticCurveParameters: {
	// The algorithm used.
	// Possible values are: ECDSA_P256, ECDSA_P384, EDDSA_25519.
	// +kubebuilder:validation:Optional
	signatureAlgorithm?: null | string @go(SignatureAlgorithm,*string)
}

#ExtendedKeyUsageInitParameters: {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	clientAuth?: null | bool @go(ClientAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	codeSigning?: null | bool @go(CodeSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	emailProtection?: null | bool @go(EmailProtection,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	ocspSigning?: null | bool @go(OcspSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	serverAuth?: null | bool @go(ServerAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	timeStamping?: null | bool @go(TimeStamping,*bool)
}

#ExtendedKeyUsageObservation: {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	clientAuth?: null | bool @go(ClientAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	codeSigning?: null | bool @go(CodeSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	emailProtection?: null | bool @go(EmailProtection,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	ocspSigning?: null | bool @go(OcspSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	serverAuth?: null | bool @go(ServerAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	timeStamping?: null | bool @go(TimeStamping,*bool)
}

#ExtendedKeyUsageParameters: {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	// +kubebuilder:validation:Optional
	clientAuth?: null | bool @go(ClientAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	// +kubebuilder:validation:Optional
	codeSigning?: null | bool @go(CodeSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	// +kubebuilder:validation:Optional
	emailProtection?: null | bool @go(EmailProtection,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	// +kubebuilder:validation:Optional
	ocspSigning?: null | bool @go(OcspSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	// +kubebuilder:validation:Optional
	serverAuth?: null | bool @go(ServerAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	// +kubebuilder:validation:Optional
	timeStamping?: null | bool @go(TimeStamping,*bool)
}

#IdentityConstraintsInitParameters: {
	// If this is set, the SubjectAltNames extension may be copied from a certificate request into the signed certificate.
	// Otherwise, the requested SubjectAltNames will be discarded.
	allowSubjectAltNamesPassthrough?: null | bool @go(AllowSubjectAltNamesPassthrough,*bool)

	// If this is set, the Subject field may be copied from a certificate request into the signed certificate.
	// Otherwise, the requested Subject will be discarded.
	allowSubjectPassthrough?: null | bool @go(AllowSubjectPassthrough,*bool)

	// A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a
	// certificate is signed. To see the full allowed syntax and some examples,
	// see https://cloud.google.com/certificate-authority-service/docs/cel-guide
	// Structure is documented below.
	celExpression?: [...#CelExpressionInitParameters] @go(CelExpression,[]CelExpressionInitParameters)
}

#IdentityConstraintsObservation: {
	// If this is set, the SubjectAltNames extension may be copied from a certificate request into the signed certificate.
	// Otherwise, the requested SubjectAltNames will be discarded.
	allowSubjectAltNamesPassthrough?: null | bool @go(AllowSubjectAltNamesPassthrough,*bool)

	// If this is set, the Subject field may be copied from a certificate request into the signed certificate.
	// Otherwise, the requested Subject will be discarded.
	allowSubjectPassthrough?: null | bool @go(AllowSubjectPassthrough,*bool)

	// A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a
	// certificate is signed. To see the full allowed syntax and some examples,
	// see https://cloud.google.com/certificate-authority-service/docs/cel-guide
	// Structure is documented below.
	celExpression?: [...#CelExpressionObservation] @go(CelExpression,[]CelExpressionObservation)
}

#IdentityConstraintsParameters: {
	// If this is set, the SubjectAltNames extension may be copied from a certificate request into the signed certificate.
	// Otherwise, the requested SubjectAltNames will be discarded.
	// +kubebuilder:validation:Optional
	allowSubjectAltNamesPassthrough?: null | bool @go(AllowSubjectAltNamesPassthrough,*bool)

	// If this is set, the Subject field may be copied from a certificate request into the signed certificate.
	// Otherwise, the requested Subject will be discarded.
	// +kubebuilder:validation:Optional
	allowSubjectPassthrough?: null | bool @go(AllowSubjectPassthrough,*bool)

	// A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a
	// certificate is signed. To see the full allowed syntax and some examples,
	// see https://cloud.google.com/certificate-authority-service/docs/cel-guide
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	celExpression?: [...#CelExpressionParameters] @go(CelExpression,[]CelExpressionParameters)
}

#IssuancePolicyInitParameters: {
	// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
	// Structure is documented below.
	allowedIssuanceModes?: [...#AllowedIssuanceModesInitParameters] @go(AllowedIssuanceModes,[]AllowedIssuanceModesInitParameters)

	// If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here.
	// Otherwise, any key may be used.
	// Structure is documented below.
	allowedKeyTypes?: [...#AllowedKeyTypesInitParameters] @go(AllowedKeyTypes,[]AllowedKeyTypesInitParameters)

	// A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request
	// includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate
	// request uses a CertificateTemplate that defines conflicting predefinedValues for the same properties, the certificate
	// issuance request will fail.
	// Structure is documented below.
	baselineValues?: [...#BaselineValuesInitParameters] @go(BaselineValues,[]BaselineValuesInitParameters)

	// Describes constraints on identities that may appear in Certificates issued through this CaPool.
	// If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
	// Structure is documented below.
	identityConstraints?: [...#IdentityConstraintsInitParameters] @go(IdentityConstraints,[]IdentityConstraintsInitParameters)

	// The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority
	// expires before a Certificate's requested maximumLifetime, the effective lifetime will be explicitly truncated to match it.
	maximumLifetime?: null | string @go(MaximumLifetime,*string)
}

#IssuancePolicyObservation: {
	// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
	// Structure is documented below.
	allowedIssuanceModes?: [...#AllowedIssuanceModesObservation] @go(AllowedIssuanceModes,[]AllowedIssuanceModesObservation)

	// If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here.
	// Otherwise, any key may be used.
	// Structure is documented below.
	allowedKeyTypes?: [...#AllowedKeyTypesObservation] @go(AllowedKeyTypes,[]AllowedKeyTypesObservation)

	// A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request
	// includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate
	// request uses a CertificateTemplate that defines conflicting predefinedValues for the same properties, the certificate
	// issuance request will fail.
	// Structure is documented below.
	baselineValues?: [...#BaselineValuesObservation] @go(BaselineValues,[]BaselineValuesObservation)

	// Describes constraints on identities that may appear in Certificates issued through this CaPool.
	// If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
	// Structure is documented below.
	identityConstraints?: [...#IdentityConstraintsObservation] @go(IdentityConstraints,[]IdentityConstraintsObservation)

	// The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority
	// expires before a Certificate's requested maximumLifetime, the effective lifetime will be explicitly truncated to match it.
	maximumLifetime?: null | string @go(MaximumLifetime,*string)
}

#IssuancePolicyParameters: {
	// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	allowedIssuanceModes?: [...#AllowedIssuanceModesParameters] @go(AllowedIssuanceModes,[]AllowedIssuanceModesParameters)

	// If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here.
	// Otherwise, any key may be used.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	allowedKeyTypes?: [...#AllowedKeyTypesParameters] @go(AllowedKeyTypes,[]AllowedKeyTypesParameters)

	// A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request
	// includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate
	// request uses a CertificateTemplate that defines conflicting predefinedValues for the same properties, the certificate
	// issuance request will fail.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	baselineValues?: [...#BaselineValuesParameters] @go(BaselineValues,[]BaselineValuesParameters)

	// Describes constraints on identities that may appear in Certificates issued through this CaPool.
	// If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	identityConstraints?: [...#IdentityConstraintsParameters] @go(IdentityConstraints,[]IdentityConstraintsParameters)

	// The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority
	// expires before a Certificate's requested maximumLifetime, the effective lifetime will be explicitly truncated to match it.
	// +kubebuilder:validation:Optional
	maximumLifetime?: null | string @go(MaximumLifetime,*string)
}

#KeyUsageInitParameters: {
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	baseKeyUsage?: [...#BaseKeyUsageInitParameters] @go(BaseKeyUsage,[]BaseKeyUsageInitParameters)

	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	extendedKeyUsage?: [...#ExtendedKeyUsageInitParameters] @go(ExtendedKeyUsage,[]ExtendedKeyUsageInitParameters)

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// Structure is documented below.
	unknownExtendedKeyUsages?: [...#UnknownExtendedKeyUsagesInitParameters] @go(UnknownExtendedKeyUsages,[]UnknownExtendedKeyUsagesInitParameters)
}

#KeyUsageObservation: {
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	baseKeyUsage?: [...#BaseKeyUsageObservation] @go(BaseKeyUsage,[]BaseKeyUsageObservation)

	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	extendedKeyUsage?: [...#ExtendedKeyUsageObservation] @go(ExtendedKeyUsage,[]ExtendedKeyUsageObservation)

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// Structure is documented below.
	unknownExtendedKeyUsages?: [...#UnknownExtendedKeyUsagesObservation] @go(UnknownExtendedKeyUsages,[]UnknownExtendedKeyUsagesObservation)
}

#KeyUsageParameters: {
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	baseKeyUsage: [...#BaseKeyUsageParameters] @go(BaseKeyUsage,[]BaseKeyUsageParameters)

	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	extendedKeyUsage: [...#ExtendedKeyUsageParameters] @go(ExtendedKeyUsage,[]ExtendedKeyUsageParameters)

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	unknownExtendedKeyUsages?: [...#UnknownExtendedKeyUsagesParameters] @go(UnknownExtendedKeyUsages,[]UnknownExtendedKeyUsagesParameters)
}

#NameConstraintsInitParameters: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Contains excluded DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	excludedDnsNames?: [...null | string] @go(ExcludedDNSNames,[]*string)

	// Contains the excluded email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	excludedEmailAddresses?: [...null | string] @go(ExcludedEmailAddresses,[]*string)

	// Contains the excluded IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	excludedIpRanges?: [...null | string] @go(ExcludedIPRanges,[]*string)

	// Contains the excluded URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	excludedUris?: [...null | string] @go(ExcludedUris,[]*string)

	// Contains permitted DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	permittedDnsNames?: [...null | string] @go(PermittedDNSNames,[]*string)

	// Contains the permitted email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	permittedEmailAddresses?: [...null | string] @go(PermittedEmailAddresses,[]*string)

	// Contains the permitted IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	permittedIpRanges?: [...null | string] @go(PermittedIPRanges,[]*string)

	// Contains the permitted URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	permittedUris?: [...null | string] @go(PermittedUris,[]*string)
}

#NameConstraintsObservation: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Contains excluded DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	excludedDnsNames?: [...null | string] @go(ExcludedDNSNames,[]*string)

	// Contains the excluded email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	excludedEmailAddresses?: [...null | string] @go(ExcludedEmailAddresses,[]*string)

	// Contains the excluded IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	excludedIpRanges?: [...null | string] @go(ExcludedIPRanges,[]*string)

	// Contains the excluded URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	excludedUris?: [...null | string] @go(ExcludedUris,[]*string)

	// Contains permitted DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	permittedDnsNames?: [...null | string] @go(PermittedDNSNames,[]*string)

	// Contains the permitted email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	permittedEmailAddresses?: [...null | string] @go(PermittedEmailAddresses,[]*string)

	// Contains the permitted IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	permittedIpRanges?: [...null | string] @go(PermittedIPRanges,[]*string)

	// Contains the permitted URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	permittedUris?: [...null | string] @go(PermittedUris,[]*string)
}

#NameConstraintsParameters: {
	// Indicates whether or not the name constraints are marked critical.
	// +kubebuilder:validation:Optional
	critical?: null | bool @go(Critical,*bool)

	// Contains excluded DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	// +kubebuilder:validation:Optional
	excludedDnsNames?: [...null | string] @go(ExcludedDNSNames,[]*string)

	// Contains the excluded email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	// +kubebuilder:validation:Optional
	excludedEmailAddresses?: [...null | string] @go(ExcludedEmailAddresses,[]*string)

	// Contains the excluded IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	// +kubebuilder:validation:Optional
	excludedIpRanges?: [...null | string] @go(ExcludedIPRanges,[]*string)

	// Contains the excluded URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	// +kubebuilder:validation:Optional
	excludedUris?: [...null | string] @go(ExcludedUris,[]*string)

	// Contains permitted DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	// +kubebuilder:validation:Optional
	permittedDnsNames?: [...null | string] @go(PermittedDNSNames,[]*string)

	// Contains the permitted email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	// +kubebuilder:validation:Optional
	permittedEmailAddresses?: [...null | string] @go(PermittedEmailAddresses,[]*string)

	// Contains the permitted IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	// +kubebuilder:validation:Optional
	permittedIpRanges?: [...null | string] @go(PermittedIPRanges,[]*string)

	// Contains the permitted URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	// +kubebuilder:validation:Optional
	permittedUris?: [...null | string] @go(PermittedUris,[]*string)
}

#ObjectIDInitParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#ObjectIDObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#ObjectIDParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Optional
	objectIdPath: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#PolicyIdsInitParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#PolicyIdsObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#PolicyIdsParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Optional
	objectIdPath: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#PublishingOptionsInitParameters: {
	// When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access"
	// X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding
	// X.509 extension will not be written in issued certificates.
	publishCaCert?: null | bool @go(PublishCACert,*bool)

	// When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension
	// in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not
	// be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are
	// also rebuilt shortly after a certificate is revoked.
	publishCrl?: null | bool @go(PublishCrl,*bool)
}

#PublishingOptionsObservation: {
	// When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access"
	// X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding
	// X.509 extension will not be written in issued certificates.
	publishCaCert?: null | bool @go(PublishCACert,*bool)

	// When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension
	// in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not
	// be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are
	// also rebuilt shortly after a certificate is revoked.
	publishCrl?: null | bool @go(PublishCrl,*bool)
}

#PublishingOptionsParameters: {
	// When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access"
	// X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding
	// X.509 extension will not be written in issued certificates.
	// +kubebuilder:validation:Optional
	publishCaCert?: null | bool @go(PublishCACert,*bool)

	// When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension
	// in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not
	// be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are
	// also rebuilt shortly after a certificate is revoked.
	// +kubebuilder:validation:Optional
	publishCrl?: null | bool @go(PublishCrl,*bool)
}

#RsaInitParameters: {
	// The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
	// service will not enforce an explicit upper bound on RSA modulus sizes.
	maxModulusSize?: null | string @go(MaxModulusSize,*string)

	// The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
	// service-level min RSA modulus size will continue to apply.
	minModulusSize?: null | string @go(MinModulusSize,*string)
}

#RsaObservation: {
	// The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
	// service will not enforce an explicit upper bound on RSA modulus sizes.
	maxModulusSize?: null | string @go(MaxModulusSize,*string)

	// The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
	// service-level min RSA modulus size will continue to apply.
	minModulusSize?: null | string @go(MinModulusSize,*string)
}

#RsaParameters: {
	// The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
	// service will not enforce an explicit upper bound on RSA modulus sizes.
	// +kubebuilder:validation:Optional
	maxModulusSize?: null | string @go(MaxModulusSize,*string)

	// The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
	// service-level min RSA modulus size will continue to apply.
	// +kubebuilder:validation:Optional
	minModulusSize?: null | string @go(MinModulusSize,*string)
}

#UnknownExtendedKeyUsagesInitParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#UnknownExtendedKeyUsagesObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#UnknownExtendedKeyUsagesParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Optional
	objectIdPath: [...null | float64] @go(ObjectIDPath,[]*float64)
}

// CAPoolSpec defines the desired state of CAPool
#CAPoolSpec: {
	forProvider: #CAPoolParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CAPoolInitParameters @go(InitProvider)
}

// CAPoolStatus defines the observed state of CAPool.
#CAPoolStatus: {
	atProvider?: #CAPoolObservation @go(AtProvider)
}

// CAPool is the Schema for the CAPools API. A CaPool represents a group of CertificateAuthorities that form a trust anchor.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#CAPool: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tier) || has(self.initProvider.tier)",message="tier is a required parameter"
	spec:    #CAPoolSpec   @go(Spec)
	status?: #CAPoolStatus @go(Status)
}

// CAPoolList contains a list of CAPools
#CAPoolList: {
	items: [...#CAPool] @go(Items,[]CAPool)
}
