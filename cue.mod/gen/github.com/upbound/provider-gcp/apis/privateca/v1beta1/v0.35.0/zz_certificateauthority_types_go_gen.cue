// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/privateca/v1beta1

package v1beta1

#AccessUrlsInitParameters: {
}

#AccessUrlsObservation: {
	// (Output)
	// The URL where this CertificateAuthority's CA certificate is published. This will only be
	// set for CAs that have been activated.
	caCertificateAccessUrl?: null | string @go(CACertificateAccessURL,*string)

	// (Output)
	// The URL where this CertificateAuthority's CRLs are published. This will only be set for
	// CAs that have been activated.
	crlAccessUrls?: [...null | string] @go(CrlAccessUrls,[]*string)
}

#AccessUrlsParameters: {
}

#CertificateAuthorityConfigInitParameters: {
	// Specifies some of the values in a certificate that are related to the subject.
	// Structure is documented below.
	subjectConfig?: [...#ConfigSubjectConfigInitParameters] @go(SubjectConfig,[]ConfigSubjectConfigInitParameters)

	// Describes how some of the technical X.509 fields in a certificate should be populated.
	// Structure is documented below.
	x509Config?: [...#ConfigX509ConfigInitParameters] @go(X509Config,[]ConfigX509ConfigInitParameters)
}

#CertificateAuthorityConfigObservation: {
	// Specifies some of the values in a certificate that are related to the subject.
	// Structure is documented below.
	subjectConfig?: [...#ConfigSubjectConfigObservation] @go(SubjectConfig,[]ConfigSubjectConfigObservation)

	// Describes how some of the technical X.509 fields in a certificate should be populated.
	// Structure is documented below.
	x509Config?: [...#ConfigX509ConfigObservation] @go(X509Config,[]ConfigX509ConfigObservation)
}

#CertificateAuthorityConfigParameters: {
	// Specifies some of the values in a certificate that are related to the subject.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	subjectConfig?: [...#ConfigSubjectConfigParameters] @go(SubjectConfig,[]ConfigSubjectConfigParameters)

	// Describes how some of the technical X.509 fields in a certificate should be populated.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	x509Config?: [...#ConfigX509ConfigParameters] @go(X509Config,[]ConfigX509ConfigParameters)
}

#CertificateAuthorityInitParameters: {
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	config?: [...#CertificateAuthorityConfigInitParameters] @go(Config,[]CertificateAuthorityConfigInitParameters)
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// Desired state of the CertificateAuthority. Set this field to STAGED to create a STAGED root CA.
	desiredState?: null | string @go(DesiredState,*string)

	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
	// such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
	// (such as gs://) or suffixes (such as .googleapis.com). For example, to use a bucket named
	// my-bucket, you would simply specify my-bucket. If not specified, a managed bucket will be
	// created.
	gcsBucket?: null | string @go(GcsBucket,*string)

	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
	// Use with care. Defaults to false.
	ignoreActiveCertificatesOnDeletion?: null | bool @go(IgnoreActiveCertificatesOnDeletion,*bool)

	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
	// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
	// certificate. Otherwise, it is used to sign a CSR.
	// Structure is documented below.
	keySpec?: [...#KeySpecInitParameters] @go(KeySpec,[]KeySpecInitParameters)

	// Labels with user-defined metadata.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
	// "1.3kg", "count": "3" }.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	lifetime?: null | string @go(Lifetime,*string)

	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with a third party issuer.
	pemCaCertificate?: null | string @go(PemCACertificate,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// If this flag is set, the Certificate Authority will be deleted as soon as
	// possible without a 30-day grace period where undeletion would have been
	// allowed. If you proceed, there will be no way to recover this CA.
	// Use with care. Defaults to false.
	skipGracePeriod?: null | bool @go(SkipGracePeriod,*bool)

	// If this is a subordinate CertificateAuthority, this field will be set
	// with the subordinate configuration, which describes its issuers.
	// Structure is documented below.
	subordinateConfig?: [...#SubordinateConfigInitParameters] @go(SubordinateConfig,[]SubordinateConfigInitParameters)

	// The Type of this CertificateAuthority.
	// ~> Note: For SUBORDINATE Certificate Authorities, they need to
	// be activated before they can issue certificates.
	// Default value is SELF_SIGNED.
	// Possible values are: SELF_SIGNED, SUBORDINATE.
	type?: null | string @go(Type,*string)
}

#CertificateAuthorityObservation: {
	// URLs for accessing content published by this CA, such as the CA certificate and CRLs.
	// Structure is documented below.
	accessUrls?: [...#AccessUrlsObservation] @go(AccessUrls,[]AccessUrlsObservation)

	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	config?: [...#CertificateAuthorityConfigObservation] @go(Config,[]CertificateAuthorityConfigObservation)

	// The time at which this CertificateAuthority was created.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	createTime?:         null | string @go(CreateTime,*string)
	deletionProtection?: null | bool   @go(DeletionProtection,*bool)

	// Desired state of the CertificateAuthority. Set this field to STAGED to create a STAGED root CA.
	desiredState?: null | string @go(DesiredState,*string)

	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
	// such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
	// (such as gs://) or suffixes (such as .googleapis.com). For example, to use a bucket named
	// my-bucket, you would simply specify my-bucket. If not specified, a managed bucket will be
	// created.
	gcsBucket?: null | string @go(GcsBucket,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/caPools/{{pool}}/certificateAuthorities/{{certificate_authority_id}}
	id?: null | string @go(ID,*string)

	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
	// Use with care. Defaults to false.
	ignoreActiveCertificatesOnDeletion?: null | bool @go(IgnoreActiveCertificatesOnDeletion,*bool)

	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
	// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
	// certificate. Otherwise, it is used to sign a CSR.
	// Structure is documented below.
	keySpec?: [...#KeySpecObservation] @go(KeySpec,[]KeySpecObservation)

	// Labels with user-defined metadata.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
	// "1.3kg", "count": "3" }.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	lifetime?: null | string @go(Lifetime,*string)

	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running gcloud privateca locations list.
	location?: null | string @go(Location,*string)

	// The resource name for this CertificateAuthority in the format
	// projects//locations//certificateAuthorities/*.
	name?: null | string @go(Name,*string)

	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with a third party issuer.
	pemCaCertificate?: null | string @go(PemCACertificate,*string)

	// This CertificateAuthority's certificate chain, including the current
	// CertificateAuthority's certificate. Ordered such that the root issuer is the final
	// element (consistent with RFC 5246). For a self-signed CA, this will only list the current
	// CertificateAuthority's certificate.
	pemCaCertificates?: [...null | string] @go(PemCACertificates,[]*string)

	// The name of the CaPool this Certificate Authority belongs to.
	pool?: null | string @go(Pool,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// If this flag is set, the Certificate Authority will be deleted as soon as
	// possible without a 30-day grace period where undeletion would have been
	// allowed. If you proceed, there will be no way to recover this CA.
	// Use with care. Defaults to false.
	skipGracePeriod?: null | bool @go(SkipGracePeriod,*bool)

	// The State for this CertificateAuthority.
	state?: null | string @go(State,*string)

	// If this is a subordinate CertificateAuthority, this field will be set
	// with the subordinate configuration, which describes its issuers.
	// Structure is documented below.
	subordinateConfig?: [...#SubordinateConfigObservation] @go(SubordinateConfig,[]SubordinateConfigObservation)

	// The Type of this CertificateAuthority.
	// ~> Note: For SUBORDINATE Certificate Authorities, they need to
	// be activated before they can issue certificates.
	// Default value is SELF_SIGNED.
	// Possible values are: SELF_SIGNED, SUBORDINATE.
	type?: null | string @go(Type,*string)

	// The time at which this CertificateAuthority was updated.
	// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine
	// fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
	updateTime?: null | string @go(UpdateTime,*string)
}

#CertificateAuthorityParameters: {
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	config?: [...#CertificateAuthorityConfigParameters] @go(Config,[]CertificateAuthorityConfigParameters)

	// +kubebuilder:validation:Optional
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// Desired state of the CertificateAuthority. Set this field to STAGED to create a STAGED root CA.
	// +kubebuilder:validation:Optional
	desiredState?: null | string @go(DesiredState,*string)

	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
	// such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
	// (such as gs://) or suffixes (such as .googleapis.com). For example, to use a bucket named
	// my-bucket, you would simply specify my-bucket. If not specified, a managed bucket will be
	// created.
	// +kubebuilder:validation:Optional
	gcsBucket?: null | string @go(GcsBucket,*string)

	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
	// Use with care. Defaults to false.
	// +kubebuilder:validation:Optional
	ignoreActiveCertificatesOnDeletion?: null | bool @go(IgnoreActiveCertificatesOnDeletion,*bool)

	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
	// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
	// certificate. Otherwise, it is used to sign a CSR.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	keySpec?: [...#KeySpecParameters] @go(KeySpec,[]KeySpecParameters)

	// Labels with user-defined metadata.
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
	// "1.3kg", "count": "3" }.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	lifetime?: null | string @go(Lifetime,*string)

	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running gcloud privateca locations list.
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// The signed CA certificate issued from the subordinated CA's CSR. This is needed when activating the subordiante CA with a third party issuer.
	// +kubebuilder:validation:Optional
	pemCaCertificate?: null | string @go(PemCACertificate,*string)

	// The name of the CaPool this Certificate Authority belongs to.
	// +crossplane:generate:reference:type=CAPool
	// +kubebuilder:validation:Optional
	pool?: null | string @go(Pool,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// If this flag is set, the Certificate Authority will be deleted as soon as
	// possible without a 30-day grace period where undeletion would have been
	// allowed. If you proceed, there will be no way to recover this CA.
	// Use with care. Defaults to false.
	// +kubebuilder:validation:Optional
	skipGracePeriod?: null | bool @go(SkipGracePeriod,*bool)

	// If this is a subordinate CertificateAuthority, this field will be set
	// with the subordinate configuration, which describes its issuers.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	subordinateConfig?: [...#SubordinateConfigParameters] @go(SubordinateConfig,[]SubordinateConfigParameters)

	// The Type of this CertificateAuthority.
	// ~> Note: For SUBORDINATE Certificate Authorities, they need to
	// be activated before they can issue certificates.
	// Default value is SELF_SIGNED.
	// Possible values are: SELF_SIGNED, SUBORDINATE.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#ConfigSubjectConfigInitParameters: {
	// Contains distinguished name fields such as the location and organization.
	// Structure is documented below.
	subject?: [...#ConfigSubjectConfigSubjectInitParameters] @go(Subject,[]ConfigSubjectConfigSubjectInitParameters)

	// The subject alternative name fields.
	// Structure is documented below.
	subjectAltName?: [...#ConfigSubjectConfigSubjectAltNameInitParameters] @go(SubjectAltName,[]ConfigSubjectConfigSubjectAltNameInitParameters)
}

#ConfigSubjectConfigObservation: {
	// Contains distinguished name fields such as the location and organization.
	// Structure is documented below.
	subject?: [...#ConfigSubjectConfigSubjectObservation] @go(Subject,[]ConfigSubjectConfigSubjectObservation)

	// The subject alternative name fields.
	// Structure is documented below.
	subjectAltName?: [...#ConfigSubjectConfigSubjectAltNameObservation] @go(SubjectAltName,[]ConfigSubjectConfigSubjectAltNameObservation)
}

#ConfigSubjectConfigParameters: {
	// Contains distinguished name fields such as the location and organization.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	subject?: [...#ConfigSubjectConfigSubjectParameters] @go(Subject,[]ConfigSubjectConfigSubjectParameters)

	// The subject alternative name fields.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	subjectAltName?: [...#ConfigSubjectConfigSubjectAltNameParameters] @go(SubjectAltName,[]ConfigSubjectConfigSubjectAltNameParameters)
}

#ConfigSubjectConfigSubjectAltNameInitParameters: {
	// Contains only valid, fully-qualified host names.
	dnsNames?: [...null | string] @go(DNSNames,[]*string)

	// Contains only valid RFC 2822 E-mail addresses.
	emailAddresses?: [...null | string] @go(EmailAddresses,[]*string)

	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	ipAddresses?: [...null | string] @go(IPAddresses,[]*string)

	// Contains only valid RFC 3986 URIs.
	uris?: [...null | string] @go(Uris,[]*string)
}

#ConfigSubjectConfigSubjectAltNameObservation: {
	// Contains only valid, fully-qualified host names.
	dnsNames?: [...null | string] @go(DNSNames,[]*string)

	// Contains only valid RFC 2822 E-mail addresses.
	emailAddresses?: [...null | string] @go(EmailAddresses,[]*string)

	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	ipAddresses?: [...null | string] @go(IPAddresses,[]*string)

	// Contains only valid RFC 3986 URIs.
	uris?: [...null | string] @go(Uris,[]*string)
}

#ConfigSubjectConfigSubjectAltNameParameters: {
	// Contains only valid, fully-qualified host names.
	// +kubebuilder:validation:Optional
	dnsNames?: [...null | string] @go(DNSNames,[]*string)

	// Contains only valid RFC 2822 E-mail addresses.
	// +kubebuilder:validation:Optional
	emailAddresses?: [...null | string] @go(EmailAddresses,[]*string)

	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	// +kubebuilder:validation:Optional
	ipAddresses?: [...null | string] @go(IPAddresses,[]*string)

	// Contains only valid RFC 3986 URIs.
	// +kubebuilder:validation:Optional
	uris?: [...null | string] @go(Uris,[]*string)
}

#ConfigSubjectConfigSubjectInitParameters: {
	// The common name of the distinguished name.
	commonName?: null | string @go(CommonName,*string)

	// The country code of the subject.
	countryCode?: null | string @go(CountryCode,*string)

	// The locality or city of the subject.
	locality?: null | string @go(Locality,*string)

	// The organization of the subject.
	organization?: null | string @go(Organization,*string)

	// The organizational unit of the subject.
	organizationalUnit?: null | string @go(OrganizationalUnit,*string)

	// The postal code of the subject.
	postalCode?: null | string @go(PostalCode,*string)

	// The province, territory, or regional state of the subject.
	province?: null | string @go(Province,*string)

	// The street address of the subject.
	streetAddress?: null | string @go(StreetAddress,*string)
}

#ConfigSubjectConfigSubjectObservation: {
	// The common name of the distinguished name.
	commonName?: null | string @go(CommonName,*string)

	// The country code of the subject.
	countryCode?: null | string @go(CountryCode,*string)

	// The locality or city of the subject.
	locality?: null | string @go(Locality,*string)

	// The organization of the subject.
	organization?: null | string @go(Organization,*string)

	// The organizational unit of the subject.
	organizationalUnit?: null | string @go(OrganizationalUnit,*string)

	// The postal code of the subject.
	postalCode?: null | string @go(PostalCode,*string)

	// The province, territory, or regional state of the subject.
	province?: null | string @go(Province,*string)

	// The street address of the subject.
	streetAddress?: null | string @go(StreetAddress,*string)
}

#ConfigSubjectConfigSubjectParameters: {
	// The common name of the distinguished name.
	// +kubebuilder:validation:Optional
	commonName?: null | string @go(CommonName,*string)

	// The country code of the subject.
	// +kubebuilder:validation:Optional
	countryCode?: null | string @go(CountryCode,*string)

	// The locality or city of the subject.
	// +kubebuilder:validation:Optional
	locality?: null | string @go(Locality,*string)

	// The organization of the subject.
	// +kubebuilder:validation:Optional
	organization?: null | string @go(Organization,*string)

	// The organizational unit of the subject.
	// +kubebuilder:validation:Optional
	organizationalUnit?: null | string @go(OrganizationalUnit,*string)

	// The postal code of the subject.
	// +kubebuilder:validation:Optional
	postalCode?: null | string @go(PostalCode,*string)

	// The province, territory, or regional state of the subject.
	// +kubebuilder:validation:Optional
	province?: null | string @go(Province,*string)

	// The street address of the subject.
	// +kubebuilder:validation:Optional
	streetAddress?: null | string @go(StreetAddress,*string)
}

#ConfigX509ConfigAdditionalExtensionsInitParameters: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	objectId?: [...#ConfigX509ConfigAdditionalExtensionsObjectIDInitParameters] @go(ObjectID,[]ConfigX509ConfigAdditionalExtensionsObjectIDInitParameters)

	// The value of this X.509 extension. A base64-encoded string.
	value?: null | string @go(Value,*string)
}

#ConfigX509ConfigAdditionalExtensionsObjectIDInitParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#ConfigX509ConfigAdditionalExtensionsObjectIDObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#ConfigX509ConfigAdditionalExtensionsObjectIDParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Optional
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#ConfigX509ConfigAdditionalExtensionsObservation: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	objectId?: [...#ConfigX509ConfigAdditionalExtensionsObjectIDObservation] @go(ObjectID,[]ConfigX509ConfigAdditionalExtensionsObjectIDObservation)

	// The value of this X.509 extension. A base64-encoded string.
	value?: null | string @go(Value,*string)
}

#ConfigX509ConfigAdditionalExtensionsParameters: {
	// Indicates whether or not the name constraints are marked critical.
	// +kubebuilder:validation:Optional
	critical?: null | bool @go(Critical,*bool)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	objectId?: [...#ConfigX509ConfigAdditionalExtensionsObjectIDParameters] @go(ObjectID,[]ConfigX509ConfigAdditionalExtensionsObjectIDParameters)

	// The value of this X.509 extension. A base64-encoded string.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#ConfigX509ConfigCAOptionsInitParameters: {
	// When true, the "CA" in Basic Constraints extension will be set to true.
	isCa?: null | bool @go(IsCA,*bool)

	// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. Setting the value to 0
	// requires setting zero_max_issuer_path_length = true.
	maxIssuerPathLength?: null | float64 @go(MaxIssuerPathLength,*float64)

	// When true, the "CA" in Basic Constraints extension will be set to false.
	// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
	nonCa?: null | bool @go(NonCA,*bool)

	// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
	// If both max_issuer_path_length and zero_max_issuer_path_length are unset,
	// the max path length will be omitted from the CA certificate.
	zeroMaxIssuerPathLength?: null | bool @go(ZeroMaxIssuerPathLength,*bool)
}

#ConfigX509ConfigCAOptionsObservation: {
	// When true, the "CA" in Basic Constraints extension will be set to true.
	isCa?: null | bool @go(IsCA,*bool)

	// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. Setting the value to 0
	// requires setting zero_max_issuer_path_length = true.
	maxIssuerPathLength?: null | float64 @go(MaxIssuerPathLength,*float64)

	// When true, the "CA" in Basic Constraints extension will be set to false.
	// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
	nonCa?: null | bool @go(NonCA,*bool)

	// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
	// If both max_issuer_path_length and zero_max_issuer_path_length are unset,
	// the max path length will be omitted from the CA certificate.
	zeroMaxIssuerPathLength?: null | bool @go(ZeroMaxIssuerPathLength,*bool)
}

#ConfigX509ConfigCAOptionsParameters: {
	// When true, the "CA" in Basic Constraints extension will be set to true.
	// +kubebuilder:validation:Optional
	isCa?: null | bool @go(IsCA,*bool)

	// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. Setting the value to 0
	// requires setting zero_max_issuer_path_length = true.
	// +kubebuilder:validation:Optional
	maxIssuerPathLength?: null | float64 @go(MaxIssuerPathLength,*float64)

	// When true, the "CA" in Basic Constraints extension will be set to false.
	// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
	// +kubebuilder:validation:Optional
	nonCa?: null | bool @go(NonCA,*bool)

	// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
	// If both max_issuer_path_length and zero_max_issuer_path_length are unset,
	// the max path length will be omitted from the CA certificate.
	// +kubebuilder:validation:Optional
	zeroMaxIssuerPathLength?: null | bool @go(ZeroMaxIssuerPathLength,*bool)
}

#ConfigX509ConfigInitParameters: {
	// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
	// Structure is documented below.
	additionalExtensions?: [...#ConfigX509ConfigAdditionalExtensionsInitParameters] @go(AdditionalExtensions,[]ConfigX509ConfigAdditionalExtensionsInitParameters)

	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	aiaOcspServers?: [...null | string] @go(AiaOcspServers,[]*string)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	caOptions?: [...#ConfigX509ConfigCAOptionsInitParameters] @go(CAOptions,[]ConfigX509ConfigCAOptionsInitParameters)

	// Indicates the intended use for keys that correspond to a certificate.
	// Structure is documented below.
	keyUsage?: [...#ConfigX509ConfigKeyUsageInitParameters] @go(KeyUsage,[]ConfigX509ConfigKeyUsageInitParameters)

	// Describes the X.509 name constraints extension.
	// Structure is documented below.
	nameConstraints?: [...#ConfigX509ConfigNameConstraintsInitParameters] @go(NameConstraints,[]ConfigX509ConfigNameConstraintsInitParameters)

	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// Structure is documented below.
	policyIds?: [...#ConfigX509ConfigPolicyIdsInitParameters] @go(PolicyIds,[]ConfigX509ConfigPolicyIdsInitParameters)
}

#ConfigX509ConfigKeyUsageBaseKeyUsageInitParameters: {
	// The key may be used to sign certificates.
	certSign?: null | bool @go(CertSign,*bool)

	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	contentCommitment?: null | bool @go(ContentCommitment,*bool)

	// The key may be used sign certificate revocation lists.
	crlSign?: null | bool @go(CrlSign,*bool)

	// The key may be used to encipher data.
	dataEncipherment?: null | bool @go(DataEncipherment,*bool)

	// The key may be used to decipher only.
	decipherOnly?: null | bool @go(DecipherOnly,*bool)

	// The key may be used for digital signatures.
	digitalSignature?: null | bool @go(DigitalSignature,*bool)

	// The key may be used to encipher only.
	encipherOnly?: null | bool @go(EncipherOnly,*bool)

	// The key may be used in a key agreement protocol.
	keyAgreement?: null | bool @go(KeyAgreement,*bool)

	// The key may be used to encipher other keys.
	keyEncipherment?: null | bool @go(KeyEncipherment,*bool)
}

#ConfigX509ConfigKeyUsageBaseKeyUsageObservation: {
	// The key may be used to sign certificates.
	certSign?: null | bool @go(CertSign,*bool)

	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	contentCommitment?: null | bool @go(ContentCommitment,*bool)

	// The key may be used sign certificate revocation lists.
	crlSign?: null | bool @go(CrlSign,*bool)

	// The key may be used to encipher data.
	dataEncipherment?: null | bool @go(DataEncipherment,*bool)

	// The key may be used to decipher only.
	decipherOnly?: null | bool @go(DecipherOnly,*bool)

	// The key may be used for digital signatures.
	digitalSignature?: null | bool @go(DigitalSignature,*bool)

	// The key may be used to encipher only.
	encipherOnly?: null | bool @go(EncipherOnly,*bool)

	// The key may be used in a key agreement protocol.
	keyAgreement?: null | bool @go(KeyAgreement,*bool)

	// The key may be used to encipher other keys.
	keyEncipherment?: null | bool @go(KeyEncipherment,*bool)
}

#ConfigX509ConfigKeyUsageBaseKeyUsageParameters: {
	// The key may be used to sign certificates.
	// +kubebuilder:validation:Optional
	certSign?: null | bool @go(CertSign,*bool)

	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	// +kubebuilder:validation:Optional
	contentCommitment?: null | bool @go(ContentCommitment,*bool)

	// The key may be used sign certificate revocation lists.
	// +kubebuilder:validation:Optional
	crlSign?: null | bool @go(CrlSign,*bool)

	// The key may be used to encipher data.
	// +kubebuilder:validation:Optional
	dataEncipherment?: null | bool @go(DataEncipherment,*bool)

	// The key may be used to decipher only.
	// +kubebuilder:validation:Optional
	decipherOnly?: null | bool @go(DecipherOnly,*bool)

	// The key may be used for digital signatures.
	// +kubebuilder:validation:Optional
	digitalSignature?: null | bool @go(DigitalSignature,*bool)

	// The key may be used to encipher only.
	// +kubebuilder:validation:Optional
	encipherOnly?: null | bool @go(EncipherOnly,*bool)

	// The key may be used in a key agreement protocol.
	// +kubebuilder:validation:Optional
	keyAgreement?: null | bool @go(KeyAgreement,*bool)

	// The key may be used to encipher other keys.
	// +kubebuilder:validation:Optional
	keyEncipherment?: null | bool @go(KeyEncipherment,*bool)
}

#ConfigX509ConfigKeyUsageExtendedKeyUsageInitParameters: {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	clientAuth?: null | bool @go(ClientAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	codeSigning?: null | bool @go(CodeSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	emailProtection?: null | bool @go(EmailProtection,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	ocspSigning?: null | bool @go(OcspSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	serverAuth?: null | bool @go(ServerAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	timeStamping?: null | bool @go(TimeStamping,*bool)
}

#ConfigX509ConfigKeyUsageExtendedKeyUsageObservation: {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	clientAuth?: null | bool @go(ClientAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	codeSigning?: null | bool @go(CodeSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	emailProtection?: null | bool @go(EmailProtection,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	ocspSigning?: null | bool @go(OcspSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	serverAuth?: null | bool @go(ServerAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	timeStamping?: null | bool @go(TimeStamping,*bool)
}

#ConfigX509ConfigKeyUsageExtendedKeyUsageParameters: {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	// +kubebuilder:validation:Optional
	clientAuth?: null | bool @go(ClientAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	// +kubebuilder:validation:Optional
	codeSigning?: null | bool @go(CodeSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	// +kubebuilder:validation:Optional
	emailProtection?: null | bool @go(EmailProtection,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	// +kubebuilder:validation:Optional
	ocspSigning?: null | bool @go(OcspSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	// +kubebuilder:validation:Optional
	serverAuth?: null | bool @go(ServerAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	// +kubebuilder:validation:Optional
	timeStamping?: null | bool @go(TimeStamping,*bool)
}

#ConfigX509ConfigKeyUsageInitParameters: {
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	baseKeyUsage?: [...#ConfigX509ConfigKeyUsageBaseKeyUsageInitParameters] @go(BaseKeyUsage,[]ConfigX509ConfigKeyUsageBaseKeyUsageInitParameters)

	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	extendedKeyUsage?: [...#ConfigX509ConfigKeyUsageExtendedKeyUsageInitParameters] @go(ExtendedKeyUsage,[]ConfigX509ConfigKeyUsageExtendedKeyUsageInitParameters)

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// Structure is documented below.
	unknownExtendedKeyUsages?: [...#ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesInitParameters] @go(UnknownExtendedKeyUsages,[]ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesInitParameters)
}

#ConfigX509ConfigKeyUsageObservation: {
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	baseKeyUsage?: [...#ConfigX509ConfigKeyUsageBaseKeyUsageObservation] @go(BaseKeyUsage,[]ConfigX509ConfigKeyUsageBaseKeyUsageObservation)

	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	extendedKeyUsage?: [...#ConfigX509ConfigKeyUsageExtendedKeyUsageObservation] @go(ExtendedKeyUsage,[]ConfigX509ConfigKeyUsageExtendedKeyUsageObservation)

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// Structure is documented below.
	unknownExtendedKeyUsages?: [...#ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesObservation] @go(UnknownExtendedKeyUsages,[]ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesObservation)
}

#ConfigX509ConfigKeyUsageParameters: {
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	baseKeyUsage?: [...#ConfigX509ConfigKeyUsageBaseKeyUsageParameters] @go(BaseKeyUsage,[]ConfigX509ConfigKeyUsageBaseKeyUsageParameters)

	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	extendedKeyUsage?: [...#ConfigX509ConfigKeyUsageExtendedKeyUsageParameters] @go(ExtendedKeyUsage,[]ConfigX509ConfigKeyUsageExtendedKeyUsageParameters)

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	unknownExtendedKeyUsages?: [...#ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesParameters] @go(UnknownExtendedKeyUsages,[]ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesParameters)
}

#ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesInitParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Optional
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#ConfigX509ConfigNameConstraintsInitParameters: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Contains excluded DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	excludedDnsNames?: [...null | string] @go(ExcludedDNSNames,[]*string)

	// Contains the excluded email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	excludedEmailAddresses?: [...null | string] @go(ExcludedEmailAddresses,[]*string)

	// Contains the excluded IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	excludedIpRanges?: [...null | string] @go(ExcludedIPRanges,[]*string)

	// Contains the excluded URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	excludedUris?: [...null | string] @go(ExcludedUris,[]*string)

	// Contains permitted DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	permittedDnsNames?: [...null | string] @go(PermittedDNSNames,[]*string)

	// Contains the permitted email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	permittedEmailAddresses?: [...null | string] @go(PermittedEmailAddresses,[]*string)

	// Contains the permitted IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	permittedIpRanges?: [...null | string] @go(PermittedIPRanges,[]*string)

	// Contains the permitted URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	permittedUris?: [...null | string] @go(PermittedUris,[]*string)
}

#ConfigX509ConfigNameConstraintsObservation: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Contains excluded DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	excludedDnsNames?: [...null | string] @go(ExcludedDNSNames,[]*string)

	// Contains the excluded email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	excludedEmailAddresses?: [...null | string] @go(ExcludedEmailAddresses,[]*string)

	// Contains the excluded IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	excludedIpRanges?: [...null | string] @go(ExcludedIPRanges,[]*string)

	// Contains the excluded URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	excludedUris?: [...null | string] @go(ExcludedUris,[]*string)

	// Contains permitted DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	permittedDnsNames?: [...null | string] @go(PermittedDNSNames,[]*string)

	// Contains the permitted email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	permittedEmailAddresses?: [...null | string] @go(PermittedEmailAddresses,[]*string)

	// Contains the permitted IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	permittedIpRanges?: [...null | string] @go(PermittedIPRanges,[]*string)

	// Contains the permitted URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	permittedUris?: [...null | string] @go(PermittedUris,[]*string)
}

#ConfigX509ConfigNameConstraintsParameters: {
	// Indicates whether or not the name constraints are marked critical.
	// +kubebuilder:validation:Optional
	critical?: null | bool @go(Critical,*bool)

	// Contains excluded DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	// +kubebuilder:validation:Optional
	excludedDnsNames?: [...null | string] @go(ExcludedDNSNames,[]*string)

	// Contains the excluded email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	// +kubebuilder:validation:Optional
	excludedEmailAddresses?: [...null | string] @go(ExcludedEmailAddresses,[]*string)

	// Contains the excluded IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	// +kubebuilder:validation:Optional
	excludedIpRanges?: [...null | string] @go(ExcludedIPRanges,[]*string)

	// Contains the excluded URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	// +kubebuilder:validation:Optional
	excludedUris?: [...null | string] @go(ExcludedUris,[]*string)

	// Contains permitted DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	// +kubebuilder:validation:Optional
	permittedDnsNames?: [...null | string] @go(PermittedDNSNames,[]*string)

	// Contains the permitted email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	// +kubebuilder:validation:Optional
	permittedEmailAddresses?: [...null | string] @go(PermittedEmailAddresses,[]*string)

	// Contains the permitted IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	// +kubebuilder:validation:Optional
	permittedIpRanges?: [...null | string] @go(PermittedIPRanges,[]*string)

	// Contains the permitted URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	// +kubebuilder:validation:Optional
	permittedUris?: [...null | string] @go(PermittedUris,[]*string)
}

#ConfigX509ConfigObservation: {
	// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
	// Structure is documented below.
	additionalExtensions?: [...#ConfigX509ConfigAdditionalExtensionsObservation] @go(AdditionalExtensions,[]ConfigX509ConfigAdditionalExtensionsObservation)

	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	aiaOcspServers?: [...null | string] @go(AiaOcspServers,[]*string)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	caOptions?: [...#ConfigX509ConfigCAOptionsObservation] @go(CAOptions,[]ConfigX509ConfigCAOptionsObservation)

	// Indicates the intended use for keys that correspond to a certificate.
	// Structure is documented below.
	keyUsage?: [...#ConfigX509ConfigKeyUsageObservation] @go(KeyUsage,[]ConfigX509ConfigKeyUsageObservation)

	// Describes the X.509 name constraints extension.
	// Structure is documented below.
	nameConstraints?: [...#ConfigX509ConfigNameConstraintsObservation] @go(NameConstraints,[]ConfigX509ConfigNameConstraintsObservation)

	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// Structure is documented below.
	policyIds?: [...#ConfigX509ConfigPolicyIdsObservation] @go(PolicyIds,[]ConfigX509ConfigPolicyIdsObservation)
}

#ConfigX509ConfigParameters: {
	// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	additionalExtensions?: [...#ConfigX509ConfigAdditionalExtensionsParameters] @go(AdditionalExtensions,[]ConfigX509ConfigAdditionalExtensionsParameters)

	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	// +kubebuilder:validation:Optional
	aiaOcspServers?: [...null | string] @go(AiaOcspServers,[]*string)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	caOptions?: [...#ConfigX509ConfigCAOptionsParameters] @go(CAOptions,[]ConfigX509ConfigCAOptionsParameters)

	// Indicates the intended use for keys that correspond to a certificate.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	keyUsage?: [...#ConfigX509ConfigKeyUsageParameters] @go(KeyUsage,[]ConfigX509ConfigKeyUsageParameters)

	// Describes the X.509 name constraints extension.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	nameConstraints?: [...#ConfigX509ConfigNameConstraintsParameters] @go(NameConstraints,[]ConfigX509ConfigNameConstraintsParameters)

	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	policyIds?: [...#ConfigX509ConfigPolicyIdsParameters] @go(PolicyIds,[]ConfigX509ConfigPolicyIdsParameters)
}

#ConfigX509ConfigPolicyIdsInitParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#ConfigX509ConfigPolicyIdsObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#ConfigX509ConfigPolicyIdsParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Optional
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#KeySpecInitParameters: {
	// The algorithm to use for creating a managed Cloud KMS key for a for a simplified
	// experience. All managed keys will be have their ProtectionLevel as HSM.
	// Possible values are: SIGN_HASH_ALGORITHM_UNSPECIFIED, RSA_PSS_2048_SHA256, RSA_PSS_3072_SHA256, RSA_PSS_4096_SHA256, RSA_PKCS1_2048_SHA256, RSA_PKCS1_3072_SHA256, RSA_PKCS1_4096_SHA256, EC_P256_SHA256, EC_P384_SHA384.
	algorithm?: null | string @go(Algorithm,*string)

	// The resource name for an existing Cloud KMS CryptoKeyVersion in the format
	// projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*.
	cloudKmsKeyVersion?: null | string @go(CloudKMSKeyVersion,*string)
}

#KeySpecObservation: {
	// The algorithm to use for creating a managed Cloud KMS key for a for a simplified
	// experience. All managed keys will be have their ProtectionLevel as HSM.
	// Possible values are: SIGN_HASH_ALGORITHM_UNSPECIFIED, RSA_PSS_2048_SHA256, RSA_PSS_3072_SHA256, RSA_PSS_4096_SHA256, RSA_PKCS1_2048_SHA256, RSA_PKCS1_3072_SHA256, RSA_PKCS1_4096_SHA256, EC_P256_SHA256, EC_P384_SHA384.
	algorithm?: null | string @go(Algorithm,*string)

	// The resource name for an existing Cloud KMS CryptoKeyVersion in the format
	// projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*.
	cloudKmsKeyVersion?: null | string @go(CloudKMSKeyVersion,*string)
}

#KeySpecParameters: {
	// The algorithm to use for creating a managed Cloud KMS key for a for a simplified
	// experience. All managed keys will be have their ProtectionLevel as HSM.
	// Possible values are: SIGN_HASH_ALGORITHM_UNSPECIFIED, RSA_PSS_2048_SHA256, RSA_PSS_3072_SHA256, RSA_PSS_4096_SHA256, RSA_PKCS1_2048_SHA256, RSA_PKCS1_3072_SHA256, RSA_PKCS1_4096_SHA256, EC_P256_SHA256, EC_P384_SHA384.
	// +kubebuilder:validation:Optional
	algorithm?: null | string @go(Algorithm,*string)

	// The resource name for an existing Cloud KMS CryptoKeyVersion in the format
	// projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*.
	// +kubebuilder:validation:Optional
	cloudKmsKeyVersion?: null | string @go(CloudKMSKeyVersion,*string)
}

#PemIssuerChainInitParameters: {
	// Expected to be in leaf-to-root order according to RFC 5246.
	pemCertificates?: [...null | string] @go(PemCertificates,[]*string)
}

#PemIssuerChainObservation: {
	// Expected to be in leaf-to-root order according to RFC 5246.
	pemCertificates?: [...null | string] @go(PemCertificates,[]*string)
}

#PemIssuerChainParameters: {
	// Expected to be in leaf-to-root order according to RFC 5246.
	// +kubebuilder:validation:Optional
	pemCertificates?: [...null | string] @go(PemCertificates,[]*string)
}

#SubordinateConfigInitParameters: {
	// Contains the PEM certificate chain for the issuers of this CertificateAuthority,
	// but not pem certificate for this CA itself.
	// Structure is documented below.
	pemIssuerChain?: [...#PemIssuerChainInitParameters] @go(PemIssuerChain,[]PemIssuerChainInitParameters)
}

#SubordinateConfigObservation: {
	// This can refer to a CertificateAuthority that was used to create a
	// subordinate CertificateAuthority. This field is used for information
	// and usability purposes only. The resource name is in the format
	// projects/*/locations/*/caPools/*/certificateAuthorities/*.
	certificateAuthority?: null | string @go(CertificateAuthority,*string)

	// Contains the PEM certificate chain for the issuers of this CertificateAuthority,
	// but not pem certificate for this CA itself.
	// Structure is documented below.
	pemIssuerChain?: [...#PemIssuerChainObservation] @go(PemIssuerChain,[]PemIssuerChainObservation)
}

#SubordinateConfigParameters: {
	// This can refer to a CertificateAuthority that was used to create a
	// subordinate CertificateAuthority. This field is used for information
	// and usability purposes only. The resource name is in the format
	// projects/*/locations/*/caPools/*/certificateAuthorities/*.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/privateca/v1beta1.CertificateAuthority
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",true)
	// +kubebuilder:validation:Optional
	certificateAuthority?: null | string @go(CertificateAuthority,*string)

	// Contains the PEM certificate chain for the issuers of this CertificateAuthority,
	// but not pem certificate for this CA itself.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	pemIssuerChain?: [...#PemIssuerChainParameters] @go(PemIssuerChain,[]PemIssuerChainParameters)
}

// CertificateAuthoritySpec defines the desired state of CertificateAuthority
#CertificateAuthoritySpec: {
	forProvider: #CertificateAuthorityParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CertificateAuthorityInitParameters @go(InitProvider)
}

// CertificateAuthorityStatus defines the observed state of CertificateAuthority.
#CertificateAuthorityStatus: {
	atProvider?: #CertificateAuthorityObservation @go(AtProvider)
}

// CertificateAuthority is the Schema for the CertificateAuthoritys API. A CertificateAuthority represents an individual Certificate Authority.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#CertificateAuthority: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.config) || has(self.initProvider.config)",message="config is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keySpec) || has(self.initProvider.keySpec)",message="keySpec is a required parameter"
	spec:    #CertificateAuthoritySpec   @go(Spec)
	status?: #CertificateAuthorityStatus @go(Status)
}

// CertificateAuthorityList contains a list of CertificateAuthoritys
#CertificateAuthorityList: {
	items: [...#CertificateAuthority] @go(Items,[]CertificateAuthority)
}
