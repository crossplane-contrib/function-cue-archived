// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/privateca/v1beta1

package v1beta1

#AdditionalExtensionsObjectIDInitParameters: {
}

#AdditionalExtensionsObjectIDObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#AdditionalExtensionsObjectIDParameters: {
}

#AuthorityKeyIDInitParameters: {
}

#AuthorityKeyIDObservation: {
	// (Output)
	// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
	keyId?: null | string @go(KeyID,*string)
}

#AuthorityKeyIDParameters: {
}

#CertFingerprintInitParameters: {
}

#CertFingerprintObservation: {
	// (Output)
	// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
	sha256Hash?: null | string @go(Sha256Hash,*string)
}

#CertFingerprintParameters: {
}

#CertificateDescriptionInitParameters: {
}

#CertificateDescriptionObservation: {
	// (Output)
	// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
	aiaIssuingCertificateUrls?: [...null | string] @go(AiaIssuingCertificateUrls,[]*string)

	// (Output)
	// Identifies the subjectKeyId of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
	// Structure is documented below.
	authorityKeyId?: [...#AuthorityKeyIDObservation] @go(AuthorityKeyID,[]AuthorityKeyIDObservation)

	// (Output)
	// The hash of the x.509 certificate.
	// Structure is documented below.
	certFingerprint?: [...#CertFingerprintObservation] @go(CertFingerprint,[]CertFingerprintObservation)

	// (Output, Deprecated)
	// Describes some of the technical fields in a certificate.
	// Structure is documented below.
	configValues?: [...#ConfigValuesObservation] @go(ConfigValues,[]ConfigValuesObservation)

	// (Output)
	// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
	crlDistributionPoints?: [...null | string] @go(CrlDistributionPoints,[]*string)

	// (Output)
	// A PublicKey describes a public key.
	// Structure is documented below.
	publicKey?: [...#PublicKeyObservation] @go(PublicKey,[]PublicKeyObservation)

	// (Output)
	// Describes some of the values in a certificate that are related to the subject and lifetime.
	// Structure is documented below.
	subjectDescription?: [...#SubjectDescriptionObservation] @go(SubjectDescription,[]SubjectDescriptionObservation)

	// (Output)
	// Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
	// Structure is documented below.
	subjectKeyId?: [...#SubjectKeyIDObservation] @go(SubjectKeyID,[]SubjectKeyIDObservation)

	// (Output)
	// A structured description of the issued X.509 certificate.
	// Structure is documented below.
	x509Description?: [...#X509DescriptionObservation] @go(X509Description,[]X509DescriptionObservation)
}

#CertificateDescriptionParameters: {
}

#CertificateInitParameters: {
	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	config?: [...#ConfigInitParameters] @go(Config,[]ConfigInitParameters)

	// Labels with user-defined metadata to apply to this resource.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	lifetime?: null | string @go(Lifetime,*string)

	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	pemCsr?: null | string @go(PemCsr,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)
}

#CertificateObservation: {
	// The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from
	// a Certificate Authority with resource name projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca,
	// argument pool should be set to projects/my-project/locations/us-central1/caPools/my-pool, argument certificate_authority
	// should be set to my-ca.
	certificateAuthority?: null | string @go(CertificateAuthority,*string)

	// Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if this field is present.
	// Structure is documented below.
	certificateDescription?: [...#CertificateDescriptionObservation] @go(CertificateDescription,[]CertificateDescriptionObservation)

	// The resource name for a CertificateTemplate used to issue this certificate,
	// in the format projects/*/locations/*/certificateTemplates/*. If this is specified,
	// the caller must have the necessary permission to use this template. If this is
	// omitted, no template will be used. This template must be in the same location
	// as the Certificate.
	certificateTemplate?: null | string @go(CertificateTemplate,*string)

	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	config?: [...#ConfigObservation] @go(Config,[]ConfigObservation)

	// The time that this resource was created on the server.
	// This is in RFC3339 text format.
	createTime?: null | string @go(CreateTime,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/caPools/{{pool}}/certificates/{{name}}
	id?: null | string @go(ID,*string)

	// The resource name of the issuing CertificateAuthority in the format projects/*/locations/*/caPools/*/certificateAuthorities/*.
	issuerCertificateAuthority?: null | string @go(IssuerCertificateAuthority,*string)

	// Labels with user-defined metadata to apply to this resource.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	lifetime?: null | string @go(Lifetime,*string)

	// Location of the Certificate. A full list of valid locations can be found by
	// running gcloud privateca locations list.
	location?: null | string @go(Location,*string)

	// Output only. The pem-encoded, signed X.509 certificate.
	pemCertificate?: null | string @go(PemCertificate,*string)

	// The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
	pemCertificateChain?: [...null | string] @go(PemCertificateChain,[]*string)

	// (Deprecated)
	// Required. Expected to be in leaf-to-root order according to RFC 5246.
	pemCertificates?: [...null | string] @go(PemCertificates,[]*string)

	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	pemCsr?: null | string @go(PemCsr,*string)

	// The name of the CaPool this Certificate belongs to.
	pool?: null | string @go(Pool,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Output only. Details regarding the revocation of this Certificate. This Certificate is
	// considered revoked if and only if this field is present.
	// Structure is documented below.
	revocationDetails?: [...#RevocationDetailsObservation] @go(RevocationDetails,[]RevocationDetailsObservation)

	// Output only. The time at which this CertificateAuthority was updated.
	// This is in RFC3339 text format.
	updateTime?: null | string @go(UpdateTime,*string)
}

#CertificateParameters: {
	// The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from
	// a Certificate Authority with resource name projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca,
	// argument pool should be set to projects/my-project/locations/us-central1/caPools/my-pool, argument certificate_authority
	// should be set to my-ca.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/privateca/v1beta1.CertificateAuthority
	// +kubebuilder:validation:Optional
	certificateAuthority?: null | string @go(CertificateAuthority,*string)

	// The resource name for a CertificateTemplate used to issue this certificate,
	// in the format projects/*/locations/*/certificateTemplates/*. If this is specified,
	// the caller must have the necessary permission to use this template. If this is
	// omitted, no template will be used. This template must be in the same location
	// as the Certificate.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/privateca/v1beta1.CertificateTemplate
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	certificateTemplate?: null | string @go(CertificateTemplate,*string)

	// The config used to create a self-signed X.509 certificate or CSR.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	config?: [...#ConfigParameters] @go(Config,[]ConfigParameters)

	// Labels with user-defined metadata to apply to this resource.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	lifetime?: null | string @go(Lifetime,*string)

	// Location of the Certificate. A full list of valid locations can be found by
	// running gcloud privateca locations list.
	// +kubebuilder:validation:Required
	location?: null | string @go(Location,*string)

	// Immutable. A pem-encoded X.509 certificate signing request (CSR).
	// +kubebuilder:validation:Optional
	pemCsr?: null | string @go(PemCsr,*string)

	// The name of the CaPool this Certificate belongs to.
	// +crossplane:generate:reference:type=CAPool
	// +kubebuilder:validation:Optional
	pool?: null | string @go(Pool,*string)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)
}

#ConfigInitParameters: {
	// A PublicKey describes a public key.
	// Structure is documented below.
	publicKey?: [...#ConfigPublicKeyInitParameters] @go(PublicKey,[]ConfigPublicKeyInitParameters)

	// Specifies some of the values in a certificate that are related to the subject.
	// Structure is documented below.
	subjectConfig?: [...#SubjectConfigInitParameters] @go(SubjectConfig,[]SubjectConfigInitParameters)

	// Describes how some of the technical X.509 fields in a certificate should be populated.
	// Structure is documented below.
	x509Config?: [...#X509ConfigInitParameters] @go(X509Config,[]X509ConfigInitParameters)
}

#ConfigObservation: {
	// A PublicKey describes a public key.
	// Structure is documented below.
	publicKey?: [...#ConfigPublicKeyObservation] @go(PublicKey,[]ConfigPublicKeyObservation)

	// Specifies some of the values in a certificate that are related to the subject.
	// Structure is documented below.
	subjectConfig?: [...#SubjectConfigObservation] @go(SubjectConfig,[]SubjectConfigObservation)

	// Describes how some of the technical X.509 fields in a certificate should be populated.
	// Structure is documented below.
	x509Config?: [...#X509ConfigObservation] @go(X509Config,[]X509ConfigObservation)
}

#ConfigParameters: {
	// A PublicKey describes a public key.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	publicKey: [...#ConfigPublicKeyParameters] @go(PublicKey,[]ConfigPublicKeyParameters)

	// Specifies some of the values in a certificate that are related to the subject.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	subjectConfig: [...#SubjectConfigParameters] @go(SubjectConfig,[]SubjectConfigParameters)

	// Describes how some of the technical X.509 fields in a certificate should be populated.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	x509Config: [...#X509ConfigParameters] @go(X509Config,[]X509ConfigParameters)
}

#ConfigPublicKeyInitParameters: {
	// The format of the public key. Currently, only PEM format is supported.
	// Possible values are: KEY_TYPE_UNSPECIFIED, PEM.
	format?: null | string @go(Format,*string)
}

#ConfigPublicKeyObservation: {
	// The format of the public key. Currently, only PEM format is supported.
	// Possible values are: KEY_TYPE_UNSPECIFIED, PEM.
	format?: null | string @go(Format,*string)
}

#ConfigPublicKeyParameters: {
	// The format of the public key. Currently, only PEM format is supported.
	// Possible values are: KEY_TYPE_UNSPECIFIED, PEM.
	// +kubebuilder:validation:Optional
	format?: null | string @go(Format,*string)
}

#ConfigValuesInitParameters: {
}

#ConfigValuesKeyUsageInitParameters: {
}

#ConfigValuesKeyUsageObservation: {
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	baseKeyUsage?: [...#KeyUsageBaseKeyUsageObservation] @go(BaseKeyUsage,[]KeyUsageBaseKeyUsageObservation)

	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	extendedKeyUsage?: [...#KeyUsageExtendedKeyUsageObservation] @go(ExtendedKeyUsage,[]KeyUsageExtendedKeyUsageObservation)

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// Structure is documented below.
	unknownExtendedKeyUsages?: [...#KeyUsageUnknownExtendedKeyUsagesObservation] @go(UnknownExtendedKeyUsages,[]KeyUsageUnknownExtendedKeyUsagesObservation)
}

#ConfigValuesKeyUsageParameters: {
}

#ConfigValuesObservation: {
	// (Output)
	// Indicates the intended use for keys that correspond to a certificate.
	// Structure is documented below.
	keyUsage?: [...#ConfigValuesKeyUsageObservation] @go(KeyUsage,[]ConfigValuesKeyUsageObservation)
}

#ConfigValuesParameters: {
}

#CustomSansInitParameters: {
}

#CustomSansObectIDInitParameters: {
}

#CustomSansObectIDObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#CustomSansObectIDParameters: {
}

#CustomSansObservation: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// (Output)
	// Required. Describes how some of the technical fields in a certificate should be populated.
	// Structure is documented below.
	obectId?: [...#CustomSansObectIDObservation] @go(ObectID,[]CustomSansObectIDObservation)

	// (Output)
	// The value of this X.509 extension.
	value?: null | string @go(Value,*string)
}

#CustomSansParameters: {
}

#KeyUsageBaseKeyUsageInitParameters: {
}

#KeyUsageBaseKeyUsageObservation: {
	// (Output)
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	keyUsageOptions?: [...#KeyUsageOptionsObservation] @go(KeyUsageOptions,[]KeyUsageOptionsObservation)
}

#KeyUsageBaseKeyUsageParameters: {
}

#KeyUsageExtendedKeyUsageInitParameters: {
}

#KeyUsageExtendedKeyUsageObservation: {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	clientAuth?: null | bool @go(ClientAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	codeSigning?: null | bool @go(CodeSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	emailProtection?: null | bool @go(EmailProtection,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	ocspSigning?: null | bool @go(OcspSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	serverAuth?: null | bool @go(ServerAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	timeStamping?: null | bool @go(TimeStamping,*bool)
}

#KeyUsageExtendedKeyUsageParameters: {
}

#KeyUsageOptionsInitParameters: {
}

#KeyUsageOptionsObservation: {
	// (Output)
	// The key may be used to sign certificates.
	certSign?: null | bool @go(CertSign,*bool)

	// (Output)
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	contentCommitment?: null | bool @go(ContentCommitment,*bool)

	// (Output)
	// The key may be used sign certificate revocation lists.
	crlSign?: null | bool @go(CrlSign,*bool)

	// (Output)
	// The key may be used to encipher data.
	dataEncipherment?: null | bool @go(DataEncipherment,*bool)

	// (Output)
	// The key may be used to decipher only.
	decipherOnly?: null | bool @go(DecipherOnly,*bool)

	// (Output)
	// The key may be used for digital signatures.
	digitalSignature?: null | bool @go(DigitalSignature,*bool)

	// (Output)
	// The key may be used to encipher only.
	encipherOnly?: null | bool @go(EncipherOnly,*bool)

	// (Output)
	// The key may be used in a key agreement protocol.
	keyAgreement?: null | bool @go(KeyAgreement,*bool)

	// (Output)
	// The key may be used to encipher other keys.
	keyEncipherment?: null | bool @go(KeyEncipherment,*bool)
}

#KeyUsageOptionsParameters: {
}

#KeyUsageUnknownExtendedKeyUsagesInitParameters: {
}

#KeyUsageUnknownExtendedKeyUsagesObservation: {
	// (Output)
	// Required. Describes how some of the technical fields in a certificate should be populated.
	// Structure is documented below.
	obectId?: [...#ObectIDObservation] @go(ObectID,[]ObectIDObservation)
}

#KeyUsageUnknownExtendedKeyUsagesParameters: {
}

#ObectIDInitParameters: {
}

#ObectIDObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#ObectIDParameters: {
}

#PublicKeyInitParameters: {
}

#PublicKeyObservation: {
	// The format of the public key. Currently, only PEM format is supported.
	// Possible values are: KEY_TYPE_UNSPECIFIED, PEM.
	format?: null | string @go(Format,*string)

	// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 SubjectPublicKeyInfo structure containing an algorithm identifier and a key. A base64-encoded string.
	key?: null | string @go(Key,*string)
}

#PublicKeyParameters: {
}

#RevocationDetailsInitParameters: {
}

#RevocationDetailsObservation: {
	// (Output)
	// Indicates why a Certificate was revoked.
	revocationState?: null | string @go(RevocationState,*string)

	// (Output)
	// The time at which this Certificate was revoked.
	revocationTime?: null | string @go(RevocationTime,*string)
}

#RevocationDetailsParameters: {
}

#SubjectAltNameInitParameters: {
}

#SubjectAltNameObservation: {
	// (Output)
	// Contains additional subject alternative name values.
	// Structure is documented below.
	customSans?: [...#CustomSansObservation] @go(CustomSans,[]CustomSansObservation)

	// Contains only valid, fully-qualified host names.
	dnsNames?: [...null | string] @go(DNSNames,[]*string)

	// Contains only valid RFC 2822 E-mail addresses.
	emailAddresses?: [...null | string] @go(EmailAddresses,[]*string)

	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	ipAddresses?: [...null | string] @go(IPAddresses,[]*string)

	// Contains only valid RFC 3986 URIs.
	uris?: [...null | string] @go(Uris,[]*string)
}

#SubjectAltNameParameters: {
}

#SubjectConfigInitParameters: {
	// (Output)
	// Contains distinguished name fields such as the location and organization.
	// Structure is documented below.
	subject?: [...#SubjectConfigSubjectInitParameters] @go(Subject,[]SubjectConfigSubjectInitParameters)

	// (Output)
	// The subject alternative name fields.
	// Structure is documented below.
	subjectAltName?: [...#SubjectConfigSubjectAltNameInitParameters] @go(SubjectAltName,[]SubjectConfigSubjectAltNameInitParameters)
}

#SubjectConfigObservation: {
	// (Output)
	// Contains distinguished name fields such as the location and organization.
	// Structure is documented below.
	subject?: [...#SubjectConfigSubjectObservation] @go(Subject,[]SubjectConfigSubjectObservation)

	// (Output)
	// The subject alternative name fields.
	// Structure is documented below.
	subjectAltName?: [...#SubjectConfigSubjectAltNameObservation] @go(SubjectAltName,[]SubjectConfigSubjectAltNameObservation)
}

#SubjectConfigParameters: {
	// (Output)
	// Contains distinguished name fields such as the location and organization.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	subject: [...#SubjectConfigSubjectParameters] @go(Subject,[]SubjectConfigSubjectParameters)

	// (Output)
	// The subject alternative name fields.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	subjectAltName?: [...#SubjectConfigSubjectAltNameParameters] @go(SubjectAltName,[]SubjectConfigSubjectAltNameParameters)
}

#SubjectConfigSubjectAltNameInitParameters: {
	// Contains only valid, fully-qualified host names.
	dnsNames?: [...null | string] @go(DNSNames,[]*string)

	// Contains only valid RFC 2822 E-mail addresses.
	emailAddresses?: [...null | string] @go(EmailAddresses,[]*string)

	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	ipAddresses?: [...null | string] @go(IPAddresses,[]*string)

	// Contains only valid RFC 3986 URIs.
	uris?: [...null | string] @go(Uris,[]*string)
}

#SubjectConfigSubjectAltNameObservation: {
	// Contains only valid, fully-qualified host names.
	dnsNames?: [...null | string] @go(DNSNames,[]*string)

	// Contains only valid RFC 2822 E-mail addresses.
	emailAddresses?: [...null | string] @go(EmailAddresses,[]*string)

	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	ipAddresses?: [...null | string] @go(IPAddresses,[]*string)

	// Contains only valid RFC 3986 URIs.
	uris?: [...null | string] @go(Uris,[]*string)
}

#SubjectConfigSubjectAltNameParameters: {
	// Contains only valid, fully-qualified host names.
	// +kubebuilder:validation:Optional
	dnsNames?: [...null | string] @go(DNSNames,[]*string)

	// Contains only valid RFC 2822 E-mail addresses.
	// +kubebuilder:validation:Optional
	emailAddresses?: [...null | string] @go(EmailAddresses,[]*string)

	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	// +kubebuilder:validation:Optional
	ipAddresses?: [...null | string] @go(IPAddresses,[]*string)

	// Contains only valid RFC 3986 URIs.
	// +kubebuilder:validation:Optional
	uris?: [...null | string] @go(Uris,[]*string)
}

#SubjectConfigSubjectInitParameters: {
	// The common name of the distinguished name.
	commonName?: null | string @go(CommonName,*string)

	// The country code of the subject.
	countryCode?: null | string @go(CountryCode,*string)

	// The locality or city of the subject.
	locality?: null | string @go(Locality,*string)

	// The organization of the subject.
	organization?: null | string @go(Organization,*string)

	// The organizational unit of the subject.
	organizationalUnit?: null | string @go(OrganizationalUnit,*string)

	// The postal code of the subject.
	postalCode?: null | string @go(PostalCode,*string)

	// The province, territory, or regional state of the subject.
	province?: null | string @go(Province,*string)

	// The street address of the subject.
	streetAddress?: null | string @go(StreetAddress,*string)
}

#SubjectConfigSubjectObservation: {
	// The common name of the distinguished name.
	commonName?: null | string @go(CommonName,*string)

	// The country code of the subject.
	countryCode?: null | string @go(CountryCode,*string)

	// The locality or city of the subject.
	locality?: null | string @go(Locality,*string)

	// The organization of the subject.
	organization?: null | string @go(Organization,*string)

	// The organizational unit of the subject.
	organizationalUnit?: null | string @go(OrganizationalUnit,*string)

	// The postal code of the subject.
	postalCode?: null | string @go(PostalCode,*string)

	// The province, territory, or regional state of the subject.
	province?: null | string @go(Province,*string)

	// The street address of the subject.
	streetAddress?: null | string @go(StreetAddress,*string)
}

#SubjectConfigSubjectParameters: {
	// The common name of the distinguished name.
	// +kubebuilder:validation:Optional
	commonName?: null | string @go(CommonName,*string)

	// The country code of the subject.
	// +kubebuilder:validation:Optional
	countryCode?: null | string @go(CountryCode,*string)

	// The locality or city of the subject.
	// +kubebuilder:validation:Optional
	locality?: null | string @go(Locality,*string)

	// The organization of the subject.
	// +kubebuilder:validation:Optional
	organization?: null | string @go(Organization,*string)

	// The organizational unit of the subject.
	// +kubebuilder:validation:Optional
	organizationalUnit?: null | string @go(OrganizationalUnit,*string)

	// The postal code of the subject.
	// +kubebuilder:validation:Optional
	postalCode?: null | string @go(PostalCode,*string)

	// The province, territory, or regional state of the subject.
	// +kubebuilder:validation:Optional
	province?: null | string @go(Province,*string)

	// The street address of the subject.
	// +kubebuilder:validation:Optional
	streetAddress?: null | string @go(StreetAddress,*string)
}

#SubjectDescriptionInitParameters: {
}

#SubjectDescriptionObservation: {
	// (Output)
	// The serial number encoded in lowercase hexadecimal.
	hexSerialNumber?: null | string @go(HexSerialNumber,*string)

	// (Output)
	// For convenience, the actual lifetime of an issued certificate. Corresponds to 'notAfterTime' - 'notBeforeTime'.
	lifetime?: null | string @go(Lifetime,*string)

	// (Output)
	// The time at which the certificate expires.
	notAfterTime?: null | string @go(NotAfterTime,*string)

	// (Output)
	// The time at which the certificate becomes valid.
	notBeforeTime?: null | string @go(NotBeforeTime,*string)

	// (Output)
	// Contains distinguished name fields such as the location and organization.
	// Structure is documented below.
	subject?: [...#SubjectObservation] @go(Subject,[]SubjectObservation)

	// (Output)
	// The subject alternative name fields.
	// Structure is documented below.
	subjectAltName?: [...#SubjectAltNameObservation] @go(SubjectAltName,[]SubjectAltNameObservation)
}

#SubjectDescriptionParameters: {
}

#SubjectInitParameters: {
}

#SubjectKeyIDInitParameters: {
}

#SubjectKeyIDObservation: {
	// (Output)
	// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
	keyId?: null | string @go(KeyID,*string)
}

#SubjectKeyIDParameters: {
}

#SubjectObservation: {
	// The common name of the distinguished name.
	commonName?: null | string @go(CommonName,*string)

	// The country code of the subject.
	countryCode?: null | string @go(CountryCode,*string)

	// The locality or city of the subject.
	locality?: null | string @go(Locality,*string)

	// The organization of the subject.
	organization?: null | string @go(Organization,*string)

	// The organizational unit of the subject.
	organizationalUnit?: null | string @go(OrganizationalUnit,*string)

	// The postal code of the subject.
	postalCode?: null | string @go(PostalCode,*string)

	// The province, territory, or regional state of the subject.
	province?: null | string @go(Province,*string)

	// The street address of the subject.
	streetAddress?: null | string @go(StreetAddress,*string)
}

#SubjectParameters: {
}

#X509ConfigAdditionalExtensionsInitParameters: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	objectId?: [...#X509ConfigAdditionalExtensionsObjectIDInitParameters] @go(ObjectID,[]X509ConfigAdditionalExtensionsObjectIDInitParameters)

	// (Output)
	// The value of this X.509 extension.
	value?: null | string @go(Value,*string)
}

#X509ConfigAdditionalExtensionsObjectIDInitParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#X509ConfigAdditionalExtensionsObjectIDObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#X509ConfigAdditionalExtensionsObjectIDParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Optional
	objectIdPath: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#X509ConfigAdditionalExtensionsObservation: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	objectId?: [...#X509ConfigAdditionalExtensionsObjectIDObservation] @go(ObjectID,[]X509ConfigAdditionalExtensionsObjectIDObservation)

	// (Output)
	// The value of this X.509 extension.
	value?: null | string @go(Value,*string)
}

#X509ConfigAdditionalExtensionsParameters: {
	// Indicates whether or not the name constraints are marked critical.
	// +kubebuilder:validation:Optional
	critical?: null | bool @go(Critical,*bool)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	objectId: [...#X509ConfigAdditionalExtensionsObjectIDParameters] @go(ObjectID,[]X509ConfigAdditionalExtensionsObjectIDParameters)

	// (Output)
	// The value of this X.509 extension.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#X509ConfigCAOptionsInitParameters: {
	// When true, the "CA" in Basic Constraints extension will be set to true.
	isCa?: null | bool @go(IsCA,*bool)

	// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
	maxIssuerPathLength?: null | float64 @go(MaxIssuerPathLength,*float64)

	// When true, the "CA" in Basic Constraints extension will be set to false.
	// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
	nonCa?: null | bool @go(NonCA,*bool)

	// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
	// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
	// the max path length will be omitted from the CA certificate.
	zeroMaxIssuerPathLength?: null | bool @go(ZeroMaxIssuerPathLength,*bool)
}

#X509ConfigCAOptionsObservation: {
	// When true, the "CA" in Basic Constraints extension will be set to true.
	isCa?: null | bool @go(IsCA,*bool)

	// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
	maxIssuerPathLength?: null | float64 @go(MaxIssuerPathLength,*float64)

	// When true, the "CA" in Basic Constraints extension will be set to false.
	// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
	nonCa?: null | bool @go(NonCA,*bool)

	// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
	// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
	// the max path length will be omitted from the CA certificate.
	zeroMaxIssuerPathLength?: null | bool @go(ZeroMaxIssuerPathLength,*bool)
}

#X509ConfigCAOptionsParameters: {
	// When true, the "CA" in Basic Constraints extension will be set to true.
	// +kubebuilder:validation:Optional
	isCa?: null | bool @go(IsCA,*bool)

	// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
	// +kubebuilder:validation:Optional
	maxIssuerPathLength?: null | float64 @go(MaxIssuerPathLength,*float64)

	// When true, the "CA" in Basic Constraints extension will be set to false.
	// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
	// +kubebuilder:validation:Optional
	nonCa?: null | bool @go(NonCA,*bool)

	// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
	// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
	// the max path length will be omitted from the CA certificate.
	// +kubebuilder:validation:Optional
	zeroMaxIssuerPathLength?: null | bool @go(ZeroMaxIssuerPathLength,*bool)
}

#X509ConfigInitParameters: {
	// (Output)
	// Describes custom X.509 extensions.
	// Structure is documented below.
	additionalExtensions?: [...#X509ConfigAdditionalExtensionsInitParameters] @go(AdditionalExtensions,[]X509ConfigAdditionalExtensionsInitParameters)

	// (Output)
	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	aiaOcspServers?: [...null | string] @go(AiaOcspServers,[]*string)

	// (Output)
	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	caOptions?: [...#X509ConfigCAOptionsInitParameters] @go(CAOptions,[]X509ConfigCAOptionsInitParameters)

	// (Output)
	// Indicates the intended use for keys that correspond to a certificate.
	// Structure is documented below.
	keyUsage?: [...#X509ConfigKeyUsageInitParameters] @go(KeyUsage,[]X509ConfigKeyUsageInitParameters)

	// (Output)
	// Describes the X.509 name constraints extension.
	// Structure is documented below.
	nameConstraints?: [...#X509ConfigNameConstraintsInitParameters] @go(NameConstraints,[]X509ConfigNameConstraintsInitParameters)

	// (Output)
	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// Structure is documented below.
	policyIds?: [...#X509ConfigPolicyIdsInitParameters] @go(PolicyIds,[]X509ConfigPolicyIdsInitParameters)
}

#X509ConfigKeyUsageBaseKeyUsageInitParameters: {
	// (Output)
	// The key may be used to sign certificates.
	certSign?: null | bool @go(CertSign,*bool)

	// (Output)
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	contentCommitment?: null | bool @go(ContentCommitment,*bool)

	// (Output)
	// The key may be used sign certificate revocation lists.
	crlSign?: null | bool @go(CrlSign,*bool)

	// (Output)
	// The key may be used to encipher data.
	dataEncipherment?: null | bool @go(DataEncipherment,*bool)

	// (Output)
	// The key may be used to decipher only.
	decipherOnly?: null | bool @go(DecipherOnly,*bool)

	// (Output)
	// The key may be used for digital signatures.
	digitalSignature?: null | bool @go(DigitalSignature,*bool)

	// (Output)
	// The key may be used to encipher only.
	encipherOnly?: null | bool @go(EncipherOnly,*bool)

	// (Output)
	// The key may be used in a key agreement protocol.
	keyAgreement?: null | bool @go(KeyAgreement,*bool)

	// (Output)
	// The key may be used to encipher other keys.
	keyEncipherment?: null | bool @go(KeyEncipherment,*bool)
}

#X509ConfigKeyUsageBaseKeyUsageObservation: {
	// (Output)
	// The key may be used to sign certificates.
	certSign?: null | bool @go(CertSign,*bool)

	// (Output)
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	contentCommitment?: null | bool @go(ContentCommitment,*bool)

	// (Output)
	// The key may be used sign certificate revocation lists.
	crlSign?: null | bool @go(CrlSign,*bool)

	// (Output)
	// The key may be used to encipher data.
	dataEncipherment?: null | bool @go(DataEncipherment,*bool)

	// (Output)
	// The key may be used to decipher only.
	decipherOnly?: null | bool @go(DecipherOnly,*bool)

	// (Output)
	// The key may be used for digital signatures.
	digitalSignature?: null | bool @go(DigitalSignature,*bool)

	// (Output)
	// The key may be used to encipher only.
	encipherOnly?: null | bool @go(EncipherOnly,*bool)

	// (Output)
	// The key may be used in a key agreement protocol.
	keyAgreement?: null | bool @go(KeyAgreement,*bool)

	// (Output)
	// The key may be used to encipher other keys.
	keyEncipherment?: null | bool @go(KeyEncipherment,*bool)
}

#X509ConfigKeyUsageBaseKeyUsageParameters: {
	// (Output)
	// The key may be used to sign certificates.
	// +kubebuilder:validation:Optional
	certSign?: null | bool @go(CertSign,*bool)

	// (Output)
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	// +kubebuilder:validation:Optional
	contentCommitment?: null | bool @go(ContentCommitment,*bool)

	// (Output)
	// The key may be used sign certificate revocation lists.
	// +kubebuilder:validation:Optional
	crlSign?: null | bool @go(CrlSign,*bool)

	// (Output)
	// The key may be used to encipher data.
	// +kubebuilder:validation:Optional
	dataEncipherment?: null | bool @go(DataEncipherment,*bool)

	// (Output)
	// The key may be used to decipher only.
	// +kubebuilder:validation:Optional
	decipherOnly?: null | bool @go(DecipherOnly,*bool)

	// (Output)
	// The key may be used for digital signatures.
	// +kubebuilder:validation:Optional
	digitalSignature?: null | bool @go(DigitalSignature,*bool)

	// (Output)
	// The key may be used to encipher only.
	// +kubebuilder:validation:Optional
	encipherOnly?: null | bool @go(EncipherOnly,*bool)

	// (Output)
	// The key may be used in a key agreement protocol.
	// +kubebuilder:validation:Optional
	keyAgreement?: null | bool @go(KeyAgreement,*bool)

	// (Output)
	// The key may be used to encipher other keys.
	// +kubebuilder:validation:Optional
	keyEncipherment?: null | bool @go(KeyEncipherment,*bool)
}

#X509ConfigKeyUsageExtendedKeyUsageInitParameters: {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	clientAuth?: null | bool @go(ClientAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	codeSigning?: null | bool @go(CodeSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	emailProtection?: null | bool @go(EmailProtection,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	ocspSigning?: null | bool @go(OcspSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	serverAuth?: null | bool @go(ServerAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	timeStamping?: null | bool @go(TimeStamping,*bool)
}

#X509ConfigKeyUsageExtendedKeyUsageObservation: {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	clientAuth?: null | bool @go(ClientAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	codeSigning?: null | bool @go(CodeSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	emailProtection?: null | bool @go(EmailProtection,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	ocspSigning?: null | bool @go(OcspSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	serverAuth?: null | bool @go(ServerAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	timeStamping?: null | bool @go(TimeStamping,*bool)
}

#X509ConfigKeyUsageExtendedKeyUsageParameters: {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	// +kubebuilder:validation:Optional
	clientAuth?: null | bool @go(ClientAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	// +kubebuilder:validation:Optional
	codeSigning?: null | bool @go(CodeSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	// +kubebuilder:validation:Optional
	emailProtection?: null | bool @go(EmailProtection,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	// +kubebuilder:validation:Optional
	ocspSigning?: null | bool @go(OcspSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	// +kubebuilder:validation:Optional
	serverAuth?: null | bool @go(ServerAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	// +kubebuilder:validation:Optional
	timeStamping?: null | bool @go(TimeStamping,*bool)
}

#X509ConfigKeyUsageInitParameters: {
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	baseKeyUsage?: [...#X509ConfigKeyUsageBaseKeyUsageInitParameters] @go(BaseKeyUsage,[]X509ConfigKeyUsageBaseKeyUsageInitParameters)

	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	extendedKeyUsage?: [...#X509ConfigKeyUsageExtendedKeyUsageInitParameters] @go(ExtendedKeyUsage,[]X509ConfigKeyUsageExtendedKeyUsageInitParameters)

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// Structure is documented below.
	unknownExtendedKeyUsages?: [...#X509ConfigKeyUsageUnknownExtendedKeyUsagesInitParameters] @go(UnknownExtendedKeyUsages,[]X509ConfigKeyUsageUnknownExtendedKeyUsagesInitParameters)
}

#X509ConfigKeyUsageObservation: {
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	baseKeyUsage?: [...#X509ConfigKeyUsageBaseKeyUsageObservation] @go(BaseKeyUsage,[]X509ConfigKeyUsageBaseKeyUsageObservation)

	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	extendedKeyUsage?: [...#X509ConfigKeyUsageExtendedKeyUsageObservation] @go(ExtendedKeyUsage,[]X509ConfigKeyUsageExtendedKeyUsageObservation)

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// Structure is documented below.
	unknownExtendedKeyUsages?: [...#X509ConfigKeyUsageUnknownExtendedKeyUsagesObservation] @go(UnknownExtendedKeyUsages,[]X509ConfigKeyUsageUnknownExtendedKeyUsagesObservation)
}

#X509ConfigKeyUsageParameters: {
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	baseKeyUsage: [...#X509ConfigKeyUsageBaseKeyUsageParameters] @go(BaseKeyUsage,[]X509ConfigKeyUsageBaseKeyUsageParameters)

	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	extendedKeyUsage: [...#X509ConfigKeyUsageExtendedKeyUsageParameters] @go(ExtendedKeyUsage,[]X509ConfigKeyUsageExtendedKeyUsageParameters)

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	unknownExtendedKeyUsages?: [...#X509ConfigKeyUsageUnknownExtendedKeyUsagesParameters] @go(UnknownExtendedKeyUsages,[]X509ConfigKeyUsageUnknownExtendedKeyUsagesParameters)
}

#X509ConfigKeyUsageUnknownExtendedKeyUsagesInitParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#X509ConfigKeyUsageUnknownExtendedKeyUsagesObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#X509ConfigKeyUsageUnknownExtendedKeyUsagesParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Optional
	objectIdPath: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#X509ConfigNameConstraintsInitParameters: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Contains excluded DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	excludedDnsNames?: [...null | string] @go(ExcludedDNSNames,[]*string)

	// Contains the excluded email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	excludedEmailAddresses?: [...null | string] @go(ExcludedEmailAddresses,[]*string)

	// Contains the excluded IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	excludedIpRanges?: [...null | string] @go(ExcludedIPRanges,[]*string)

	// Contains the excluded URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	excludedUris?: [...null | string] @go(ExcludedUris,[]*string)

	// Contains permitted DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	permittedDnsNames?: [...null | string] @go(PermittedDNSNames,[]*string)

	// Contains the permitted email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	permittedEmailAddresses?: [...null | string] @go(PermittedEmailAddresses,[]*string)

	// Contains the permitted IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	permittedIpRanges?: [...null | string] @go(PermittedIPRanges,[]*string)

	// Contains the permitted URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	permittedUris?: [...null | string] @go(PermittedUris,[]*string)
}

#X509ConfigNameConstraintsObservation: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Contains excluded DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	excludedDnsNames?: [...null | string] @go(ExcludedDNSNames,[]*string)

	// Contains the excluded email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	excludedEmailAddresses?: [...null | string] @go(ExcludedEmailAddresses,[]*string)

	// Contains the excluded IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	excludedIpRanges?: [...null | string] @go(ExcludedIPRanges,[]*string)

	// Contains the excluded URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	excludedUris?: [...null | string] @go(ExcludedUris,[]*string)

	// Contains permitted DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	permittedDnsNames?: [...null | string] @go(PermittedDNSNames,[]*string)

	// Contains the permitted email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	permittedEmailAddresses?: [...null | string] @go(PermittedEmailAddresses,[]*string)

	// Contains the permitted IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	permittedIpRanges?: [...null | string] @go(PermittedIPRanges,[]*string)

	// Contains the permitted URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	permittedUris?: [...null | string] @go(PermittedUris,[]*string)
}

#X509ConfigNameConstraintsParameters: {
	// Indicates whether or not the name constraints are marked critical.
	// +kubebuilder:validation:Optional
	critical?: null | bool @go(Critical,*bool)

	// Contains excluded DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	// +kubebuilder:validation:Optional
	excludedDnsNames?: [...null | string] @go(ExcludedDNSNames,[]*string)

	// Contains the excluded email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	// +kubebuilder:validation:Optional
	excludedEmailAddresses?: [...null | string] @go(ExcludedEmailAddresses,[]*string)

	// Contains the excluded IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	// +kubebuilder:validation:Optional
	excludedIpRanges?: [...null | string] @go(ExcludedIPRanges,[]*string)

	// Contains the excluded URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	// +kubebuilder:validation:Optional
	excludedUris?: [...null | string] @go(ExcludedUris,[]*string)

	// Contains permitted DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	// +kubebuilder:validation:Optional
	permittedDnsNames?: [...null | string] @go(PermittedDNSNames,[]*string)

	// Contains the permitted email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	// +kubebuilder:validation:Optional
	permittedEmailAddresses?: [...null | string] @go(PermittedEmailAddresses,[]*string)

	// Contains the permitted IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	// +kubebuilder:validation:Optional
	permittedIpRanges?: [...null | string] @go(PermittedIPRanges,[]*string)

	// Contains the permitted URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	// +kubebuilder:validation:Optional
	permittedUris?: [...null | string] @go(PermittedUris,[]*string)
}

#X509ConfigObservation: {
	// (Output)
	// Describes custom X.509 extensions.
	// Structure is documented below.
	additionalExtensions?: [...#X509ConfigAdditionalExtensionsObservation] @go(AdditionalExtensions,[]X509ConfigAdditionalExtensionsObservation)

	// (Output)
	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	aiaOcspServers?: [...null | string] @go(AiaOcspServers,[]*string)

	// (Output)
	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	caOptions?: [...#X509ConfigCAOptionsObservation] @go(CAOptions,[]X509ConfigCAOptionsObservation)

	// (Output)
	// Indicates the intended use for keys that correspond to a certificate.
	// Structure is documented below.
	keyUsage?: [...#X509ConfigKeyUsageObservation] @go(KeyUsage,[]X509ConfigKeyUsageObservation)

	// (Output)
	// Describes the X.509 name constraints extension.
	// Structure is documented below.
	nameConstraints?: [...#X509ConfigNameConstraintsObservation] @go(NameConstraints,[]X509ConfigNameConstraintsObservation)

	// (Output)
	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// Structure is documented below.
	policyIds?: [...#X509ConfigPolicyIdsObservation] @go(PolicyIds,[]X509ConfigPolicyIdsObservation)
}

#X509ConfigParameters: {
	// (Output)
	// Describes custom X.509 extensions.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	additionalExtensions?: [...#X509ConfigAdditionalExtensionsParameters] @go(AdditionalExtensions,[]X509ConfigAdditionalExtensionsParameters)

	// (Output)
	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	// +kubebuilder:validation:Optional
	aiaOcspServers?: [...null | string] @go(AiaOcspServers,[]*string)

	// (Output)
	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	caOptions?: [...#X509ConfigCAOptionsParameters] @go(CAOptions,[]X509ConfigCAOptionsParameters)

	// (Output)
	// Indicates the intended use for keys that correspond to a certificate.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	keyUsage: [...#X509ConfigKeyUsageParameters] @go(KeyUsage,[]X509ConfigKeyUsageParameters)

	// (Output)
	// Describes the X.509 name constraints extension.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	nameConstraints?: [...#X509ConfigNameConstraintsParameters] @go(NameConstraints,[]X509ConfigNameConstraintsParameters)

	// (Output)
	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	policyIds?: [...#X509ConfigPolicyIdsParameters] @go(PolicyIds,[]X509ConfigPolicyIdsParameters)
}

#X509ConfigPolicyIdsInitParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#X509ConfigPolicyIdsObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#X509ConfigPolicyIdsParameters: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Optional
	objectIdPath: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#X509DescriptionAdditionalExtensionsInitParameters: {
}

#X509DescriptionAdditionalExtensionsObservation: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	objectId?: [...#AdditionalExtensionsObjectIDObservation] @go(ObjectID,[]AdditionalExtensionsObjectIDObservation)

	// (Output)
	// The value of this X.509 extension.
	value?: null | string @go(Value,*string)
}

#X509DescriptionAdditionalExtensionsParameters: {
}

#X509DescriptionCAOptionsInitParameters: {
}

#X509DescriptionCAOptionsObservation: {
	// When true, the "CA" in Basic Constraints extension will be set to true.
	isCa?: null | bool @go(IsCA,*bool)

	// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
	maxIssuerPathLength?: null | float64 @go(MaxIssuerPathLength,*float64)
}

#X509DescriptionCAOptionsParameters: {
}

#X509DescriptionInitParameters: {
}

#X509DescriptionKeyUsageBaseKeyUsageInitParameters: {
}

#X509DescriptionKeyUsageBaseKeyUsageObservation: {
	// (Output)
	// The key may be used to sign certificates.
	certSign?: null | bool @go(CertSign,*bool)

	// (Output)
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	contentCommitment?: null | bool @go(ContentCommitment,*bool)

	// (Output)
	// The key may be used sign certificate revocation lists.
	crlSign?: null | bool @go(CrlSign,*bool)

	// (Output)
	// The key may be used to encipher data.
	dataEncipherment?: null | bool @go(DataEncipherment,*bool)

	// (Output)
	// The key may be used to decipher only.
	decipherOnly?: null | bool @go(DecipherOnly,*bool)

	// (Output)
	// The key may be used for digital signatures.
	digitalSignature?: null | bool @go(DigitalSignature,*bool)

	// (Output)
	// The key may be used to encipher only.
	encipherOnly?: null | bool @go(EncipherOnly,*bool)

	// (Output)
	// The key may be used in a key agreement protocol.
	keyAgreement?: null | bool @go(KeyAgreement,*bool)

	// (Output)
	// The key may be used to encipher other keys.
	keyEncipherment?: null | bool @go(KeyEncipherment,*bool)
}

#X509DescriptionKeyUsageBaseKeyUsageParameters: {
}

#X509DescriptionKeyUsageExtendedKeyUsageInitParameters: {
}

#X509DescriptionKeyUsageExtendedKeyUsageObservation: {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	clientAuth?: null | bool @go(ClientAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	codeSigning?: null | bool @go(CodeSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	emailProtection?: null | bool @go(EmailProtection,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	ocspSigning?: null | bool @go(OcspSigning,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	serverAuth?: null | bool @go(ServerAuth,*bool)

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	timeStamping?: null | bool @go(TimeStamping,*bool)
}

#X509DescriptionKeyUsageExtendedKeyUsageParameters: {
}

#X509DescriptionKeyUsageInitParameters: {
}

#X509DescriptionKeyUsageObservation: {
	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	baseKeyUsage?: [...#X509DescriptionKeyUsageBaseKeyUsageObservation] @go(BaseKeyUsage,[]X509DescriptionKeyUsageBaseKeyUsageObservation)

	// Describes high-level ways in which a key may be used.
	// Structure is documented below.
	extendedKeyUsage?: [...#X509DescriptionKeyUsageExtendedKeyUsageObservation] @go(ExtendedKeyUsage,[]X509DescriptionKeyUsageExtendedKeyUsageObservation)

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// Structure is documented below.
	unknownExtendedKeyUsages?: [...#X509DescriptionKeyUsageUnknownExtendedKeyUsagesObservation] @go(UnknownExtendedKeyUsages,[]X509DescriptionKeyUsageUnknownExtendedKeyUsagesObservation)
}

#X509DescriptionKeyUsageParameters: {
}

#X509DescriptionKeyUsageUnknownExtendedKeyUsagesInitParameters: {
}

#X509DescriptionKeyUsageUnknownExtendedKeyUsagesObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#X509DescriptionKeyUsageUnknownExtendedKeyUsagesParameters: {
}

#X509DescriptionNameConstraintsInitParameters: {
}

#X509DescriptionNameConstraintsObservation: {
	// Indicates whether or not the name constraints are marked critical.
	critical?: null | bool @go(Critical,*bool)

	// Contains excluded DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	excludedDnsNames?: [...null | string] @go(ExcludedDNSNames,[]*string)

	// Contains the excluded email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	excludedEmailAddresses?: [...null | string] @go(ExcludedEmailAddresses,[]*string)

	// Contains the excluded IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	excludedIpRanges?: [...null | string] @go(ExcludedIPRanges,[]*string)

	// Contains the excluded URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	excludedUris?: [...null | string] @go(ExcludedUris,[]*string)

	// Contains permitted DNS names. Any DNS name that can be
	// constructed by simply adding zero or more labels to
	// the left-hand side of the name satisfies the name constraint.
	// For example, example.com, www.example.com, www.sub.example.com
	// would satisfy example.com while example1.com does not.
	permittedDnsNames?: [...null | string] @go(PermittedDNSNames,[]*string)

	// Contains the permitted email addresses. The value can be a particular
	// email address, a hostname to indicate all email addresses on that host or
	// a domain with a leading period (e.g. .example.com) to indicate
	// all email addresses in that domain.
	permittedEmailAddresses?: [...null | string] @go(PermittedEmailAddresses,[]*string)

	// Contains the permitted IP ranges. For IPv4 addresses, the ranges
	// are expressed using CIDR notation as specified in RFC 4632.
	// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
	// addresses.
	permittedIpRanges?: [...null | string] @go(PermittedIPRanges,[]*string)

	// Contains the permitted URIs that apply to the host part of the name.
	// The value can be a hostname or a domain with a
	// leading period (like .example.com)
	permittedUris?: [...null | string] @go(PermittedUris,[]*string)
}

#X509DescriptionNameConstraintsParameters: {
}

#X509DescriptionObservation: {
	// (Output)
	// Describes custom X.509 extensions.
	// Structure is documented below.
	additionalExtensions?: [...#X509DescriptionAdditionalExtensionsObservation] @go(AdditionalExtensions,[]X509DescriptionAdditionalExtensionsObservation)

	// (Output)
	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	aiaOcspServers?: [...null | string] @go(AiaOcspServers,[]*string)

	// (Output)
	// Describes values that are relevant in a CA certificate.
	// Structure is documented below.
	caOptions?: [...#X509DescriptionCAOptionsObservation] @go(CAOptions,[]X509DescriptionCAOptionsObservation)

	// (Output)
	// Indicates the intended use for keys that correspond to a certificate.
	// Structure is documented below.
	keyUsage?: [...#X509DescriptionKeyUsageObservation] @go(KeyUsage,[]X509DescriptionKeyUsageObservation)

	// (Output)
	// Describes the X.509 name constraints extension.
	// Structure is documented below.
	nameConstraints?: [...#X509DescriptionNameConstraintsObservation] @go(NameConstraints,[]X509DescriptionNameConstraintsObservation)

	// (Output)
	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// Structure is documented below.
	policyIds?: [...#X509DescriptionPolicyIdsObservation] @go(PolicyIds,[]X509DescriptionPolicyIdsObservation)
}

#X509DescriptionParameters: {
}

#X509DescriptionPolicyIdsInitParameters: {
}

#X509DescriptionPolicyIdsObservation: {
	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	objectIdPath?: [...null | float64] @go(ObjectIDPath,[]*float64)
}

#X509DescriptionPolicyIdsParameters: {
}

// CertificateSpec defines the desired state of Certificate
#CertificateSpec: {
	forProvider: #CertificateParameters @go(ForProvider)

	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #CertificateInitParameters @go(InitProvider)
}

// CertificateStatus defines the observed state of Certificate.
#CertificateStatus: {
	atProvider?: #CertificateObservation @go(AtProvider)
}

// Certificate is the Schema for the Certificates API. A Certificate corresponds to a signed X.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Certificate: {
	spec:    #CertificateSpec   @go(Spec)
	status?: #CertificateStatus @go(Status)
}

// CertificateList contains a list of Certificates
#CertificateList: {
	items: [...#Certificate] @go(Items,[]Certificate)
}
