// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/firebaserules/v1beta1

package v1beta1

#ReleaseObservation: {
	// Output only. Time the release was created.
	createTime?: null | string @go(CreateTime,*string)

	// Disable the release to keep it from being served. The response code of NOT_FOUND will be given for executables generated from this Release.
	disabled?: null | bool @go(Disabled,*bool)

	// an identifier for the resource with format projects/{{project}}/releases/{{name}}
	id?: null | string @go(ID,*string)

	// The project for the resource
	project?: null | string @go(Project,*string)

	// Name of the Ruleset referred to by this Release. The Ruleset must exist for the Release to be created.
	rulesetName?: null | string @go(RulesetName,*string)

	// Output only. Time the release was updated.
	updateTime?: null | string @go(UpdateTime,*string)
}

#ReleaseParameters: {
	// The project for the resource
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// Name of the Ruleset referred to by this Release. The Ruleset must exist for the Release to be created.
	// +crossplane:generate:reference:type=Ruleset
	// +kubebuilder:validation:Optional
	rulesetName?: null | string @go(RulesetName,*string)
}

// ReleaseSpec defines the desired state of Release
#ReleaseSpec: {
	forProvider: #ReleaseParameters @go(ForProvider)
}

// ReleaseStatus defines the observed state of Release.
#ReleaseStatus: {
	atProvider?: #ReleaseObservation @go(AtProvider)
}

// Release is the Schema for the Releases API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Release: {
	spec:    #ReleaseSpec   @go(Spec)
	status?: #ReleaseStatus @go(Status)
}

// ReleaseList contains a list of Releases
#ReleaseList: {
	items: [...#Release] @go(Items,[]Release)
}
