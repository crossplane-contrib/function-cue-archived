// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-gcp/apis/datafusion/v1beta1

package v1beta1

#AcceleratorsInitParameters: {
	// The type of an accelator for a CDF instance.
	// Possible values are: CDC, HEALTHCARE, CCAI_INSIGHTS.
	acceleratorType?: null | string @go(AcceleratorType,*string)

	// The type of an accelator for a CDF instance.
	// Possible values are: ENABLED, DISABLED.
	state?: null | string @go(State,*string)
}

#AcceleratorsObservation: {
	// The type of an accelator for a CDF instance.
	// Possible values are: CDC, HEALTHCARE, CCAI_INSIGHTS.
	acceleratorType?: null | string @go(AcceleratorType,*string)

	// The type of an accelator for a CDF instance.
	// Possible values are: ENABLED, DISABLED.
	state?: null | string @go(State,*string)
}

#AcceleratorsParameters: {
	// The type of an accelator for a CDF instance.
	// Possible values are: CDC, HEALTHCARE, CCAI_INSIGHTS.
	// +kubebuilder:validation:Optional
	acceleratorType?: null | string @go(AcceleratorType,*string)

	// The type of an accelator for a CDF instance.
	// Possible values are: ENABLED, DISABLED.
	// +kubebuilder:validation:Optional
	state?: null | string @go(State,*string)
}

#CryptoKeyConfigInitParameters: {
}

#CryptoKeyConfigObservation: {
	// The name of the key which is used to encrypt/decrypt customer data. For key in Cloud KMS, the key should be in the format of projects//locations//keyRings//cryptoKeys/.
	keyReference?: null | string @go(KeyReference,*string)
}

#CryptoKeyConfigParameters: {
	// The name of the key which is used to encrypt/decrypt customer data. For key in Cloud KMS, the key should be in the format of projects//locations//keyRings//cryptoKeys/.
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/kms/v1beta1.CryptoKey
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	keyReference?: null | string @go(KeyReference,*string)
}

#EventPublishConfigInitParameters: {
	// Option to enable Event Publishing.
	enabled?: null | bool @go(Enabled,*bool)
}

#EventPublishConfigObservation: {
	// Option to enable Event Publishing.
	enabled?: null | bool @go(Enabled,*bool)

	// The resource name of the Pub/Sub topic. Format: projects/{projectId}/topics/{topic_id}
	topic?: null | string @go(Topic,*string)
}

#EventPublishConfigParameters: {
	// Option to enable Event Publishing.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// The resource name of the Pub/Sub topic. Format: projects/{projectId}/topics/{topic_id}
	// +crossplane:generate:reference:type=github.com/upbound/provider-gcp/apis/pubsub/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	topic?: null | string @go(Topic,*string)
}

#InstanceInitParameters: {
	// List of accelerators enabled for this CDF instance.
	// If accelerators are enabled it is possible a permadiff will be created with the Options field.
	// Users will need to either manually update their state file to include these diffed options, or include the field in a lifecycle ignore changes block.
	// Structure is documented below.
	accelerators?: [...#AcceleratorsInitParameters] @go(Accelerators,[]AcceleratorsInitParameters)

	// The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
	// Structure is documented below.
	cryptoKeyConfig?: [...#CryptoKeyConfigInitParameters] @go(CryptoKeyConfig,[]CryptoKeyConfigInitParameters)

	// User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines.
	dataprocServiceAccount?: null | string @go(DataprocServiceAccount,*string)

	// An optional description of the instance.
	description?: null | string @go(Description,*string)

	// Display name for an instance.
	displayName?: null | string @go(DisplayName,*string)

	// Option to enable granular role-based access control.
	enableRbac?: null | bool @go(EnableRbac,*bool)

	// Option to enable Stackdriver Logging.
	enableStackdriverLogging?: null | bool @go(EnableStackdriverLogging,*bool)

	// Option to enable Stackdriver Monitoring.
	enableStackdriverMonitoring?: null | bool @go(EnableStackdriverMonitoring,*bool)

	// Option to enable and pass metadata for event publishing.
	// Structure is documented below.
	eventPublishConfig?: [...#EventPublishConfigInitParameters] @go(EventPublishConfig,[]EventPublishConfigInitParameters)

	// The resource labels for instance to use to annotate any related underlying resources,
	// such as Compute Engine VMs.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Network configuration options. These are required when a private Data Fusion instance is to be created.
	// Structure is documented below.
	networkConfig?: [...#NetworkConfigInitParameters] @go(NetworkConfig,[]NetworkConfigInitParameters)

	// Map of additional options used to configure the behavior of Data Fusion instance.
	options?: {[string]: null | string} @go(Options,map[string]*string)

	// Specifies whether the Data Fusion instance should be private. If set to
	// true, all Data Fusion nodes will have private IP addresses and will not be
	// able to access the public internet.
	privateInstance?: null | bool @go(PrivateInstance,*bool)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// Represents the type of Data Fusion instance. Each type is configured with
	// the default settings for processing and memory.
	type?: null | string @go(Type,*string)

	// Current version of the Data Fusion.
	version?: null | string @go(Version,*string)

	// Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.
	zone?: null | string @go(Zone,*string)
}

#InstanceObservation: {
	// Endpoint on which the REST APIs is accessible.
	apiEndpoint?: null | string @go(APIEndpoint,*string)

	// List of accelerators enabled for this CDF instance.
	// If accelerators are enabled it is possible a permadiff will be created with the Options field.
	// Users will need to either manually update their state file to include these diffed options, or include the field in a lifecycle ignore changes block.
	// Structure is documented below.
	accelerators?: [...#AcceleratorsObservation] @go(Accelerators,[]AcceleratorsObservation)

	// The time the instance was created in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
	createTime?: null | string @go(CreateTime,*string)

	// The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
	// Structure is documented below.
	cryptoKeyConfig?: [...#CryptoKeyConfigObservation] @go(CryptoKeyConfig,[]CryptoKeyConfigObservation)

	// User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines.
	dataprocServiceAccount?: null | string @go(DataprocServiceAccount,*string)

	// An optional description of the instance.
	description?: null | string @go(Description,*string)

	// Display name for an instance.
	displayName?: null | string @go(DisplayName,*string)

	// Option to enable granular role-based access control.
	enableRbac?: null | bool @go(EnableRbac,*bool)

	// Option to enable Stackdriver Logging.
	enableStackdriverLogging?: null | bool @go(EnableStackdriverLogging,*bool)

	// Option to enable Stackdriver Monitoring.
	enableStackdriverMonitoring?: null | bool @go(EnableStackdriverMonitoring,*bool)

	// Option to enable and pass metadata for event publishing.
	// Structure is documented below.
	eventPublishConfig?: [...#EventPublishConfigObservation] @go(EventPublishConfig,[]EventPublishConfigObservation)

	// Cloud Storage bucket generated by Data Fusion in the customer project.
	gcsBucket?: null | string @go(GcsBucket,*string)

	// an identifier for the resource with format projects/{{project}}/locations/{{region}}/instances/{{name}}
	id?: null | string @go(ID,*string)

	// The resource labels for instance to use to annotate any related underlying resources,
	// such as Compute Engine VMs.
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Network configuration options. These are required when a private Data Fusion instance is to be created.
	// Structure is documented below.
	networkConfig?: [...#NetworkConfigObservation] @go(NetworkConfig,[]NetworkConfigObservation)

	// Map of additional options used to configure the behavior of Data Fusion instance.
	options?: {[string]: null | string} @go(Options,map[string]*string)

	// P4 service account for the customer project.
	p4ServiceAccount?: null | string @go(P4ServiceAccount,*string)

	// Specifies whether the Data Fusion instance should be private. If set to
	// true, all Data Fusion nodes will have private IP addresses and will not be
	// able to access the public internet.
	privateInstance?: null | bool @go(PrivateInstance,*bool)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	project?: null | string @go(Project,*string)

	// The region of the Data Fusion instance.
	region?: null | string @go(Region,*string)

	// Endpoint on which the Data Fusion UI and REST APIs are accessible.
	serviceEndpoint?: null | string @go(ServiceEndpoint,*string)

	// The current state of this Data Fusion instance.
	state?: null | string @go(State,*string)

	// Additional information about the current state of this Data Fusion instance if available.
	stateMessage?: null | string @go(StateMessage,*string)

	// The name of the tenant project.
	tenantProjectId?: null | string @go(TenantProjectID,*string)

	// Represents the type of Data Fusion instance. Each type is configured with
	// the default settings for processing and memory.
	type?: null | string @go(Type,*string)

	// The time the instance was last updated in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
	updateTime?: null | string @go(UpdateTime,*string)

	// Current version of the Data Fusion.
	version?: null | string @go(Version,*string)

	// Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.
	zone?: null | string @go(Zone,*string)
}

#InstanceParameters: {
	// List of accelerators enabled for this CDF instance.
	// If accelerators are enabled it is possible a permadiff will be created with the Options field.
	// Users will need to either manually update their state file to include these diffed options, or include the field in a lifecycle ignore changes block.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	accelerators?: [...#AcceleratorsParameters] @go(Accelerators,[]AcceleratorsParameters)

	// The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	cryptoKeyConfig?: [...#CryptoKeyConfigParameters] @go(CryptoKeyConfig,[]CryptoKeyConfigParameters)

	// User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines.
	// +kubebuilder:validation:Optional
	dataprocServiceAccount?: null | string @go(DataprocServiceAccount,*string)

	// An optional description of the instance.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Display name for an instance.
	// +kubebuilder:validation:Optional
	displayName?: null | string @go(DisplayName,*string)

	// Option to enable granular role-based access control.
	// +kubebuilder:validation:Optional
	enableRbac?: null | bool @go(EnableRbac,*bool)

	// Option to enable Stackdriver Logging.
	// +kubebuilder:validation:Optional
	enableStackdriverLogging?: null | bool @go(EnableStackdriverLogging,*bool)

	// Option to enable Stackdriver Monitoring.
	// +kubebuilder:validation:Optional
	enableStackdriverMonitoring?: null | bool @go(EnableStackdriverMonitoring,*bool)

	// Option to enable and pass metadata for event publishing.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	eventPublishConfig?: [...#EventPublishConfigParameters] @go(EventPublishConfig,[]EventPublishConfigParameters)

	// The resource labels for instance to use to annotate any related underlying resources,
	// such as Compute Engine VMs.
	// +kubebuilder:validation:Optional
	labels?: {[string]: null | string} @go(Labels,map[string]*string)

	// Network configuration options. These are required when a private Data Fusion instance is to be created.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	networkConfig?: [...#NetworkConfigParameters] @go(NetworkConfig,[]NetworkConfigParameters)

	// Map of additional options used to configure the behavior of Data Fusion instance.
	// +kubebuilder:validation:Optional
	options?: {[string]: null | string} @go(Options,map[string]*string)

	// Specifies whether the Data Fusion instance should be private. If set to
	// true, all Data Fusion nodes will have private IP addresses and will not be
	// able to access the public internet.
	// +kubebuilder:validation:Optional
	privateInstance?: null | bool @go(PrivateInstance,*bool)

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	project?: null | string @go(Project,*string)

	// The region of the Data Fusion instance.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// Represents the type of Data Fusion instance. Each type is configured with
	// the default settings for processing and memory.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// Current version of the Data Fusion.
	// +kubebuilder:validation:Optional
	version?: null | string @go(Version,*string)

	// Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.
	// +kubebuilder:validation:Optional
	zone?: null | string @go(Zone,*string)
}

#NetworkConfigInitParameters: {
	// The IP range in CIDR notation to use for the managed Data Fusion instance
	// nodes. This range must not overlap with any other ranges used in the Data Fusion instance network.
	ipAllocation?: null | string @go(IPAllocation,*string)

	// Name of the network in the project with which the tenant project
	// will be peered for executing pipelines. In case of shared VPC where the network resides in another host
	// project the network should specified in the form of projects/{host-project-id}/global/networks/{network}
	network?: null | string @go(Network,*string)
}

#NetworkConfigObservation: {
	// The IP range in CIDR notation to use for the managed Data Fusion instance
	// nodes. This range must not overlap with any other ranges used in the Data Fusion instance network.
	ipAllocation?: null | string @go(IPAllocation,*string)

	// Name of the network in the project with which the tenant project
	// will be peered for executing pipelines. In case of shared VPC where the network resides in another host
	// project the network should specified in the form of projects/{host-project-id}/global/networks/{network}
	network?: null | string @go(Network,*string)
}

#NetworkConfigParameters: {
	// The IP range in CIDR notation to use for the managed Data Fusion instance
	// nodes. This range must not overlap with any other ranges used in the Data Fusion instance network.
	// +kubebuilder:validation:Optional
	ipAllocation?: null | string @go(IPAllocation,*string)

	// Name of the network in the project with which the tenant project
	// will be peered for executing pipelines. In case of shared VPC where the network resides in another host
	// project the network should specified in the form of projects/{host-project-id}/global/networks/{network}
	// +kubebuilder:validation:Optional
	network?: null | string @go(Network,*string)
}

// InstanceSpec defines the desired state of Instance
#InstanceSpec: {
	forProvider: #InstanceParameters @go(ForProvider)

	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	initProvider?: #InstanceInitParameters @go(InitProvider)
}

// InstanceStatus defines the observed state of Instance.
#InstanceStatus: {
	atProvider?: #InstanceObservation @go(AtProvider)
}

// Instance is the Schema for the Instances API. Represents a Data Fusion instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
#Instance: {
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	spec:    #InstanceSpec   @go(Spec)
	status?: #InstanceStatus @go(Status)
}

// InstanceList contains a list of Instances
#InstanceList: {
	items: [...#Instance] @go(Items,[]Instance)
}
