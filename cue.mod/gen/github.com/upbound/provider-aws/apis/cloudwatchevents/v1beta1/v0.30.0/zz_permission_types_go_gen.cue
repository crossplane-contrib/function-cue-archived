// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudwatchevents/v1beta1

package v1beta1

#ConditionObservation: {
}

#ConditionParameters: {
	// Key for the condition. Valid values: aws:PrincipalOrgID.
	// +kubebuilder:validation:Required
	key?: null | string @go(Key,*string)

	// Type of condition. Value values: StringEquals.
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)

	// Value for the key.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/organizations/v1beta1.Organization
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#PermissionObservation: {
	// The statement ID of the EventBridge permission.
	id?: null | string @go(ID,*string)
}

#PermissionParameters: {
	// The action that you are enabling the other account to perform. Defaults to events:PutEvents.
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	// +kubebuilder:validation:Optional
	condition?: [...#ConditionParameters] @go(Condition,[]ConditionParameters)

	// The event bus to set the permissions on. If you omit this, the permissions are set on the default event bus.
	// +crossplane:generate:reference:type=Bus
	// +kubebuilder:validation:Optional
	eventBusName?: null | string @go(EventBusName,*string)

	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify * to permit any account to put events to your default event bus, optionally limited by condition.
	// +kubebuilder:validation:Required
	principal?: null | string @go(Principal,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// An identifier string for the external account that you are granting permissions to.
	// +kubebuilder:validation:Required
	statementId?: null | string @go(StatementID,*string)
}

// PermissionSpec defines the desired state of Permission
#PermissionSpec: {
	forProvider: #PermissionParameters @go(ForProvider)
}

// PermissionStatus defines the observed state of Permission.
#PermissionStatus: {
	atProvider?: #PermissionObservation @go(AtProvider)
}

// Permission is the Schema for the Permissions API. Provides a resource to create an EventBridge permission to support cross-account events in the current account default event bus.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Permission: {
	spec:    #PermissionSpec   @go(Spec)
	status?: #PermissionStatus @go(Status)
}

// PermissionList contains a list of Permissions
#PermissionList: {
	items: [...#Permission] @go(Items,[]Permission)
}
