// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/efs/v1beta1

package v1beta1

#DestinationObservation: {
	// The fs ID of the replica.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The status of the replication.
	status?: null | string @go(Status,*string)
}

#DestinationParameters: {
	// The availability zone in which the replica should be created. If specified, the replica will be created with One Zone storage. If omitted, regional storage will be used.
	// +kubebuilder:validation:Optional
	availabilityZoneName?: null | string @go(AvailabilityZoneName,*string)

	// The Key ID, ARN, alias, or alias ARN of the KMS key that should be used to encrypt the replica file system. If omitted, the default KMS key for EFS /aws/elasticfilesystem will be used.
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// The region in which the replica should be created.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)
}

#ReplicationConfigurationObservation: {
	// When the replication configuration was created.
	creationTime?: null | string @go(CreationTime,*string)

	// A destination configuration block (documented below).
	// +kubebuilder:validation:Required
	destination?: [...#DestinationObservation] @go(Destination,[]DestinationObservation)
	id?: null | string @go(ID,*string)

	// The Amazon Resource Name (ARN) of the original source Amazon EFS file system in the replication configuration.
	originalSourceFileSystemArn?: null | string @go(OriginalSourceFileSystemArn,*string)

	// The Amazon Resource Name (ARN) of the current source file system in the replication configuration.
	sourceFileSystemArn?: null | string @go(SourceFileSystemArn,*string)

	// The AWS Region in which the source Amazon EFS file system is located.
	sourceFileSystemRegion?: null | string @go(SourceFileSystemRegion,*string)
}

#ReplicationConfigurationParameters: {
	// A destination configuration block (documented below).
	// +kubebuilder:validation:Required
	destination: [...#DestinationParameters] @go(Destination,[]DestinationParameters)

	// The region in which the replica should be created.
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the file system that is to be replicated.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/efs/v1beta1.FileSystem
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	sourceFileSystemId?: null | string @go(SourceFileSystemID,*string)
}

// ReplicationConfigurationSpec defines the desired state of ReplicationConfiguration
#ReplicationConfigurationSpec: {
	forProvider: #ReplicationConfigurationParameters @go(ForProvider)
}

// ReplicationConfigurationStatus defines the observed state of ReplicationConfiguration.
#ReplicationConfigurationStatus: {
	atProvider?: #ReplicationConfigurationObservation @go(AtProvider)
}

// ReplicationConfiguration is the Schema for the ReplicationConfigurations API. Provides an Elastic File System (EFS) Replication Configuration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ReplicationConfiguration: {
	spec:    #ReplicationConfigurationSpec   @go(Spec)
	status?: #ReplicationConfigurationStatus @go(Status)
}

// ReplicationConfigurationList contains a list of ReplicationConfigurations
#ReplicationConfigurationList: {
	items: [...#ReplicationConfiguration] @go(Items,[]ReplicationConfiguration)
}
