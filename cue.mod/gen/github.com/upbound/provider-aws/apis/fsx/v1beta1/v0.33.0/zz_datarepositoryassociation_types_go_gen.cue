// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/fsx/v1beta1

package v1beta1

#AutoExportPolicyObservation: {
}

#AutoExportPolicyParameters: {
	// A list of file event types to automatically export to your linked S3 bucket or import from the linked S3 bucket. Valid values are NEW, CHANGED, DELETED. Max of 3.
	// +kubebuilder:validation:Optional
	events?: [...null | string] @go(Events,[]*string)
}

#AutoImportPolicyObservation: {
}

#AutoImportPolicyParameters: {
	// A list of file event types to automatically export to your linked S3 bucket or import from the linked S3 bucket. Valid values are NEW, CHANGED, DELETED. Max of 3.
	// +kubebuilder:validation:Optional
	events?: [...null | string] @go(Events,[]*string)
}

#DataRepositoryAssociationObservation: {
	// Amazon Resource Name of the file system.
	arn?: null | string @go(Arn,*string)

	// Identifier of the data repository association, e.g., dra-12345678
	associationId?: null | string @go(AssociationID,*string)

	// Identifier of the data repository association, e.g., dra-12345678
	id?: null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#DataRepositoryAssociationParameters: {
	// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to false.
	// +kubebuilder:validation:Optional
	batchImportMetaDataOnCreate?: null | bool @go(BatchImportMetaDataOnCreate,*bool)

	// The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
	// +kubebuilder:validation:Required
	dataRepositoryPath?: null | string @go(DataRepositoryPath,*string)

	// Set to true to delete files from the file system upon deleting this data repository association. Defaults to false.
	// +kubebuilder:validation:Optional
	deleteDataInFilesystem?: null | bool @go(DeleteDataInFilesystem,*bool)

	// The ID of the Amazon FSx file system to on which to create a data repository association.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/fsx/v1beta1.LustreFileSystem
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	fileSystemId?: null | string @go(FileSystemID,*string)

	// A path on the file system that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with data_repository_path. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path /ns1/, then you cannot link another data repository with file system path /ns1/ns2. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
	// +kubebuilder:validation:Required
	fileSystemPath?: null | string @go(FileSystemPath,*string)

	// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
	// +kubebuilder:validation:Optional
	importedFileChunkSize?: null | float64 @go(ImportedFileChunkSize,*float64)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// See the s3 configuration block. Max of 1.
	// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
	// +kubebuilder:validation:Optional
	s3?: [...#S3Parameters] @go(S3,[]S3Parameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#S3Observation: {
}

#S3Parameters: {
	// Specifies the type of updated objects that will be automatically exported from your file system to the linked S3 bucket. See the events configuration block.
	// +kubebuilder:validation:Optional
	autoExportPolicy?: [...#AutoExportPolicyParameters] @go(AutoExportPolicy,[]AutoExportPolicyParameters)

	// Specifies the type of updated objects that will be automatically imported from the linked S3 bucket to your file system. See the events configuration block.
	// +kubebuilder:validation:Optional
	autoImportPolicy?: [...#AutoImportPolicyParameters] @go(AutoImportPolicy,[]AutoImportPolicyParameters)
}

// DataRepositoryAssociationSpec defines the desired state of DataRepositoryAssociation
#DataRepositoryAssociationSpec: {
	forProvider: #DataRepositoryAssociationParameters @go(ForProvider)
}

// DataRepositoryAssociationStatus defines the observed state of DataRepositoryAssociation.
#DataRepositoryAssociationStatus: {
	atProvider?: #DataRepositoryAssociationObservation @go(AtProvider)
}

// DataRepositoryAssociation is the Schema for the DataRepositoryAssociations API. Manages a FSx for Lustre Data Repository Association.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DataRepositoryAssociation: {
	spec:    #DataRepositoryAssociationSpec   @go(Spec)
	status?: #DataRepositoryAssociationStatus @go(Status)
}

// DataRepositoryAssociationList contains a list of DataRepositoryAssociations
#DataRepositoryAssociationList: {
	items: [...#DataRepositoryAssociation] @go(Items,[]DataRepositoryAssociation)
}
