// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/fsx/v1beta1

package v1beta1

#AuditLogConfigurationObservation: {
}

#AuditLogConfigurationParameters: {
	// The Amazon Resource Name (ARN) for the destination of the audit logs. The destination can be any Amazon CloudWatch Logs log group ARN or Amazon Kinesis Data Firehose delivery stream ARN. Can be specified when file_access_audit_log_level and file_share_access_audit_log_level are not set to DISABLED. The name of the Amazon CloudWatch Logs log group must begin with the /aws/fsx prefix. The name of the Amazon Kinesis Data Firehouse delivery stream must begin with the aws-fsx prefix. If you do not provide a destination in audit_log_destionation, Amazon FSx will create and use a log stream in the CloudWatch Logs /aws/fsx/windows log group.
	// +kubebuilder:validation:Optional
	auditLogDestination?: null | string @go(AuditLogDestination,*string)

	// Sets which attempt type is logged by Amazon FSx for file and folder accesses. Valid values are SUCCESS_ONLY, FAILURE_ONLY, SUCCESS_AND_FAILURE, and DISABLED. Default value is DISABLED.
	// +kubebuilder:validation:Optional
	fileAccessAuditLogLevel?: null | string @go(FileAccessAuditLogLevel,*string)

	// Sets which attempt type is logged by Amazon FSx for file share accesses. Valid values are SUCCESS_ONLY, FAILURE_ONLY, SUCCESS_AND_FAILURE, and DISABLED. Default value is DISABLED.
	// +kubebuilder:validation:Optional
	fileShareAccessAuditLogLevel?: null | string @go(FileShareAccessAuditLogLevel,*string)
}

#SelfManagedActiveDirectoryObservation: {
}

#SelfManagedActiveDirectoryParameters: {
	// A list of up to two IP addresses of DNS servers or domain controllers in the self-managed AD directory. The IP addresses need to be either in the same VPC CIDR range as the file system or in the private IP version 4 (IPv4) address ranges as specified in RFC 1918.
	// +kubebuilder:validation:Required
	dnsIps: [...null | string] @go(DNSIps,[]*string)

	// The fully qualified domain name of the self-managed AD directory. For example, corp.example.com.
	// +kubebuilder:validation:Required
	domainName?: null | string @go(DomainName,*string)

	// The name of the domain group whose members are granted administrative privileges for the file system. Administrative privileges include taking ownership of files and folders, and setting audit controls (audit ACLs) on files and folders. The group that you specify must already exist in your domain. Defaults to Domain Admins.
	// +kubebuilder:validation:Optional
	fileSystemAdministratorsGroup?: null | string @go(FileSystemAdministratorsGroup,*string)

	// The fully qualified distinguished name of the organizational unit within your self-managed AD directory that the Windows File Server instance will join. For example, OU=FSx,DC=yourdomain,DC=corp,DC=com. Only accepts OU as the direct parent of the file system. If none is provided, the FSx file system is created in the default location of your self-managed AD directory. To learn more, see RFC 2253.
	// +kubebuilder:validation:Optional
	organizationalUnitDistinguishedName?: null | string @go(OrganizationalUnitDistinguishedName,*string)

	// The user name for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
	// +kubebuilder:validation:Required
	username?: null | string @go(Username,*string)
}

#WindowsFileSystemObservation: {
	// Amazon Resource Name of the file system.
	arn?: null | string @go(Arn,*string)

	// DNS name for the file system, e.g., fs-12345678.corp.example.com (domain name matching the Active Directory domain name)
	dnsName?: null | string @go(DNSName,*string)

	// Identifier of the file system, e.g., fs-12345678
	id?: null | string @go(ID,*string)

	// Set of Elastic Network Interface identifiers from which the file system is accessible.
	networkInterfaceIds?: [...null | string] @go(NetworkInterfaceIds,[]*string)

	// AWS account identifier that created the file system.
	ownerId?: null | string @go(OwnerID,*string)

	// The IP address of the primary, or preferred, file server.
	preferredFileServerIp?: null | string @go(PreferredFileServerIP,*string)

	// For MULTI_AZ_1 deployment types, use this endpoint when performing administrative tasks on the file system using Amazon FSx Remote PowerShell. For SINGLE_AZ_1 deployment types, this is the DNS name of the file system.
	remoteAdministrationEndpoint?: null | string @go(RemoteAdministrationEndpoint,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Identifier of the Virtual Private Cloud for the file system.
	vpcId?: null | string @go(VPCID,*string)
}

#WindowsFileSystemParameters: {
	// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with self_managed_active_directory.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ds/v1beta1.Directory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	activeDirectoryId?: null | string @go(ActiveDirectoryID,*string)

	// An array DNS alias names that you want to associate with the Amazon FSx file system.  For more information, see Working with DNS Aliases
	// +kubebuilder:validation:Optional
	aliases?: [...null | string] @go(Aliases,[]*string)

	// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system. See below.
	// +kubebuilder:validation:Optional
	auditLogConfiguration?: [...#AuditLogConfigurationParameters] @go(AuditLogConfiguration,[]AuditLogConfigurationParameters)

	// The number of days to retain automatic backups. Minimum of 0 and maximum of 90. Defaults to 7. Set to 0 to disable.
	// +kubebuilder:validation:Optional
	automaticBackupRetentionDays?: null | float64 @go(AutomaticBackupRetentionDays,*float64)

	// The ID of the source backup to create the filesystem from.
	// +kubebuilder:validation:Optional
	backupId?: null | string @go(BackupID,*string)

	// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to false.
	// +kubebuilder:validation:Optional
	copyTagsToBackups?: null | bool @go(CopyTagsToBackups,*bool)

	// The preferred time (in HH:MM format) to take daily automatic backups, in the UTC time zone.
	// +kubebuilder:validation:Optional
	dailyAutomaticBackupStartTime?: null | string @go(DailyAutomaticBackupStartTime,*string)

	// Specifies the file system deployment type, valid values are MULTI_AZ_1, SINGLE_AZ_1 and SINGLE_AZ_2. Default value is SINGLE_AZ_1.
	// +kubebuilder:validation:Optional
	deploymentType?: null | string @go(DeploymentType,*string)

	// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Specifies the subnet in which you want the preferred file server to be located. Required for when deployment type is MULTI_AZ_1.
	// +kubebuilder:validation:Optional
	preferredSubnetId?: null | string @go(PreferredSubnetID,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=SecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with active_directory_id. Detailed below.
	// +kubebuilder:validation:Optional
	selfManagedActiveDirectory?: [...#SelfManagedActiveDirectoryParameters] @go(SelfManagedActiveDirectory,[]SelfManagedActiveDirectoryParameters)

	// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to false.
	// +kubebuilder:validation:Optional
	skipFinalBackup?: null | bool @go(SkipFinalBackup,*bool)

	// Storage capacity (GiB) of the file system. Minimum of 32 and maximum of 65536. If the storage type is set to HDD the minimum value is 2000. Required when not creating filesystem for a backup.
	// +kubebuilder:validation:Optional
	storageCapacity?: null | float64 @go(StorageCapacity,*float64)

	// Specifies the storage type, Valid values are SSD and HDD. HDD is supported on SINGLE_AZ_2 and MULTI_AZ_1 Windows file system deployment types. Default value is SSD.
	// +kubebuilder:validation:Optional
	storageType?: null | string @go(StorageType,*string)

	// A list of IDs for the subnets that the file system will be accessible from. To specify more than a single subnet set deployment_type to MULTI_AZ_1.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:refFieldName=SubnetIDRefs
	// +crossplane:generate:reference:selectorFieldName=SubnetIDSelector
	// +kubebuilder:validation:Optional
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of 8 and maximum of 2048.
	// +kubebuilder:validation:Required
	throughputCapacity?: null | float64 @go(ThroughputCapacity,*float64)

	// The preferred start time (in d:HH:MM format) to perform weekly maintenance, in the UTC time zone.
	// +kubebuilder:validation:Optional
	weeklyMaintenanceStartTime?: null | string @go(WeeklyMaintenanceStartTime,*string)
}

// WindowsFileSystemSpec defines the desired state of WindowsFileSystem
#WindowsFileSystemSpec: {
	forProvider: #WindowsFileSystemParameters @go(ForProvider)
}

// WindowsFileSystemStatus defines the observed state of WindowsFileSystem.
#WindowsFileSystemStatus: {
	atProvider?: #WindowsFileSystemObservation @go(AtProvider)
}

// WindowsFileSystem is the Schema for the WindowsFileSystems API. Manages a FSx Windows File System.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#WindowsFileSystem: {
	spec:    #WindowsFileSystemSpec   @go(Spec)
	status?: #WindowsFileSystemStatus @go(Status)
}

// WindowsFileSystemList contains a list of WindowsFileSystems
#WindowsFileSystemList: {
	items: [...#WindowsFileSystem] @go(Items,[]WindowsFileSystem)
}
