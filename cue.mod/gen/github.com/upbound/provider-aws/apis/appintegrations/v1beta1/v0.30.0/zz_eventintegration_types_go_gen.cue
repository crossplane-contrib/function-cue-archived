// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appintegrations/v1beta1

package v1beta1

#EventFilterObservation: {
}

#EventFilterParameters: {
	// Source of the events.
	// +kubebuilder:validation:Required
	source?: null | string @go(Source,*string)
}

#EventIntegrationObservation: {
	// ARN of the Event Integration.
	arn?: null | string @go(Arn,*string)

	// Identifier of the Event Integration which is the name of the Event Integration.
	id?: null | string @go(ID,*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#EventIntegrationParameters: {
	// Description of the Event Integration.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Block that defines the configuration information for the event filter. The Event Filter block is documented below.
	// +kubebuilder:validation:Required
	eventFilter: [...#EventFilterParameters] @go(EventFilter,[]EventFilterParameters)

	// EventBridge bus.
	// +kubebuilder:validation:Required
	eventbridgeBus?: null | string @go(EventbridgeBus,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// EventIntegrationSpec defines the desired state of EventIntegration
#EventIntegrationSpec: {
	forProvider: #EventIntegrationParameters @go(ForProvider)
}

// EventIntegrationStatus defines the observed state of EventIntegration.
#EventIntegrationStatus: {
	atProvider?: #EventIntegrationObservation @go(AtProvider)
}

// EventIntegration is the Schema for the EventIntegrations API. Provides details about a specific Amazon AppIntegrations Event Integration
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#EventIntegration: {
	spec:    #EventIntegrationSpec   @go(Spec)
	status?: #EventIntegrationStatus @go(Status)
}

// EventIntegrationList contains a list of EventIntegrations
#EventIntegrationList: {
	items: [...#EventIntegration] @go(Items,[]EventIntegration)
}
