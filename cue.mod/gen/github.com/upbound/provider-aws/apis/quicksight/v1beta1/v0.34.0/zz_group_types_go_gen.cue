// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/quicksight/v1beta1

package v1beta1

#GroupObservation: {
	// Amazon Resource Name (ARN) of group
	arn?: null | string @go(Arn,*string)

	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	awsAccountId?: null | string @go(AwsAccountID,*string)

	// A description for the group.
	description?: null | string @go(Description,*string)

	// A name for the group.
	groupName?: null | string @go(GroupName,*string)
	id?:        null | string @go(ID,*string)

	// The namespace. Currently, you should set this to default.
	namespace?: null | string @go(Namespace,*string)
}

#GroupParameters: {
	// The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
	// +kubebuilder:validation:Optional
	awsAccountId?: null | string @go(AwsAccountID,*string)

	// A description for the group.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A name for the group.
	// +kubebuilder:validation:Optional
	groupName?: null | string @go(GroupName,*string)

	// The namespace. Currently, you should set this to default.
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// GroupSpec defines the desired state of Group
#GroupSpec: {
	forProvider: #GroupParameters @go(ForProvider)
}

// GroupStatus defines the observed state of Group.
#GroupStatus: {
	atProvider?: #GroupObservation @go(AtProvider)
}

// Group is the Schema for the Groups API. Manages a Resource QuickSight Group.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Group: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.groupName)",message="groupName is a required parameter"
	spec:    #GroupSpec   @go(Spec)
	status?: #GroupStatus @go(Status)
}

// GroupList contains a list of Groups
#GroupList: {
	items: [...#Group] @go(Items,[]Group)
}
