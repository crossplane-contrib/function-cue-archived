// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ses/v1beta1

package v1beta1

#ReceiptFilterObservation: {
	// The SES receipt filter ARN.
	arn?: null | string @go(Arn,*string)

	// The IP address or address range to filter, in CIDR notation
	cidr?: null | string @go(Cidr,*string)

	// The SES receipt filter name.
	id?: null | string @go(ID,*string)

	// Block or Allow
	policy?: null | string @go(Policy,*string)
}

#ReceiptFilterParameters: {
	// The IP address or address range to filter, in CIDR notation
	// +kubebuilder:validation:Optional
	cidr?: null | string @go(Cidr,*string)

	// Block or Allow
	// +kubebuilder:validation:Optional
	policy?: null | string @go(Policy,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// ReceiptFilterSpec defines the desired state of ReceiptFilter
#ReceiptFilterSpec: {
	forProvider: #ReceiptFilterParameters @go(ForProvider)
}

// ReceiptFilterStatus defines the observed state of ReceiptFilter.
#ReceiptFilterStatus: {
	atProvider?: #ReceiptFilterObservation @go(AtProvider)
}

// ReceiptFilter is the Schema for the ReceiptFilters API. Provides an SES receipt filter
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ReceiptFilter: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.cidr)",message="cidr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.policy)",message="policy is a required parameter"
	spec:    #ReceiptFilterSpec   @go(Spec)
	status?: #ReceiptFilterStatus @go(Status)
}

// ReceiptFilterList contains a list of ReceiptFilters
#ReceiptFilterList: {
	items: [...#ReceiptFilter] @go(Items,[]ReceiptFilter)
}
