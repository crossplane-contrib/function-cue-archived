// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ses/v1beta1

package v1beta1

#TemplateObservation: {
	// The ARN of the SES template
	arn?: null | string @go(Arn,*string)

	// The name of the SES template
	id?: null | string @go(ID,*string)
}

#TemplateParameters: {
	// The HTML body of the email. Must be less than 500KB in size, including both the text and HTML parts.
	// +kubebuilder:validation:Optional
	html?: null | string @go(HTML,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The subject line of the email.
	// +kubebuilder:validation:Optional
	subject?: null | string @go(Subject,*string)

	// The email body that will be visible to recipients whose email clients do not display HTML. Must be less than 500KB in size, including both the text and HTML parts.
	// +kubebuilder:validation:Optional
	text?: null | string @go(Text,*string)
}

// TemplateSpec defines the desired state of Template
#TemplateSpec: {
	forProvider: #TemplateParameters @go(ForProvider)
}

// TemplateStatus defines the observed state of Template.
#TemplateStatus: {
	atProvider?: #TemplateObservation @go(AtProvider)
}

// Template is the Schema for the Templates API. Provides a resource to create a SES template
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Template: {
	spec:    #TemplateSpec   @go(Spec)
	status?: #TemplateStatus @go(Status)
}

// TemplateList contains a list of Templates
#TemplateList: {
	items: [...#Template] @go(Items,[]Template)
}
