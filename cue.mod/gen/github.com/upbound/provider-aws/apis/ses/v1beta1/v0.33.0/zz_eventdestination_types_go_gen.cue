// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ses/v1beta1

package v1beta1

#CloudwatchDestinationObservation: {
}

#CloudwatchDestinationParameters: {
	// The default value for the event
	// +kubebuilder:validation:Required
	defaultValue?: null | string @go(DefaultValue,*string)

	// The name for the dimension
	// +kubebuilder:validation:Required
	dimensionName?: null | string @go(DimensionName,*string)

	// The source for the value. May be any of "messageTag", "emailHeader" or "linkTag".
	// +kubebuilder:validation:Required
	valueSource?: null | string @go(ValueSource,*string)
}

#EventDestinationObservation: {
	// The SES event destination ARN.
	arn?: null | string @go(Arn,*string)

	// The SES event destination name.
	id?: null | string @go(ID,*string)
}

#EventDestinationParameters: {
	// CloudWatch destination for the events
	// +kubebuilder:validation:Optional
	cloudwatchDestination?: [...#CloudwatchDestinationParameters] @go(CloudwatchDestination,[]CloudwatchDestinationParameters)

	// The name of the configuration set
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ses/v1beta1.ConfigurationSet
	// +kubebuilder:validation:Optional
	configurationSetName?: null | string @go(ConfigurationSetName,*string)

	// If true, the event destination will be enabled
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Send the events to a kinesis firehose destination
	// +kubebuilder:validation:Optional
	kinesisDestination?: [...#KinesisDestinationParameters] @go(KinesisDestination,[]KinesisDestinationParameters)

	// A list of matching types. May be any of "send", "reject", "bounce", "complaint", "delivery", "open", "click", or "renderingFailure".
	// +kubebuilder:validation:Required
	matchingTypes: [...null | string] @go(MatchingTypes,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Send the events to an SNS Topic destination
	// +kubebuilder:validation:Optional
	snsDestination?: [...#SnsDestinationParameters] @go(SnsDestination,[]SnsDestinationParameters)
}

#KinesisDestinationObservation: {
}

#KinesisDestinationParameters: {
	// The ARN of the role that has permissions to access the Kinesis Stream
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The ARN of the Kinesis Stream
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/firehose/v1beta1.DeliveryStream
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",false)
	// +kubebuilder:validation:Optional
	streamArn?: null | string @go(StreamArn,*string)
}

#SnsDestinationObservation: {
}

#SnsDestinationParameters: {
	// The ARN of the SNS topic
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	topicArn?: null | string @go(TopicArn,*string)
}

// EventDestinationSpec defines the desired state of EventDestination
#EventDestinationSpec: {
	forProvider: #EventDestinationParameters @go(ForProvider)
}

// EventDestinationStatus defines the observed state of EventDestination.
#EventDestinationStatus: {
	atProvider?: #EventDestinationObservation @go(AtProvider)
}

// EventDestination is the Schema for the EventDestinations API. Provides an SES event destination
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#EventDestination: {
	spec:    #EventDestinationSpec   @go(Spec)
	status?: #EventDestinationStatus @go(Status)
}

// EventDestinationList contains a list of EventDestinations
#EventDestinationList: {
	items: [...#EventDestination] @go(Items,[]EventDestination)
}
