// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/schemas/v1beta1

package v1beta1

#SchemaObservation: {
	// The Amazon Resource Name (ARN) of the discoverer.
	arn?: null | string @go(Arn,*string)

	// The schema specification. Must be a valid Open API 3.0 spec.
	content?: null | string @go(Content,*string)

	// The description of the schema. Maximum of 256 characters.
	description?: null | string @go(Description,*string)
	id?:          null | string @go(ID,*string)

	// The last modified date of the schema.
	lastModified?: null | string @go(LastModified,*string)

	// The name of the schema. Maximum of 385 characters consisting of lower case letters, upper case letters, ., -, _, @.
	name?: null | string @go(Name,*string)

	// The name of the registry in which this schema belongs.
	registryName?: null | string @go(RegistryName,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The type of the schema. Valid values: OpenApi3.
	type?: null | string @go(Type,*string)

	// The version of the schema.
	version?: null | string @go(Version,*string)

	// The created date of the version of the schema.
	versionCreatedDate?: null | string @go(VersionCreatedDate,*string)
}

#SchemaParameters: {
	// The schema specification. Must be a valid Open API 3.0 spec.
	// +kubebuilder:validation:Optional
	content?: null | string @go(Content,*string)

	// The description of the schema. Maximum of 256 characters.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The name of the schema. Maximum of 385 characters consisting of lower case letters, upper case letters, ., -, _, @.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The name of the registry in which this schema belongs.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/schemas/v1beta1.Registry
	// +kubebuilder:validation:Optional
	registryName?: null | string @go(RegistryName,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The type of the schema. Valid values: OpenApi3.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// SchemaSpec defines the desired state of Schema
#SchemaSpec: {
	forProvider: #SchemaParameters @go(ForProvider)
}

// SchemaStatus defines the observed state of Schema.
#SchemaStatus: {
	atProvider?: #SchemaObservation @go(AtProvider)
}

// Schema is the Schema for the Schemas API. Provides an EventBridge Schema resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Schema: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.content)",message="content is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	spec:    #SchemaSpec   @go(Spec)
	status?: #SchemaStatus @go(Status)
}

// SchemaList contains a list of Schemas
#SchemaList: {
	items: [...#Schema] @go(Items,[]Schema)
}
