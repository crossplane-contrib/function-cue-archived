// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

#ServiceSpecificCredentialObservation: {
	// The combination of service_name and user_name as such: service_name:user_name:service_specific_credential_id.
	id?: null | string @go(ID,*string)

	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
	serviceName?: null | string @go(ServiceName,*string)

	// The unique identifier for the service-specific credential.
	serviceSpecificCredentialId?: null | string @go(ServiceSpecificCredentialID,*string)

	// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in jane-at-123456789012, for example.
	serviceUserName?: null | string @go(ServiceUserName,*string)

	// The status to be assigned to the service-specific credential. Valid values are Active and Inactive. Default value is Active.
	status?: null | string @go(Status,*string)

	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	userName?: null | string @go(UserName,*string)
}

#ServiceSpecificCredentialParameters: {
	// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)

	// The status to be assigned to the service-specific credential. Valid values are Active and Inactive. Default value is Active.
	// +kubebuilder:validation:Optional
	status?: null | string @go(Status,*string)

	// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
	// +crossplane:generate:reference:type=User
	// +kubebuilder:validation:Optional
	userName?: null | string @go(UserName,*string)
}

// ServiceSpecificCredentialSpec defines the desired state of ServiceSpecificCredential
#ServiceSpecificCredentialSpec: {
	forProvider: #ServiceSpecificCredentialParameters @go(ForProvider)
}

// ServiceSpecificCredentialStatus defines the observed state of ServiceSpecificCredential.
#ServiceSpecificCredentialStatus: {
	atProvider?: #ServiceSpecificCredentialObservation @go(AtProvider)
}

// ServiceSpecificCredential is the Schema for the ServiceSpecificCredentials API. Provides an IAM Service Specific Credential.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ServiceSpecificCredential: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.serviceName)",message="serviceName is a required parameter"
	spec:    #ServiceSpecificCredentialSpec   @go(Spec)
	status?: #ServiceSpecificCredentialStatus @go(Status)
}

// ServiceSpecificCredentialList contains a list of ServiceSpecificCredentials
#ServiceSpecificCredentialList: {
	items: [...#ServiceSpecificCredential] @go(Items,[]ServiceSpecificCredential)
}
