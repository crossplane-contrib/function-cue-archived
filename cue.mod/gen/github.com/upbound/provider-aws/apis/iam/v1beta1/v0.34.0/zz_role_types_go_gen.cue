// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

#InlinePolicyObservation: {
	// Friendly name of the role. See IAM Identifiers for more information.
	name?: null | string @go(Name,*string)

	// Policy document as a JSON formatted string.
	policy?: null | string @go(Policy,*string)
}

#InlinePolicyParameters: {
}

#RoleObservation: {
	// Amazon Resource Name (ARN) specifying the role.
	arn?: null | string @go(Arn,*string)

	// Policy that grants an entity permission to assume the role.
	assumeRolePolicy?: null | string @go(AssumeRolePolicy,*string)

	// Creation date of the IAM role.
	createDate?: null | string @go(CreateDate,*string)

	// Description of the role.
	description?: null | string @go(Description,*string)

	// Whether to force detaching any policies the role has before destroying it. Defaults to false.
	forceDetachPolicies?: null | bool @go(ForceDetachPolicies,*bool)

	// Name of the role.
	id?: null | string @go(ID,*string)

	// Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. Configuring one empty block (i.e.
	inlinePolicy?: [...#InlinePolicyObservation] @go(InlinePolicy,[]InlinePolicyObservation)

	// Set of exclusive IAM managed policy ARNs to attach to the IAM role. Configuring an empty set (i.e.
	managedPolicyArns?: [...null | string] @go(ManagedPolicyArns,[]*string)

	// Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
	maxSessionDuration?: null | float64 @go(MaxSessionDuration,*float64)

	// Path to the role. See IAM Identifiers for more information.
	path?: null | string @go(Path,*string)

	// ARN of the policy that is used to set the permissions boundary for the role.
	permissionsBoundary?: null | string @go(PermissionsBoundary,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Stable and unique string identifying the role.
	uniqueId?: null | string @go(UniqueID,*string)
}

#RoleParameters: {
	// Policy that grants an entity permission to assume the role.
	// +kubebuilder:validation:Optional
	assumeRolePolicy?: null | string @go(AssumeRolePolicy,*string)

	// Description of the role.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Whether to force detaching any policies the role has before destroying it. Defaults to false.
	// +kubebuilder:validation:Optional
	forceDetachPolicies?: null | bool @go(ForceDetachPolicies,*bool)

	// Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
	// +kubebuilder:validation:Optional
	maxSessionDuration?: null | float64 @go(MaxSessionDuration,*float64)

	// Path to the role. See IAM Identifiers for more information.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// ARN of the policy that is used to set the permissions boundary for the role.
	// +kubebuilder:validation:Optional
	permissionsBoundary?: null | string @go(PermissionsBoundary,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// RoleSpec defines the desired state of Role
#RoleSpec: {
	forProvider: #RoleParameters @go(ForProvider)
}

// RoleStatus defines the observed state of Role.
#RoleStatus: {
	atProvider?: #RoleObservation @go(AtProvider)
}

// Role is the Schema for the Roles API. Provides an IAM role.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Role: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.assumeRolePolicy)",message="assumeRolePolicy is a required parameter"
	spec:    #RoleSpec   @go(Spec)
	status?: #RoleStatus @go(Status)
}

// RoleList contains a list of Roles
#RoleList: {
	items: [...#Role] @go(Items,[]Role)
}
