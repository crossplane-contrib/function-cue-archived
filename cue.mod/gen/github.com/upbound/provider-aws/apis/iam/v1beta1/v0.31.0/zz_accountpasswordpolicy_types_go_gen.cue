// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

#AccountPasswordPolicyObservation: {
	// Indicates whether passwords in the account expire. Returns true if max_password_age contains a value greater than 0. Returns false if it is 0 or not present.
	expirePasswords?: null | bool   @go(ExpirePasswords,*bool)
	id?:              null | string @go(ID,*string)
}

#AccountPasswordPolicyParameters: {
	// Whether to allow users to change their own password
	// +kubebuilder:validation:Optional
	allowUsersToChangePassword?: null | bool @go(AllowUsersToChangePassword,*bool)

	// Whether users are prevented from setting a new password after their password has expired (i.e., require administrator reset)
	// +kubebuilder:validation:Optional
	hardExpiry?: null | bool @go(HardExpiry,*bool)

	// The number of days that an user password is valid.
	// +kubebuilder:validation:Optional
	maxPasswordAge?: null | float64 @go(MaxPasswordAge,*float64)

	// Minimum length to require for user passwords.
	// +kubebuilder:validation:Optional
	minimumPasswordLength?: null | float64 @go(MinimumPasswordLength,*float64)

	// The number of previous passwords that users are prevented from reusing.
	// +kubebuilder:validation:Optional
	passwordReusePrevention?: null | float64 @go(PasswordReusePrevention,*float64)

	// Whether to require lowercase characters for user passwords.
	// +kubebuilder:validation:Optional
	requireLowercaseCharacters?: null | bool @go(RequireLowercaseCharacters,*bool)

	// Whether to require numbers for user passwords.
	// +kubebuilder:validation:Optional
	requireNumbers?: null | bool @go(RequireNumbers,*bool)

	// Whether to require symbols for user passwords.
	// +kubebuilder:validation:Optional
	requireSymbols?: null | bool @go(RequireSymbols,*bool)

	// Whether to require uppercase characters for user passwords.
	// +kubebuilder:validation:Optional
	requireUppercaseCharacters?: null | bool @go(RequireUppercaseCharacters,*bool)
}

// AccountPasswordPolicySpec defines the desired state of AccountPasswordPolicy
#AccountPasswordPolicySpec: {
	forProvider: #AccountPasswordPolicyParameters @go(ForProvider)
}

// AccountPasswordPolicyStatus defines the observed state of AccountPasswordPolicy.
#AccountPasswordPolicyStatus: {
	atProvider?: #AccountPasswordPolicyObservation @go(AtProvider)
}

// AccountPasswordPolicy is the Schema for the AccountPasswordPolicys API. Manages Password Policy for the AWS Account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#AccountPasswordPolicy: {
	spec:    #AccountPasswordPolicySpec   @go(Spec)
	status?: #AccountPasswordPolicyStatus @go(Status)
}

// AccountPasswordPolicyList contains a list of AccountPasswordPolicys
#AccountPasswordPolicyList: {
	items: [...#AccountPasswordPolicy] @go(Items,[]AccountPasswordPolicy)
}
