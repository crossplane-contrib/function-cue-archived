// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

#SigningCertificateObservation: {
	// encoded format.
	certificateBody?: null | string @go(CertificateBody,*string)

	// The ID for the signing certificate.
	certificateId?: null | string @go(CertificateID,*string)

	// The certificate_id:user_name
	id?: null | string @go(ID,*string)

	// –   The status you want to assign to the certificate. Active means that the certificate can be used for programmatic calls to Amazon Web Services Inactive means that the certificate cannot be used.
	status?: null | string @go(Status,*string)

	// –  The name of the user the signing certificate is for.
	userName?: null | string @go(UserName,*string)
}

#SigningCertificateParameters: {
	// encoded format.
	// +kubebuilder:validation:Optional
	certificateBody?: null | string @go(CertificateBody,*string)

	// –   The status you want to assign to the certificate. Active means that the certificate can be used for programmatic calls to Amazon Web Services Inactive means that the certificate cannot be used.
	// +kubebuilder:validation:Optional
	status?: null | string @go(Status,*string)

	// –  The name of the user the signing certificate is for.
	// +kubebuilder:validation:Optional
	userName?: null | string @go(UserName,*string)
}

// SigningCertificateSpec defines the desired state of SigningCertificate
#SigningCertificateSpec: {
	forProvider: #SigningCertificateParameters @go(ForProvider)
}

// SigningCertificateStatus defines the observed state of SigningCertificate.
#SigningCertificateStatus: {
	atProvider?: #SigningCertificateObservation @go(AtProvider)
}

// SigningCertificate is the Schema for the SigningCertificates API. Provides an IAM Signing Certificate
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SigningCertificate: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.certificateBody)",message="certificateBody is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.userName)",message="userName is a required parameter"
	spec:    #SigningCertificateSpec   @go(Spec)
	status?: #SigningCertificateStatus @go(Status)
}

// SigningCertificateList contains a list of SigningCertificates
#SigningCertificateList: {
	items: [...#SigningCertificate] @go(Items,[]SigningCertificate)
}
