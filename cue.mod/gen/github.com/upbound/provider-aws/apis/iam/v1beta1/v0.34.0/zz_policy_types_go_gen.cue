// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

#PolicyObservation: {
	// The ARN assigned by AWS to this policy.
	arn?: null | string @go(Arn,*string)

	// Description of the IAM policy.
	description?: null | string @go(Description,*string)

	// The ARN assigned by AWS to this policy.
	id?: null | string @go(ID,*string)

	// Path in which to create the policy.
	// See IAM Identifiers for more information.
	path?: null | string @go(Path,*string)

	// The policy document. This is a JSON formatted string
	policy?: null | string @go(Policy,*string)

	// The policy's ID.
	policyId?: null | string @go(PolicyID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#PolicyParameters: {
	// Description of the IAM policy.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Path in which to create the policy.
	// See IAM Identifiers for more information.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The policy document. This is a JSON formatted string
	// +kubebuilder:validation:Optional
	policy?: null | string @go(Policy,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// PolicySpec defines the desired state of Policy
#PolicySpec: {
	forProvider: #PolicyParameters @go(ForProvider)
}

// PolicyStatus defines the observed state of Policy.
#PolicyStatus: {
	atProvider?: #PolicyObservation @go(AtProvider)
}

// Policy is the Schema for the Policys API. Provides an IAM policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Policy: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.policy)",message="policy is a required parameter"
	spec:    #PolicySpec   @go(Spec)
	status?: #PolicyStatus @go(Status)
}

// PolicyList contains a list of Policys
#PolicyList: {
	items: [...#Policy] @go(Items,[]Policy)
}
