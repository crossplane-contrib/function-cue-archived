// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

#UserLoginProfileObservation: {
	// The encrypted password, base64 encoded.
	encryptedPassword?: null | string @go(EncryptedPassword,*string)
	id?:                null | string @go(ID,*string)

	// The fingerprint of the PGP key used to encrypt the password.
	keyFingerprint?: null | string @go(KeyFingerprint,*string)

	// The plain text password, only available when pgp_key is not provided.
	password?: null | string @go(Password,*string)

	// The length of the generated password on resource creation. Only applies on resource creation. Drift detection is not possible with this argument. Default value is 20.
	passwordLength?: null | float64 @go(PasswordLength,*float64)

	// Whether the user should be forced to reset the generated password on resource creation. Only applies on resource creation.
	passwordResetRequired?: null | bool @go(PasswordResetRequired,*bool)

	// Either a base-64 encoded PGP public key, or a keybase username in the form keybase:username. Only applies on resource creation. Drift detection is not possible with this argument.
	pgpKey?: null | string @go(PgpKey,*string)

	// The IAM user's name.
	user?: null | string @go(User,*string)
}

#UserLoginProfileParameters: {
	// The length of the generated password on resource creation. Only applies on resource creation. Drift detection is not possible with this argument. Default value is 20.
	// +kubebuilder:validation:Optional
	passwordLength?: null | float64 @go(PasswordLength,*float64)

	// Whether the user should be forced to reset the generated password on resource creation. Only applies on resource creation.
	// +kubebuilder:validation:Optional
	passwordResetRequired?: null | bool @go(PasswordResetRequired,*bool)

	// Either a base-64 encoded PGP public key, or a keybase username in the form keybase:username. Only applies on resource creation. Drift detection is not possible with this argument.
	// +kubebuilder:validation:Optional
	pgpKey?: null | string @go(PgpKey,*string)

	// The IAM user's name.
	// +crossplane:generate:reference:type=User
	// +kubebuilder:validation:Optional
	user?: null | string @go(User,*string)
}

// UserLoginProfileSpec defines the desired state of UserLoginProfile
#UserLoginProfileSpec: {
	forProvider: #UserLoginProfileParameters @go(ForProvider)
}

// UserLoginProfileStatus defines the observed state of UserLoginProfile.
#UserLoginProfileStatus: {
	atProvider?: #UserLoginProfileObservation @go(AtProvider)
}

// UserLoginProfile is the Schema for the UserLoginProfiles API. Manages an IAM User Login Profile
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#UserLoginProfile: {
	spec:    #UserLoginProfileSpec   @go(Spec)
	status?: #UserLoginProfileStatus @go(Status)
}

// UserLoginProfileList contains a list of UserLoginProfiles
#UserLoginProfileList: {
	items: [...#UserLoginProfile] @go(Items,[]UserLoginProfile)
}
