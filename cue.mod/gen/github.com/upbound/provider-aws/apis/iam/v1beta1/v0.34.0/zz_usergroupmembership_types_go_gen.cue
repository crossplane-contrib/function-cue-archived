// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

#UserGroupMembershipObservation: {
	// A list of IAM Groups to add the user to
	groups?: [...null | string] @go(Groups,[]*string)
	id?: null | string @go(ID,*string)

	// The name of the IAM User to add to groups
	user?: null | string @go(User,*string)
}

#UserGroupMembershipParameters: {
	// A list of IAM Groups to add the user to
	// +crossplane:generate:reference:type=Group
	// +crossplane:generate:reference:refFieldName=GroupRefs
	// +crossplane:generate:reference:selectorFieldName=GroupSelector
	// +kubebuilder:validation:Optional
	groups?: [...null | string] @go(Groups,[]*string)

	// The name of the IAM User to add to groups
	// +crossplane:generate:reference:type=User
	// +kubebuilder:validation:Optional
	user?: null | string @go(User,*string)
}

// UserGroupMembershipSpec defines the desired state of UserGroupMembership
#UserGroupMembershipSpec: {
	forProvider: #UserGroupMembershipParameters @go(ForProvider)
}

// UserGroupMembershipStatus defines the observed state of UserGroupMembership.
#UserGroupMembershipStatus: {
	atProvider?: #UserGroupMembershipObservation @go(AtProvider)
}

// UserGroupMembership is the Schema for the UserGroupMemberships API. Provides a resource for adding an IAM User to IAM Groups without conflicting with itself.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#UserGroupMembership: {
	spec:    #UserGroupMembershipSpec   @go(Spec)
	status?: #UserGroupMembershipStatus @go(Status)
}

// UserGroupMembershipList contains a list of UserGroupMemberships
#UserGroupMembershipList: {
	items: [...#UserGroupMembership] @go(Items,[]UserGroupMembership)
}
