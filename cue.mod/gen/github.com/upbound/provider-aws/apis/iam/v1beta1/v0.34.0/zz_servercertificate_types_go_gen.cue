// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iam/v1beta1

package v1beta1

#ServerCertificateObservation: {
	// The Amazon Resource Name (ARN) specifying the server certificate.
	arn?: null | string @go(Arn,*string)

	// encoded format.
	certificateBody?: null | string @go(CertificateBody,*string)

	// encoded public key certificates
	// of the chain.
	certificateChain?: null | string @go(CertificateChain,*string)

	// Date and time in RFC3339 format on which the certificate is set to expire.
	expiration?: null | string @go(Expiration,*string)

	// The unique Server Certificate name
	id?: null | string @go(ID,*string)

	// The IAM path for the server certificate.  If it is not
	// included, it defaults to a slash (/). If this certificate is for use with
	// AWS CloudFront, the path must be in format /cloudfront/your_path_here.
	// See IAM Identifiers for more details on IAM Paths.
	path?: null | string @go(Path,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Date and time in RFC3339 format when the server certificate was uploaded.
	uploadDate?: null | string @go(UploadDate,*string)
}

#ServerCertificateParameters: {
	// encoded format.
	// +kubebuilder:validation:Optional
	certificateBody?: null | string @go(CertificateBody,*string)

	// encoded public key certificates
	// of the chain.
	// +kubebuilder:validation:Optional
	certificateChain?: null | string @go(CertificateChain,*string)

	// The IAM path for the server certificate.  If it is not
	// included, it defaults to a slash (/). If this certificate is for use with
	// AWS CloudFront, the path must be in format /cloudfront/your_path_here.
	// See IAM Identifiers for more details on IAM Paths.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// ServerCertificateSpec defines the desired state of ServerCertificate
#ServerCertificateSpec: {
	forProvider: #ServerCertificateParameters @go(ForProvider)
}

// ServerCertificateStatus defines the observed state of ServerCertificate.
#ServerCertificateStatus: {
	atProvider?: #ServerCertificateObservation @go(AtProvider)
}

// ServerCertificate is the Schema for the ServerCertificates API. Provides an IAM Server Certificate
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ServerCertificate: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.certificateBody)",message="certificateBody is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.privateKeySecretRef)",message="privateKeySecretRef is a required parameter"
	spec:    #ServerCertificateSpec   @go(Spec)
	status?: #ServerCertificateStatus @go(Status)
}

// ServerCertificateList contains a list of ServerCertificates
#ServerCertificateList: {
	items: [...#ServerCertificate] @go(Items,[]ServerCertificate)
}
