// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/opsworks/v1beta1

package v1beta1

#UserProfileObservation: {
	// Same value as user_arn
	id?: null | string @go(ID,*string)
}

#UserProfileParameters: {
	// Whether users can specify their own SSH public key through the My Settings page
	// +kubebuilder:validation:Optional
	allowSelfManagement?: null | bool @go(AllowSelfManagement,*bool)

	// The users public key
	// +kubebuilder:validation:Optional
	sshPublicKey?: null | string @go(SSHPublicKey,*string)

	// The ssh username, with witch this user wants to log in
	// +kubebuilder:validation:Required
	sshUsername?: null | string @go(SSHUsername,*string)

	// The user's IAM ARN
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.User
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	userArn?: null | string @go(UserArn,*string)
}

// UserProfileSpec defines the desired state of UserProfile
#UserProfileSpec: {
	forProvider: #UserProfileParameters @go(ForProvider)
}

// UserProfileStatus defines the observed state of UserProfile.
#UserProfileStatus: {
	atProvider?: #UserProfileObservation @go(AtProvider)
}

// UserProfile is the Schema for the UserProfiles API. Provides an OpsWorks User Profile resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#UserProfile: {
	spec:    #UserProfileSpec   @go(Spec)
	status?: #UserProfileStatus @go(Status)
}

// UserProfileList contains a list of UserProfiles
#UserProfileList: {
	items: [...#UserProfile] @go(Items,[]UserProfile)
}
