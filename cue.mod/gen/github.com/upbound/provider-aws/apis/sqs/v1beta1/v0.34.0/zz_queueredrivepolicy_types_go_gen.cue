// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/sqs/v1beta1

package v1beta1

#QueueRedrivePolicyObservation: {
	id?: null | string @go(ID,*string)

	// The URL of the SQS Queue to which to attach the policy
	queueUrl?: null | string @go(QueueURL,*string)

	// The JSON redrive policy for the SQS queue. Accepts two key/val pairs: deadLetterTargetArn and maxReceiveCount. Learn more in the Amazon SQS dead-letter queues documentation.
	redrivePolicy?: null | string @go(RedrivePolicy,*string)
}

#QueueRedrivePolicyParameters: {
	// The URL of the SQS Queue to which to attach the policy
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sqs/v1beta1.Queue
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.TerraformID()
	// +kubebuilder:validation:Optional
	queueUrl?: null | string @go(QueueURL,*string)

	// The JSON redrive policy for the SQS queue. Accepts two key/val pairs: deadLetterTargetArn and maxReceiveCount. Learn more in the Amazon SQS dead-letter queues documentation.
	// +kubebuilder:validation:Optional
	redrivePolicy?: null | string @go(RedrivePolicy,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// QueueRedrivePolicySpec defines the desired state of QueueRedrivePolicy
#QueueRedrivePolicySpec: {
	forProvider: #QueueRedrivePolicyParameters @go(ForProvider)
}

// QueueRedrivePolicyStatus defines the observed state of QueueRedrivePolicy.
#QueueRedrivePolicyStatus: {
	atProvider?: #QueueRedrivePolicyObservation @go(AtProvider)
}

// QueueRedrivePolicy is the Schema for the QueueRedrivePolicys API. Provides a SQS Queue Redrive Policy resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#QueueRedrivePolicy: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.redrivePolicy)",message="redrivePolicy is a required parameter"
	spec:    #QueueRedrivePolicySpec   @go(Spec)
	status?: #QueueRedrivePolicyStatus @go(Status)
}

// QueueRedrivePolicyList contains a list of QueueRedrivePolicys
#QueueRedrivePolicyList: {
	items: [...#QueueRedrivePolicy] @go(Items,[]QueueRedrivePolicy)
}
