// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/servicecatalog/v1beta1

package v1beta1

#ProductObservation: {
	// Language code. Valid values: en (English), jp (Japanese), zh (Chinese). Default value is en.
	acceptLanguage?: null | string @go(AcceptLanguage,*string)

	// ARN of the product.
	arn?: null | string @go(Arn,*string)

	// Time when the product was created.
	createdTime?: null | string @go(CreatedTime,*string)

	// Description of the product.
	description?: null | string @go(Description,*string)

	// Distributor (i.e., vendor) of the product.
	distributor?: null | string @go(Distributor,*string)

	// Whether the product has a default path. If the product does not have a default path, call ListLaunchPaths to disambiguate between paths.  Otherwise, ListLaunchPaths is not required, and the output of ProductViewSummary can be used directly with DescribeProvisioningParameters.
	hasDefaultPath?: null | bool @go(HasDefaultPath,*bool)

	// Product ID. For example, prod-dnigbtea24ste.
	id?: null | string @go(ID,*string)

	// Name of the product.
	name?: null | string @go(Name,*string)

	// Owner of the product.
	owner?: null | string @go(Owner,*string)

	// Configuration block for provisioning artifact (i.e., version) parameters. Detailed below.
	provisioningArtifactParameters?: [...#ProvisioningArtifactParametersObservation] @go(ProvisioningArtifactParameters,[]ProvisioningArtifactParametersObservation)

	// Status of the product.
	status?: null | string @go(Status,*string)

	// Support information about the product.
	supportDescription?: null | string @go(SupportDescription,*string)

	// Contact email for product support.
	supportEmail?: null | string @go(SupportEmail,*string)

	// Contact URL for product support.
	supportUrl?: null | string @go(SupportURL,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Type of product. Valid values are CLOUD_FORMATION_TEMPLATE, MARKETPLACE.
	type?: null | string @go(Type,*string)
}

#ProductParameters: {
	// Language code. Valid values: en (English), jp (Japanese), zh (Chinese). Default value is en.
	// +kubebuilder:validation:Optional
	acceptLanguage?: null | string @go(AcceptLanguage,*string)

	// Description of the product.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Distributor (i.e., vendor) of the product.
	// +kubebuilder:validation:Optional
	distributor?: null | string @go(Distributor,*string)

	// Name of the product.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Owner of the product.
	// +kubebuilder:validation:Optional
	owner?: null | string @go(Owner,*string)

	// Configuration block for provisioning artifact (i.e., version) parameters. Detailed below.
	// +kubebuilder:validation:Optional
	provisioningArtifactParameters?: [...#ProvisioningArtifactParametersParameters] @go(ProvisioningArtifactParameters,[]ProvisioningArtifactParametersParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Support information about the product.
	// +kubebuilder:validation:Optional
	supportDescription?: null | string @go(SupportDescription,*string)

	// Contact email for product support.
	// +kubebuilder:validation:Optional
	supportEmail?: null | string @go(SupportEmail,*string)

	// Contact URL for product support.
	// +kubebuilder:validation:Optional
	supportUrl?: null | string @go(SupportURL,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Type of product. Valid values are CLOUD_FORMATION_TEMPLATE, MARKETPLACE.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#ProvisioningArtifactParametersObservation: {
	// Description of the provisioning artifact (i.e., version), including how it differs from the previous provisioning artifact.
	description?: null | string @go(Description,*string)

	// Whether AWS Service Catalog stops validating the specified provisioning artifact template even if it is invalid.
	disableTemplateValidation?: null | bool @go(DisableTemplateValidation,*bool)

	// Name of the provisioning artifact (for example, v1, v2beta). No spaces are allowed.
	name?: null | string @go(Name,*string)

	// Template source as the physical ID of the resource that contains the template. Currently only supports CloudFormation stack ARN. Specify the physical ID as arn:[partition]:cloudformation:[region]:[account ID]:stack/[stack name]/[resource ID].
	templatePhysicalId?: null | string @go(TemplatePhysicalID,*string)

	// Template source as URL of the CloudFormation template in Amazon S3.
	templateUrl?: null | string @go(TemplateURL,*string)

	// Type of provisioning artifact. Valid values: CLOUD_FORMATION_TEMPLATE, MARKETPLACE_AMI, MARKETPLACE_CAR (Marketplace Clusters and AWS Resources).
	type?: null | string @go(Type,*string)
}

#ProvisioningArtifactParametersParameters: {
	// Description of the provisioning artifact (i.e., version), including how it differs from the previous provisioning artifact.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Whether AWS Service Catalog stops validating the specified provisioning artifact template even if it is invalid.
	// +kubebuilder:validation:Optional
	disableTemplateValidation?: null | bool @go(DisableTemplateValidation,*bool)

	// Name of the provisioning artifact (for example, v1, v2beta). No spaces are allowed.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Template source as the physical ID of the resource that contains the template. Currently only supports CloudFormation stack ARN. Specify the physical ID as arn:[partition]:cloudformation:[region]:[account ID]:stack/[stack name]/[resource ID].
	// +kubebuilder:validation:Optional
	templatePhysicalId?: null | string @go(TemplatePhysicalID,*string)

	// Template source as URL of the CloudFormation template in Amazon S3.
	// +kubebuilder:validation:Optional
	templateUrl?: null | string @go(TemplateURL,*string)

	// Type of provisioning artifact. Valid values: CLOUD_FORMATION_TEMPLATE, MARKETPLACE_AMI, MARKETPLACE_CAR (Marketplace Clusters and AWS Resources).
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// ProductSpec defines the desired state of Product
#ProductSpec: {
	forProvider: #ProductParameters @go(ForProvider)
}

// ProductStatus defines the observed state of Product.
#ProductStatus: {
	atProvider?: #ProductObservation @go(AtProvider)
}

// Product is the Schema for the Products API. Manages a Service Catalog Product
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Product: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.owner)",message="owner is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.provisioningArtifactParameters)",message="provisioningArtifactParameters is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	spec:    #ProductSpec   @go(Spec)
	status?: #ProductStatus @go(Status)
}

// ProductList contains a list of Products
#ProductList: {
	items: [...#Product] @go(Items,[]Product)
}
