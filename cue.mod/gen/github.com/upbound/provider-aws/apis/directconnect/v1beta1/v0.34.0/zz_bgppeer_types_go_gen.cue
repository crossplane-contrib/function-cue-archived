// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/directconnect/v1beta1

package v1beta1

#BGPPeerObservation: {
	// The address family for the BGP peer. ipv4  or ipv6.
	addressFamily?: null | string @go(AddressFamily,*string)

	// The IPv4 CIDR address to use to send traffic to Amazon.
	// Required for IPv4 BGP peers on public virtual interfaces.
	amazonAddress?: null | string @go(AmazonAddress,*string)

	// The Direct Connect endpoint on which the BGP peer terminates.
	awsDevice?: null | string @go(AwsDevice,*string)

	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	bgpAsn?: null | float64 @go(BGPAsn,*float64)

	// The authentication key for BGP configuration.
	bgpAuthKey?: null | string @go(BGPAuthKey,*string)

	// The ID of the BGP peer.
	bgpPeerId?: null | string @go(BGPPeerID,*string)

	// The Up/Down state of the BGP peer.
	bgpStatus?: null | string @go(BGPStatus,*string)

	// The IPv4 CIDR destination address to which Amazon should send traffic.
	// Required for IPv4 BGP peers on public virtual interfaces.
	customerAddress?: null | string @go(CustomerAddress,*string)

	// The ID of the BGP peer resource.
	id?: null | string @go(ID,*string)

	// The ID of the Direct Connect virtual interface on which to create the BGP peer.
	virtualInterfaceId?: null | string @go(VirtualInterfaceID,*string)
}

#BGPPeerParameters: {
	// The address family for the BGP peer. ipv4  or ipv6.
	// +kubebuilder:validation:Optional
	addressFamily?: null | string @go(AddressFamily,*string)

	// The IPv4 CIDR address to use to send traffic to Amazon.
	// Required for IPv4 BGP peers on public virtual interfaces.
	// +kubebuilder:validation:Optional
	amazonAddress?: null | string @go(AmazonAddress,*string)

	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	// +kubebuilder:validation:Optional
	bgpAsn?: null | float64 @go(BGPAsn,*float64)

	// The authentication key for BGP configuration.
	// +kubebuilder:validation:Optional
	bgpAuthKey?: null | string @go(BGPAuthKey,*string)

	// The IPv4 CIDR destination address to which Amazon should send traffic.
	// Required for IPv4 BGP peers on public virtual interfaces.
	// +kubebuilder:validation:Optional
	customerAddress?: null | string @go(CustomerAddress,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the Direct Connect virtual interface on which to create the BGP peer.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/directconnect/v1beta1.PrivateVirtualInterface
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	virtualInterfaceId?: null | string @go(VirtualInterfaceID,*string)
}

// BGPPeerSpec defines the desired state of BGPPeer
#BGPPeerSpec: {
	forProvider: #BGPPeerParameters @go(ForProvider)
}

// BGPPeerStatus defines the observed state of BGPPeer.
#BGPPeerStatus: {
	atProvider?: #BGPPeerObservation @go(AtProvider)
}

// BGPPeer is the Schema for the BGPPeers API. Provides a Direct Connect BGP peer resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BGPPeer: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.addressFamily)",message="addressFamily is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.bgpAsn)",message="bgpAsn is a required parameter"
	spec:    #BGPPeerSpec   @go(Spec)
	status?: #BGPPeerStatus @go(Status)
}

// BGPPeerList contains a list of BGPPeers
#BGPPeerList: {
	items: [...#BGPPeer] @go(Items,[]BGPPeer)
}
