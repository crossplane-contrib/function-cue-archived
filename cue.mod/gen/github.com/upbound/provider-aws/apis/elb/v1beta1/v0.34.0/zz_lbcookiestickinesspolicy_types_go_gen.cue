// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/elb/v1beta1

package v1beta1

#LBCookieStickinessPolicyObservation: {
	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	cookieExpirationPeriod?: null | float64 @go(CookieExpirationPeriod,*float64)

	// The ID of the policy.
	id?: null | string @go(ID,*string)

	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	lbPort?: null | float64 @go(LBPort,*float64)

	// The load balancer to which the policy
	// should be attached.
	loadBalancer?: null | string @go(LoadBalancer,*string)

	// The name of the stickiness policy.
	name?: null | string @go(Name,*string)
}

#LBCookieStickinessPolicyParameters: {
	// The time period after which
	// the session cookie should be considered stale, expressed in seconds.
	// +kubebuilder:validation:Optional
	cookieExpirationPeriod?: null | float64 @go(CookieExpirationPeriod,*float64)

	// The load balancer port to which the policy
	// should be applied. This must be an active listener on the load
	// balancer.
	// +kubebuilder:validation:Optional
	lbPort?: null | float64 @go(LBPort,*float64)

	// The load balancer to which the policy
	// should be attached.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elb/v1beta1.ELB
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	loadBalancer?: null | string @go(LoadBalancer,*string)

	// The name of the stickiness policy.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// LBCookieStickinessPolicySpec defines the desired state of LBCookieStickinessPolicy
#LBCookieStickinessPolicySpec: {
	forProvider: #LBCookieStickinessPolicyParameters @go(ForProvider)
}

// LBCookieStickinessPolicyStatus defines the observed state of LBCookieStickinessPolicy.
#LBCookieStickinessPolicyStatus: {
	atProvider?: #LBCookieStickinessPolicyObservation @go(AtProvider)
}

// LBCookieStickinessPolicy is the Schema for the LBCookieStickinessPolicys API. Provides a load balancer cookie stickiness policy, which allows an ELB to control the sticky session lifetime of the browser.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LBCookieStickinessPolicy: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.lbPort)",message="lbPort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	spec:    #LBCookieStickinessPolicySpec   @go(Spec)
	status?: #LBCookieStickinessPolicyStatus @go(Status)
}

// LBCookieStickinessPolicyList contains a list of LBCookieStickinessPolicys
#LBCookieStickinessPolicyList: {
	items: [...#LBCookieStickinessPolicy] @go(Items,[]LBCookieStickinessPolicy)
}
