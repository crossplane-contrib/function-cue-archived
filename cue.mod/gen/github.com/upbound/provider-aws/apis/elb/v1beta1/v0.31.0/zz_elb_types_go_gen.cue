// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/elb/v1beta1

package v1beta1

#AccessLogsObservation: {
}

#AccessLogsParameters: {
	// The S3 bucket name to store the logs in.
	// +kubebuilder:validation:Required
	bucket?: null | string @go(Bucket,*string)

	// The S3 bucket prefix. Logs are stored in the root if not configured.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Boolean to enable / disable access_logs. Default is true
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// The publishing interval in minutes. Valid values: 5 and 60. Default: 60
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)
}

#ELBObservation: {
	// The ARN of the ELB
	arn?: null | string @go(Arn,*string)

	// The DNS name of the ELB
	dnsName?: null | string @go(DNSName,*string)

	// The name of the ELB
	id?: null | string @go(ID,*string)

	// The ID of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Only available on ELBs launched in a VPC.
	sourceSecurityGroupId?: null | string @go(SourceSecurityGroupID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
	zoneId?: null | string @go(ZoneID,*string)
}

#ELBParameters: {
	// An Access Logs block. Access Logs documented below.
	// +kubebuilder:validation:Optional
	accessLogs?: [...#AccessLogsParameters] @go(AccessLogs,[]AccessLogsParameters)

	// The AZ's to serve traffic in.
	// +kubebuilder:validation:Optional
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)

	// Boolean to enable connection draining. Default: false
	// +kubebuilder:validation:Optional
	connectionDraining?: null | bool @go(ConnectionDraining,*bool)

	// The time in seconds to allow for connections to drain. Default: 300
	// +kubebuilder:validation:Optional
	connectionDrainingTimeout?: null | float64 @go(ConnectionDrainingTimeout,*float64)

	// Enable cross-zone load balancing. Default: true
	// +kubebuilder:validation:Optional
	crossZoneLoadBalancing?: null | bool @go(CrossZoneLoadBalancing,*bool)

	// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.
	// +kubebuilder:validation:Optional
	desyncMitigationMode?: null | string @go(DesyncMitigationMode,*string)

	// A health_check block. Health Check documented below.
	// +kubebuilder:validation:Optional
	healthCheck?: [...#HealthCheckParameters] @go(HealthCheck,[]HealthCheckParameters)

	// The time in seconds that the connection is allowed to be idle. Default: 60
	// +kubebuilder:validation:Optional
	idleTimeout?: null | float64 @go(IdleTimeout,*float64)

	// A list of instance ids to place in the ELB pool.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Instance
	// +kubebuilder:validation:Optional
	instances?: [...null | string] @go(Instances,[]*string)

	// If true, ELB will be an internal ELB.
	// +kubebuilder:validation:Optional
	internal?: null | bool @go(Internal,*bool)

	// A list of listener blocks. Listeners documented below.
	// +kubebuilder:validation:Required
	listener: [...#ListenerParameters] @go(Listener,[]ListenerParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A list of security group IDs to assign to the ELB.
	// Only valid if creating an ELB within a VPC
	// +kubebuilder:validation:Optional
	securityGroups?: [...null | string] @go(SecurityGroups,[]*string)

	// The name of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Use this for Classic or Default VPC only.
	// +kubebuilder:validation:Optional
	sourceSecurityGroup?: null | string @go(SourceSecurityGroup,*string)

	// A list of subnet IDs to attach to the ELB.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +kubebuilder:validation:Optional
	subnets?: [...null | string] @go(Subnets,[]*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#HealthCheckObservation: {
}

#HealthCheckParameters: {
	// The number of checks before the instance is declared healthy.
	// +kubebuilder:validation:Required
	healthyThreshold?: null | float64 @go(HealthyThreshold,*float64)

	// The publishing interval in minutes. Valid values: 5 and 60. Default: 60
	// +kubebuilder:validation:Required
	interval?: null | float64 @go(Interval,*float64)

	// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
	// values are:
	// +kubebuilder:validation:Required
	target?: null | string @go(Target,*string)

	// The length of time before the check times out.
	// +kubebuilder:validation:Required
	timeout?: null | float64 @go(Timeout,*float64)

	// The number of checks before the instance is declared unhealthy.
	// +kubebuilder:validation:Required
	unhealthyThreshold?: null | float64 @go(UnhealthyThreshold,*float64)
}

#ListenerObservation: {
}

#ListenerParameters: {
	// The port on the instance to route to
	// +kubebuilder:validation:Required
	instancePort?: null | float64 @go(InstancePort,*float64)

	// The protocol to use to the instance. Valid
	// values are HTTP, HTTPS, TCP, or SSL
	// +kubebuilder:validation:Required
	instanceProtocol?: null | string @go(InstanceProtocol,*string)

	// The port to listen on for the load balancer
	// +kubebuilder:validation:Required
	lbPort?: null | float64 @go(LBPort,*float64)

	// The protocol to listen on. Valid values are HTTP,
	// HTTPS, TCP, or SSL
	// +kubebuilder:validation:Required
	lbProtocol?: null | string @go(LBProtocol,*string)

	// The ARN of an SSL certificate you have
	// uploaded to AWS IAM. Note ECDSA-specific restrictions below.  Only valid when
	// +kubebuilder:validation:Optional
	sslCertificateId?: null | string @go(SSLCertificateID,*string)
}

// ELBSpec defines the desired state of ELB
#ELBSpec: {
	forProvider: #ELBParameters @go(ForProvider)
}

// ELBStatus defines the observed state of ELB.
#ELBStatus: {
	atProvider?: #ELBObservation @go(AtProvider)
}

// ELB is the Schema for the ELBs API. Provides an Elastic Load Balancer resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ELB: {
	spec:    #ELBSpec   @go(Spec)
	status?: #ELBStatus @go(Status)
}

// ELBList contains a list of ELBs
#ELBList: {
	items: [...#ELB] @go(Items,[]ELB)
}
