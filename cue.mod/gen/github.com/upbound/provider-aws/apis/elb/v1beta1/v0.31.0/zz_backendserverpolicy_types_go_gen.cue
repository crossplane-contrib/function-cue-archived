// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/elb/v1beta1

package v1beta1

#BackendServerPolicyObservation: {
	// The ID of the policy.
	id?: null | string @go(ID,*string)
}

#BackendServerPolicyParameters: {
	// The instance port to apply the policy to.
	// +kubebuilder:validation:Required
	instancePort?: null | float64 @go(InstancePort,*float64)

	// The load balancer to attach the policy to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elb/v1beta1.ELB
	// +kubebuilder:validation:Optional
	loadBalancerName?: null | string @go(LoadBalancerName,*string)

	// List of Policy Names to apply to the backend server.
	// +kubebuilder:validation:Optional
	policyNames?: [...null | string] @go(PolicyNames,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// BackendServerPolicySpec defines the desired state of BackendServerPolicy
#BackendServerPolicySpec: {
	forProvider: #BackendServerPolicyParameters @go(ForProvider)
}

// BackendServerPolicyStatus defines the observed state of BackendServerPolicy.
#BackendServerPolicyStatus: {
	atProvider?: #BackendServerPolicyObservation @go(AtProvider)
}

// BackendServerPolicy is the Schema for the BackendServerPolicys API. Attaches a load balancer policy to an ELB backend server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BackendServerPolicy: {
	spec:    #BackendServerPolicySpec   @go(Spec)
	status?: #BackendServerPolicyStatus @go(Status)
}

// BackendServerPolicyList contains a list of BackendServerPolicys
#BackendServerPolicyList: {
	items: [...#BackendServerPolicy] @go(Items,[]BackendServerPolicy)
}
