// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/transfer/v1beta1

package v1beta1

#HomeDirectoryMappingsObservation: {
}

#HomeDirectoryMappingsParameters: {
	// Represents an entry and a target.
	// +kubebuilder:validation:Required
	entry?: null | string @go(Entry,*string)

	// Represents the map target.
	// +kubebuilder:validation:Required
	target?: null | string @go(Target,*string)
}

#PosixProfileObservation: {
}

#PosixProfileParameters: {
	// The POSIX group ID used for all EFS operations by this user.
	// +kubebuilder:validation:Required
	gid?: null | float64 @go(GID,*float64)

	// The secondary POSIX group IDs used for all EFS operations by this user.
	// +kubebuilder:validation:Optional
	secondaryGids?: [...null | float64] @go(SecondaryGids,[]*float64)

	// The POSIX user ID used for all EFS operations by this user.
	// +kubebuilder:validation:Required
	uid?: null | float64 @go(UID,*float64)
}

#UserObservation: {
	// Amazon Resource Name (ARN) of Transfer User
	arn?: null | string @go(Arn,*string)
	id?:  null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#UserParameters: {
	// The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a /.  The first item in the path is the name of the home bucket (accessible as ${Transfer:HomeBucket} in the policy) and the rest is the home directory (accessible as ${Transfer:HomeDirectory} in the policy). For example, /example-bucket-1234/username would set the home bucket to example-bucket-1234 and the home directory to username.
	// +kubebuilder:validation:Optional
	homeDirectory?: null | string @go(HomeDirectory,*string)

	// Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
	// +kubebuilder:validation:Optional
	homeDirectoryMappings?: [...#HomeDirectoryMappingsParameters] @go(HomeDirectoryMappings,[]HomeDirectoryMappingsParameters)

	// The type of landing directory (folder) you mapped for your users' home directory. Valid values are PATH and LOGICAL.
	// +kubebuilder:validation:Optional
	homeDirectoryType?: null | string @go(HomeDirectoryType,*string)

	// An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include ${Transfer:UserName}, ${Transfer:HomeDirectory}, and ${Transfer:HomeBucket}.  These are evaluated on-the-fly when navigating the bucket.
	// +kubebuilder:validation:Optional
	policy?: null | string @go(Policy,*string)

	// Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. See Posix Profile below.
	// +kubebuilder:validation:Optional
	posixProfile?: [...#PosixProfileParameters] @go(PosixProfile,[]PosixProfileParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Amazon Resource Name (ARN) of an IAM role that allows the service to controls your userâ€™s access to your Amazon S3 bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	role?: null | string @go(Role,*string)

	// The Server ID of the Transfer Server (e.g., s-12345678)
	// +crossplane:generate:reference:type=Server
	// +kubebuilder:validation:Optional
	serverId?: null | string @go(ServerID,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// UserSpec defines the desired state of User
#UserSpec: {
	forProvider: #UserParameters @go(ForProvider)
}

// UserStatus defines the observed state of User.
#UserStatus: {
	atProvider?: #UserObservation @go(AtProvider)
}

// User is the Schema for the Users API. Provides a AWS Transfer User resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#User: {
	spec:    #UserSpec   @go(Spec)
	status?: #UserStatus @go(Status)
}

// UserList contains a list of Users
#UserList: {
	items: [...#User] @go(Items,[]User)
}
