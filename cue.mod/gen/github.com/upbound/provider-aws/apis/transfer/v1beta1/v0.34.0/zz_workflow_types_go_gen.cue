// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/transfer/v1beta1

package v1beta1

#CopyStepDetailsDestinationFileLocationObservation: {
	// Specifies the details for the EFS file being copied.
	efsFileLocation?: [...#DestinationFileLocationEFSFileLocationObservation] @go(EFSFileLocation,[]DestinationFileLocationEFSFileLocationObservation)

	// Specifies the details for the S3 file being copied.
	s3FileLocation?: [...#DestinationFileLocationS3FileLocationObservation] @go(S3FileLocation,[]DestinationFileLocationS3FileLocationObservation)
}

#CopyStepDetailsDestinationFileLocationParameters: {
	// Specifies the details for the EFS file being copied.
	// +kubebuilder:validation:Optional
	efsFileLocation?: [...#DestinationFileLocationEFSFileLocationParameters] @go(EFSFileLocation,[]DestinationFileLocationEFSFileLocationParameters)

	// Specifies the details for the S3 file being copied.
	// +kubebuilder:validation:Optional
	s3FileLocation?: [...#DestinationFileLocationS3FileLocationParameters] @go(S3FileLocation,[]DestinationFileLocationS3FileLocationParameters)
}

#CopyStepDetailsObservation: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	destinationFileLocation?: [...#DestinationFileLocationObservation] @go(DestinationFileLocation,[]DestinationFileLocationObservation)

	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#CopyStepDetailsParameters: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	// +kubebuilder:validation:Optional
	destinationFileLocation?: [...#DestinationFileLocationParameters] @go(DestinationFileLocation,[]DestinationFileLocationParameters)

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	// +kubebuilder:validation:Optional
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#CustomStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// The ARN for the lambda function that is being called.
	target?: null | string @go(Target,*string)

	// Timeout, in seconds, for the step.
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#CustomStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// The ARN for the lambda function that is being called.
	// +kubebuilder:validation:Optional
	target?: null | string @go(Target,*string)

	// Timeout, in seconds, for the step.
	// +kubebuilder:validation:Optional
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#DeleteStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#DeleteStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#DestinationFileLocationEFSFileLocationObservation: {
	// The ID of the file system, assigned by Amazon EFS.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	path?: null | string @go(Path,*string)
}

#DestinationFileLocationEFSFileLocationParameters: {
	// The ID of the file system, assigned by Amazon EFS.
	// +kubebuilder:validation:Optional
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#DestinationFileLocationObservation: {
	// Specifies the details for the EFS file being copied.
	efsFileLocation?: [...#EFSFileLocationObservation] @go(EFSFileLocation,[]EFSFileLocationObservation)

	// Specifies the details for the S3 file being copied.
	s3FileLocation?: [...#S3FileLocationObservation] @go(S3FileLocation,[]S3FileLocationObservation)
}

#DestinationFileLocationParameters: {
	// Specifies the details for the EFS file being copied.
	// +kubebuilder:validation:Optional
	efsFileLocation?: [...#EFSFileLocationParameters] @go(EFSFileLocation,[]EFSFileLocationParameters)

	// Specifies the details for the S3 file being copied.
	// +kubebuilder:validation:Optional
	s3FileLocation?: [...#S3FileLocationParameters] @go(S3FileLocation,[]S3FileLocationParameters)
}

#DestinationFileLocationS3FileLocationObservation: {
	// Specifies the S3 bucket for the customer input file.
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)
}

#DestinationFileLocationS3FileLocationParameters: {
	// Specifies the S3 bucket for the customer input file.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#EFSFileLocationObservation: {
	// The ID of the file system, assigned by Amazon EFS.
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	path?: null | string @go(Path,*string)
}

#EFSFileLocationParameters: {
	// The ID of the file system, assigned by Amazon EFS.
	// +kubebuilder:validation:Optional
	fileSystemId?: null | string @go(FileSystemID,*string)

	// The pathname for the folder being used by a workflow.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)
}

#OnExceptionStepsObservation: {
	// Details for a step that performs a file copy. See Copy Step Details below.
	copyStepDetails?: [...#CopyStepDetailsObservation] @go(CopyStepDetails,[]CopyStepDetailsObservation)

	// Details for a step that invokes a lambda function.
	customStepDetails?: [...#CustomStepDetailsObservation] @go(CustomStepDetails,[]CustomStepDetailsObservation)

	// Details for a step that deletes the file.
	deleteStepDetails?: [...#DeleteStepDetailsObservation] @go(DeleteStepDetails,[]DeleteStepDetailsObservation)

	// Details for a step that creates one or more tags.
	tagStepDetails?: [...#TagStepDetailsObservation] @go(TagStepDetails,[]TagStepDetailsObservation)

	// One of the following step types are supported. COPY, CUSTOM, DELETE, and TAG.
	type?: null | string @go(Type,*string)
}

#OnExceptionStepsParameters: {
	// Details for a step that performs a file copy. See Copy Step Details below.
	// +kubebuilder:validation:Optional
	copyStepDetails?: [...#CopyStepDetailsParameters] @go(CopyStepDetails,[]CopyStepDetailsParameters)

	// Details for a step that invokes a lambda function.
	// +kubebuilder:validation:Optional
	customStepDetails?: [...#CustomStepDetailsParameters] @go(CustomStepDetails,[]CustomStepDetailsParameters)

	// Details for a step that deletes the file.
	// +kubebuilder:validation:Optional
	deleteStepDetails?: [...#DeleteStepDetailsParameters] @go(DeleteStepDetails,[]DeleteStepDetailsParameters)

	// Details for a step that creates one or more tags.
	// +kubebuilder:validation:Optional
	tagStepDetails?: [...#TagStepDetailsParameters] @go(TagStepDetails,[]TagStepDetailsParameters)

	// One of the following step types are supported. COPY, CUSTOM, DELETE, and TAG.
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)
}

#S3FileLocationObservation: {
	// Specifies the S3 bucket for the customer input file.
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)
}

#S3FileLocationParameters: {
	// Specifies the S3 bucket for the customer input file.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)
}

#StepsCopyStepDetailsObservation: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	destinationFileLocation?: [...#CopyStepDetailsDestinationFileLocationObservation] @go(DestinationFileLocation,[]CopyStepDetailsDestinationFileLocationObservation)

	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#StepsCopyStepDetailsParameters: {
	// Specifies the location for the file being copied. Use ${Transfer:username} in this field to parametrize the destination prefix by username.
	// +kubebuilder:validation:Optional
	destinationFileLocation?: [...#CopyStepDetailsDestinationFileLocationParameters] @go(DestinationFileLocation,[]CopyStepDetailsDestinationFileLocationParameters)

	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE. Valid values are TRUE and FALSE.
	// +kubebuilder:validation:Optional
	overwriteExisting?: null | string @go(OverwriteExisting,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#StepsCustomStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// The ARN for the lambda function that is being called.
	target?: null | string @go(Target,*string)

	// Timeout, in seconds, for the step.
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#StepsCustomStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// The ARN for the lambda function that is being called.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta1.Function
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	target?: null | string @go(Target,*string)

	// Timeout, in seconds, for the step.
	// +kubebuilder:validation:Optional
	timeoutSeconds?: null | float64 @go(TimeoutSeconds,*float64)
}

#StepsDeleteStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#StepsDeleteStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)
}

#StepsObservation: {
	// Details for a step that performs a file copy. See Copy Step Details below.
	copyStepDetails?: [...#StepsCopyStepDetailsObservation] @go(CopyStepDetails,[]StepsCopyStepDetailsObservation)

	// Details for a step that invokes a lambda function.
	customStepDetails?: [...#StepsCustomStepDetailsObservation] @go(CustomStepDetails,[]StepsCustomStepDetailsObservation)

	// Details for a step that deletes the file.
	deleteStepDetails?: [...#StepsDeleteStepDetailsObservation] @go(DeleteStepDetails,[]StepsDeleteStepDetailsObservation)

	// Details for a step that creates one or more tags.
	tagStepDetails?: [...#StepsTagStepDetailsObservation] @go(TagStepDetails,[]StepsTagStepDetailsObservation)

	// One of the following step types are supported. COPY, CUSTOM, DELETE, and TAG.
	type?: null | string @go(Type,*string)
}

#StepsParameters: {
	// Details for a step that performs a file copy. See Copy Step Details below.
	// +kubebuilder:validation:Optional
	copyStepDetails?: [...#StepsCopyStepDetailsParameters] @go(CopyStepDetails,[]StepsCopyStepDetailsParameters)

	// Details for a step that invokes a lambda function.
	// +kubebuilder:validation:Optional
	customStepDetails?: [...#StepsCustomStepDetailsParameters] @go(CustomStepDetails,[]StepsCustomStepDetailsParameters)

	// Details for a step that deletes the file.
	// +kubebuilder:validation:Optional
	deleteStepDetails?: [...#StepsDeleteStepDetailsParameters] @go(DeleteStepDetails,[]StepsDeleteStepDetailsParameters)

	// Details for a step that creates one or more tags.
	// +kubebuilder:validation:Optional
	tagStepDetails?: [...#StepsTagStepDetailsParameters] @go(TagStepDetails,[]StepsTagStepDetailsParameters)

	// One of the following step types are supported. COPY, CUSTOM, DELETE, and TAG.
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)
}

#StepsTagStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// Key-value map of resource tags.
	tags?: [...#TagStepDetailsTagsObservation] @go(Tags,[]TagStepDetailsTagsObservation)
}

#StepsTagStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: [...#TagStepDetailsTagsParameters] @go(Tags,[]TagStepDetailsTagsParameters)
}

#TagStepDetailsObservation: {
	// The name of the step, used as an identifier.
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// Key-value map of resource tags.
	tags?: [...#TagsObservation] @go(Tags,[]TagsObservation)
}

#TagStepDetailsParameters: {
	// The name of the step, used as an identifier.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow. Enter ${previous.file} to use the previous file as the input. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value. Enter ${original.file} to use the originally-uploaded file location as input for this step.
	// +kubebuilder:validation:Optional
	sourceFileLocation?: null | string @go(SourceFileLocation,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: [...#TagsParameters] @go(Tags,[]TagsParameters)
}

#TagStepDetailsTagsObservation: {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)

	// The value that corresponds to the key.
	value?: null | string @go(Value,*string)
}

#TagStepDetailsTagsParameters: {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Required
	key?: null | string @go(Key,*string)

	// The value that corresponds to the key.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#TagsObservation: {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	key?: null | string @go(Key,*string)

	// The value that corresponds to the key.
	value?: null | string @go(Value,*string)
}

#TagsParameters: {
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	// +kubebuilder:validation:Required
	key?: null | string @go(Key,*string)

	// The value that corresponds to the key.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#WorkflowObservation: {
	// The Workflow ARN.
	arn?: null | string @go(Arn,*string)

	// A textual description for the workflow.
	description?: null | string @go(Description,*string)

	// The Workflow id.
	id?: null | string @go(ID,*string)

	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	onExceptionSteps?: [...#OnExceptionStepsObservation] @go(OnExceptionSteps,[]OnExceptionStepsObservation)

	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	steps?: [...#StepsObservation] @go(Steps,[]StepsObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#WorkflowParameters: {
	// A textual description for the workflow.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Specifies the steps (actions) to take if errors are encountered during execution of the workflow. See Workflow Steps below.
	// +kubebuilder:validation:Optional
	onExceptionSteps?: [...#OnExceptionStepsParameters] @go(OnExceptionSteps,[]OnExceptionStepsParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Specifies the details for the steps that are in the specified workflow. See Workflow Steps below.
	// +kubebuilder:validation:Optional
	steps?: [...#StepsParameters] @go(Steps,[]StepsParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// WorkflowSpec defines the desired state of Workflow
#WorkflowSpec: {
	forProvider: #WorkflowParameters @go(ForProvider)
}

// WorkflowStatus defines the observed state of Workflow.
#WorkflowStatus: {
	atProvider?: #WorkflowObservation @go(AtProvider)
}

// Workflow is the Schema for the Workflows API. Provides a AWS Transfer Workflow resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Workflow: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.steps)",message="steps is a required parameter"
	spec:    #WorkflowSpec   @go(Spec)
	status?: #WorkflowStatus @go(Status)
}

// WorkflowList contains a list of Workflows
#WorkflowList: {
	items: [...#Workflow] @go(Items,[]Workflow)
}
