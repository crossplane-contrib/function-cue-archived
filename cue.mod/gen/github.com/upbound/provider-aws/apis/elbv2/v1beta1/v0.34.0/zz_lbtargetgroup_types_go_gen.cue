// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/elbv2/v1beta1

package v1beta1

#HealthCheckObservation: {
	// Whether health checks are enabled. Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
	healthyThreshold?: null | float64 @go(HealthyThreshold,*float64)

	// Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For lambda target groups, it needs to be greater than the timeout of the underlying lambda. Defaults to 30.
	interval?: null | float64 @go(Interval,*float64)

	// 299" or "0-99"). Required for HTTP/HTTPS/GRPC ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS/GRPC) not Network Load Balancers (i.e., TCP).
	matcher?: null | string @go(Matcher,*string)

	// (May be required) Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
	path?: null | string @go(Path,*string)

	// The port the load balancer uses when performing health checks on targets. Default is traffic-port.
	port?: null | string @go(Port,*string)

	// Protocol the load balancer uses when performing health checks on targets. Must be either TCP, HTTP, or HTTPS. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. Defaults to HTTP.
	protocol?: null | string @go(Protocol,*string)

	// Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
	timeout?: null | float64 @go(Timeout,*float64)

	// Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
	unhealthyThreshold?: null | float64 @go(UnhealthyThreshold,*float64)
}

#HealthCheckParameters: {
	// Whether health checks are enabled. Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Number of consecutive health check successes required before considering a target healthy. The range is 2-10. Defaults to 3.
	// +kubebuilder:validation:Optional
	healthyThreshold?: null | float64 @go(HealthyThreshold,*float64)

	// Approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. For lambda target groups, it needs to be greater than the timeout of the underlying lambda. Defaults to 30.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// 299" or "0-99"). Required for HTTP/HTTPS/GRPC ALB. Only applies to Application Load Balancers (i.e., HTTP/HTTPS/GRPC) not Network Load Balancers (i.e., TCP).
	// +kubebuilder:validation:Optional
	matcher?: null | string @go(Matcher,*string)

	// (May be required) Destination for the health check request. Required for HTTP/HTTPS ALB and HTTP NLB. Only applies to HTTP/HTTPS.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// The port the load balancer uses when performing health checks on targets. Default is traffic-port.
	// +kubebuilder:validation:Optional
	port?: null | string @go(Port,*string)

	// Protocol the load balancer uses when performing health checks on targets. Must be either TCP, HTTP, or HTTPS. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. Defaults to HTTP.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)

	// Amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is lambda, the default is 30 seconds.
	// +kubebuilder:validation:Optional
	timeout?: null | float64 @go(Timeout,*float64)

	// Number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. Defaults to 3.
	// +kubebuilder:validation:Optional
	unhealthyThreshold?: null | float64 @go(UnhealthyThreshold,*float64)
}

#LBTargetGroupObservation: {
	// ARN of the Target Group (matches id).
	arn?: null | string @go(Arn,*string)

	// ARN suffix for use with CloudWatch Metrics.
	arnSuffix?: null | string @go(ArnSuffix,*string)

	// Whether to terminate connections at the end of the deregistration timeout on Network Load Balancers. See doc for more information. Default is false.
	connectionTermination?: null | bool @go(ConnectionTermination,*bool)

	// Amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds.
	deregistrationDelay?: null | string @go(DeregistrationDelay,*string)

	// Health Check configuration block. Detailed below.
	healthCheck?: [...#HealthCheckObservation] @go(HealthCheck,[]HealthCheckObservation)

	// ARN of the Target Group (matches arn).
	id?: null | string @go(ID,*string)

	// The type of IP addresses used by the target group, only supported when target type is set to ip. Possible values are ipv4 or ipv6.
	ipAddressType?: null | string @go(IPAddressType,*string)

	// Whether the request and response headers exchanged between the load balancer and the Lambda function include arrays of values or strings. Only applies when target_type is lambda. Default is false.
	lambdaMultiValueHeadersEnabled?: null | bool @go(LambdaMultiValueHeadersEnabled,*bool)

	// Determines how the load balancer selects targets when routing requests. Only applicable for Application Load Balancer Target Groups. The value is round_robin or least_outstanding_requests. The default is round_robin.
	loadBalancingAlgorithmType?: null | string @go(LoadBalancingAlgorithmType,*string)

	// Name of the target group.
	name?: null | string @go(Name,*string)

	// (May be required, Forces new resource) Port on which targets receive traffic, unless overridden when registering a specific target. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
	port?: null | float64 @go(Port,*float64)

	// Whether client IP preservation is enabled. See doc for more information.
	preserveClientIp?: null | string @go(PreserveClientIP,*string)

	// (May be required, Forces new resource) Protocol to use for routing traffic to the targets. Should be one of GENEVE, HTTP, HTTPS, TCP, TCP_UDP, TLS, or UDP. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
	protocol?: null | string @go(Protocol,*string)

	// Only applicable when protocol is HTTP or HTTPS. The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1
	protocolVersion?: null | string @go(ProtocolVersion,*string)

	// Whether to enable support for proxy protocol v2 on Network Load Balancers. See doc for more information. Default is false.
	proxyProtocolV2?: null | bool @go(ProxyProtocolV2,*bool)

	// Amount time for targets to warm up before the load balancer sends them a full share of requests. The range is 30-900 seconds or 0 to disable. The default value is 0 seconds.
	slowStart?: null | float64 @go(SlowStart,*float64)

	// Stickiness configuration block. Detailed below.
	stickiness?: [...#LBTargetGroupStickinessObservation] @go(Stickiness,[]LBTargetGroupStickinessObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Target failover block. Only applicable for Gateway Load Balancer target groups. See target_failover for more information.
	targetFailover?: [...#TargetFailoverObservation] @go(TargetFailover,[]TargetFailoverObservation)

	// (May be required, Forces new resource) Type of target that you must specify when registering targets with this target group. See doc for supported values. The default is instance.
	targetType?: null | string @go(TargetType,*string)

	// Identifier of the VPC in which to create the target group. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
	vpcId?: null | string @go(VPCID,*string)
}

#LBTargetGroupParameters: {
	// Whether to terminate connections at the end of the deregistration timeout on Network Load Balancers. See doc for more information. Default is false.
	// +kubebuilder:validation:Optional
	connectionTermination?: null | bool @go(ConnectionTermination,*bool)

	// Amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds.
	// +kubebuilder:validation:Optional
	deregistrationDelay?: null | string @go(DeregistrationDelay,*string)

	// Health Check configuration block. Detailed below.
	// +kubebuilder:validation:Optional
	healthCheck?: [...#HealthCheckParameters] @go(HealthCheck,[]HealthCheckParameters)

	// The type of IP addresses used by the target group, only supported when target type is set to ip. Possible values are ipv4 or ipv6.
	// +kubebuilder:validation:Optional
	ipAddressType?: null | string @go(IPAddressType,*string)

	// Whether the request and response headers exchanged between the load balancer and the Lambda function include arrays of values or strings. Only applies when target_type is lambda. Default is false.
	// +kubebuilder:validation:Optional
	lambdaMultiValueHeadersEnabled?: null | bool @go(LambdaMultiValueHeadersEnabled,*bool)

	// Determines how the load balancer selects targets when routing requests. Only applicable for Application Load Balancer Target Groups. The value is round_robin or least_outstanding_requests. The default is round_robin.
	// +kubebuilder:validation:Optional
	loadBalancingAlgorithmType?: null | string @go(LoadBalancingAlgorithmType,*string)

	// Name of the target group.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// (May be required, Forces new resource) Port on which targets receive traffic, unless overridden when registering a specific target. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Whether client IP preservation is enabled. See doc for more information.
	// +kubebuilder:validation:Optional
	preserveClientIp?: null | string @go(PreserveClientIP,*string)

	// (May be required, Forces new resource) Protocol to use for routing traffic to the targets. Should be one of GENEVE, HTTP, HTTPS, TCP, TCP_UDP, TLS, or UDP. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
	// +kubebuilder:validation:Optional
	protocol?: null | string @go(Protocol,*string)

	// Only applicable when protocol is HTTP or HTTPS. The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1
	// +kubebuilder:validation:Optional
	protocolVersion?: null | string @go(ProtocolVersion,*string)

	// Whether to enable support for proxy protocol v2 on Network Load Balancers. See doc for more information. Default is false.
	// +kubebuilder:validation:Optional
	proxyProtocolV2?: null | bool @go(ProxyProtocolV2,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Amount time for targets to warm up before the load balancer sends them a full share of requests. The range is 30-900 seconds or 0 to disable. The default value is 0 seconds.
	// +kubebuilder:validation:Optional
	slowStart?: null | float64 @go(SlowStart,*float64)

	// Stickiness configuration block. Detailed below.
	// +kubebuilder:validation:Optional
	stickiness?: [...#LBTargetGroupStickinessParameters] @go(Stickiness,[]LBTargetGroupStickinessParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Target failover block. Only applicable for Gateway Load Balancer target groups. See target_failover for more information.
	// +kubebuilder:validation:Optional
	targetFailover?: [...#TargetFailoverParameters] @go(TargetFailover,[]TargetFailoverParameters)

	// (May be required, Forces new resource) Type of target that you must specify when registering targets with this target group. See doc for supported values. The default is instance.
	// +kubebuilder:validation:Optional
	targetType?: null | string @go(TargetType,*string)

	// Identifier of the VPC in which to create the target group. Required when target_type is instance, ip or alb. Does not apply when target_type is lambda.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	vpcId?: null | string @go(VPCID,*string)
}

#LBTargetGroupStickinessObservation: {
	// Only used when the type is lb_cookie. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
	cookieDuration?: null | float64 @go(CookieDuration,*float64)

	// Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is app_cookie.
	cookieName?: null | string @go(CookieName,*string)

	// Whether health checks are enabled. Defaults to true.
	enabled?: null | bool @go(Enabled,*bool)

	// The type of sticky sessions. The only current possible values are lb_cookie, app_cookie for ALBs, source_ip for NLBs, and source_ip_dest_ip, source_ip_dest_ip_proto for GWLBs.
	type?: null | string @go(Type,*string)
}

#LBTargetGroupStickinessParameters: {
	// Only used when the type is lb_cookie. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
	// +kubebuilder:validation:Optional
	cookieDuration?: null | float64 @go(CookieDuration,*float64)

	// Name of the application based cookie. AWSALB, AWSALBAPP, and AWSALBTG prefixes are reserved and cannot be used. Only needed when type is app_cookie.
	// +kubebuilder:validation:Optional
	cookieName?: null | string @go(CookieName,*string)

	// Whether health checks are enabled. Defaults to true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// The type of sticky sessions. The only current possible values are lb_cookie, app_cookie for ALBs, source_ip for NLBs, and source_ip_dest_ip, source_ip_dest_ip_proto for GWLBs.
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)
}

#TargetFailoverObservation: {
	// Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are rebalance and no_rebalance. Must match the attribute value set for on_unhealthy. Default: no_rebalance.
	onDeregistration?: null | string @go(OnDeregistration,*string)

	// Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are rebalance and no_rebalance. Must match the attribute value set for on_deregistration. Default: no_rebalance.
	onUnhealthy?: null | string @go(OnUnhealthy,*string)
}

#TargetFailoverParameters: {
	// Indicates how the GWLB handles existing flows when a target is deregistered. Possible values are rebalance and no_rebalance. Must match the attribute value set for on_unhealthy. Default: no_rebalance.
	// +kubebuilder:validation:Required
	onDeregistration?: null | string @go(OnDeregistration,*string)

	// Indicates how the GWLB handles existing flows when a target is unhealthy. Possible values are rebalance and no_rebalance. Must match the attribute value set for on_deregistration. Default: no_rebalance.
	// +kubebuilder:validation:Required
	onUnhealthy?: null | string @go(OnUnhealthy,*string)
}

// LBTargetGroupSpec defines the desired state of LBTargetGroup
#LBTargetGroupSpec: {
	forProvider: #LBTargetGroupParameters @go(ForProvider)
}

// LBTargetGroupStatus defines the observed state of LBTargetGroup.
#LBTargetGroupStatus: {
	atProvider?: #LBTargetGroupObservation @go(AtProvider)
}

// LBTargetGroup is the Schema for the LBTargetGroups API. Provides a Target Group resource for use with Load Balancers.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LBTargetGroup: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	spec:    #LBTargetGroupSpec   @go(Spec)
	status?: #LBTargetGroupStatus @go(Status)
}

// LBTargetGroupList contains a list of LBTargetGroups
#LBTargetGroupList: {
	items: [...#LBTargetGroup] @go(Items,[]LBTargetGroup)
}
