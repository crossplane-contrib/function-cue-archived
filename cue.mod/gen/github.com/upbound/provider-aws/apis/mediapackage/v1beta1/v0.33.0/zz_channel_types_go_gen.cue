// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/mediapackage/v1beta1

package v1beta1

#ChannelObservation: {
	// The ARN of the channel
	arn?: null | string @go(Arn,*string)

	// A single item list of HLS ingest information
	hlsIngest?: [...#HlsIngestObservation] @go(HlsIngest,[]HlsIngestObservation)

	// The same as channel_id
	id?: null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ChannelParameters: {
	// A unique identifier describing the channel
	// +kubebuilder:validation:Required
	channelId?: null | string @go(ChannelID,*string)

	// A description of the channel
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#HlsIngestObservation: {
	// A list of the ingest endpoints
	ingestEndpoints?: [...#IngestEndpointsObservation] @go(IngestEndpoints,[]IngestEndpointsObservation)
}

#HlsIngestParameters: {
}

#IngestEndpointsObservation: {
	// The password
	password?: null | string @go(Password,*string)

	// The URL
	url?: null | string @go(URL,*string)

	// The username
	username?: null | string @go(Username,*string)
}

#IngestEndpointsParameters: {
}

// ChannelSpec defines the desired state of Channel
#ChannelSpec: {
	forProvider: #ChannelParameters @go(ForProvider)
}

// ChannelStatus defines the observed state of Channel.
#ChannelStatus: {
	atProvider?: #ChannelObservation @go(AtProvider)
}

// Channel is the Schema for the Channels API. Provides an AWS Elemental MediaPackage Channel.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Channel: {
	spec:    #ChannelSpec   @go(Spec)
	status?: #ChannelStatus @go(Status)
}

// ChannelList contains a list of Channels
#ChannelList: {
	items: [...#Channel] @go(Items,[]Channel)
}
