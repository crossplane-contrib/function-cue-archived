// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appmesh/v1beta1

package v1beta1

#ProviderObservation: {
}

#ProviderParameters: {
	// Virtual node associated with a virtual service.
	// +kubebuilder:validation:Optional
	virtualNode?: [...#ProviderVirtualNodeParameters] @go(VirtualNode,[]ProviderVirtualNodeParameters)

	// Virtual router associated with a virtual service.
	// +kubebuilder:validation:Optional
	virtualRouter?: [...#ProviderVirtualRouterParameters] @go(VirtualRouter,[]ProviderVirtualRouterParameters)
}

#ProviderVirtualNodeObservation: {
}

#ProviderVirtualNodeParameters: {
	// Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.VirtualNode
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	virtualNodeName?: null | string @go(VirtualNodeName,*string)
}

#ProviderVirtualRouterObservation: {
}

#ProviderVirtualRouterParameters: {
	// Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.VirtualRouter
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	virtualRouterName?: null | string @go(VirtualRouterName,*string)
}

#VirtualServiceObservation_2: {
	// ARN of the virtual service.
	arn?: null | string @go(Arn,*string)

	// Creation date of the virtual service.
	createdDate?: null | string @go(CreatedDate,*string)

	// ID of the virtual service.
	id?: null | string @go(ID,*string)

	// Last update date of the virtual service.
	lastUpdatedDate?: null | string @go(LastUpdatedDate,*string)

	// Resource owner's AWS account ID.
	resourceOwner?: null | string @go(ResourceOwner,*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#VirtualServiceParameters_2: {
	// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.Mesh
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual service. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Virtual service specification to apply.
	// +kubebuilder:validation:Required
	spec: [...#VirtualServiceSpecParameters] @go(Spec,[]VirtualServiceSpecParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VirtualServiceSpecObservation: {
}

#VirtualServiceSpecParameters: {
	// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
	// +kubebuilder:validation:Optional
	provider?: [...#ProviderParameters] @go(Provider,[]ProviderParameters)
}

// VirtualServiceSpec defines the desired state of VirtualService
#VirtualServiceSpec: {
	forProvider: #VirtualServiceParameters_2 @go(ForProvider)
}

// VirtualServiceStatus defines the observed state of VirtualService.
#VirtualServiceStatus: {
	atProvider?: #VirtualServiceObservation_2 @go(AtProvider)
}

// VirtualService is the Schema for the VirtualServices API. Provides an AWS App Mesh virtual service resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VirtualService: {
	spec:    #VirtualServiceSpec   @go(Spec)
	status?: #VirtualServiceStatus @go(Status)
}

// VirtualServiceList contains a list of VirtualServices
#VirtualServiceList: {
	items: [...#VirtualService] @go(Items,[]VirtualService)
}
