// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appmesh/v1beta1

package v1beta1

#AwsCloudMapObservation: {
}

#AwsCloudMapParameters: {
	// String map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
	// +kubebuilder:validation:Optional
	attributes?: {[string]: null | string} @go(Attributes,map[string]*string)

	// Name of the AWS Cloud Map namespace to use.
	// Use the aws_service_discovery_http_namespace resource to configure a Cloud Map namespace. Must be between 1 and 1024 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/servicediscovery/v1beta1.HTTPNamespace
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	namespaceName?: null | string @go(NamespaceName,*string)

	// attribute of the dns object to hostname.
	// +kubebuilder:validation:Required
	serviceName?: null | string @go(ServiceName,*string)
}

#BackendDefaultsClientPolicyObservation: {
}

#BackendDefaultsClientPolicyParameters: {
	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	tls?: [...#BackendDefaultsClientPolicyTLSParameters] @go(TLS,[]BackendDefaultsClientPolicyTLSParameters)
}

#BackendDefaultsClientPolicyTLSCertificateObservation: {
}

#BackendDefaultsClientPolicyTLSCertificateParameters: {
	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#ClientPolicyTLSCertificateFileParameters] @go(File,[]ClientPolicyTLSCertificateFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#ClientPolicyTLSCertificateSdsParameters] @go(Sds,[]ClientPolicyTLSCertificateSdsParameters)
}

#BackendDefaultsClientPolicyTLSObservation: {
}

#BackendDefaultsClientPolicyTLSParameters: {
	// Virtual node's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Optional
	certificate?: [...#BackendDefaultsClientPolicyTLSCertificateParameters] @go(Certificate,[]BackendDefaultsClientPolicyTLSCertificateParameters)

	// Whether the policy is enforced. Default is true.
	// +kubebuilder:validation:Optional
	enforce?: null | bool @go(Enforce,*bool)

	// One or more ports that the policy is enforced for.
	// +kubebuilder:validation:Optional
	ports?: [...null | float64] @go(Ports,[]*float64)

	// TLS validation context.
	// +kubebuilder:validation:Required
	validation: [...#BackendDefaultsClientPolicyTLSValidationParameters] @go(Validation,[]BackendDefaultsClientPolicyTLSValidationParameters)
}

#BackendDefaultsClientPolicyTLSValidationObservation: {
}

#BackendDefaultsClientPolicyTLSValidationParameters: {
	// SANs for a TLS validation context.
	// +kubebuilder:validation:Optional
	subjectAlternativeNames?: [...#ClientPolicyTLSValidationSubjectAlternativeNamesParameters] @go(SubjectAlternativeNames,[]ClientPolicyTLSValidationSubjectAlternativeNamesParameters)

	// TLS validation context trust.
	// +kubebuilder:validation:Required
	trust: [...#ClientPolicyTLSValidationTrustParameters] @go(Trust,[]ClientPolicyTLSValidationTrustParameters)
}

#BackendObservation: {
}

#BackendParameters: {
	// Virtual service to use as a backend for a virtual node.
	// +kubebuilder:validation:Required
	virtualService: [...#BackendVirtualServiceParameters] @go(VirtualService,[]BackendVirtualServiceParameters)
}

#BackendVirtualServiceObservation: {
}

#BackendVirtualServiceParameters: {
	// Client policy for the backend.
	// +kubebuilder:validation:Optional
	clientPolicy?: [...#VirtualServiceClientPolicyParameters] @go(ClientPolicy,[]VirtualServiceClientPolicyParameters)

	// Name of the virtual service that is acting as a virtual node backend. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#BaseEjectionDurationObservation: {
}

#BaseEjectionDurationParameters: {
	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)

	// Number of time units. Minimum value of 0.
	// +kubebuilder:validation:Required
	value?: null | float64 @go(Value,*float64)
}

#ClientPolicyTLSCertificateFileObservation: {
}

#ClientPolicyTLSCertificateFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	certificateChain?: null | string @go(CertificateChain,*string)

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Required
	privateKey?: null | string @go(PrivateKey,*string)
}

#ClientPolicyTLSCertificateObservation: {
}

#ClientPolicyTLSCertificateParameters: {
	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#TLSCertificateFileParameters] @go(File,[]TLSCertificateFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#TLSCertificateSdsParameters] @go(Sds,[]TLSCertificateSdsParameters)
}

#ClientPolicyTLSCertificateSdsObservation: {
}

#ClientPolicyTLSCertificateSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#ClientPolicyTLSObservation: {
}

#ClientPolicyTLSParameters: {
	// Virtual node's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Optional
	certificate?: [...#ClientPolicyTLSCertificateParameters] @go(Certificate,[]ClientPolicyTLSCertificateParameters)

	// Whether the policy is enforced. Default is true.
	// +kubebuilder:validation:Optional
	enforce?: null | bool @go(Enforce,*bool)

	// One or more ports that the policy is enforced for.
	// +kubebuilder:validation:Optional
	ports?: [...null | float64] @go(Ports,[]*float64)

	// TLS validation context.
	// +kubebuilder:validation:Required
	validation: [...#ClientPolicyTLSValidationParameters] @go(Validation,[]ClientPolicyTLSValidationParameters)
}

#ClientPolicyTLSValidationObservation: {
}

#ClientPolicyTLSValidationParameters: {
	// SANs for a TLS validation context.
	// +kubebuilder:validation:Optional
	subjectAlternativeNames?: [...#TLSValidationSubjectAlternativeNamesParameters] @go(SubjectAlternativeNames,[]TLSValidationSubjectAlternativeNamesParameters)

	// TLS validation context trust.
	// +kubebuilder:validation:Required
	trust: [...#TLSValidationTrustParameters] @go(Trust,[]TLSValidationTrustParameters)
}

#ClientPolicyTLSValidationSubjectAlternativeNamesMatchObservation: {
}

#ClientPolicyTLSValidationSubjectAlternativeNamesMatchParameters: {
	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Required
	exact: [...null | string] @go(Exact,[]*string)
}

#ClientPolicyTLSValidationSubjectAlternativeNamesObservation: {
}

#ClientPolicyTLSValidationSubjectAlternativeNamesParameters: {
	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Required
	match: [...#ClientPolicyTLSValidationSubjectAlternativeNamesMatchParameters] @go(Match,[]ClientPolicyTLSValidationSubjectAlternativeNamesMatchParameters)
}

#ClientPolicyTLSValidationTrustFileObservation: {
}

#ClientPolicyTLSValidationTrustFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	certificateChain?: null | string @go(CertificateChain,*string)
}

#ClientPolicyTLSValidationTrustObservation: {
}

#ClientPolicyTLSValidationTrustParameters: {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	acm?: [...#ValidationTrustAcmParameters] @go(Acm,[]ValidationTrustAcmParameters)

	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#ClientPolicyTLSValidationTrustFileParameters] @go(File,[]ClientPolicyTLSValidationTrustFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#ClientPolicyTLSValidationTrustSdsParameters] @go(Sds,[]ClientPolicyTLSValidationTrustSdsParameters)
}

#ClientPolicyTLSValidationTrustSdsObservation: {
}

#ClientPolicyTLSValidationTrustSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#ConnectionPoolGRPCObservation: {
}

#ConnectionPoolGRPCParameters: {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Required
	maxRequests?: null | float64 @go(MaxRequests,*float64)
}

#ConnectionPoolHTTPObservation: {
}

#ConnectionPoolHTTPParameters: {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Required
	maxConnections?: null | float64 @go(MaxConnections,*float64)

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	maxPendingRequests?: null | float64 @go(MaxPendingRequests,*float64)
}

#ConnectionPoolHttp2Observation: {
}

#ConnectionPoolHttp2Parameters: {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Required
	maxRequests?: null | float64 @go(MaxRequests,*float64)
}

#DNSObservation: {
}

#DNSParameters: {
	// DNS host name for your virtual node.
	// +kubebuilder:validation:Required
	hostname?: null | string @go(Hostname,*string)
}

#GRPCIdleObservation: {
}

#GRPCIdleParameters: {
	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)

	// Number of time units. Minimum value of 0.
	// +kubebuilder:validation:Required
	value?: null | float64 @go(Value,*float64)
}

#GRPCPerRequestObservation: {
}

#GRPCPerRequestParameters: {
	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)

	// Number of time units. Minimum value of 0.
	// +kubebuilder:validation:Required
	value?: null | float64 @go(Value,*float64)
}

#HTTPIdleObservation: {
}

#HTTPIdleParameters: {
	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)

	// Number of time units. Minimum value of 0.
	// +kubebuilder:validation:Required
	value?: null | float64 @go(Value,*float64)
}

#HTTPPerRequestObservation: {
}

#HTTPPerRequestParameters: {
	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)

	// Number of time units. Minimum value of 0.
	// +kubebuilder:validation:Required
	value?: null | float64 @go(Value,*float64)
}

#Http2IdleObservation: {
}

#Http2IdleParameters: {
	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)

	// Number of time units. Minimum value of 0.
	// +kubebuilder:validation:Required
	value?: null | float64 @go(Value,*float64)
}

#Http2PerRequestObservation: {
}

#Http2PerRequestParameters: {
	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)

	// Number of time units. Minimum value of 0.
	// +kubebuilder:validation:Required
	value?: null | float64 @go(Value,*float64)
}

#IntervalObservation: {
}

#IntervalParameters: {
	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)

	// Number of time units. Minimum value of 0.
	// +kubebuilder:validation:Required
	value?: null | float64 @go(Value,*float64)
}

#ListenerConnectionPoolObservation: {
}

#ListenerConnectionPoolParameters: {
	// Connection pool information for gRPC listeners.
	// +kubebuilder:validation:Optional
	grpc?: [...#ConnectionPoolGRPCParameters] @go(GRPC,[]ConnectionPoolGRPCParameters)

	// Connection pool information for HTTP listeners.
	// +kubebuilder:validation:Optional
	http?: [...#ConnectionPoolHTTPParameters] @go(HTTP,[]ConnectionPoolHTTPParameters)

	// Connection pool information for HTTP2 listeners.
	// +kubebuilder:validation:Optional
	http2?: [...#ConnectionPoolHttp2Parameters] @go(Http2,[]ConnectionPoolHttp2Parameters)

	// Connection pool information for TCP listeners.
	// +kubebuilder:validation:Optional
	tcp?: [...#TCPParameters] @go(TCP,[]TCPParameters)
}

#ListenerHealthCheckObservation: {
}

#ListenerHealthCheckParameters: {
	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	// +kubebuilder:validation:Required
	healthyThreshold?: null | float64 @go(HealthyThreshold,*float64)

	// Time period in milliseconds between each health check execution.
	// +kubebuilder:validation:Required
	intervalMillis?: null | float64 @go(IntervalMillis,*float64)

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Port used for the port mapping.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Required
	protocol?: null | string @go(Protocol,*string)

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	// +kubebuilder:validation:Required
	timeoutMillis?: null | float64 @go(TimeoutMillis,*float64)

	// Number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
	// +kubebuilder:validation:Required
	unhealthyThreshold?: null | float64 @go(UnhealthyThreshold,*float64)
}

#ListenerPortMappingObservation: {
}

#ListenerPortMappingParameters: {
	// Port used for the port mapping.
	// +kubebuilder:validation:Required
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Required
	protocol?: null | string @go(Protocol,*string)
}

#ListenerTLSCertificateFileObservation: {
}

#ListenerTLSCertificateFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	certificateChain?: null | string @go(CertificateChain,*string)

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Required
	privateKey?: null | string @go(PrivateKey,*string)
}

#ListenerTLSCertificateObservation: {
}

#ListenerTLSCertificateParameters: {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	acm?: [...#TLSCertificateAcmParameters] @go(Acm,[]TLSCertificateAcmParameters)

	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#ListenerTLSCertificateFileParameters] @go(File,[]ListenerTLSCertificateFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#ListenerTLSCertificateSdsParameters] @go(Sds,[]ListenerTLSCertificateSdsParameters)
}

#ListenerTLSCertificateSdsObservation: {
}

#ListenerTLSCertificateSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#ListenerTLSValidationObservation: {
}

#ListenerTLSValidationParameters: {
	// SANs for a TLS validation context.
	// +kubebuilder:validation:Optional
	subjectAlternativeNames?: [...#ListenerTLSValidationSubjectAlternativeNamesParameters] @go(SubjectAlternativeNames,[]ListenerTLSValidationSubjectAlternativeNamesParameters)

	// TLS validation context trust.
	// +kubebuilder:validation:Required
	trust: [...#ListenerTLSValidationTrustParameters] @go(Trust,[]ListenerTLSValidationTrustParameters)
}

#ListenerTLSValidationSubjectAlternativeNamesMatchObservation: {
}

#ListenerTLSValidationSubjectAlternativeNamesMatchParameters: {
	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Required
	exact: [...null | string] @go(Exact,[]*string)
}

#ListenerTLSValidationSubjectAlternativeNamesObservation: {
}

#ListenerTLSValidationSubjectAlternativeNamesParameters: {
	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Required
	match: [...#ListenerTLSValidationSubjectAlternativeNamesMatchParameters] @go(Match,[]ListenerTLSValidationSubjectAlternativeNamesMatchParameters)
}

#ListenerTLSValidationTrustFileObservation: {
}

#ListenerTLSValidationTrustFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	certificateChain?: null | string @go(CertificateChain,*string)
}

#ListenerTLSValidationTrustObservation: {
}

#ListenerTLSValidationTrustParameters: {
	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#ListenerTLSValidationTrustFileParameters] @go(File,[]ListenerTLSValidationTrustFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#ListenerTLSValidationTrustSdsParameters] @go(Sds,[]ListenerTLSValidationTrustSdsParameters)
}

#ListenerTLSValidationTrustSdsObservation: {
}

#ListenerTLSValidationTrustSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#ListenerTimeoutObservation: {
}

#ListenerTimeoutParameters: {
	// Connection pool information for gRPC listeners.
	// +kubebuilder:validation:Optional
	grpc?: [...#TimeoutGRPCParameters] @go(GRPC,[]TimeoutGRPCParameters)

	// Connection pool information for HTTP listeners.
	// +kubebuilder:validation:Optional
	http?: [...#TimeoutHTTPParameters] @go(HTTP,[]TimeoutHTTPParameters)

	// Connection pool information for HTTP2 listeners.
	// +kubebuilder:validation:Optional
	http2?: [...#TimeoutHttp2Parameters] @go(Http2,[]TimeoutHttp2Parameters)

	// Connection pool information for TCP listeners.
	// +kubebuilder:validation:Optional
	tcp?: [...#TimeoutTCPParameters] @go(TCP,[]TimeoutTCPParameters)
}

#LoggingAccessLogFileObservation: {
}

#LoggingAccessLogFileParameters: {
	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	path?: null | string @go(Path,*string)
}

#LoggingAccessLogObservation: {
}

#LoggingAccessLogParameters: {
	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#LoggingAccessLogFileParameters] @go(File,[]LoggingAccessLogFileParameters)
}

#OutlierDetectionObservation: {
}

#OutlierDetectionParameters: {
	// Base amount of time for which a host is ejected.
	// +kubebuilder:validation:Required
	baseEjectionDuration: [...#BaseEjectionDurationParameters] @go(BaseEjectionDuration,[]BaseEjectionDurationParameters)

	// Time interval between ejection sweep analysis.
	// +kubebuilder:validation:Required
	interval: [...#IntervalParameters] @go(Interval,[]IntervalParameters)

	// Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
	// Minimum value of 0. Maximum value of 100.
	// +kubebuilder:validation:Required
	maxEjectionPercent?: null | float64 @go(MaxEjectionPercent,*float64)

	// Number of consecutive 5xx errors required for ejection. Minimum value of 1.
	// +kubebuilder:validation:Required
	maxServerErrors?: null | float64 @go(MaxServerErrors,*float64)
}

#ServiceDiscoveryObservation: {
}

#ServiceDiscoveryParameters: {
	// Any AWS Cloud Map information for the virtual node.
	// +kubebuilder:validation:Optional
	awsCloudMap?: [...#AwsCloudMapParameters] @go(AwsCloudMap,[]AwsCloudMapParameters)

	// DNS service name for the virtual node.
	// +kubebuilder:validation:Optional
	dns?: [...#DNSParameters] @go(DNS,[]DNSParameters)
}

#SpecBackendDefaultsObservation: {
}

#SpecBackendDefaultsParameters: {
	// Client policy for the backend.
	// +kubebuilder:validation:Optional
	clientPolicy?: [...#BackendDefaultsClientPolicyParameters] @go(ClientPolicy,[]BackendDefaultsClientPolicyParameters)
}

#SpecListenerObservation: {
}

#SpecListenerParameters: {
	// Connection pool information for the listener.
	// +kubebuilder:validation:Optional
	connectionPool?: [...#ListenerConnectionPoolParameters] @go(ConnectionPool,[]ListenerConnectionPoolParameters)

	// Health check information for the listener.
	// +kubebuilder:validation:Optional
	healthCheck?: [...#ListenerHealthCheckParameters] @go(HealthCheck,[]ListenerHealthCheckParameters)

	// Outlier detection information for the listener.
	// +kubebuilder:validation:Optional
	outlierDetection?: [...#OutlierDetectionParameters] @go(OutlierDetection,[]OutlierDetectionParameters)

	// Port mapping information for the listener.
	// +kubebuilder:validation:Required
	portMapping: [...#ListenerPortMappingParameters] @go(PortMapping,[]ListenerPortMappingParameters)

	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	tls?: [...#SpecListenerTLSParameters] @go(TLS,[]SpecListenerTLSParameters)

	// Timeouts for different protocols.
	// +kubebuilder:validation:Optional
	timeout?: [...#ListenerTimeoutParameters] @go(Timeout,[]ListenerTimeoutParameters)
}

#SpecListenerTLSObservation: {
}

#SpecListenerTLSParameters: {
	// Virtual node's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Required
	certificate: [...#ListenerTLSCertificateParameters] @go(Certificate,[]ListenerTLSCertificateParameters)

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)

	// TLS validation context.
	// +kubebuilder:validation:Optional
	validation?: [...#ListenerTLSValidationParameters] @go(Validation,[]ListenerTLSValidationParameters)
}

#SpecLoggingObservation: {
}

#SpecLoggingParameters: {
	// Access log configuration for a virtual node.
	// +kubebuilder:validation:Optional
	accessLog?: [...#LoggingAccessLogParameters] @go(AccessLog,[]LoggingAccessLogParameters)
}

#TCPIdleObservation: {
}

#TCPIdleParameters: {
	// Unit of time. Valid values: ms, s.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)

	// Number of time units. Minimum value of 0.
	// +kubebuilder:validation:Required
	value?: null | float64 @go(Value,*float64)
}

#TCPObservation: {
}

#TCPParameters: {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Required
	maxConnections?: null | float64 @go(MaxConnections,*float64)
}

#TLSCertificateAcmObservation: {
}

#TLSCertificateAcmParameters: {
	// ARN for the certificate.
	// +kubebuilder:validation:Required
	certificateArn?: null | string @go(CertificateArn,*string)
}

#TLSCertificateFileObservation: {
}

#TLSCertificateFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	certificateChain?: null | string @go(CertificateChain,*string)

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Required
	privateKey?: null | string @go(PrivateKey,*string)
}

#TLSCertificateSdsObservation: {
}

#TLSCertificateSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#TLSValidationSubjectAlternativeNamesMatchObservation: {
}

#TLSValidationSubjectAlternativeNamesMatchParameters: {
	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Required
	exact: [...null | string] @go(Exact,[]*string)
}

#TLSValidationSubjectAlternativeNamesObservation: {
}

#TLSValidationSubjectAlternativeNamesParameters: {
	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Required
	match: [...#TLSValidationSubjectAlternativeNamesMatchParameters] @go(Match,[]TLSValidationSubjectAlternativeNamesMatchParameters)
}

#TLSValidationTrustFileObservation: {
}

#TLSValidationTrustFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	certificateChain?: null | string @go(CertificateChain,*string)
}

#TLSValidationTrustObservation: {
}

#TLSValidationTrustParameters: {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	acm?: [...#TrustAcmParameters] @go(Acm,[]TrustAcmParameters)

	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#TLSValidationTrustFileParameters] @go(File,[]TLSValidationTrustFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#TLSValidationTrustSdsParameters] @go(Sds,[]TLSValidationTrustSdsParameters)
}

#TLSValidationTrustSdsObservation: {
}

#TLSValidationTrustSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#TimeoutGRPCObservation: {
}

#TimeoutGRPCParameters: {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	// +kubebuilder:validation:Optional
	idle?: [...#GRPCIdleParameters] @go(Idle,[]GRPCIdleParameters)

	// Per request timeout.
	// +kubebuilder:validation:Optional
	perRequest?: [...#GRPCPerRequestParameters] @go(PerRequest,[]GRPCPerRequestParameters)
}

#TimeoutHTTPObservation: {
}

#TimeoutHTTPParameters: {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	// +kubebuilder:validation:Optional
	idle?: [...#HTTPIdleParameters] @go(Idle,[]HTTPIdleParameters)

	// Per request timeout.
	// +kubebuilder:validation:Optional
	perRequest?: [...#HTTPPerRequestParameters] @go(PerRequest,[]HTTPPerRequestParameters)
}

#TimeoutHttp2Observation: {
}

#TimeoutHttp2Parameters: {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	// +kubebuilder:validation:Optional
	idle?: [...#Http2IdleParameters] @go(Idle,[]Http2IdleParameters)

	// Per request timeout.
	// +kubebuilder:validation:Optional
	perRequest?: [...#Http2PerRequestParameters] @go(PerRequest,[]Http2PerRequestParameters)
}

#TimeoutTCPObservation: {
}

#TimeoutTCPParameters: {
	// Idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
	// +kubebuilder:validation:Optional
	idle?: [...#TCPIdleParameters] @go(Idle,[]TCPIdleParameters)
}

#TrustAcmObservation: {
}

#TrustAcmParameters: {
	// One or more ACM ARNs.
	// +kubebuilder:validation:Required
	certificateAuthorityArns: [...null | string] @go(CertificateAuthorityArns,[]*string)
}

#ValidationTrustAcmObservation: {
}

#ValidationTrustAcmParameters: {
	// One or more ACM ARNs.
	// +kubebuilder:validation:Required
	certificateAuthorityArns: [...null | string] @go(CertificateAuthorityArns,[]*string)
}

#VirtualNodeObservation: {
	// ARN of the virtual node.
	arn?: null | string @go(Arn,*string)

	// Creation date of the virtual node.
	createdDate?: null | string @go(CreatedDate,*string)

	// ID of the virtual node.
	id?: null | string @go(ID,*string)

	// Last update date of the virtual node.
	lastUpdatedDate?: null | string @go(LastUpdatedDate,*string)

	// Resource owner's AWS account ID.
	resourceOwner?: null | string @go(ResourceOwner,*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#VirtualNodeParameters: {
	// Name of the service mesh in which to create the virtual node. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.Mesh
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual node. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Virtual node specification to apply.
	// +kubebuilder:validation:Required
	spec: [...#VirtualNodeSpecParameters] @go(Spec,[]VirtualNodeSpecParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VirtualNodeSpecObservation: {
}

#VirtualNodeSpecParameters: {
	// Backends to which the virtual node is expected to send outbound traffic.
	// +kubebuilder:validation:Optional
	backend?: [...#BackendParameters] @go(Backend,[]BackendParameters)

	// Defaults for backends.
	// +kubebuilder:validation:Optional
	backendDefaults?: [...#SpecBackendDefaultsParameters] @go(BackendDefaults,[]SpecBackendDefaultsParameters)

	// Listeners from which the virtual node is expected to receive inbound traffic.
	// +kubebuilder:validation:Optional
	listener?: [...#SpecListenerParameters] @go(Listener,[]SpecListenerParameters)

	// Inbound and outbound access logging information for the virtual node.
	// +kubebuilder:validation:Optional
	logging?: [...#SpecLoggingParameters] @go(Logging,[]SpecLoggingParameters)

	// Service discovery information for the virtual node.
	// +kubebuilder:validation:Optional
	serviceDiscovery?: [...#ServiceDiscoveryParameters] @go(ServiceDiscovery,[]ServiceDiscoveryParameters)
}

#VirtualServiceClientPolicyObservation: {
}

#VirtualServiceClientPolicyParameters: {
	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	tls?: [...#ClientPolicyTLSParameters] @go(TLS,[]ClientPolicyTLSParameters)
}

// VirtualNodeSpec defines the desired state of VirtualNode
#VirtualNodeSpec: {
	forProvider: #VirtualNodeParameters @go(ForProvider)
}

// VirtualNodeStatus defines the observed state of VirtualNode.
#VirtualNodeStatus: {
	atProvider?: #VirtualNodeObservation @go(AtProvider)
}

// VirtualNode is the Schema for the VirtualNodes API. Provides an AWS App Mesh virtual node resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VirtualNode: {
	spec:    #VirtualNodeSpec   @go(Spec)
	status?: #VirtualNodeStatus @go(Status)
}

// VirtualNodeList contains a list of VirtualNodes
#VirtualNodeList: {
	items: [...#VirtualNode] @go(Items,[]VirtualNode)
}
