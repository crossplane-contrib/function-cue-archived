// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appmesh/v1beta1

package v1beta1

#AccessLogFileObservation: {
}

#AccessLogFileParameters: {
	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	path?: null | string @go(Path,*string)
}

#AccessLogObservation: {
}

#AccessLogParameters: {
	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#AccessLogFileParameters] @go(File,[]AccessLogFileParameters)
}

#AcmObservation: {
}

#AcmParameters: {
	// One or more ACM ARNs.
	// +kubebuilder:validation:Required
	certificateAuthorityArns: [...null | string] @go(CertificateAuthorityArns,[]*string)
}

#BackendDefaultsObservation: {
}

#BackendDefaultsParameters: {
	// Default client policy for virtual gateway backends.
	// +kubebuilder:validation:Optional
	clientPolicy?: [...#ClientPolicyParameters] @go(ClientPolicy,[]ClientPolicyParameters)
}

#CertificateAcmObservation: {
}

#CertificateAcmParameters: {
	// ARN for the certificate.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/acm/v1beta1.Certificate
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	certificateArn?: null | string @go(CertificateArn,*string)
}

#CertificateFileObservation: {
}

#CertificateFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	certificateChain?: null | string @go(CertificateChain,*string)

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Required
	privateKey?: null | string @go(PrivateKey,*string)
}

#CertificateObservation: {
}

#CertificateParameters: {
	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#FileParameters] @go(File,[]FileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#SdsParameters] @go(Sds,[]SdsParameters)
}

#CertificateSdsObservation: {
}

#CertificateSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#ClientPolicyObservation: {
}

#ClientPolicyParameters: {
	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	tls?: [...#TLSParameters] @go(TLS,[]TLSParameters)
}

#ConnectionPoolObservation: {
}

#ConnectionPoolParameters: {
	// Connection pool information for gRPC listeners.
	// +kubebuilder:validation:Optional
	grpc?: [...#GRPCParameters] @go(GRPC,[]GRPCParameters)

	// Connection pool information for HTTP listeners.
	// +kubebuilder:validation:Optional
	http?: [...#HTTPParameters] @go(HTTP,[]HTTPParameters)

	// Connection pool information for HTTP2 listeners.
	// +kubebuilder:validation:Optional
	http2?: [...#Http2Parameters] @go(Http2,[]Http2Parameters)
}

#FileObservation: {
}

#FileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	certificateChain?: null | string @go(CertificateChain,*string)

	// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
	// +kubebuilder:validation:Required
	privateKey?: null | string @go(PrivateKey,*string)
}

#GRPCObservation: {
}

#GRPCParameters: {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Required
	maxRequests?: null | float64 @go(MaxRequests,*float64)
}

#HTTPObservation: {
}

#HTTPParameters: {
	// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Required
	maxConnections?: null | float64 @go(MaxConnections,*float64)

	// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Optional
	maxPendingRequests?: null | float64 @go(MaxPendingRequests,*float64)
}

#HealthCheckObservation: {
}

#HealthCheckParameters: {
	// Number of consecutive successful health checks that must occur before declaring listener healthy.
	// +kubebuilder:validation:Required
	healthyThreshold?: null | float64 @go(HealthyThreshold,*float64)

	// Time period in milliseconds between each health check execution.
	// +kubebuilder:validation:Required
	intervalMillis?: null | float64 @go(IntervalMillis,*float64)

	// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	path?: null | string @go(Path,*string)

	// Port used for the port mapping.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Required
	protocol?: null | string @go(Protocol,*string)

	// Amount of time to wait when receiving a response from the health check, in milliseconds.
	// +kubebuilder:validation:Required
	timeoutMillis?: null | float64 @go(TimeoutMillis,*float64)

	// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
	// +kubebuilder:validation:Required
	unhealthyThreshold?: null | float64 @go(UnhealthyThreshold,*float64)
}

#Http2Observation: {
}

#Http2Parameters: {
	// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
	// +kubebuilder:validation:Required
	maxRequests?: null | float64 @go(MaxRequests,*float64)
}

#ListenerObservation: {
}

#ListenerParameters: {
	// Connection pool information for the listener.
	// +kubebuilder:validation:Optional
	connectionPool?: [...#ConnectionPoolParameters] @go(ConnectionPool,[]ConnectionPoolParameters)

	// Health check information for the listener.
	// +kubebuilder:validation:Optional
	healthCheck?: [...#HealthCheckParameters] @go(HealthCheck,[]HealthCheckParameters)

	// Port mapping information for the listener.
	// +kubebuilder:validation:Required
	portMapping: [...#PortMappingParameters] @go(PortMapping,[]PortMappingParameters)

	// Transport Layer Security (TLS) client policy.
	// +kubebuilder:validation:Optional
	tls?: [...#ListenerTLSParameters] @go(TLS,[]ListenerTLSParameters)
}

#ListenerTLSObservation: {
}

#ListenerTLSParameters: {
	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Required
	certificate: [...#TLSCertificateParameters] @go(Certificate,[]TLSCertificateParameters)

	// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)

	// TLS validation context.
	// +kubebuilder:validation:Optional
	validation?: [...#TLSValidationParameters] @go(Validation,[]TLSValidationParameters)
}

#LoggingObservation: {
}

#LoggingParameters: {
	// Access log configuration for a virtual gateway.
	// +kubebuilder:validation:Optional
	accessLog?: [...#AccessLogParameters] @go(AccessLog,[]AccessLogParameters)
}

#PortMappingObservation: {
}

#PortMappingParameters: {
	// Port used for the port mapping.
	// +kubebuilder:validation:Required
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
	// +kubebuilder:validation:Required
	protocol?: null | string @go(Protocol,*string)
}

#SdsObservation: {
}

#SdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#SubjectAlternativeNamesMatchObservation: {
}

#SubjectAlternativeNamesMatchParameters: {
	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Required
	exact: [...null | string] @go(Exact,[]*string)
}

#SubjectAlternativeNamesObservation: {
}

#SubjectAlternativeNamesParameters: {
	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Required
	match: [...#SubjectAlternativeNamesMatchParameters] @go(Match,[]SubjectAlternativeNamesMatchParameters)
}

#TLSCertificateObservation: {
}

#TLSCertificateParameters: {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	acm?: [...#CertificateAcmParameters] @go(Acm,[]CertificateAcmParameters)

	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#CertificateFileParameters] @go(File,[]CertificateFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#CertificateSdsParameters] @go(Sds,[]CertificateSdsParameters)
}

#TLSObservation: {
}

#TLSParameters: {
	// Virtual gateway's client's Transport Layer Security (TLS) certificate.
	// +kubebuilder:validation:Optional
	certificate?: [...#CertificateParameters] @go(Certificate,[]CertificateParameters)

	// Whether the policy is enforced. Default is true.
	// +kubebuilder:validation:Optional
	enforce?: null | bool @go(Enforce,*bool)

	// One or more ports that the policy is enforced for.
	// +kubebuilder:validation:Optional
	ports?: [...null | float64] @go(Ports,[]*float64)

	// TLS validation context.
	// +kubebuilder:validation:Required
	validation: [...#ValidationParameters] @go(Validation,[]ValidationParameters)
}

#TLSValidationObservation: {
}

#TLSValidationParameters: {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	// +kubebuilder:validation:Optional
	subjectAlternativeNames?: [...#ValidationSubjectAlternativeNamesParameters] @go(SubjectAlternativeNames,[]ValidationSubjectAlternativeNamesParameters)

	// TLS validation context trust.
	// +kubebuilder:validation:Required
	trust: [...#ValidationTrustParameters] @go(Trust,[]ValidationTrustParameters)
}

#TrustFileObservation: {
}

#TrustFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	certificateChain?: null | string @go(CertificateChain,*string)
}

#TrustObservation: {
}

#TrustParameters: {
	// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
	// +kubebuilder:validation:Optional
	acm?: [...#AcmParameters] @go(Acm,[]AcmParameters)

	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#TrustFileParameters] @go(File,[]TrustFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#TrustSdsParameters] @go(Sds,[]TrustSdsParameters)
}

#TrustSdsObservation: {
}

#TrustSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#ValidationObservation: {
}

#ValidationParameters: {
	// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
	// +kubebuilder:validation:Optional
	subjectAlternativeNames?: [...#SubjectAlternativeNamesParameters] @go(SubjectAlternativeNames,[]SubjectAlternativeNamesParameters)

	// TLS validation context trust.
	// +kubebuilder:validation:Required
	trust: [...#TrustParameters] @go(Trust,[]TrustParameters)
}

#ValidationSubjectAlternativeNamesMatchObservation: {
}

#ValidationSubjectAlternativeNamesMatchParameters: {
	// Values sent must match the specified values exactly.
	// +kubebuilder:validation:Required
	exact: [...null | string] @go(Exact,[]*string)
}

#ValidationSubjectAlternativeNamesObservation: {
}

#ValidationSubjectAlternativeNamesParameters: {
	// Criteria for determining a SAN's match.
	// +kubebuilder:validation:Required
	match: [...#ValidationSubjectAlternativeNamesMatchParameters] @go(Match,[]ValidationSubjectAlternativeNamesMatchParameters)
}

#ValidationTrustFileObservation: {
}

#ValidationTrustFileParameters: {
	// Certificate chain for the certificate.
	// +kubebuilder:validation:Required
	certificateChain?: null | string @go(CertificateChain,*string)
}

#ValidationTrustObservation: {
}

#ValidationTrustParameters: {
	// Local file certificate.
	// +kubebuilder:validation:Optional
	file?: [...#ValidationTrustFileParameters] @go(File,[]ValidationTrustFileParameters)

	// A Secret Discovery Service certificate.
	// +kubebuilder:validation:Optional
	sds?: [...#ValidationTrustSdsParameters] @go(Sds,[]ValidationTrustSdsParameters)
}

#ValidationTrustSdsObservation: {
}

#ValidationTrustSdsParameters: {
	// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
	// +kubebuilder:validation:Required
	secretName?: null | string @go(SecretName,*string)
}

#VirtualGatewayObservation: {
	// ARN of the virtual gateway.
	arn?: null | string @go(Arn,*string)

	// Creation date of the virtual gateway.
	createdDate?: null | string @go(CreatedDate,*string)

	// ID of the virtual gateway.
	id?: null | string @go(ID,*string)

	// Last update date of the virtual gateway.
	lastUpdatedDate?: null | string @go(LastUpdatedDate,*string)

	// Resource owner's AWS account ID.
	resourceOwner?: null | string @go(ResourceOwner,*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#VirtualGatewayParameters: {
	// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Virtual gateway specification to apply.
	// +kubebuilder:validation:Required
	spec: [...#VirtualGatewaySpecParameters] @go(Spec,[]VirtualGatewaySpecParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VirtualGatewaySpecObservation: {
}

#VirtualGatewaySpecParameters: {
	// Defaults for backends.
	// +kubebuilder:validation:Optional
	backendDefaults?: [...#BackendDefaultsParameters] @go(BackendDefaults,[]BackendDefaultsParameters)

	// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
	// +kubebuilder:validation:Required
	listener: [...#ListenerParameters] @go(Listener,[]ListenerParameters)

	// Inbound and outbound access logging information for the virtual gateway.
	// +kubebuilder:validation:Optional
	logging?: [...#LoggingParameters] @go(Logging,[]LoggingParameters)
}

// VirtualGatewaySpec defines the desired state of VirtualGateway
#VirtualGatewaySpec: {
	forProvider: #VirtualGatewayParameters @go(ForProvider)
}

// VirtualGatewayStatus defines the observed state of VirtualGateway.
#VirtualGatewayStatus: {
	atProvider?: #VirtualGatewayObservation @go(AtProvider)
}

// VirtualGateway is the Schema for the VirtualGateways API. Provides an AWS App Mesh virtual gateway resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VirtualGateway: {
	spec:    #VirtualGatewaySpec   @go(Spec)
	status?: #VirtualGatewayStatus @go(Status)
}

// VirtualGatewayList contains a list of VirtualGateways
#VirtualGatewayList: {
	items: [...#VirtualGateway] @go(Items,[]VirtualGateway)
}
