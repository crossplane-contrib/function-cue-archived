// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appmesh/v1beta1

package v1beta1

#SpecListenerPortMappingObservation: {
}

#SpecListenerPortMappingParameters: {
	// Port used for the port mapping.
	// +kubebuilder:validation:Required
	port?: null | float64 @go(Port,*float64)

	// Protocol used for the port mapping. Valid values are http,http2, tcp and grpc.
	// +kubebuilder:validation:Required
	protocol?: null | string @go(Protocol,*string)
}

#VirtualRouterObservation: {
	// ARN of the virtual router.
	arn?: null | string @go(Arn,*string)

	// Creation date of the virtual router.
	createdDate?: null | string @go(CreatedDate,*string)

	// ID of the virtual router.
	id?: null | string @go(ID,*string)

	// Last update date of the virtual router.
	lastUpdatedDate?: null | string @go(LastUpdatedDate,*string)

	// Resource owner's AWS account ID.
	resourceOwner?: null | string @go(ResourceOwner,*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#VirtualRouterParameters: {
	// Name of the service mesh in which to create the virtual router. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.Mesh
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the virtual router. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Virtual router specification to apply.
	// +kubebuilder:validation:Required
	spec: [...#VirtualRouterSpecParameters] @go(Spec,[]VirtualRouterSpecParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#VirtualRouterSpecListenerObservation: {
}

#VirtualRouterSpecListenerParameters: {
	// Port mapping information for the listener.
	// +kubebuilder:validation:Required
	portMapping: [...#SpecListenerPortMappingParameters] @go(PortMapping,[]SpecListenerPortMappingParameters)
}

#VirtualRouterSpecObservation: {
}

#VirtualRouterSpecParameters: {
	// configuration block to the spec argument.
	// +kubebuilder:validation:Required
	listener: [...#VirtualRouterSpecListenerParameters] @go(Listener,[]VirtualRouterSpecListenerParameters)
}

// VirtualRouterSpec defines the desired state of VirtualRouter
#VirtualRouterSpec: {
	forProvider: #VirtualRouterParameters @go(ForProvider)
}

// VirtualRouterStatus defines the observed state of VirtualRouter.
#VirtualRouterStatus: {
	atProvider?: #VirtualRouterObservation @go(AtProvider)
}

// VirtualRouter is the Schema for the VirtualRouters API. Provides an AWS App Mesh virtual router resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VirtualRouter: {
	spec:    #VirtualRouterSpec   @go(Spec)
	status?: #VirtualRouterStatus @go(Status)
}

// VirtualRouterList contains a list of VirtualRouters
#VirtualRouterList: {
	items: [...#VirtualRouter] @go(Items,[]VirtualRouter)
}
