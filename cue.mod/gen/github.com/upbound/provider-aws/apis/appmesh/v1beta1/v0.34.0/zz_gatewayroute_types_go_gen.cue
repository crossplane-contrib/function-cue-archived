// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appmesh/v1beta1

package v1beta1

#ActionObservation: {
	// Target that traffic is routed to when a request matches the gateway route.
	target?: [...#TargetObservation] @go(Target,[]TargetObservation)
}

#ActionParameters: {
	// Target that traffic is routed to when a request matches the gateway route.
	// +kubebuilder:validation:Required
	target: [...#TargetParameters] @go(Target,[]TargetParameters)
}

#ActionRewriteObservation: {
	// Host name to rewrite.
	hostname?: [...#RewriteHostnameObservation] @go(Hostname,[]RewriteHostnameObservation)

	// Specified beginning characters to rewrite.
	prefix?: [...#RewritePrefixObservation] @go(Prefix,[]RewritePrefixObservation)
}

#ActionRewriteParameters: {
	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	hostname?: [...#RewriteHostnameParameters] @go(Hostname,[]RewriteHostnameParameters)

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	prefix?: [...#RewritePrefixParameters] @go(Prefix,[]RewritePrefixParameters)
}

#ActionTargetObservation: {
	// Virtual service gateway route target.
	virtualService?: [...#TargetVirtualServiceObservation] @go(VirtualService,[]TargetVirtualServiceObservation)
}

#ActionTargetParameters: {
	// Virtual service gateway route target.
	// +kubebuilder:validation:Required
	virtualService: [...#TargetVirtualServiceParameters] @go(VirtualService,[]TargetVirtualServiceParameters)
}

#ActionTargetVirtualServiceObservation: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#ActionTargetVirtualServiceParameters: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.VirtualService
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#GRPCRouteObservation: {
	// Action to take if a match is determined.
	action?: [...#ActionObservation] @go(Action,[]ActionObservation)

	// Criteria for determining a request match.
	match?: [...#MatchObservation] @go(Match,[]MatchObservation)
}

#GRPCRouteParameters: {
	// Action to take if a match is determined.
	// +kubebuilder:validation:Required
	action: [...#ActionParameters] @go(Action,[]ActionParameters)

	// Criteria for determining a request match.
	// +kubebuilder:validation:Required
	match: [...#MatchParameters] @go(Match,[]MatchParameters)
}

#GatewayRouteObservation: {
	// ARN of the gateway route.
	arn?: null | string @go(Arn,*string)

	// Creation date of the gateway route.
	createdDate?: null | string @go(CreatedDate,*string)

	// ID of the gateway route.
	id?: null | string @go(ID,*string)

	// Last update date of the gateway route.
	lastUpdatedDate?: null | string @go(LastUpdatedDate,*string)

	// Name of the service mesh in which to create the gateway route. Must be between 1 and 255 characters in length.
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	name?: null | string @go(Name,*string)

	// Resource owner's AWS account ID.
	resourceOwner?: null | string @go(ResourceOwner,*string)

	// Gateway route specification to apply.
	spec?: [...#SpecObservation] @go(Spec,[]SpecObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Name of the virtual gateway to associate the gateway route with. Must be between 1 and 255 characters in length.
	virtualGatewayName?: null | string @go(VirtualGatewayName,*string)
}

#GatewayRouteParameters: {
	// Name of the service mesh in which to create the gateway route. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	meshName?: null | string @go(MeshName,*string)

	// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
	// +kubebuilder:validation:Optional
	meshOwner?: null | string @go(MeshOwner,*string)

	// Name to use for the gateway route. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Gateway route specification to apply.
	// +kubebuilder:validation:Optional
	spec?: [...#SpecParameters] @go(Spec,[]SpecParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Name of the virtual gateway to associate the gateway route with. Must be between 1 and 255 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appmesh/v1beta1.VirtualGateway
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	virtualGatewayName?: null | string @go(VirtualGatewayName,*string)
}

#HTTPRouteActionObservation: {
	// Gateway route action to rewrite.
	rewrite?: [...#ActionRewriteObservation] @go(Rewrite,[]ActionRewriteObservation)

	// Target that traffic is routed to when a request matches the gateway route.
	target?: [...#HTTPRouteActionTargetObservation] @go(Target,[]HTTPRouteActionTargetObservation)
}

#HTTPRouteActionParameters: {
	// Gateway route action to rewrite.
	// +kubebuilder:validation:Optional
	rewrite?: [...#ActionRewriteParameters] @go(Rewrite,[]ActionRewriteParameters)

	// Target that traffic is routed to when a request matches the gateway route.
	// +kubebuilder:validation:Required
	target: [...#HTTPRouteActionTargetParameters] @go(Target,[]HTTPRouteActionTargetParameters)
}

#HTTPRouteActionTargetObservation: {
	// Virtual service gateway route target.
	virtualService?: [...#ActionTargetVirtualServiceObservation] @go(VirtualService,[]ActionTargetVirtualServiceObservation)
}

#HTTPRouteActionTargetParameters: {
	// Virtual service gateway route target.
	// +kubebuilder:validation:Required
	virtualService: [...#ActionTargetVirtualServiceParameters] @go(VirtualService,[]ActionTargetVirtualServiceParameters)
}

#HTTPRouteMatchHostnameObservation: {
	// Exact host name to match on.
	exact?: null | string @go(Exact,*string)

	// Specified ending characters of the host name to match on.
	suffix?: null | string @go(Suffix,*string)
}

#HTTPRouteMatchHostnameParameters: {
	// Exact host name to match on.
	// +kubebuilder:validation:Optional
	exact?: null | string @go(Exact,*string)

	// Specified ending characters of the host name to match on.
	// +kubebuilder:validation:Optional
	suffix?: null | string @go(Suffix,*string)
}

#HTTPRouteMatchObservation: {
	// Host name to rewrite.
	hostname?: [...#HTTPRouteMatchHostnameObservation] @go(Hostname,[]HTTPRouteMatchHostnameObservation)

	// The port number to match from the request.
	port?: null | float64 @go(Port,*float64)

	// Specified beginning characters to rewrite.
	prefix?: null | string @go(Prefix,*string)
}

#HTTPRouteMatchParameters: {
	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	hostname?: [...#HTTPRouteMatchHostnameParameters] @go(Hostname,[]HTTPRouteMatchHostnameParameters)

	// The port number to match from the request.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)
}

#HTTPRouteObservation: {
	// Action to take if a match is determined.
	action?: [...#HTTPRouteActionObservation] @go(Action,[]HTTPRouteActionObservation)

	// Criteria for determining a request match.
	match?: [...#HTTPRouteMatchObservation] @go(Match,[]HTTPRouteMatchObservation)
}

#HTTPRouteParameters: {
	// Action to take if a match is determined.
	// +kubebuilder:validation:Required
	action: [...#HTTPRouteActionParameters] @go(Action,[]HTTPRouteActionParameters)

	// Criteria for determining a request match.
	// +kubebuilder:validation:Required
	match: [...#HTTPRouteMatchParameters] @go(Match,[]HTTPRouteMatchParameters)
}

#HostnameObservation: {
	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	defaultTargetHostname?: null | string @go(DefaultTargetHostname,*string)
}

#HostnameParameters: {
	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Required
	defaultTargetHostname?: null | string @go(DefaultTargetHostname,*string)
}

#Http2RouteActionObservation: {
	// Gateway route action to rewrite.
	rewrite?: [...#RewriteObservation] @go(Rewrite,[]RewriteObservation)

	// Target that traffic is routed to when a request matches the gateway route.
	target?: [...#ActionTargetObservation] @go(Target,[]ActionTargetObservation)
}

#Http2RouteActionParameters: {
	// Gateway route action to rewrite.
	// +kubebuilder:validation:Optional
	rewrite?: [...#RewriteParameters] @go(Rewrite,[]RewriteParameters)

	// Target that traffic is routed to when a request matches the gateway route.
	// +kubebuilder:validation:Required
	target: [...#ActionTargetParameters] @go(Target,[]ActionTargetParameters)
}

#Http2RouteMatchObservation: {
	// Host name to rewrite.
	hostname?: [...#MatchHostnameObservation] @go(Hostname,[]MatchHostnameObservation)

	// The port number to match from the request.
	port?: null | float64 @go(Port,*float64)

	// Specified beginning characters to rewrite.
	prefix?: null | string @go(Prefix,*string)
}

#Http2RouteMatchParameters: {
	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	hostname?: [...#MatchHostnameParameters] @go(Hostname,[]MatchHostnameParameters)

	// The port number to match from the request.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)
}

#Http2RouteObservation: {
	// Action to take if a match is determined.
	action?: [...#Http2RouteActionObservation] @go(Action,[]Http2RouteActionObservation)

	// Criteria for determining a request match.
	match?: [...#Http2RouteMatchObservation] @go(Match,[]Http2RouteMatchObservation)
}

#Http2RouteParameters: {
	// Action to take if a match is determined.
	// +kubebuilder:validation:Required
	action: [...#Http2RouteActionParameters] @go(Action,[]Http2RouteActionParameters)

	// Criteria for determining a request match.
	// +kubebuilder:validation:Required
	match: [...#Http2RouteMatchParameters] @go(Match,[]Http2RouteMatchParameters)
}

#MatchHostnameObservation: {
	// Exact host name to match on.
	exact?: null | string @go(Exact,*string)

	// Specified ending characters of the host name to match on.
	suffix?: null | string @go(Suffix,*string)
}

#MatchHostnameParameters: {
	// Exact host name to match on.
	// +kubebuilder:validation:Optional
	exact?: null | string @go(Exact,*string)

	// Specified ending characters of the host name to match on.
	// +kubebuilder:validation:Optional
	suffix?: null | string @go(Suffix,*string)
}

#MatchObservation: {
	// The port number to match from the request.
	port?: null | float64 @go(Port,*float64)

	// Fully qualified domain name for the service to match from the request.
	serviceName?: null | string @go(ServiceName,*string)
}

#MatchParameters: {
	// The port number to match from the request.
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)

	// Fully qualified domain name for the service to match from the request.
	// +kubebuilder:validation:Required
	serviceName?: null | string @go(ServiceName,*string)
}

#PrefixObservation: {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	defaultPrefix?: null | string @go(DefaultPrefix,*string)

	// Value used to replace the incoming route prefix when rewritten.
	value?: null | string @go(Value,*string)
}

#PrefixParameters: {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Optional
	defaultPrefix?: null | string @go(DefaultPrefix,*string)

	// Value used to replace the incoming route prefix when rewritten.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#RewriteHostnameObservation: {
	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	defaultTargetHostname?: null | string @go(DefaultTargetHostname,*string)
}

#RewriteHostnameParameters: {
	// Default target host name to write to. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Required
	defaultTargetHostname?: null | string @go(DefaultTargetHostname,*string)
}

#RewriteObservation: {
	// Host name to rewrite.
	hostname?: [...#HostnameObservation] @go(Hostname,[]HostnameObservation)

	// Specified beginning characters to rewrite.
	prefix?: [...#PrefixObservation] @go(Prefix,[]PrefixObservation)
}

#RewriteParameters: {
	// Host name to rewrite.
	// +kubebuilder:validation:Optional
	hostname?: [...#HostnameParameters] @go(Hostname,[]HostnameParameters)

	// Specified beginning characters to rewrite.
	// +kubebuilder:validation:Optional
	prefix?: [...#PrefixParameters] @go(Prefix,[]PrefixParameters)
}

#RewritePrefixObservation: {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	defaultPrefix?: null | string @go(DefaultPrefix,*string)

	// Value used to replace the incoming route prefix when rewritten.
	value?: null | string @go(Value,*string)
}

#RewritePrefixParameters: {
	// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
	// +kubebuilder:validation:Optional
	defaultPrefix?: null | string @go(DefaultPrefix,*string)

	// Value used to replace the incoming route prefix when rewritten.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#SpecObservation: {
	// Specification of a gRPC gateway route.
	grpcRoute?: [...#GRPCRouteObservation] @go(GRPCRoute,[]GRPCRouteObservation)

	// Specification of an HTTP gateway route.
	httpRoute?: [...#HTTPRouteObservation] @go(HTTPRoute,[]HTTPRouteObservation)

	// Specification of an HTTP/2 gateway route.
	http2Route?: [...#Http2RouteObservation] @go(Http2Route,[]Http2RouteObservation)
}

#SpecParameters: {
	// Specification of a gRPC gateway route.
	// +kubebuilder:validation:Optional
	grpcRoute?: [...#GRPCRouteParameters] @go(GRPCRoute,[]GRPCRouteParameters)

	// Specification of an HTTP gateway route.
	// +kubebuilder:validation:Optional
	httpRoute?: [...#HTTPRouteParameters] @go(HTTPRoute,[]HTTPRouteParameters)

	// Specification of an HTTP/2 gateway route.
	// +kubebuilder:validation:Optional
	http2Route?: [...#Http2RouteParameters] @go(Http2Route,[]Http2RouteParameters)
}

#TargetObservation: {
	// Virtual service gateway route target.
	virtualService?: [...#VirtualServiceObservation] @go(VirtualService,[]VirtualServiceObservation)
}

#TargetParameters: {
	// Virtual service gateway route target.
	// +kubebuilder:validation:Required
	virtualService: [...#VirtualServiceParameters] @go(VirtualService,[]VirtualServiceParameters)
}

#TargetVirtualServiceObservation: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#TargetVirtualServiceParameters: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#VirtualServiceObservation: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

#VirtualServiceParameters: {
	// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
	// +kubebuilder:validation:Required
	virtualServiceName?: null | string @go(VirtualServiceName,*string)
}

// GatewayRouteSpec defines the desired state of GatewayRoute
#GatewayRouteSpec: {
	forProvider: #GatewayRouteParameters @go(ForProvider)
}

// GatewayRouteStatus defines the observed state of GatewayRoute.
#GatewayRouteStatus: {
	atProvider?: #GatewayRouteObservation @go(AtProvider)
}

// GatewayRoute is the Schema for the GatewayRoutes API. Provides an AWS App Mesh gateway route resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#GatewayRoute: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.meshName)",message="meshName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.spec)",message="spec is a required parameter"
	spec:    #GatewayRouteSpec   @go(Spec)
	status?: #GatewayRouteStatus @go(Status)
}

// GatewayRouteList contains a list of GatewayRoutes
#GatewayRouteList: {
	items: [...#GatewayRoute] @go(Items,[]GatewayRoute)
}
