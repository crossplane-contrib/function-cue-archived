// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/networkmanager/v1beta1

package v1beta1

#LinkAssociationObservation: {
	// The ID of the device.
	deviceId?: null | string @go(DeviceID,*string)

	// The ID of the global network.
	globalNetworkId?: null | string @go(GlobalNetworkID,*string)
	id?:              null | string @go(ID,*string)

	// The ID of the link.
	linkId?: null | string @go(LinkID,*string)
}

#LinkAssociationParameters: {
	// The ID of the device.
	// +crossplane:generate:reference:type=Device
	// +kubebuilder:validation:Optional
	deviceId?: null | string @go(DeviceID,*string)

	// The ID of the global network.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/networkmanager/v1beta1.GlobalNetwork
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	globalNetworkId?: null | string @go(GlobalNetworkID,*string)

	// The ID of the link.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/networkmanager/v1beta1.Link
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	linkId?: null | string @go(LinkID,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// LinkAssociationSpec defines the desired state of LinkAssociation
#LinkAssociationSpec: {
	forProvider: #LinkAssociationParameters @go(ForProvider)
}

// LinkAssociationStatus defines the observed state of LinkAssociation.
#LinkAssociationStatus: {
	atProvider?: #LinkAssociationObservation @go(AtProvider)
}

// LinkAssociation is the Schema for the LinkAssociations API. Associates a link to a device.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LinkAssociation: {
	spec:    #LinkAssociationSpec   @go(Spec)
	status?: #LinkAssociationStatus @go(Status)
}

// LinkAssociationList contains a list of LinkAssociations
#LinkAssociationList: {
	items: [...#LinkAssociation] @go(Items,[]LinkAssociation)
}
