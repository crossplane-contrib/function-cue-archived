// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ecs/v1beta1

package v1beta1

#AutoScalingGroupProviderObservation: {
}

#AutoScalingGroupProviderParameters: {
	// - ARN of the associated auto scaling group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/autoscaling/v1beta1.AutoscalingGroup
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	autoScalingGroupArn?: null | string @go(AutoScalingGroupArn,*string)

	// - Configuration block defining the parameters of the auto scaling. Detailed below.
	// +kubebuilder:validation:Optional
	managedScaling?: [...#ManagedScalingParameters] @go(ManagedScaling,[]ManagedScalingParameters)

	// - Enables or disables container-aware termination of instances in the auto scaling group when scale-in happens. Valid values are ENABLED and DISABLED.
	// +kubebuilder:validation:Optional
	managedTerminationProtection?: null | string @go(ManagedTerminationProtection,*string)
}

#CapacityProviderObservation: {
	// ARN that identifies the capacity provider.
	arn?: null | string @go(Arn,*string)

	// ARN that identifies the capacity provider.
	id?: null | string @go(ID,*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#CapacityProviderParameters: {
	// Configuration block for the provider for the ECS auto scaling group. Detailed below.
	// +kubebuilder:validation:Required
	autoScalingGroupProvider: [...#AutoScalingGroupProviderParameters] @go(AutoScalingGroupProvider,[]AutoScalingGroupProviderParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ManagedScalingObservation: {
}

#ManagedScalingParameters: {
	// Period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of 300 seconds is used.
	// +kubebuilder:validation:Optional
	instanceWarmupPeriod?: null | float64 @go(InstanceWarmupPeriod,*float64)

	// Maximum step adjustment size. A number between 1 and 10,000.
	// +kubebuilder:validation:Optional
	maximumScalingStepSize?: null | float64 @go(MaximumScalingStepSize,*float64)

	// Minimum step adjustment size. A number between 1 and 10,000.
	// +kubebuilder:validation:Optional
	minimumScalingStepSize?: null | float64 @go(MinimumScalingStepSize,*float64)

	// Whether auto scaling is managed by ECS. Valid values are ENABLED and DISABLED.
	// +kubebuilder:validation:Optional
	status?: null | string @go(Status,*string)

	// Target utilization for the capacity provider. A number between 1 and 100.
	// +kubebuilder:validation:Optional
	targetCapacity?: null | float64 @go(TargetCapacity,*float64)
}

// CapacityProviderSpec defines the desired state of CapacityProvider
#CapacityProviderSpec: {
	forProvider: #CapacityProviderParameters @go(ForProvider)
}

// CapacityProviderStatus defines the observed state of CapacityProvider.
#CapacityProviderStatus: {
	atProvider?: #CapacityProviderObservation @go(AtProvider)
}

// CapacityProvider is the Schema for the CapacityProviders API. Provides an ECS cluster capacity provider.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#CapacityProvider: {
	spec:    #CapacityProviderSpec   @go(Spec)
	status?: #CapacityProviderStatus @go(Status)
}

// CapacityProviderList contains a list of CapacityProviders
#CapacityProviderList: {
	items: [...#CapacityProvider] @go(Items,[]CapacityProvider)
}
