// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ecs/v1beta1

package v1beta1

#ClusterObservation: {
	// ARN that identifies the cluster.
	arn?: null | string @go(Arn,*string)

	// List of short names of one or more capacity providers to associate with the cluster. Valid values also include FARGATE and FARGATE_SPOT.
	capacityProviders?: [...null | string] @go(CapacityProviders,[]*string)

	// ARN that identifies the cluster.
	id?: null | string @go(ID,*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ClusterParameters: {
	// The execute command configuration for the cluster. Detailed below.
	// +kubebuilder:validation:Optional
	configuration?: [...#ConfigurationParameters] @go(Configuration,[]ConfigurationParameters)

	// Configuration block for capacity provider strategy to use by default for the cluster. Can be one or more. Detailed below.
	// +kubebuilder:validation:Optional
	defaultCapacityProviderStrategy?: [...#DefaultCapacityProviderStrategyParameters] @go(DefaultCapacityProviderStrategy,[]DefaultCapacityProviderStrategyParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Configures a default Service Connect namespace. Detailed below.
	// +kubebuilder:validation:Optional
	serviceConnectDefaults?: [...#ServiceConnectDefaultsParameters] @go(ServiceConnectDefaults,[]ServiceConnectDefaultsParameters)

	// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Detailed below.
	// +kubebuilder:validation:Optional
	setting?: [...#SettingParameters] @go(Setting,[]SettingParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ConfigurationObservation: {
}

#ConfigurationParameters: {
	// The details of the execute command configuration. Detailed below.
	// +kubebuilder:validation:Optional
	executeCommandConfiguration?: [...#ExecuteCommandConfigurationParameters] @go(ExecuteCommandConfiguration,[]ExecuteCommandConfigurationParameters)
}

#DefaultCapacityProviderStrategyObservation: {
}

#DefaultCapacityProviderStrategyParameters: {
	// The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
	// +kubebuilder:validation:Optional
	base?: null | float64 @go(Base,*float64)

	// The short name of the capacity provider.
	// +kubebuilder:validation:Required
	capacityProvider?: null | string @go(CapacityProvider,*string)

	// The relative percentage of the total number of launched tasks that should use the specified capacity provider.
	// +kubebuilder:validation:Optional
	weight?: null | float64 @go(Weight,*float64)
}

#ExecuteCommandConfigurationObservation: {
}

#ExecuteCommandConfigurationParameters: {
	// The AWS Key Management Service key ID to encrypt the data between the local client and the container.
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// The log configuration for the results of the execute command actions Required when logging is OVERRIDE. Detailed below.
	// +kubebuilder:validation:Optional
	logConfiguration?: [...#LogConfigurationParameters] @go(LogConfiguration,[]LogConfigurationParameters)

	// The log setting to use for redirecting logs for your execute command results. Valid values are NONE, DEFAULT, and OVERRIDE.
	// +kubebuilder:validation:Optional
	logging?: null | string @go(Logging,*string)
}

#LogConfigurationObservation: {
}

#LogConfigurationParameters: {
	// Whether or not to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
	// +kubebuilder:validation:Optional
	cloudWatchEncryptionEnabled?: null | bool @go(CloudWatchEncryptionEnabled,*bool)

	// The name of the CloudWatch log group to send logs to.
	// +kubebuilder:validation:Optional
	cloudWatchLogGroupName?: null | string @go(CloudWatchLogGroupName,*string)

	// Whether or not to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
	// +kubebuilder:validation:Optional
	s3BucketEncryptionEnabled?: null | bool @go(S3BucketEncryptionEnabled,*bool)

	// The name of the S3 bucket to send logs to.
	// +kubebuilder:validation:Optional
	s3BucketName?: null | string @go(S3BucketName,*string)

	// An optional folder in the S3 bucket to place logs in.
	// +kubebuilder:validation:Optional
	s3KeyPrefix?: null | string @go(S3KeyPrefix,*string)
}

#ServiceConnectDefaultsObservation: {
}

#ServiceConnectDefaultsParameters: {
	// The ARN of the aws_service_discovery_http_namespace that's used when you create a service and don't specify a Service Connect configuration.
	// +kubebuilder:validation:Required
	namespace?: null | string @go(Namespace,*string)
}

#SettingObservation: {
}

#SettingParameters: {
	// Name of the setting to manage. Valid values: containerInsights.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The value to assign to the setting. Valid values are enabled and disabled.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

// ClusterSpec defines the desired state of Cluster
#ClusterSpec: {
	forProvider: #ClusterParameters @go(ForProvider)
}

// ClusterStatus defines the observed state of Cluster.
#ClusterStatus: {
	atProvider?: #ClusterObservation @go(AtProvider)
}

// Cluster is the Schema for the Clusters API. Provides an ECS cluster.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Cluster: {
	spec:    #ClusterSpec   @go(Spec)
	status?: #ClusterStatus @go(Status)
}

// ClusterList contains a list of Clusters
#ClusterList: {
	items: [...#Cluster] @go(Items,[]Cluster)
}
