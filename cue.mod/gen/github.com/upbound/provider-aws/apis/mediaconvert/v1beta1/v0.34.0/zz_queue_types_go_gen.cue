// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/mediaconvert/v1beta1

package v1beta1

#QueueObservation: {
	// The Arn of the queue
	arn?: null | string @go(Arn,*string)

	// A description of the queue
	description?: null | string @go(Description,*string)

	// The same as name
	id?: null | string @go(ID,*string)

	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are ON_DEMAND or RESERVED. Default to ON_DEMAND.
	pricingPlan?: null | string @go(PricingPlan,*string)

	// A detail pricing plan of the  reserved queue. See below.
	reservationPlanSettings?: [...#ReservationPlanSettingsObservation] @go(ReservationPlanSettings,[]ReservationPlanSettingsObservation)

	// A status of the queue. Valid values are ACTIVE or RESERVED. Default to PAUSED.
	status?: null | string @go(Status,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#QueueParameters: {
	// A description of the queue
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are ON_DEMAND or RESERVED. Default to ON_DEMAND.
	// +kubebuilder:validation:Optional
	pricingPlan?: null | string @go(PricingPlan,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A detail pricing plan of the  reserved queue. See below.
	// +kubebuilder:validation:Optional
	reservationPlanSettings?: [...#ReservationPlanSettingsParameters] @go(ReservationPlanSettings,[]ReservationPlanSettingsParameters)

	// A status of the queue. Valid values are ACTIVE or RESERVED. Default to PAUSED.
	// +kubebuilder:validation:Optional
	status?: null | string @go(Status,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ReservationPlanSettingsObservation: {
	// The length of the term of your reserved queue pricing plan commitment. Valid value is ONE_YEAR.
	commitment?: null | string @go(Commitment,*string)

	// Specifies whether the term of your reserved queue pricing plan. Valid values are AUTO_RENEW or EXPIRE.
	renewalType?: null | string @go(RenewalType,*string)

	// Specifies the number of reserved transcode slots (RTS) for queue.
	reservedSlots?: null | float64 @go(ReservedSlots,*float64)
}

#ReservationPlanSettingsParameters: {
	// The length of the term of your reserved queue pricing plan commitment. Valid value is ONE_YEAR.
	// +kubebuilder:validation:Required
	commitment?: null | string @go(Commitment,*string)

	// Specifies whether the term of your reserved queue pricing plan. Valid values are AUTO_RENEW or EXPIRE.
	// +kubebuilder:validation:Required
	renewalType?: null | string @go(RenewalType,*string)

	// Specifies the number of reserved transcode slots (RTS) for queue.
	// +kubebuilder:validation:Required
	reservedSlots?: null | float64 @go(ReservedSlots,*float64)
}

// QueueSpec defines the desired state of Queue
#QueueSpec: {
	forProvider: #QueueParameters @go(ForProvider)
}

// QueueStatus defines the observed state of Queue.
#QueueStatus: {
	atProvider?: #QueueObservation @go(AtProvider)
}

// Queue is the Schema for the Queues API. Provides an AWS Elemental MediaConvert Queue.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Queue: {
	spec:    #QueueSpec   @go(Spec)
	status?: #QueueStatus @go(Status)
}

// QueueList contains a list of Queues
#QueueList: {
	items: [...#Queue] @go(Items,[]Queue)
}
