// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudfront/v1beta1

package v1beta1

#CachePolicyObservation: {
	// The current version of the cache policy.
	etag?: null | string @go(Etag,*string)

	// The identifier for the cache policy.
	id?: null | string @go(ID,*string)
}

#CachePolicyParameters: {
	// A comment to describe the cache policy.
	// +kubebuilder:validation:Optional
	comment?: null | string @go(Comment,*string)

	// The default amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
	// +kubebuilder:validation:Optional
	defaultTtl?: null | float64 @go(DefaultTTL,*float64)

	// The maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
	// +kubebuilder:validation:Optional
	maxTtl?: null | float64 @go(MaxTTL,*float64)

	// The minimum amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
	// +kubebuilder:validation:Optional
	minTtl?: null | float64 @go(MinTTL,*float64)

	// A unique name to identify the cache policy.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The HTTP headers, cookies, and URL query strings to include in the cache key. See Parameters In Cache Key And Forwarded To Origin for more information.
	// +kubebuilder:validation:Required
	parametersInCacheKeyAndForwardedToOrigin: [...#ParametersInCacheKeyAndForwardedToOriginParameters] @go(ParametersInCacheKeyAndForwardedToOrigin,[]ParametersInCacheKeyAndForwardedToOriginParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#CookiesConfigObservation: {
}

#CookiesConfigParameters: {
	// Determines whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are none, whitelist, allExcept, all.
	// +kubebuilder:validation:Required
	cookieBehavior?: null | string @go(CookieBehavior,*string)

	// Object that contains a list of cookie names. See Items for more information.
	// +kubebuilder:validation:Optional
	cookies?: [...#CookiesParameters] @go(Cookies,[]CookiesParameters)
}

#CookiesObservation: {
}

#CookiesParameters: {
	// A list of item names (cookies, headers, or query strings).
	// +kubebuilder:validation:Optional
	items?: [...null | string] @go(Items,[]*string)
}

#HeadersConfigObservation: {
}

#HeadersConfigParameters: {
	// Determines whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are none, whitelist.
	// +kubebuilder:validation:Optional
	headerBehavior?: null | string @go(HeaderBehavior,*string)

	// Object that contains a list of header names. See Items for more information.
	// +kubebuilder:validation:Optional
	headers?: [...#HeadersParameters] @go(Headers,[]HeadersParameters)
}

#HeadersObservation: {
}

#HeadersParameters: {
	// A list of item names (cookies, headers, or query strings).
	// +kubebuilder:validation:Optional
	items?: [...null | string] @go(Items,[]*string)
}

#ParametersInCacheKeyAndForwardedToOriginObservation: {
}

#ParametersInCacheKeyAndForwardedToOriginParameters: {
	// Object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
	// +kubebuilder:validation:Required
	cookiesConfig: [...#CookiesConfigParameters] @go(CookiesConfig,[]CookiesConfigParameters)

	// A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
	// +kubebuilder:validation:Optional
	enableAcceptEncodingBrotli?: null | bool @go(EnableAcceptEncodingBrotli,*bool)

	// A flag that can affect whether the Accept-Encoding HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
	// +kubebuilder:validation:Optional
	enableAcceptEncodingGzip?: null | bool @go(EnableAcceptEncodingGzip,*bool)

	// Object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
	// +kubebuilder:validation:Required
	headersConfig: [...#HeadersConfigParameters] @go(HeadersConfig,[]HeadersConfigParameters)

	// Object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Query String Config for more information.
	// +kubebuilder:validation:Required
	queryStringsConfig: [...#QueryStringsConfigParameters] @go(QueryStringsConfig,[]QueryStringsConfigParameters)
}

#QueryStringsConfigObservation: {
}

#QueryStringsConfigParameters: {
	// Determines whether any URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are none, whitelist, allExcept, all.
	// +kubebuilder:validation:Required
	queryStringBehavior?: null | string @go(QueryStringBehavior,*string)

	// Object that contains a list of query string names. See Items for more information.
	// +kubebuilder:validation:Optional
	queryStrings?: [...#QueryStringsParameters] @go(QueryStrings,[]QueryStringsParameters)
}

#QueryStringsObservation: {
}

#QueryStringsParameters: {
	// A list of item names (cookies, headers, or query strings).
	// +kubebuilder:validation:Optional
	items?: [...null | string] @go(Items,[]*string)
}

// CachePolicySpec defines the desired state of CachePolicy
#CachePolicySpec: {
	forProvider: #CachePolicyParameters @go(ForProvider)
}

// CachePolicyStatus defines the observed state of CachePolicy.
#CachePolicyStatus: {
	atProvider?: #CachePolicyObservation @go(AtProvider)
}

// CachePolicy is the Schema for the CachePolicys API. Provides a cache policy for a CloudFront ditribution. When itâ€™s attached to a cache behavior, the cache policy determines the values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer. It also determines the default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#CachePolicy: {
	spec:    #CachePolicySpec   @go(Spec)
	status?: #CachePolicyStatus @go(Status)
}

// CachePolicyList contains a list of CachePolicys
#CachePolicyList: {
	items: [...#CachePolicy] @go(Items,[]CachePolicy)
}
