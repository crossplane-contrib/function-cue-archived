// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ssm/v1beta1

package v1beta1

#MaintenanceWindowObservation: {
	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	allowUnassociatedTargets?: null | bool @go(AllowUnassociatedTargets,*bool)

	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	cutoff?: null | float64 @go(Cutoff,*float64)

	// A description for the maintenance window.
	description?: null | string @go(Description,*string)

	// The duration of the Maintenance Window in hours.
	duration?: null | float64 @go(Duration,*float64)

	// Whether the maintenance window is enabled. Default: true.
	enabled?: null | bool @go(Enabled,*bool)

	// Timestamp in ISO-8601 extended format when to no longer run the maintenance window.
	endDate?: null | string @go(EndDate,*string)

	// The ID of the maintenance window.
	id?: null | string @go(ID,*string)

	// The name of the maintenance window.
	name?: null | string @go(Name,*string)

	// The schedule of the Maintenance Window in the form of a cron or rate expression.
	schedule?: null | string @go(Schedule,*string)

	// The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.
	scheduleOffset?: null | float64 @go(ScheduleOffset,*float64)

	// Timezone for schedule in Internet Assigned Numbers Authority (IANA) Time Zone Database format. For example: America/Los_Angeles, etc/UTC, or Asia/Seoul.
	scheduleTimezone?: null | string @go(ScheduleTimezone,*string)

	// Timestamp in ISO-8601 extended format when to begin the maintenance window.
	startDate?: null | string @go(StartDate,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#MaintenanceWindowParameters: {
	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	// +kubebuilder:validation:Optional
	allowUnassociatedTargets?: null | bool @go(AllowUnassociatedTargets,*bool)

	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	// +kubebuilder:validation:Optional
	cutoff?: null | float64 @go(Cutoff,*float64)

	// A description for the maintenance window.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The duration of the Maintenance Window in hours.
	// +kubebuilder:validation:Optional
	duration?: null | float64 @go(Duration,*float64)

	// Whether the maintenance window is enabled. Default: true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Timestamp in ISO-8601 extended format when to no longer run the maintenance window.
	// +kubebuilder:validation:Optional
	endDate?: null | string @go(EndDate,*string)

	// The name of the maintenance window.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The schedule of the Maintenance Window in the form of a cron or rate expression.
	// +kubebuilder:validation:Optional
	schedule?: null | string @go(Schedule,*string)

	// The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.
	// +kubebuilder:validation:Optional
	scheduleOffset?: null | float64 @go(ScheduleOffset,*float64)

	// Timezone for schedule in Internet Assigned Numbers Authority (IANA) Time Zone Database format. For example: America/Los_Angeles, etc/UTC, or Asia/Seoul.
	// +kubebuilder:validation:Optional
	scheduleTimezone?: null | string @go(ScheduleTimezone,*string)

	// Timestamp in ISO-8601 extended format when to begin the maintenance window.
	// +kubebuilder:validation:Optional
	startDate?: null | string @go(StartDate,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// MaintenanceWindowSpec defines the desired state of MaintenanceWindow
#MaintenanceWindowSpec: {
	forProvider: #MaintenanceWindowParameters @go(ForProvider)
}

// MaintenanceWindowStatus defines the observed state of MaintenanceWindow.
#MaintenanceWindowStatus: {
	atProvider?: #MaintenanceWindowObservation @go(AtProvider)
}

// MaintenanceWindow is the Schema for the MaintenanceWindows API. Provides an SSM Maintenance Window resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#MaintenanceWindow: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.cutoff)",message="cutoff is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.duration)",message="duration is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.schedule)",message="schedule is a required parameter"
	spec:    #MaintenanceWindowSpec   @go(Spec)
	status?: #MaintenanceWindowStatus @go(Status)
}

// MaintenanceWindowList contains a list of MaintenanceWindows
#MaintenanceWindowList: {
	items: [...#MaintenanceWindow] @go(Items,[]MaintenanceWindow)
}
