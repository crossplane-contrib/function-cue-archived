// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ssm/v1beta1

package v1beta1

#ApprovalRuleObservation: {
}

#ApprovalRuleParameters: {
	// The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline.
	// Valid Range: 0 to 100.
	// Conflicts with approve_until_date.
	// +kubebuilder:validation:Optional
	approveAfterDays?: null | float64 @go(ApproveAfterDays,*float64)

	// The cutoff date for auto approval of released patches.
	// Any patches released on or before this date are installed automatically.
	// Date is formatted as YYYY-MM-DD.
	// Conflicts with approve_after_days
	// +kubebuilder:validation:Optional
	approveUntilDate?: null | string @go(ApproveUntilDate,*string)

	// The compliance level for patches approved by this rule.
	// Valid values are CRITICAL, HIGH, MEDIUM, LOW, INFORMATIONAL, and UNSPECIFIED.
	// The default value is UNSPECIFIED.
	// +kubebuilder:validation:Optional
	complianceLevel?: null | string @go(ComplianceLevel,*string)

	// Boolean enabling the application of non-security updates.
	// The default value is false.
	// Valid for Linux instances only.
	// +kubebuilder:validation:Optional
	enableNonSecurity?: null | bool @go(EnableNonSecurity,*bool)

	// The patch filter group that defines the criteria for the rule.
	// Up to 5 patch filters can be specified per approval rule using Key/Value pairs.
	// Valid combinations of these Keys and the operating_system value can be found in the SSM DescribePatchProperties API Reference.
	// Valid Values are exact values for the patch property given as the key, or a wildcard *, which matches all values.
	// +kubebuilder:validation:Required
	patchFilter: [...#PatchFilterParameters] @go(PatchFilter,[]PatchFilterParameters)
}

#GlobalFilterObservation: {
}

#GlobalFilterParameters: {
	// +kubebuilder:validation:Required
	key?: null | string @go(Key,*string)

	// +kubebuilder:validation:Required
	values: [...null | string] @go(Values,[]*string)
}

#PatchBaselineObservation: {
	// The ARN of the patch baseline.
	arn?: null | string @go(Arn,*string)

	// The ID of the patch baseline.
	id?: null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#PatchBaselineParameters: {
	// A set of rules used to include patches in the baseline.
	// Up to 10 approval rules can be specified.
	// See approval_rule below.
	// +kubebuilder:validation:Optional
	approvalRule?: [...#ApprovalRuleParameters] @go(ApprovalRule,[]ApprovalRuleParameters)

	// A list of explicitly approved patches for the baseline.
	// Cannot be specified with approval_rule.
	// +kubebuilder:validation:Optional
	approvedPatches?: [...null | string] @go(ApprovedPatches,[]*string)

	// The compliance level for approved patches.
	// This means that if an approved patch is reported as missing, this is the severity of the compliance violation.
	// Valid values are CRITICAL, HIGH, MEDIUM, LOW, INFORMATIONAL, UNSPECIFIED.
	// The default value is UNSPECIFIED.
	// +kubebuilder:validation:Optional
	approvedPatchesComplianceLevel?: null | string @go(ApprovedPatchesComplianceLevel,*string)

	// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances.
	// Applies to Linux instances only.
	// +kubebuilder:validation:Optional
	approvedPatchesEnableNonSecurity?: null | bool @go(ApprovedPatchesEnableNonSecurity,*bool)

	// The description of the patch baseline.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A set of global filters used to exclude patches from the baseline.
	// Up to 4 global filters can be specified using Key/Value pairs.
	// Valid Keys are PRODUCT, CLASSIFICATION, MSRC_SEVERITY, and PATCH_ID.
	// +kubebuilder:validation:Optional
	globalFilter?: [...#GlobalFilterParameters] @go(GlobalFilter,[]GlobalFilterParameters)

	// The name of the patch baseline.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The operating system the patch baseline applies to.
	// Valid values are
	// AMAZON_LINUX,
	// AMAZON_LINUX_2,
	// AMAZON_LINUX_2022,
	// CENTOS,
	// DEBIAN,
	// MACOS,
	// ORACLE_LINUX,
	// RASPBIAN,
	// REDHAT_ENTERPRISE_LINUX,
	// ROCKY_LINUX,
	// SUSE,
	// UBUNTU, and
	// WINDOWS.
	// The default value is WINDOWS.
	// +kubebuilder:validation:Optional
	operatingSystem?: null | string @go(OperatingSystem,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A list of rejected patches.
	// +kubebuilder:validation:Optional
	rejectedPatches?: [...null | string] @go(RejectedPatches,[]*string)

	// The action for Patch Manager to take on patches included in the rejected_patches list.
	// Valid values are ALLOW_AS_DEPENDENCY and BLOCK.
	// +kubebuilder:validation:Optional
	rejectedPatchesAction?: null | string @go(RejectedPatchesAction,*string)

	// Configuration block with alternate sources for patches.
	// Applies to Linux instances only.
	// See source below.
	// +kubebuilder:validation:Optional
	source?: [...#SourceParameters] @go(Source,[]SourceParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#PatchFilterObservation: {
}

#PatchFilterParameters: {
	// +kubebuilder:validation:Required
	key?: null | string @go(Key,*string)

	// +kubebuilder:validation:Required
	values: [...null | string] @go(Values,[]*string)
}

#SourceObservation: {
}

#SourceParameters: {
	// The value of the yum repo configuration.
	// For information about other options available for your yum repository configuration, see the dnf.conf documentation
	// +kubebuilder:validation:Required
	configuration?: null | string @go(Configuration,*string)

	// The name specified to identify the patch source.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The specific operating system versions a patch repository applies to, such as "Ubuntu16.04", "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7".
	// For lists of supported product values, see PatchFilter.
	// +kubebuilder:validation:Required
	products: [...null | string] @go(Products,[]*string)
}

// PatchBaselineSpec defines the desired state of PatchBaseline
#PatchBaselineSpec: {
	forProvider: #PatchBaselineParameters @go(ForProvider)
}

// PatchBaselineStatus defines the observed state of PatchBaseline.
#PatchBaselineStatus: {
	atProvider?: #PatchBaselineObservation @go(AtProvider)
}

// PatchBaseline is the Schema for the PatchBaselines API. Provides an SSM Patch Baseline resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#PatchBaseline: {
	spec:    #PatchBaselineSpec   @go(Spec)
	status?: #PatchBaselineStatus @go(Status)
}

// PatchBaselineList contains a list of PatchBaselines
#PatchBaselineList: {
	items: [...#PatchBaseline] @go(Items,[]PatchBaseline)
}
