// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appsync/v1beta1

package v1beta1

#APICacheObservation: {
	// Caching behavior. Valid values are FULL_REQUEST_CACHING and PER_RESOLVER_CACHING.
	apiCachingBehavior?: null | string @go(APICachingBehavior,*string)

	// GraphQL API ID.
	apiId?: null | string @go(APIID,*string)

	// At-rest encryption flag for cache. You cannot update this setting after creation.
	atRestEncryptionEnabled?: null | bool @go(AtRestEncryptionEnabled,*bool)

	// AppSync API ID.
	id?: null | string @go(ID,*string)

	// TTL in seconds for cache entries.
	ttl?: null | float64 @go(TTL,*float64)

	// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
	transitEncryptionEnabled?: null | bool @go(TransitEncryptionEnabled,*bool)

	// Cache instance type. Valid values are SMALL, MEDIUM, LARGE, XLARGE, LARGE_2X, LARGE_4X, LARGE_8X, LARGE_12X, T2_SMALL, T2_MEDIUM, R4_LARGE, R4_XLARGE, R4_2XLARGE, R4_4XLARGE, R4_8XLARGE.
	type?: null | string @go(Type,*string)
}

#APICacheParameters: {
	// Caching behavior. Valid values are FULL_REQUEST_CACHING and PER_RESOLVER_CACHING.
	// +kubebuilder:validation:Optional
	apiCachingBehavior?: null | string @go(APICachingBehavior,*string)

	// GraphQL API ID.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appsync/v1beta1.GraphQLAPI
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	apiId?: null | string @go(APIID,*string)

	// At-rest encryption flag for cache. You cannot update this setting after creation.
	// +kubebuilder:validation:Optional
	atRestEncryptionEnabled?: null | bool @go(AtRestEncryptionEnabled,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// TTL in seconds for cache entries.
	// +kubebuilder:validation:Optional
	ttl?: null | float64 @go(TTL,*float64)

	// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
	// +kubebuilder:validation:Optional
	transitEncryptionEnabled?: null | bool @go(TransitEncryptionEnabled,*bool)

	// Cache instance type. Valid values are SMALL, MEDIUM, LARGE, XLARGE, LARGE_2X, LARGE_4X, LARGE_8X, LARGE_12X, T2_SMALL, T2_MEDIUM, R4_LARGE, R4_XLARGE, R4_2XLARGE, R4_4XLARGE, R4_8XLARGE.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// APICacheSpec defines the desired state of APICache
#APICacheSpec: {
	forProvider: #APICacheParameters @go(ForProvider)
}

// APICacheStatus defines the observed state of APICache.
#APICacheStatus: {
	atProvider?: #APICacheObservation @go(AtProvider)
}

// APICache is the Schema for the APICaches API. Provides an AppSync API Cache.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#APICache: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.apiCachingBehavior)",message="apiCachingBehavior is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ttl)",message="ttl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	spec:    #APICacheSpec   @go(Spec)
	status?: #APICacheStatus @go(Status)
}

// APICacheList contains a list of APICaches
#APICacheList: {
	items: [...#APICache] @go(Items,[]APICache)
}
