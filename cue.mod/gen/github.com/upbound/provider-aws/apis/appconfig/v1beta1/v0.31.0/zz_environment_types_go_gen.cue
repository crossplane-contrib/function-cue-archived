// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appconfig/v1beta1

package v1beta1

#EnvironmentObservation: {
	// ARN of the AppConfig Environment.
	arn?: null | string @go(Arn,*string)

	// AppConfig environment ID.
	environmentId?: null | string @go(EnvironmentID,*string)

	// AppConfig environment ID and application ID separated by a colon (:).
	id?: null | string @go(ID,*string)

	// State of the environment. Possible values are READY_FOR_DEPLOYMENT, DEPLOYING, ROLLING_BACK
	// or ROLLED_BACK.
	state?: null | string @go(State,*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#EnvironmentParameters: {
	// AppConfig application ID. Must be between 4 and 7 characters in length.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/appconfig/v1beta1.Application
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	applicationId?: null | string @go(ApplicationID,*string)

	// Description of the environment. Can be at most 1024 characters.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See Monitor below for more details.
	// +kubebuilder:validation:Optional
	monitor?: [...#MonitorParameters] @go(Monitor,[]MonitorParameters)

	// Name for the environment. Must be between 1 and 64 characters in length.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#MonitorObservation: {
}

#MonitorParameters: {
	// ARN of the Amazon CloudWatch alarm.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cloudwatch/v1beta1.MetricAlarm
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	alarmArn?: null | string @go(AlarmArn,*string)

	// ARN of an IAM role for AWS AppConfig to monitor alarm_arn.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	alarmRoleArn?: null | string @go(AlarmRoleArn,*string)
}

// EnvironmentSpec defines the desired state of Environment
#EnvironmentSpec: {
	forProvider: #EnvironmentParameters @go(ForProvider)
}

// EnvironmentStatus defines the observed state of Environment.
#EnvironmentStatus: {
	atProvider?: #EnvironmentObservation @go(AtProvider)
}

// Environment is the Schema for the Environments API. Provides an AppConfig Environment resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Environment: {
	spec:    #EnvironmentSpec   @go(Spec)
	status?: #EnvironmentStatus @go(Status)
}

// EnvironmentList contains a list of Environments
#EnvironmentList: {
	items: [...#Environment] @go(Items,[]Environment)
}
