// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/grafana/v1beta1

package v1beta1

#RoleAssociationObservation: {
	id?: null | string @go(ID,*string)
}

#RoleAssociationParameters: {
	// The AWS SSO group ids to be assigned the role given in role.
	// +kubebuilder:validation:Optional
	groupIds?: [...null | string] @go(GroupIds,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The grafana role. Valid values can be found here.
	// +kubebuilder:validation:Required
	role?: null | string @go(Role,*string)

	// The AWS SSO user ids to be assigned the role given in role.
	// +kubebuilder:validation:Optional
	userIds?: [...null | string] @go(UserIds,[]*string)

	// The workspace id.
	// +crossplane:generate:reference:type=Workspace
	// +kubebuilder:validation:Optional
	workspaceId?: null | string @go(WorkspaceID,*string)
}

// RoleAssociationSpec defines the desired state of RoleAssociation
#RoleAssociationSpec: {
	forProvider: #RoleAssociationParameters @go(ForProvider)
}

// RoleAssociationStatus defines the observed state of RoleAssociation.
#RoleAssociationStatus: {
	atProvider?: #RoleAssociationObservation @go(AtProvider)
}

// RoleAssociation is the Schema for the RoleAssociations API. Provides an Amazon Managed Grafana workspace role association resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RoleAssociation: {
	spec:    #RoleAssociationSpec   @go(Spec)
	status?: #RoleAssociationStatus @go(Status)
}

// RoleAssociationList contains a list of RoleAssociations
#RoleAssociationList: {
	items: [...#RoleAssociation] @go(Items,[]RoleAssociation)
}
