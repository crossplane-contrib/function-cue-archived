// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/location/v1beta1

package v1beta1

#TrackerAssociationObservation: {
	// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
	consumerArn?: null | string @go(ConsumerArn,*string)
	id?:          null | string @go(ID,*string)

	// The name of the tracker resource to be associated with a geofence collection.
	trackerName?: null | string @go(TrackerName,*string)
}

#TrackerAssociationParameters: {
	// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/location/v1beta1.GeofenceCollection
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("collection_arn",true)
	// +kubebuilder:validation:Optional
	consumerArn?: null | string @go(ConsumerArn,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The name of the tracker resource to be associated with a geofence collection.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/location/v1beta1.Tracker
	// +kubebuilder:validation:Optional
	trackerName?: null | string @go(TrackerName,*string)
}

// TrackerAssociationSpec defines the desired state of TrackerAssociation
#TrackerAssociationSpec: {
	forProvider: #TrackerAssociationParameters @go(ForProvider)
}

// TrackerAssociationStatus defines the observed state of TrackerAssociation.
#TrackerAssociationStatus: {
	atProvider?: #TrackerAssociationObservation @go(AtProvider)
}

// TrackerAssociation is the Schema for the TrackerAssociations API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#TrackerAssociation: {
	spec:    #TrackerAssociationSpec   @go(Spec)
	status?: #TrackerAssociationStatus @go(Status)
}

// TrackerAssociationList contains a list of TrackerAssociations
#TrackerAssociationList: {
	items: [...#TrackerAssociation] @go(Items,[]TrackerAssociation)
}
