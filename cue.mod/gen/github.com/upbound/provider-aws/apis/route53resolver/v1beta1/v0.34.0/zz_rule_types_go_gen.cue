// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/route53resolver/v1beta1

package v1beta1

#RuleObservation: {
	// The ARN (Amazon Resource Name) for the resolver rule.
	arn?: null | string @go(Arn,*string)

	// DNS queries for this domain name are forwarded to the IP addresses that are specified using target_ip.
	domainName?: null | string @go(DomainName,*string)

	// The ID of the resolver rule.
	id?: null | string @go(ID,*string)

	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	name?: null | string @go(Name,*string)

	// When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.
	ownerId?: null | string @go(OwnerID,*string)

	// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using target_ip.
	// This argument should only be specified for FORWARD type rules.
	resolverEndpointId?: null | string @go(ResolverEndpointID,*string)

	// The rule type. Valid values are FORWARD, SYSTEM and RECURSIVE.
	ruleType?: null | string @go(RuleType,*string)

	// Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
	// Values are NOT_SHARED, SHARED_BY_ME or SHARED_WITH_ME
	shareStatus?: null | string @go(ShareStatus,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for FORWARD type rules.
	targetIp?: [...#TargetIPObservation] @go(TargetIP,[]TargetIPObservation)
}

#RuleParameters: {
	// DNS queries for this domain name are forwarded to the IP addresses that are specified using target_ip.
	// +kubebuilder:validation:Optional
	domainName?: null | string @go(DomainName,*string)

	// A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify using target_ip.
	// This argument should only be specified for FORWARD type rules.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/route53resolver/v1beta1.Endpoint
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	resolverEndpointId?: null | string @go(ResolverEndpointID,*string)

	// The rule type. Valid values are FORWARD, SYSTEM and RECURSIVE.
	// +kubebuilder:validation:Optional
	ruleType?: null | string @go(RuleType,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Configuration block(s) indicating the IPs that you want Resolver to forward DNS queries to (documented below).
	// This argument should only be specified for FORWARD type rules.
	// +kubebuilder:validation:Optional
	targetIp?: [...#TargetIPParameters] @go(TargetIP,[]TargetIPParameters)
}

#TargetIPObservation: {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	ip?: null | string @go(IP,*string)

	// The port at ip that you want to forward DNS queries to. Default value is 53
	port?: null | float64 @go(Port,*float64)
}

#TargetIPParameters: {
	// One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
	// +kubebuilder:validation:Required
	ip?: null | string @go(IP,*string)

	// The port at ip that you want to forward DNS queries to. Default value is 53
	// +kubebuilder:validation:Optional
	port?: null | float64 @go(Port,*float64)
}

// RuleSpec defines the desired state of Rule
#RuleSpec: {
	forProvider: #RuleParameters @go(ForProvider)
}

// RuleStatus defines the observed state of Rule.
#RuleStatus: {
	atProvider?: #RuleObservation @go(AtProvider)
}

// Rule is the Schema for the Rules API. Provides a Route53 Resolver rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Rule: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.domainName)",message="domainName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ruleType)",message="ruleType is a required parameter"
	spec:    #RuleSpec   @go(Spec)
	status?: #RuleStatus @go(Status)
}

// RuleList contains a list of Rules
#RuleList: {
	items: [...#Rule] @go(Items,[]Rule)
}
