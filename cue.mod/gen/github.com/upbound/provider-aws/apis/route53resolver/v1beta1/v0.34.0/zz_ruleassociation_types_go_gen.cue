// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/route53resolver/v1beta1

package v1beta1

#RuleAssociationObservation: {
	// The ID of the resolver rule association.
	id?: null | string @go(ID,*string)

	// A name for the association that you're creating between a resolver rule and a VPC.
	name?: null | string @go(Name,*string)

	// The ID of the resolver rule that you want to associate with the VPC.
	resolverRuleId?: null | string @go(ResolverRuleID,*string)

	// The ID of the VPC that you want to associate the resolver rule with.
	vpcId?: null | string @go(VPCID,*string)
}

#RuleAssociationParameters: {
	// A name for the association that you're creating between a resolver rule and a VPC.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the resolver rule that you want to associate with the VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/route53resolver/v1beta1.Rule
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	resolverRuleId?: null | string @go(ResolverRuleID,*string)

	// The ID of the VPC that you want to associate the resolver rule with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	vpcId?: null | string @go(VPCID,*string)
}

// RuleAssociationSpec defines the desired state of RuleAssociation
#RuleAssociationSpec: {
	forProvider: #RuleAssociationParameters @go(ForProvider)
}

// RuleAssociationStatus defines the observed state of RuleAssociation.
#RuleAssociationStatus: {
	atProvider?: #RuleAssociationObservation @go(AtProvider)
}

// RuleAssociation is the Schema for the RuleAssociations API. Provides a Route53 Resolver rule association.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RuleAssociation: {
	spec:    #RuleAssociationSpec   @go(Spec)
	status?: #RuleAssociationStatus @go(Status)
}

// RuleAssociationList contains a list of RuleAssociations
#RuleAssociationList: {
	items: [...#RuleAssociation] @go(Items,[]RuleAssociation)
}
