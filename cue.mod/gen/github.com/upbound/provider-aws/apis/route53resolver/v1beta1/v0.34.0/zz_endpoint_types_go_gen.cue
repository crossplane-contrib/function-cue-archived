// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/route53resolver/v1beta1

package v1beta1

#EndpointObservation: {
	// The ARN of the Route 53 Resolver endpoint.
	arn?: null | string @go(Arn,*string)

	// The direction of DNS queries to or from the Route 53 Resolver endpoint.
	// Valid values are INBOUND (resolver forwards DNS queries to the DNS service for a VPC from your network or another VPC)
	// or OUTBOUND (resolver forwards DNS queries from the DNS service for a VPC to your network or another VPC).
	direction?: null | string @go(Direction,*string)

	// The ID of the VPC that you want to create the resolver endpoint in.
	hostVpcId?: null | string @go(HostVPCID,*string)

	// The ID of the Route 53 Resolver endpoint.
	id?: null | string @go(ID,*string)

	// The subnets and IP addresses in your VPC that you want DNS queries to pass through on the way from your VPCs
	// to your network (for outbound endpoints) or on the way from your network to your VPCs (for inbound endpoints). Described below.
	ipAddress?: [...#IPAddressObservation] @go(IPAddress,[]IPAddressObservation)

	// The friendly name of the Route 53 Resolver endpoint.
	name?: null | string @go(Name,*string)

	// The ID of one or more security groups that you want to use to control access to this VPC.
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#EndpointParameters: {
	// The direction of DNS queries to or from the Route 53 Resolver endpoint.
	// Valid values are INBOUND (resolver forwards DNS queries to the DNS service for a VPC from your network or another VPC)
	// or OUTBOUND (resolver forwards DNS queries from the DNS service for a VPC to your network or another VPC).
	// +kubebuilder:validation:Optional
	direction?: null | string @go(Direction,*string)

	// The subnets and IP addresses in your VPC that you want DNS queries to pass through on the way from your VPCs
	// to your network (for outbound endpoints) or on the way from your network to your VPCs (for inbound endpoints). Described below.
	// +kubebuilder:validation:Optional
	ipAddress?: [...#IPAddressParameters] @go(IPAddress,[]IPAddressParameters)

	// The friendly name of the Route 53 Resolver endpoint.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of one or more security groups that you want to use to control access to this VPC.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=SecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#IPAddressObservation: {
	// The IP address in the subnet that you want to use for DNS queries.
	ip?: null | string @go(IP,*string)

	// The ID of the Route 53 Resolver endpoint.
	ipId?: null | string @go(IPID,*string)

	// The ID of the subnet that contains the IP address.
	subnetId?: null | string @go(SubnetID,*string)
}

#IPAddressParameters: {
	// The IP address in the subnet that you want to use for DNS queries.
	// +kubebuilder:validation:Optional
	ip?: null | string @go(IP,*string)

	// The ID of the subnet that contains the IP address.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)
}

// EndpointSpec defines the desired state of Endpoint
#EndpointSpec: {
	forProvider: #EndpointParameters @go(ForProvider)
}

// EndpointStatus defines the observed state of Endpoint.
#EndpointStatus: {
	atProvider?: #EndpointObservation @go(AtProvider)
}

// Endpoint is the Schema for the Endpoints API. Provides a Route 53 Resolver endpoint resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Endpoint: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.direction)",message="direction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ipAddress)",message="ipAddress is a required parameter"
	spec:    #EndpointSpec   @go(Spec)
	status?: #EndpointStatus @go(Status)
}

// EndpointList contains a list of Endpoints
#EndpointList: {
	items: [...#Endpoint] @go(Items,[]Endpoint)
}
