// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ivs/v1beta1

package v1beta1

#DestinationConfigurationObservation: {
	// S3 destination configuration where recorded videos will be stored.
	s3?: [...#S3Observation] @go(S3,[]S3Observation)
}

#DestinationConfigurationParameters: {
	// S3 destination configuration where recorded videos will be stored.
	// +kubebuilder:validation:Required
	s3: [...#S3Parameters] @go(S3,[]S3Parameters)
}

#RecordingConfigurationObservation: {
	// ARN of the Recording Configuration.
	arn?: null | string @go(Arn,*string)

	// Object containing destination configuration for where recorded video will be stored.
	destinationConfiguration?: [...#DestinationConfigurationObservation] @go(DestinationConfiguration,[]DestinationConfigurationObservation)
	id?: null | string @go(ID,*string)

	// Recording Configuration name.
	name?: null | string @go(Name,*string)

	// If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
	recordingReconnectWindowSeconds?: null | float64 @go(RecordingReconnectWindowSeconds,*float64)

	// The current state of the Recording Configuration.
	state?: null | string @go(State,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
	thumbnailConfiguration?: [...#ThumbnailConfigurationObservation] @go(ThumbnailConfiguration,[]ThumbnailConfigurationObservation)
}

#RecordingConfigurationParameters: {
	// Object containing destination configuration for where recorded video will be stored.
	// +kubebuilder:validation:Optional
	destinationConfiguration?: [...#DestinationConfigurationParameters] @go(DestinationConfiguration,[]DestinationConfigurationParameters)

	// Recording Configuration name.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
	// +kubebuilder:validation:Optional
	recordingReconnectWindowSeconds?: null | float64 @go(RecordingReconnectWindowSeconds,*float64)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
	// +kubebuilder:validation:Optional
	thumbnailConfiguration?: [...#ThumbnailConfigurationParameters] @go(ThumbnailConfiguration,[]ThumbnailConfigurationParameters)
}

#S3Observation: {
	// S3 bucket name where recorded videos will be stored.
	bucketName?: null | string @go(BucketName,*string)
}

#S3Parameters: {
	// S3 bucket name where recorded videos will be stored.
	// +kubebuilder:validation:Required
	bucketName?: null | string @go(BucketName,*string)
}

#ThumbnailConfigurationObservation: {
	// Thumbnail recording mode. Valid values: DISABLED, INTERVAL.
	recordingMode?: null | string @go(RecordingMode,*string)

	// The targeted thumbnail-generation interval in seconds.
	targetIntervalSeconds?: null | float64 @go(TargetIntervalSeconds,*float64)
}

#ThumbnailConfigurationParameters: {
	// Thumbnail recording mode. Valid values: DISABLED, INTERVAL.
	// +kubebuilder:validation:Optional
	recordingMode?: null | string @go(RecordingMode,*string)

	// The targeted thumbnail-generation interval in seconds.
	// +kubebuilder:validation:Optional
	targetIntervalSeconds?: null | float64 @go(TargetIntervalSeconds,*float64)
}

// RecordingConfigurationSpec defines the desired state of RecordingConfiguration
#RecordingConfigurationSpec: {
	forProvider: #RecordingConfigurationParameters @go(ForProvider)
}

// RecordingConfigurationStatus defines the observed state of RecordingConfiguration.
#RecordingConfigurationStatus: {
	atProvider?: #RecordingConfigurationObservation @go(AtProvider)
}

// RecordingConfiguration is the Schema for the RecordingConfigurations API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RecordingConfiguration: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.destinationConfiguration)",message="destinationConfiguration is a required parameter"
	spec:    #RecordingConfigurationSpec   @go(Spec)
	status?: #RecordingConfigurationStatus @go(Status)
}

// RecordingConfigurationList contains a list of RecordingConfigurations
#RecordingConfigurationList: {
	items: [...#RecordingConfiguration] @go(Items,[]RecordingConfiguration)
}
