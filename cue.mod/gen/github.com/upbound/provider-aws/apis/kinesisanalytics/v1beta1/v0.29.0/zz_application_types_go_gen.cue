// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/kinesisanalytics/v1beta1

package v1beta1

#ApplicationObservation: {
	// The ARN of the Kinesis Analytics Appliation.
	arn?: null | string @go(Arn,*string)

	// The CloudWatch log stream options to monitor application errors.
	// See CloudWatch Logging Options below for more details.
	// +kubebuilder:validation:Optional
	cloudwatchLoggingOptions?: [...#CloudwatchLoggingOptionsObservation] @go(CloudwatchLoggingOptions,[]CloudwatchLoggingOptionsObservation)

	// The Timestamp when the application version was created.
	createTimestamp?: null | string @go(CreateTimestamp,*string)

	// The ARN of the Kinesis Analytics Application.
	id?: null | string @go(ID,*string)

	// Input configuration of the application. See Inputs below for more details.
	// +kubebuilder:validation:Optional
	inputs?: [...#InputsObservation] @go(Inputs,[]InputsObservation)

	// The Timestamp when the application was last updated.
	lastUpdateTimestamp?: null | string @go(LastUpdateTimestamp,*string)

	// Output destination configuration of the application. See Outputs below for more details.
	// +kubebuilder:validation:Optional
	outputs?: [...#OutputsObservation] @go(Outputs,[]OutputsObservation)

	// An S3 Reference Data Source for the application.
	// See Reference Data Sources below for more details.
	// +kubebuilder:validation:Optional
	referenceDataSources?: [...#ReferenceDataSourcesObservation] @go(ReferenceDataSources,[]ReferenceDataSourcesObservation)

	// The Status of the application.
	status?: null | string @go(Status,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The Version of the application.
	version?: null | float64 @go(Version,*float64)
}

#ApplicationParameters: {
	// The CloudWatch log stream options to monitor application errors.
	// See CloudWatch Logging Options below for more details.
	// +kubebuilder:validation:Optional
	cloudwatchLoggingOptions?: [...#CloudwatchLoggingOptionsParameters] @go(CloudwatchLoggingOptions,[]CloudwatchLoggingOptionsParameters)

	// SQL Code to transform input data, and generate output.
	// +kubebuilder:validation:Optional
	code?: null | string @go(Code,*string)

	// Description of the application.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Input configuration of the application. See Inputs below for more details.
	// +kubebuilder:validation:Optional
	inputs?: [...#InputsParameters] @go(Inputs,[]InputsParameters)

	// Output destination configuration of the application. See Outputs below for more details.
	// +kubebuilder:validation:Optional
	outputs?: [...#OutputsParameters] @go(Outputs,[]OutputsParameters)

	// An S3 Reference Data Source for the application.
	// See Reference Data Sources below for more details.
	// +kubebuilder:validation:Optional
	referenceDataSources?: [...#ReferenceDataSourcesParameters] @go(ReferenceDataSources,[]ReferenceDataSourcesParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined starting_position must be configured.
	// To modify an application's starting position, first stop the application by setting start_application = false, then update starting_position and set start_application = true.
	// +kubebuilder:validation:Optional
	startApplication?: null | bool @go(StartApplication,*bool)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#CloudwatchLoggingOptionsObservation: {
	// The ARN of the Kinesis Analytics Application.
	id?: null | string @go(ID,*string)
}

#CloudwatchLoggingOptionsParameters: {
	// The ARN of the CloudWatch Log Stream.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1.Stream
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	logStreamArn?: null | string @go(LogStreamArn,*string)

	// The ARN of the IAM Role used to send application messages.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#CsvObservation: {
}

#CsvParameters: {
	// The Column Delimiter.
	// +kubebuilder:validation:Required
	recordColumnDelimiter?: null | string @go(RecordColumnDelimiter,*string)

	// The Row Delimiter.
	// +kubebuilder:validation:Required
	recordRowDelimiter?: null | string @go(RecordRowDelimiter,*string)
}

#InputsObservation: {
	// The ARN of the Kinesis Analytics Application.
	id?: null | string @go(ID,*string)

	// The Schema format of the data in the streaming source. See Source Schema below for more details.
	// +kubebuilder:validation:Required
	schema?: [...#SchemaObservation] @go(Schema,[]SchemaObservation)
	streamNames?: [...null | string] @go(StreamNames,[]*string)
}

#InputsParameters: {
	// The Kinesis Firehose configuration for the streaming source. Conflicts with kinesis_stream.
	// See Kinesis Firehose below for more details.
	// +kubebuilder:validation:Optional
	kinesisFirehose?: [...#KinesisFirehoseParameters] @go(KinesisFirehose,[]KinesisFirehoseParameters)

	// The Kinesis Stream configuration for the streaming source. Conflicts with kinesis_firehose.
	// See Kinesis Stream below for more details.
	// +kubebuilder:validation:Optional
	kinesisStream?: [...#KinesisStreamParameters] @go(KinesisStream,[]KinesisStreamParameters)

	// The Name Prefix to use when creating an in-application stream.
	// +kubebuilder:validation:Required
	namePrefix?: null | string @go(NamePrefix,*string)

	// The number of Parallel in-application streams to create.
	// See Parallelism below for more details.
	// +kubebuilder:validation:Optional
	parallelism?: [...#ParallelismParameters] @go(Parallelism,[]ParallelismParameters)

	// The Processing Configuration to transform records as they are received from the stream.
	// See Processing Configuration below for more details.
	// +kubebuilder:validation:Optional
	processingConfiguration?: [...#ProcessingConfigurationParameters] @go(ProcessingConfiguration,[]ProcessingConfigurationParameters)

	// The Schema format of the data in the streaming source. See Source Schema below for more details.
	// +kubebuilder:validation:Required
	schema: [...#SchemaParameters] @go(Schema,[]SchemaParameters)

	// The point at which the application starts processing records from the streaming source.
	// See Starting Position Configuration below for more details.
	// +kubebuilder:validation:Optional
	startingPositionConfiguration?: [...#StartingPositionConfigurationParameters] @go(StartingPositionConfiguration,[]StartingPositionConfigurationParameters)
}

#JSONObservation: {
}

#JSONParameters: {
	// Path to the top-level parent that contains the records.
	// +kubebuilder:validation:Required
	recordRowPath?: null | string @go(RecordRowPath,*string)
}

#KinesisFirehoseObservation: {
}

#KinesisFirehoseParameters: {
	// The ARN of the Lambda function.
	// +kubebuilder:validation:Required
	resourceArn?: null | string @go(ResourceArn,*string)

	// The IAM Role ARN to read the data.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#KinesisStreamObservation: {
}

#KinesisStreamParameters: {
	// The ARN of the Lambda function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kinesis/v1beta1.Stream
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.TerraformID()
	// +kubebuilder:validation:Optional
	resourceArn?: null | string @go(ResourceArn,*string)

	// The IAM Role ARN to read the data.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#LambdaObservation: {
}

#LambdaParameters: {
	// The ARN of the Lambda function.
	// +kubebuilder:validation:Required
	resourceArn?: null | string @go(ResourceArn,*string)

	// The IAM Role ARN to read the data.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#MappingParametersCsvObservation: {
}

#MappingParametersCsvParameters: {
	// The Column Delimiter.
	// +kubebuilder:validation:Required
	recordColumnDelimiter?: null | string @go(RecordColumnDelimiter,*string)

	// The Row Delimiter.
	// +kubebuilder:validation:Required
	recordRowDelimiter?: null | string @go(RecordRowDelimiter,*string)
}

#MappingParametersJSONObservation: {
}

#MappingParametersJSONParameters: {
	// Path to the top-level parent that contains the records.
	// +kubebuilder:validation:Required
	recordRowPath?: null | string @go(RecordRowPath,*string)
}

#MappingParametersObservation: {
}

#MappingParametersParameters: {
	// Mapping information when the record format uses delimiters.
	// See CSV Mapping Parameters below for more details.
	// +kubebuilder:validation:Optional
	csv?: [...#CsvParameters] @go(Csv,[]CsvParameters)

	// Mapping information when JSON is the record format on the streaming source.
	// See JSON Mapping Parameters below for more details.
	// +kubebuilder:validation:Optional
	json?: [...#JSONParameters] @go(JSON,[]JSONParameters)
}

#OutputsKinesisFirehoseObservation: {
}

#OutputsKinesisFirehoseParameters: {
	// The ARN of the Lambda function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/firehose/v1beta1.DeliveryStream
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",false)
	// +kubebuilder:validation:Optional
	resourceArn?: null | string @go(ResourceArn,*string)

	// The IAM Role ARN to read the data.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

#OutputsKinesisStreamObservation: {
}

#OutputsKinesisStreamParameters: {
	// The ARN of the Lambda function.
	// +kubebuilder:validation:Required
	resourceArn?: null | string @go(ResourceArn,*string)

	// The IAM Role ARN to read the data.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#OutputsLambdaObservation: {
}

#OutputsLambdaParameters: {
	// The ARN of the Lambda function.
	// +kubebuilder:validation:Required
	resourceArn?: null | string @go(ResourceArn,*string)

	// The IAM Role ARN to read the data.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#OutputsObservation: {
	// The ARN of the Kinesis Analytics Application.
	id?: null | string @go(ID,*string)
}

#OutputsParameters: {
	// The Kinesis Firehose configuration for the destination stream. Conflicts with kinesis_stream.
	// See Kinesis Firehose below for more details.
	// +kubebuilder:validation:Optional
	kinesisFirehose?: [...#OutputsKinesisFirehoseParameters] @go(KinesisFirehose,[]OutputsKinesisFirehoseParameters)

	// The Kinesis Stream configuration for the destination stream. Conflicts with kinesis_firehose.
	// See Kinesis Stream below for more details.
	// +kubebuilder:validation:Optional
	kinesisStream?: [...#OutputsKinesisStreamParameters] @go(KinesisStream,[]OutputsKinesisStreamParameters)

	// The Lambda function destination. See Lambda below for more details.
	// +kubebuilder:validation:Optional
	lambda?: [...#OutputsLambdaParameters] @go(Lambda,[]OutputsLambdaParameters)

	// The Name of the in-application stream.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The Schema format of the data written to the destination. See Destination Schema below for more details.
	// +kubebuilder:validation:Required
	schema: [...#OutputsSchemaParameters] @go(Schema,[]OutputsSchemaParameters)
}

#OutputsSchemaObservation: {
}

#OutputsSchemaParameters: {
	// The Format Type of the records on the output stream. Can be CSV or JSON.
	// +kubebuilder:validation:Required
	recordFormatType?: null | string @go(RecordFormatType,*string)
}

#ParallelismObservation: {
}

#ParallelismParameters: {
	// The Count of streams.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)
}

#ProcessingConfigurationObservation: {
}

#ProcessingConfigurationParameters: {
	// The Lambda function configuration. See Lambda below for more details.
	// +kubebuilder:validation:Required
	lambda: [...#LambdaParameters] @go(Lambda,[]LambdaParameters)
}

#RecordColumnsObservation: {
}

#RecordColumnsParameters: {
	// The Mapping reference to the data element.
	// +kubebuilder:validation:Optional
	mapping?: null | string @go(Mapping,*string)

	// Name of the column.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The SQL Type of the column.
	// +kubebuilder:validation:Required
	sqlType?: null | string @go(SQLType,*string)
}

#RecordFormatMappingParametersObservation: {
}

#RecordFormatMappingParametersParameters: {
	// Mapping information when the record format uses delimiters.
	// See CSV Mapping Parameters below for more details.
	// +kubebuilder:validation:Optional
	csv?: [...#MappingParametersCsvParameters] @go(Csv,[]MappingParametersCsvParameters)

	// Mapping information when JSON is the record format on the streaming source.
	// See JSON Mapping Parameters below for more details.
	// +kubebuilder:validation:Optional
	json?: [...#MappingParametersJSONParameters] @go(JSON,[]MappingParametersJSONParameters)
}

#RecordFormatObservation: {
	// The Format Type of the records on the output stream. Can be CSV or JSON.
	recordFormatType?: null | string @go(RecordFormatType,*string)
}

#RecordFormatParameters: {
	// The Mapping Information for the record format.
	// See Mapping Parameters below for more details.
	// +kubebuilder:validation:Optional
	mappingParameters?: [...#MappingParametersParameters] @go(MappingParameters,[]MappingParametersParameters)
}

#ReferenceDataSourcesObservation: {
	// The ARN of the Kinesis Analytics Application.
	id?: null | string @go(ID,*string)

	// The Schema format of the data in the streaming source. See Source Schema below for more details.
	// +kubebuilder:validation:Required
	schema?: [...#ReferenceDataSourcesSchemaObservation] @go(Schema,[]ReferenceDataSourcesSchemaObservation)
}

#ReferenceDataSourcesParameters: {
	// The S3 configuration for the reference data source. See S3 Reference below for more details.
	// +kubebuilder:validation:Required
	s3: [...#S3Parameters] @go(S3,[]S3Parameters)

	// The Schema format of the data in the streaming source. See Source Schema below for more details.
	// +kubebuilder:validation:Required
	schema: [...#ReferenceDataSourcesSchemaParameters] @go(Schema,[]ReferenceDataSourcesSchemaParameters)

	// The in-application Table Name.
	// +kubebuilder:validation:Required
	tableName?: null | string @go(TableName,*string)
}

#ReferenceDataSourcesSchemaObservation: {
	// The Record Format and mapping information to schematize a record.
	// See Record Format below for more details.
	// +kubebuilder:validation:Required
	recordFormat?: [...#SchemaRecordFormatObservation] @go(RecordFormat,[]SchemaRecordFormatObservation)
}

#ReferenceDataSourcesSchemaParameters: {
	// The Record Column mapping for the streaming source data element.
	// See Record Columns below for more details.
	// +kubebuilder:validation:Required
	recordColumns: [...#SchemaRecordColumnsParameters] @go(RecordColumns,[]SchemaRecordColumnsParameters)

	// The Encoding of the record in the streaming source.
	// +kubebuilder:validation:Optional
	recordEncoding?: null | string @go(RecordEncoding,*string)

	// The Record Format and mapping information to schematize a record.
	// See Record Format below for more details.
	// +kubebuilder:validation:Required
	recordFormat: [...#SchemaRecordFormatParameters] @go(RecordFormat,[]SchemaRecordFormatParameters)
}

#S3Observation: {
}

#S3Parameters: {
	// The S3 Bucket ARN.
	// +kubebuilder:validation:Required
	bucketArn?: null | string @go(BucketArn,*string)

	// The File Key name containing reference data.
	// +kubebuilder:validation:Required
	fileKey?: null | string @go(FileKey,*string)

	// The IAM Role ARN to read the data.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#SchemaObservation: {
	// The Record Format and mapping information to schematize a record.
	// See Record Format below for more details.
	// +kubebuilder:validation:Required
	recordFormat?: [...#RecordFormatObservation] @go(RecordFormat,[]RecordFormatObservation)
}

#SchemaParameters: {
	// The Record Column mapping for the streaming source data element.
	// See Record Columns below for more details.
	// +kubebuilder:validation:Required
	recordColumns: [...#RecordColumnsParameters] @go(RecordColumns,[]RecordColumnsParameters)

	// The Encoding of the record in the streaming source.
	// +kubebuilder:validation:Optional
	recordEncoding?: null | string @go(RecordEncoding,*string)

	// The Record Format and mapping information to schematize a record.
	// See Record Format below for more details.
	// +kubebuilder:validation:Required
	recordFormat: [...#RecordFormatParameters] @go(RecordFormat,[]RecordFormatParameters)
}

#SchemaRecordColumnsObservation: {
}

#SchemaRecordColumnsParameters: {
	// The Mapping reference to the data element.
	// +kubebuilder:validation:Optional
	mapping?: null | string @go(Mapping,*string)

	// Name of the column.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The SQL Type of the column.
	// +kubebuilder:validation:Required
	sqlType?: null | string @go(SQLType,*string)
}

#SchemaRecordFormatObservation: {
	// The Format Type of the records on the output stream. Can be CSV or JSON.
	recordFormatType?: null | string @go(RecordFormatType,*string)
}

#SchemaRecordFormatParameters: {
	// The Mapping Information for the record format.
	// See Mapping Parameters below for more details.
	// +kubebuilder:validation:Optional
	mappingParameters?: [...#RecordFormatMappingParametersParameters] @go(MappingParameters,[]RecordFormatMappingParametersParameters)
}

#StartingPositionConfigurationObservation: {
}

#StartingPositionConfigurationParameters: {
	// The starting position on the stream. Valid values: LAST_STOPPED_POINT, NOW, TRIM_HORIZON.
	// +kubebuilder:validation:Optional
	startingPosition?: null | string @go(StartingPosition,*string)
}

// ApplicationSpec defines the desired state of Application
#ApplicationSpec: {
	forProvider: #ApplicationParameters @go(ForProvider)
}

// ApplicationStatus defines the observed state of Application.
#ApplicationStatus: {
	atProvider?: #ApplicationObservation @go(AtProvider)
}

// Application is the Schema for the Applications API. Provides a AWS Kinesis Analytics Application
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Application: {
	spec:    #ApplicationSpec   @go(Spec)
	status?: #ApplicationStatus @go(Status)
}

// ApplicationList contains a list of Applications
#ApplicationList: {
	items: [...#Application] @go(Items,[]Application)
}
