// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/codepipeline/v1beta1

package v1beta1

#ActionObservation: {
}

#ActionParameters: {
	// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are Approval, Build, Deploy, Invoke, Source and Test.
	// +kubebuilder:validation:Required
	category?: null | string @go(Category,*string)

	// A map of the action declaration's configuration. Configurations options for action types and providers can be found in the Pipeline Structure Reference and Action Structure Reference documentation.
	// +kubebuilder:validation:Optional
	configuration?: {[string]: null | string} @go(Configuration,map[string]*string)

	// A list of artifact names to be worked on.
	// +kubebuilder:validation:Optional
	inputArtifacts?: [...null | string] @go(InputArtifacts,[]*string)

	// The action declaration's name.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The namespace all output variables will be accessed from.
	// +kubebuilder:validation:Optional
	namespace?: null | string @go(Namespace,*string)

	// A list of artifact names to output. Output artifact names must be unique within a pipeline.
	// +kubebuilder:validation:Optional
	outputArtifacts?: [...null | string] @go(OutputArtifacts,[]*string)

	// The creator of the action being called. Possible values are AWS, Custom and ThirdParty.
	// +kubebuilder:validation:Required
	owner?: null | string @go(Owner,*string)

	// The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the Action Structure Reference documentation.
	// +kubebuilder:validation:Required
	provider?: null | string @go(Provider,*string)

	// The region in which to run the action.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The order in which actions are run.
	// +kubebuilder:validation:Optional
	runOrder?: null | float64 @go(RunOrder,*float64)

	// A string that identifies the action type.
	// +kubebuilder:validation:Required
	version?: null | string @go(Version,*string)
}

#ArtifactStoreObservation: {
}

#ArtifactStoreParameters: {
	// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.
	// +kubebuilder:validation:Optional
	encryptionKey?: [...#EncryptionKeyParameters] @go(EncryptionKey,[]EncryptionKeyParameters)

	// The location where AWS CodePipeline stores artifacts for a pipeline; currently only S3 is supported.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
	// +kubebuilder:validation:Optional
	region?: null | string @go(Region,*string)

	// The type of the artifact store, such as Amazon S3
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)
}

#CodepipelineObservation: {
	// The codepipeline ARN.
	arn?: null | string @go(Arn,*string)

	// The codepipeline ID.
	id?: null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#CodepipelineParameters: {
	// One or more artifact_store blocks. Artifact stores are documented below.
	// +kubebuilder:validation:Required
	artifactStore: [...#ArtifactStoreParameters] @go(ArtifactStore,[]ArtifactStoreParameters)

	// The region in which to run the action.
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// (Minimum of at least two stage blocks is required) A stage block. Stages are documented below.
	// +kubebuilder:validation:Required
	stage: [...#StageParameters] @go(Stage,[]StageParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#EncryptionKeyObservation: {
}

#EncryptionKeyParameters: {
	// The KMS key ARN or ID
	// +kubebuilder:validation:Required
	id?: null | string @go(ID,*string)

	// The type of key; currently only KMS is supported
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)
}

#StageObservation: {
}

#StageParameters: {
	// The action(s) to include in the stage. Defined as an action block below
	// +kubebuilder:validation:Required
	action: [...#ActionParameters] @go(Action,[]ActionParameters)

	// The name of the stage.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)
}

// CodepipelineSpec defines the desired state of Codepipeline
#CodepipelineSpec: {
	forProvider: #CodepipelineParameters @go(ForProvider)
}

// CodepipelineStatus defines the observed state of Codepipeline.
#CodepipelineStatus: {
	atProvider?: #CodepipelineObservation @go(AtProvider)
}

// Codepipeline is the Schema for the Codepipelines API. Provides a CodePipeline
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Codepipeline: {
	spec:    #CodepipelineSpec   @go(Spec)
	status?: #CodepipelineStatus @go(Status)
}

// CodepipelineList contains a list of Codepipelines
#CodepipelineList: {
	items: [...#Codepipeline] @go(Items,[]Codepipeline)
}
