// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/budgets/v1beta1

package v1beta1

#AutoAdjustDataObservation: {
	// +kubebuilder:validation:Optional
	historicalOptions?: [...#HistoricalOptionsObservation] @go(HistoricalOptions,[]HistoricalOptionsObservation)
	lastAutoAdjustTime?: null | string @go(LastAutoAdjustTime,*string)
}

#AutoAdjustDataParameters: {
	// +kubebuilder:validation:Required
	autoAdjustType?: null | string @go(AutoAdjustType,*string)

	// +kubebuilder:validation:Optional
	historicalOptions?: [...#HistoricalOptionsParameters] @go(HistoricalOptions,[]HistoricalOptionsParameters)
}

#BudgetObservation: {
	// The ARN of the budget.
	arn?: null | string @go(Arn,*string)

	// Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
	// +kubebuilder:validation:Optional
	autoAdjustData?: [...#AutoAdjustDataObservation] @go(AutoAdjustData,[]AutoAdjustDataObservation)

	// id of resource.
	id?: null | string @go(ID,*string)
}

#BudgetParameters: {
	// The ID of the target account for budget. Will use current user's account_id by default if omitted.
	// +kubebuilder:validation:Optional
	accountId?: null | string @go(AccountID,*string)

	// Object containing [AutoAdjustData] which determines the budget amount for an auto-adjusting budget.
	// +kubebuilder:validation:Optional
	autoAdjustData?: [...#AutoAdjustDataParameters] @go(AutoAdjustData,[]AutoAdjustDataParameters)

	// Whether this budget tracks monetary cost or usage.
	// +kubebuilder:validation:Required
	budgetType?: null | string @go(BudgetType,*string)

	// A list of CostFilter name/values pair to apply to budget.
	// +kubebuilder:validation:Optional
	costFilter?: [...#CostFilterParameters] @go(CostFilter,[]CostFilterParameters)

	// Map of CostFilters key/value pairs to apply to the budget.
	// +kubebuilder:validation:Optional
	costFilters?: {[string]: null | string} @go(CostFilters,map[string]*string)

	// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
	// +kubebuilder:validation:Optional
	costTypes?: [...#CostTypesParameters] @go(CostTypes,[]CostTypesParameters)

	// The amount of cost or usage being measured for a budget.
	// +kubebuilder:validation:Optional
	limitAmount?: null | string @go(LimitAmount,*string)

	// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See Spend documentation.
	// +kubebuilder:validation:Optional
	limitUnit?: null | string @go(LimitUnit,*string)

	// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
	// +kubebuilder:validation:Optional
	notification?: [...#NotificationParameters] @go(Notification,[]NotificationParameters)

	// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See PlannedBudgetLimits documentation.
	// +kubebuilder:validation:Optional
	plannedLimit?: [...#PlannedLimitParameters] @go(PlannedLimit,[]PlannedLimitParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The end of the time period covered by the budget. There are no restrictions on the end date. Format: 2017-01-01_12:00.
	// +kubebuilder:validation:Optional
	timePeriodEnd?: null | string @go(TimePeriodEnd,*string)

	// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: 2017-01-01_12:00.
	// +kubebuilder:validation:Optional
	timePeriodStart?: null | string @go(TimePeriodStart,*string)

	// The length of time until a budget resets the actual and forecasted spend. Valid values: MONTHLY, QUARTERLY, ANNUALLY, and DAILY.
	// +kubebuilder:validation:Required
	timeUnit?: null | string @go(TimeUnit,*string)
}

#CostFilterObservation: {
}

#CostFilterParameters: {
	// The name of a budget. Unique within accounts.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// +kubebuilder:validation:Required
	values: [...null | string] @go(Values,[]*string)
}

#CostTypesObservation: {
}

#CostTypesParameters: {
	// A boolean value whether to include credits in the cost budget. Defaults to true
	// +kubebuilder:validation:Optional
	includeCredit?: null | bool @go(IncludeCredit,*bool)

	// Whether a budget includes discounts. Defaults to true
	// +kubebuilder:validation:Optional
	includeDiscount?: null | bool @go(IncludeDiscount,*bool)

	// A boolean value whether to include other subscription costs in the cost budget. Defaults to true
	// +kubebuilder:validation:Optional
	includeOtherSubscription?: null | bool @go(IncludeOtherSubscription,*bool)

	// A boolean value whether to include recurring costs in the cost budget. Defaults to true
	// +kubebuilder:validation:Optional
	includeRecurring?: null | bool @go(IncludeRecurring,*bool)

	// A boolean value whether to include refunds in the cost budget. Defaults to true
	// +kubebuilder:validation:Optional
	includeRefund?: null | bool @go(IncludeRefund,*bool)

	// A boolean value whether to include subscriptions in the cost budget. Defaults to true
	// +kubebuilder:validation:Optional
	includeSubscription?: null | bool @go(IncludeSubscription,*bool)

	// A boolean value whether to include support costs in the cost budget. Defaults to true
	// +kubebuilder:validation:Optional
	includeSupport?: null | bool @go(IncludeSupport,*bool)

	// A boolean value whether to include tax in the cost budget. Defaults to true
	// +kubebuilder:validation:Optional
	includeTax?: null | bool @go(IncludeTax,*bool)

	// A boolean value whether to include upfront costs in the cost budget. Defaults to true
	// +kubebuilder:validation:Optional
	includeUpfront?: null | bool @go(IncludeUpfront,*bool)

	// Whether a budget uses the amortized rate. Defaults to false
	// +kubebuilder:validation:Optional
	useAmortized?: null | bool @go(UseAmortized,*bool)

	// A boolean value whether to use blended costs in the cost budget. Defaults to false
	// +kubebuilder:validation:Optional
	useBlended?: null | bool @go(UseBlended,*bool)
}

#HistoricalOptionsObservation: {
	lookbackAvailablePeriods?: null | float64 @go(LookbackAvailablePeriods,*float64)
}

#HistoricalOptionsParameters: {
	// +kubebuilder:validation:Required
	budgetAdjustmentPeriod?: null | float64 @go(BudgetAdjustmentPeriod,*float64)
}

#NotificationObservation: {
}

#NotificationParameters: {
	// Comparison operator to use to evaluate the condition. Can be LESS_THAN, EQUAL_TO or GREATER_THAN.
	// +kubebuilder:validation:Required
	comparisonOperator?: null | string @go(ComparisonOperator,*string)

	// What kind of budget value to notify on. Can be ACTUAL or FORECASTED
	// +kubebuilder:validation:Required
	notificationType?: null | string @go(NotificationType,*string)

	// E-Mail addresses to notify. Either this or subscriber_sns_topic_arns is required.
	// +kubebuilder:validation:Optional
	subscriberEmailAddresses?: [...null | string] @go(SubscriberEmailAddresses,[]*string)

	// SNS topics to notify. Either this or subscriber_email_addresses is required.
	// +kubebuilder:validation:Optional
	subscriberSnsTopicArns?: [...null | string] @go(SubscriberSnsTopicArns,[]*string)

	// Threshold when the notification should be sent.
	// +kubebuilder:validation:Required
	threshold?: null | float64 @go(Threshold,*float64)

	// What kind of threshold is defined. Can be PERCENTAGE OR ABSOLUTE_VALUE.
	// +kubebuilder:validation:Required
	thresholdType?: null | string @go(ThresholdType,*string)
}

#PlannedLimitObservation: {
}

#PlannedLimitParameters: {
	// The amount of cost or usage being measured for a budget.
	// +kubebuilder:validation:Required
	amount?: null | string @go(Amount,*string)

	// The start time of the budget limit. Format: 2017-01-01_12:00. See PlannedBudgetLimits documentation.
	// +kubebuilder:validation:Required
	startTime?: null | string @go(StartTime,*string)

	// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See Spend documentation.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)
}

// BudgetSpec defines the desired state of Budget
#BudgetSpec: {
	forProvider: #BudgetParameters @go(ForProvider)
}

// BudgetStatus defines the observed state of Budget.
#BudgetStatus: {
	atProvider?: #BudgetObservation @go(AtProvider)
}

// Budget is the Schema for the Budgets API. Provides a budgets budget resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Budget: {
	spec:    #BudgetSpec   @go(Spec)
	status?: #BudgetStatus @go(Status)
}

// BudgetList contains a list of Budgets
#BudgetList: {
	items: [...#Budget] @go(Items,[]Budget)
}
