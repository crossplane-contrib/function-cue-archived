// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/mediastore/v1beta1

package v1beta1

#ContainerObservation: {
	// The ARN of the container.
	arn?: null | string @go(Arn,*string)

	// The DNS endpoint of the container.
	endpoint?: null | string @go(Endpoint,*string)
	id?:       null | string @go(ID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ContainerParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// ContainerSpec defines the desired state of Container
#ContainerSpec: {
	forProvider: #ContainerParameters @go(ForProvider)
}

// ContainerStatus defines the observed state of Container.
#ContainerStatus: {
	atProvider?: #ContainerObservation @go(AtProvider)
}

// Container is the Schema for the Containers API. Provides a MediaStore Container.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Container: {
	spec:    #ContainerSpec   @go(Spec)
	status?: #ContainerStatus @go(Status)
}

// ContainerList contains a list of Containers
#ContainerList: {
	items: [...#Container] @go(Items,[]Container)
}
