// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#VPCDHCPOptionsObservation: {
	// The ARN of the DHCP Options Set.
	arn?: null | string @go(Arn,*string)

	// The ID of the DHCP Options Set.
	id?: null | string @go(ID,*string)

	// The ID of the AWS account that owns the DHCP options set.
	ownerId?: null | string @go(OwnerID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#VPCDHCPOptionsParameters: {
	// the suffix domain name to use by default when resolving non Fully Qualified Domain Names. In other words, this is what ends up being the search value in the /etc/resolv.conf file.
	// +kubebuilder:validation:Optional
	domainName?: null | string @go(DomainName,*string)

	// List of name servers to configure in /etc/resolv.conf. If you want to use the default AWS nameservers you should set this to AmazonProvidedDNS.
	// +kubebuilder:validation:Optional
	domainNameServers?: [...null | string] @go(DomainNameServers,[]*string)

	// List of NETBIOS name servers.
	// +kubebuilder:validation:Optional
	netbiosNameServers?: [...null | string] @go(NetbiosNameServers,[]*string)

	// The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see RFC 2132.
	// +kubebuilder:validation:Optional
	netbiosNodeType?: null | string @go(NetbiosNodeType,*string)

	// List of NTP servers to configure.
	// +kubebuilder:validation:Optional
	ntpServers?: [...null | string] @go(NtpServers,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// VPCDHCPOptionsSpec defines the desired state of VPCDHCPOptions
#VPCDHCPOptionsSpec: {
	forProvider: #VPCDHCPOptionsParameters @go(ForProvider)
}

// VPCDHCPOptionsStatus defines the observed state of VPCDHCPOptions.
#VPCDHCPOptionsStatus: {
	atProvider?: #VPCDHCPOptionsObservation @go(AtProvider)
}

// VPCDHCPOptions is the Schema for the VPCDHCPOptionss API. Provides a VPC DHCP Options resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPCDHCPOptions: {
	spec:    #VPCDHCPOptionsSpec   @go(Spec)
	status?: #VPCDHCPOptionsStatus @go(Status)
}

// VPCDHCPOptionsList contains a list of VPCDHCPOptionss
#VPCDHCPOptionsList: {
	items: [...#VPCDHCPOptions] @go(Items,[]VPCDHCPOptions)
}
