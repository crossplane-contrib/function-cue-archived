// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#SecurityGroupRuleObservation: {
	// ID of the security group rule.
	id?: null | string @go(ID,*string)

	// If the aws_security_group_rule resource has a single source or destination then this is the AWS Security Group Rule resource ID. Otherwise it is empty.
	securityGroupRuleId?: null | string @go(SecurityGroupRuleID,*string)
}

#SecurityGroupRuleParameters: {
	// List of CIDR blocks. Cannot be specified with source_security_group_id or self.
	// +kubebuilder:validation:Optional
	cidrBlocks?: [...null | string] @go(CidrBlocks,[]*string)

	// Description of the rule.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Start port (or ICMP type number if protocol is "icmp" or "icmpv6").
	// +kubebuilder:validation:Required
	fromPort?: null | float64 @go(FromPort,*float64)

	// List of IPv6 CIDR blocks. Cannot be specified with source_security_group_id or self.
	// +kubebuilder:validation:Optional
	ipv6CidrBlocks?: [...null | string] @go(IPv6CidrBlocks,[]*string)

	// List of Prefix List IDs.
	// +kubebuilder:validation:Optional
	prefixListIds?: [...null | string] @go(PrefixListIds,[]*string)

	// Protocol. If not icmp, icmpv6, tcp, udp, or all use the protocol number
	// +kubebuilder:validation:Required
	protocol?: null | string @go(Protocol,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Security group to apply this rule to.
	// +crossplane:generate:reference:type=SecurityGroup
	// +kubebuilder:validation:Optional
	securityGroupId?: null | string @go(SecurityGroupID,*string)

	// Whether the security group itself will be added as a source to this ingress rule. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or source_security_group_id.
	// +kubebuilder:validation:Optional
	self?: null | bool @go(Self,*bool)

	// Security group id to allow access to/from, depending on the type. Cannot be specified with cidr_blocks, ipv6_cidr_blocks, or self.
	// +crossplane:generate:reference:type=SecurityGroup
	// +kubebuilder:validation:Optional
	sourceSecurityGroupId?: null | string @go(SourceSecurityGroupID,*string)

	// End port (or ICMP code if protocol is "icmp").
	// +kubebuilder:validation:Required
	toPort?: null | float64 @go(ToPort,*float64)

	// Type of rule being created. Valid options are ingress (inbound)
	// or egress (outbound).
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)
}

// SecurityGroupRuleSpec defines the desired state of SecurityGroupRule
#SecurityGroupRuleSpec: {
	forProvider: #SecurityGroupRuleParameters @go(ForProvider)
}

// SecurityGroupRuleStatus defines the observed state of SecurityGroupRule.
#SecurityGroupRuleStatus: {
	atProvider?: #SecurityGroupRuleObservation @go(AtProvider)
}

// SecurityGroupRule is the Schema for the SecurityGroupRules API. Provides an security group rule resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SecurityGroupRule: {
	spec:    #SecurityGroupRuleSpec   @go(Spec)
	status?: #SecurityGroupRuleStatus @go(Status)
}

// SecurityGroupRuleList contains a list of SecurityGroupRules
#SecurityGroupRuleList: {
	items: [...#SecurityGroupRule] @go(Items,[]SecurityGroupRule)
}
