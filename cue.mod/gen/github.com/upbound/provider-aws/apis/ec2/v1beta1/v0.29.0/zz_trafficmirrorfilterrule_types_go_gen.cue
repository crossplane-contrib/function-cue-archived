// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#DestinationPortRangeObservation: {
}

#DestinationPortRangeParameters: {
	// Starting port of the range
	// +kubebuilder:validation:Optional
	fromPort?: null | float64 @go(FromPort,*float64)

	// Ending port of the range
	// +kubebuilder:validation:Optional
	toPort?: null | float64 @go(ToPort,*float64)
}

#SourcePortRangeObservation: {
}

#SourcePortRangeParameters: {
	// Starting port of the range
	// +kubebuilder:validation:Optional
	fromPort?: null | float64 @go(FromPort,*float64)

	// Ending port of the range
	// +kubebuilder:validation:Optional
	toPort?: null | float64 @go(ToPort,*float64)
}

#TrafficMirrorFilterRuleObservation: {
	// ARN of the traffic mirror filter rule.
	arn?: null | string @go(Arn,*string)

	// Name of the traffic mirror filter rule.
	id?: null | string @go(ID,*string)
}

#TrafficMirrorFilterRuleParameters: {
	// Description of the traffic mirror filter rule.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Destination CIDR block to assign to the Traffic Mirror rule.
	// +kubebuilder:validation:Required
	destinationCidrBlock?: null | string @go(DestinationCidrBlock,*string)

	// Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	// +kubebuilder:validation:Optional
	destinationPortRange?: [...#DestinationPortRangeParameters] @go(DestinationPortRange,[]DestinationPortRangeParameters)

	// Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see Protocol Numbers on the Internet Assigned Numbers Authority (IANA) website.
	// +kubebuilder:validation:Optional
	protocol?: null | float64 @go(Protocol,*float64)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Action to take (accept | reject) on the filtered traffic. Valid values are accept and reject
	// +kubebuilder:validation:Required
	ruleAction?: null | string @go(RuleAction,*string)

	// Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
	// +kubebuilder:validation:Required
	ruleNumber?: null | float64 @go(RuleNumber,*float64)

	// Source CIDR block to assign to the Traffic Mirror rule.
	// +kubebuilder:validation:Required
	sourceCidrBlock?: null | string @go(SourceCidrBlock,*string)

	// Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
	// +kubebuilder:validation:Optional
	sourcePortRange?: [...#SourcePortRangeParameters] @go(SourcePortRange,[]SourcePortRangeParameters)

	// Direction of traffic to be captured. Valid values are ingress and egress
	// +kubebuilder:validation:Required
	trafficDirection?: null | string @go(TrafficDirection,*string)

	// ID of the traffic mirror filter to which this rule should be added
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.TrafficMirrorFilter
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	trafficMirrorFilterId?: null | string @go(TrafficMirrorFilterID,*string)
}

// TrafficMirrorFilterRuleSpec defines the desired state of TrafficMirrorFilterRule
#TrafficMirrorFilterRuleSpec: {
	forProvider: #TrafficMirrorFilterRuleParameters @go(ForProvider)
}

// TrafficMirrorFilterRuleStatus defines the observed state of TrafficMirrorFilterRule.
#TrafficMirrorFilterRuleStatus: {
	atProvider?: #TrafficMirrorFilterRuleObservation @go(AtProvider)
}

// TrafficMirrorFilterRule is the Schema for the TrafficMirrorFilterRules API. Provides an Traffic mirror filter rule
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#TrafficMirrorFilterRule: {
	spec:    #TrafficMirrorFilterRuleSpec   @go(Spec)
	status?: #TrafficMirrorFilterRuleStatus @go(Status)
}

// TrafficMirrorFilterRuleList contains a list of TrafficMirrorFilterRules
#TrafficMirrorFilterRuleList: {
	items: [...#TrafficMirrorFilterRule] @go(Items,[]TrafficMirrorFilterRule)
}
