// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#ClientDataObservation: {
}

#ClientDataParameters: {
	// A user-defined comment about the disk upload.
	// +kubebuilder:validation:Optional
	comment?: null | string @go(Comment,*string)

	// The time that the disk upload ends.
	// +kubebuilder:validation:Optional
	uploadEnd?: null | string @go(UploadEnd,*string)

	// The size of the uploaded disk image, in GiB.
	// +kubebuilder:validation:Optional
	uploadSize?: null | float64 @go(UploadSize,*float64)

	// The time that the disk upload starts.
	// +kubebuilder:validation:Optional
	uploadStart?: null | string @go(UploadStart,*string)
}

#DiskContainerObservation: {
}

#DiskContainerParameters: {
	// The description of the disk image being imported.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The format of the disk image being imported. One of VHD or VMDK.
	// +kubebuilder:validation:Required
	format?: null | string @go(Format,*string)

	// The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..). One of url or user_bucket must be set.
	// +kubebuilder:validation:Optional
	url?: null | string @go(URL,*string)

	// The Amazon S3 bucket for the disk image. One of url or user_bucket must be set. Detailed below.
	// +kubebuilder:validation:Optional
	userBucket?: [...#UserBucketParameters] @go(UserBucket,[]UserBucketParameters)
}

#EBSSnapshotImportObservation: {
	// Amazon Resource Name (ARN) of the EBS Snapshot.
	arn?: null | string @go(Arn,*string)

	// The data encryption key identifier for the snapshot.
	dataEncryptionKeyId?: null | string @go(DataEncryptionKeyID,*string)

	// The snapshot ID (e.g., snap-59fcb34e).
	id?: null | string @go(ID,*string)

	// Amazon Resource Name (ARN) of the EBS Snapshot.
	outpostArn?: null | string @go(OutpostArn,*string)

	// Value from an Amazon-maintained list (amazon, aws-marketplace, microsoft) of snapshot owners.
	ownerAlias?: null | string @go(OwnerAlias,*string)

	// The AWS account ID of the EBS snapshot owner.
	ownerId?: null | string @go(OwnerID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The snapshot ID (e.g., snap-59fcb34e).
	volumeId?: null | string @go(VolumeID,*string)

	// The size of the drive in GiBs.
	volumeSize?: null | float64 @go(VolumeSize,*float64)
}

#EBSSnapshotImportParameters: {
	// The client-specific data. Detailed below.
	// +kubebuilder:validation:Optional
	clientData?: [...#ClientDataParameters] @go(ClientData,[]ClientDataParameters)

	// The description string for the import snapshot task.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Information about the disk container. Detailed below.
	// +kubebuilder:validation:Required
	diskContainer: [...#DiskContainerParameters] @go(DiskContainer,[]DiskContainerParameters)

	// Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId.
	// +kubebuilder:validation:Optional
	encrypted?: null | bool @go(Encrypted,*bool)

	// An identifier for the symmetric KMS key to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Indicates whether to permanently restore an archived snapshot.
	// +kubebuilder:validation:Optional
	permanentRestore?: null | bool @go(PermanentRestore,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The name of the IAM Role the VM Import/Export service will assume. This role needs certain permissions. See https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-role. Default: vmimport
	// +kubebuilder:validation:Optional
	roleName?: null | string @go(RoleName,*string)

	// The name of the storage tier. Valid values are archive and standard. Default value is standard.
	// +kubebuilder:validation:Optional
	storageTier?: null | string @go(StorageTier,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	// +kubebuilder:validation:Optional
	temporaryRestoreDays?: null | float64 @go(TemporaryRestoreDays,*float64)
}

#UserBucketObservation: {
}

#UserBucketParameters: {
	// The name of the Amazon S3 bucket where the disk image is located.
	// +kubebuilder:validation:Required
	s3Bucket?: null | string @go(S3Bucket,*string)

	// The file name of the disk image.
	// +kubebuilder:validation:Required
	s3Key?: null | string @go(S3Key,*string)
}

// EBSSnapshotImportSpec defines the desired state of EBSSnapshotImport
#EBSSnapshotImportSpec: {
	forProvider: #EBSSnapshotImportParameters @go(ForProvider)
}

// EBSSnapshotImportStatus defines the observed state of EBSSnapshotImport.
#EBSSnapshotImportStatus: {
	atProvider?: #EBSSnapshotImportObservation @go(AtProvider)
}

// EBSSnapshotImport is the Schema for the EBSSnapshotImports API. Provides an elastic block storage snapshot import resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#EBSSnapshotImport: {
	spec:    #EBSSnapshotImportSpec   @go(Spec)
	status?: #EBSSnapshotImportStatus @go(Status)
}

// EBSSnapshotImportList contains a list of EBSSnapshotImports
#EBSSnapshotImportList: {
	items: [...#EBSSnapshotImport] @go(Items,[]EBSSnapshotImport)
}
