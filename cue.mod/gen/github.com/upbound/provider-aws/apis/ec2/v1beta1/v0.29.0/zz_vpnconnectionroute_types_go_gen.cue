// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#VPNConnectionRouteObservation: {
	id?: null | string @go(ID,*string)
}

#VPNConnectionRouteParameters: {
	// The CIDR block associated with the local subnet of the customer network.
	// +kubebuilder:validation:Required
	destinationCidrBlock?: null | string @go(DestinationCidrBlock,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the VPN connection.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPNConnection
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	vpnConnectionId?: null | string @go(VPNConnectionID,*string)
}

// VPNConnectionRouteSpec defines the desired state of VPNConnectionRoute
#VPNConnectionRouteSpec: {
	forProvider: #VPNConnectionRouteParameters @go(ForProvider)
}

// VPNConnectionRouteStatus defines the observed state of VPNConnectionRoute.
#VPNConnectionRouteStatus: {
	atProvider?: #VPNConnectionRouteObservation @go(AtProvider)
}

// VPNConnectionRoute is the Schema for the VPNConnectionRoutes API. Provides a static route between a VPN connection and a customer gateway.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPNConnectionRoute: {
	spec:    #VPNConnectionRouteSpec   @go(Spec)
	status?: #VPNConnectionRouteStatus @go(Status)
}

// VPNConnectionRouteList contains a list of VPNConnectionRoutes
#VPNConnectionRouteList: {
	items: [...#VPNConnectionRoute] @go(Items,[]VPNConnectionRoute)
}
