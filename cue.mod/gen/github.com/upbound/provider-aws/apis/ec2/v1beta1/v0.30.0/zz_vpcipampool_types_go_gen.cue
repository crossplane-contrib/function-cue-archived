// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#VPCIpamPoolObservation: {
	// Amazon Resource Name (ARN) of IPAM
	arn?: null | string @go(Arn,*string)

	// The ID of the IPAM
	id?:            null | string  @go(ID,*string)
	ipamScopeType?: null | string  @go(IpamScopeType,*string)
	poolDepth?:     null | float64 @go(PoolDepth,*float64)

	// The ID of the IPAM
	state?: null | string @go(State,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#VPCIpamPoolParameters: {
	// The IP protocol assigned to this pool. You must choose either IPv4 or IPv6 protocol for a pool.
	// +kubebuilder:validation:Required
	addressFamily?: null | string @go(AddressFamily,*string)

	// A default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here, new allocations will default to 10.0.0.0/16 (unless you provide a different netmask value when you create the new allocation).
	// +kubebuilder:validation:Optional
	allocationDefaultNetmaskLength?: null | float64 @go(AllocationDefaultNetmaskLength,*float64)

	// The maximum netmask length that will be required for CIDR allocations in this pool.
	// +kubebuilder:validation:Optional
	allocationMaxNetmaskLength?: null | float64 @go(AllocationMaxNetmaskLength,*float64)

	// The minimum netmask length that will be required for CIDR allocations in this pool.
	// +kubebuilder:validation:Optional
	allocationMinNetmaskLength?: null | float64 @go(AllocationMinNetmaskLength,*float64)

	// Tags that are required for resources that use CIDRs from this IPAM pool. Resources that do not have these tags will not be allowed to allocate space from the pool. If the resources have their tags changed after they have allocated space or if the allocation tagging requirements are changed on the pool, the resource may be marked as noncompliant.
	// +kubebuilder:validation:Optional
	allocationResourceTags?: {[string]: null | string} @go(AllocationResourceTags,map[string]*string)

	// If you include this argument, IPAM automatically imports any VPCs you have in your scope that fall
	// within the CIDR range in the pool.
	// +kubebuilder:validation:Optional
	autoImport?: null | bool @go(AutoImport,*bool)

	// Limits which AWS service the pool can be used in. Only useable on public scopes. Valid Values: ec2.
	// +kubebuilder:validation:Optional
	awsService?: null | string @go(AwsService,*string)

	// A description for the IPAM pool.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The ID of the scope in which you would like to create the IPAM pool.
	// +crossplane:generate:reference:type=VPCIpamScope
	// +kubebuilder:validation:Optional
	ipamScopeId?: null | string @go(IpamScopeID,*string)

	// The locale in which you would like to create the IPAM pool. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC's Region. Possible values: Any AWS region, such as us-east-1.
	// +kubebuilder:validation:Optional
	locale?: null | string @go(Locale,*string)

	// Defines whether or not IPv6 pool space is publicly advertisable over the internet. This option is not available for IPv4 pool space.
	// +kubebuilder:validation:Optional
	publiclyAdvertisable?: null | bool @go(PubliclyAdvertisable,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ID of the source IPAM pool. Use this argument to create a child pool within an existing pool.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPCIpamPool
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	sourceIpamPoolId?: null | string @go(SourceIpamPoolID,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// VPCIpamPoolSpec defines the desired state of VPCIpamPool
#VPCIpamPoolSpec: {
	forProvider: #VPCIpamPoolParameters @go(ForProvider)
}

// VPCIpamPoolStatus defines the observed state of VPCIpamPool.
#VPCIpamPoolStatus: {
	atProvider?: #VPCIpamPoolObservation @go(AtProvider)
}

// VPCIpamPool is the Schema for the VPCIpamPools API. Provides a IP address pool resource for IPAM.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPCIpamPool: {
	spec:    #VPCIpamPoolSpec   @go(Spec)
	status?: #VPCIpamPoolStatus @go(Status)
}

// VPCIpamPoolList contains a list of VPCIpamPools
#VPCIpamPoolList: {
	items: [...#VPCIpamPool] @go(Items,[]VPCIpamPool)
}
