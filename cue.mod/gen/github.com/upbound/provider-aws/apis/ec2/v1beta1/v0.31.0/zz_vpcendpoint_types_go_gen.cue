// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#DNSEntryObservation: {
	// The DNS name.
	dnsName?: null | string @go(DNSName,*string)

	// The ID of the private hosted zone.
	hostedZoneId?: null | string @go(HostedZoneID,*string)
}

#DNSEntryParameters: {
}

#DNSOptionsObservation: {
}

#DNSOptionsParameters: {
	// The DNS records created for the endpoint. Valid values are ipv4, dualstack, service-defined, and ipv6.
	// +kubebuilder:validation:Optional
	dnsRecordIpType?: null | string @go(DNSRecordIPType,*string)
}

#VPCEndpointObservation_2: {
	// The Amazon Resource Name (ARN) of the VPC endpoint.
	arn?: null | string @go(Arn,*string)

	// The list of CIDR blocks for the exposed AWS service. Applicable for endpoints of type Gateway.
	cidrBlocks?: [...null | string] @go(CidrBlocks,[]*string)

	// The DNS entries for the VPC Endpoint. Applicable for endpoints of type Interface. DNS blocks are documented below.
	dnsEntry?: [...#DNSEntryObservation] @go(DNSEntry,[]DNSEntryObservation)

	// The ID of the VPC endpoint.
	id?: null | string @go(ID,*string)

	// One or more network interfaces for the VPC Endpoint. Applicable for endpoints of type Interface.
	networkInterfaceIds?: [...null | string] @go(NetworkInterfaceIds,[]*string)

	// The ID of the AWS account that owns the VPC endpoint.
	ownerId?: null | string @go(OwnerID,*string)

	// The prefix list ID of the exposed AWS service. Applicable for endpoints of type Gateway.
	prefixListId?: null | string @go(PrefixListID,*string)

	// Whether or not the VPC Endpoint is being managed by its service - true or false.
	requesterManaged?: null | bool @go(RequesterManaged,*bool)

	// One or more route table IDs. Applicable for endpoints of type Gateway.
	routeTableIds?: [...null | string] @go(RouteTableIds,[]*string)

	// The ID of one or more security groups to associate with the network interface. Applicable for endpoints of type Interface.
	// If no security groups are specified, the VPC's default security group is associated with the endpoint.
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// The state of the VPC endpoint.
	state?: null | string @go(State,*string)

	// The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type GatewayLoadBalancer and Interface.
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#VPCEndpointParameters_2: {
	// Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
	// +kubebuilder:validation:Optional
	autoAccept?: null | bool @go(AutoAccept,*bool)

	// The DNS options for the endpoint. See dns_options below.
	// +kubebuilder:validation:Optional
	dnsOptions?: [...#DNSOptionsParameters] @go(DNSOptions,[]DNSOptionsParameters)

	// The IP address type for the endpoint. Valid values are ipv4, dualstack, and ipv6.
	// +kubebuilder:validation:Optional
	ipAddressType?: null | string @go(IPAddressType,*string)

	// A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All Gateway and some Interface endpoints support policies - see the relevant AWS documentation for more details.
	// +kubebuilder:validation:Optional
	policy?: null | string @go(Policy,*string)

	// Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type Interface.
	// Defaults to false.
	// +kubebuilder:validation:Optional
	privateDnsEnabled?: null | bool @go(PrivateDNSEnabled,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The service name. For AWS services the service name is usually in the form com.amazonaws.<region>.<service> (the SageMaker Notebook service is an exception to this rule, the service name is in the form aws.sagemaker.<region>.notebook).
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPCEndpointService
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("service_name",true)
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The VPC endpoint type, Gateway, GatewayLoadBalancer, or Interface. Defaults to Gateway.
	// +kubebuilder:validation:Optional
	vpcEndpointType?: null | string @go(VPCEndpointType,*string)

	// The ID of the VPC in which the endpoint will be used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.VPC
	// +kubebuilder:validation:Optional
	vpcId?: null | string @go(VPCID,*string)
}

// VPCEndpointSpec defines the desired state of VPCEndpoint
#VPCEndpointSpec: {
	forProvider: #VPCEndpointParameters_2 @go(ForProvider)
}

// VPCEndpointStatus defines the observed state of VPCEndpoint.
#VPCEndpointStatus: {
	atProvider?: #VPCEndpointObservation_2 @go(AtProvider)
}

// VPCEndpoint is the Schema for the VPCEndpoints API. Provides a VPC Endpoint resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPCEndpoint: {
	spec:    #VPCEndpointSpec   @go(Spec)
	status?: #VPCEndpointStatus @go(Status)
}

// VPCEndpointList contains a list of VPCEndpoints
#VPCEndpointList: {
	items: [...#VPCEndpoint] @go(Items,[]VPCEndpoint)
}
