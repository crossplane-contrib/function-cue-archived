// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#SpotDatafeedSubscriptionObservation: {
	// The Amazon S3 bucket in which to store the Spot instance data feed.
	bucket?: null | string @go(Bucket,*string)
	id?:     null | string @go(ID,*string)

	// Path of folder inside bucket to place spot pricing data.
	prefix?: null | string @go(Prefix,*string)
}

#SpotDatafeedSubscriptionParameters: {
	// The Amazon S3 bucket in which to store the Spot instance data feed.
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Path of folder inside bucket to place spot pricing data.
	// +kubebuilder:validation:Optional
	prefix?: null | string @go(Prefix,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// SpotDatafeedSubscriptionSpec defines the desired state of SpotDatafeedSubscription
#SpotDatafeedSubscriptionSpec: {
	forProvider: #SpotDatafeedSubscriptionParameters @go(ForProvider)
}

// SpotDatafeedSubscriptionStatus defines the observed state of SpotDatafeedSubscription.
#SpotDatafeedSubscriptionStatus: {
	atProvider?: #SpotDatafeedSubscriptionObservation @go(AtProvider)
}

// SpotDatafeedSubscription is the Schema for the SpotDatafeedSubscriptions API. Provides a Spot Datafeed Subscription resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SpotDatafeedSubscription: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.bucket)",message="bucket is a required parameter"
	spec:    #SpotDatafeedSubscriptionSpec   @go(Spec)
	status?: #SpotDatafeedSubscriptionStatus @go(Status)
}

// SpotDatafeedSubscriptionList contains a list of SpotDatafeedSubscriptions
#SpotDatafeedSubscriptionList: {
	items: [...#SpotDatafeedSubscription] @go(Items,[]SpotDatafeedSubscription)
}
