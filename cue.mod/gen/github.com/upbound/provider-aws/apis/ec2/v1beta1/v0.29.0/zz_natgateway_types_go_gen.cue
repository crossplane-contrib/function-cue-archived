// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#NATGatewayObservation: {
	// The ID of the NAT Gateway.
	id?: null | string @go(ID,*string)

	// The ID of the network interface associated with the NAT gateway.
	networkInterfaceId?: null | string @go(NetworkInterfaceID,*string)

	// The Elastic IP address associated with the NAT gateway.
	publicIp?: null | string @go(PublicIP,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#NATGatewayParameters: {
	// The Allocation ID of the Elastic IP address for the gateway. Required for connectivity_type of public.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.EIP
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	allocationId?: null | string @go(AllocationID,*string)

	// Connectivity type for the gateway. Valid values are private and public. Defaults to public.
	// +kubebuilder:validation:Optional
	connectivityType?: null | string @go(ConnectivityType,*string)

	// The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
	// +kubebuilder:validation:Optional
	privateIp?: null | string @go(PrivateIP,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The Subnet ID of the subnet in which to place the gateway.
	// +crossplane:generate:reference:type=Subnet
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// NATGatewaySpec defines the desired state of NATGateway
#NATGatewaySpec: {
	forProvider: #NATGatewayParameters @go(ForProvider)
}

// NATGatewayStatus defines the observed state of NATGateway.
#NATGatewayStatus: {
	atProvider?: #NATGatewayObservation @go(AtProvider)
}

// NATGateway is the Schema for the NATGateways API. Provides a resource to create a VPC NAT Gateway.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#NATGateway: {
	spec:    #NATGatewaySpec   @go(Spec)
	status?: #NATGatewayStatus @go(Status)
}

// NATGatewayList contains a list of NATGateways
#NATGatewayList: {
	items: [...#NATGateway] @go(Items,[]NATGateway)
}
