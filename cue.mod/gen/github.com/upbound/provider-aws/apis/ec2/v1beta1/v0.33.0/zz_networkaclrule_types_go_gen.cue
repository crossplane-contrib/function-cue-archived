// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#NetworkACLRuleObservation: {
	// The ID of the network ACL Rule
	id?: null | string @go(ID,*string)
}

#NetworkACLRuleParameters: {
	// The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
	// +kubebuilder:validation:Optional
	cidrBlock?: null | string @go(CidrBlock,*string)

	// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default false.
	// +kubebuilder:validation:Optional
	egress?: null | bool @go(Egress,*bool)

	// The from port to match.
	// +kubebuilder:validation:Optional
	fromPort?: null | float64 @go(FromPort,*float64)

	// The IPv6 CIDR block to allow or deny.
	// +kubebuilder:validation:Optional
	ipv6CidrBlock?: null | string @go(IPv6CidrBlock,*string)

	// ICMP protocol: The ICMP code. Required if specifying ICMP for the protocolE.g., -1
	// +kubebuilder:validation:Optional
	icmpCode?: null | float64 @go(IcmpCode,*float64)

	// ICMP protocol: The ICMP type. Required if specifying ICMP for the protocolE.g., -1
	// +kubebuilder:validation:Optional
	icmpType?: null | float64 @go(IcmpType,*float64)

	// The ID of the network ACL.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.NetworkACL
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	networkAclId?: null | string @go(NetworkACLID,*string)

	// The protocol. A value of -1 means all protocols.
	// +kubebuilder:validation:Required
	protocol?: null | string @go(Protocol,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Indicates whether to allow or deny the traffic that matches the rule. Accepted values: allow | deny
	// +kubebuilder:validation:Required
	ruleAction?: null | string @go(RuleAction,*string)

	// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
	// +kubebuilder:validation:Required
	ruleNumber?: null | float64 @go(RuleNumber,*float64)

	// The to port to match.
	// +kubebuilder:validation:Optional
	toPort?: null | float64 @go(ToPort,*float64)
}

// NetworkACLRuleSpec defines the desired state of NetworkACLRule
#NetworkACLRuleSpec: {
	forProvider: #NetworkACLRuleParameters @go(ForProvider)
}

// NetworkACLRuleStatus defines the observed state of NetworkACLRule.
#NetworkACLRuleStatus: {
	atProvider?: #NetworkACLRuleObservation @go(AtProvider)
}

// NetworkACLRule is the Schema for the NetworkACLRules API. Provides an network ACL Rule resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#NetworkACLRule: {
	spec:    #NetworkACLRuleSpec   @go(Spec)
	status?: #NetworkACLRuleStatus @go(Status)
}

// NetworkACLRuleList contains a list of NetworkACLRules
#NetworkACLRuleList: {
	items: [...#NetworkACLRule] @go(Items,[]NetworkACLRule)
}
