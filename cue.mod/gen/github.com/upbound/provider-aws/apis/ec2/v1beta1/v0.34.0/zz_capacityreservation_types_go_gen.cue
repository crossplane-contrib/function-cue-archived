// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#CapacityReservationObservation: {
	// The ARN of the Capacity Reservation.
	arn?: null | string @go(Arn,*string)

	// The Availability Zone in which to create the Capacity Reservation.
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	ebsOptimized?: null | bool @go(EBSOptimized,*bool)

	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)
	endDate?: null | string @go(EndDate,*string)

	// Indicates the way in which the Capacity Reservation ends. Specify either unlimited or limited.
	endDateType?: null | string @go(EndDateType,*string)

	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	ephemeralStorage?: null | bool @go(EphemeralStorage,*bool)

	// The Capacity Reservation ID.
	id?: null | string @go(ID,*string)

	// The number of instances for which to reserve capacity.
	instanceCount?: null | float64 @go(InstanceCount,*float64)

	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either open or targeted.
	instanceMatchCriteria?: null | string @go(InstanceMatchCriteria,*string)

	// The type of operating system for which to reserve capacity. Valid options are Linux/UNIX, Red Hat Enterprise Linux, SUSE Linux, Windows, Windows with SQL Server, Windows with SQL Server Enterprise, Windows with SQL Server Standard or Windows with SQL Server Web.
	instancePlatform?: null | string @go(InstancePlatform,*string)

	// The instance type for which to reserve capacity.
	instanceType?: null | string @go(InstanceType,*string)

	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
	outpostArn?: null | string @go(OutpostArn,*string)

	// The ID of the AWS account that owns the Capacity Reservation.
	ownerId?: null | string @go(OwnerID,*string)

	// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation.
	placementGroupArn?: null | string @go(PlacementGroupArn,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Indicates the tenancy of the Capacity Reservation. Specify either default or dedicated.
	tenancy?: null | string @go(Tenancy,*string)
}

#CapacityReservationParameters: {
	// The Availability Zone in which to create the Capacity Reservation.
	// +kubebuilder:validation:Optional
	availabilityZone?: null | string @go(AvailabilityZone,*string)

	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	// +kubebuilder:validation:Optional
	ebsOptimized?: null | bool @go(EBSOptimized,*bool)

	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: RFC3339 time string (YYYY-MM-DDTHH:MM:SSZ)
	// +kubebuilder:validation:Optional
	endDate?: null | string @go(EndDate,*string)

	// Indicates the way in which the Capacity Reservation ends. Specify either unlimited or limited.
	// +kubebuilder:validation:Optional
	endDateType?: null | string @go(EndDateType,*string)

	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	// +kubebuilder:validation:Optional
	ephemeralStorage?: null | bool @go(EphemeralStorage,*bool)

	// The number of instances for which to reserve capacity.
	// +kubebuilder:validation:Optional
	instanceCount?: null | float64 @go(InstanceCount,*float64)

	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either open or targeted.
	// +kubebuilder:validation:Optional
	instanceMatchCriteria?: null | string @go(InstanceMatchCriteria,*string)

	// The type of operating system for which to reserve capacity. Valid options are Linux/UNIX, Red Hat Enterprise Linux, SUSE Linux, Windows, Windows with SQL Server, Windows with SQL Server Enterprise, Windows with SQL Server Standard or Windows with SQL Server Web.
	// +kubebuilder:validation:Optional
	instancePlatform?: null | string @go(InstancePlatform,*string)

	// The instance type for which to reserve capacity.
	// +kubebuilder:validation:Optional
	instanceType?: null | string @go(InstanceType,*string)

	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
	// +kubebuilder:validation:Optional
	outpostArn?: null | string @go(OutpostArn,*string)

	// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation.
	// +kubebuilder:validation:Optional
	placementGroupArn?: null | string @go(PlacementGroupArn,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Indicates the tenancy of the Capacity Reservation. Specify either default or dedicated.
	// +kubebuilder:validation:Optional
	tenancy?: null | string @go(Tenancy,*string)
}

// CapacityReservationSpec defines the desired state of CapacityReservation
#CapacityReservationSpec: {
	forProvider: #CapacityReservationParameters @go(ForProvider)
}

// CapacityReservationStatus defines the observed state of CapacityReservation.
#CapacityReservationStatus: {
	atProvider?: #CapacityReservationObservation @go(AtProvider)
}

// CapacityReservation is the Schema for the CapacityReservations API. Provides an EC2 Capacity Reservation. This allows you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#CapacityReservation: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.availabilityZone)",message="availabilityZone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.instanceCount)",message="instanceCount is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.instancePlatform)",message="instancePlatform is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.instanceType)",message="instanceType is a required parameter"
	spec:    #CapacityReservationSpec   @go(Spec)
	status?: #CapacityReservationStatus @go(Status)
}

// CapacityReservationList contains a list of CapacityReservations
#CapacityReservationList: {
	items: [...#CapacityReservation] @go(Items,[]CapacityReservation)
}
