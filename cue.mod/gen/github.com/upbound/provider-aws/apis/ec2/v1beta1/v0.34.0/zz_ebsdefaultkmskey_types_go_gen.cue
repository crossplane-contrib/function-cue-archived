// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#EBSDefaultKMSKeyObservation: {
	id?: null | string @go(ID,*string)

	// The ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use to encrypt the EBS volume.
	keyArn?: null | string @go(KeyArn,*string)
}

#EBSDefaultKMSKeyParameters: {
	// The ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use to encrypt the EBS volume.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	keyArn?: null | string @go(KeyArn,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// EBSDefaultKMSKeySpec defines the desired state of EBSDefaultKMSKey
#EBSDefaultKMSKeySpec: {
	forProvider: #EBSDefaultKMSKeyParameters @go(ForProvider)
}

// EBSDefaultKMSKeyStatus defines the observed state of EBSDefaultKMSKey.
#EBSDefaultKMSKeyStatus: {
	atProvider?: #EBSDefaultKMSKeyObservation @go(AtProvider)
}

// EBSDefaultKMSKey is the Schema for the EBSDefaultKMSKeys API. Manages the default customer master key (CMK) that your AWS account uses to encrypt EBS volumes.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#EBSDefaultKMSKey: {
	spec:    #EBSDefaultKMSKeySpec   @go(Spec)
	status?: #EBSDefaultKMSKeyStatus @go(Status)
}

// EBSDefaultKMSKeyList contains a list of EBSDefaultKMSKeys
#EBSDefaultKMSKeyList: {
	items: [...#EBSDefaultKMSKey] @go(Items,[]EBSDefaultKMSKey)
}
