// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ec2/v1beta1

package v1beta1

#EBSSnapshotCopyObservation: {
	// Amazon Resource Name (ARN) of the EBS Snapshot.
	arn?: null | string @go(Arn,*string)

	// The data encryption key identifier for the snapshot.
	dataEncryptionKeyId?: null | string @go(DataEncryptionKeyID,*string)

	// The snapshot ID (e.g., snap-59fcb34e).
	id?: null | string @go(ID,*string)

	// Amazon Resource Name (ARN) of the EBS Snapshot.
	outpostArn?: null | string @go(OutpostArn,*string)

	// Value from an Amazon-maintained list (amazon, aws-marketplace, microsoft) of snapshot owners.
	ownerAlias?: null | string @go(OwnerAlias,*string)

	// The AWS account ID of the snapshot owner.
	ownerId?: null | string @go(OwnerID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The snapshot ID (e.g., snap-59fcb34e).
	volumeId?: null | string @go(VolumeID,*string)

	// The size of the drive in GiBs.
	volumeSize?: null | float64 @go(VolumeSize,*float64)
}

#EBSSnapshotCopyParameters: {
	// A description of what the snapshot is.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Whether the snapshot is encrypted.
	// +kubebuilder:validation:Optional
	encrypted?: null | bool @go(Encrypted,*bool)

	// The ARN for the KMS encryption key.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Indicates whether to permanently restore an archived snapshot.
	// +kubebuilder:validation:Optional
	permanentRestore?: null | bool @go(PermanentRestore,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The region of the source snapshot.
	// +kubebuilder:validation:Required
	sourceRegion?: null | string @go(SourceRegion,*string)

	// The ARN for the snapshot to be copied.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.EBSSnapshot
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	sourceSnapshotId?: null | string @go(SourceSnapshotID,*string)

	// The name of the storage tier. Valid values are archive and standard. Default value is standard.
	// +kubebuilder:validation:Optional
	storageTier?: null | string @go(StorageTier,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
	// +kubebuilder:validation:Optional
	temporaryRestoreDays?: null | float64 @go(TemporaryRestoreDays,*float64)
}

// EBSSnapshotCopySpec defines the desired state of EBSSnapshotCopy
#EBSSnapshotCopySpec: {
	forProvider: #EBSSnapshotCopyParameters @go(ForProvider)
}

// EBSSnapshotCopyStatus defines the observed state of EBSSnapshotCopy.
#EBSSnapshotCopyStatus: {
	atProvider?: #EBSSnapshotCopyObservation @go(AtProvider)
}

// EBSSnapshotCopy is the Schema for the EBSSnapshotCopys API. Duplicates an existing Amazon snapshot
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#EBSSnapshotCopy: {
	spec:    #EBSSnapshotCopySpec   @go(Spec)
	status?: #EBSSnapshotCopyStatus @go(Status)
}

// EBSSnapshotCopyList contains a list of EBSSnapshotCopys
#EBSSnapshotCopyList: {
	items: [...#EBSSnapshotCopy] @go(Items,[]EBSSnapshotCopy)
}
