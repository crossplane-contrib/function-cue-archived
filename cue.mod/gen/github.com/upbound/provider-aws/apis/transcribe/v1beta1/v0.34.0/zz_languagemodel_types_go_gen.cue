// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/transcribe/v1beta1

package v1beta1

#InputDataConfigObservation: {
	// IAM role with access to S3 bucket.
	dataAccessRoleArn?: null | string @go(DataAccessRoleArn,*string)

	// S3 URI where training data is located.
	s3Uri?: null | string @go(S3URI,*string)

	// S3 URI where tuning data is located.
	tuningDataS3Uri?: null | string @go(TuningDataS3URI,*string)
}

#InputDataConfigParameters: {
	// IAM role with access to S3 bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	dataAccessRoleArn?: null | string @go(DataAccessRoleArn,*string)

	// S3 URI where training data is located.
	// +kubebuilder:validation:Required
	s3Uri?: null | string @go(S3URI,*string)

	// S3 URI where tuning data is located.
	// +kubebuilder:validation:Optional
	tuningDataS3Uri?: null | string @go(TuningDataS3URI,*string)
}

#LanguageModelObservation: {
	// ARN of the LanguageModel.
	arn?: null | string @go(Arn,*string)

	// Name of reference base model.
	baseModelName?: null | string @go(BaseModelName,*string)

	// LanguageModel name.
	id?: null | string @go(ID,*string)

	// The input data config for the LanguageModel. See Input Data Config for more details.
	inputDataConfig?: [...#InputDataConfigObservation] @go(InputDataConfig,[]InputDataConfigObservation)

	// The language code you selected for your language model. Refer to the supported languages page for accepted codes.
	languageCode?: null | string @go(LanguageCode,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#LanguageModelParameters: {
	// Name of reference base model.
	// +kubebuilder:validation:Optional
	baseModelName?: null | string @go(BaseModelName,*string)

	// The input data config for the LanguageModel. See Input Data Config for more details.
	// +kubebuilder:validation:Optional
	inputDataConfig?: [...#InputDataConfigParameters] @go(InputDataConfig,[]InputDataConfigParameters)

	// The language code you selected for your language model. Refer to the supported languages page for accepted codes.
	// +kubebuilder:validation:Optional
	languageCode?: null | string @go(LanguageCode,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// LanguageModelSpec defines the desired state of LanguageModel
#LanguageModelSpec: {
	forProvider: #LanguageModelParameters @go(ForProvider)
}

// LanguageModelStatus defines the observed state of LanguageModel.
#LanguageModelStatus: {
	atProvider?: #LanguageModelObservation @go(AtProvider)
}

// LanguageModel is the Schema for the LanguageModels API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LanguageModel: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.baseModelName)",message="baseModelName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.inputDataConfig)",message="inputDataConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.languageCode)",message="languageCode is a required parameter"
	spec:    #LanguageModelSpec   @go(Spec)
	status?: #LanguageModelStatus @go(Status)
}

// LanguageModelList contains a list of LanguageModels
#LanguageModelList: {
	items: [...#LanguageModel] @go(Items,[]LanguageModel)
}
