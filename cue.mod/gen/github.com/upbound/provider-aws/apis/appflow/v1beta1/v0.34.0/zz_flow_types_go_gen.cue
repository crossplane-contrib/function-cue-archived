// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/appflow/v1beta1

package v1beta1

#AggregationConfigObservation: {
	// Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are None and SingleFile.
	aggregationType?: null | string @go(AggregationType,*string)
}

#AggregationConfigParameters: {
	// Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are None and SingleFile.
	// +kubebuilder:validation:Optional
	aggregationType?: null | string @go(AggregationType,*string)
}

#AmplitudeObservation: {
	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#AmplitudeParameters: {
	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#ConnectorOperatorObservation: {
	// Information that is required for querying Amplitude. See Generic Source Properties for more details.
	amplitude?: null | string @go(Amplitude,*string)

	// Properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
	customConnector?: null | string @go(CustomConnector,*string)

	// Information that is required for querying Datadog. See Generic Source Properties for more details.
	datadog?: null | string @go(Datadog,*string)

	// Operation to be performed on the provided Dynatrace source fields. Valid values are PROJECTION, BETWEEN, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	dynatrace?: null | string @go(Dynatrace,*string)

	// Operation to be performed on the provided Google Analytics source fields. Valid values are PROJECTION and BETWEEN.
	googleAnalytics?: null | string @go(GoogleAnalytics,*string)

	// Information that is required for querying Infor Nexus. See Generic Source Properties for more details.
	inforNexus?: null | string @go(InforNexus,*string)

	// Properties that are required to query Marketo. See Generic Destination Properties for more details.
	marketo?: null | string @go(Marketo,*string)

	// Properties that are required to query Amazon S3. See S3 Destination Properties for more details.
	s3?: null | string @go(S3,*string)

	// Properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
	salesforce?: null | string @go(Salesforce,*string)

	// Properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
	sapoData?: null | string @go(SapoData,*string)

	// Information that is required for querying ServiceNow. See Generic Source Properties for more details.
	serviceNow?: null | string @go(ServiceNow,*string)

	// Information that is required for querying Singular. See Generic Source Properties for more details.
	singular?: null | string @go(Singular,*string)

	// Information that is required for querying Slack. See Generic Source Properties for more details.
	slack?: null | string @go(Slack,*string)

	// Operation to be performed on the provided Trend Micro source fields. Valid values are PROJECTION, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	trendmicro?: null | string @go(Trendmicro,*string)

	// Information that is required for querying Veeva. See Veeva Source Properties for more details.
	veeva?: null | string @go(Veeva,*string)

	// Properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
	zendesk?: null | string @go(Zendesk,*string)
}

#ConnectorOperatorParameters: {
	// Information that is required for querying Amplitude. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	amplitude?: null | string @go(Amplitude,*string)

	// Properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
	// +kubebuilder:validation:Optional
	customConnector?: null | string @go(CustomConnector,*string)

	// Information that is required for querying Datadog. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	datadog?: null | string @go(Datadog,*string)

	// Operation to be performed on the provided Dynatrace source fields. Valid values are PROJECTION, BETWEEN, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	// +kubebuilder:validation:Optional
	dynatrace?: null | string @go(Dynatrace,*string)

	// Operation to be performed on the provided Google Analytics source fields. Valid values are PROJECTION and BETWEEN.
	// +kubebuilder:validation:Optional
	googleAnalytics?: null | string @go(GoogleAnalytics,*string)

	// Information that is required for querying Infor Nexus. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	inforNexus?: null | string @go(InforNexus,*string)

	// Properties that are required to query Marketo. See Generic Destination Properties for more details.
	// +kubebuilder:validation:Optional
	marketo?: null | string @go(Marketo,*string)

	// Properties that are required to query Amazon S3. See S3 Destination Properties for more details.
	// +kubebuilder:validation:Optional
	s3?: null | string @go(S3,*string)

	// Properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
	// +kubebuilder:validation:Optional
	salesforce?: null | string @go(Salesforce,*string)

	// Properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
	// +kubebuilder:validation:Optional
	sapoData?: null | string @go(SapoData,*string)

	// Information that is required for querying ServiceNow. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	serviceNow?: null | string @go(ServiceNow,*string)

	// Information that is required for querying Singular. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	singular?: null | string @go(Singular,*string)

	// Information that is required for querying Slack. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	slack?: null | string @go(Slack,*string)

	// Operation to be performed on the provided Trend Micro source fields. Valid values are PROJECTION, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	// +kubebuilder:validation:Optional
	trendmicro?: null | string @go(Trendmicro,*string)

	// Information that is required for querying Veeva. See Veeva Source Properties for more details.
	// +kubebuilder:validation:Optional
	veeva?: null | string @go(Veeva,*string)

	// Properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
	// +kubebuilder:validation:Optional
	zendesk?: null | string @go(Zendesk,*string)
}

#CustomConnectorObservation: {
	// Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
	customProperties?: {[string]: null | string} @go(CustomProperties,map[string]*string)

	// Entity specified in the custom connector as a destination in the flow.
	entityName?: null | string @go(EntityName,*string)

	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	errorHandlingConfig?: [...#ErrorHandlingConfigObservation] @go(ErrorHandlingConfig,[]ErrorHandlingConfigObservation)

	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	idFieldNames?: [...null | string] @go(IDFieldNames,[]*string)

	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	writeOperationType?: null | string @go(WriteOperationType,*string)
}

#CustomConnectorParameters: {
	// Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
	// +kubebuilder:validation:Optional
	customProperties?: {[string]: null | string} @go(CustomProperties,map[string]*string)

	// Entity specified in the custom connector as a destination in the flow.
	// +kubebuilder:validation:Required
	entityName?: null | string @go(EntityName,*string)

	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	errorHandlingConfig?: [...#ErrorHandlingConfigParameters] @go(ErrorHandlingConfig,[]ErrorHandlingConfigParameters)

	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	// +kubebuilder:validation:Optional
	idFieldNames?: [...null | string] @go(IDFieldNames,[]*string)

	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	// +kubebuilder:validation:Optional
	writeOperationType?: null | string @go(WriteOperationType,*string)
}

#CustomerProfilesObservation: {
	// Unique name of the Amazon Connect Customer Profiles domain.
	domainName?: null | string @go(DomainName,*string)

	// Object specified in the Amazon Connect Customer Profiles flow destination.
	objectTypeName?: null | string @go(ObjectTypeName,*string)
}

#CustomerProfilesParameters: {
	// Unique name of the Amazon Connect Customer Profiles domain.
	// +kubebuilder:validation:Required
	domainName?: null | string @go(DomainName,*string)

	// Object specified in the Amazon Connect Customer Profiles flow destination.
	// +kubebuilder:validation:Optional
	objectTypeName?: null | string @go(ObjectTypeName,*string)
}

#DatadogObservation: {
	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#DatadogParameters: {
	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#DestinationConnectorPropertiesObservation: {
	// Properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
	customConnector?: [...#CustomConnectorObservation] @go(CustomConnector,[]CustomConnectorObservation)

	// Properties that are required to query Amazon Connect Customer Profiles. See Customer Profiles Destination Properties for more details.
	customerProfiles?: [...#CustomerProfilesObservation] @go(CustomerProfiles,[]CustomerProfilesObservation)

	// Properties that are required to query Amazon EventBridge. See Generic Destination Properties for more details.
	eventBridge?: [...#EventBridgeObservation] @go(EventBridge,[]EventBridgeObservation)

	// Properties that are required to query Amazon Honeycode. See Generic Destination Properties for more details.
	honeycode?: [...#HoneycodeObservation] @go(Honeycode,[]HoneycodeObservation)
	lookoutMetrics?: [...#LookoutMetricsParameters] @go(LookoutMetrics,[]LookoutMetricsParameters)

	// Properties that are required to query Marketo. See Generic Destination Properties for more details.
	marketo?: [...#MarketoObservation] @go(Marketo,[]MarketoObservation)

	// Properties that are required to query Amazon Redshift. See Redshift Destination Properties for more details.
	redshift?: [...#RedshiftObservation] @go(Redshift,[]RedshiftObservation)

	// Properties that are required to query Amazon S3. See S3 Destination Properties for more details.
	s3?: [...#S3Observation] @go(S3,[]S3Observation)

	// Properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
	salesforce?: [...#SalesforceObservation] @go(Salesforce,[]SalesforceObservation)

	// Properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
	sapoData?: [...#SapoDataObservation] @go(SapoData,[]SapoDataObservation)

	// Properties that are required to query Snowflake. See Snowflake Destination Properties for more details.
	snowflake?: [...#SnowflakeObservation] @go(Snowflake,[]SnowflakeObservation)

	// Properties that are required to query Upsolver. See Upsolver Destination Properties for more details.
	upsolver?: [...#UpsolverObservation] @go(Upsolver,[]UpsolverObservation)

	// Properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
	zendesk?: [...#ZendeskObservation] @go(Zendesk,[]ZendeskObservation)
}

#DestinationConnectorPropertiesParameters: {
	// Properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
	// +kubebuilder:validation:Optional
	customConnector?: [...#CustomConnectorParameters] @go(CustomConnector,[]CustomConnectorParameters)

	// Properties that are required to query Amazon Connect Customer Profiles. See Customer Profiles Destination Properties for more details.
	// +kubebuilder:validation:Optional
	customerProfiles?: [...#CustomerProfilesParameters] @go(CustomerProfiles,[]CustomerProfilesParameters)

	// Properties that are required to query Amazon EventBridge. See Generic Destination Properties for more details.
	// +kubebuilder:validation:Optional
	eventBridge?: [...#EventBridgeParameters] @go(EventBridge,[]EventBridgeParameters)

	// Properties that are required to query Amazon Honeycode. See Generic Destination Properties for more details.
	// +kubebuilder:validation:Optional
	honeycode?: [...#HoneycodeParameters] @go(Honeycode,[]HoneycodeParameters)

	// +kubebuilder:validation:Optional
	lookoutMetrics?: [...#LookoutMetricsParameters] @go(LookoutMetrics,[]LookoutMetricsParameters)

	// Properties that are required to query Marketo. See Generic Destination Properties for more details.
	// +kubebuilder:validation:Optional
	marketo?: [...#MarketoParameters] @go(Marketo,[]MarketoParameters)

	// Properties that are required to query Amazon Redshift. See Redshift Destination Properties for more details.
	// +kubebuilder:validation:Optional
	redshift?: [...#RedshiftParameters] @go(Redshift,[]RedshiftParameters)

	// Properties that are required to query Amazon S3. See S3 Destination Properties for more details.
	// +kubebuilder:validation:Optional
	s3?: [...#S3Parameters] @go(S3,[]S3Parameters)

	// Properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
	// +kubebuilder:validation:Optional
	salesforce?: [...#SalesforceParameters] @go(Salesforce,[]SalesforceParameters)

	// Properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
	// +kubebuilder:validation:Optional
	sapoData?: [...#SapoDataParameters] @go(SapoData,[]SapoDataParameters)

	// Properties that are required to query Snowflake. See Snowflake Destination Properties for more details.
	// +kubebuilder:validation:Optional
	snowflake?: [...#SnowflakeParameters] @go(Snowflake,[]SnowflakeParameters)

	// Properties that are required to query Upsolver. See Upsolver Destination Properties for more details.
	// +kubebuilder:validation:Optional
	upsolver?: [...#UpsolverParameters] @go(Upsolver,[]UpsolverParameters)

	// Properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
	// +kubebuilder:validation:Optional
	zendesk?: [...#ZendeskParameters] @go(Zendesk,[]ZendeskParameters)
}

#DestinationFlowConfigObservation: {
	// API version that the destination connector uses.
	apiVersion?: null | string @go(APIVersion,*string)

	// Name of the connector profile. This name must be unique for each connector profile in the AWS account.
	connectorProfileName?: null | string @go(ConnectorProfileName,*string)

	// Type of connector, such as Salesforce, Amplitude, and so on. Valid values are Salesforce, Singular, Slack, Redshift, S3, Marketo, Googleanalytics, Zendesk, Servicenow, Datadog, Trendmicro, Snowflake, Dynatrace, Infornexus, Amplitude, Veeva, EventBridge, LookoutMetrics, Upsolver, Honeycode, CustomerProfiles, SAPOData, and CustomConnector.
	connectorType?: null | string @go(ConnectorType,*string)

	// This stores the information that is required to query a particular connector. See Destination Connector Properties for more information.
	destinationConnectorProperties?: [...#DestinationConnectorPropertiesObservation] @go(DestinationConnectorProperties,[]DestinationConnectorPropertiesObservation)
}

#DestinationFlowConfigParameters: {
	// API version that the destination connector uses.
	// +kubebuilder:validation:Optional
	apiVersion?: null | string @go(APIVersion,*string)

	// Name of the connector profile. This name must be unique for each connector profile in the AWS account.
	// +kubebuilder:validation:Optional
	connectorProfileName?: null | string @go(ConnectorProfileName,*string)

	// Type of connector, such as Salesforce, Amplitude, and so on. Valid values are Salesforce, Singular, Slack, Redshift, S3, Marketo, Googleanalytics, Zendesk, Servicenow, Datadog, Trendmicro, Snowflake, Dynatrace, Infornexus, Amplitude, Veeva, EventBridge, LookoutMetrics, Upsolver, Honeycode, CustomerProfiles, SAPOData, and CustomConnector.
	// +kubebuilder:validation:Required
	connectorType?: null | string @go(ConnectorType,*string)

	// This stores the information that is required to query a particular connector. See Destination Connector Properties for more information.
	// +kubebuilder:validation:Required
	destinationConnectorProperties: [...#DestinationConnectorPropertiesParameters] @go(DestinationConnectorProperties,[]DestinationConnectorPropertiesParameters)
}

#DynatraceObservation: {
	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#DynatraceParameters: {
	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#ErrorHandlingConfigObservation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#ErrorHandlingConfigParameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#EventBridgeErrorHandlingConfigObservation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#EventBridgeErrorHandlingConfigParameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#EventBridgeObservation: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	errorHandlingConfig?: [...#EventBridgeErrorHandlingConfigObservation] @go(ErrorHandlingConfig,[]EventBridgeErrorHandlingConfigObservation)

	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#EventBridgeParameters: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	errorHandlingConfig?: [...#EventBridgeErrorHandlingConfigParameters] @go(ErrorHandlingConfig,[]EventBridgeErrorHandlingConfigParameters)

	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#FlowObservation: {
	// Flow's ARN.
	arn?: null | string @go(Arn,*string)

	// Description of the flow you want to create.
	description?: null | string @go(Description,*string)

	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	destinationFlowConfig?: [...#DestinationFlowConfigObservation] @go(DestinationFlowConfig,[]DestinationFlowConfigObservation)
	id?: null | string @go(ID,*string)

	// ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	kmsArn?: null | string @go(KMSArn,*string)

	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	sourceFlowConfig?: [...#SourceFlowConfigObservation] @go(SourceFlowConfig,[]SourceFlowConfigObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	task?: [...#TaskObservation] @go(Task,[]TaskObservation)

	// A Trigger that determine how and when the flow runs.
	triggerConfig?: [...#TriggerConfigObservation] @go(TriggerConfig,[]TriggerConfigObservation)
}

#FlowParameters: {
	// Description of the flow you want to create.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// A Destination Flow Config that controls how Amazon AppFlow places data in the destination connector.
	// +kubebuilder:validation:Optional
	destinationFlowConfig?: [...#DestinationFlowConfigParameters] @go(DestinationFlowConfig,[]DestinationFlowConfigParameters)

	// ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
	// +kubebuilder:validation:Optional
	kmsArn?: null | string @go(KMSArn,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The Source Flow Config that controls how Amazon AppFlow retrieves data from the source connector.
	// +kubebuilder:validation:Optional
	sourceFlowConfig?: [...#SourceFlowConfigParameters] @go(SourceFlowConfig,[]SourceFlowConfigParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A Task that Amazon AppFlow performs while transferring the data in the flow run.
	// +kubebuilder:validation:Optional
	task?: [...#TaskParameters] @go(Task,[]TaskParameters)

	// A Trigger that determine how and when the flow runs.
	// +kubebuilder:validation:Optional
	triggerConfig?: [...#TriggerConfigParameters] @go(TriggerConfig,[]TriggerConfigParameters)
}

#GoogleAnalyticsObservation: {
	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#GoogleAnalyticsParameters: {
	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#HoneycodeErrorHandlingConfigObservation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#HoneycodeErrorHandlingConfigParameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#HoneycodeObservation: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	errorHandlingConfig?: [...#HoneycodeErrorHandlingConfigObservation] @go(ErrorHandlingConfig,[]HoneycodeErrorHandlingConfigObservation)

	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#HoneycodeParameters: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	errorHandlingConfig?: [...#HoneycodeErrorHandlingConfigParameters] @go(ErrorHandlingConfig,[]HoneycodeErrorHandlingConfigParameters)

	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#IncrementalPullConfigObservation: {
	// Field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
	datetimeTypeFieldName?: null | string @go(DatetimeTypeFieldName,*string)
}

#IncrementalPullConfigParameters: {
	// Field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
	// +kubebuilder:validation:Optional
	datetimeTypeFieldName?: null | string @go(DatetimeTypeFieldName,*string)
}

#InforNexusObservation: {
	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#InforNexusParameters: {
	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#LookoutMetricsObservation: {
}

#LookoutMetricsParameters: {
}

#MarketoErrorHandlingConfigObservation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#MarketoErrorHandlingConfigParameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#MarketoObservation: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	errorHandlingConfig?: [...#MarketoErrorHandlingConfigObservation] @go(ErrorHandlingConfig,[]MarketoErrorHandlingConfigObservation)

	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#MarketoParameters: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	errorHandlingConfig?: [...#MarketoErrorHandlingConfigParameters] @go(ErrorHandlingConfig,[]MarketoErrorHandlingConfigParameters)

	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#PrefixConfigObservation: {
	// Determines the level of granularity that's included in the prefix. Valid values are YEAR, MONTH, DAY, HOUR, and MINUTE.
	prefixFormat?: null | string @go(PrefixFormat,*string)

	// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are FILENAME, PATH, and PATH_AND_FILENAME.
	prefixType?: null | string @go(PrefixType,*string)
}

#PrefixConfigParameters: {
	// Determines the level of granularity that's included in the prefix. Valid values are YEAR, MONTH, DAY, HOUR, and MINUTE.
	// +kubebuilder:validation:Optional
	prefixFormat?: null | string @go(PrefixFormat,*string)

	// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are FILENAME, PATH, and PATH_AND_FILENAME.
	// +kubebuilder:validation:Optional
	prefixType?: null | string @go(PrefixType,*string)
}

#RedshiftErrorHandlingConfigObservation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#RedshiftErrorHandlingConfigParameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#RedshiftObservation: {
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	errorHandlingConfig?: [...#RedshiftErrorHandlingConfigObservation] @go(ErrorHandlingConfig,[]RedshiftErrorHandlingConfigObservation)

	// Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
	intermediateBucketName?: null | string @go(IntermediateBucketName,*string)

	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#RedshiftParameters: {
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	errorHandlingConfig?: [...#RedshiftErrorHandlingConfigParameters] @go(ErrorHandlingConfig,[]RedshiftErrorHandlingConfigParameters)

	// Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
	// +kubebuilder:validation:Required
	intermediateBucketName?: null | string @go(IntermediateBucketName,*string)

	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#S3InputFormatConfigObservation: {
	// File type that Amazon AppFlow gets from your Amazon S3 bucket. Valid values are CSV and JSON.
	s3InputFileType?: null | string @go(S3InputFileType,*string)
}

#S3InputFormatConfigParameters: {
	// File type that Amazon AppFlow gets from your Amazon S3 bucket. Valid values are CSV and JSON.
	// +kubebuilder:validation:Optional
	s3InputFileType?: null | string @go(S3InputFileType,*string)
}

#S3Observation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
	s3OutputFormatConfig?: [...#S3OutputFormatConfigObservation] @go(S3OutputFormatConfig,[]S3OutputFormatConfigObservation)
}

#S3OutputFormatConfigAggregationConfigObservation: {
	// Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are None and SingleFile.
	aggregationType?: null | string @go(AggregationType,*string)
}

#S3OutputFormatConfigAggregationConfigParameters: {
	// Whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. Valid values are None and SingleFile.
	// +kubebuilder:validation:Optional
	aggregationType?: null | string @go(AggregationType,*string)
}

#S3OutputFormatConfigObservation: {
	// Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
	aggregationConfig?: [...#AggregationConfigObservation] @go(AggregationConfig,[]AggregationConfigObservation)

	// File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are CSV, JSON, and PARQUET.
	fileType?: null | string @go(FileType,*string)

	// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
	prefixConfig?: [...#PrefixConfigObservation] @go(PrefixConfig,[]PrefixConfigObservation)
}

#S3OutputFormatConfigParameters: {
	// Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
	// +kubebuilder:validation:Optional
	aggregationConfig?: [...#AggregationConfigParameters] @go(AggregationConfig,[]AggregationConfigParameters)

	// File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are CSV, JSON, and PARQUET.
	// +kubebuilder:validation:Optional
	fileType?: null | string @go(FileType,*string)

	// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
	// +kubebuilder:validation:Optional
	prefixConfig?: [...#PrefixConfigParameters] @go(PrefixConfig,[]PrefixConfigParameters)
}

#S3OutputFormatConfigPrefixConfigObservation: {
	// Determines the level of granularity that's included in the prefix. Valid values are YEAR, MONTH, DAY, HOUR, and MINUTE.
	prefixFormat?: null | string @go(PrefixFormat,*string)

	// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are FILENAME, PATH, and PATH_AND_FILENAME.
	prefixType?: null | string @go(PrefixType,*string)
}

#S3OutputFormatConfigPrefixConfigParameters: {
	// Determines the level of granularity that's included in the prefix. Valid values are YEAR, MONTH, DAY, HOUR, and MINUTE.
	// +kubebuilder:validation:Optional
	prefixFormat?: null | string @go(PrefixFormat,*string)

	// Determines the format of the prefix, and whether it applies to the file name, file path, or both. Valid values are FILENAME, PATH, and PATH_AND_FILENAME.
	// +kubebuilder:validation:Required
	prefixType?: null | string @go(PrefixType,*string)
}

#S3Parameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.BucketPolicy
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("bucket",false)
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
	// +kubebuilder:validation:Optional
	s3OutputFormatConfig?: [...#S3OutputFormatConfigParameters] @go(S3OutputFormatConfig,[]S3OutputFormatConfigParameters)
}

#SalesforceErrorHandlingConfigObservation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#SalesforceErrorHandlingConfigParameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#SalesforceObservation: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	errorHandlingConfig?: [...#SalesforceErrorHandlingConfigObservation] @go(ErrorHandlingConfig,[]SalesforceErrorHandlingConfigObservation)

	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	idFieldNames?: [...null | string] @go(IDFieldNames,[]*string)

	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)

	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	writeOperationType?: null | string @go(WriteOperationType,*string)
}

#SalesforceParameters: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	errorHandlingConfig?: [...#SalesforceErrorHandlingConfigParameters] @go(ErrorHandlingConfig,[]SalesforceErrorHandlingConfigParameters)

	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	// +kubebuilder:validation:Optional
	idFieldNames?: [...null | string] @go(IDFieldNames,[]*string)

	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)

	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	// +kubebuilder:validation:Optional
	writeOperationType?: null | string @go(WriteOperationType,*string)
}

#SapoDataErrorHandlingConfigObservation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#SapoDataErrorHandlingConfigParameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#SapoDataObservation: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	errorHandlingConfig?: [...#SapoDataErrorHandlingConfigObservation] @go(ErrorHandlingConfig,[]SapoDataErrorHandlingConfigObservation)

	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	idFieldNames?: [...null | string] @go(IDFieldNames,[]*string)

	// Object path specified in the SAPOData flow destination.
	objectPath?: null | string @go(ObjectPath,*string)

	// Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
	successResponseHandlingConfig?: [...#SuccessResponseHandlingConfigObservation] @go(SuccessResponseHandlingConfig,[]SuccessResponseHandlingConfigObservation)

	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	writeOperationType?: null | string @go(WriteOperationType,*string)
}

#SapoDataParameters: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	errorHandlingConfig?: [...#SapoDataErrorHandlingConfigParameters] @go(ErrorHandlingConfig,[]SapoDataErrorHandlingConfigParameters)

	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	// +kubebuilder:validation:Optional
	idFieldNames?: [...null | string] @go(IDFieldNames,[]*string)

	// Object path specified in the SAPOData flow destination.
	// +kubebuilder:validation:Required
	objectPath?: null | string @go(ObjectPath,*string)

	// Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. See Success Response Handling Config for more details.
	// +kubebuilder:validation:Optional
	successResponseHandlingConfig?: [...#SuccessResponseHandlingConfigParameters] @go(SuccessResponseHandlingConfig,[]SuccessResponseHandlingConfigParameters)

	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	// +kubebuilder:validation:Optional
	writeOperationType?: null | string @go(WriteOperationType,*string)
}

#ScheduledObservation: {
	// Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are Incremental and Complete.
	dataPullMode?: null | string @go(DataPullMode,*string)

	// Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
	firstExecutionFrom?: null | string @go(FirstExecutionFrom,*string)

	// Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
	scheduleEndTime?: null | string @go(ScheduleEndTime,*string)

	// Scheduling expression that determines the rate at which the schedule will run, for example rate(5minutes).
	scheduleExpression?: null | string @go(ScheduleExpression,*string)

	// Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
	scheduleOffset?: null | float64 @go(ScheduleOffset,*float64)

	// Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
	scheduleStartTime?: null | string @go(ScheduleStartTime,*string)

	// Time zone used when referring to the date and time of a scheduled-triggered flow, such as America/New_York.
	timezone?: null | string @go(Timezone,*string)
}

#ScheduledParameters: {
	// Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are Incremental and Complete.
	// +kubebuilder:validation:Optional
	dataPullMode?: null | string @go(DataPullMode,*string)

	// Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
	// +kubebuilder:validation:Optional
	firstExecutionFrom?: null | string @go(FirstExecutionFrom,*string)

	// Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
	// +kubebuilder:validation:Optional
	scheduleEndTime?: null | string @go(ScheduleEndTime,*string)

	// Scheduling expression that determines the rate at which the schedule will run, for example rate(5minutes).
	// +kubebuilder:validation:Required
	scheduleExpression?: null | string @go(ScheduleExpression,*string)

	// Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
	// +kubebuilder:validation:Optional
	scheduleOffset?: null | float64 @go(ScheduleOffset,*float64)

	// Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
	// +kubebuilder:validation:Optional
	scheduleStartTime?: null | string @go(ScheduleStartTime,*string)

	// Time zone used when referring to the date and time of a scheduled-triggered flow, such as America/New_York.
	// +kubebuilder:validation:Optional
	timezone?: null | string @go(Timezone,*string)
}

#ServiceNowObservation: {
	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#ServiceNowParameters: {
	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#SingularObservation: {
	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#SingularParameters: {
	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#SlackObservation: {
	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#SlackParameters: {
	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#SnowflakeErrorHandlingConfigObservation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#SnowflakeErrorHandlingConfigParameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#SnowflakeObservation: {
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	errorHandlingConfig?: [...#SnowflakeErrorHandlingConfigObservation] @go(ErrorHandlingConfig,[]SnowflakeErrorHandlingConfigObservation)

	// Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
	intermediateBucketName?: null | string @go(IntermediateBucketName,*string)

	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#SnowflakeParameters: {
	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	errorHandlingConfig?: [...#SnowflakeErrorHandlingConfigParameters] @go(ErrorHandlingConfig,[]SnowflakeErrorHandlingConfigParameters)

	// Intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
	// +kubebuilder:validation:Required
	intermediateBucketName?: null | string @go(IntermediateBucketName,*string)

	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#SourceConnectorPropertiesCustomConnectorObservation: {
	// Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
	customProperties?: {[string]: null | string} @go(CustomProperties,map[string]*string)

	// Entity specified in the custom connector as a destination in the flow.
	entityName?: null | string @go(EntityName,*string)
}

#SourceConnectorPropertiesCustomConnectorParameters: {
	// Custom properties that are specific to the connector when it's used as a destination in the flow. Maximum of 50 items.
	// +kubebuilder:validation:Optional
	customProperties?: {[string]: null | string} @go(CustomProperties,map[string]*string)

	// Entity specified in the custom connector as a destination in the flow.
	// +kubebuilder:validation:Required
	entityName?: null | string @go(EntityName,*string)
}

#SourceConnectorPropertiesMarketoObservation: {
	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#SourceConnectorPropertiesMarketoParameters: {
	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#SourceConnectorPropertiesObservation: {
	// Information that is required for querying Amplitude. See Generic Source Properties for more details.
	amplitude?: [...#AmplitudeObservation] @go(Amplitude,[]AmplitudeObservation)

	// Properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
	customConnector?: [...#SourceConnectorPropertiesCustomConnectorObservation] @go(CustomConnector,[]SourceConnectorPropertiesCustomConnectorObservation)

	// Information that is required for querying Datadog. See Generic Source Properties for more details.
	datadog?: [...#DatadogObservation] @go(Datadog,[]DatadogObservation)

	// Operation to be performed on the provided Dynatrace source fields. Valid values are PROJECTION, BETWEEN, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	dynatrace?: [...#DynatraceObservation] @go(Dynatrace,[]DynatraceObservation)

	// Operation to be performed on the provided Google Analytics source fields. Valid values are PROJECTION and BETWEEN.
	googleAnalytics?: [...#GoogleAnalyticsObservation] @go(GoogleAnalytics,[]GoogleAnalyticsObservation)

	// Information that is required for querying Infor Nexus. See Generic Source Properties for more details.
	inforNexus?: [...#InforNexusObservation] @go(InforNexus,[]InforNexusObservation)

	// Properties that are required to query Marketo. See Generic Destination Properties for more details.
	marketo?: [...#SourceConnectorPropertiesMarketoObservation] @go(Marketo,[]SourceConnectorPropertiesMarketoObservation)

	// Properties that are required to query Amazon S3. See S3 Destination Properties for more details.
	s3?: [...#SourceConnectorPropertiesS3Observation] @go(S3,[]SourceConnectorPropertiesS3Observation)

	// Properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
	salesforce?: [...#SourceConnectorPropertiesSalesforceObservation] @go(Salesforce,[]SourceConnectorPropertiesSalesforceObservation)

	// Properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
	sapoData?: [...#SourceConnectorPropertiesSapoDataObservation] @go(SapoData,[]SourceConnectorPropertiesSapoDataObservation)

	// Information that is required for querying ServiceNow. See Generic Source Properties for more details.
	serviceNow?: [...#ServiceNowObservation] @go(ServiceNow,[]ServiceNowObservation)

	// Information that is required for querying Singular. See Generic Source Properties for more details.
	singular?: [...#SingularObservation] @go(Singular,[]SingularObservation)

	// Information that is required for querying Slack. See Generic Source Properties for more details.
	slack?: [...#SlackObservation] @go(Slack,[]SlackObservation)

	// Operation to be performed on the provided Trend Micro source fields. Valid values are PROJECTION, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	trendmicro?: [...#TrendmicroObservation] @go(Trendmicro,[]TrendmicroObservation)

	// Information that is required for querying Veeva. See Veeva Source Properties for more details.
	veeva?: [...#VeevaObservation] @go(Veeva,[]VeevaObservation)

	// Properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
	zendesk?: [...#SourceConnectorPropertiesZendeskObservation] @go(Zendesk,[]SourceConnectorPropertiesZendeskObservation)
}

#SourceConnectorPropertiesParameters: {
	// Information that is required for querying Amplitude. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	amplitude?: [...#AmplitudeParameters] @go(Amplitude,[]AmplitudeParameters)

	// Properties that are required to query the custom Connector. See Custom Connector Destination Properties for more details.
	// +kubebuilder:validation:Optional
	customConnector?: [...#SourceConnectorPropertiesCustomConnectorParameters] @go(CustomConnector,[]SourceConnectorPropertiesCustomConnectorParameters)

	// Information that is required for querying Datadog. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	datadog?: [...#DatadogParameters] @go(Datadog,[]DatadogParameters)

	// Operation to be performed on the provided Dynatrace source fields. Valid values are PROJECTION, BETWEEN, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	// +kubebuilder:validation:Optional
	dynatrace?: [...#DynatraceParameters] @go(Dynatrace,[]DynatraceParameters)

	// Operation to be performed on the provided Google Analytics source fields. Valid values are PROJECTION and BETWEEN.
	// +kubebuilder:validation:Optional
	googleAnalytics?: [...#GoogleAnalyticsParameters] @go(GoogleAnalytics,[]GoogleAnalyticsParameters)

	// Information that is required for querying Infor Nexus. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	inforNexus?: [...#InforNexusParameters] @go(InforNexus,[]InforNexusParameters)

	// Properties that are required to query Marketo. See Generic Destination Properties for more details.
	// +kubebuilder:validation:Optional
	marketo?: [...#SourceConnectorPropertiesMarketoParameters] @go(Marketo,[]SourceConnectorPropertiesMarketoParameters)

	// Properties that are required to query Amazon S3. See S3 Destination Properties for more details.
	// +kubebuilder:validation:Optional
	s3?: [...#SourceConnectorPropertiesS3Parameters] @go(S3,[]SourceConnectorPropertiesS3Parameters)

	// Properties that are required to query Salesforce. See Salesforce Destination Properties for more details.
	// +kubebuilder:validation:Optional
	salesforce?: [...#SourceConnectorPropertiesSalesforceParameters] @go(Salesforce,[]SourceConnectorPropertiesSalesforceParameters)

	// Properties that are required to query SAPOData. See SAPOData Destination Properties for more details.
	// +kubebuilder:validation:Optional
	sapoData?: [...#SourceConnectorPropertiesSapoDataParameters] @go(SapoData,[]SourceConnectorPropertiesSapoDataParameters)

	// Information that is required for querying ServiceNow. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	serviceNow?: [...#ServiceNowParameters] @go(ServiceNow,[]ServiceNowParameters)

	// Information that is required for querying Singular. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	singular?: [...#SingularParameters] @go(Singular,[]SingularParameters)

	// Information that is required for querying Slack. See Generic Source Properties for more details.
	// +kubebuilder:validation:Optional
	slack?: [...#SlackParameters] @go(Slack,[]SlackParameters)

	// Operation to be performed on the provided Trend Micro source fields. Valid values are PROJECTION, EQUAL_TO, ADDITION, MULTIPLICATION, DIVISION, SUBTRACTION, MASK_ALL, MASK_FIRST_N, MASK_LAST_N, VALIDATE_NON_NULL, VALIDATE_NON_ZERO, VALIDATE_NON_NEGATIVE, VALIDATE_NUMERIC, and NO_OP.
	// +kubebuilder:validation:Optional
	trendmicro?: [...#TrendmicroParameters] @go(Trendmicro,[]TrendmicroParameters)

	// Information that is required for querying Veeva. See Veeva Source Properties for more details.
	// +kubebuilder:validation:Optional
	veeva?: [...#VeevaParameters] @go(Veeva,[]VeevaParameters)

	// Properties that are required to query Zendesk. See Zendesk Destination Properties for more details.
	// +kubebuilder:validation:Optional
	zendesk?: [...#SourceConnectorPropertiesZendeskParameters] @go(Zendesk,[]SourceConnectorPropertiesZendeskParameters)
}

#SourceConnectorPropertiesS3Observation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// When you use Amazon S3 as the source, the configuration format that you provide the flow input data. See S3 Input Format Config for details.
	s3InputFormatConfig?: [...#S3InputFormatConfigObservation] @go(S3InputFormatConfig,[]S3InputFormatConfigObservation)
}

#SourceConnectorPropertiesS3Parameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.BucketPolicy
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("bucket",false)
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// When you use Amazon S3 as the source, the configuration format that you provide the flow input data. See S3 Input Format Config for details.
	// +kubebuilder:validation:Optional
	s3InputFormatConfig?: [...#S3InputFormatConfigParameters] @go(S3InputFormatConfig,[]S3InputFormatConfigParameters)
}

#SourceConnectorPropertiesSalesforceObservation: {
	// Flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
	enableDynamicFieldUpdate?: null | bool @go(EnableDynamicFieldUpdate,*bool)

	// Whether Amazon AppFlow includes deleted files in the flow run.
	includeDeletedRecords?: null | bool @go(IncludeDeletedRecords,*bool)

	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#SourceConnectorPropertiesSalesforceParameters: {
	// Flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
	// +kubebuilder:validation:Optional
	enableDynamicFieldUpdate?: null | bool @go(EnableDynamicFieldUpdate,*bool)

	// Whether Amazon AppFlow includes deleted files in the flow run.
	// +kubebuilder:validation:Optional
	includeDeletedRecords?: null | bool @go(IncludeDeletedRecords,*bool)

	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#SourceConnectorPropertiesSapoDataObservation: {
	// Object path specified in the SAPOData flow destination.
	objectPath?: null | string @go(ObjectPath,*string)
}

#SourceConnectorPropertiesSapoDataParameters: {
	// Object path specified in the SAPOData flow destination.
	// +kubebuilder:validation:Required
	objectPath?: null | string @go(ObjectPath,*string)
}

#SourceConnectorPropertiesZendeskObservation: {
	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#SourceConnectorPropertiesZendeskParameters: {
	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#SourceFlowConfigObservation: {
	// API version that the destination connector uses.
	apiVersion?: null | string @go(APIVersion,*string)

	// Name of the connector profile. This name must be unique for each connector profile in the AWS account.
	connectorProfileName?: null | string @go(ConnectorProfileName,*string)

	// Type of connector, such as Salesforce, Amplitude, and so on. Valid values are Salesforce, Singular, Slack, Redshift, S3, Marketo, Googleanalytics, Zendesk, Servicenow, Datadog, Trendmicro, Snowflake, Dynatrace, Infornexus, Amplitude, Veeva, EventBridge, LookoutMetrics, Upsolver, Honeycode, CustomerProfiles, SAPOData, and CustomConnector.
	connectorType?: null | string @go(ConnectorType,*string)

	// Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull. See Incremental Pull Config for more details.
	incrementalPullConfig?: [...#IncrementalPullConfigObservation] @go(IncrementalPullConfig,[]IncrementalPullConfigObservation)

	// Information that is required to query a particular source connector. See Source Connector Properties for details.
	sourceConnectorProperties?: [...#SourceConnectorPropertiesObservation] @go(SourceConnectorProperties,[]SourceConnectorPropertiesObservation)
}

#SourceFlowConfigParameters: {
	// API version that the destination connector uses.
	// +kubebuilder:validation:Optional
	apiVersion?: null | string @go(APIVersion,*string)

	// Name of the connector profile. This name must be unique for each connector profile in the AWS account.
	// +kubebuilder:validation:Optional
	connectorProfileName?: null | string @go(ConnectorProfileName,*string)

	// Type of connector, such as Salesforce, Amplitude, and so on. Valid values are Salesforce, Singular, Slack, Redshift, S3, Marketo, Googleanalytics, Zendesk, Servicenow, Datadog, Trendmicro, Snowflake, Dynatrace, Infornexus, Amplitude, Veeva, EventBridge, LookoutMetrics, Upsolver, Honeycode, CustomerProfiles, SAPOData, and CustomConnector.
	// +kubebuilder:validation:Required
	connectorType?: null | string @go(ConnectorType,*string)

	// Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull. See Incremental Pull Config for more details.
	// +kubebuilder:validation:Optional
	incrementalPullConfig?: [...#IncrementalPullConfigParameters] @go(IncrementalPullConfig,[]IncrementalPullConfigParameters)

	// Information that is required to query a particular source connector. See Source Connector Properties for details.
	// +kubebuilder:validation:Required
	sourceConnectorProperties: [...#SourceConnectorPropertiesParameters] @go(SourceConnectorProperties,[]SourceConnectorPropertiesParameters)
}

#SuccessResponseHandlingConfigObservation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)
}

#SuccessResponseHandlingConfigParameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)
}

#TaskObservation: {
	// Operation to be performed on the provided source fields. See Connector Operator for details.
	connectorOperator?: [...#ConnectorOperatorObservation] @go(ConnectorOperator,[]ConnectorOperatorObservation)

	// Field in a destination connector, or a field value against which Amazon AppFlow validates a source field.
	destinationField?: null | string @go(DestinationField,*string)

	// Source fields to which a particular task is applied.
	sourceFields?: [...null | string] @go(SourceFields,[]*string)

	// Map used to store task-related information. The execution service looks for particular information based on the TaskType. Valid keys are VALUE, VALUES, DATA_TYPE, UPPER_BOUND, LOWER_BOUND, SOURCE_DATA_TYPE, DESTINATION_DATA_TYPE, VALIDATION_ACTION, MASK_VALUE, MASK_LENGTH, TRUNCATE_LENGTH, MATH_OPERATION_FIELDS_ORDER, CONCAT_FORMAT, SUBFIELD_CATEGORY_MAP, and EXCLUDE_SOURCE_FIELDS_LIST.
	taskProperties?: {[string]: null | string} @go(TaskProperties,map[string]*string)

	// Particular task implementation that Amazon AppFlow performs. Valid values are Arithmetic, Filter, Map, Map_all, Mask, Merge, Passthrough, Truncate, and Validate.
	taskType?: null | string @go(TaskType,*string)
}

#TaskParameters: {
	// Operation to be performed on the provided source fields. See Connector Operator for details.
	// +kubebuilder:validation:Optional
	connectorOperator?: [...#ConnectorOperatorParameters] @go(ConnectorOperator,[]ConnectorOperatorParameters)

	// Field in a destination connector, or a field value against which Amazon AppFlow validates a source field.
	// +kubebuilder:validation:Optional
	destinationField?: null | string @go(DestinationField,*string)

	// Source fields to which a particular task is applied.
	// +kubebuilder:validation:Required
	sourceFields: [...null | string] @go(SourceFields,[]*string)

	// Map used to store task-related information. The execution service looks for particular information based on the TaskType. Valid keys are VALUE, VALUES, DATA_TYPE, UPPER_BOUND, LOWER_BOUND, SOURCE_DATA_TYPE, DESTINATION_DATA_TYPE, VALIDATION_ACTION, MASK_VALUE, MASK_LENGTH, TRUNCATE_LENGTH, MATH_OPERATION_FIELDS_ORDER, CONCAT_FORMAT, SUBFIELD_CATEGORY_MAP, and EXCLUDE_SOURCE_FIELDS_LIST.
	// +kubebuilder:validation:Optional
	taskProperties?: {[string]: null | string} @go(TaskProperties,map[string]*string)

	// Particular task implementation that Amazon AppFlow performs. Valid values are Arithmetic, Filter, Map, Map_all, Mask, Merge, Passthrough, Truncate, and Validate.
	// +kubebuilder:validation:Required
	taskType?: null | string @go(TaskType,*string)
}

#TrendmicroObservation: {
	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#TrendmicroParameters: {
	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#TriggerConfigObservation: {
	// Configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the Scheduled trigger type. See Scheduled Trigger Properties for details.
	triggerProperties?: [...#TriggerPropertiesObservation] @go(TriggerProperties,[]TriggerPropertiesObservation)

	// Type of flow trigger. Valid values are Scheduled, Event, and OnDemand.
	triggerType?: null | string @go(TriggerType,*string)
}

#TriggerConfigParameters: {
	// Configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the Scheduled trigger type. See Scheduled Trigger Properties for details.
	// +kubebuilder:validation:Optional
	triggerProperties?: [...#TriggerPropertiesParameters] @go(TriggerProperties,[]TriggerPropertiesParameters)

	// Type of flow trigger. Valid values are Scheduled, Event, and OnDemand.
	// +kubebuilder:validation:Required
	triggerType?: null | string @go(TriggerType,*string)
}

#TriggerPropertiesObservation: {
	scheduled?: [...#ScheduledObservation] @go(Scheduled,[]ScheduledObservation)
}

#TriggerPropertiesParameters: {
	// +kubebuilder:validation:Optional
	scheduled?: [...#ScheduledParameters] @go(Scheduled,[]ScheduledParameters)
}

#UpsolverObservation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
	s3OutputFormatConfig?: [...#UpsolverS3OutputFormatConfigObservation] @go(S3OutputFormatConfig,[]UpsolverS3OutputFormatConfigObservation)
}

#UpsolverParameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Required
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// Configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. See S3 Output Format Config for more details.
	// +kubebuilder:validation:Required
	s3OutputFormatConfig: [...#UpsolverS3OutputFormatConfigParameters] @go(S3OutputFormatConfig,[]UpsolverS3OutputFormatConfigParameters)
}

#UpsolverS3OutputFormatConfigObservation: {
	// Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
	aggregationConfig?: [...#S3OutputFormatConfigAggregationConfigObservation] @go(AggregationConfig,[]S3OutputFormatConfigAggregationConfigObservation)

	// File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are CSV, JSON, and PARQUET.
	fileType?: null | string @go(FileType,*string)

	// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
	prefixConfig?: [...#S3OutputFormatConfigPrefixConfigObservation] @go(PrefixConfig,[]S3OutputFormatConfigPrefixConfigObservation)
}

#UpsolverS3OutputFormatConfigParameters: {
	// Aggregation settings that you can use to customize the output format of your flow data. See Aggregation Config for more details.
	// +kubebuilder:validation:Optional
	aggregationConfig?: [...#S3OutputFormatConfigAggregationConfigParameters] @go(AggregationConfig,[]S3OutputFormatConfigAggregationConfigParameters)

	// File type that Amazon AppFlow places in the Amazon S3 bucket. Valid values are CSV, JSON, and PARQUET.
	// +kubebuilder:validation:Optional
	fileType?: null | string @go(FileType,*string)

	// Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. See Prefix Config for more details.
	// +kubebuilder:validation:Required
	prefixConfig: [...#S3OutputFormatConfigPrefixConfigParameters] @go(PrefixConfig,[]S3OutputFormatConfigPrefixConfigParameters)
}

#VeevaObservation: {
	// Document type specified in the Veeva document extract flow.
	documentType?: null | string @go(DocumentType,*string)

	// Boolean value to include All Versions of files in Veeva document extract flow.
	includeAllVersions?: null | bool @go(IncludeAllVersions,*bool)

	// Boolean value to include file renditions in Veeva document extract flow.
	includeRenditions?: null | bool @go(IncludeRenditions,*bool)

	// Boolean value to include source files in Veeva document extract flow.
	includeSourceFiles?: null | bool @go(IncludeSourceFiles,*bool)

	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)
}

#VeevaParameters: {
	// Document type specified in the Veeva document extract flow.
	// +kubebuilder:validation:Optional
	documentType?: null | string @go(DocumentType,*string)

	// Boolean value to include All Versions of files in Veeva document extract flow.
	// +kubebuilder:validation:Optional
	includeAllVersions?: null | bool @go(IncludeAllVersions,*bool)

	// Boolean value to include file renditions in Veeva document extract flow.
	// +kubebuilder:validation:Optional
	includeRenditions?: null | bool @go(IncludeRenditions,*bool)

	// Boolean value to include source files in Veeva document extract flow.
	// +kubebuilder:validation:Optional
	includeSourceFiles?: null | bool @go(IncludeSourceFiles,*bool)

	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)
}

#ZendeskErrorHandlingConfigObservation: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#ZendeskErrorHandlingConfigParameters: {
	// Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
	// +kubebuilder:validation:Optional
	bucketName?: null | string @go(BucketName,*string)

	// Object key for the bucket in which Amazon AppFlow places the destination files.
	// +kubebuilder:validation:Optional
	bucketPrefix?: null | string @go(BucketPrefix,*string)

	// If the flow should fail after the first instance of a failure when attempting to place data in the destination.
	// +kubebuilder:validation:Optional
	failOnFirstDestinationError?: null | bool @go(FailOnFirstDestinationError,*bool)
}

#ZendeskObservation: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	errorHandlingConfig?: [...#ZendeskErrorHandlingConfigObservation] @go(ErrorHandlingConfig,[]ZendeskErrorHandlingConfigObservation)

	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	idFieldNames?: [...null | string] @go(IDFieldNames,[]*string)

	// Object specified in the flow destination.
	object?: null | string @go(Object,*string)

	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	writeOperationType?: null | string @go(WriteOperationType,*string)
}

#ZendeskParameters: {
	// Settings that determine how Amazon AppFlow handles an error when placing data in the destination. See Error Handling Config for more details.
	// +kubebuilder:validation:Optional
	errorHandlingConfig?: [...#ZendeskErrorHandlingConfigParameters] @go(ErrorHandlingConfig,[]ZendeskErrorHandlingConfigParameters)

	// Name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.
	// +kubebuilder:validation:Optional
	idFieldNames?: [...null | string] @go(IDFieldNames,[]*string)

	// Object specified in the flow destination.
	// +kubebuilder:validation:Required
	object?: null | string @go(Object,*string)

	// Type of write operation to be performed in the custom connector when it's used as destination. Valid values are INSERT, UPSERT, UPDATE, and DELETE.
	// +kubebuilder:validation:Optional
	writeOperationType?: null | string @go(WriteOperationType,*string)
}

// FlowSpec defines the desired state of Flow
#FlowSpec: {
	forProvider: #FlowParameters @go(ForProvider)
}

// FlowStatus defines the observed state of Flow.
#FlowStatus: {
	atProvider?: #FlowObservation @go(AtProvider)
}

// Flow is the Schema for the Flows API. Provides an AppFlow Flow resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Flow: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.destinationFlowConfig)",message="destinationFlowConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.sourceFlowConfig)",message="sourceFlowConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.task)",message="task is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.triggerConfig)",message="triggerConfig is a required parameter"
	spec:    #FlowSpec   @go(Spec)
	status?: #FlowStatus @go(Status)
}

// FlowList contains a list of Flows
#FlowList: {
	items: [...#Flow] @go(Items,[]Flow)
}
