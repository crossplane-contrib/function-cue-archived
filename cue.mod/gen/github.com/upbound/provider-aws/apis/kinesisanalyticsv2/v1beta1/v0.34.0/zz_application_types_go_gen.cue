// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/kinesisanalyticsv2/v1beta1

package v1beta1

#ApplicationCodeConfigurationObservation: {
	// The location and type of the application code.
	codeContent?: [...#CodeContentObservation] @go(CodeContent,[]CodeContentObservation)

	// Specifies whether the code content is in text or zip format. Valid values: PLAINTEXT, ZIPFILE.
	codeContentType?: null | string @go(CodeContentType,*string)
}

#ApplicationCodeConfigurationParameters: {
	// The location and type of the application code.
	// +kubebuilder:validation:Optional
	codeContent?: [...#CodeContentParameters] @go(CodeContent,[]CodeContentParameters)

	// Specifies whether the code content is in text or zip format. Valid values: PLAINTEXT, ZIPFILE.
	// +kubebuilder:validation:Required
	codeContentType?: null | string @go(CodeContentType,*string)
}

#ApplicationConfigurationObservation: {
	// The code location and type parameters for the application.
	applicationCodeConfiguration?: [...#ApplicationCodeConfigurationObservation] @go(ApplicationCodeConfiguration,[]ApplicationCodeConfigurationObservation)

	// Describes whether snapshots are enabled for a Flink-based application.
	applicationSnapshotConfiguration?: [...#ApplicationSnapshotConfigurationObservation] @go(ApplicationSnapshotConfiguration,[]ApplicationSnapshotConfigurationObservation)

	// Describes execution properties for a Flink-based application.
	environmentProperties?: [...#EnvironmentPropertiesObservation] @go(EnvironmentProperties,[]EnvironmentPropertiesObservation)

	// The configuration of a Flink-based application.
	flinkApplicationConfiguration?: [...#FlinkApplicationConfigurationObservation] @go(FlinkApplicationConfiguration,[]FlinkApplicationConfigurationObservation)

	// Describes the starting properties for a Flink-based application.
	runConfiguration?: [...#RunConfigurationObservation] @go(RunConfiguration,[]RunConfigurationObservation)

	// The configuration of a SQL-based application.
	sqlApplicationConfiguration?: [...#SQLApplicationConfigurationObservation] @go(SQLApplicationConfiguration,[]SQLApplicationConfigurationObservation)

	// The VPC configuration of a Flink-based application.
	vpcConfiguration?: [...#VPCConfigurationObservation] @go(VPCConfiguration,[]VPCConfigurationObservation)
}

#ApplicationConfigurationParameters: {
	// The code location and type parameters for the application.
	// +kubebuilder:validation:Required
	applicationCodeConfiguration: [...#ApplicationCodeConfigurationParameters] @go(ApplicationCodeConfiguration,[]ApplicationCodeConfigurationParameters)

	// Describes whether snapshots are enabled for a Flink-based application.
	// +kubebuilder:validation:Optional
	applicationSnapshotConfiguration?: [...#ApplicationSnapshotConfigurationParameters] @go(ApplicationSnapshotConfiguration,[]ApplicationSnapshotConfigurationParameters)

	// Describes execution properties for a Flink-based application.
	// +kubebuilder:validation:Optional
	environmentProperties?: [...#EnvironmentPropertiesParameters] @go(EnvironmentProperties,[]EnvironmentPropertiesParameters)

	// The configuration of a Flink-based application.
	// +kubebuilder:validation:Optional
	flinkApplicationConfiguration?: [...#FlinkApplicationConfigurationParameters] @go(FlinkApplicationConfiguration,[]FlinkApplicationConfigurationParameters)

	// Describes the starting properties for a Flink-based application.
	// +kubebuilder:validation:Optional
	runConfiguration?: [...#RunConfigurationParameters] @go(RunConfiguration,[]RunConfigurationParameters)

	// The configuration of a SQL-based application.
	// +kubebuilder:validation:Optional
	sqlApplicationConfiguration?: [...#SQLApplicationConfigurationParameters] @go(SQLApplicationConfiguration,[]SQLApplicationConfigurationParameters)

	// The VPC configuration of a Flink-based application.
	// +kubebuilder:validation:Optional
	vpcConfiguration?: [...#VPCConfigurationParameters] @go(VPCConfiguration,[]VPCConfigurationParameters)
}

#ApplicationObservation: {
	// The application's configuration
	applicationConfiguration?: [...#ApplicationConfigurationObservation] @go(ApplicationConfiguration,[]ApplicationConfigurationObservation)

	// The ARN of the application.
	arn?: null | string @go(Arn,*string)

	// A CloudWatch log stream to monitor application configuration errors.
	cloudwatchLoggingOptions?: [...#CloudwatchLoggingOptionsObservation] @go(CloudwatchLoggingOptions,[]CloudwatchLoggingOptionsObservation)

	// The current timestamp when the application was created.
	createTimestamp?: null | string @go(CreateTimestamp,*string)

	// A summary description of the application.
	description?: null | string @go(Description,*string)

	// Whether to force stop an unresponsive Flink-based application.
	forceStop?: null | bool @go(ForceStop,*bool)

	// The application identifier.
	id?: null | string @go(ID,*string)

	// The current timestamp when the application was last updated.
	lastUpdateTimestamp?: null | string @go(LastUpdateTimestamp,*string)

	// The runtime environment for the application. Valid values: SQL-1_0, FLINK-1_6, FLINK-1_8, FLINK-1_11, FLINK-1_13, FLINK-1_15.
	runtimeEnvironment?: null | string @go(RuntimeEnvironment,*string)

	// The ARN of the IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.
	serviceExecutionRole?: null | string @go(ServiceExecutionRole,*string)

	// Whether to start or stop the application.
	startApplication?: null | bool @go(StartApplication,*bool)

	// The status of the application.
	status?: null | string @go(Status,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The current application version. Kinesis Data Analytics updates the version_id each time the application is updated.
	versionId?: null | float64 @go(VersionID,*float64)
}

#ApplicationParameters: {
	// The application's configuration
	// +kubebuilder:validation:Optional
	applicationConfiguration?: [...#ApplicationConfigurationParameters] @go(ApplicationConfiguration,[]ApplicationConfigurationParameters)

	// A CloudWatch log stream to monitor application configuration errors.
	// +kubebuilder:validation:Optional
	cloudwatchLoggingOptions?: [...#CloudwatchLoggingOptionsParameters] @go(CloudwatchLoggingOptions,[]CloudwatchLoggingOptionsParameters)

	// A summary description of the application.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Whether to force stop an unresponsive Flink-based application.
	// +kubebuilder:validation:Optional
	forceStop?: null | bool @go(ForceStop,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The runtime environment for the application. Valid values: SQL-1_0, FLINK-1_6, FLINK-1_8, FLINK-1_11, FLINK-1_13, FLINK-1_15.
	// +kubebuilder:validation:Optional
	runtimeEnvironment?: null | string @go(RuntimeEnvironment,*string)

	// The ARN of the IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	serviceExecutionRole?: null | string @go(ServiceExecutionRole,*string)

	// Whether to start or stop the application.
	// +kubebuilder:validation:Optional
	startApplication?: null | bool @go(StartApplication,*bool)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ApplicationRestoreConfigurationObservation: {
	// Specifies how the application should be restored. Valid values: RESTORE_FROM_CUSTOM_SNAPSHOT, RESTORE_FROM_LATEST_SNAPSHOT, SKIP_RESTORE_FROM_SNAPSHOT.
	applicationRestoreType?: null | string @go(ApplicationRestoreType,*string)

	// The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if RESTORE_FROM_CUSTOM_SNAPSHOT is specified for application_restore_type.
	snapshotName?: null | string @go(SnapshotName,*string)
}

#ApplicationRestoreConfigurationParameters: {
	// Specifies how the application should be restored. Valid values: RESTORE_FROM_CUSTOM_SNAPSHOT, RESTORE_FROM_LATEST_SNAPSHOT, SKIP_RESTORE_FROM_SNAPSHOT.
	// +kubebuilder:validation:Optional
	applicationRestoreType?: null | string @go(ApplicationRestoreType,*string)

	// The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if RESTORE_FROM_CUSTOM_SNAPSHOT is specified for application_restore_type.
	// +kubebuilder:validation:Optional
	snapshotName?: null | string @go(SnapshotName,*string)
}

#ApplicationSnapshotConfigurationObservation: {
	// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
	snapshotsEnabled?: null | bool @go(SnapshotsEnabled,*bool)
}

#ApplicationSnapshotConfigurationParameters: {
	// Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
	// +kubebuilder:validation:Required
	snapshotsEnabled?: null | bool @go(SnapshotsEnabled,*bool)
}

#CheckpointConfigurationObservation: {
	// Describes the interval in milliseconds between checkpoint operations.
	checkpointInterval?: null | float64 @go(CheckpointInterval,*float64)

	// Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
	checkpointingEnabled?: null | bool @go(CheckpointingEnabled,*bool)

	// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. Valid values: CUSTOM, DEFAULT. Set this attribute to CUSTOM in order for any specified checkpointing_enabled, checkpoint_interval, or min_pause_between_checkpoints attribute values to be effective. If this attribute is set to DEFAULT, the application will always use the following values:
	configurationType?: null | string @go(ConfigurationType,*string)

	// Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start.
	minPauseBetweenCheckpoints?: null | float64 @go(MinPauseBetweenCheckpoints,*float64)
}

#CheckpointConfigurationParameters: {
	// Describes the interval in milliseconds between checkpoint operations.
	// +kubebuilder:validation:Optional
	checkpointInterval?: null | float64 @go(CheckpointInterval,*float64)

	// Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
	// +kubebuilder:validation:Optional
	checkpointingEnabled?: null | bool @go(CheckpointingEnabled,*bool)

	// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. Valid values: CUSTOM, DEFAULT. Set this attribute to CUSTOM in order for any specified checkpointing_enabled, checkpoint_interval, or min_pause_between_checkpoints attribute values to be effective. If this attribute is set to DEFAULT, the application will always use the following values:
	// +kubebuilder:validation:Required
	configurationType?: null | string @go(ConfigurationType,*string)

	// Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start.
	// +kubebuilder:validation:Optional
	minPauseBetweenCheckpoints?: null | float64 @go(MinPauseBetweenCheckpoints,*float64)
}

#CloudwatchLoggingOptionsObservation: {
	// The application identifier.
	cloudwatchLoggingOptionId?: null | string @go(CloudwatchLoggingOptionID,*string)

	// The ARN of the CloudWatch log stream to receive application messages.
	logStreamArn?: null | string @go(LogStreamArn,*string)
}

#CloudwatchLoggingOptionsParameters: {
	// The ARN of the CloudWatch log stream to receive application messages.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1.Stream
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	logStreamArn?: null | string @go(LogStreamArn,*string)
}

#CodeContentObservation: {
	// Information about the Amazon S3 bucket containing the application code.
	s3ContentLocation?: [...#S3ContentLocationObservation] @go(S3ContentLocation,[]S3ContentLocationObservation)

	// The text-format code for the application.
	textContent?: null | string @go(TextContent,*string)
}

#CodeContentParameters: {
	// Information about the Amazon S3 bucket containing the application code.
	// +kubebuilder:validation:Optional
	s3ContentLocation?: [...#S3ContentLocationParameters] @go(S3ContentLocation,[]S3ContentLocationParameters)

	// The text-format code for the application.
	// +kubebuilder:validation:Optional
	textContent?: null | string @go(TextContent,*string)
}

#CsvMappingParametersObservation: {
	// The column delimiter. For example, in a CSV format, a comma (,) is the typical column delimiter.
	recordColumnDelimiter?: null | string @go(RecordColumnDelimiter,*string)

	// The row delimiter. For example, in a CSV format, \n is the typical row delimiter.
	recordRowDelimiter?: null | string @go(RecordRowDelimiter,*string)
}

#CsvMappingParametersParameters: {
	// The column delimiter. For example, in a CSV format, a comma (,) is the typical column delimiter.
	// +kubebuilder:validation:Required
	recordColumnDelimiter?: null | string @go(RecordColumnDelimiter,*string)

	// The row delimiter. For example, in a CSV format, \n is the typical row delimiter.
	// +kubebuilder:validation:Required
	recordRowDelimiter?: null | string @go(RecordRowDelimiter,*string)
}

#DestinationSchemaObservation: {
	// The type of record format. Valid values: CSV, JSON.
	recordFormatType?: null | string @go(RecordFormatType,*string)
}

#DestinationSchemaParameters: {
	// The type of record format. Valid values: CSV, JSON.
	// +kubebuilder:validation:Required
	recordFormatType?: null | string @go(RecordFormatType,*string)
}

#EnvironmentPropertiesObservation: {
	// Describes the execution property groups.
	propertyGroup?: [...#PropertyGroupObservation] @go(PropertyGroup,[]PropertyGroupObservation)
}

#EnvironmentPropertiesParameters: {
	// Describes the execution property groups.
	// +kubebuilder:validation:Required
	propertyGroup: [...#PropertyGroupParameters] @go(PropertyGroup,[]PropertyGroupParameters)
}

#FlinkApplicationConfigurationObservation: {
	// Describes an application's checkpointing configuration.
	checkpointConfiguration?: [...#CheckpointConfigurationObservation] @go(CheckpointConfiguration,[]CheckpointConfigurationObservation)

	// Describes configuration parameters for CloudWatch logging for an application.
	monitoringConfiguration?: [...#MonitoringConfigurationObservation] @go(MonitoringConfiguration,[]MonitoringConfigurationObservation)

	// Describes parameters for how an application executes multiple tasks simultaneously.
	parallelismConfiguration?: [...#ParallelismConfigurationObservation] @go(ParallelismConfiguration,[]ParallelismConfigurationObservation)
}

#FlinkApplicationConfigurationParameters: {
	// Describes an application's checkpointing configuration.
	// +kubebuilder:validation:Optional
	checkpointConfiguration?: [...#CheckpointConfigurationParameters] @go(CheckpointConfiguration,[]CheckpointConfigurationParameters)

	// Describes configuration parameters for CloudWatch logging for an application.
	// +kubebuilder:validation:Optional
	monitoringConfiguration?: [...#MonitoringConfigurationParameters] @go(MonitoringConfiguration,[]MonitoringConfigurationParameters)

	// Describes parameters for how an application executes multiple tasks simultaneously.
	// +kubebuilder:validation:Optional
	parallelismConfiguration?: [...#ParallelismConfigurationParameters] @go(ParallelismConfiguration,[]ParallelismConfigurationParameters)
}

#FlinkRunConfigurationObservation: {
	// When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. Default is false.
	allowNonRestoredState?: null | bool @go(AllowNonRestoredState,*bool)
}

#FlinkRunConfigurationParameters: {
	// When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. Default is false.
	// +kubebuilder:validation:Optional
	allowNonRestoredState?: null | bool @go(AllowNonRestoredState,*bool)
}

#InputLambdaProcessorObservation: {
	// The ARN of the Lambda function that operates on records in the stream.
	resourceArn?: null | string @go(ResourceArn,*string)
}

#InputLambdaProcessorParameters: {
	// The ARN of the Lambda function that operates on records in the stream.
	// +kubebuilder:validation:Required
	resourceArn?: null | string @go(ResourceArn,*string)
}

#InputObservation: {
	inAppStreamNames?: [...null | string] @go(InAppStreamNames,[]*string)

	// The application identifier.
	inputId?: null | string @go(InputID,*string)

	// Describes the number of in-application streams to create.
	inputParallelism?: [...#InputParallelismObservation] @go(InputParallelism,[]InputParallelismObservation)

	// The input processing configuration for the input.
	// An input processor transforms records as they are received from the stream, before the application's SQL code executes.
	inputProcessingConfiguration?: [...#InputProcessingConfigurationObservation] @go(InputProcessingConfiguration,[]InputProcessingConfigurationObservation)

	// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
	inputSchema?: [...#InputSchemaObservation] @go(InputSchema,[]InputSchemaObservation)

	// The point at which the application starts processing records from the streaming source.
	inputStartingPositionConfiguration?: [...#InputStartingPositionConfigurationObservation] @go(InputStartingPositionConfiguration,[]InputStartingPositionConfigurationObservation)

	// If the streaming source is a Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
	kinesisFirehoseInput?: [...#KinesisFirehoseInputObservation] @go(KinesisFirehoseInput,[]KinesisFirehoseInputObservation)

	// If the streaming source is a Kinesis data stream, identifies the stream's Amazon Resource Name (ARN).
	kinesisStreamsInput?: [...#KinesisStreamsInputObservation] @go(KinesisStreamsInput,[]KinesisStreamsInputObservation)

	// The name prefix to use when creating an in-application stream.
	namePrefix?: null | string @go(NamePrefix,*string)
}

#InputParallelismObservation: {
	// The number of in-application streams to create.
	count?: null | float64 @go(Count,*float64)
}

#InputParallelismParameters: {
	// The number of in-application streams to create.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)
}

#InputParameters: {
	// Describes the number of in-application streams to create.
	// +kubebuilder:validation:Optional
	inputParallelism?: [...#InputParallelismParameters] @go(InputParallelism,[]InputParallelismParameters)

	// The input processing configuration for the input.
	// An input processor transforms records as they are received from the stream, before the application's SQL code executes.
	// +kubebuilder:validation:Optional
	inputProcessingConfiguration?: [...#InputProcessingConfigurationParameters] @go(InputProcessingConfiguration,[]InputProcessingConfigurationParameters)

	// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
	// +kubebuilder:validation:Required
	inputSchema: [...#InputSchemaParameters] @go(InputSchema,[]InputSchemaParameters)

	// The point at which the application starts processing records from the streaming source.
	// +kubebuilder:validation:Optional
	inputStartingPositionConfiguration?: [...#InputStartingPositionConfigurationParameters] @go(InputStartingPositionConfiguration,[]InputStartingPositionConfigurationParameters)

	// If the streaming source is a Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
	// +kubebuilder:validation:Optional
	kinesisFirehoseInput?: [...#KinesisFirehoseInputParameters] @go(KinesisFirehoseInput,[]KinesisFirehoseInputParameters)

	// If the streaming source is a Kinesis data stream, identifies the stream's Amazon Resource Name (ARN).
	// +kubebuilder:validation:Optional
	kinesisStreamsInput?: [...#KinesisStreamsInputParameters] @go(KinesisStreamsInput,[]KinesisStreamsInputParameters)

	// The name prefix to use when creating an in-application stream.
	// +kubebuilder:validation:Required
	namePrefix?: null | string @go(NamePrefix,*string)
}

#InputProcessingConfigurationObservation: {
	// Describes the Lambda function that is used to preprocess the records in the stream before being processed by your application code.
	inputLambdaProcessor?: [...#InputLambdaProcessorObservation] @go(InputLambdaProcessor,[]InputLambdaProcessorObservation)
}

#InputProcessingConfigurationParameters: {
	// Describes the Lambda function that is used to preprocess the records in the stream before being processed by your application code.
	// +kubebuilder:validation:Required
	inputLambdaProcessor: [...#InputLambdaProcessorParameters] @go(InputLambdaProcessor,[]InputLambdaProcessorParameters)
}

#InputSchemaObservation: {
	// Describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
	recordColumn?: [...#RecordColumnObservation] @go(RecordColumn,[]RecordColumnObservation)

	// Specifies the encoding of the records in the streaming source. For example, UTF-8.
	recordEncoding?: null | string @go(RecordEncoding,*string)

	// Specifies the format of the records on the streaming source.
	recordFormat?: [...#RecordFormatObservation] @go(RecordFormat,[]RecordFormatObservation)
}

#InputSchemaParameters: {
	// Describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
	// +kubebuilder:validation:Required
	recordColumn: [...#RecordColumnParameters] @go(RecordColumn,[]RecordColumnParameters)

	// Specifies the encoding of the records in the streaming source. For example, UTF-8.
	// +kubebuilder:validation:Optional
	recordEncoding?: null | string @go(RecordEncoding,*string)

	// Specifies the format of the records on the streaming source.
	// +kubebuilder:validation:Required
	recordFormat: [...#RecordFormatParameters] @go(RecordFormat,[]RecordFormatParameters)
}

#InputStartingPositionConfigurationObservation: {
	// The starting position on the stream. Valid values: LAST_STOPPED_POINT, NOW, TRIM_HORIZON.
	inputStartingPosition?: null | string @go(InputStartingPosition,*string)
}

#InputStartingPositionConfigurationParameters: {
	// The starting position on the stream. Valid values: LAST_STOPPED_POINT, NOW, TRIM_HORIZON.
	// +kubebuilder:validation:Optional
	inputStartingPosition?: null | string @go(InputStartingPosition,*string)
}

#JSONMappingParametersObservation: {
	// The path to the top-level parent that contains the records.
	recordRowPath?: null | string @go(RecordRowPath,*string)
}

#JSONMappingParametersParameters: {
	// The path to the top-level parent that contains the records.
	// +kubebuilder:validation:Required
	recordRowPath?: null | string @go(RecordRowPath,*string)
}

#KinesisFirehoseInputObservation: {
	// The ARN of the Lambda function that operates on records in the stream.
	resourceArn?: null | string @go(ResourceArn,*string)
}

#KinesisFirehoseInputParameters: {
	// The ARN of the Lambda function that operates on records in the stream.
	// +kubebuilder:validation:Required
	resourceArn?: null | string @go(ResourceArn,*string)
}

#KinesisFirehoseOutputObservation: {
	// The ARN of the Lambda function that operates on records in the stream.
	resourceArn?: null | string @go(ResourceArn,*string)
}

#KinesisFirehoseOutputParameters: {
	// The ARN of the Lambda function that operates on records in the stream.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/firehose/v1beta1.DeliveryStream
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",false)
	// +kubebuilder:validation:Optional
	resourceArn?: null | string @go(ResourceArn,*string)
}

#KinesisStreamsInputObservation: {
	// The ARN of the Lambda function that operates on records in the stream.
	resourceArn?: null | string @go(ResourceArn,*string)
}

#KinesisStreamsInputParameters: {
	// The ARN of the Lambda function that operates on records in the stream.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kinesis/v1beta1.Stream
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.TerraformID()
	// +kubebuilder:validation:Optional
	resourceArn?: null | string @go(ResourceArn,*string)
}

#KinesisStreamsOutputObservation: {
	// The ARN of the Lambda function that operates on records in the stream.
	resourceArn?: null | string @go(ResourceArn,*string)
}

#KinesisStreamsOutputParameters: {
	// The ARN of the Lambda function that operates on records in the stream.
	// +kubebuilder:validation:Required
	resourceArn?: null | string @go(ResourceArn,*string)
}

#LambdaOutputObservation: {
	// The ARN of the Lambda function that operates on records in the stream.
	resourceArn?: null | string @go(ResourceArn,*string)
}

#LambdaOutputParameters: {
	// The ARN of the Lambda function that operates on records in the stream.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta1.Function
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	resourceArn?: null | string @go(ResourceArn,*string)
}

#MappingParametersCsvMappingParametersObservation: {
	// The column delimiter. For example, in a CSV format, a comma (,) is the typical column delimiter.
	recordColumnDelimiter?: null | string @go(RecordColumnDelimiter,*string)

	// The row delimiter. For example, in a CSV format, \n is the typical row delimiter.
	recordRowDelimiter?: null | string @go(RecordRowDelimiter,*string)
}

#MappingParametersCsvMappingParametersParameters: {
	// The column delimiter. For example, in a CSV format, a comma (,) is the typical column delimiter.
	// +kubebuilder:validation:Required
	recordColumnDelimiter?: null | string @go(RecordColumnDelimiter,*string)

	// The row delimiter. For example, in a CSV format, \n is the typical row delimiter.
	// +kubebuilder:validation:Required
	recordRowDelimiter?: null | string @go(RecordRowDelimiter,*string)
}

#MappingParametersJSONMappingParametersObservation: {
	// The path to the top-level parent that contains the records.
	recordRowPath?: null | string @go(RecordRowPath,*string)
}

#MappingParametersJSONMappingParametersParameters: {
	// The path to the top-level parent that contains the records.
	// +kubebuilder:validation:Required
	recordRowPath?: null | string @go(RecordRowPath,*string)
}

#MappingParametersObservation: {
	// Provides additional mapping information when the record format uses delimiters (for example, CSV).
	csvMappingParameters?: [...#CsvMappingParametersObservation] @go(CsvMappingParameters,[]CsvMappingParametersObservation)

	// Provides additional mapping information when JSON is the record format on the streaming source.
	jsonMappingParameters?: [...#JSONMappingParametersObservation] @go(JSONMappingParameters,[]JSONMappingParametersObservation)
}

#MappingParametersParameters: {
	// Provides additional mapping information when the record format uses delimiters (for example, CSV).
	// +kubebuilder:validation:Optional
	csvMappingParameters?: [...#CsvMappingParametersParameters] @go(CsvMappingParameters,[]CsvMappingParametersParameters)

	// Provides additional mapping information when JSON is the record format on the streaming source.
	// +kubebuilder:validation:Optional
	jsonMappingParameters?: [...#JSONMappingParametersParameters] @go(JSONMappingParameters,[]JSONMappingParametersParameters)
}

#MonitoringConfigurationObservation: {
	// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. Valid values: CUSTOM, DEFAULT. Set this attribute to CUSTOM in order for any specified checkpointing_enabled, checkpoint_interval, or min_pause_between_checkpoints attribute values to be effective. If this attribute is set to DEFAULT, the application will always use the following values:
	configurationType?: null | string @go(ConfigurationType,*string)

	// Describes the verbosity of the CloudWatch Logs for an application. Valid values: DEBUG, ERROR, INFO, WARN.
	logLevel?: null | string @go(LogLevel,*string)

	// Describes the granularity of the CloudWatch Logs for an application. Valid values: APPLICATION, OPERATOR, PARALLELISM, TASK.
	metricsLevel?: null | string @go(MetricsLevel,*string)
}

#MonitoringConfigurationParameters: {
	// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. Valid values: CUSTOM, DEFAULT. Set this attribute to CUSTOM in order for any specified checkpointing_enabled, checkpoint_interval, or min_pause_between_checkpoints attribute values to be effective. If this attribute is set to DEFAULT, the application will always use the following values:
	// +kubebuilder:validation:Required
	configurationType?: null | string @go(ConfigurationType,*string)

	// Describes the verbosity of the CloudWatch Logs for an application. Valid values: DEBUG, ERROR, INFO, WARN.
	// +kubebuilder:validation:Optional
	logLevel?: null | string @go(LogLevel,*string)

	// Describes the granularity of the CloudWatch Logs for an application. Valid values: APPLICATION, OPERATOR, PARALLELISM, TASK.
	// +kubebuilder:validation:Optional
	metricsLevel?: null | string @go(MetricsLevel,*string)
}

#OutputObservation: {
	// Describes the data format when records are written to the destination.
	destinationSchema?: [...#DestinationSchemaObservation] @go(DestinationSchema,[]DestinationSchemaObservation)

	// Identifies a Kinesis Data Firehose delivery stream as the destination.
	kinesisFirehoseOutput?: [...#KinesisFirehoseOutputObservation] @go(KinesisFirehoseOutput,[]KinesisFirehoseOutputObservation)

	// Identifies a Kinesis data stream as the destination.
	kinesisStreamsOutput?: [...#KinesisStreamsOutputObservation] @go(KinesisStreamsOutput,[]KinesisStreamsOutputObservation)

	// Identifies a Lambda function as the destination.
	lambdaOutput?: [...#LambdaOutputObservation] @go(LambdaOutput,[]LambdaOutputObservation)

	// The name of the application.
	name?: null | string @go(Name,*string)

	// The application identifier.
	outputId?: null | string @go(OutputID,*string)
}

#OutputParameters: {
	// Describes the data format when records are written to the destination.
	// +kubebuilder:validation:Required
	destinationSchema: [...#DestinationSchemaParameters] @go(DestinationSchema,[]DestinationSchemaParameters)

	// Identifies a Kinesis Data Firehose delivery stream as the destination.
	// +kubebuilder:validation:Optional
	kinesisFirehoseOutput?: [...#KinesisFirehoseOutputParameters] @go(KinesisFirehoseOutput,[]KinesisFirehoseOutputParameters)

	// Identifies a Kinesis data stream as the destination.
	// +kubebuilder:validation:Optional
	kinesisStreamsOutput?: [...#KinesisStreamsOutputParameters] @go(KinesisStreamsOutput,[]KinesisStreamsOutputParameters)

	// Identifies a Lambda function as the destination.
	// +kubebuilder:validation:Optional
	lambdaOutput?: [...#LambdaOutputParameters] @go(LambdaOutput,[]LambdaOutputParameters)

	// The name of the application.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)
}

#ParallelismConfigurationObservation: {
	// Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
	autoScalingEnabled?: null | bool @go(AutoScalingEnabled,*bool)

	// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. Valid values: CUSTOM, DEFAULT. Set this attribute to CUSTOM in order for any specified checkpointing_enabled, checkpoint_interval, or min_pause_between_checkpoints attribute values to be effective. If this attribute is set to DEFAULT, the application will always use the following values:
	configurationType?: null | string @go(ConfigurationType,*string)

	// Describes the initial number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform.
	parallelism?: null | float64 @go(Parallelism,*float64)

	// Describes the number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application.
	parallelismPerKpu?: null | float64 @go(ParallelismPerKpu,*float64)
}

#ParallelismConfigurationParameters: {
	// Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
	// +kubebuilder:validation:Optional
	autoScalingEnabled?: null | bool @go(AutoScalingEnabled,*bool)

	// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. Valid values: CUSTOM, DEFAULT. Set this attribute to CUSTOM in order for any specified checkpointing_enabled, checkpoint_interval, or min_pause_between_checkpoints attribute values to be effective. If this attribute is set to DEFAULT, the application will always use the following values:
	// +kubebuilder:validation:Required
	configurationType?: null | string @go(ConfigurationType,*string)

	// Describes the initial number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform.
	// +kubebuilder:validation:Optional
	parallelism?: null | float64 @go(Parallelism,*float64)

	// Describes the number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application.
	// +kubebuilder:validation:Optional
	parallelismPerKpu?: null | float64 @go(ParallelismPerKpu,*float64)
}

#PropertyGroupObservation: {
	// The key of the application execution property key-value map.
	propertyGroupId?: null | string @go(PropertyGroupID,*string)

	// Application execution property key-value map.
	propertyMap?: {[string]: null | string} @go(PropertyMap,map[string]*string)
}

#PropertyGroupParameters: {
	// The key of the application execution property key-value map.
	// +kubebuilder:validation:Required
	propertyGroupId?: null | string @go(PropertyGroupID,*string)

	// Application execution property key-value map.
	// +kubebuilder:validation:Required
	propertyMap: {[string]: null | string} @go(PropertyMap,map[string]*string)
}

#RecordColumnObservation: {
	// A reference to the data element in the streaming input or the reference data source.
	mapping?: null | string @go(Mapping,*string)

	// The name of the application.
	name?: null | string @go(Name,*string)

	// The type of column created in the in-application input stream or reference table.
	sqlType?: null | string @go(SQLType,*string)
}

#RecordColumnParameters: {
	// A reference to the data element in the streaming input or the reference data source.
	// +kubebuilder:validation:Optional
	mapping?: null | string @go(Mapping,*string)

	// The name of the application.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The type of column created in the in-application input stream or reference table.
	// +kubebuilder:validation:Required
	sqlType?: null | string @go(SQLType,*string)
}

#RecordFormatMappingParametersObservation: {
	// Provides additional mapping information when the record format uses delimiters (for example, CSV).
	csvMappingParameters?: [...#MappingParametersCsvMappingParametersObservation] @go(CsvMappingParameters,[]MappingParametersCsvMappingParametersObservation)

	// Provides additional mapping information when JSON is the record format on the streaming source.
	jsonMappingParameters?: [...#MappingParametersJSONMappingParametersObservation] @go(JSONMappingParameters,[]MappingParametersJSONMappingParametersObservation)
}

#RecordFormatMappingParametersParameters: {
	// Provides additional mapping information when the record format uses delimiters (for example, CSV).
	// +kubebuilder:validation:Optional
	csvMappingParameters?: [...#MappingParametersCsvMappingParametersParameters] @go(CsvMappingParameters,[]MappingParametersCsvMappingParametersParameters)

	// Provides additional mapping information when JSON is the record format on the streaming source.
	// +kubebuilder:validation:Optional
	jsonMappingParameters?: [...#MappingParametersJSONMappingParametersParameters] @go(JSONMappingParameters,[]MappingParametersJSONMappingParametersParameters)
}

#RecordFormatObservation: {
	// Provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
	mappingParameters?: [...#MappingParametersObservation] @go(MappingParameters,[]MappingParametersObservation)

	// The type of record format. Valid values: CSV, JSON.
	recordFormatType?: null | string @go(RecordFormatType,*string)
}

#RecordFormatParameters: {
	// Provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
	// +kubebuilder:validation:Required
	mappingParameters: [...#MappingParametersParameters] @go(MappingParameters,[]MappingParametersParameters)

	// The type of record format. Valid values: CSV, JSON.
	// +kubebuilder:validation:Required
	recordFormatType?: null | string @go(RecordFormatType,*string)
}

#ReferenceDataSourceObservation: {
	// The application identifier.
	referenceId?: null | string @go(ReferenceID,*string)

	// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
	referenceSchema?: [...#ReferenceSchemaObservation] @go(ReferenceSchema,[]ReferenceSchemaObservation)

	// Identifies the S3 bucket and object that contains the reference data.
	s3ReferenceDataSource?: [...#S3ReferenceDataSourceObservation] @go(S3ReferenceDataSource,[]S3ReferenceDataSourceObservation)

	// The name of the in-application table to create.
	tableName?: null | string @go(TableName,*string)
}

#ReferenceDataSourceParameters: {
	// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
	// +kubebuilder:validation:Required
	referenceSchema: [...#ReferenceSchemaParameters] @go(ReferenceSchema,[]ReferenceSchemaParameters)

	// Identifies the S3 bucket and object that contains the reference data.
	// +kubebuilder:validation:Required
	s3ReferenceDataSource: [...#S3ReferenceDataSourceParameters] @go(S3ReferenceDataSource,[]S3ReferenceDataSourceParameters)

	// The name of the in-application table to create.
	// +kubebuilder:validation:Required
	tableName?: null | string @go(TableName,*string)
}

#ReferenceSchemaObservation: {
	// Describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
	recordColumn?: [...#ReferenceSchemaRecordColumnObservation] @go(RecordColumn,[]ReferenceSchemaRecordColumnObservation)

	// Specifies the encoding of the records in the streaming source. For example, UTF-8.
	recordEncoding?: null | string @go(RecordEncoding,*string)

	// Specifies the format of the records on the streaming source.
	recordFormat?: [...#ReferenceSchemaRecordFormatObservation] @go(RecordFormat,[]ReferenceSchemaRecordFormatObservation)
}

#ReferenceSchemaParameters: {
	// Describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
	// +kubebuilder:validation:Required
	recordColumn: [...#ReferenceSchemaRecordColumnParameters] @go(RecordColumn,[]ReferenceSchemaRecordColumnParameters)

	// Specifies the encoding of the records in the streaming source. For example, UTF-8.
	// +kubebuilder:validation:Optional
	recordEncoding?: null | string @go(RecordEncoding,*string)

	// Specifies the format of the records on the streaming source.
	// +kubebuilder:validation:Required
	recordFormat: [...#ReferenceSchemaRecordFormatParameters] @go(RecordFormat,[]ReferenceSchemaRecordFormatParameters)
}

#ReferenceSchemaRecordColumnObservation: {
	// A reference to the data element in the streaming input or the reference data source.
	mapping?: null | string @go(Mapping,*string)

	// The name of the application.
	name?: null | string @go(Name,*string)

	// The type of column created in the in-application input stream or reference table.
	sqlType?: null | string @go(SQLType,*string)
}

#ReferenceSchemaRecordColumnParameters: {
	// A reference to the data element in the streaming input or the reference data source.
	// +kubebuilder:validation:Optional
	mapping?: null | string @go(Mapping,*string)

	// The name of the application.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The type of column created in the in-application input stream or reference table.
	// +kubebuilder:validation:Required
	sqlType?: null | string @go(SQLType,*string)
}

#ReferenceSchemaRecordFormatObservation: {
	// Provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
	mappingParameters?: [...#RecordFormatMappingParametersObservation] @go(MappingParameters,[]RecordFormatMappingParametersObservation)

	// The type of record format. Valid values: CSV, JSON.
	recordFormatType?: null | string @go(RecordFormatType,*string)
}

#ReferenceSchemaRecordFormatParameters: {
	// Provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
	// +kubebuilder:validation:Required
	mappingParameters: [...#RecordFormatMappingParametersParameters] @go(MappingParameters,[]RecordFormatMappingParametersParameters)

	// The type of record format. Valid values: CSV, JSON.
	// +kubebuilder:validation:Required
	recordFormatType?: null | string @go(RecordFormatType,*string)
}

#RunConfigurationObservation: {
	// The restore behavior of a restarting application.
	applicationRestoreConfiguration?: [...#ApplicationRestoreConfigurationObservation] @go(ApplicationRestoreConfiguration,[]ApplicationRestoreConfigurationObservation)

	// The starting parameters for a Flink-based Kinesis Data Analytics application.
	flinkRunConfiguration?: [...#FlinkRunConfigurationObservation] @go(FlinkRunConfiguration,[]FlinkRunConfigurationObservation)
}

#RunConfigurationParameters: {
	// The restore behavior of a restarting application.
	// +kubebuilder:validation:Optional
	applicationRestoreConfiguration?: [...#ApplicationRestoreConfigurationParameters] @go(ApplicationRestoreConfiguration,[]ApplicationRestoreConfigurationParameters)

	// The starting parameters for a Flink-based Kinesis Data Analytics application.
	// +kubebuilder:validation:Optional
	flinkRunConfiguration?: [...#FlinkRunConfigurationParameters] @go(FlinkRunConfiguration,[]FlinkRunConfigurationParameters)
}

#S3ContentLocationObservation: {
	// The ARN for the S3 bucket containing the application code.
	bucketArn?: null | string @go(BucketArn,*string)

	// The file key for the object containing the application code.
	fileKey?: null | string @go(FileKey,*string)

	// The version of the object containing the application code.
	objectVersion?: null | string @go(ObjectVersion,*string)
}

#S3ContentLocationParameters: {
	// The ARN for the S3 bucket containing the application code.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	bucketArn?: null | string @go(BucketArn,*string)

	// The file key for the object containing the application code.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Object
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("key",false)
	// +kubebuilder:validation:Optional
	fileKey?: null | string @go(FileKey,*string)

	// The version of the object containing the application code.
	// +kubebuilder:validation:Optional
	objectVersion?: null | string @go(ObjectVersion,*string)
}

#S3ReferenceDataSourceObservation: {
	// The ARN for the S3 bucket containing the application code.
	bucketArn?: null | string @go(BucketArn,*string)

	// The file key for the object containing the application code.
	fileKey?: null | string @go(FileKey,*string)
}

#S3ReferenceDataSourceParameters: {
	// The ARN for the S3 bucket containing the application code.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	bucketArn?: null | string @go(BucketArn,*string)

	// The file key for the object containing the application code.
	// +kubebuilder:validation:Required
	fileKey?: null | string @go(FileKey,*string)
}

#SQLApplicationConfigurationObservation: {
	// The input stream used by the application.
	input?: [...#InputObservation] @go(Input,[]InputObservation)

	// The destination streams used by the application.
	output?: [...#OutputObservation] @go(Output,[]OutputObservation)

	// The reference data source used by the application.
	referenceDataSource?: [...#ReferenceDataSourceObservation] @go(ReferenceDataSource,[]ReferenceDataSourceObservation)
}

#SQLApplicationConfigurationParameters: {
	// The input stream used by the application.
	// +kubebuilder:validation:Optional
	input?: [...#InputParameters] @go(Input,[]InputParameters)

	// The destination streams used by the application.
	// +kubebuilder:validation:Optional
	output?: [...#OutputParameters] @go(Output,[]OutputParameters)

	// The reference data source used by the application.
	// +kubebuilder:validation:Optional
	referenceDataSource?: [...#ReferenceDataSourceParameters] @go(ReferenceDataSource,[]ReferenceDataSourceParameters)
}

#VPCConfigurationObservation: {
	// The Security Group IDs used by the VPC configuration.
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// The Subnet IDs used by the VPC configuration.
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// The application identifier.
	vpcConfigurationId?: null | string @go(VPCConfigurationID,*string)

	// The application identifier.
	vpcId?: null | string @go(VPCID,*string)
}

#VPCConfigurationParameters: {
	// The Security Group IDs used by the VPC configuration.
	// +kubebuilder:validation:Required
	securityGroupIds: [...null | string] @go(SecurityGroupIds,[]*string)

	// The Subnet IDs used by the VPC configuration.
	// +kubebuilder:validation:Required
	subnetIds: [...null | string] @go(SubnetIds,[]*string)
}

// ApplicationSpec defines the desired state of Application
#ApplicationSpec: {
	forProvider: #ApplicationParameters @go(ForProvider)
}

// ApplicationStatus defines the observed state of Application.
#ApplicationStatus: {
	atProvider?: #ApplicationObservation @go(AtProvider)
}

// Application is the Schema for the Applications API. Manages a Kinesis Analytics v2 Application.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Application: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.runtimeEnvironment)",message="runtimeEnvironment is a required parameter"
	spec:    #ApplicationSpec   @go(Spec)
	status?: #ApplicationStatus @go(Status)
}

// ApplicationList contains a list of Applications
#ApplicationList: {
	items: [...#Application] @go(Items,[]Application)
}
