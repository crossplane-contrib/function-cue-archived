// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/glacier/v1beta1

package v1beta1

#NotificationObservation: {
}

#NotificationParameters: {
	// You can configure a vault to publish a notification for ArchiveRetrievalCompleted and InventoryRetrievalCompleted events.
	// +kubebuilder:validation:Required
	events: [...null | string] @go(Events,[]*string)

	// The SNS Topic ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	snsTopic?: null | string @go(SnsTopic,*string)
}

#VaultObservation: {
	// The ARN of the vault.
	arn?: null | string @go(Arn,*string)
	id?:  null | string @go(ID,*string)

	// The URI of the vault that was created.
	location?: null | string @go(Location,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#VaultParameters: {
	// The policy document. This is a JSON formatted string.
	// The heredoc syntax or file function is helpful here. Use the Glacier Developer Guide for more information on Glacier Vault Policy
	// +kubebuilder:validation:Optional
	accessPolicy?: null | string @go(AccessPolicy,*string)

	// The notifications for the Vault. Fields documented below.
	// +kubebuilder:validation:Optional
	notification?: [...#NotificationParameters] @go(Notification,[]NotificationParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// VaultSpec defines the desired state of Vault
#VaultSpec: {
	forProvider: #VaultParameters @go(ForProvider)
}

// VaultStatus defines the observed state of Vault.
#VaultStatus: {
	atProvider?: #VaultObservation @go(AtProvider)
}

// Vault is the Schema for the Vaults API. Provides a Glacier Vault.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Vault: {
	spec:    #VaultSpec   @go(Spec)
	status?: #VaultStatus @go(Status)
}

// VaultList contains a list of Vaults
#VaultList: {
	items: [...#Vault] @go(Items,[]Vault)
}
