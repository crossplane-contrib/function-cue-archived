// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/sfn/v1beta1

package v1beta1

#ActivityObservation: {
	// The date the activity was created.
	creationDate?: null | string @go(CreationDate,*string)

	// The Amazon Resource Name (ARN) that identifies the created activity.
	id?: null | string @go(ID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ActivityParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// ActivitySpec defines the desired state of Activity
#ActivitySpec: {
	forProvider: #ActivityParameters @go(ForProvider)
}

// ActivityStatus defines the observed state of Activity.
#ActivityStatus: {
	atProvider?: #ActivityObservation @go(AtProvider)
}

// Activity is the Schema for the Activitys API. Provides a Step Function Activity resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Activity: {
	spec:    #ActivitySpec   @go(Spec)
	status?: #ActivityStatus @go(Status)
}

// ActivityList contains a list of Activitys
#ActivityList: {
	items: [...#Activity] @go(Items,[]Activity)
}
