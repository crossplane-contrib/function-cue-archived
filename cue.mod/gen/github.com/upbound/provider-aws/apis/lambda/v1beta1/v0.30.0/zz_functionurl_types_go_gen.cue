// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lambda/v1beta1

package v1beta1

#CorsObservation: {
}

#CorsParameters: {
	// Whether to allow cookies or other credentials in requests to the function URL. The default is false.
	// +kubebuilder:validation:Optional
	allowCredentials?: null | bool @go(AllowCredentials,*bool)

	// The HTTP headers that origins can include in requests to the function URL. For example: ["date", "keep-alive", "x-custom-header"].
	// +kubebuilder:validation:Optional
	allowHeaders?: [...null | string] @go(AllowHeaders,[]*string)

	// The HTTP methods that are allowed when calling the function URL. For example: ["GET", "POST", "DELETE"], or the wildcard character (["*"]).
	// +kubebuilder:validation:Optional
	allowMethods?: [...null | string] @go(AllowMethods,[]*string)

	// The origins that can access the function URL. You can list any number of specific origins (or the wildcard character ("*")), separated by a comma. For example: ["https://www.example.com", "http://localhost:60905"].
	// +kubebuilder:validation:Optional
	allowOrigins?: [...null | string] @go(AllowOrigins,[]*string)

	// The HTTP headers in your function response that you want to expose to origins that call the function URL.
	// +kubebuilder:validation:Optional
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// The maximum amount of time, in seconds, that web browsers can cache results of a preflight request. By default, this is set to 0, which means that the browser doesn't cache results. The maximum value is 86400.
	// +kubebuilder:validation:Optional
	maxAge?: null | float64 @go(MaxAge,*float64)
}

#FunctionURLObservation: {
	// The Amazon Resource Name (ARN) of the function.
	functionArn?: null | string @go(FunctionArn,*string)

	// The HTTP URL endpoint for the function in the format https://<url_id>.lambda-url.<region>.on.aws.
	functionUrl?: null | string @go(FunctionURL,*string)
	id?:          null | string @go(ID,*string)

	// A generated ID for the endpoint.
	urlId?: null | string @go(URLID,*string)
}

#FunctionURLParameters: {
	// The type of authentication that the function URL uses. Set to "AWS_IAM" to restrict access to authenticated IAM users only. Set to "NONE" to bypass IAM authentication and create a public endpoint. See the AWS documentation for more details.
	// +kubebuilder:validation:Required
	authorizationType?: null | string @go(AuthorizationType,*string)

	// The cross-origin resource sharing (CORS) settings for the function URL. Documented below.
	// +kubebuilder:validation:Optional
	cors?: [...#CorsParameters] @go(Cors,[]CorsParameters)

	// The name (or ARN) of the Lambda function.
	// +crossplane:generate:reference:type=Function
	// +kubebuilder:validation:Optional
	functionName?: null | string @go(FunctionName,*string)

	// The alias name or "$LATEST".
	// +kubebuilder:validation:Optional
	qualifier?: null | string @go(Qualifier,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// FunctionURLSpec defines the desired state of FunctionURL
#FunctionURLSpec: {
	forProvider: #FunctionURLParameters @go(ForProvider)
}

// FunctionURLStatus defines the observed state of FunctionURL.
#FunctionURLStatus: {
	atProvider?: #FunctionURLObservation @go(AtProvider)
}

// FunctionURL is the Schema for the FunctionURLs API. Provides a Lambda function URL resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#FunctionURL: {
	spec:    #FunctionURLSpec   @go(Spec)
	status?: #FunctionURLStatus @go(Status)
}

// FunctionURLList contains a list of FunctionURLs
#FunctionURLList: {
	items: [...#FunctionURL] @go(Items,[]FunctionURL)
}
