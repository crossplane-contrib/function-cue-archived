// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lambda/v1beta1

package v1beta1

#DeadLetterConfigObservation: {
	// ARN of an SNS topic or SQS queue to notify when an invocation fails. If this option is used, the function's IAM role must be granted suitable access to write to the target object, which means allowing either the sns:Publish or sqs:SendMessage action on this ARN, depending on which service is targeted.
	targetArn?: null | string @go(TargetArn,*string)
}

#DeadLetterConfigParameters: {
	// ARN of an SNS topic or SQS queue to notify when an invocation fails. If this option is used, the function's IAM role must be granted suitable access to write to the target object, which means allowing either the sns:Publish or sqs:SendMessage action on this ARN, depending on which service is targeted.
	// +kubebuilder:validation:Required
	targetArn?: null | string @go(TargetArn,*string)
}

#EnvironmentObservation: {
	// Map of environment variables that are accessible from the function code during execution. If provided at least one key must be present.
	variables?: {[string]: null | string} @go(Variables,map[string]*string)
}

#EnvironmentParameters: {
	// Map of environment variables that are accessible from the function code during execution. If provided at least one key must be present.
	// +kubebuilder:validation:Optional
	variables?: {[string]: null | string} @go(Variables,map[string]*string)
}

#EphemeralStorageObservation: {
	// The size of the Lambda function Ephemeral storage(/tmp) represented in MB. The minimum supported ephemeral_storage value defaults to 512MB and the maximum supported value is 10240MB.
	size?: null | float64 @go(Size,*float64)
}

#EphemeralStorageParameters: {
	// The size of the Lambda function Ephemeral storage(/tmp) represented in MB. The minimum supported ephemeral_storage value defaults to 512MB and the maximum supported value is 10240MB.
	// +kubebuilder:validation:Optional
	size?: null | float64 @go(Size,*float64)
}

#FileSystemConfigObservation: {
	// Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
	arn?: null | string @go(Arn,*string)

	// Path where the function can access the file system, starting with /mnt/.
	localMountPath?: null | string @go(LocalMountPath,*string)
}

#FileSystemConfigParameters: {
	// Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/efs/v1beta1.AccessPoint
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	arn?: null | string @go(Arn,*string)

	// Path where the function can access the file system, starting with /mnt/.
	// +kubebuilder:validation:Required
	localMountPath?: null | string @go(LocalMountPath,*string)
}

#FunctionObservation: {
	// Instruction set architecture for your Lambda function. Valid values are ["x86_64"] and ["arm64"]. Default is ["x86_64"]. Removing this attribute, function's architecture stay the same.
	architectures?: [...null | string] @go(Architectures,[]*string)

	// Amazon Resource Name (ARN) identifying your Lambda Function.
	arn?: null | string @go(Arn,*string)

	// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
	codeSigningConfigArn?: null | string @go(CodeSigningConfigArn,*string)

	// Configuration block. Detailed below.
	deadLetterConfig?: [...#DeadLetterConfigObservation] @go(DeadLetterConfig,[]DeadLetterConfigObservation)

	// Description of what your Lambda Function does.
	description?: null | string @go(Description,*string)

	// Configuration block. Detailed below.
	environment?: [...#EnvironmentObservation] @go(Environment,[]EnvironmentObservation)

	// The amount of Ephemeral storage(/tmp) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of 512MB. Detailed below.
	ephemeralStorage?: [...#EphemeralStorageObservation] @go(EphemeralStorage,[]EphemeralStorageObservation)

	// Configuration block. Detailed below.
	fileSystemConfig?: [...#FileSystemConfigObservation] @go(FileSystemConfig,[]FileSystemConfigObservation)

	// Function entrypoint in your code.
	handler?: null | string @go(Handler,*string)
	id?:      null | string @go(ID,*string)

	// Configuration block. Detailed below.
	imageConfig?: [...#ImageConfigObservation] @go(ImageConfig,[]ImageConfigObservation)

	// ECR image URI containing the function's deployment package. Exactly one of filename, image_uri,  or s3_bucket must be specified.
	imageUri?: null | string @go(ImageURI,*string)

	// ARN to be used for invoking Lambda Function from API Gateway - to be used in aws_api_gateway_integration's uri.
	invokeArn?: null | string @go(InvokeArn,*string)

	// Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. To fix the perpetual difference, remove this configuration.
	kmsKeyArn?: null | string @go(KMSKeyArn,*string)

	// Date this resource was last modified.
	lastModified?: null | string @go(LastModified,*string)

	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See Lambda Layers
	layers?: [...null | string] @go(Layers,[]*string)

	// Amount of memory in MB your Lambda Function can use at runtime. Defaults to 128. See Limits
	memorySize?: null | float64 @go(MemorySize,*float64)

	// Lambda deployment package type. Valid values are Zip and Image. Defaults to Zip.
	packageType?: null | string @go(PackageType,*string)

	// Whether to publish creation/change as new Lambda Function Version. Defaults to false.
	publish?: null | bool @go(Publish,*bool)

	// ARN identifying your Lambda Function Version (if versioning is enabled via publish = true).
	qualifiedArn?: null | string @go(QualifiedArn,*string)

	// Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in aws_api_gateway_integration's uri.
	qualifiedInvokeArn?: null | string @go(QualifiedInvokeArn,*string)

	// Whether to replace the security groups on associated lambda network interfaces upon destruction. Removing these security groups from orphaned network interfaces can speed up security group deletion times by avoiding a dependency on AWS's internal cleanup operations. By default, the ENI security groups will be replaced with the default security group in the function's VPC. Set the replacement_security_group_ids attribute to use a custom list of security groups for replacement.
	replaceSecurityGroupsOnDestroy?: null | bool @go(ReplaceSecurityGroupsOnDestroy,*bool)

	// List of security group IDs to assign to orphaned Lambda function network interfaces upon destruction. replace_security_groups_on_destroy must be set to true to use this attribute.
	replacementSecurityGroupIds?: [...null | string] @go(ReplacementSecurityGroupIds,[]*string)

	// Amount of reserved concurrent executions for this lambda function. A value of 0 disables lambda from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1. See Managing Concurrency
	reservedConcurrentExecutions?: null | float64 @go(ReservedConcurrentExecutions,*float64)

	// Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	role?: null | string @go(Role,*string)

	// Identifier of the function's runtime. See Runtimes for valid values.
	runtime?: null | string @go(Runtime,*string)

	// S3 bucket location containing the function's deployment package. This bucket must reside in the same AWS region where you are creating the Lambda function. Exactly one of filename, image_uri, or s3_bucket must be specified. When s3_bucket is set, s3_key is required.
	s3Bucket?: null | string @go(S3Bucket,*string)

	// S3 key of an object containing the function's deployment package. When s3_bucket is set, s3_key is required.
	s3Key?: null | string @go(S3Key,*string)

	// Object version containing the function's deployment package. Conflicts with filename and image_uri.
	s3ObjectVersion?: null | string @go(S3ObjectVersion,*string)

	// ARN of the signing job.
	signingJobArn?: null | string @go(SigningJobArn,*string)

	// ARN of the signing profile version.
	signingProfileVersionArn?: null | string @go(SigningProfileVersionArn,*string)

	// Snap start settings block. Detailed below.
	snapStart?: [...#SnapStartObservation] @go(SnapStart,[]SnapStartObservation)

	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either filename or s3_key. The usual way to set this is filebase64sha256("file.11.12 and later) or base64sha256(file("file.11.11 and earlier), where "file.zip" is the local filename of the lambda function source archive.
	sourceCodeHash?: null | string @go(SourceCodeHash,*string)

	// Size in bytes of the function .zip file.
	sourceCodeSize?: null | float64 @go(SourceCodeSize,*float64)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Amount of time your Lambda Function has to run in seconds. Defaults to 3. See Limits.
	timeout?: null | float64 @go(Timeout,*float64)

	// Configuration block. Detailed below.
	tracingConfig?: [...#TracingConfigObservation] @go(TracingConfig,[]TracingConfigObservation)

	// Configuration block. Detailed below.
	vpcConfig?: [...#VPCConfigObservation] @go(VPCConfig,[]VPCConfigObservation)

	// Latest published version of your Lambda Function.
	version?: null | string @go(Version,*string)
}

#FunctionParameters: {
	// Instruction set architecture for your Lambda function. Valid values are ["x86_64"] and ["arm64"]. Default is ["x86_64"]. Removing this attribute, function's architecture stay the same.
	// +kubebuilder:validation:Optional
	architectures?: [...null | string] @go(Architectures,[]*string)

	// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
	// +kubebuilder:validation:Optional
	codeSigningConfigArn?: null | string @go(CodeSigningConfigArn,*string)

	// Configuration block. Detailed below.
	// +kubebuilder:validation:Optional
	deadLetterConfig?: [...#DeadLetterConfigParameters] @go(DeadLetterConfig,[]DeadLetterConfigParameters)

	// Description of what your Lambda Function does.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Configuration block. Detailed below.
	// +kubebuilder:validation:Optional
	environment?: [...#EnvironmentParameters] @go(Environment,[]EnvironmentParameters)

	// The amount of Ephemeral storage(/tmp) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of 512MB. Detailed below.
	// +kubebuilder:validation:Optional
	ephemeralStorage?: [...#EphemeralStorageParameters] @go(EphemeralStorage,[]EphemeralStorageParameters)

	// Configuration block. Detailed below.
	// +kubebuilder:validation:Optional
	fileSystemConfig?: [...#FileSystemConfigParameters] @go(FileSystemConfig,[]FileSystemConfigParameters)

	// Function entrypoint in your code.
	// +kubebuilder:validation:Optional
	handler?: null | string @go(Handler,*string)

	// Configuration block. Detailed below.
	// +kubebuilder:validation:Optional
	imageConfig?: [...#ImageConfigParameters] @go(ImageConfig,[]ImageConfigParameters)

	// ECR image URI containing the function's deployment package. Exactly one of filename, image_uri,  or s3_bucket must be specified.
	// +kubebuilder:validation:Optional
	imageUri?: null | string @go(ImageURI,*string)

	// Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. To fix the perpetual difference, remove this configuration.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	kmsKeyArn?: null | string @go(KMSKeyArn,*string)

	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See Lambda Layers
	// +kubebuilder:validation:Optional
	layers?: [...null | string] @go(Layers,[]*string)

	// Amount of memory in MB your Lambda Function can use at runtime. Defaults to 128. See Limits
	// +kubebuilder:validation:Optional
	memorySize?: null | float64 @go(MemorySize,*float64)

	// Lambda deployment package type. Valid values are Zip and Image. Defaults to Zip.
	// +kubebuilder:validation:Optional
	packageType?: null | string @go(PackageType,*string)

	// Whether to publish creation/change as new Lambda Function Version. Defaults to false.
	// +kubebuilder:validation:Optional
	publish?: null | bool @go(Publish,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Whether to replace the security groups on associated lambda network interfaces upon destruction. Removing these security groups from orphaned network interfaces can speed up security group deletion times by avoiding a dependency on AWS's internal cleanup operations. By default, the ENI security groups will be replaced with the default security group in the function's VPC. Set the replacement_security_group_ids attribute to use a custom list of security groups for replacement.
	// +kubebuilder:validation:Optional
	replaceSecurityGroupsOnDestroy?: null | bool @go(ReplaceSecurityGroupsOnDestroy,*bool)

	// List of security group IDs to assign to orphaned Lambda function network interfaces upon destruction. replace_security_groups_on_destroy must be set to true to use this attribute.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=ReplacementSecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=ReplacementSecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	replacementSecurityGroupIds?: [...null | string] @go(ReplacementSecurityGroupIds,[]*string)

	// Amount of reserved concurrent executions for this lambda function. A value of 0 disables lambda from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1. See Managing Concurrency
	// +kubebuilder:validation:Optional
	reservedConcurrentExecutions?: null | float64 @go(ReservedConcurrentExecutions,*float64)

	// Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	role?: null | string @go(Role,*string)

	// Identifier of the function's runtime. See Runtimes for valid values.
	// +kubebuilder:validation:Optional
	runtime?: null | string @go(Runtime,*string)

	// S3 bucket location containing the function's deployment package. This bucket must reside in the same AWS region where you are creating the Lambda function. Exactly one of filename, image_uri, or s3_bucket must be specified. When s3_bucket is set, s3_key is required.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	s3Bucket?: null | string @go(S3Bucket,*string)

	// S3 key of an object containing the function's deployment package. When s3_bucket is set, s3_key is required.
	// +kubebuilder:validation:Optional
	s3Key?: null | string @go(S3Key,*string)

	// Object version containing the function's deployment package. Conflicts with filename and image_uri.
	// +kubebuilder:validation:Optional
	s3ObjectVersion?: null | string @go(S3ObjectVersion,*string)

	// Snap start settings block. Detailed below.
	// +kubebuilder:validation:Optional
	snapStart?: [...#SnapStartParameters] @go(SnapStart,[]SnapStartParameters)

	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either filename or s3_key. The usual way to set this is filebase64sha256("file.11.12 and later) or base64sha256(file("file.11.11 and earlier), where "file.zip" is the local filename of the lambda function source archive.
	// +kubebuilder:validation:Optional
	sourceCodeHash?: null | string @go(SourceCodeHash,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Amount of time your Lambda Function has to run in seconds. Defaults to 3. See Limits.
	// +kubebuilder:validation:Optional
	timeout?: null | float64 @go(Timeout,*float64)

	// Configuration block. Detailed below.
	// +kubebuilder:validation:Optional
	tracingConfig?: [...#TracingConfigParameters] @go(TracingConfig,[]TracingConfigParameters)

	// Configuration block. Detailed below.
	// +kubebuilder:validation:Optional
	vpcConfig?: [...#VPCConfigParameters] @go(VPCConfig,[]VPCConfigParameters)
}

#ImageConfigObservation: {
	// Parameters that you want to pass in with entry_point.
	command?: [...null | string] @go(Command,[]*string)

	// Entry point to your application, which is typically the location of the runtime executable.
	entryPoint?: [...null | string] @go(EntryPoint,[]*string)

	// Working directory.
	workingDirectory?: null | string @go(WorkingDirectory,*string)
}

#ImageConfigParameters: {
	// Parameters that you want to pass in with entry_point.
	// +kubebuilder:validation:Optional
	command?: [...null | string] @go(Command,[]*string)

	// Entry point to your application, which is typically the location of the runtime executable.
	// +kubebuilder:validation:Optional
	entryPoint?: [...null | string] @go(EntryPoint,[]*string)

	// Working directory.
	// +kubebuilder:validation:Optional
	workingDirectory?: null | string @go(WorkingDirectory,*string)
}

#SnapStartObservation: {
	// Conditions where snap start is enabled. Valid values are PublishedVersions.
	applyOn?: null | string @go(ApplyOn,*string)

	// Optimization status of the snap start configuration. Valid values are On and Off.
	optimizationStatus?: null | string @go(OptimizationStatus,*string)
}

#SnapStartParameters: {
	// Conditions where snap start is enabled. Valid values are PublishedVersions.
	// +kubebuilder:validation:Required
	applyOn?: null | string @go(ApplyOn,*string)
}

#TracingConfigObservation: {
	// Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are PassThrough and Active. If PassThrough, Lambda will only trace the request from an upstream service if it contains a tracing header with "sampled=1". If Active, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.
	mode?: null | string @go(Mode,*string)
}

#TracingConfigParameters: {
	// Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are PassThrough and Active. If PassThrough, Lambda will only trace the request from an upstream service if it contains a tracing header with "sampled=1". If Active, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)
}

#VPCConfigObservation: {
	// List of security group IDs associated with the Lambda function.
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// List of subnet IDs associated with the Lambda function.
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// ID of the VPC.
	vpcId?: null | string @go(VPCID,*string)
}

#VPCConfigParameters: {
	// List of security group IDs associated with the Lambda function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=SecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// List of subnet IDs associated with the Lambda function.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:refFieldName=SubnetIDRefs
	// +crossplane:generate:reference:selectorFieldName=SubnetIDSelector
	// +kubebuilder:validation:Optional
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)
}

// FunctionSpec defines the desired state of Function
#FunctionSpec: {
	forProvider: #FunctionParameters @go(ForProvider)
}

// FunctionStatus defines the observed state of Function.
#FunctionStatus: {
	atProvider?: #FunctionObservation @go(AtProvider)
}

// Function is the Schema for the Functions API. Provides a Lambda Function resource. Lambda allows you to trigger execution of code in response to events in AWS, enabling serverless backend solutions. The Lambda Function itself includes source code and runtime configuration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Function: {
	spec:    #FunctionSpec   @go(Spec)
	status?: #FunctionStatus @go(Status)
}

// FunctionList contains a list of Functions
#FunctionList: {
	items: [...#Function] @go(Items,[]Function)
}
