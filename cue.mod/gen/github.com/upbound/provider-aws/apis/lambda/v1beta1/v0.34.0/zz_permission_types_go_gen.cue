// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lambda/v1beta1

package v1beta1

#PermissionObservation: {
	// The AWS Lambda action you want to allow in this statement. (e.g., lambda:InvokeFunction)
	action?: null | string @go(Action,*string)

	// The Event Source Token to validate.  Used with Alexa Skills.
	eventSourceToken?: null | string @go(EventSourceToken,*string)

	// Name of the Lambda function whose resource policy you are updating
	functionName?: null | string @go(FunctionName,*string)

	// Lambda Function URLs authentication type. Valid values are: AWS_IAM or NONE. Only supported for lambda:InvokeFunctionUrl action.
	functionUrlAuthType?: null | string @go(FunctionURLAuthType,*string)
	id?:                  null | string @go(ID,*string)

	// The principal who is getting this permission e.g., s3.amazonaws.com, an AWS account ID, or AWS IAM principal, or AWS service principal such as events.amazonaws.com or sns.amazonaws.com.
	principal?: null | string @go(Principal,*string)

	// The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
	principalOrgId?: null | string @go(PrincipalOrgID,*string)

	// Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., arn:aws:lambda:aws-region:acct-id:function:function-name:2
	qualifier?: null | string @go(Qualifier,*string)

	// This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
	sourceAccount?: null | string @go(SourceAccount,*string)

	// When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
	// Without this, any resource from principal will be granted permission – even if that resource is from another account.
	// For S3, this should be the ARN of the S3 Bucket.
	// For EventBridge events, this should be the ARN of the EventBridge Rule.
	// For API Gateway, this should be the ARN of the API, as described here.
	sourceArn?: null | string @go(SourceArn,*string)

	// A unique statement identifier.
	statementId?: null | string @go(StatementID,*string)

	// A statement identifier prefix. Conflicts with statement_id.
	statementIdPrefix?: null | string @go(StatementIDPrefix,*string)
}

#PermissionParameters: {
	// The AWS Lambda action you want to allow in this statement. (e.g., lambda:InvokeFunction)
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// The Event Source Token to validate.  Used with Alexa Skills.
	// +kubebuilder:validation:Optional
	eventSourceToken?: null | string @go(EventSourceToken,*string)

	// Name of the Lambda function whose resource policy you are updating
	// +crossplane:generate:reference:type=Function
	// +kubebuilder:validation:Optional
	functionName?: null | string @go(FunctionName,*string)

	// Lambda Function URLs authentication type. Valid values are: AWS_IAM or NONE. Only supported for lambda:InvokeFunctionUrl action.
	// +kubebuilder:validation:Optional
	functionUrlAuthType?: null | string @go(FunctionURLAuthType,*string)

	// The principal who is getting this permission e.g., s3.amazonaws.com, an AWS account ID, or AWS IAM principal, or AWS service principal such as events.amazonaws.com or sns.amazonaws.com.
	// +kubebuilder:validation:Optional
	principal?: null | string @go(Principal,*string)

	// The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
	// +kubebuilder:validation:Optional
	principalOrgId?: null | string @go(PrincipalOrgID,*string)

	// Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., arn:aws:lambda:aws-region:acct-id:function:function-name:2
	// +crossplane:generate:reference:type=Alias
	// +kubebuilder:validation:Optional
	qualifier?: null | string @go(Qualifier,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
	// +kubebuilder:validation:Optional
	sourceAccount?: null | string @go(SourceAccount,*string)

	// When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
	// Without this, any resource from principal will be granted permission – even if that resource is from another account.
	// For S3, this should be the ARN of the S3 Bucket.
	// For EventBridge events, this should be the ARN of the EventBridge Rule.
	// For API Gateway, this should be the ARN of the API, as described here.
	// +kubebuilder:validation:Optional
	sourceArn?: null | string @go(SourceArn,*string)

	// A unique statement identifier.
	// +kubebuilder:validation:Optional
	statementId?: null | string @go(StatementID,*string)

	// A statement identifier prefix. Conflicts with statement_id.
	// +kubebuilder:validation:Optional
	statementIdPrefix?: null | string @go(StatementIDPrefix,*string)
}

// PermissionSpec defines the desired state of Permission
#PermissionSpec: {
	forProvider: #PermissionParameters @go(ForProvider)
}

// PermissionStatus defines the observed state of Permission.
#PermissionStatus: {
	atProvider?: #PermissionObservation @go(AtProvider)
}

// Permission is the Schema for the Permissions API. Creates a Lambda function permission.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Permission: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.action)",message="action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.principal)",message="principal is a required parameter"
	spec:    #PermissionSpec   @go(Spec)
	status?: #PermissionStatus @go(Status)
}

// PermissionList contains a list of Permissions
#PermissionList: {
	items: [...#Permission] @go(Items,[]Permission)
}
