// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/elasticache/v1beta1

package v1beta1

#UserObservation: {
	id?: null | string @go(ID,*string)
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#UserParameters: {
	// Access permissions string used for this user. See Specifying Permissions Using an Access String for more details.
	// +kubebuilder:validation:Required
	accessString?: null | string @go(AccessString,*string)

	// The ARN of the created ElastiCache User.
	// +kubebuilder:validation:Optional
	arn?: null | string @go(Arn,*string)

	// The current supported value is REDIS.
	// +kubebuilder:validation:Required
	engine?: null | string @go(Engine,*string)

	// Indicates a password is not required for this user.
	// +kubebuilder:validation:Optional
	noPasswordRequired?: null | bool @go(NoPasswordRequired,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// The username of the user.
	// +kubebuilder:validation:Required
	userName?: null | string @go(UserName,*string)
}

// UserSpec defines the desired state of User
#UserSpec: {
	forProvider: #UserParameters @go(ForProvider)
}

// UserStatus defines the observed state of User.
#UserStatus: {
	atProvider?: #UserObservation @go(AtProvider)
}

// User is the Schema for the Users API. Provides an ElastiCache user.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#User: {
	spec:    #UserSpec   @go(Spec)
	status?: #UserStatus @go(Status)
}

// UserList contains a list of Users
#UserList: {
	items: [...#User] @go(Items,[]User)
}
