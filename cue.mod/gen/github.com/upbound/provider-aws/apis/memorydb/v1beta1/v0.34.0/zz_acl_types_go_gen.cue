// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/memorydb/v1beta1

package v1beta1

#ACLObservation: {
	// The ARN of the ACL.
	arn?: null | string @go(Arn,*string)

	// Same as name.
	id?: null | string @go(ID,*string)

	// The minimum engine version supported by the ACL.
	minimumEngineVersion?: null | string @go(MinimumEngineVersion,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Set of MemoryDB user names to be included in this ACL.
	userNames?: [...null | string] @go(UserNames,[]*string)
}

#ACLParameters: {
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Set of MemoryDB user names to be included in this ACL.
	// +kubebuilder:validation:Optional
	userNames?: [...null | string] @go(UserNames,[]*string)
}

// ACLSpec defines the desired state of ACL
#ACLSpec: {
	forProvider: #ACLParameters @go(ForProvider)
}

// ACLStatus defines the observed state of ACL.
#ACLStatus: {
	atProvider?: #ACLObservation @go(AtProvider)
}

// ACL is the Schema for the ACLs API. Provides a MemoryDB ACL.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ACL: {
	spec:    #ACLSpec   @go(Spec)
	status?: #ACLStatus @go(Status)
}

// ACLList contains a list of ACLs
#ACLList: {
	items: [...#ACL] @go(Items,[]ACL)
}
