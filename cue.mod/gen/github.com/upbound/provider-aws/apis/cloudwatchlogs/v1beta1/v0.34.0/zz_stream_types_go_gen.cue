// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1

package v1beta1

#StreamObservation: {
	// The Amazon Resource Name (ARN) specifying the log stream.
	arn?: null | string @go(Arn,*string)
	id?:  null | string @go(ID,*string)

	// The name of the log group under which the log stream is to be created.
	logGroupName?: null | string @go(LogGroupName,*string)

	// The name of the log stream. Must not be longer than 512 characters and must not contain :
	name?: null | string @go(Name,*string)
}

#StreamParameters: {
	// The name of the log group under which the log stream is to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1.Group
	// +kubebuilder:validation:Optional
	logGroupName?: null | string @go(LogGroupName,*string)

	// The name of the log stream. Must not be longer than 512 characters and must not contain :
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// StreamSpec defines the desired state of Stream
#StreamSpec: {
	forProvider: #StreamParameters @go(ForProvider)
}

// StreamStatus defines the observed state of Stream.
#StreamStatus: {
	atProvider?: #StreamObservation @go(AtProvider)
}

// Stream is the Schema for the Streams API. Provides a CloudWatch Log Stream resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Stream: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	spec:    #StreamSpec   @go(Spec)
	status?: #StreamStatus @go(Status)
}

// StreamList contains a list of Streams
#StreamList: {
	items: [...#Stream] @go(Items,[]Stream)
}
