// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1

package v1beta1

#ResourcePolicyObservation: {
	// The name of the CloudWatch log resource policy
	id?: null | string @go(ID,*string)

	// Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
	policyDocument?: null | string @go(PolicyDocument,*string)
}

#ResourcePolicyParameters: {
	// Details of the resource policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. Maximum length of 5120 characters.
	// +kubebuilder:validation:Optional
	policyDocument?: null | string @go(PolicyDocument,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// ResourcePolicySpec defines the desired state of ResourcePolicy
#ResourcePolicySpec: {
	forProvider: #ResourcePolicyParameters @go(ForProvider)
}

// ResourcePolicyStatus defines the observed state of ResourcePolicy.
#ResourcePolicyStatus: {
	atProvider?: #ResourcePolicyObservation @go(AtProvider)
}

// ResourcePolicy is the Schema for the ResourcePolicys API. Provides a resource to manage a CloudWatch log resource policy
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ResourcePolicy: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.policyDocument)",message="policyDocument is a required parameter"
	spec:    #ResourcePolicySpec   @go(Spec)
	status?: #ResourcePolicyStatus @go(Status)
}

// ResourcePolicyList contains a list of ResourcePolicys
#ResourcePolicyList: {
	items: [...#ResourcePolicy] @go(Items,[]ResourcePolicy)
}
