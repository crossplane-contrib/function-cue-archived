// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1

package v1beta1

#MetricFilterObservation: {
	// The name of the metric filter.
	id?: null | string @go(ID,*string)
}

#MetricFilterParameters: {
	// The name of the log group to associate the metric filter with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/cloudwatchlogs/v1beta1.Group
	// +kubebuilder:validation:Optional
	logGroupName?: null | string @go(LogGroupName,*string)

	// A block defining collection of information needed to define how metric data gets emitted. See below.
	// +kubebuilder:validation:Required
	metricTransformation: [...#MetricTransformationParameters] @go(MetricTransformation,[]MetricTransformationParameters)

	// A valid CloudWatch Logs filter pattern
	// for extracting metric data out of ingested log events.
	// +kubebuilder:validation:Required
	pattern?: null | string @go(Pattern,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#MetricTransformationObservation: {
}

#MetricTransformationParameters: {
	// The value to emit when a filter pattern does not match a log event. Conflicts with dimensions.
	// +kubebuilder:validation:Optional
	defaultValue?: null | string @go(DefaultValue,*string)

	// Map of fields to use as dimensions for the metric. Up to 3 dimensions are allowed. Conflicts with default_value.
	// +kubebuilder:validation:Optional
	dimensions?: {[string]: null | string} @go(Dimensions,map[string]*string)

	// The name of the CloudWatch metric to which the monitored log information should be published (e.g., ErrorCount)
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The destination namespace of the CloudWatch metric.
	// +kubebuilder:validation:Required
	namespace?: null | string @go(Namespace,*string)

	// The unit to assign to the metric. If you omit this, the unit is set as None.
	// +kubebuilder:validation:Optional
	unit?: null | string @go(Unit,*string)

	// What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

// MetricFilterSpec defines the desired state of MetricFilter
#MetricFilterSpec: {
	forProvider: #MetricFilterParameters @go(ForProvider)
}

// MetricFilterStatus defines the observed state of MetricFilter.
#MetricFilterStatus: {
	atProvider?: #MetricFilterObservation @go(AtProvider)
}

// MetricFilter is the Schema for the MetricFilters API. Provides a CloudWatch Log Metric Filter resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#MetricFilter: {
	spec:    #MetricFilterSpec   @go(Spec)
	status?: #MetricFilterStatus @go(Status)
}

// MetricFilterList contains a list of MetricFilters
#MetricFilterList: {
	items: [...#MetricFilter] @go(Items,[]MetricFilter)
}
