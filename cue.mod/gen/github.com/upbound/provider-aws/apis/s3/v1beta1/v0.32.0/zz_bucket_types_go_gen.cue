// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/s3/v1beta1

package v1beta1

#AccessControlTranslationObservation: {
	owner?: null | string @go(Owner,*string)
}

#AccessControlTranslationParameters: {
}

#ApplyServerSideEncryptionByDefaultObservation: {
	// AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of sse_algorithm as aws:kms. The default aws/s3 AWS KMS master key is used if this element is absent while the sse_algorithm is aws:kms.
	kmsMasterKeyId?: null | string @go(KMSMasterKeyID,*string)

	// Server-side encryption algorithm to use. Valid values are AES256 and aws:kms
	sseAlgorithm?: null | string @go(SseAlgorithm,*string)
}

#ApplyServerSideEncryptionByDefaultParameters: {
}

#BucketObservation: {
	// The canned ACL to apply. Valid values are private, public-read, public-read-write, aws-exec-read, authenticated-read, and log-delivery-write. Defaults to private.  Conflicts with grant. Use the resource aws_s3_bucket_acl instead.
	acl?: null | string @go(ACL,*string)

	// Sets the accelerate configuration of an existing bucket. Can be Enabled or Suspended. Cannot be used in cn-north-1 or us-gov-west-1.
	// Use the resource aws_s3_bucket_accelerate_configuration instead.
	accelerationStatus?: null | string @go(AccelerationStatus,*string)

	// ARN of the bucket. Will be of format arn:aws:s3:::bucketname.
	arn?: null | string @go(Arn,*string)

	// Bucket domain name. Will be of format bucketname.s3.amazonaws.com.
	bucketDomainName?: null | string @go(BucketDomainName,*string)

	// Bucket region-specific domain name. The bucket domain name including the region name, please refer here for format. Note: The AWS CloudFront allows specifying S3 region-specific endpoint when creating S3 origin, it will prevent redirect issues from CloudFront to S3 Origin URL.
	bucketRegionalDomainName?: null | string @go(BucketRegionalDomainName,*string)

	// Rule of Cross-Origin Resource Sharing. See CORS rule below for details. Use the resource aws_s3_bucket_cors_configuration instead.
	corsRule?: [...#CorsRuleObservation] @go(CorsRule,[]CorsRuleObservation)

	// An ACL policy grant. See Grant below for details. Conflicts with acl. Use the resource aws_s3_bucket_acl instead.
	grant?: [...#GrantObservation] @go(Grant,[]GrantObservation)

	// Route 53 Hosted Zone ID for this bucket's region.
	hostedZoneId?: null | string @go(HostedZoneID,*string)

	// Name of the bucket.
	id?: null | string @go(ID,*string)

	// Configuration of object lifecycle management. See Lifecycle Rule below for details.
	// Use the resource aws_s3_bucket_lifecycle_configuration instead.
	lifecycleRule?: [...#LifecycleRuleObservation] @go(LifecycleRule,[]LifecycleRuleObservation)

	// Configuration of S3 bucket logging parameters. See Logging below for details.
	// Use the resource aws_s3_bucket_logging instead.
	logging?: [...#LoggingObservation] @go(Logging,[]LoggingObservation)

	// Configuration of S3 object locking. See Object Lock Configuration below for details.
	// Use the object_lock_enabled parameter and the resource aws_s3_bucket_object_lock_configuration instead.
	objectLockConfiguration?: [...#ObjectLockConfigurationObservation] @go(ObjectLockConfiguration,[]ObjectLockConfigurationObservation)

	// Valid bucket policy JSON document. In this case, please make sure you use the verbose/specific version of the policy.
	// Use the resource aws_s3_bucket_policy instead.
	policy?: null | string @go(Policy,*string)

	// Configuration of replication configuration. See Replication Configuration below for details.
	// Use the resource aws_s3_bucket_replication_configuration instead.
	replicationConfiguration?: [...#ReplicationConfigurationObservation] @go(ReplicationConfiguration,[]ReplicationConfigurationObservation)

	// Specifies who should bear the cost of Amazon S3 data transfer.
	// Can be either BucketOwner or Requester. By default, the owner of the S3 bucket would incur the costs of any data transfer.
	// See Requester Pays Buckets developer guide for more information.
	// Use the resource aws_s3_bucket_request_payment_configuration instead.
	requestPayer?: null | string @go(RequestPayer,*string)

	// Configuration of server-side encryption configuration. See Server Side Encryption Configuration below for details.
	// Use the resource aws_s3_bucket_server_side_encryption_configuration instead.
	serverSideEncryptionConfiguration?: [...#ServerSideEncryptionConfigurationObservation] @go(ServerSideEncryptionConfiguration,[]ServerSideEncryptionConfigurationObservation)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Configuration of the S3 bucket versioning state. See Versioning below for details. Use the resource aws_s3_bucket_versioning instead.
	versioning?: [...#VersioningObservation] @go(Versioning,[]VersioningObservation)

	// Configuration of the S3 bucket website. See Website below for details.
	// Use the resource aws_s3_bucket_website_configuration instead.
	website?: [...#WebsiteObservation] @go(Website,[]WebsiteObservation)

	// (Deprecated) Domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records. Use the resource aws_s3_bucket_website_configuration instead.
	websiteDomain?: null | string @go(WebsiteDomain,*string)

	// (Deprecated) Website endpoint, if the bucket is configured with a website. If not, this will be an empty string. Use the resource aws_s3_bucket_website_configuration instead.
	websiteEndpoint?: null | string @go(WebsiteEndpoint,*string)
}

#BucketParameters: {
	// Boolean that indicates all objects (including any locked objects) should be deleted from the bucket when the bucket is destroyed so that the bucket can be destroyed without error. These objects are not recoverable. This only deletes objects when the bucket is destroyed, not when setting this parameter to true.
	// +kubebuilder:validation:Optional
	forceDestroy?: null | bool @go(ForceDestroy,*bool)

	// Indicates whether this bucket has an Object Lock configuration enabled. Valid values are true or false. This argument is not supported in all regions or partitions.
	// +kubebuilder:validation:Optional
	objectLockEnabled?: null | bool @go(ObjectLockEnabled,*bool)

	// AWS region this bucket resides in.
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#CorsRuleObservation: {
	// List of headers allowed.
	allowedHeaders?: [...null | string] @go(AllowedHeaders,[]*string)

	// One or more HTTP methods that you allow the origin to execute. Can be GET, PUT, POST, DELETE or HEAD.
	allowedMethods?: [...null | string] @go(AllowedMethods,[]*string)

	// One or more origins you want customers to be able to access the bucket from.
	allowedOrigins?: [...null | string] @go(AllowedOrigins,[]*string)

	// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Specifies time in seconds that browser can cache the response for a preflight request.
	maxAgeSeconds?: null | float64 @go(MaxAgeSeconds,*float64)
}

#CorsRuleParameters: {
}

#DefaultRetentionObservation: {
	// Number of days that you want to specify for the default retention period.
	days?: null | float64 @go(Days,*float64)

	// Default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are GOVERNANCE and COMPLIANCE.
	mode?: null | string @go(Mode,*string)

	// Number of years that you want to specify for the default retention period.
	years?: null | float64 @go(Years,*float64)
}

#DefaultRetentionParameters: {
}

#DestinationObservation: {
	// Specifies the overrides to use for object owners on replication. Must be used in conjunction with account_id owner override configuration.
	accessControlTranslation?: [...#AccessControlTranslationObservation] @go(AccessControlTranslation,[]AccessControlTranslationObservation)

	// Account ID to use for overriding the object owner on replication. Must be used in conjunction with access_control_translation override configuration.
	accountId?: null | string @go(AccountID,*string)

	// ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
	bucket?: null | string @go(Bucket,*string)

	// Enables replication metrics  (documented below).
	metrics?: [...#MetricsObservation] @go(Metrics,[]MetricsObservation)

	// Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
	// sse_kms_encrypted_objects source selection criteria.
	replicaKmsKeyId?: null | string @go(ReplicaKMSKeyID,*string)

	// Enables S3 Replication Time Control (S3 RTC) (documented below).
	replicationTime?: [...#ReplicationTimeObservation] @go(ReplicationTime,[]ReplicationTimeObservation)

	// Specifies the Amazon S3 storage class to which you want the object to transition.
	storageClass?: null | string @go(StorageClass,*string)
}

#DestinationParameters: {
}

#ExpirationObservation: {
	// Specifies the date after which you want the corresponding action to take effect.
	date?: null | string @go(Date,*string)

	// Specifies the number of days after object creation when the specific rule action takes effect.
	days?: null | float64 @go(Days,*float64)

	// On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
	expiredObjectDeleteMarker?: null | bool @go(ExpiredObjectDeleteMarker,*bool)
}

#ExpirationParameters: {
}

#FilterObservation: {
	// Object keyname prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	prefix?: null | string @go(Prefix,*string)

	// A map of tags that identifies subset of objects to which the rule applies.
	// The rule applies only to objects having all the tags in its tagset.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#FilterParameters: {
}

#GrantObservation: {
	// Canonical user id to grant for. Used only when type is CanonicalUser.
	id?: null | string @go(ID,*string)

	// List of permissions to apply for grantee. Valid values are READ, WRITE, READ_ACP, WRITE_ACP, FULL_CONTROL.
	permissions?: [...null | string] @go(Permissions,[]*string)

	// Type of grantee to apply for. Valid values are CanonicalUser and Group. AmazonCustomerByEmail is not supported.
	type?: null | string @go(Type,*string)

	// Uri address to grant for. Used only when type is Group.
	uri?: null | string @go(URI,*string)
}

#GrantParameters: {
}

#LifecycleRuleObservation: {
	// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
	abortIncompleteMultipartUploadDays?: null | float64 @go(AbortIncompleteMultipartUploadDays,*float64)

	// Specifies lifecycle rule status.
	enabled?: null | bool @go(Enabled,*bool)

	// Specifies a period in the object's expire. See Expiration below for details.
	expiration?: [...#ExpirationObservation] @go(Expiration,[]ExpirationObservation)

	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	id?: null | string @go(ID,*string)

	// Specifies when noncurrent object versions expire. See Noncurrent Version Expiration below for details.
	noncurrentVersionExpiration?: [...#NoncurrentVersionExpirationObservation] @go(NoncurrentVersionExpiration,[]NoncurrentVersionExpirationObservation)

	// Specifies when noncurrent object versions transitions. See Noncurrent Version Transition below for details.
	noncurrentVersionTransition?: [...#NoncurrentVersionTransitionObservation] @go(NoncurrentVersionTransition,[]NoncurrentVersionTransitionObservation)

	// Object key prefix identifying one or more objects to which the rule applies.
	prefix?: null | string @go(Prefix,*string)

	// Specifies object tags key and value.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies a period in the object's transitions. See Transition below for details.
	transition?: [...#TransitionObservation] @go(Transition,[]TransitionObservation)
}

#LifecycleRuleParameters: {
}

#LoggingObservation: {
	// Name of the bucket that will receive the log objects.
	targetBucket?: null | string @go(TargetBucket,*string)

	// To specify a key prefix for log objects.
	targetPrefix?: null | string @go(TargetPrefix,*string)
}

#LoggingParameters: {
}

#MetricsObservation: {
	// Threshold within which objects are to be replicated. The only valid value is 15.
	minutes?: null | float64 @go(Minutes,*float64)

	// Status of the rule. Either Enabled or Disabled. The rule is ignored if status is not Enabled.
	status?: null | string @go(Status,*string)
}

#MetricsParameters: {
}

#NoncurrentVersionExpirationObservation: {
	// Specifies the number of days after object creation when the specific rule action takes effect.
	days?: null | float64 @go(Days,*float64)
}

#NoncurrentVersionExpirationParameters: {
}

#NoncurrentVersionTransitionObservation: {
	// Specifies the number of days after object creation when the specific rule action takes effect.
	days?: null | float64 @go(Days,*float64)

	// Specifies the Amazon S3 storage class to which you want the object to transition.
	storageClass?: null | string @go(StorageClass,*string)
}

#NoncurrentVersionTransitionParameters: {
}

#ObjectLockConfigurationObservation: {
	// Indicates whether this bucket has an Object Lock configuration enabled. Valid value is Enabled. Use the top-level argument object_lock_enabled instead.
	objectLockEnabled?: null | string @go(ObjectLockEnabled,*string)

	// Object Lock rule in place for this bucket (documented below).
	rule?: [...#RuleObservation] @go(Rule,[]RuleObservation)
}

#ObjectLockConfigurationParameters: {
}

#ReplicationConfigurationObservation: {
	// ARN of the IAM role for Amazon S3 to assume when replicating the objects.
	role?: null | string @go(Role,*string)

	// Specifies the rules managing the replication (documented below).
	rules?: [...#RulesObservation] @go(Rules,[]RulesObservation)
}

#ReplicationConfigurationParameters: {
}

#ReplicationTimeObservation: {
	// Threshold within which objects are to be replicated. The only valid value is 15.
	minutes?: null | float64 @go(Minutes,*float64)

	// Status of the rule. Either Enabled or Disabled. The rule is ignored if status is not Enabled.
	status?: null | string @go(Status,*string)
}

#ReplicationTimeParameters: {
}

#RuleObservation: {
	// Default retention period that you want to apply to new objects placed in this bucket (documented below).
	defaultRetention?: [...#DefaultRetentionObservation] @go(DefaultRetention,[]DefaultRetentionObservation)
}

#RuleParameters: {
}

#RulesObservation: {
	// Whether delete markers are replicated. The only valid value is Enabled. To disable, omit this argument. This argument is only valid with V2 replication configurations (i.e., when filter is used).
	deleteMarkerReplicationStatus?: null | string @go(DeleteMarkerReplicationStatus,*string)

	// Specifies the destination for the rule (documented below).
	destination?: [...#DestinationObservation] @go(Destination,[]DestinationObservation)

	// Filter that identifies subset of objects to which the replication rule applies (documented below).
	filter?: [...#FilterObservation] @go(Filter,[]FilterObservation)

	// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
	id?: null | string @go(ID,*string)

	// Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
	prefix?: null | string @go(Prefix,*string)

	// Priority associated with the rule. Priority should only be set if filter is configured. If not provided, defaults to 0. Priority must be unique between multiple rules.
	priority?: null | float64 @go(Priority,*float64)

	// Specifies special object selection criteria (documented below).
	sourceSelectionCriteria?: [...#SourceSelectionCriteriaObservation] @go(SourceSelectionCriteria,[]SourceSelectionCriteriaObservation)

	// Status of the rule. Either Enabled or Disabled. The rule is ignored if status is not Enabled.
	status?: null | string @go(Status,*string)
}

#RulesParameters: {
}

#ServerSideEncryptionConfigurationObservation: {
	// Single object for server-side encryption by default configuration. (documented below)
	rule?: [...#ServerSideEncryptionConfigurationRuleObservation] @go(Rule,[]ServerSideEncryptionConfigurationRuleObservation)
}

#ServerSideEncryptionConfigurationParameters: {
}

#ServerSideEncryptionConfigurationRuleObservation: {
	// Single object for setting server-side encryption by default. (documented below)
	applyServerSideEncryptionByDefault?: [...#ApplyServerSideEncryptionByDefaultObservation] @go(ApplyServerSideEncryptionByDefault,[]ApplyServerSideEncryptionByDefaultObservation)

	// Whether or not to use Amazon S3 Bucket Keys for SSE-KMS.
	bucketKeyEnabled?: null | bool @go(BucketKeyEnabled,*bool)
}

#ServerSideEncryptionConfigurationRuleParameters: {
}

#SourceSelectionCriteriaObservation: {
	// Match SSE-KMS encrypted objects (documented below). If specified, replica_kms_key_id
	// in destination must be specified as well.
	sseKmsEncryptedObjects?: [...#SseKMSEncryptedObjectsObservation] @go(SseKMSEncryptedObjects,[]SseKMSEncryptedObjectsObservation)
}

#SourceSelectionCriteriaParameters: {
}

#SseKMSEncryptedObjectsObservation: {
	// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
	enabled?: null | bool @go(Enabled,*bool)
}

#SseKMSEncryptedObjectsParameters: {
}

#TransitionObservation: {
	// Specifies the date after which you want the corresponding action to take effect.
	date?: null | string @go(Date,*string)

	// Specifies the number of days after object creation when the specific rule action takes effect.
	days?: null | float64 @go(Days,*float64)

	// Specifies the Amazon S3 storage class to which you want the object to transition.
	storageClass?: null | string @go(StorageClass,*string)
}

#TransitionParameters: {
}

#VersioningObservation: {
	// Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
	enabled?: null | bool @go(Enabled,*bool)

	// Enable MFA delete for either Change the versioning state of your bucket or Permanently delete an object version. Default is false. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
	mfaDelete?: null | bool @go(MfaDelete,*bool)
}

#VersioningParameters: {
}

#WebsiteObservation: {
	// Absolute path to the document to return in case of a 4XX error.
	errorDocument?: null | string @go(ErrorDocument,*string)

	// Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
	indexDocument?: null | string @go(IndexDocument,*string)

	// Hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (http:// or https://) to use when redirecting requests. The default is the protocol that is used in the original request.
	redirectAllRequestsTo?: null | string @go(RedirectAllRequestsTo,*string)

	// JSON array containing routing rules
	// describing redirect behavior and when redirects are applied.
	routingRules?: null | string @go(RoutingRules,*string)
}

#WebsiteParameters: {
}

// BucketSpec defines the desired state of Bucket
#BucketSpec: {
	forProvider: #BucketParameters @go(ForProvider)
}

// BucketStatus defines the observed state of Bucket.
#BucketStatus: {
	atProvider?: #BucketObservation @go(AtProvider)
}

// Bucket is the Schema for the Buckets API. Provides a S3 bucket resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Bucket: {
	spec:    #BucketSpec   @go(Spec)
	status?: #BucketStatus @go(Status)
}

// BucketList contains a list of Buckets
#BucketList: {
	items: [...#Bucket] @go(Items,[]Bucket)
}
