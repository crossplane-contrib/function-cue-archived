// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/s3/v1beta1

package v1beta1

#BucketPolicyObservation: {
	// Name of the bucket to which to apply the policy.
	bucket?: null | string @go(Bucket,*string)
	id?:     null | string @go(ID,*string)

	// Text of the policy. Although this is a bucket policy rather than an IAM policy, the aws_iam_policy_document data source may be used, so long as it specifies a principal. Note: Bucket policies are limited to 20 KB in size.
	policy?: null | string @go(Policy,*string)
}

#BucketPolicyParameters: {
	// Name of the bucket to which to apply the policy.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Text of the policy. Although this is a bucket policy rather than an IAM policy, the aws_iam_policy_document data source may be used, so long as it specifies a principal. Note: Bucket policies are limited to 20 KB in size.
	// +kubebuilder:validation:Optional
	policy?: null | string @go(Policy,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// BucketPolicySpec defines the desired state of BucketPolicy
#BucketPolicySpec: {
	forProvider: #BucketPolicyParameters @go(ForProvider)
}

// BucketPolicyStatus defines the observed state of BucketPolicy.
#BucketPolicyStatus: {
	atProvider?: #BucketPolicyObservation @go(AtProvider)
}

// BucketPolicy is the Schema for the BucketPolicys API. Attaches a policy to an S3 bucket resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BucketPolicy: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.policy)",message="policy is a required parameter"
	spec:    #BucketPolicySpec   @go(Spec)
	status?: #BucketPolicyStatus @go(Status)
}

// BucketPolicyList contains a list of BucketPolicys
#BucketPolicyList: {
	items: [...#BucketPolicy] @go(Items,[]BucketPolicy)
}
