// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/s3/v1beta1

package v1beta1

#BucketCorsConfigurationCorsRuleObservation: {
}

#BucketCorsConfigurationCorsRuleParameters: {
	// Set of Headers that are specified in the Access-Control-Request-Headers header.
	// +kubebuilder:validation:Optional
	allowedHeaders?: [...null | string] @go(AllowedHeaders,[]*string)

	// Set of HTTP methods that you allow the origin to execute. Valid values are GET, PUT, HEAD, POST, and DELETE.
	// +kubebuilder:validation:Required
	allowedMethods: [...null | string] @go(AllowedMethods,[]*string)

	// Set of origins you want customers to be able to access the bucket from.
	// +kubebuilder:validation:Required
	allowedOrigins: [...null | string] @go(AllowedOrigins,[]*string)

	// Set of headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
	// +kubebuilder:validation:Optional
	exposeHeaders?: [...null | string] @go(ExposeHeaders,[]*string)

	// Unique identifier for the rule. The value cannot be longer than 255 characters.
	// +kubebuilder:validation:Optional
	id?: null | string @go(ID,*string)

	// Time in seconds that your browser is to cache the preflight response for the specified resource.
	// +kubebuilder:validation:Optional
	maxAgeSeconds?: null | float64 @go(MaxAgeSeconds,*float64)
}

#BucketCorsConfigurationObservation: {
	// The bucket or bucket and expected_bucket_owner separated by a comma (,) if the latter is provided.
	id?: null | string @go(ID,*string)
}

#BucketCorsConfigurationParameters: {
	// Name of the bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
	// +kubebuilder:validation:Required
	corsRule: [...#BucketCorsConfigurationCorsRuleParameters] @go(CorsRule,[]BucketCorsConfigurationCorsRuleParameters)

	// Account ID of the expected bucket owner.
	// +kubebuilder:validation:Optional
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// BucketCorsConfigurationSpec defines the desired state of BucketCorsConfiguration
#BucketCorsConfigurationSpec: {
	forProvider: #BucketCorsConfigurationParameters @go(ForProvider)
}

// BucketCorsConfigurationStatus defines the observed state of BucketCorsConfiguration.
#BucketCorsConfigurationStatus: {
	atProvider?: #BucketCorsConfigurationObservation @go(AtProvider)
}

// BucketCorsConfiguration is the Schema for the BucketCorsConfigurations API. Provides an S3 bucket CORS configuration resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#BucketCorsConfiguration: {
	spec:    #BucketCorsConfigurationSpec   @go(Spec)
	status?: #BucketCorsConfigurationStatus @go(Status)
}

// BucketCorsConfigurationList contains a list of BucketCorsConfigurations
#BucketCorsConfigurationList: {
	items: [...#BucketCorsConfiguration] @go(Items,[]BucketCorsConfiguration)
}
