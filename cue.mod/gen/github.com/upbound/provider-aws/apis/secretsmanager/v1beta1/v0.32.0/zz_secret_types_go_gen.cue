// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/secretsmanager/v1beta1

package v1beta1

#ReplicaObservation: {
	// Date that you last accessed the secret in the Region.
	lastAccessedDate?: null | string @go(LastAccessedDate,*string)

	// Status can be InProgress, Failed, or InSync.
	status?: null | string @go(Status,*string)

	// Message such as Replication succeeded or Secret with this name already exists in this region.
	statusMessage?: null | string @go(StatusMessage,*string)
}

#ReplicaParameters: {
	// ARN, Key ID, or Alias of the AWS KMS key within the region secret is replicated to. If one is not specified, then Secrets Manager defaults to using the AWS account's default KMS key (aws/secretsmanager) in the region or creates one for use if non-existent.
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Region for replicating the secret.
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#RotationRulesObservation: {
	// Specifies the number of days between automatic scheduled rotations of the secret.
	automaticallyAfterDays?: null | float64 @go(AutomaticallyAfterDays,*float64)
}

#RotationRulesParameters: {
}

#SecretObservation: {
	// ARN of the secret.
	arn?: null | string @go(Arn,*string)

	// ARN of the secret.
	id?: null | string @go(ID,*string)

	// Valid JSON document representing a resource policy. Removing policy from your configuration or setting policy to null or an empty string (i.e., policy = "") will not delete the policy since it could have been set by aws_secretsmanager_secret_policy. To delete the policy, set it to "{}" (an empty JSON document).
	policy?: null | string @go(Policy,*string)

	// Configuration block to support secret replication. See details below.
	// +kubebuilder:validation:Optional
	replica?: [...#ReplicaObservation] @go(Replica,[]ReplicaObservation)

	// Whether automatic rotation is enabled for this secret.
	rotationEnabled?: null | bool @go(RotationEnabled,*bool)

	// ARN of the Lambda function that can rotate the secret. Use the aws_secretsmanager_secret_rotation resource to manage this configuration instead. As of version 2.67.0, removal of this configuration will no longer remove rotation due to supporting the new resource. Either import the new resource and remove the configuration or manually remove rotation.
	rotationLambdaArn?: null | string @go(RotationLambdaArn,*string)

	// Configuration block for the rotation configuration of this secret. Defined below. Use the aws_secretsmanager_secret_rotation resource to manage this configuration instead. As of version 2.67.0, removal of this configuration will no longer remove rotation due to supporting the new resource. Either import the new resource and remove the configuration or manually remove rotation.
	rotationRules?: [...#RotationRulesObservation] @go(RotationRules,[]RotationRulesObservation)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#SecretParameters: {
	// Description of the secret.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Accepts boolean value to specify whether to overwrite a secret with the same name in the destination Region.
	// +kubebuilder:validation:Optional
	forceOverwriteReplicaSecret?: null | bool @go(ForceOverwriteReplicaSecret,*bool)

	// ARN or Id of the AWS KMS key to be used to encrypt the secret values in the versions stored in this secret. If you don't specify this value, then Secrets Manager defaults to using the AWS account's default KMS key (the one named aws/secretsmanager). If the default KMS key with that name doesn't yet exist, then AWS Secrets Manager creates it for you automatically the first time.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Friendly name of the new secret. The secret name can consist of uppercase letters, lowercase letters, digits, and any of the following characters: /_+=.@- Conflicts with name_prefix.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Number of days that AWS Secrets Manager waits before it can delete the secret. This value can be 0 to force deletion without recovery or range from 7 to 30 days. The default value is 30.
	// +kubebuilder:validation:Optional
	recoveryWindowInDays?: null | float64 @go(RecoveryWindowInDays,*float64)

	// Region for replicating the secret.
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Configuration block to support secret replication. See details below.
	// +kubebuilder:validation:Optional
	replica?: [...#ReplicaParameters] @go(Replica,[]ReplicaParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// SecretSpec defines the desired state of Secret
#SecretSpec: {
	forProvider: #SecretParameters @go(ForProvider)
}

// SecretStatus defines the observed state of Secret.
#SecretStatus: {
	atProvider?: #SecretObservation @go(AtProvider)
}

// Secret is the Schema for the Secrets API. Provides a resource to manage AWS Secrets Manager secret metadata
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Secret: {
	spec:    #SecretSpec   @go(Spec)
	status?: #SecretStatus @go(Status)
}

// SecretList contains a list of Secrets
#SecretList: {
	items: [...#Secret] @go(Items,[]Secret)
}
