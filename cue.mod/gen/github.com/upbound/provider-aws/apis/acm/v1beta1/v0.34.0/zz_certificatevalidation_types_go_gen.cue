// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/acm/v1beta1

package v1beta1

#CertificateValidationObservation: {
	// ARN of the certificate that is being validated.
	certificateArn?: null | string @go(CertificateArn,*string)

	// Time at which the certificate was issued
	id?: null | string @go(ID,*string)

	// List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation
	validationRecordFqdns?: [...null | string] @go(ValidationRecordFqdns,[]*string)
}

#CertificateValidationParameters: {
	// ARN of the certificate that is being validated.
	// +crossplane:generate:reference:type=Certificate
	// +kubebuilder:validation:Optional
	certificateArn?: null | string @go(CertificateArn,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation
	// +kubebuilder:validation:Optional
	validationRecordFqdns?: [...null | string] @go(ValidationRecordFqdns,[]*string)
}

// CertificateValidationSpec defines the desired state of CertificateValidation
#CertificateValidationSpec: {
	forProvider: #CertificateValidationParameters @go(ForProvider)
}

// CertificateValidationStatus defines the observed state of CertificateValidation.
#CertificateValidationStatus: {
	atProvider?: #CertificateValidationObservation @go(AtProvider)
}

// CertificateValidation is the Schema for the CertificateValidations API. Waits for and checks successful validation of an ACM certificate.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#CertificateValidation: {
	spec:    #CertificateValidationSpec   @go(Spec)
	status?: #CertificateValidationStatus @go(Status)
}

// CertificateValidationList contains a list of CertificateValidations
#CertificateValidationList: {
	items: [...#CertificateValidation] @go(Items,[]CertificateValidation)
}
