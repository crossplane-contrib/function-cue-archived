// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/ecrpublic/v1beta1

package v1beta1

#RepositoryPolicyObservation: {
	id?: null | string @go(ID,*string)

	// The registry ID where the repository was created.
	registryId?: null | string @go(RegistryID,*string)
}

#RepositoryPolicyParameters: {
	// The policy document. This is a JSON formatted string
	// +kubebuilder:validation:Required
	policy?: null | string @go(Policy,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Name of the repository to apply the policy.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ecrpublic/v1beta1.Repository
	// +kubebuilder:validation:Optional
	repositoryName?: null | string @go(RepositoryName,*string)
}

// RepositoryPolicySpec defines the desired state of RepositoryPolicy
#RepositoryPolicySpec: {
	forProvider: #RepositoryPolicyParameters @go(ForProvider)
}

// RepositoryPolicyStatus defines the observed state of RepositoryPolicy.
#RepositoryPolicyStatus: {
	atProvider?: #RepositoryPolicyObservation @go(AtProvider)
}

// RepositoryPolicy is the Schema for the RepositoryPolicys API. Provides an Elastic Container Registry Public Repository Policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RepositoryPolicy: {
	spec:    #RepositoryPolicySpec   @go(Spec)
	status?: #RepositoryPolicyStatus @go(Status)
}

// RepositoryPolicyList contains a list of RepositoryPolicys
#RepositoryPolicyList: {
	items: [...#RepositoryPolicy] @go(Items,[]RepositoryPolicy)
}
