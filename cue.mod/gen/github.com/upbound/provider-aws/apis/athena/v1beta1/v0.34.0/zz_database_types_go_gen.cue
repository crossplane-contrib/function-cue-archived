// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/athena/v1beta1

package v1beta1

#ACLConfigurationObservation: {
	// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is BUCKET_OWNER_FULL_CONTROL.
	s3AclOption?: null | string @go(S3ACLOption,*string)
}

#ACLConfigurationParameters: {
	// Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is BUCKET_OWNER_FULL_CONTROL.
	// +kubebuilder:validation:Required
	s3AclOption?: null | string @go(S3ACLOption,*string)
}

#DatabaseObservation: {
	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	aclConfiguration?: [...#ACLConfigurationObservation] @go(ACLConfiguration,[]ACLConfigurationObservation)

	// Name of S3 bucket to save the results of the query execution.
	bucket?: null | string @go(Bucket,*string)

	// Description of the database.
	comment?: null | string @go(Comment,*string)

	// Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.
	encryptionConfiguration?: [...#EncryptionConfigurationObservation] @go(EncryptionConfiguration,[]EncryptionConfigurationObservation)

	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are not recoverable.
	forceDestroy?: null | bool @go(ForceDestroy,*bool)

	// Database name
	id?: null | string @go(ID,*string)

	// Key-value map of custom metadata properties for the database definition.
	properties?: {[string]: null | string} @go(Properties,map[string]*string)
}

#DatabaseParameters: {
	// That an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.
	// +kubebuilder:validation:Optional
	aclConfiguration?: [...#ACLConfigurationParameters] @go(ACLConfiguration,[]ACLConfigurationParameters)

	// Name of S3 bucket to save the results of the query execution.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// Description of the database.
	// +kubebuilder:validation:Optional
	comment?: null | string @go(Comment,*string)

	// Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See Encryption Configuration below.
	// +kubebuilder:validation:Optional
	encryptionConfiguration?: [...#EncryptionConfigurationParameters] @go(EncryptionConfiguration,[]EncryptionConfigurationParameters)

	// AWS account ID that you expect to be the owner of the Amazon S3 bucket.
	// +kubebuilder:validation:Optional
	expectedBucketOwner?: null | string @go(ExpectedBucketOwner,*string)

	// Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are not recoverable.
	// +kubebuilder:validation:Optional
	forceDestroy?: null | bool @go(ForceDestroy,*bool)

	// Key-value map of custom metadata properties for the database definition.
	// +kubebuilder:validation:Optional
	properties?: {[string]: null | string} @go(Properties,map[string]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#EncryptionConfigurationObservation: {
	// Type of key; one of SSE_S3, SSE_KMS, CSE_KMS
	encryptionOption?: null | string @go(EncryptionOption,*string)

	// KMS key ARN or ID; required for key types SSE_KMS and CSE_KMS.
	kmsKey?: null | string @go(KMSKey,*string)
}

#EncryptionConfigurationParameters: {
	// Type of key; one of SSE_S3, SSE_KMS, CSE_KMS
	// +kubebuilder:validation:Required
	encryptionOption?: null | string @go(EncryptionOption,*string)

	// KMS key ARN or ID; required for key types SSE_KMS and CSE_KMS.
	// +kubebuilder:validation:Optional
	kmsKey?: null | string @go(KMSKey,*string)
}

// DatabaseSpec defines the desired state of Database
#DatabaseSpec: {
	forProvider: #DatabaseParameters @go(ForProvider)
}

// DatabaseStatus defines the observed state of Database.
#DatabaseStatus: {
	atProvider?: #DatabaseObservation @go(AtProvider)
}

// Database is the Schema for the Databases API. Provides an Athena database.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Database: {
	spec:    #DatabaseSpec   @go(Spec)
	status?: #DatabaseStatus @go(Status)
}

// DatabaseList contains a list of Databases
#DatabaseList: {
	items: [...#Database] @go(Items,[]Database)
}
