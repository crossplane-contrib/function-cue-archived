// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/signer/v1beta1

package v1beta1

#SigningProfilePermissionObservation: {
	// An AWS Signer action permitted as part of cross-account permissions. Valid values: signer:StartSigningJob, signer:GetSigningProfile, or signer:RevokeSignature.
	action?: null | string @go(Action,*string)
	id?:     null | string @go(ID,*string)

	// The AWS principal to be granted a cross-account permission.
	principal?: null | string @go(Principal,*string)

	// Name of the signing profile to add the cross-account permissions.
	profileName?: null | string @go(ProfileName,*string)

	// The signing profile version that a permission applies to.
	profileVersion?: null | string @go(ProfileVersion,*string)

	// A unique statement identifier.
	statementId?: null | string @go(StatementID,*string)

	// A statement identifier prefix. Conflicts with statement_id.
	statementIdPrefix?: null | string @go(StatementIDPrefix,*string)
}

#SigningProfilePermissionParameters: {
	// An AWS Signer action permitted as part of cross-account permissions. Valid values: signer:StartSigningJob, signer:GetSigningProfile, or signer:RevokeSignature.
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// The AWS principal to be granted a cross-account permission.
	// +kubebuilder:validation:Optional
	principal?: null | string @go(Principal,*string)

	// Name of the signing profile to add the cross-account permissions.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/signer/v1beta1.SigningProfile
	// +kubebuilder:validation:Optional
	profileName?: null | string @go(ProfileName,*string)

	// The signing profile version that a permission applies to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/signer/v1beta1.SigningProfile
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("version",true)
	// +kubebuilder:validation:Optional
	profileVersion?: null | string @go(ProfileVersion,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A unique statement identifier.
	// +kubebuilder:validation:Optional
	statementId?: null | string @go(StatementID,*string)

	// A statement identifier prefix. Conflicts with statement_id.
	// +kubebuilder:validation:Optional
	statementIdPrefix?: null | string @go(StatementIDPrefix,*string)
}

// SigningProfilePermissionSpec defines the desired state of SigningProfilePermission
#SigningProfilePermissionSpec: {
	forProvider: #SigningProfilePermissionParameters @go(ForProvider)
}

// SigningProfilePermissionStatus defines the observed state of SigningProfilePermission.
#SigningProfilePermissionStatus: {
	atProvider?: #SigningProfilePermissionObservation @go(AtProvider)
}

// SigningProfilePermission is the Schema for the SigningProfilePermissions API. Creates a Signer Signing Profile Permission.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SigningProfilePermission: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.action)",message="action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.principal)",message="principal is a required parameter"
	spec:    #SigningProfilePermissionSpec   @go(Spec)
	status?: #SigningProfilePermissionStatus @go(Status)
}

// SigningProfilePermissionList contains a list of SigningProfilePermissions
#SigningProfilePermissionList: {
	items: [...#SigningProfilePermission] @go(Items,[]SigningProfilePermission)
}
