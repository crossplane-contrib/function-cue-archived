// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/imagebuilder/v1beta1

package v1beta1

#InfrastructureConfigurationObservation: {
	// Amazon Resource Name (ARN) of the configuration.
	arn?: null | string @go(Arn,*string)

	// Date when the configuration was created.
	dateCreated?: null | string @go(DateCreated,*string)

	// Date when the configuration was updated.
	dateUpdated?: null | string @go(DateUpdated,*string)

	// Amazon Resource Name (ARN) of the configuration.
	id?: null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#InfrastructureConfigurationParameters: {
	// Description for the configuration.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
	// +kubebuilder:validation:Optional
	instanceMetadataOptions?: [...#InstanceMetadataOptionsParameters] @go(InstanceMetadataOptions,[]InstanceMetadataOptionsParameters)

	// Name of IAM Instance Profile.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.InstanceProfile
	// +kubebuilder:validation:Optional
	instanceProfileName?: null | string @go(InstanceProfileName,*string)

	// Set of EC2 Instance Types.
	// +kubebuilder:validation:Optional
	instanceTypes?: [...null | string] @go(InstanceTypes,[]*string)

	// Name of EC2 Key Pair.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.KeyPair
	// +kubebuilder:validation:Optional
	keyPair?: null | string @go(KeyPair,*string)

	// Configuration block with logging settings. Detailed below.
	// +kubebuilder:validation:Optional
	logging?: [...#LoggingParameters] @go(Logging,[]LoggingParameters)

	// Name for the configuration.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags to assign to infrastructure created by the configuration.
	// +kubebuilder:validation:Optional
	resourceTags?: {[string]: null | string} @go(ResourceTags,map[string]*string)

	// Set of EC2 Security Group identifiers.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=SecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=SecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	securityGroupIds?: [...null | string] @go(SecurityGroupIds,[]*string)

	// Amazon Resource Name (ARN) of SNS Topic.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	snsTopicArn?: null | string @go(SnsTopicArn,*string)

	// EC2 Subnet identifier. Also requires security_group_ids argument.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +kubebuilder:validation:Optional
	subnetId?: null | string @go(SubnetID,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Enable if the instance should be terminated when the pipeline fails. Defaults to false.
	// +kubebuilder:validation:Optional
	terminateInstanceOnFailure?: null | bool @go(TerminateInstanceOnFailure,*bool)
}

#InstanceMetadataOptionsObservation: {
}

#InstanceMetadataOptionsParameters: {
	// The number of hops that an instance can traverse to reach its destonation.
	// +kubebuilder:validation:Optional
	httpPutResponseHopLimit?: null | float64 @go(HTTPPutResponseHopLimit,*float64)

	// Whether a signed token is required for instance metadata retrieval requests. Valid values: required, optional.
	// +kubebuilder:validation:Optional
	httpTokens?: null | string @go(HTTPTokens,*string)
}

#LoggingObservation: {
}

#LoggingParameters: {
	// Configuration block with S3 logging settings. Detailed below.
	// +kubebuilder:validation:Required
	s3Logs: [...#S3LogsParameters] @go(S3Logs,[]S3LogsParameters)
}

#S3LogsObservation: {
}

#S3LogsParameters: {
	// Name of the S3 Bucket.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +kubebuilder:validation:Optional
	s3BucketName?: null | string @go(S3BucketName,*string)

	// Prefix to use for S3 logs. Defaults to /.
	// +kubebuilder:validation:Optional
	s3KeyPrefix?: null | string @go(S3KeyPrefix,*string)
}

// InfrastructureConfigurationSpec defines the desired state of InfrastructureConfiguration
#InfrastructureConfigurationSpec: {
	forProvider: #InfrastructureConfigurationParameters @go(ForProvider)
}

// InfrastructureConfigurationStatus defines the observed state of InfrastructureConfiguration.
#InfrastructureConfigurationStatus: {
	atProvider?: #InfrastructureConfigurationObservation @go(AtProvider)
}

// InfrastructureConfiguration is the Schema for the InfrastructureConfigurations API. Manages an Image Builder Infrastructure Configuration
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#InfrastructureConfiguration: {
	spec:    #InfrastructureConfigurationSpec   @go(Spec)
	status?: #InfrastructureConfigurationStatus @go(Status)
}

// InfrastructureConfigurationList contains a list of InfrastructureConfigurations
#InfrastructureConfigurationList: {
	items: [...#InfrastructureConfiguration] @go(Items,[]InfrastructureConfiguration)
}
