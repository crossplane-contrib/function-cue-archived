// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/autoscaling/v1beta1

package v1beta1

#NotificationObservation: {
	// List of AutoScaling Group Names
	groupNames?: [...null | string] @go(GroupNames,[]*string)
	id?: null | string @go(ID,*string)

	// List of Notification Types that trigger
	// notifications. Acceptable values are documented in the AWS documentation here
	notifications?: [...null | string] @go(Notifications,[]*string)

	// Topic ARN for notifications to be sent through
	topicArn?: null | string @go(TopicArn,*string)
}

#NotificationParameters: {
	// List of AutoScaling Group Names
	// +kubebuilder:validation:Optional
	groupNames?: [...null | string] @go(GroupNames,[]*string)

	// List of Notification Types that trigger
	// notifications. Acceptable values are documented in the AWS documentation here
	// +kubebuilder:validation:Optional
	notifications?: [...null | string] @go(Notifications,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Topic ARN for notifications to be sent through
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	topicArn?: null | string @go(TopicArn,*string)
}

// NotificationSpec defines the desired state of Notification
#NotificationSpec: {
	forProvider: #NotificationParameters @go(ForProvider)
}

// NotificationStatus defines the observed state of Notification.
#NotificationStatus: {
	atProvider?: #NotificationObservation @go(AtProvider)
}

// Notification is the Schema for the Notifications API. Provides an AutoScaling Group with Notification support
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Notification: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.groupNames)",message="groupNames is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.notifications)",message="notifications is a required parameter"
	spec:    #NotificationSpec   @go(Spec)
	status?: #NotificationStatus @go(Status)
}

// NotificationList contains a list of Notifications
#NotificationList: {
	items: [...#Notification] @go(Items,[]Notification)
}
