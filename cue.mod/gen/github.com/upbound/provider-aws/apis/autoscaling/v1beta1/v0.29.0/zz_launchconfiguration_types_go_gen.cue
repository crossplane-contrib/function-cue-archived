// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/autoscaling/v1beta1

package v1beta1

#EBSBlockDeviceObservation: {
}

#EBSBlockDeviceParameters: {
	// Whether the volume should be destroyed
	// on instance termination (Default: true).
	// +kubebuilder:validation:Optional
	deleteOnTermination?: null | bool @go(DeleteOnTermination,*bool)

	// The name of the device to mount.
	// +kubebuilder:validation:Required
	deviceName?: null | string @go(DeviceName,*string)

	// Whether the volume should be encrypted or not. Defaults to false.
	// +kubebuilder:validation:Optional
	encrypted?: null | bool @go(Encrypted,*bool)

	// The amount of provisioned
	// IOPS.
	// This must be set with a volume_type of "io1".
	// +kubebuilder:validation:Optional
	iops?: null | float64 @go(Iops,*float64)

	// Whether the device in the block device mapping of the AMI is suppressed.
	// +kubebuilder:validation:Optional
	noDevice?: null | bool @go(NoDevice,*bool)

	// The Snapshot ID to mount.
	// +kubebuilder:validation:Optional
	snapshotId?: null | string @go(SnapshotID,*string)

	// The throughput (MiBps) to provision for a gp3 volume.
	// +kubebuilder:validation:Optional
	throughput?: null | float64 @go(Throughput,*float64)

	// The size of the volume in gigabytes.
	// +kubebuilder:validation:Optional
	volumeSize?: null | float64 @go(VolumeSize,*float64)

	// The type of volume. Can be standard, gp2, gp3, st1, sc1 or io1.
	// +kubebuilder:validation:Optional
	volumeType?: null | string @go(VolumeType,*string)
}

#EphemeralBlockDeviceObservation: {
}

#EphemeralBlockDeviceParameters: {
	// The name of the block device to mount on the instance.
	// +kubebuilder:validation:Required
	deviceName?: null | string @go(DeviceName,*string)

	// Whether the device in the block device mapping of the AMI is suppressed.
	// +kubebuilder:validation:Optional
	noDevice?: null | bool @go(NoDevice,*bool)

	// The Instance Store Device Name.
	// +kubebuilder:validation:Optional
	virtualName?: null | string @go(VirtualName,*string)
}

#LaunchConfigurationObservation: {
	// The Amazon Resource Name of the launch configuration.
	arn?: null | string @go(Arn,*string)

	// The ID of the launch configuration.
	id?: null | string @go(ID,*string)
}

#LaunchConfigurationParameters: {
	// Associate a public ip address with an instance in a VPC.
	// +kubebuilder:validation:Optional
	associatePublicIpAddress?: null | bool @go(AssociatePublicIPAddress,*bool)

	// Additional EBS block devices to attach to the instance. See Block Devices below for details.
	// +kubebuilder:validation:Optional
	ebsBlockDevice?: [...#EBSBlockDeviceParameters] @go(EBSBlockDevice,[]EBSBlockDeviceParameters)

	// If true, the launched EC2 instance will be EBS-optimized.
	// +kubebuilder:validation:Optional
	ebsOptimized?: null | bool @go(EBSOptimized,*bool)

	// Enables/disables detailed monitoring. This is enabled by default.
	// +kubebuilder:validation:Optional
	enableMonitoring?: null | bool @go(EnableMonitoring,*bool)

	// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
	// +kubebuilder:validation:Optional
	ephemeralBlockDevice?: [...#EphemeralBlockDeviceParameters] @go(EphemeralBlockDevice,[]EphemeralBlockDeviceParameters)

	// The name attribute of the IAM instance profile to associate with launched instances.
	// +kubebuilder:validation:Optional
	iamInstanceProfile?: null | string @go(IAMInstanceProfile,*string)

	// The EC2 image ID to launch.
	// +kubebuilder:validation:Required
	imageId?: null | string @go(ImageID,*string)

	// The size of instance to launch.
	// +kubebuilder:validation:Required
	instanceType?: null | string @go(InstanceType,*string)

	// The key name that should be used for the instance.
	// +kubebuilder:validation:Optional
	keyName?: null | string @go(KeyName,*string)

	// The metadata options for the instance.
	// +kubebuilder:validation:Optional
	metadataOptions?: [...#MetadataOptionsParameters] @go(MetadataOptions,[]MetadataOptionsParameters)

	// The tenancy of the instance. Valid values are default or dedicated, see AWS's Create Launch Configuration for more details.
	// +kubebuilder:validation:Optional
	placementTenancy?: null | string @go(PlacementTenancy,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Customize details about the root block device of the instance. See Block Devices below for details.
	// +kubebuilder:validation:Optional
	rootBlockDevice?: [...#RootBlockDeviceParameters] @go(RootBlockDevice,[]RootBlockDeviceParameters)

	// A list of associated security group IDS.
	// +kubebuilder:validation:Optional
	securityGroups?: [...null | string] @go(SecurityGroups,[]*string)

	// The maximum price to use for reserving spot instances.
	// +kubebuilder:validation:Optional
	spotPrice?: null | string @go(SpotPrice,*string)

	// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see user_data_base64 instead.
	// +kubebuilder:validation:Optional
	userData?: null | string @go(UserData,*string)

	// Can be used instead of user_data to pass base64-encoded binary data directly. Use this instead of user_data whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
	// +kubebuilder:validation:Optional
	userDataBase64?: null | string @go(UserDataBase64,*string)

	// The ID of a ClassicLink-enabled VPC. Only applies to EC2-Classic instances. (eg. vpc-2730681a)
	// +kubebuilder:validation:Optional
	vpcClassicLinkId?: null | string @go(VPCClassicLinkID,*string)

	// The IDs of one or more security groups for the specified ClassicLink-enabled VPC (eg. sg-46ae3d11).
	// +kubebuilder:validation:Optional
	vpcClassicLinkSecurityGroups?: [...null | string] @go(VPCClassicLinkSecurityGroups,[]*string)
}

#MetadataOptionsObservation: {
}

#MetadataOptionsParameters: {
	// The state of the metadata service: enabled, disabled.
	// +kubebuilder:validation:Optional
	httpEndpoint?: null | string @go(HTTPEndpoint,*string)

	// The desired HTTP PUT response hop limit for instance metadata requests.
	// +kubebuilder:validation:Optional
	httpPutResponseHopLimit?: null | float64 @go(HTTPPutResponseHopLimit,*float64)

	// If session tokens are required: optional, required.
	// +kubebuilder:validation:Optional
	httpTokens?: null | string @go(HTTPTokens,*string)
}

#RootBlockDeviceObservation: {
}

#RootBlockDeviceParameters: {
	// Whether the volume should be destroyed on instance termination. Defaults to true.
	// +kubebuilder:validation:Optional
	deleteOnTermination?: null | bool @go(DeleteOnTermination,*bool)

	// Whether the volume should be encrypted or not. Defaults to false.
	// +kubebuilder:validation:Optional
	encrypted?: null | bool @go(Encrypted,*bool)

	// The amount of provisioned IOPS. This must be set with a volume_type of io1.
	// +kubebuilder:validation:Optional
	iops?: null | float64 @go(Iops,*float64)

	// The throughput (MiBps) to provision for a gp3 volume.
	// +kubebuilder:validation:Optional
	throughput?: null | float64 @go(Throughput,*float64)

	// The size of the volume in gigabytes.
	// +kubebuilder:validation:Optional
	volumeSize?: null | float64 @go(VolumeSize,*float64)

	// The type of volume. Can be standard, gp2, gp3, st1, sc1 or io1.
	// +kubebuilder:validation:Optional
	volumeType?: null | string @go(VolumeType,*string)
}

// LaunchConfigurationSpec defines the desired state of LaunchConfiguration
#LaunchConfigurationSpec: {
	forProvider: #LaunchConfigurationParameters @go(ForProvider)
}

// LaunchConfigurationStatus defines the observed state of LaunchConfiguration.
#LaunchConfigurationStatus: {
	atProvider?: #LaunchConfigurationObservation @go(AtProvider)
}

// LaunchConfiguration is the Schema for the LaunchConfigurations API. Provides a resource to create a new launch configuration, used for autoscaling groups.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LaunchConfiguration: {
	spec:    #LaunchConfigurationSpec   @go(Spec)
	status?: #LaunchConfigurationStatus @go(Status)
}

// LaunchConfigurationList contains a list of LaunchConfigurations
#LaunchConfigurationList: {
	items: [...#LaunchConfiguration] @go(Items,[]LaunchConfiguration)
}
