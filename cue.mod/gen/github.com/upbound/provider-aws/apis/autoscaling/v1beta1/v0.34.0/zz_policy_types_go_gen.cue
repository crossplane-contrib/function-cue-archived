// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/autoscaling/v1beta1

package v1beta1

#CustomizedCapacityMetricSpecificationObservation: {
	// List of up to 10 structures that defines custom capacity metric in predictive scaling policy
	metricDataQueries?: [...#MetricDataQueriesObservation] @go(MetricDataQueries,[]MetricDataQueriesObservation)
}

#CustomizedCapacityMetricSpecificationParameters: {
	// List of up to 10 structures that defines custom capacity metric in predictive scaling policy
	// +kubebuilder:validation:Required
	metricDataQueries: [...#MetricDataQueriesParameters] @go(MetricDataQueries,[]MetricDataQueriesParameters)
}

#CustomizedLoadMetricSpecificationMetricDataQueriesObservation: {
	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	expression?: null | string @go(Expression,*string)

	// Short name for the metric used in predictive scaling policy.
	id?: null | string @go(ID,*string)

	// Human-readable label for this metric or expression.
	label?: null | string @go(Label,*string)

	// Structure that defines CloudWatch metric to be used in predictive scaling policy. You must specify either expression or metric_stat, but not both.
	metricStat?: [...#MetricDataQueriesMetricStatObservation] @go(MetricStat,[]MetricDataQueriesMetricStatObservation)

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default it true
	returnData?: null | bool @go(ReturnData,*bool)
}

#CustomizedLoadMetricSpecificationMetricDataQueriesParameters: {
	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	expression?: null | string @go(Expression,*string)

	// Short name for the metric used in predictive scaling policy.
	// +kubebuilder:validation:Required
	id?: null | string @go(ID,*string)

	// Human-readable label for this metric or expression.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// Structure that defines CloudWatch metric to be used in predictive scaling policy. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	metricStat?: [...#MetricDataQueriesMetricStatParameters] @go(MetricStat,[]MetricDataQueriesMetricStatParameters)

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default it true
	// +kubebuilder:validation:Optional
	returnData?: null | bool @go(ReturnData,*bool)
}

#CustomizedLoadMetricSpecificationObservation: {
	// List of up to 10 structures that defines custom load metric in predictive scaling policy
	metricDataQueries?: [...#CustomizedLoadMetricSpecificationMetricDataQueriesObservation] @go(MetricDataQueries,[]CustomizedLoadMetricSpecificationMetricDataQueriesObservation)
}

#CustomizedLoadMetricSpecificationParameters: {
	// List of up to 10 structures that defines custom load metric in predictive scaling policy
	// +kubebuilder:validation:Required
	metricDataQueries: [...#CustomizedLoadMetricSpecificationMetricDataQueriesParameters] @go(MetricDataQueries,[]CustomizedLoadMetricSpecificationMetricDataQueriesParameters)
}

#CustomizedMetricSpecificationObservation: {
	// Dimensions of the metric.
	metricDimension?: [...#MetricDimensionObservation] @go(MetricDimension,[]MetricDimensionObservation)

	// Name of the metric.
	metricName?: null | string @go(MetricName,*string)

	// Namespace of the metric.
	namespace?: null | string @go(Namespace,*string)

	// Statistic of the metric.
	statistic?: null | string @go(Statistic,*string)

	// Unit of the metrics to return.
	unit?: null | string @go(Unit,*string)
}

#CustomizedMetricSpecificationParameters: {
	// Dimensions of the metric.
	// +kubebuilder:validation:Optional
	metricDimension?: [...#MetricDimensionParameters] @go(MetricDimension,[]MetricDimensionParameters)

	// Name of the metric.
	// +kubebuilder:validation:Required
	metricName?: null | string @go(MetricName,*string)

	// Namespace of the metric.
	// +kubebuilder:validation:Required
	namespace?: null | string @go(Namespace,*string)

	// Statistic of the metric.
	// +kubebuilder:validation:Required
	statistic?: null | string @go(Statistic,*string)

	// Unit of the metrics to return.
	// +kubebuilder:validation:Optional
	unit?: null | string @go(Unit,*string)
}

#CustomizedScalingMetricSpecificationMetricDataQueriesMetricStatObservation: {
	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	metric?: [...#MetricDataQueriesMetricStatMetricObservation] @go(Metric,[]MetricDataQueriesMetricStatMetricObservation)

	// Statistic of the metrics to return.
	stat?: null | string @go(Stat,*string)

	// Unit of the metrics to return.
	unit?: null | string @go(Unit,*string)
}

#CustomizedScalingMetricSpecificationMetricDataQueriesMetricStatParameters: {
	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	// +kubebuilder:validation:Required
	metric: [...#MetricDataQueriesMetricStatMetricParameters] @go(Metric,[]MetricDataQueriesMetricStatMetricParameters)

	// Statistic of the metrics to return.
	// +kubebuilder:validation:Required
	stat?: null | string @go(Stat,*string)

	// Unit of the metrics to return.
	// +kubebuilder:validation:Optional
	unit?: null | string @go(Unit,*string)
}

#CustomizedScalingMetricSpecificationMetricDataQueriesObservation: {
	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	expression?: null | string @go(Expression,*string)

	// Short name for the metric used in predictive scaling policy.
	id?: null | string @go(ID,*string)

	// Human-readable label for this metric or expression.
	label?: null | string @go(Label,*string)

	// Structure that defines CloudWatch metric to be used in predictive scaling policy. You must specify either expression or metric_stat, but not both.
	metricStat?: [...#CustomizedScalingMetricSpecificationMetricDataQueriesMetricStatObservation] @go(MetricStat,[]CustomizedScalingMetricSpecificationMetricDataQueriesMetricStatObservation)

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default it true
	returnData?: null | bool @go(ReturnData,*bool)
}

#CustomizedScalingMetricSpecificationMetricDataQueriesParameters: {
	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	expression?: null | string @go(Expression,*string)

	// Short name for the metric used in predictive scaling policy.
	// +kubebuilder:validation:Required
	id?: null | string @go(ID,*string)

	// Human-readable label for this metric or expression.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// Structure that defines CloudWatch metric to be used in predictive scaling policy. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	metricStat?: [...#CustomizedScalingMetricSpecificationMetricDataQueriesMetricStatParameters] @go(MetricStat,[]CustomizedScalingMetricSpecificationMetricDataQueriesMetricStatParameters)

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default it true
	// +kubebuilder:validation:Optional
	returnData?: null | bool @go(ReturnData,*bool)
}

#CustomizedScalingMetricSpecificationObservation: {
	// List of up to 10 structures that defines custom scaling metric in predictive scaling policy
	metricDataQueries?: [...#CustomizedScalingMetricSpecificationMetricDataQueriesObservation] @go(MetricDataQueries,[]CustomizedScalingMetricSpecificationMetricDataQueriesObservation)
}

#CustomizedScalingMetricSpecificationParameters: {
	// List of up to 10 structures that defines custom scaling metric in predictive scaling policy
	// +kubebuilder:validation:Required
	metricDataQueries: [...#CustomizedScalingMetricSpecificationMetricDataQueriesParameters] @go(MetricDataQueries,[]CustomizedScalingMetricSpecificationMetricDataQueriesParameters)
}

#DimensionsObservation: {
	// Name of the dimension.
	name?: null | string @go(Name,*string)

	// Value of the dimension.
	value?: null | string @go(Value,*string)
}

#DimensionsParameters: {
	// Name of the dimension.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Value of the dimension.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#MetricDataQueriesMetricStatMetricObservation: {
	// Dimensions of the metric.
	dimensions?: [...#MetricStatMetricDimensionsObservation] @go(Dimensions,[]MetricStatMetricDimensionsObservation)

	// Name of the metric.
	metricName?: null | string @go(MetricName,*string)

	// Namespace of the metric.
	namespace?: null | string @go(Namespace,*string)
}

#MetricDataQueriesMetricStatMetricParameters: {
	// Dimensions of the metric.
	// +kubebuilder:validation:Optional
	dimensions?: [...#MetricStatMetricDimensionsParameters] @go(Dimensions,[]MetricStatMetricDimensionsParameters)

	// Name of the metric.
	// +kubebuilder:validation:Required
	metricName?: null | string @go(MetricName,*string)

	// Namespace of the metric.
	// +kubebuilder:validation:Required
	namespace?: null | string @go(Namespace,*string)
}

#MetricDataQueriesMetricStatObservation: {
	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	metric?: [...#MetricStatMetricObservation] @go(Metric,[]MetricStatMetricObservation)

	// Statistic of the metrics to return.
	stat?: null | string @go(Stat,*string)

	// Unit of the metrics to return.
	unit?: null | string @go(Unit,*string)
}

#MetricDataQueriesMetricStatParameters: {
	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	// +kubebuilder:validation:Required
	metric: [...#MetricStatMetricParameters] @go(Metric,[]MetricStatMetricParameters)

	// Statistic of the metrics to return.
	// +kubebuilder:validation:Required
	stat?: null | string @go(Stat,*string)

	// Unit of the metrics to return.
	// +kubebuilder:validation:Optional
	unit?: null | string @go(Unit,*string)
}

#MetricDataQueriesObservation: {
	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	expression?: null | string @go(Expression,*string)

	// Short name for the metric used in predictive scaling policy.
	id?: null | string @go(ID,*string)

	// Human-readable label for this metric or expression.
	label?: null | string @go(Label,*string)

	// Structure that defines CloudWatch metric to be used in predictive scaling policy. You must specify either expression or metric_stat, but not both.
	metricStat?: [...#MetricStatObservation] @go(MetricStat,[]MetricStatObservation)

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default it true
	returnData?: null | bool @go(ReturnData,*bool)
}

#MetricDataQueriesParameters: {
	// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	expression?: null | string @go(Expression,*string)

	// Short name for the metric used in predictive scaling policy.
	// +kubebuilder:validation:Required
	id?: null | string @go(ID,*string)

	// Human-readable label for this metric or expression.
	// +kubebuilder:validation:Optional
	label?: null | string @go(Label,*string)

	// Structure that defines CloudWatch metric to be used in predictive scaling policy. You must specify either expression or metric_stat, but not both.
	// +kubebuilder:validation:Optional
	metricStat?: [...#MetricStatParameters] @go(MetricStat,[]MetricStatParameters)

	// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default it true
	// +kubebuilder:validation:Optional
	returnData?: null | bool @go(ReturnData,*bool)
}

#MetricDimensionObservation: {
	// Name of the dimension.
	name?: null | string @go(Name,*string)

	// Value of the dimension.
	value?: null | string @go(Value,*string)
}

#MetricDimensionParameters: {
	// Name of the dimension.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Value of the dimension.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#MetricDimensionsObservation: {
	// Name of the dimension.
	name?: null | string @go(Name,*string)

	// Value of the dimension.
	value?: null | string @go(Value,*string)
}

#MetricDimensionsParameters: {
	// Name of the dimension.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Value of the dimension.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#MetricObservation: {
	// Dimensions of the metric.
	dimensions?: [...#DimensionsObservation] @go(Dimensions,[]DimensionsObservation)

	// Name of the metric.
	metricName?: null | string @go(MetricName,*string)

	// Namespace of the metric.
	namespace?: null | string @go(Namespace,*string)
}

#MetricParameters: {
	// Dimensions of the metric.
	// +kubebuilder:validation:Optional
	dimensions?: [...#DimensionsParameters] @go(Dimensions,[]DimensionsParameters)

	// Name of the metric.
	// +kubebuilder:validation:Required
	metricName?: null | string @go(MetricName,*string)

	// Namespace of the metric.
	// +kubebuilder:validation:Required
	namespace?: null | string @go(Namespace,*string)
}

#MetricSpecificationObservation: {
	// Customized capacity metric specification. The field is only valid when you use customized_load_metric_specification
	customizedCapacityMetricSpecification?: [...#CustomizedCapacityMetricSpecificationObservation] @go(CustomizedCapacityMetricSpecification,[]CustomizedCapacityMetricSpecificationObservation)

	// Customized load metric specification.
	customizedLoadMetricSpecification?: [...#CustomizedLoadMetricSpecificationObservation] @go(CustomizedLoadMetricSpecification,[]CustomizedLoadMetricSpecificationObservation)

	// Customized scaling metric specification.
	customizedScalingMetricSpecification?: [...#CustomizedScalingMetricSpecificationObservation] @go(CustomizedScalingMetricSpecification,[]CustomizedScalingMetricSpecificationObservation)

	// Predefined load metric specification.
	predefinedLoadMetricSpecification?: [...#PredefinedLoadMetricSpecificationObservation] @go(PredefinedLoadMetricSpecification,[]PredefinedLoadMetricSpecificationObservation)

	// Metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
	predefinedMetricPairSpecification?: [...#PredefinedMetricPairSpecificationObservation] @go(PredefinedMetricPairSpecification,[]PredefinedMetricPairSpecificationObservation)

	// Predefined scaling metric specification.
	predefinedScalingMetricSpecification?: [...#PredefinedScalingMetricSpecificationObservation] @go(PredefinedScalingMetricSpecification,[]PredefinedScalingMetricSpecificationObservation)

	// Target value for the metric.
	targetValue?: null | float64 @go(TargetValue,*float64)
}

#MetricSpecificationParameters: {
	// Customized capacity metric specification. The field is only valid when you use customized_load_metric_specification
	// +kubebuilder:validation:Optional
	customizedCapacityMetricSpecification?: [...#CustomizedCapacityMetricSpecificationParameters] @go(CustomizedCapacityMetricSpecification,[]CustomizedCapacityMetricSpecificationParameters)

	// Customized load metric specification.
	// +kubebuilder:validation:Optional
	customizedLoadMetricSpecification?: [...#CustomizedLoadMetricSpecificationParameters] @go(CustomizedLoadMetricSpecification,[]CustomizedLoadMetricSpecificationParameters)

	// Customized scaling metric specification.
	// +kubebuilder:validation:Optional
	customizedScalingMetricSpecification?: [...#CustomizedScalingMetricSpecificationParameters] @go(CustomizedScalingMetricSpecification,[]CustomizedScalingMetricSpecificationParameters)

	// Predefined load metric specification.
	// +kubebuilder:validation:Optional
	predefinedLoadMetricSpecification?: [...#PredefinedLoadMetricSpecificationParameters] @go(PredefinedLoadMetricSpecification,[]PredefinedLoadMetricSpecificationParameters)

	// Metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
	// +kubebuilder:validation:Optional
	predefinedMetricPairSpecification?: [...#PredefinedMetricPairSpecificationParameters] @go(PredefinedMetricPairSpecification,[]PredefinedMetricPairSpecificationParameters)

	// Predefined scaling metric specification.
	// +kubebuilder:validation:Optional
	predefinedScalingMetricSpecification?: [...#PredefinedScalingMetricSpecificationParameters] @go(PredefinedScalingMetricSpecification,[]PredefinedScalingMetricSpecificationParameters)

	// Target value for the metric.
	// +kubebuilder:validation:Required
	targetValue?: null | float64 @go(TargetValue,*float64)
}

#MetricStatMetricDimensionsObservation: {
	// Name of the dimension.
	name?: null | string @go(Name,*string)

	// Value of the dimension.
	value?: null | string @go(Value,*string)
}

#MetricStatMetricDimensionsParameters: {
	// Name of the dimension.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Value of the dimension.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#MetricStatMetricObservation: {
	// Dimensions of the metric.
	dimensions?: [...#MetricDimensionsObservation] @go(Dimensions,[]MetricDimensionsObservation)

	// Name of the metric.
	metricName?: null | string @go(MetricName,*string)

	// Namespace of the metric.
	namespace?: null | string @go(Namespace,*string)
}

#MetricStatMetricParameters: {
	// Dimensions of the metric.
	// +kubebuilder:validation:Optional
	dimensions?: [...#MetricDimensionsParameters] @go(Dimensions,[]MetricDimensionsParameters)

	// Name of the metric.
	// +kubebuilder:validation:Required
	metricName?: null | string @go(MetricName,*string)

	// Namespace of the metric.
	// +kubebuilder:validation:Required
	namespace?: null | string @go(Namespace,*string)
}

#MetricStatObservation: {
	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	metric?: [...#MetricObservation] @go(Metric,[]MetricObservation)

	// Statistic of the metrics to return.
	stat?: null | string @go(Stat,*string)

	// Unit of the metrics to return.
	unit?: null | string @go(Unit,*string)
}

#MetricStatParameters: {
	// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
	// +kubebuilder:validation:Required
	metric: [...#MetricParameters] @go(Metric,[]MetricParameters)

	// Statistic of the metrics to return.
	// +kubebuilder:validation:Required
	stat?: null | string @go(Stat,*string)

	// Unit of the metrics to return.
	// +kubebuilder:validation:Optional
	unit?: null | string @go(Unit,*string)
}

#PolicyObservation: {
	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
	adjustmentType?: null | string @go(AdjustmentType,*string)

	// ARN assigned by AWS to the scaling policy.
	arn?: null | string @go(Arn,*string)

	// Name of the autoscaling group.
	autoscalingGroupName?: null | string @go(AutoscalingGroupName,*string)

	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	cooldown?: null | float64 @go(Cooldown,*float64)

	// Whether the scaling policy is enabled or disabled. Default: true.
	enabled?: null | bool @go(Enabled,*bool)

	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	estimatedInstanceWarmup?: null | float64 @go(EstimatedInstanceWarmup,*float64)

	// Short name for the metric used in predictive scaling policy.
	id?: null | string @go(ID,*string)

	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	metricAggregationType?: null | string @go(MetricAggregationType,*string)

	// Minimum value to scale by when adjustment_type is set to PercentChangeInCapacity.
	minAdjustmentMagnitude?: null | float64 @go(MinAdjustmentMagnitude,*float64)

	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	policyType?: null | string @go(PolicyType,*string)

	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	predictiveScalingConfiguration?: [...#PredictiveScalingConfigurationObservation] @go(PredictiveScalingConfiguration,[]PredictiveScalingConfigurationObservation)

	// Number of instances by which to scale. adjustment_type determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.
	scalingAdjustment?: null | float64 @go(ScalingAdjustment,*float64)

	// Set of adjustments that manage
	// group scaling. These have the following structure:
	stepAdjustment?: [...#StepAdjustmentObservation] @go(StepAdjustment,[]StepAdjustmentObservation)

	// Target tracking policy. These have the following structure:
	targetTrackingConfiguration?: [...#TargetTrackingConfigurationObservation] @go(TargetTrackingConfiguration,[]TargetTrackingConfigurationObservation)
}

#PolicyParameters: {
	// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
	// +kubebuilder:validation:Optional
	adjustmentType?: null | string @go(AdjustmentType,*string)

	// Name of the autoscaling group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/autoscaling/v1beta1.AutoscalingGroup
	// +kubebuilder:validation:Optional
	autoscalingGroupName?: null | string @go(AutoscalingGroupName,*string)

	// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
	// +kubebuilder:validation:Optional
	cooldown?: null | float64 @go(Cooldown,*float64)

	// Whether the scaling policy is enabled or disabled. Default: true.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
	// +kubebuilder:validation:Optional
	estimatedInstanceWarmup?: null | float64 @go(EstimatedInstanceWarmup,*float64)

	// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
	// +kubebuilder:validation:Optional
	metricAggregationType?: null | string @go(MetricAggregationType,*string)

	// Minimum value to scale by when adjustment_type is set to PercentChangeInCapacity.
	// +kubebuilder:validation:Optional
	minAdjustmentMagnitude?: null | float64 @go(MinAdjustmentMagnitude,*float64)

	// Policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
	// +kubebuilder:validation:Optional
	policyType?: null | string @go(PolicyType,*string)

	// Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
	// +kubebuilder:validation:Optional
	predictiveScalingConfiguration?: [...#PredictiveScalingConfigurationParameters] @go(PredictiveScalingConfiguration,[]PredictiveScalingConfigurationParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Number of instances by which to scale. adjustment_type determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.
	// +kubebuilder:validation:Optional
	scalingAdjustment?: null | float64 @go(ScalingAdjustment,*float64)

	// Set of adjustments that manage
	// group scaling. These have the following structure:
	// +kubebuilder:validation:Optional
	stepAdjustment?: [...#StepAdjustmentParameters] @go(StepAdjustment,[]StepAdjustmentParameters)

	// Target tracking policy. These have the following structure:
	// +kubebuilder:validation:Optional
	targetTrackingConfiguration?: [...#TargetTrackingConfigurationParameters] @go(TargetTrackingConfiguration,[]TargetTrackingConfigurationParameters)
}

#PredefinedLoadMetricSpecificationObservation: {
	// Metric type. Valid values are ASGTotalCPUUtilization, ASGTotalNetworkIn, ASGTotalNetworkOut, or ALBTargetGroupRequestCount.
	predefinedMetricType?: null | string @go(PredefinedMetricType,*string)

	// Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group.
	resourceLabel?: null | string @go(ResourceLabel,*string)
}

#PredefinedLoadMetricSpecificationParameters: {
	// Metric type. Valid values are ASGTotalCPUUtilization, ASGTotalNetworkIn, ASGTotalNetworkOut, or ALBTargetGroupRequestCount.
	// +kubebuilder:validation:Required
	predefinedMetricType?: null | string @go(PredefinedMetricType,*string)

	// Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group.
	// +kubebuilder:validation:Optional
	resourceLabel?: null | string @go(ResourceLabel,*string)
}

#PredefinedMetricPairSpecificationObservation: {
	// Which metrics to use. There are two different types of metrics for each metric type: one is a load metric and one is a scaling metric. For example, if the metric type is ASGCPUUtilization, the Auto Scaling group's total CPU metric is used as the load metric, and the average CPU metric is used for the scaling metric. Valid values are ASGCPUUtilization, ASGNetworkIn, ASGNetworkOut, or ALBRequestCount.
	predefinedMetricType?: null | string @go(PredefinedMetricType,*string)

	// Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group.
	resourceLabel?: null | string @go(ResourceLabel,*string)
}

#PredefinedMetricPairSpecificationParameters: {
	// Which metrics to use. There are two different types of metrics for each metric type: one is a load metric and one is a scaling metric. For example, if the metric type is ASGCPUUtilization, the Auto Scaling group's total CPU metric is used as the load metric, and the average CPU metric is used for the scaling metric. Valid values are ASGCPUUtilization, ASGNetworkIn, ASGNetworkOut, or ALBRequestCount.
	// +kubebuilder:validation:Required
	predefinedMetricType?: null | string @go(PredefinedMetricType,*string)

	// Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group.
	// +kubebuilder:validation:Optional
	resourceLabel?: null | string @go(ResourceLabel,*string)
}

#PredefinedMetricSpecificationObservation: {
	// Describes a scaling metric for a predictive scaling policy. Valid values are ASGAverageCPUUtilization, ASGAverageNetworkIn, ASGAverageNetworkOut, or ALBRequestCountPerTarget.
	predefinedMetricType?: null | string @go(PredefinedMetricType,*string)

	// Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group.
	resourceLabel?: null | string @go(ResourceLabel,*string)
}

#PredefinedMetricSpecificationParameters: {
	// Describes a scaling metric for a predictive scaling policy. Valid values are ASGAverageCPUUtilization, ASGAverageNetworkIn, ASGAverageNetworkOut, or ALBRequestCountPerTarget.
	// +kubebuilder:validation:Required
	predefinedMetricType?: null | string @go(PredefinedMetricType,*string)

	// Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group.
	// +kubebuilder:validation:Optional
	resourceLabel?: null | string @go(ResourceLabel,*string)
}

#PredefinedScalingMetricSpecificationObservation: {
	// Describes a scaling metric for a predictive scaling policy. Valid values are ASGAverageCPUUtilization, ASGAverageNetworkIn, ASGAverageNetworkOut, or ALBRequestCountPerTarget.
	predefinedMetricType?: null | string @go(PredefinedMetricType,*string)

	// Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group.
	resourceLabel?: null | string @go(ResourceLabel,*string)
}

#PredefinedScalingMetricSpecificationParameters: {
	// Describes a scaling metric for a predictive scaling policy. Valid values are ASGAverageCPUUtilization, ASGAverageNetworkIn, ASGAverageNetworkOut, or ALBRequestCountPerTarget.
	// +kubebuilder:validation:Required
	predefinedMetricType?: null | string @go(PredefinedMetricType,*string)

	// Label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group.
	// +kubebuilder:validation:Optional
	resourceLabel?: null | string @go(ResourceLabel,*string)
}

#PredictiveScalingConfigurationObservation: {
	// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Valid values are HonorMaxCapacity or IncreaseMaxCapacity. Default is HonorMaxCapacity.
	maxCapacityBreachBehavior?: null | string @go(MaxCapacityBreachBehavior,*string)

	// Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. Valid range is 0 to 100. If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.
	maxCapacityBuffer?: null | string @go(MaxCapacityBuffer,*string)

	// This structure includes the metrics and target utilization to use for predictive scaling.
	metricSpecification?: [...#MetricSpecificationObservation] @go(MetricSpecification,[]MetricSpecificationObservation)

	// Predictive scaling mode. Valid values are ForecastAndScale and ForecastOnly. Default is ForecastOnly.
	mode?: null | string @go(Mode,*string)

	// Amount of time, in seconds, by which the instance launch time can be advanced. Minimum is 0.
	schedulingBufferTime?: null | string @go(SchedulingBufferTime,*string)
}

#PredictiveScalingConfigurationParameters: {
	// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Valid values are HonorMaxCapacity or IncreaseMaxCapacity. Default is HonorMaxCapacity.
	// +kubebuilder:validation:Optional
	maxCapacityBreachBehavior?: null | string @go(MaxCapacityBreachBehavior,*string)

	// Size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. Valid range is 0 to 100. If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.
	// +kubebuilder:validation:Optional
	maxCapacityBuffer?: null | string @go(MaxCapacityBuffer,*string)

	// This structure includes the metrics and target utilization to use for predictive scaling.
	// +kubebuilder:validation:Required
	metricSpecification: [...#MetricSpecificationParameters] @go(MetricSpecification,[]MetricSpecificationParameters)

	// Predictive scaling mode. Valid values are ForecastAndScale and ForecastOnly. Default is ForecastOnly.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// Amount of time, in seconds, by which the instance launch time can be advanced. Minimum is 0.
	// +kubebuilder:validation:Optional
	schedulingBufferTime?: null | string @go(SchedulingBufferTime,*string)
}

#StepAdjustmentObservation: {
	// Lower bound for the
	// difference between the alarm threshold and the CloudWatch metric.
	// Without a value, AWS will treat this bound as negative infinity.
	metricIntervalLowerBound?: null | string @go(MetricIntervalLowerBound,*string)

	// Upper bound for the
	// difference between the alarm threshold and the CloudWatch metric.
	// Without a value, AWS will treat this bound as positive infinity. The upper bound
	// must be greater than the lower bound.
	metricIntervalUpperBound?: null | string @go(MetricIntervalUpperBound,*string)

	// Number of instances by which to scale. adjustment_type determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.
	scalingAdjustment?: null | float64 @go(ScalingAdjustment,*float64)
}

#StepAdjustmentParameters: {
	// Lower bound for the
	// difference between the alarm threshold and the CloudWatch metric.
	// Without a value, AWS will treat this bound as negative infinity.
	// +kubebuilder:validation:Optional
	metricIntervalLowerBound?: null | string @go(MetricIntervalLowerBound,*string)

	// Upper bound for the
	// difference between the alarm threshold and the CloudWatch metric.
	// Without a value, AWS will treat this bound as positive infinity. The upper bound
	// must be greater than the lower bound.
	// +kubebuilder:validation:Optional
	metricIntervalUpperBound?: null | string @go(MetricIntervalUpperBound,*string)

	// Number of instances by which to scale. adjustment_type determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.
	// +kubebuilder:validation:Required
	scalingAdjustment?: null | float64 @go(ScalingAdjustment,*float64)
}

#TargetTrackingConfigurationObservation: {
	// Customized metric. Conflicts with predefined_metric_specification.
	customizedMetricSpecification?: [...#CustomizedMetricSpecificationObservation] @go(CustomizedMetricSpecification,[]CustomizedMetricSpecificationObservation)

	// Whether scale in by the target tracking policy is disabled.
	disableScaleIn?: null | bool @go(DisableScaleIn,*bool)

	// Predefined metric. Conflicts with customized_metric_specification.
	predefinedMetricSpecification?: [...#PredefinedMetricSpecificationObservation] @go(PredefinedMetricSpecification,[]PredefinedMetricSpecificationObservation)

	// Target value for the metric.
	targetValue?: null | float64 @go(TargetValue,*float64)
}

#TargetTrackingConfigurationParameters: {
	// Customized metric. Conflicts with predefined_metric_specification.
	// +kubebuilder:validation:Optional
	customizedMetricSpecification?: [...#CustomizedMetricSpecificationParameters] @go(CustomizedMetricSpecification,[]CustomizedMetricSpecificationParameters)

	// Whether scale in by the target tracking policy is disabled.
	// +kubebuilder:validation:Optional
	disableScaleIn?: null | bool @go(DisableScaleIn,*bool)

	// Predefined metric. Conflicts with customized_metric_specification.
	// +kubebuilder:validation:Optional
	predefinedMetricSpecification?: [...#PredefinedMetricSpecificationParameters] @go(PredefinedMetricSpecification,[]PredefinedMetricSpecificationParameters)

	// Target value for the metric.
	// +kubebuilder:validation:Required
	targetValue?: null | float64 @go(TargetValue,*float64)
}

// PolicySpec defines the desired state of Policy
#PolicySpec: {
	forProvider: #PolicyParameters @go(ForProvider)
}

// PolicyStatus defines the observed state of Policy.
#PolicyStatus: {
	atProvider?: #PolicyObservation @go(AtProvider)
}

// Policy is the Schema for the Policys API. Provides an AutoScaling Scaling Group resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Policy: {
	spec:    #PolicySpec   @go(Spec)
	status?: #PolicyStatus @go(Status)
}

// PolicyList contains a list of Policys
#PolicyList: {
	items: [...#Policy] @go(Items,[]Policy)
}
