// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/iot/v1beta1

package v1beta1

#CloudwatchAlarmObservation: {
}

#CloudwatchAlarmParameters: {
	// The CloudWatch alarm name.
	// +kubebuilder:validation:Required
	alarmName?: null | string @go(AlarmName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The reason for the alarm change.
	// +kubebuilder:validation:Required
	stateReason?: null | string @go(StateReason,*string)

	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	// +kubebuilder:validation:Required
	stateValue?: null | string @go(StateValue,*string)
}

#CloudwatchLogsObservation: {
}

#CloudwatchLogsParameters: {
	// The CloudWatch log group name.
	// +kubebuilder:validation:Required
	logGroupName?: null | string @go(LogGroupName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#CloudwatchMetricObservation: {
}

#CloudwatchMetricParameters: {
	// The CloudWatch metric name.
	// +kubebuilder:validation:Required
	metricName?: null | string @go(MetricName,*string)

	// The CloudWatch metric namespace name.
	// +kubebuilder:validation:Required
	metricNamespace?: null | string @go(MetricNamespace,*string)

	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	// +kubebuilder:validation:Optional
	metricTimestamp?: null | string @go(MetricTimestamp,*string)

	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	// +kubebuilder:validation:Required
	metricUnit?: null | string @go(MetricUnit,*string)

	// The CloudWatch metric value.
	// +kubebuilder:validation:Required
	metricValue?: null | string @go(MetricValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#DimensionObservation: {
}

#DimensionParameters: {
	// The name of the rule.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#DynamodbObservation: {
}

#DynamodbParameters: {
	// The hash key name.
	// +kubebuilder:validation:Required
	hashKeyField?: null | string @go(HashKeyField,*string)

	// The hash key type. Valid values are "STRING" or "NUMBER".
	// +kubebuilder:validation:Optional
	hashKeyType?: null | string @go(HashKeyType,*string)

	// The hash key value.
	// +kubebuilder:validation:Required
	hashKeyValue?: null | string @go(HashKeyValue,*string)

	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	// +kubebuilder:validation:Optional
	operation?: null | string @go(Operation,*string)

	// The action payload.
	// +kubebuilder:validation:Optional
	payloadField?: null | string @go(PayloadField,*string)

	// The range key name.
	// +kubebuilder:validation:Optional
	rangeKeyField?: null | string @go(RangeKeyField,*string)

	// The range key type. Valid values are "STRING" or "NUMBER".
	// +kubebuilder:validation:Optional
	rangeKeyType?: null | string @go(RangeKeyType,*string)

	// The range key value.
	// +kubebuilder:validation:Optional
	rangeKeyValue?: null | string @go(RangeKeyValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	// +kubebuilder:validation:Required
	tableName?: null | string @go(TableName,*string)
}

#Dynamodbv2Observation: {
}

#Dynamodbv2Parameters: {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	// +kubebuilder:validation:Optional
	putItem?: [...#PutItemParameters] @go(PutItem,[]PutItemParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#Dynamodbv2PutItemObservation: {
}

#Dynamodbv2PutItemParameters: {
	// The name of the DynamoDB table.
	// +kubebuilder:validation:Required
	tableName?: null | string @go(TableName,*string)
}

#ElasticsearchObservation: {
}

#ElasticsearchParameters: {
	// The endpoint of your Elasticsearch domain.
	// +kubebuilder:validation:Required
	endpoint?: null | string @go(Endpoint,*string)

	// The unique identifier for the document you are storing.
	// +kubebuilder:validation:Required
	id?: null | string @go(ID,*string)

	// The Elasticsearch index where you want to store your data.
	// +kubebuilder:validation:Required
	index?: null | string @go(Index,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The type of document you are storing.
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)
}

#ErrorActionCloudwatchAlarmObservation: {
}

#ErrorActionCloudwatchAlarmParameters: {
	// The CloudWatch alarm name.
	// +kubebuilder:validation:Required
	alarmName?: null | string @go(AlarmName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The reason for the alarm change.
	// +kubebuilder:validation:Required
	stateReason?: null | string @go(StateReason,*string)

	// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
	// +kubebuilder:validation:Required
	stateValue?: null | string @go(StateValue,*string)
}

#ErrorActionCloudwatchLogsObservation: {
}

#ErrorActionCloudwatchLogsParameters: {
	// The CloudWatch log group name.
	// +kubebuilder:validation:Required
	logGroupName?: null | string @go(LogGroupName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionCloudwatchMetricObservation: {
}

#ErrorActionCloudwatchMetricParameters: {
	// The CloudWatch metric name.
	// +kubebuilder:validation:Required
	metricName?: null | string @go(MetricName,*string)

	// The CloudWatch metric namespace name.
	// +kubebuilder:validation:Required
	metricNamespace?: null | string @go(MetricNamespace,*string)

	// An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
	// +kubebuilder:validation:Optional
	metricTimestamp?: null | string @go(MetricTimestamp,*string)

	// The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
	// +kubebuilder:validation:Required
	metricUnit?: null | string @go(MetricUnit,*string)

	// The CloudWatch metric value.
	// +kubebuilder:validation:Required
	metricValue?: null | string @go(MetricValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionDynamodbObservation: {
}

#ErrorActionDynamodbParameters: {
	// The hash key name.
	// +kubebuilder:validation:Required
	hashKeyField?: null | string @go(HashKeyField,*string)

	// The hash key type. Valid values are "STRING" or "NUMBER".
	// +kubebuilder:validation:Optional
	hashKeyType?: null | string @go(HashKeyType,*string)

	// The hash key value.
	// +kubebuilder:validation:Required
	hashKeyValue?: null | string @go(HashKeyValue,*string)

	// The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
	// +kubebuilder:validation:Optional
	operation?: null | string @go(Operation,*string)

	// The action payload.
	// +kubebuilder:validation:Optional
	payloadField?: null | string @go(PayloadField,*string)

	// The range key name.
	// +kubebuilder:validation:Optional
	rangeKeyField?: null | string @go(RangeKeyField,*string)

	// The range key type. Valid values are "STRING" or "NUMBER".
	// +kubebuilder:validation:Optional
	rangeKeyType?: null | string @go(RangeKeyType,*string)

	// The range key value.
	// +kubebuilder:validation:Optional
	rangeKeyValue?: null | string @go(RangeKeyValue,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	// +kubebuilder:validation:Required
	tableName?: null | string @go(TableName,*string)
}

#ErrorActionDynamodbv2Observation: {
}

#ErrorActionDynamodbv2Parameters: {
	// Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
	// +kubebuilder:validation:Optional
	putItem?: [...#Dynamodbv2PutItemParameters] @go(PutItem,[]Dynamodbv2PutItemParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#ErrorActionElasticsearchObservation: {
}

#ErrorActionElasticsearchParameters: {
	// The endpoint of your Elasticsearch domain.
	// +kubebuilder:validation:Required
	endpoint?: null | string @go(Endpoint,*string)

	// The unique identifier for the document you are storing.
	// +kubebuilder:validation:Required
	id?: null | string @go(ID,*string)

	// The Elasticsearch index where you want to store your data.
	// +kubebuilder:validation:Required
	index?: null | string @go(Index,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The type of document you are storing.
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)
}

#ErrorActionObservation: {
}

#ErrorActionParameters: {
	// +kubebuilder:validation:Optional
	cloudwatchAlarm?: [...#ErrorActionCloudwatchAlarmParameters] @go(CloudwatchAlarm,[]ErrorActionCloudwatchAlarmParameters)

	// +kubebuilder:validation:Optional
	cloudwatchLogs?: [...#ErrorActionCloudwatchLogsParameters] @go(CloudwatchLogs,[]ErrorActionCloudwatchLogsParameters)

	// +kubebuilder:validation:Optional
	cloudwatchMetric?: [...#ErrorActionCloudwatchMetricParameters] @go(CloudwatchMetric,[]ErrorActionCloudwatchMetricParameters)

	// +kubebuilder:validation:Optional
	dynamodb?: [...#ErrorActionDynamodbParameters] @go(Dynamodb,[]ErrorActionDynamodbParameters)

	// +kubebuilder:validation:Optional
	dynamodbv2?: [...#ErrorActionDynamodbv2Parameters] @go(Dynamodbv2,[]ErrorActionDynamodbv2Parameters)

	// +kubebuilder:validation:Optional
	elasticsearch?: [...#ErrorActionElasticsearchParameters] @go(Elasticsearch,[]ErrorActionElasticsearchParameters)

	// +kubebuilder:validation:Optional
	firehose?: [...#FirehoseParameters] @go(Firehose,[]FirehoseParameters)

	// +kubebuilder:validation:Optional
	http?: [...#HTTPParameters] @go(HTTP,[]HTTPParameters)

	// +kubebuilder:validation:Optional
	iotAnalytics?: [...#IotAnalyticsParameters] @go(IotAnalytics,[]IotAnalyticsParameters)

	// +kubebuilder:validation:Optional
	iotEvents?: [...#IotEventsParameters] @go(IotEvents,[]IotEventsParameters)

	// +kubebuilder:validation:Optional
	kafka?: [...#KafkaParameters] @go(Kafka,[]KafkaParameters)

	// +kubebuilder:validation:Optional
	kinesis?: [...#KinesisParameters] @go(Kinesis,[]KinesisParameters)

	// +kubebuilder:validation:Optional
	lambda?: [...#LambdaParameters] @go(Lambda,[]LambdaParameters)

	// +kubebuilder:validation:Optional
	republish?: [...#RepublishParameters] @go(Republish,[]RepublishParameters)

	// +kubebuilder:validation:Optional
	s3?: [...#S3Parameters] @go(S3,[]S3Parameters)

	// +kubebuilder:validation:Optional
	sns?: [...#SnsParameters] @go(Sns,[]SnsParameters)

	// +kubebuilder:validation:Optional
	sqs?: [...#SqsParameters] @go(Sqs,[]SqsParameters)

	// +kubebuilder:validation:Optional
	stepFunctions?: [...#StepFunctionsParameters] @go(StepFunctions,[]StepFunctionsParameters)

	// +kubebuilder:validation:Optional
	timestream?: [...#TimestreamParameters] @go(Timestream,[]TimestreamParameters)
}

#FirehoseObservation: {
}

#FirehoseParameters: {
	// The delivery stream name.
	// +kubebuilder:validation:Required
	deliveryStreamName?: null | string @go(DeliveryStreamName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	// +kubebuilder:validation:Optional
	separator?: null | string @go(Separator,*string)
}

#HTTPHTTPHeaderObservation: {
}

#HTTPHTTPHeaderParameters: {
	// The name of the HTTP header.
	// +kubebuilder:validation:Required
	key?: null | string @go(Key,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#HTTPHeaderObservation: {
}

#HTTPHeaderParameters: {
	// The name of the HTTP header.
	// +kubebuilder:validation:Required
	key?: null | string @go(Key,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#HTTPObservation: {
}

#HTTPParameters: {
	// The HTTPS URL used to verify ownership of url.
	// +kubebuilder:validation:Optional
	confirmationUrl?: null | string @go(ConfirmationURL,*string)

	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	// +kubebuilder:validation:Optional
	httpHeader?: [...#HTTPHeaderParameters] @go(HTTPHeader,[]HTTPHeaderParameters)

	// The HTTPS URL.
	// +kubebuilder:validation:Required
	url?: null | string @go(URL,*string)
}

#IotAnalyticsObservation: {
}

#IotAnalyticsParameters: {
	// Name of AWS IOT Analytics channel.
	// +kubebuilder:validation:Required
	channelName?: null | string @go(ChannelName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#IotEventsObservation: {
}

#IotEventsParameters: {
	// The name of the AWS IoT Events input.
	// +kubebuilder:validation:Required
	inputName?: null | string @go(InputName,*string)

	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	// +kubebuilder:validation:Optional
	messageId?: null | string @go(MessageID,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#KafkaObservation: {
}

#KafkaParameters: {
	// Properties of the Apache Kafka producer client. For more info, see the AWS documentation.
	// +kubebuilder:validation:Required
	clientProperties: {[string]: null | string} @go(ClientProperties,map[string]*string)

	// The ARN of Kafka action's VPC aws_iot_topic_rule_destination .
	// +kubebuilder:validation:Required
	destinationArn?: null | string @go(DestinationArn,*string)

	// The name of the HTTP header.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The Kafka message partition.
	// +kubebuilder:validation:Optional
	partition?: null | string @go(Partition,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	// +kubebuilder:validation:Required
	topic?: null | string @go(Topic,*string)
}

#KinesisObservation: {
}

#KinesisParameters: {
	// The partition key.
	// +kubebuilder:validation:Optional
	partitionKey?: null | string @go(PartitionKey,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Amazon Kinesis stream.
	// +kubebuilder:validation:Required
	streamName?: null | string @go(StreamName,*string)
}

#LambdaObservation: {
}

#LambdaParameters: {
	// The ARN of the Lambda function.
	// +kubebuilder:validation:Required
	functionArn?: null | string @go(FunctionArn,*string)
}

#PutItemObservation: {
}

#PutItemParameters: {
	// The name of the DynamoDB table.
	// +kubebuilder:validation:Required
	tableName?: null | string @go(TableName,*string)
}

#RepublishObservation: {
}

#RepublishParameters: {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	// +kubebuilder:validation:Optional
	qos?: null | float64 @go(Qos,*float64)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	// +kubebuilder:validation:Required
	topic?: null | string @go(Topic,*string)
}

#S3Observation: {
}

#S3Parameters: {
	// The Amazon S3 bucket name.
	// +kubebuilder:validation:Required
	bucketName?: null | string @go(BucketName,*string)

	// The Amazon S3 canned ACL that controls access to the object identified by the object key. Valid values.
	// +kubebuilder:validation:Optional
	cannedAcl?: null | string @go(CannedACL,*string)

	// The name of the HTTP header.
	// +kubebuilder:validation:Required
	key?: null | string @go(Key,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#SnsObservation: {
}

#SnsParameters: {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	// +kubebuilder:validation:Optional
	messageFormat?: null | string @go(MessageFormat,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The ARN of the SNS topic.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	targetArn?: null | string @go(TargetArn,*string)
}

#SqsObservation: {
}

#SqsParameters: {
	// The URL of the Amazon SQS queue.
	// +kubebuilder:validation:Required
	queueUrl?: null | string @go(QueueURL,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// Specifies whether to use Base64 encoding.
	// +kubebuilder:validation:Required
	useBase64?: null | bool @go(UseBase64,*bool)
}

#StepFunctionsObservation: {
}

#StepFunctionsParameters: {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	// +kubebuilder:validation:Optional
	executionNamePrefix?: null | string @go(ExecutionNamePrefix,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Step Functions state machine whose execution will be started.
	// +kubebuilder:validation:Required
	stateMachineName?: null | string @go(StateMachineName,*string)
}

#TimestampObservation: {
}

#TimestampParameters: {
	// The precision of the timestamp value that results from the expression described in value. Valid values: SECONDS, MILLISECONDS, MICROSECONDS, NANOSECONDS.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#TimestreamDimensionObservation: {
}

#TimestreamDimensionParameters: {
	// The name of the rule.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#TimestreamObservation: {
}

#TimestreamParameters: {
	// The name of an Amazon Timestream database.
	// +kubebuilder:validation:Required
	databaseName?: null | string @go(DatabaseName,*string)

	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	// +kubebuilder:validation:Required
	dimension: [...#DimensionParameters] @go(Dimension,[]DimensionParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	// +kubebuilder:validation:Required
	tableName?: null | string @go(TableName,*string)

	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	// +kubebuilder:validation:Optional
	timestamp?: [...#TimestampParameters] @go(Timestamp,[]TimestampParameters)
}

#TimestreamTimestampObservation: {
}

#TimestreamTimestampParameters: {
	// The precision of the timestamp value that results from the expression described in value. Valid values: SECONDS, MILLISECONDS, MICROSECONDS, NANOSECONDS.
	// +kubebuilder:validation:Required
	unit?: null | string @go(Unit,*string)

	// The value of the HTTP header.
	// +kubebuilder:validation:Required
	value?: null | string @go(Value,*string)
}

#TopicRuleFirehoseObservation: {
}

#TopicRuleFirehoseParameters: {
	// The delivery stream name.
	// +kubebuilder:validation:Required
	deliveryStreamName?: null | string @go(DeliveryStreamName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
	// +kubebuilder:validation:Optional
	separator?: null | string @go(Separator,*string)
}

#TopicRuleHTTPObservation: {
}

#TopicRuleHTTPParameters: {
	// The HTTPS URL used to verify ownership of url.
	// +kubebuilder:validation:Optional
	confirmationUrl?: null | string @go(ConfirmationURL,*string)

	// Custom HTTP header IoT Core should send. It is possible to define more than one custom header.
	// +kubebuilder:validation:Optional
	httpHeader?: [...#HTTPHTTPHeaderParameters] @go(HTTPHeader,[]HTTPHTTPHeaderParameters)

	// The HTTPS URL.
	// +kubebuilder:validation:Required
	url?: null | string @go(URL,*string)
}

#TopicRuleIotAnalyticsObservation: {
}

#TopicRuleIotAnalyticsParameters: {
	// Name of AWS IOT Analytics channel.
	// +kubebuilder:validation:Required
	channelName?: null | string @go(ChannelName,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleIotEventsObservation: {
}

#TopicRuleIotEventsParameters: {
	// The name of the AWS IoT Events input.
	// +kubebuilder:validation:Required
	inputName?: null | string @go(InputName,*string)

	// Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
	// +kubebuilder:validation:Optional
	messageId?: null | string @go(MessageID,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleKafkaObservation: {
}

#TopicRuleKafkaParameters: {
	// Properties of the Apache Kafka producer client. For more info, see the AWS documentation.
	// +kubebuilder:validation:Required
	clientProperties: {[string]: null | string} @go(ClientProperties,map[string]*string)

	// The ARN of Kafka action's VPC aws_iot_topic_rule_destination .
	// +kubebuilder:validation:Required
	destinationArn?: null | string @go(DestinationArn,*string)

	// The name of the HTTP header.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The Kafka message partition.
	// +kubebuilder:validation:Optional
	partition?: null | string @go(Partition,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	// +kubebuilder:validation:Required
	topic?: null | string @go(Topic,*string)
}

#TopicRuleKinesisObservation: {
}

#TopicRuleKinesisParameters: {
	// The partition key.
	// +kubebuilder:validation:Optional
	partitionKey?: null | string @go(PartitionKey,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Amazon Kinesis stream.
	// +kubebuilder:validation:Required
	streamName?: null | string @go(StreamName,*string)
}

#TopicRuleLambdaObservation: {
}

#TopicRuleLambdaParameters: {
	// The ARN of the Lambda function.
	// +kubebuilder:validation:Required
	functionArn?: null | string @go(FunctionArn,*string)
}

#TopicRuleObservation: {
	// The ARN of the topic rule
	arn?: null | string @go(Arn,*string)

	// The unique identifier for the document you are storing.
	id?: null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#TopicRuleParameters: {
	// +kubebuilder:validation:Optional
	cloudwatchAlarm?: [...#CloudwatchAlarmParameters] @go(CloudwatchAlarm,[]CloudwatchAlarmParameters)

	// +kubebuilder:validation:Optional
	cloudwatchLogs?: [...#CloudwatchLogsParameters] @go(CloudwatchLogs,[]CloudwatchLogsParameters)

	// +kubebuilder:validation:Optional
	cloudwatchMetric?: [...#CloudwatchMetricParameters] @go(CloudwatchMetric,[]CloudwatchMetricParameters)

	// The description of the rule.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// +kubebuilder:validation:Optional
	dynamodb?: [...#DynamodbParameters] @go(Dynamodb,[]DynamodbParameters)

	// +kubebuilder:validation:Optional
	dynamodbv2?: [...#Dynamodbv2Parameters] @go(Dynamodbv2,[]Dynamodbv2Parameters)

	// +kubebuilder:validation:Optional
	elasticsearch?: [...#ElasticsearchParameters] @go(Elasticsearch,[]ElasticsearchParameters)

	// Specifies whether the rule is enabled.
	// +kubebuilder:validation:Required
	enabled?: null | bool @go(Enabled,*bool)

	// Configuration block with error action to be associated with the rule. See the documentation for cloudwatch_alarm, cloudwatch_logs, cloudwatch_metric, dynamodb, dynamodbv2, elasticsearch, firehose, http, iot_analytics, iot_events, kafka, kinesis, lambda, republish, s3, sns, sqs, step_functions, timestream configuration blocks for further configuration details.
	// +kubebuilder:validation:Optional
	errorAction?: [...#ErrorActionParameters] @go(ErrorAction,[]ErrorActionParameters)

	// +kubebuilder:validation:Optional
	firehose?: [...#TopicRuleFirehoseParameters] @go(Firehose,[]TopicRuleFirehoseParameters)

	// +kubebuilder:validation:Optional
	http?: [...#TopicRuleHTTPParameters] @go(HTTP,[]TopicRuleHTTPParameters)

	// +kubebuilder:validation:Optional
	iotAnalytics?: [...#TopicRuleIotAnalyticsParameters] @go(IotAnalytics,[]TopicRuleIotAnalyticsParameters)

	// +kubebuilder:validation:Optional
	iotEvents?: [...#TopicRuleIotEventsParameters] @go(IotEvents,[]TopicRuleIotEventsParameters)

	// +kubebuilder:validation:Optional
	kafka?: [...#TopicRuleKafkaParameters] @go(Kafka,[]TopicRuleKafkaParameters)

	// +kubebuilder:validation:Optional
	kinesis?: [...#TopicRuleKinesisParameters] @go(Kinesis,[]TopicRuleKinesisParameters)

	// +kubebuilder:validation:Optional
	lambda?: [...#TopicRuleLambdaParameters] @go(Lambda,[]TopicRuleLambdaParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// +kubebuilder:validation:Optional
	republish?: [...#TopicRuleRepublishParameters] @go(Republish,[]TopicRuleRepublishParameters)

	// +kubebuilder:validation:Optional
	s3?: [...#TopicRuleS3Parameters] @go(S3,[]TopicRuleS3Parameters)

	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	// +kubebuilder:validation:Required
	sql?: null | string @go(SQL,*string)

	// The version of the SQL rules engine to use when evaluating the rule.
	// +kubebuilder:validation:Required
	sqlVersion?: null | string @go(SQLVersion,*string)

	// +kubebuilder:validation:Optional
	sns?: [...#TopicRuleSnsParameters] @go(Sns,[]TopicRuleSnsParameters)

	// +kubebuilder:validation:Optional
	sqs?: [...#TopicRuleSqsParameters] @go(Sqs,[]TopicRuleSqsParameters)

	// +kubebuilder:validation:Optional
	stepFunctions?: [...#TopicRuleStepFunctionsParameters] @go(StepFunctions,[]TopicRuleStepFunctionsParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// +kubebuilder:validation:Optional
	timestream?: [...#TopicRuleTimestreamParameters] @go(Timestream,[]TopicRuleTimestreamParameters)
}

#TopicRuleRepublishObservation: {
}

#TopicRuleRepublishParameters: {
	// The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
	// +kubebuilder:validation:Optional
	qos?: null | float64 @go(Qos,*float64)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The Kafka topic for messages to be sent to the Kafka broker.
	// +kubebuilder:validation:Required
	topic?: null | string @go(Topic,*string)
}

#TopicRuleS3Observation: {
}

#TopicRuleS3Parameters: {
	// The Amazon S3 bucket name.
	// +kubebuilder:validation:Required
	bucketName?: null | string @go(BucketName,*string)

	// The Amazon S3 canned ACL that controls access to the object identified by the object key. Valid values.
	// +kubebuilder:validation:Optional
	cannedAcl?: null | string @go(CannedACL,*string)

	// The name of the HTTP header.
	// +kubebuilder:validation:Required
	key?: null | string @go(Key,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)
}

#TopicRuleSnsObservation: {
}

#TopicRuleSnsParameters: {
	// The message format of the message to publish. Accepted values are "JSON" and "RAW".
	// +kubebuilder:validation:Optional
	messageFormat?: null | string @go(MessageFormat,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// The ARN of the SNS topic.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	targetArn?: null | string @go(TargetArn,*string)
}

#TopicRuleSqsObservation: {
}

#TopicRuleSqsParameters: {
	// The URL of the Amazon SQS queue.
	// +kubebuilder:validation:Required
	queueUrl?: null | string @go(QueueURL,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// Specifies whether to use Base64 encoding.
	// +kubebuilder:validation:Required
	useBase64?: null | bool @go(UseBase64,*bool)
}

#TopicRuleStepFunctionsObservation: {
}

#TopicRuleStepFunctionsParameters: {
	// The prefix used to generate, along with a UUID, the unique state machine execution name.
	// +kubebuilder:validation:Optional
	executionNamePrefix?: null | string @go(ExecutionNamePrefix,*string)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the Step Functions state machine whose execution will be started.
	// +kubebuilder:validation:Required
	stateMachineName?: null | string @go(StateMachineName,*string)
}

#TopicRuleTimestreamObservation: {
}

#TopicRuleTimestreamParameters: {
	// The name of an Amazon Timestream database.
	// +kubebuilder:validation:Required
	databaseName?: null | string @go(DatabaseName,*string)

	// Configuration blocks with metadata attributes of the time series that are written in each measure record. Nested arguments below.
	// +kubebuilder:validation:Required
	dimension: [...#TimestreamDimensionParameters] @go(Dimension,[]TimestreamDimensionParameters)

	// The IAM role ARN that allows access to the CloudWatch alarm.
	// +kubebuilder:validation:Required
	roleArn?: null | string @go(RoleArn,*string)

	// The name of the DynamoDB table.
	// +kubebuilder:validation:Required
	tableName?: null | string @go(TableName,*string)

	// Configuration block specifying an application-defined value to replace the default value assigned to the Timestream record's timestamp in the time column. Nested arguments below.
	// +kubebuilder:validation:Optional
	timestamp?: [...#TimestreamTimestampParameters] @go(Timestamp,[]TimestreamTimestampParameters)
}

// TopicRuleSpec defines the desired state of TopicRule
#TopicRuleSpec: {
	forProvider: #TopicRuleParameters @go(ForProvider)
}

// TopicRuleStatus defines the observed state of TopicRule.
#TopicRuleStatus: {
	atProvider?: #TopicRuleObservation @go(AtProvider)
}

// TopicRule is the Schema for the TopicRules API. Creates and manages an AWS IoT topic rule
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#TopicRule: {
	spec:    #TopicRuleSpec   @go(Spec)
	status?: #TopicRuleStatus @go(Status)
}

// TopicRuleList contains a list of TopicRules
#TopicRuleList: {
	items: [...#TopicRule] @go(Items,[]TopicRule)
}
