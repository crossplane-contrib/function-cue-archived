// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/deploy/v1beta1

package v1beta1

#DeploymentConfigObservation: {
	// The AWS Assigned deployment config id
	deploymentConfigId?: null | string @go(DeploymentConfigID,*string)

	// The deployment group's config name.
	id?: null | string @go(ID,*string)
}

#DeploymentConfigParameters: {
	// The compute platform can be Server, Lambda, or ECS. Default is Server.
	// +kubebuilder:validation:Optional
	computePlatform?: null | string @go(ComputePlatform,*string)

	// A minimum_healthy_hosts block. Required for Server compute platform. Minimum Healthy Hosts are documented below.
	// +kubebuilder:validation:Optional
	minimumHealthyHosts?: [...#MinimumHealthyHostsParameters] @go(MinimumHealthyHosts,[]MinimumHealthyHostsParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A traffic_routing_config block. Traffic Routing Config is documented below.
	// +kubebuilder:validation:Optional
	trafficRoutingConfig?: [...#TrafficRoutingConfigParameters] @go(TrafficRoutingConfig,[]TrafficRoutingConfigParameters)
}

#MinimumHealthyHostsObservation: {
}

#MinimumHealthyHostsParameters: {
	// The type can either be FLEET_PERCENT or HOST_COUNT.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// The value when the type is FLEET_PERCENT represents the minimum number of healthy instances as
	// a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the
	// deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.
	// When the type is HOST_COUNT, the value represents the minimum number of healthy instances as an absolute value.
	// +kubebuilder:validation:Optional
	value?: null | float64 @go(Value,*float64)
}

#TimeBasedCanaryObservation: {
}

#TimeBasedCanaryParameters: {
	// The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)
}

#TimeBasedLinearObservation: {
}

#TimeBasedLinearParameters: {
	// The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.
	// +kubebuilder:validation:Optional
	percentage?: null | float64 @go(Percentage,*float64)
}

#TrafficRoutingConfigObservation: {
}

#TrafficRoutingConfigParameters: {
	// The time based canary configuration information. If type is TimeBasedLinear, use time_based_linear instead.
	// +kubebuilder:validation:Optional
	timeBasedCanary?: [...#TimeBasedCanaryParameters] @go(TimeBasedCanary,[]TimeBasedCanaryParameters)

	// The time based linear configuration information. If type is TimeBasedCanary, use time_based_canary instead.
	// +kubebuilder:validation:Optional
	timeBasedLinear?: [...#TimeBasedLinearParameters] @go(TimeBasedLinear,[]TimeBasedLinearParameters)

	// Type of traffic routing config. One of TimeBasedCanary, TimeBasedLinear, AllAtOnce.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// DeploymentConfigSpec defines the desired state of DeploymentConfig
#DeploymentConfigSpec: {
	forProvider: #DeploymentConfigParameters @go(ForProvider)
}

// DeploymentConfigStatus defines the observed state of DeploymentConfig.
#DeploymentConfigStatus: {
	atProvider?: #DeploymentConfigObservation @go(AtProvider)
}

// DeploymentConfig is the Schema for the DeploymentConfigs API. Provides a CodeDeploy deployment config.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DeploymentConfig: {
	spec:    #DeploymentConfigSpec   @go(Spec)
	status?: #DeploymentConfigStatus @go(Status)
}

// DeploymentConfigList contains a list of DeploymentConfigs
#DeploymentConfigList: {
	items: [...#DeploymentConfig] @go(Items,[]DeploymentConfig)
}
