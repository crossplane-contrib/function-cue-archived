// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/deploy/v1beta1

package v1beta1

#AlarmConfigurationObservation: {
}

#AlarmConfigurationParameters: {
	// A list of alarms configured for the deployment group. A maximum of 10 alarms can be added to a deployment group.
	// +kubebuilder:validation:Optional
	alarms?: [...null | string] @go(Alarms,[]*string)

	// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is false.
	// +kubebuilder:validation:Optional
	ignorePollAlarmFailure?: null | bool @go(IgnorePollAlarmFailure,*bool)
}

#AutoRollbackConfigurationObservation: {
}

#AutoRollbackConfigurationParameters: {
	// Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
	// +kubebuilder:validation:Optional
	enabled?: null | bool @go(Enabled,*bool)

	// The event type or types that trigger a rollback. Supported types are DEPLOYMENT_FAILURE and DEPLOYMENT_STOP_ON_ALARM.
	// +kubebuilder:validation:Optional
	events?: [...null | string] @go(Events,[]*string)
}

#BlueGreenDeploymentConfigObservation: {
}

#BlueGreenDeploymentConfigParameters: {
	// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
	// +kubebuilder:validation:Optional
	deploymentReadyOption?: [...#DeploymentReadyOptionParameters] @go(DeploymentReadyOption,[]DeploymentReadyOptionParameters)

	// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
	// +kubebuilder:validation:Optional
	greenFleetProvisioningOption?: [...#GreenFleetProvisioningOptionParameters] @go(GreenFleetProvisioningOption,[]GreenFleetProvisioningOptionParameters)

	// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
	// +kubebuilder:validation:Optional
	terminateBlueInstancesOnDeploymentSuccess?: [...#TerminateBlueInstancesOnDeploymentSuccessParameters] @go(TerminateBlueInstancesOnDeploymentSuccess,[]TerminateBlueInstancesOnDeploymentSuccessParameters)
}

#DeploymentGroupObservation: {
	// The ARN of the CodeDeploy deployment group.
	arn?: null | string @go(Arn,*string)

	// The destination platform type for the deployment.
	computePlatform?: null | string @go(ComputePlatform,*string)

	// The ID of the CodeDeploy deployment group.
	deploymentGroupId?: null | string @go(DeploymentGroupID,*string)

	// Application name and deployment group name.
	id?: null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#DeploymentGroupParameters: {
	// Configuration block of alarms associated with the deployment group (documented below).
	// +kubebuilder:validation:Optional
	alarmConfiguration?: [...#AlarmConfigurationParameters] @go(AlarmConfiguration,[]AlarmConfigurationParameters)

	// The name of the application.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/deploy/v1beta1.App
	// +kubebuilder:validation:Optional
	appName?: null | string @go(AppName,*string)

	// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
	// +kubebuilder:validation:Optional
	autoRollbackConfiguration?: [...#AutoRollbackConfigurationParameters] @go(AutoRollbackConfiguration,[]AutoRollbackConfigurationParameters)

	// Autoscaling groups associated with the deployment group.
	// +kubebuilder:validation:Optional
	autoscalingGroups?: [...null | string] @go(AutoscalingGroups,[]*string)

	// Configuration block of the blue/green deployment options for a deployment group (documented below).
	// +kubebuilder:validation:Optional
	blueGreenDeploymentConfig?: [...#BlueGreenDeploymentConfigParameters] @go(BlueGreenDeploymentConfig,[]BlueGreenDeploymentConfigParameters)

	// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
	// +kubebuilder:validation:Optional
	deploymentConfigName?: null | string @go(DeploymentConfigName,*string)

	// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
	// +kubebuilder:validation:Optional
	deploymentStyle?: [...#DeploymentStyleParameters] @go(DeploymentStyle,[]DeploymentStyleParameters)

	// Tag filters associated with the deployment group. See the AWS docs for details.
	// +kubebuilder:validation:Optional
	ec2TagFilter?: [...#EC2TagFilterParameters] @go(EC2TagFilter,[]EC2TagFilterParameters)

	// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
	// +kubebuilder:validation:Optional
	ec2TagSet?: [...#EC2TagSetParameters] @go(EC2TagSet,[]EC2TagSetParameters)

	// Configuration block(s) of the ECS services for a deployment group (documented below).
	// +kubebuilder:validation:Optional
	ecsService?: [...#EcsServiceParameters] @go(EcsService,[]EcsServiceParameters)

	// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
	// +kubebuilder:validation:Optional
	loadBalancerInfo?: [...#LoadBalancerInfoParameters] @go(LoadBalancerInfo,[]LoadBalancerInfoParameters)

	// On premise tag filters associated with the group. See the AWS docs for details.
	// +kubebuilder:validation:Optional
	onPremisesInstanceTagFilter?: [...#OnPremisesInstanceTagFilterParameters] @go(OnPremisesInstanceTagFilter,[]OnPremisesInstanceTagFilterParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The service role ARN that allows deployments.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	serviceRoleArn?: null | string @go(ServiceRoleArn,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Configuration block(s) of the triggers for the deployment group (documented below).
	// +kubebuilder:validation:Optional
	triggerConfiguration?: [...#TriggerConfigurationParameters] @go(TriggerConfiguration,[]TriggerConfigurationParameters)
}

#DeploymentReadyOptionObservation: {
}

#DeploymentReadyOptionParameters: {
	// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
	// +kubebuilder:validation:Optional
	actionOnTimeout?: null | string @go(ActionOnTimeout,*string)

	// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for action_on_timeout.
	// +kubebuilder:validation:Optional
	waitTimeInMinutes?: null | float64 @go(WaitTimeInMinutes,*float64)
}

#DeploymentStyleObservation: {
}

#DeploymentStyleParameters: {
	// Indicates whether to route deployment traffic behind a load balancer. Valid Values are WITH_TRAFFIC_CONTROL or WITHOUT_TRAFFIC_CONTROL. Default is WITHOUT_TRAFFIC_CONTROL.
	// +kubebuilder:validation:Optional
	deploymentOption?: null | string @go(DeploymentOption,*string)

	// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are IN_PLACE or BLUE_GREEN. Default is IN_PLACE.
	// +kubebuilder:validation:Optional
	deploymentType?: null | string @go(DeploymentType,*string)
}

#EC2TagFilterObservation: {
}

#EC2TagFilterParameters: {
	// The key of the tag filter.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// The value of the tag filter.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#EC2TagSetEC2TagFilterObservation: {
}

#EC2TagSetEC2TagFilterParameters: {
	// The key of the tag filter.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// The value of the tag filter.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#EC2TagSetObservation: {
}

#EC2TagSetParameters: {
	// Tag filters associated with the deployment group. See the AWS docs for details.
	// +kubebuilder:validation:Optional
	ec2TagFilter?: [...#EC2TagSetEC2TagFilterParameters] @go(EC2TagFilter,[]EC2TagSetEC2TagFilterParameters)
}

#ELBInfoObservation: {
}

#ELBInfoParameters: {
	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elb/v1beta1.ELB
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#EcsServiceObservation: {
}

#EcsServiceParameters: {
	// The name of the ECS cluster.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ecs/v1beta1.Cluster
	// +kubebuilder:validation:Optional
	clusterName?: null | string @go(ClusterName,*string)

	// The name of the ECS service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ecs/v1beta1.Service
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)
}

#GreenFleetProvisioningOptionObservation: {
}

#GreenFleetProvisioningOptionParameters: {
	// The method used to add instances to a replacement environment.
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)
}

#LoadBalancerInfoObservation: {
}

#LoadBalancerInfoParameters: {
	// The Classic Elastic Load Balancer to use in a deployment. Conflicts with target_group_info and target_group_pair_info.
	// +kubebuilder:validation:Optional
	elbInfo?: [...#ELBInfoParameters] @go(ELBInfo,[]ELBInfoParameters)

	// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with elb_info and target_group_pair_info.
	// +kubebuilder:validation:Optional
	targetGroupInfo?: [...#TargetGroupInfoParameters] @go(TargetGroupInfo,[]TargetGroupInfoParameters)

	// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with elb_info and target_group_info.
	// +kubebuilder:validation:Optional
	targetGroupPairInfo?: [...#TargetGroupPairInfoParameters] @go(TargetGroupPairInfo,[]TargetGroupPairInfoParameters)
}

#OnPremisesInstanceTagFilterObservation: {
}

#OnPremisesInstanceTagFilterParameters: {
	// The key of the tag filter.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The type of the tag filter, either KEY_ONLY, VALUE_ONLY, or KEY_AND_VALUE.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)

	// The value of the tag filter.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#ProdTrafficRouteObservation: {
}

#ProdTrafficRouteParameters: {
	// List of Amazon Resource Names (ARNs) of the load balancer listeners.
	// +kubebuilder:validation:Required
	listenerArns: [...null | string] @go(ListenerArns,[]*string)
}

#TargetGroupInfoObservation: {
}

#TargetGroupInfoParameters: {
	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#TargetGroupObservation: {
}

#TargetGroupPairInfoObservation: {
}

#TargetGroupPairInfoParameters: {
	// Configuration block for the production traffic route (documented below).
	// +kubebuilder:validation:Required
	prodTrafficRoute: [...#ProdTrafficRouteParameters] @go(ProdTrafficRoute,[]ProdTrafficRouteParameters)

	// Configuration blocks for a target group within a target group pair (documented below).
	// +kubebuilder:validation:Required
	targetGroup: [...#TargetGroupParameters] @go(TargetGroup,[]TargetGroupParameters)

	// Configuration block for the test traffic route (documented below).
	// +kubebuilder:validation:Optional
	testTrafficRoute?: [...#TestTrafficRouteParameters] @go(TestTrafficRoute,[]TestTrafficRouteParameters)
}

#TargetGroupParameters: {
	// The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elbv2/v1beta1.LBTargetGroup
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#TerminateBlueInstancesOnDeploymentSuccessObservation: {
}

#TerminateBlueInstancesOnDeploymentSuccessParameters: {
	// The method used to add instances to a replacement environment.
	// +kubebuilder:validation:Optional
	action?: null | string @go(Action,*string)

	// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
	// +kubebuilder:validation:Optional
	terminationWaitTimeInMinutes?: null | float64 @go(TerminationWaitTimeInMinutes,*float64)
}

#TestTrafficRouteObservation: {
}

#TestTrafficRouteParameters: {
	// List of Amazon Resource Names (ARNs) of the load balancer listeners.
	// +kubebuilder:validation:Required
	listenerArns: [...null | string] @go(ListenerArns,[]*string)
}

#TriggerConfigurationObservation: {
}

#TriggerConfigurationParameters: {
	// The event type or types for which notifications are triggered. Some values that are supported: DeploymentStart, DeploymentSuccess, DeploymentFailure, DeploymentStop, DeploymentRollback, InstanceStart, InstanceSuccess, InstanceFailure.  See the CodeDeploy documentation for all possible values.
	// +kubebuilder:validation:Required
	triggerEvents: [...null | string] @go(TriggerEvents,[]*string)

	// The name of the notification trigger.
	// +kubebuilder:validation:Required
	triggerName?: null | string @go(TriggerName,*string)

	// The ARN of the SNS topic through which notifications are sent.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	triggerTargetArn?: null | string @go(TriggerTargetArn,*string)
}

// DeploymentGroupSpec defines the desired state of DeploymentGroup
#DeploymentGroupSpec: {
	forProvider: #DeploymentGroupParameters @go(ForProvider)
}

// DeploymentGroupStatus defines the observed state of DeploymentGroup.
#DeploymentGroupStatus: {
	atProvider?: #DeploymentGroupObservation @go(AtProvider)
}

// DeploymentGroup is the Schema for the DeploymentGroups API. Provides a CodeDeploy deployment group.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DeploymentGroup: {
	spec:    #DeploymentGroupSpec   @go(Spec)
	status?: #DeploymentGroupStatus @go(Status)
}

// DeploymentGroupList contains a list of DeploymentGroups
#DeploymentGroupList: {
	items: [...#DeploymentGroup] @go(Items,[]DeploymentGroup)
}
