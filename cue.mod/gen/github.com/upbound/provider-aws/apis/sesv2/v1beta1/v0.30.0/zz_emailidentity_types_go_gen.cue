// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/sesv2/v1beta1

package v1beta1

#DKIMSigningAttributesObservation: {
	// [Easy DKIM] The key length of the DKIM key pair in use.
	currentSigningKeyLength?: null | string @go(CurrentSigningKeyLength,*string)

	// [Easy DKIM] The last time a key pair was generated for this identity.
	lastKeyGenerationTimestamp?: null | string @go(LastKeyGenerationTimestamp,*string)

	// A string that indicates how DKIM was configured for the identity. AWS_SES indicates that DKIM was configured for the identity by using Easy DKIM. EXTERNAL indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).
	signingAttributesOrigin?: null | string @go(SigningAttributesOrigin,*string)

	// Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. See the AWS SES API v2 Reference for supported statuses.
	status?: null | string @go(Status,*string)

	// If you used Easy DKIM to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key.
	tokens?: [...null | string] @go(Tokens,[]*string)
}

#DKIMSigningAttributesParameters: {
	// [Bring Your Own DKIM] A private key that's used to generate a DKIM signature. The private key must use 1024 or 2048-bit RSA encryption, and must be encoded using base64 encoding.
	// +kubebuilder:validation:Optional
	domainSigningPrivateKey?: null | string @go(DomainSigningPrivateKey,*string)

	// [Bring Your Own DKIM] A string that's used to identify a public key in the DNS configuration for a domain.
	// +kubebuilder:validation:Optional
	domainSigningSelector?: null | string @go(DomainSigningSelector,*string)

	// [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day. Valid values: RSA_1024_BIT, RSA_2048_BIT.
	// +kubebuilder:validation:Optional
	nextSigningKeyLength?: null | string @go(NextSigningKeyLength,*string)
}

#EmailIdentityObservation: {
	// ARN of the Email Identity.
	arn?: null | string @go(Arn,*string)

	// The configuration of the DKIM authentication settings for an email domain identity.
	// +kubebuilder:validation:Optional
	dkimSigningAttributes?: [...#DKIMSigningAttributesObservation] @go(DKIMSigningAttributes,[]DKIMSigningAttributesObservation)
	id?: null | string @go(ID,*string)

	// The email identity type. Valid values: EMAIL_ADDRESS, DOMAIN.
	identityType?: null | string @go(IdentityType,*string)
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Specifies whether or not the identity is verified.
	verifiedForSendingStatus?: null | bool @go(VerifiedForSendingStatus,*bool)
}

#EmailIdentityParameters: {
	// The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sesv2/v1beta1.ConfigurationSet
	// +kubebuilder:validation:Optional
	configurationSetName?: null | string @go(ConfigurationSetName,*string)

	// The configuration of the DKIM authentication settings for an email domain identity.
	// +kubebuilder:validation:Optional
	dkimSigningAttributes?: [...#DKIMSigningAttributesParameters] @go(DKIMSigningAttributes,[]DKIMSigningAttributesParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// EmailIdentitySpec defines the desired state of EmailIdentity
#EmailIdentitySpec: {
	forProvider: #EmailIdentityParameters @go(ForProvider)
}

// EmailIdentityStatus defines the observed state of EmailIdentity.
#EmailIdentityStatus: {
	atProvider?: #EmailIdentityObservation @go(AtProvider)
}

// EmailIdentity is the Schema for the EmailIdentitys API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#EmailIdentity: {
	spec:    #EmailIdentitySpec   @go(Spec)
	status?: #EmailIdentityStatus @go(Status)
}

// EmailIdentityList contains a list of EmailIdentitys
#EmailIdentityList: {
	items: [...#EmailIdentity] @go(Items,[]EmailIdentity)
}
