// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lightsail/v1beta1

package v1beta1

#CertificateObservation: {
	// The ARN of the lightsail certificate.
	arn?: null | string @go(Arn,*string)

	// The timestamp when the instance was created.
	createdAt?: null | string @go(CreatedAt,*string)

	// A domain name for which the certificate should be issued.
	domainName?: null | string @go(DomainName,*string)

	// Set of domain validation objects which can be used to complete certificate validation. Can have more than one element, e.g., if SANs are defined.
	domainValidationOptions?: [...#DomainValidationOptionsObservation] @go(DomainValidationOptions,[]DomainValidationOptionsObservation)

	// The name of the lightsail certificate (matches name).
	id?: null | string @go(ID,*string)

	// Set of domains that should be SANs in the issued certificate. domain_name attribute is automatically added as a Subject Alternative Name.
	subjectAlternativeNames?: [...null | string] @go(SubjectAlternativeNames,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#CertificateParameters: {
	// A domain name for which the certificate should be issued.
	// +kubebuilder:validation:Optional
	domainName?: null | string @go(DomainName,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Set of domains that should be SANs in the issued certificate. domain_name attribute is automatically added as a Subject Alternative Name.
	// +kubebuilder:validation:Optional
	subjectAlternativeNames?: [...null | string] @go(SubjectAlternativeNames,[]*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#DomainValidationOptionsObservation: {
	// A domain name for which the certificate should be issued.
	domainName?: null | string @go(DomainName,*string)

	// The name of the Lightsail load balancer.
	resourceRecordName?:  null | string @go(ResourceRecordName,*string)
	resourceRecordType?:  null | string @go(ResourceRecordType,*string)
	resourceRecordValue?: null | string @go(ResourceRecordValue,*string)
}

#DomainValidationOptionsParameters: {
}

// CertificateSpec defines the desired state of Certificate
#CertificateSpec: {
	forProvider: #CertificateParameters @go(ForProvider)
}

// CertificateStatus defines the observed state of Certificate.
#CertificateStatus: {
	atProvider?: #CertificateObservation @go(AtProvider)
}

// Certificate is the Schema for the Certificates API. Provides a lightsail certificate
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Certificate: {
	spec:    #CertificateSpec   @go(Spec)
	status?: #CertificateStatus @go(Status)
}

// CertificateList contains a list of Certificates
#CertificateList: {
	items: [...#Certificate] @go(Items,[]Certificate)
}
