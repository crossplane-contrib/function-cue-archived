// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lightsail/v1beta1

package v1beta1

#DomainEntryObservation: {
	// A combination of attributes to create a unique id: name_domain_name_type_target
	id?: null | string @go(ID,*string)
}

#DomainEntryParameters: {
	// The name of the Lightsail domain in which to create the entry
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lightsail/v1beta1.Domain
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("domain_name",false)
	// +kubebuilder:validation:Optional
	domainName?: null | string @go(DomainName,*string)

	// If the entry should be an alias Defaults to false
	// +kubebuilder:validation:Optional
	isAlias?: null | bool @go(IsAlias,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Target of the domain entry
	// +kubebuilder:validation:Required
	target?: null | string @go(Target,*string)

	// Type of record
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)
}

// DomainEntrySpec defines the desired state of DomainEntry
#DomainEntrySpec: {
	forProvider: #DomainEntryParameters @go(ForProvider)
}

// DomainEntryStatus defines the observed state of DomainEntry.
#DomainEntryStatus: {
	atProvider?: #DomainEntryObservation @go(AtProvider)
}

// DomainEntry is the Schema for the DomainEntrys API. Provides an Lightsail Domain Entry
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DomainEntry: {
	spec:    #DomainEntrySpec   @go(Spec)
	status?: #DomainEntryStatus @go(Status)
}

// DomainEntryList contains a list of DomainEntrys
#DomainEntryList: {
	items: [...#DomainEntry] @go(Items,[]DomainEntry)
}
