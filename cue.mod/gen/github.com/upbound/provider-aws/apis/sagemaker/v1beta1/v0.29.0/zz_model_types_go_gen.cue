// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/sagemaker/v1beta1

package v1beta1

#ContainerObservation: {
}

#ContainerParameters: {
	// The DNS host name for the container.
	// +kubebuilder:validation:Optional
	containerHostname?: null | string @go(ContainerHostname,*string)

	// Environment variables for the Docker container.
	// A list of key value pairs.
	// +kubebuilder:validation:Optional
	environment?: {[string]: null | string} @go(Environment,map[string]*string)

	// The registry path where the inference code image is stored in Amazon ECR.
	// +kubebuilder:validation:Required
	image?: null | string @go(Image,*string)

	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.
	// +kubebuilder:validation:Optional
	imageConfig?: [...#ImageConfigParameters] @go(ImageConfig,[]ImageConfigParameters)

	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The URL for the S3 location where model artifacts are stored.
	// +kubebuilder:validation:Optional
	modelDataUrl?: null | string @go(ModelDataURL,*string)
}

#ImageConfigObservation: {
}

#ImageConfigParameters: {
	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.
	// +kubebuilder:validation:Required
	repositoryAccessMode?: null | string @go(RepositoryAccessMode,*string)

	// Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
	// +kubebuilder:validation:Optional
	repositoryAuthConfig?: [...#RepositoryAuthConfigParameters] @go(RepositoryAuthConfig,[]RepositoryAuthConfigParameters)
}

#ImageConfigRepositoryAuthConfigObservation: {
}

#ImageConfigRepositoryAuthConfigParameters: {
	// The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.
	// +kubebuilder:validation:Required
	repositoryCredentialsProviderArn?: null | string @go(RepositoryCredentialsProviderArn,*string)
}

#InferenceExecutionConfigObservation: {
}

#InferenceExecutionConfigParameters: {
	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	// +kubebuilder:validation:Required
	mode?: null | string @go(Mode,*string)
}

#ModelObservation: {
	// The Amazon Resource Name (ARN) assigned by AWS to this model.
	arn?: null | string @go(Arn,*string)
	id?:  null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ModelParameters: {
	// Specifies containers in the inference pipeline. If not specified, the primary_container argument is required. Fields are documented below.
	// +kubebuilder:validation:Optional
	container?: [...#ContainerParameters] @go(Container,[]ContainerParameters)

	// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
	// +kubebuilder:validation:Optional
	enableNetworkIsolation?: null | bool @go(EnableNetworkIsolation,*bool)

	// A role that SageMaker can assume to access model artifacts and docker images for deployment.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	executionRoleArn?: null | string @go(ExecutionRoleArn,*string)

	// Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
	// +kubebuilder:validation:Optional
	inferenceExecutionConfig?: [...#InferenceExecutionConfigParameters] @go(InferenceExecutionConfig,[]InferenceExecutionConfigParameters)

	// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the container argument is required. Fields are documented below.
	// +kubebuilder:validation:Optional
	primaryContainer?: [...#PrimaryContainerParameters] @go(PrimaryContainer,[]PrimaryContainerParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
	// +kubebuilder:validation:Optional
	vpcConfig?: [...#VPCConfigParameters] @go(VPCConfig,[]VPCConfigParameters)
}

#PrimaryContainerImageConfigObservation: {
}

#PrimaryContainerImageConfigParameters: {
	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: Platform and Vpc.
	// +kubebuilder:validation:Required
	repositoryAccessMode?: null | string @go(RepositoryAccessMode,*string)

	// Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication. see Repository Auth Config.
	// +kubebuilder:validation:Optional
	repositoryAuthConfig?: [...#ImageConfigRepositoryAuthConfigParameters] @go(RepositoryAuthConfig,[]ImageConfigRepositoryAuthConfigParameters)
}

#PrimaryContainerObservation: {
}

#PrimaryContainerParameters: {
	// The DNS host name for the container.
	// +kubebuilder:validation:Optional
	containerHostname?: null | string @go(ContainerHostname,*string)

	// Environment variables for the Docker container.
	// A list of key value pairs.
	// +kubebuilder:validation:Optional
	environment?: {[string]: null | string} @go(Environment,map[string]*string)

	// The registry path where the inference code image is stored in Amazon ECR.
	// +kubebuilder:validation:Required
	image?: null | string @go(Image,*string)

	// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see Using a Private Docker Registry for Real-Time Inference Containers. see Image Config.
	// +kubebuilder:validation:Optional
	imageConfig?: [...#PrimaryContainerImageConfigParameters] @go(ImageConfig,[]PrimaryContainerImageConfigParameters)

	// The container hosts value SingleModel/MultiModel. The default value is SingleModel.
	// +kubebuilder:validation:Optional
	mode?: null | string @go(Mode,*string)

	// The URL for the S3 location where model artifacts are stored.
	// +kubebuilder:validation:Optional
	modelDataUrl?: null | string @go(ModelDataURL,*string)
}

#RepositoryAuthConfigObservation: {
}

#RepositoryAuthConfigParameters: {
	// The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see Create a Lambda function with the console in the AWS Lambda Developer Guide.
	// +kubebuilder:validation:Required
	repositoryCredentialsProviderArn?: null | string @go(RepositoryCredentialsProviderArn,*string)
}

#VPCConfigObservation: {
}

#VPCConfigParameters: {
	// +kubebuilder:validation:Required
	securityGroupIds: [...null | string] @go(SecurityGroupIds,[]*string)

	// +kubebuilder:validation:Required
	subnets: [...null | string] @go(Subnets,[]*string)
}

// ModelSpec defines the desired state of Model
#ModelSpec: {
	forProvider: #ModelParameters @go(ForProvider)
}

// ModelStatus defines the observed state of Model.
#ModelStatus: {
	atProvider?: #ModelObservation @go(AtProvider)
}

// Model is the Schema for the Models API. Provides a SageMaker model resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Model: {
	spec:    #ModelSpec   @go(Spec)
	status?: #ModelStatus @go(Status)
}

// ModelList contains a list of Models
#ModelList: {
	items: [...#Model] @go(Items,[]Model)
}
