// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/sagemaker/v1beta1

package v1beta1

#ModelPackageGroupPolicyObservation: {
	// The name of the Model Package Package Group.
	id?: null | string @go(ID,*string)

	// The name of the model package group.
	modelPackageGroupName?: null | string @go(ModelPackageGroupName,*string)
	resourcePolicy?:        null | string @go(ResourcePolicy,*string)
}

#ModelPackageGroupPolicyParameters: {
	// The name of the model package group.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sagemaker/v1beta1.ModelPackageGroup
	// +kubebuilder:validation:Optional
	modelPackageGroupName?: null | string @go(ModelPackageGroupName,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// +kubebuilder:validation:Optional
	resourcePolicy?: null | string @go(ResourcePolicy,*string)
}

// ModelPackageGroupPolicySpec defines the desired state of ModelPackageGroupPolicy
#ModelPackageGroupPolicySpec: {
	forProvider: #ModelPackageGroupPolicyParameters @go(ForProvider)
}

// ModelPackageGroupPolicyStatus defines the observed state of ModelPackageGroupPolicy.
#ModelPackageGroupPolicyStatus: {
	atProvider?: #ModelPackageGroupPolicyObservation @go(AtProvider)
}

// ModelPackageGroupPolicy is the Schema for the ModelPackageGroupPolicys API. Provides a SageMaker Model Package Group Policy resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ModelPackageGroupPolicy: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.resourcePolicy)",message="resourcePolicy is a required parameter"
	spec:    #ModelPackageGroupPolicySpec   @go(Spec)
	status?: #ModelPackageGroupPolicyStatus @go(Status)
}

// ModelPackageGroupPolicyList contains a list of ModelPackageGroupPolicys
#ModelPackageGroupPolicyList: {
	items: [...#ModelPackageGroupPolicy] @go(Items,[]ModelPackageGroupPolicy)
}
