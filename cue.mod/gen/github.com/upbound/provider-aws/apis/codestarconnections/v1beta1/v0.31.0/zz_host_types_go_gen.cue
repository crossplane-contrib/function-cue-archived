// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/codestarconnections/v1beta1

package v1beta1

#HostObservation: {
	// The CodeStar Host ARN.
	arn?: null | string @go(Arn,*string)

	// The CodeStar Host ARN.
	id?: null | string @go(ID,*string)

	// The CodeStar Host status. Possible values are PENDING, AVAILABLE, VPC_CONFIG_DELETING, VPC_CONFIG_INITIALIZING, and VPC_CONFIG_FAILED_INITIALIZATION.
	status?: null | string @go(Status,*string)
}

#HostParameters: {
	// The name of the host to be created. The name must be unique in the calling AWS account.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The endpoint of the infrastructure to be represented by the host after it is created.
	// +kubebuilder:validation:Required
	providerEndpoint?: null | string @go(ProviderEndpoint,*string)

	// The name of the external provider where your third-party code repository is configured.
	// +kubebuilder:validation:Required
	providerType?: null | string @go(ProviderType,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The VPC configuration to be provisioned for the host. A VPC must be configured, and the infrastructure to be represented by the host must already be connected to the VPC.
	// +kubebuilder:validation:Optional
	vpcConfiguration?: [...#VPCConfigurationParameters] @go(VPCConfiguration,[]VPCConfigurationParameters)
}

#VPCConfigurationObservation: {
}

#VPCConfigurationParameters: {
	// he ID of the security group or security groups associated with the Amazon VPC connected to the infrastructure where your provider type is installed.
	// +kubebuilder:validation:Required
	securityGroupIds: [...null | string] @go(SecurityGroupIds,[]*string)

	// The ID of the subnet or subnets associated with the Amazon VPC connected to the infrastructure where your provider type is installed.
	// +kubebuilder:validation:Required
	subnetIds: [...null | string] @go(SubnetIds,[]*string)

	// The value of the Transport Layer Security (TLS) certificate associated with the infrastructure where your provider type is installed.
	// +kubebuilder:validation:Optional
	tlsCertificate?: null | string @go(TLSCertificate,*string)

	// The ID of the Amazon VPC connected to the infrastructure where your provider type is installed.
	// +kubebuilder:validation:Required
	vpcId?: null | string @go(VPCID,*string)
}

// HostSpec defines the desired state of Host
#HostSpec: {
	forProvider: #HostParameters @go(ForProvider)
}

// HostStatus defines the observed state of Host.
#HostStatus: {
	atProvider?: #HostObservation @go(AtProvider)
}

// Host is the Schema for the Hosts API. Provides a CodeStar Host
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Host: {
	spec:    #HostSpec   @go(Spec)
	status?: #HostStatus @go(Status)
}

// HostList contains a list of Hosts
#HostList: {
	items: [...#Host] @go(Items,[]Host)
}
