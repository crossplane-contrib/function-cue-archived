// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/s3control/v1beta1

package v1beta1

#DetailsObservation: {
	// The name of the Multi-Region Access Point.
	name?: null | string @go(Name,*string)

	// Configuration block to manage the PublicAccessBlock configuration that you want to apply to this Multi-Region Access Point. You can enable the configuration options in any combination. See Public Access Block Configuration below for more details.
	publicAccessBlock?: [...#PublicAccessBlockObservation] @go(PublicAccessBlock,[]PublicAccessBlockObservation)

	// The Region configuration block to specify the bucket associated with the Multi-Region Access Point. See Region Configuration below for more details.
	region?: [...#RegionObservation] @go(Region,[]RegionObservation)
}

#DetailsParameters: {
	// The name of the Multi-Region Access Point.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Configuration block to manage the PublicAccessBlock configuration that you want to apply to this Multi-Region Access Point. You can enable the configuration options in any combination. See Public Access Block Configuration below for more details.
	// +kubebuilder:validation:Optional
	publicAccessBlock?: [...#PublicAccessBlockParameters] @go(PublicAccessBlock,[]PublicAccessBlockParameters)

	// The Region configuration block to specify the bucket associated with the Multi-Region Access Point. See Region Configuration below for more details.
	// +kubebuilder:validation:Required
	region: [...#RegionParameters] @go(Region,[]RegionParameters)
}

#MultiRegionAccessPointObservation: {
	// The AWS account ID for the owner of the buckets for which you want to create a Multi-Region Access Point.
	accountId?: null | string @go(AccountID,*string)

	// The alias for the Multi-Region Access Point.
	alias?: null | string @go(Alias,*string)

	// Amazon Resource Name (ARN) of the Multi-Region Access Point.
	arn?: null | string @go(Arn,*string)

	// A configuration block containing details about the Multi-Region Access Point. See Details Configuration Block below for more details
	details?: [...#DetailsObservation] @go(Details,[]DetailsObservation)

	// The DNS domain name of the S3 Multi-Region Access Point in the format alias.accesspoint.s3-global.amazonaws.com. For more information, see the documentation on Multi-Region Access Point Requests.
	domainName?: null | string @go(DomainName,*string)

	// The AWS account ID and access point name separated by a colon (:).
	id?: null | string @go(ID,*string)

	// The current status of the Multi-Region Access Point. One of: READY, INCONSISTENT_ACROSS_REGIONS, CREATING, PARTIALLY_CREATED, PARTIALLY_DELETED, DELETING.
	status?: null | string @go(Status,*string)
}

#MultiRegionAccessPointParameters: {
	// The AWS account ID for the owner of the buckets for which you want to create a Multi-Region Access Point.
	// +kubebuilder:validation:Optional
	accountId?: null | string @go(AccountID,*string)

	// A configuration block containing details about the Multi-Region Access Point. See Details Configuration Block below for more details
	// +kubebuilder:validation:Optional
	details?: [...#DetailsParameters] @go(Details,[]DetailsParameters)

	// The Region configuration block to specify the bucket associated with the Multi-Region Access Point. See Region Configuration below for more details.
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

#PublicAccessBlockObservation: {
	// Whether Amazon S3 should block public ACLs for buckets in this account. Defaults to true. Enabling this setting does not affect existing policies or ACLs. When set to true causes the following behavior:
	blockPublicAcls?: null | bool @go(BlockPublicAcls,*bool)

	// Whether Amazon S3 should block public bucket policies for buckets in this account. Defaults to true. Enabling this setting does not affect existing bucket policies. When set to true causes Amazon S3 to:
	blockPublicPolicy?: null | bool @go(BlockPublicPolicy,*bool)

	// Whether Amazon S3 should ignore public ACLs for buckets in this account. Defaults to true. Enabling this setting does not affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set. When set to true causes Amazon S3 to:
	ignorePublicAcls?: null | bool @go(IgnorePublicAcls,*bool)

	// Whether Amazon S3 should restrict public bucket policies for buckets in this account. Defaults to true. Enabling this setting does not affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked. When set to true:
	restrictPublicBuckets?: null | bool @go(RestrictPublicBuckets,*bool)
}

#PublicAccessBlockParameters: {
	// Whether Amazon S3 should block public ACLs for buckets in this account. Defaults to true. Enabling this setting does not affect existing policies or ACLs. When set to true causes the following behavior:
	// +kubebuilder:validation:Optional
	blockPublicAcls?: null | bool @go(BlockPublicAcls,*bool)

	// Whether Amazon S3 should block public bucket policies for buckets in this account. Defaults to true. Enabling this setting does not affect existing bucket policies. When set to true causes Amazon S3 to:
	// +kubebuilder:validation:Optional
	blockPublicPolicy?: null | bool @go(BlockPublicPolicy,*bool)

	// Whether Amazon S3 should ignore public ACLs for buckets in this account. Defaults to true. Enabling this setting does not affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set. When set to true causes Amazon S3 to:
	// +kubebuilder:validation:Optional
	ignorePublicAcls?: null | bool @go(IgnorePublicAcls,*bool)

	// Whether Amazon S3 should restrict public bucket policies for buckets in this account. Defaults to true. Enabling this setting does not affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked. When set to true:
	// +kubebuilder:validation:Optional
	restrictPublicBuckets?: null | bool @go(RestrictPublicBuckets,*bool)
}

#RegionObservation: {
	// The name of the associated bucket for the Region.
	bucket?: null | string @go(Bucket,*string)
}

#RegionParameters: {
	// The name of the associated bucket for the Region.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)
}

// MultiRegionAccessPointSpec defines the desired state of MultiRegionAccessPoint
#MultiRegionAccessPointSpec: {
	forProvider: #MultiRegionAccessPointParameters @go(ForProvider)
}

// MultiRegionAccessPointStatus defines the observed state of MultiRegionAccessPoint.
#MultiRegionAccessPointStatus: {
	atProvider?: #MultiRegionAccessPointObservation @go(AtProvider)
}

// MultiRegionAccessPoint is the Schema for the MultiRegionAccessPoints API. Provides a resource to manage an S3 Multi-Region Access Point associated with specified buckets.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#MultiRegionAccessPoint: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.details)",message="details is a required parameter"
	spec:    #MultiRegionAccessPointSpec   @go(Spec)
	status?: #MultiRegionAccessPointStatus @go(Status)
}

// MultiRegionAccessPointList contains a list of MultiRegionAccessPoints
#MultiRegionAccessPointList: {
	items: [...#MultiRegionAccessPoint] @go(Items,[]MultiRegionAccessPoint)
}
