// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/s3control/v1beta1

package v1beta1

#AccessPointPolicyObservation: {
	// The ARN of the access point that you want to associate with the specified policy.
	accessPointArn?: null | string @go(AccessPointArn,*string)

	// Indicates whether this access point currently has a policy that allows public access.
	hasPublicAccessPolicy?: null | bool @go(HasPublicAccessPolicy,*bool)

	// The AWS account ID and access point name separated by a colon (:).
	id?: null | string @go(ID,*string)

	// The policy that you want to apply to the specified access point.
	policy?: null | string @go(Policy,*string)
}

#AccessPointPolicyParameters: {
	// The ARN of the access point that you want to associate with the specified policy.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3control/v1beta1.AccessPoint
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	accessPointArn?: null | string @go(AccessPointArn,*string)

	// The policy that you want to apply to the specified access point.
	// +kubebuilder:validation:Optional
	policy?: null | string @go(Policy,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// AccessPointPolicySpec defines the desired state of AccessPointPolicy
#AccessPointPolicySpec: {
	forProvider: #AccessPointPolicyParameters @go(ForProvider)
}

// AccessPointPolicyStatus defines the observed state of AccessPointPolicy.
#AccessPointPolicyStatus: {
	atProvider?: #AccessPointPolicyObservation @go(AtProvider)
}

// AccessPointPolicy is the Schema for the AccessPointPolicys API. Provides a resource to manage an S3 Access Point resource policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#AccessPointPolicy: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.policy)",message="policy is a required parameter"
	spec:    #AccessPointPolicySpec   @go(Spec)
	status?: #AccessPointPolicyStatus @go(Status)
}

// AccessPointPolicyList contains a list of AccessPointPolicys
#AccessPointPolicyList: {
	items: [...#AccessPointPolicy] @go(Items,[]AccessPointPolicy)
}
