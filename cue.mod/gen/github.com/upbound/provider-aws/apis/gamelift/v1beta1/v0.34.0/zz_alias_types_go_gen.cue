// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/gamelift/v1beta1

package v1beta1

#AliasObservation: {
	// Alias ARN.
	arn?: null | string @go(Arn,*string)

	// Description of the alias.
	description?: null | string @go(Description,*string)

	// Alias ID.
	id?: null | string @go(ID,*string)

	// Name of the alias.
	name?: null | string @go(Name,*string)

	// Specifies the fleet and/or routing type to use for the alias.
	routingStrategy?: [...#RoutingStrategyObservation] @go(RoutingStrategy,[]RoutingStrategyObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#AliasParameters: {
	// Description of the alias.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Name of the alias.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Specifies the fleet and/or routing type to use for the alias.
	// +kubebuilder:validation:Optional
	routingStrategy?: [...#RoutingStrategyParameters] @go(RoutingStrategy,[]RoutingStrategyParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#RoutingStrategyObservation: {
	// ID of the GameLift Fleet to point the alias to.
	fleetId?: null | string @go(FleetID,*string)

	// Message text to be used with the TERMINAL routing strategy.
	message?: null | string @go(Message,*string)

	// Type of routing strategyE.g., SIMPLE or TERMINAL
	type?: null | string @go(Type,*string)
}

#RoutingStrategyParameters: {
	// ID of the GameLift Fleet to point the alias to.
	// +kubebuilder:validation:Optional
	fleetId?: null | string @go(FleetID,*string)

	// Message text to be used with the TERMINAL routing strategy.
	// +kubebuilder:validation:Optional
	message?: null | string @go(Message,*string)

	// Type of routing strategyE.g., SIMPLE or TERMINAL
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)
}

// AliasSpec defines the desired state of Alias
#AliasSpec: {
	forProvider: #AliasParameters @go(ForProvider)
}

// AliasStatus defines the observed state of Alias.
#AliasStatus: {
	atProvider?: #AliasObservation @go(AtProvider)
}

// Alias is the Schema for the Aliass API. Provides a GameLift Alias resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Alias: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.routingStrategy)",message="routingStrategy is a required parameter"
	spec:    #AliasSpec   @go(Spec)
	status?: #AliasStatus @go(Status)
}

// AliasList contains a list of Aliass
#AliasList: {
	items: [...#Alias] @go(Items,[]Alias)
}
