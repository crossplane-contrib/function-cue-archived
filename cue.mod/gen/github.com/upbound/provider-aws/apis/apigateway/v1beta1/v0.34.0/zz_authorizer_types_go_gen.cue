// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigateway/v1beta1

package v1beta1

#AuthorizerObservation: {
	// ARN of the API Gateway Authorizer
	arn?: null | string @go(Arn,*string)

	// Credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN.
	authorizerCredentials?: null | string @go(AuthorizerCredentials,*string)

	// TTL of cached authorizer results in seconds. Defaults to 300.
	authorizerResultTtlInSeconds?: null | float64 @go(AuthorizerResultTTLInSeconds,*float64)

	// Authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of arn:aws:apigateway:{region}:lambda:path/{service_api},
	// e.g., arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations
	authorizerUri?: null | string @go(AuthorizerURI,*string)

	// Authorizer identifier.
	id?: null | string @go(ID,*string)

	// Source of the identity in an incoming request. Defaults to method.request.header.Authorization. For REQUEST type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., "method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"
	identitySource?: null | string @go(IdentitySource,*string)

	// Validation expression for the incoming identity. For TOKEN type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.
	identityValidationExpression?: null | string @go(IdentityValidationExpression,*string)

	// Name of the authorizer
	name?: null | string @go(Name,*string)

	// List of the Amazon Cognito user pool ARNs. Each element is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}.
	providerArns?: [...null | string] @go(ProviderArns,[]*string)

	// ID of the associated REST API
	restApiId?: null | string @go(RestAPIID,*string)

	// Type of the authorizer. Possible values are TOKEN for a Lambda function using a single authorization token submitted in a custom header, REQUEST for a Lambda function using incoming request parameters, or COGNITO_USER_POOLS for using an Amazon Cognito user pool. Defaults to TOKEN.
	type?: null | string @go(Type,*string)
}

#AuthorizerParameters: {
	// Credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	authorizerCredentials?: null | string @go(AuthorizerCredentials,*string)

	// TTL of cached authorizer results in seconds. Defaults to 300.
	// +kubebuilder:validation:Optional
	authorizerResultTtlInSeconds?: null | float64 @go(AuthorizerResultTTLInSeconds,*float64)

	// Authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of arn:aws:apigateway:{region}:lambda:path/{service_api},
	// e.g., arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta1.Function
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("invoke_arn",true)
	// +kubebuilder:validation:Optional
	authorizerUri?: null | string @go(AuthorizerURI,*string)

	// Source of the identity in an incoming request. Defaults to method.request.header.Authorization. For REQUEST type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., "method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"
	// +kubebuilder:validation:Optional
	identitySource?: null | string @go(IdentitySource,*string)

	// Validation expression for the incoming identity. For TOKEN type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.
	// +kubebuilder:validation:Optional
	identityValidationExpression?: null | string @go(IdentityValidationExpression,*string)

	// Name of the authorizer
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// List of the Amazon Cognito user pool ARNs. Each element is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}.
	// +kubebuilder:validation:Optional
	providerArns?: [...null | string] @go(ProviderArns,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// ID of the associated REST API
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.RestAPI
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	restApiId?: null | string @go(RestAPIID,*string)

	// Type of the authorizer. Possible values are TOKEN for a Lambda function using a single authorization token submitted in a custom header, REQUEST for a Lambda function using incoming request parameters, or COGNITO_USER_POOLS for using an Amazon Cognito user pool. Defaults to TOKEN.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// AuthorizerSpec defines the desired state of Authorizer
#AuthorizerSpec: {
	forProvider: #AuthorizerParameters @go(ForProvider)
}

// AuthorizerStatus defines the observed state of Authorizer.
#AuthorizerStatus: {
	atProvider?: #AuthorizerObservation @go(AtProvider)
}

// Authorizer is the Schema for the Authorizers API. Provides an API Gateway Authorizer.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Authorizer: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	spec:    #AuthorizerSpec   @go(Spec)
	status?: #AuthorizerStatus @go(Status)
}

// AuthorizerList contains a list of Authorizers
#AuthorizerList: {
	items: [...#Authorizer] @go(Items,[]Authorizer)
}
