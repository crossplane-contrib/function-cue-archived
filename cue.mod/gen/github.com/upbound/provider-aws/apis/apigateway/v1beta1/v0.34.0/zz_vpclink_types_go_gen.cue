// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigateway/v1beta1

package v1beta1

#VPCLinkObservation: {
	arn?: null | string @go(Arn,*string)

	// Description of the VPC link.
	description?: null | string @go(Description,*string)

	// Identifier of the VpcLink.
	id?: null | string @go(ID,*string)

	// Name used to label and identify the VPC link.
	name?: null | string @go(Name,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// List of network load balancer arns in the VPC targeted by the VPC link. Currently AWS only supports 1 target.
	targetArns?: [...null | string] @go(TargetArns,[]*string)
}

#VPCLinkParameters: {
	// Description of the VPC link.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Name used to label and identify the VPC link.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// List of network load balancer arns in the VPC targeted by the VPC link. Currently AWS only supports 1 target.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/elbv2/v1beta1.LB
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +crossplane:generate:reference:refFieldName=TargetArnRefs
	// +crossplane:generate:reference:selectorFieldName=TargetArnSelector
	// +kubebuilder:validation:Optional
	targetArns?: [...null | string] @go(TargetArns,[]*string)
}

// VPCLinkSpec defines the desired state of VPCLink
#VPCLinkSpec: {
	forProvider: #VPCLinkParameters @go(ForProvider)
}

// VPCLinkStatus defines the observed state of VPCLink.
#VPCLinkStatus: {
	atProvider?: #VPCLinkObservation @go(AtProvider)
}

// VPCLink is the Schema for the VPCLinks API. Provides an API Gateway VPC Link.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VPCLink: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	spec:    #VPCLinkSpec   @go(Spec)
	status?: #VPCLinkStatus @go(Status)
}

// VPCLinkList contains a list of VPCLinks
#VPCLinkList: {
	items: [...#VPCLink] @go(Items,[]VPCLink)
}
