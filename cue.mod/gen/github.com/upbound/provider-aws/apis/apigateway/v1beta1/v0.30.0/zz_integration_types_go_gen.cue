// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigateway/v1beta1

package v1beta1

#IntegrationObservation: {
	id?: null | string @go(ID,*string)
}

#IntegrationParameters: {
	// List of cache key parameters for the integration.
	// +kubebuilder:validation:Optional
	cacheKeyParameters?: [...null | string] @go(CacheKeyParameters,[]*string)

	// Integration's cache namespace.
	// +kubebuilder:validation:Optional
	cacheNamespace?: null | string @go(CacheNamespace,*string)

	// ID of the VpcLink used for the integration. Required if connection_type is VPC_LINK
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.VPCLink
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	connectionId?: null | string @go(ConnectionID,*string)

	// Integration input's connectionType. Valid values are INTERNET (default for connections through the public routable internet), and VPC_LINK (for private connections between API Gateway and a network load balancer in a VPC).
	// +kubebuilder:validation:Optional
	connectionType?: null | string @go(ConnectionType,*string)

	// How to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
	// +kubebuilder:validation:Optional
	contentHandling?: null | string @go(ContentHandling,*string)

	// Credentials required for the integration. For AWS integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::\*:user/\*.
	// +kubebuilder:validation:Optional
	credentials?: null | string @go(Credentials,*string)

	// HTTP method (GET, POST, PUT, DELETE, HEAD, OPTION, ANY)
	// when calling the associated resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.Method
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("http_method",false)
	// +kubebuilder:validation:Optional
	httpMethod?: null | string @go(HTTPMethod,*string)

	// Integration HTTP method
	// (GET, POST, PUT, DELETE, HEAD, OPTIONs, ANY, PATCH) specifying how API Gateway will interact with the back end.
	// Required if type is AWS, AWS_PROXY, HTTP or HTTP_PROXY.
	// Not all methods are compatible with all AWS integrations.
	// e.g., Lambda function can only be invoked via POST.
	// +kubebuilder:validation:Optional
	integrationHttpMethod?: null | string @go(IntegrationHTTPMethod,*string)

	// Integration passthrough behavior (WHEN_NO_MATCH, WHEN_NO_TEMPLATES, NEVER).  Required if request_templates is used.
	// +kubebuilder:validation:Optional
	passthroughBehavior?: null | string @go(PassthroughBehavior,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Map of request query string parameters and headers that should be passed to the backend responder.
	// For example: request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }
	// +kubebuilder:validation:Optional
	requestParameters?: {[string]: null | string} @go(RequestParameters,map[string]*string)

	// Map of the integration's request templates.
	// +kubebuilder:validation:Optional
	requestTemplates?: {[string]: null | string} @go(RequestTemplates,map[string]*string)

	// API resource ID.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.Resource
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	resourceId?: null | string @go(ResourceID,*string)

	// ID of the associated REST API.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.RestAPI
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	restApiId?: null | string @go(RestAPIID,*string)

	// TLS configuration. See below.
	// +kubebuilder:validation:Optional
	tlsConfig?: [...#TLSConfigParameters] @go(TLSConfig,[]TLSConfigParameters)

	// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
	// +kubebuilder:validation:Optional
	timeoutMilliseconds?: null | float64 @go(TimeoutMilliseconds,*float64)

	// Integration input's type. Valid values are HTTP (for HTTP backends), MOCK (not calling any real backend), AWS (for AWS services), AWS_PROXY (for Lambda proxy integration) and HTTP_PROXY (for HTTP proxy integration). An HTTP or HTTP_PROXY integration with a connection_type of VPC_LINK is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)

	// Input's URI. Required if type is AWS, AWS_PROXY, HTTP or HTTP_PROXY.
	// For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}. region, subdomain and service are used to determine the right endpoint.
	// e.g., arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lambda/v1beta1.Function
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("invoke_arn",true)
	// +kubebuilder:validation:Optional
	uri?: null | string @go(URI,*string)
}

#TLSConfigObservation: {
}

#TLSConfigParameters: {
	// Whether or not API Gateway skips verification that the certificate for an integration endpoint is issued by a supported certificate authority. This isnâ€™t recommended, but it enables you to use certificates that are signed by private certificate authorities, or certificates that are self-signed. If enabled, API Gateway still performs basic certificate validation, which includes checking the certificate's expiration date, hostname, and presence of a root certificate authority. Supported only for HTTP and HTTP_PROXY integrations.
	// +kubebuilder:validation:Optional
	insecureSkipVerification?: null | bool @go(InsecureSkipVerification,*bool)
}

// IntegrationSpec defines the desired state of Integration
#IntegrationSpec: {
	forProvider: #IntegrationParameters @go(ForProvider)
}

// IntegrationStatus defines the observed state of Integration.
#IntegrationStatus: {
	atProvider?: #IntegrationObservation @go(AtProvider)
}

// Integration is the Schema for the Integrations API. Provides an HTTP Method Integration for an API Gateway Integration.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Integration: {
	spec:    #IntegrationSpec   @go(Spec)
	status?: #IntegrationStatus @go(Status)
}

// IntegrationList contains a list of Integrations
#IntegrationList: {
	items: [...#Integration] @go(Items,[]Integration)
}
