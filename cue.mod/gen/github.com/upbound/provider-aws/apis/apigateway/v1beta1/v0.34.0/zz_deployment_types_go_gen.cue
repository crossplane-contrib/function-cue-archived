// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/apigateway/v1beta1

package v1beta1

#DeploymentObservation: {
	// Creation date of the deployment
	createdDate?: null | string @go(CreatedDate,*string)

	// Description of the deployment
	description?: null | string @go(Description,*string)

	// Execution ARN to be used in lambda_permission's source_arn
	// when allowing API Gateway to invoke a Lambda function,
	// e.g., arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod
	executionArn?: null | string @go(ExecutionArn,*string)

	// ID of the deployment
	id?: null | string @go(ID,*string)

	// URL to invoke the API pointing to the stage,
	// e.g., https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod
	invokeUrl?: null | string @go(InvokeURL,*string)

	// REST API identifier.
	restApiId?: null | string @go(RestAPIID,*string)

	// Description to set on the stage managed by the stage_name argument.
	stageDescription?: null | string @go(StageDescription,*string)

	// Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. We recommend using the aws_api_gateway_stage resource instead to manage stages.
	stageName?: null | string @go(StageName,*string)

	// argument or explicit resource references using the resource . The triggers argument should be preferred over depends_on, since depends_on can only capture dependency ordering and will not cause the resource to recreate (redeploy the REST API) with upstream configuration changes.
	triggers?: {[string]: null | string} @go(Triggers,map[string]*string)

	// Map to set on the stage managed by the stage_name argument.
	variables?: {[string]: null | string} @go(Variables,map[string]*string)
}

#DeploymentParameters: {
	// Description of the deployment
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// REST API identifier.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/apigateway/v1beta1.RestAPI
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	restApiId?: null | string @go(RestAPIID,*string)

	// Description to set on the stage managed by the stage_name argument.
	// +kubebuilder:validation:Optional
	stageDescription?: null | string @go(StageDescription,*string)

	// Name of the stage to create with this deployment. If the specified stage already exists, it will be updated to point to the new deployment. We recommend using the aws_api_gateway_stage resource instead to manage stages.
	// +kubebuilder:validation:Optional
	stageName?: null | string @go(StageName,*string)

	// argument or explicit resource references using the resource . The triggers argument should be preferred over depends_on, since depends_on can only capture dependency ordering and will not cause the resource to recreate (redeploy the REST API) with upstream configuration changes.
	// +kubebuilder:validation:Optional
	triggers?: {[string]: null | string} @go(Triggers,map[string]*string)

	// Map to set on the stage managed by the stage_name argument.
	// +kubebuilder:validation:Optional
	variables?: {[string]: null | string} @go(Variables,map[string]*string)
}

// DeploymentSpec defines the desired state of Deployment
#DeploymentSpec: {
	forProvider: #DeploymentParameters @go(ForProvider)
}

// DeploymentStatus defines the observed state of Deployment.
#DeploymentStatus: {
	atProvider?: #DeploymentObservation @go(AtProvider)
}

// Deployment is the Schema for the Deployments API. Manages an API Gateway REST Deployment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Deployment: {
	spec:    #DeploymentSpec   @go(Spec)
	status?: #DeploymentStatus @go(Status)
}

// DeploymentList contains a list of Deployments
#DeploymentList: {
	items: [...#Deployment] @go(Items,[]Deployment)
}
