// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/codestarnotifications/v1beta1

package v1beta1

#NotificationRuleObservation: {
	// The codestar notification rule ARN.
	arn?: null | string @go(Arn,*string)

	// The codestar notification rule ARN.
	id?: null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
	// +kubebuilder:validation:Optional
	target?: [...#TargetObservation] @go(Target,[]TargetObservation)
}

#NotificationRuleParameters: {
	// The level of detail to include in the notifications for this resource. Possible values are BASIC and FULL.
	// +kubebuilder:validation:Required
	detailType?: null | string @go(DetailType,*string)

	// A list of event types associated with this notification rule.
	// For list of allowed events see here.
	// +kubebuilder:validation:Required
	eventTypeIds: [...null | string] @go(EventTypeIds,[]*string)

	// The name of notification rule.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The ARN of the resource to associate with the notification rule.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/codecommit/v1beta1.Repository
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	resource?: null | string @go(Resource,*string)

	// The status of the notification rule. Possible values are ENABLED and DISABLED, default is ENABLED.
	// +kubebuilder:validation:Optional
	status?: null | string @go(Status,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Configuration blocks containing notification target information. Can be specified multiple times. At least one target must be specified on creation.
	// +kubebuilder:validation:Optional
	target?: [...#TargetParameters] @go(Target,[]TargetParameters)
}

#TargetObservation: {
	// The status of the notification rule. Possible values are ENABLED and DISABLED, default is ENABLED.
	status?: null | string @go(Status,*string)
}

#TargetParameters: {
	// The ARN of notification rule target. For example, a SNS Topic ARN.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/sns/v1beta1.Topic
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	address?: null | string @go(Address,*string)

	// The type of the notification target. Default value is SNS.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

// NotificationRuleSpec defines the desired state of NotificationRule
#NotificationRuleSpec: {
	forProvider: #NotificationRuleParameters @go(ForProvider)
}

// NotificationRuleStatus defines the observed state of NotificationRule.
#NotificationRuleStatus: {
	atProvider?: #NotificationRuleObservation @go(AtProvider)
}

// NotificationRule is the Schema for the NotificationRules API. Provides a CodeStar Notifications Rule
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#NotificationRule: {
	spec:    #NotificationRuleSpec   @go(Spec)
	status?: #NotificationRuleStatus @go(Status)
}

// NotificationRuleList contains a list of NotificationRules
#NotificationRuleList: {
	items: [...#NotificationRule] @go(Items,[]NotificationRule)
}
