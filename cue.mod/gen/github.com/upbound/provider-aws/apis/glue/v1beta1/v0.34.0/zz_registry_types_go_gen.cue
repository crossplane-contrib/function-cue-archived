// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/glue/v1beta1

package v1beta1

#RegistryObservation: {
	// Amazon Resource Name (ARN) of Glue Registry.
	arn?: null | string @go(Arn,*string)

	// –  A description of the registry.
	description?: null | string @go(Description,*string)

	// Amazon Resource Name (ARN) of Glue Registry.
	id?: null | string @go(ID,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#RegistryParameters: {
	// –  A description of the registry.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// RegistrySpec defines the desired state of Registry
#RegistrySpec: {
	forProvider: #RegistryParameters @go(ForProvider)
}

// RegistryStatus defines the observed state of Registry.
#RegistryStatus: {
	atProvider?: #RegistryObservation @go(AtProvider)
}

// Registry is the Schema for the Registrys API. Provides a Glue Registry resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Registry: {
	spec:    #RegistrySpec   @go(Spec)
	status?: #RegistryStatus @go(Status)
}

// RegistryList contains a list of Registrys
#RegistryList: {
	items: [...#Registry] @go(Items,[]Registry)
}
