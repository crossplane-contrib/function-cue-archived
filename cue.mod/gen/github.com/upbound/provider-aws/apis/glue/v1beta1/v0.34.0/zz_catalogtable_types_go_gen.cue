// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/glue/v1beta1

package v1beta1

#CatalogTableObservation: {
	// The ARN of the Glue Table.
	arn?: null | string @go(Arn,*string)

	// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
	catalogId?: null | string @go(CatalogID,*string)

	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	databaseName?: null | string @go(DatabaseName,*string)

	// Description of the table.
	description?: null | string @go(Description,*string)

	// Catalog ID, Database name and of the name table.
	id?: null | string @go(ID,*string)

	// Owner of the table.
	owner?: null | string @go(Owner,*string)

	// Properties associated with this table, as a list of key-value pairs.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Configuration block for a maximum of 3 partition indexes. See partition_index below.
	partitionIndex?: [...#PartitionIndexObservation] @go(PartitionIndex,[]PartitionIndexObservation)

	// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See partition_keys below.
	partitionKeys?: [...#PartitionKeysObservation] @go(PartitionKeys,[]PartitionKeysObservation)

	// Retention time for this table.
	retention?: null | float64 @go(Retention,*float64)

	// Configuration block for information about the physical storage of this table. For more information, refer to the Glue Developer Guide. See storage_descriptor below.
	storageDescriptor?: [...#StorageDescriptorObservation] @go(StorageDescriptor,[]StorageDescriptorObservation)

	// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as ALTER TABLE and SHOW CREATE TABLE will fail if this argument is empty.
	tableType?: null | string @go(TableType,*string)

	// Configuration block of a target table for resource linking. See target_table below.
	targetTable?: [...#TargetTableObservation] @go(TargetTable,[]TargetTableObservation)

	// If the table is a view, the expanded text of the view; otherwise null.
	viewExpandedText?: null | string @go(ViewExpandedText,*string)

	// If the table is a view, the original text of the view; otherwise null.
	viewOriginalText?: null | string @go(ViewOriginalText,*string)
}

#CatalogTableParameters: {
	// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
	// +kubebuilder:validation:Required
	catalogId?: null | string @go(CatalogID,*string)

	// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.CatalogDatabase
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// Description of the table.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Owner of the table.
	// +kubebuilder:validation:Optional
	owner?: null | string @go(Owner,*string)

	// Properties associated with this table, as a list of key-value pairs.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Configuration block for a maximum of 3 partition indexes. See partition_index below.
	// +kubebuilder:validation:Optional
	partitionIndex?: [...#PartitionIndexParameters] @go(PartitionIndex,[]PartitionIndexParameters)

	// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See partition_keys below.
	// +kubebuilder:validation:Optional
	partitionKeys?: [...#PartitionKeysParameters] @go(PartitionKeys,[]PartitionKeysParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Retention time for this table.
	// +kubebuilder:validation:Optional
	retention?: null | float64 @go(Retention,*float64)

	// Configuration block for information about the physical storage of this table. For more information, refer to the Glue Developer Guide. See storage_descriptor below.
	// +kubebuilder:validation:Optional
	storageDescriptor?: [...#StorageDescriptorParameters] @go(StorageDescriptor,[]StorageDescriptorParameters)

	// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as ALTER TABLE and SHOW CREATE TABLE will fail if this argument is empty.
	// +kubebuilder:validation:Optional
	tableType?: null | string @go(TableType,*string)

	// Configuration block of a target table for resource linking. See target_table below.
	// +kubebuilder:validation:Optional
	targetTable?: [...#TargetTableParameters] @go(TargetTable,[]TargetTableParameters)

	// If the table is a view, the expanded text of the view; otherwise null.
	// +kubebuilder:validation:Optional
	viewExpandedText?: null | string @go(ViewExpandedText,*string)

	// If the table is a view, the original text of the view; otherwise null.
	// +kubebuilder:validation:Optional
	viewOriginalText?: null | string @go(ViewOriginalText,*string)
}

#ColumnsObservation: {
	// Free-form text comment.
	comment?: null | string @go(Comment,*string)

	// Name of the Column.
	name?: null | string @go(Name,*string)

	// Key-value pairs defining properties associated with the column.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Datatype of data in the Column.
	type?: null | string @go(Type,*string)
}

#ColumnsParameters: {
	// Free-form text comment.
	// +kubebuilder:validation:Optional
	comment?: null | string @go(Comment,*string)

	// Name of the Column.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Key-value pairs defining properties associated with the column.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Datatype of data in the Column.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#PartitionIndexObservation: {
	// Name of the partition index.
	indexName?:   null | string @go(IndexName,*string)
	indexStatus?: null | string @go(IndexStatus,*string)

	// Keys for the partition index.
	keys?: [...null | string] @go(Keys,[]*string)
}

#PartitionIndexParameters: {
	// Name of the partition index.
	// +kubebuilder:validation:Required
	indexName?: null | string @go(IndexName,*string)

	// Keys for the partition index.
	// +kubebuilder:validation:Required
	keys: [...null | string] @go(Keys,[]*string)
}

#PartitionKeysObservation: {
	// Free-form text comment.
	comment?: null | string @go(Comment,*string)

	// Name of the Partition Key.
	name?: null | string @go(Name,*string)

	// Datatype of data in the Partition Key.
	type?: null | string @go(Type,*string)
}

#PartitionKeysParameters: {
	// Free-form text comment.
	// +kubebuilder:validation:Optional
	comment?: null | string @go(Comment,*string)

	// Name of the Partition Key.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Datatype of data in the Partition Key.
	// +kubebuilder:validation:Optional
	type?: null | string @go(Type,*string)
}

#SchemaIDObservation: {
	// Name of the schema registry that contains the schema. Must be provided when schema_name is specified and conflicts with schema_arn.
	registryName?: null | string @go(RegistryName,*string)

	// ARN of the schema. One of schema_arn or schema_name has to be provided.
	schemaArn?: null | string @go(SchemaArn,*string)

	// Name of the schema. One of schema_arn or schema_name has to be provided.
	schemaName?: null | string @go(SchemaName,*string)
}

#SchemaIDParameters: {
	// Name of the schema registry that contains the schema. Must be provided when schema_name is specified and conflicts with schema_arn.
	// +kubebuilder:validation:Optional
	registryName?: null | string @go(RegistryName,*string)

	// ARN of the schema. One of schema_arn or schema_name has to be provided.
	// +kubebuilder:validation:Optional
	schemaArn?: null | string @go(SchemaArn,*string)

	// Name of the schema. One of schema_arn or schema_name has to be provided.
	// +kubebuilder:validation:Optional
	schemaName?: null | string @go(SchemaName,*string)
}

#SchemaReferenceObservation: {
	// Configuration block that contains schema identity fields. Either this or the schema_version_id has to be provided. See schema_id below.
	schemaId?: [...#SchemaIDObservation] @go(SchemaID,[]SchemaIDObservation)

	// Unique ID assigned to a version of the schema. Either this or the schema_id has to be provided.
	schemaVersionId?: null | string @go(SchemaVersionID,*string)

	// Version number of the schema.
	schemaVersionNumber?: null | float64 @go(SchemaVersionNumber,*float64)
}

#SchemaReferenceParameters: {
	// Configuration block that contains schema identity fields. Either this or the schema_version_id has to be provided. See schema_id below.
	// +kubebuilder:validation:Optional
	schemaId?: [...#SchemaIDParameters] @go(SchemaID,[]SchemaIDParameters)

	// Unique ID assigned to a version of the schema. Either this or the schema_id has to be provided.
	// +kubebuilder:validation:Optional
	schemaVersionId?: null | string @go(SchemaVersionID,*string)

	// Version number of the schema.
	// +kubebuilder:validation:Required
	schemaVersionNumber?: null | float64 @go(SchemaVersionNumber,*float64)
}

#SerDeInfoObservation: {
	// Name of the SerDe.
	name?: null | string @go(Name,*string)

	// Map of initialization parameters for the SerDe, in key-value form.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Usually the class that implements the SerDe. An example is org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
	serializationLibrary?: null | string @go(SerializationLibrary,*string)
}

#SerDeInfoParameters: {
	// Name of the SerDe.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Map of initialization parameters for the SerDe, in key-value form.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Usually the class that implements the SerDe. An example is org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
	// +kubebuilder:validation:Optional
	serializationLibrary?: null | string @go(SerializationLibrary,*string)
}

#SkewedInfoObservation: {
	// List of names of columns that contain skewed values.
	skewedColumnNames?: [...null | string] @go(SkewedColumnNames,[]*string)

	// List of values that appear so frequently as to be considered skewed.
	skewedColumnValueLocationMaps?: {[string]: null | string} @go(SkewedColumnValueLocationMaps,map[string]*string)

	// Map of skewed values to the columns that contain them.
	skewedColumnValues?: [...null | string] @go(SkewedColumnValues,[]*string)
}

#SkewedInfoParameters: {
	// List of names of columns that contain skewed values.
	// +kubebuilder:validation:Optional
	skewedColumnNames?: [...null | string] @go(SkewedColumnNames,[]*string)

	// List of values that appear so frequently as to be considered skewed.
	// +kubebuilder:validation:Optional
	skewedColumnValueLocationMaps?: {[string]: null | string} @go(SkewedColumnValueLocationMaps,map[string]*string)

	// Map of skewed values to the columns that contain them.
	// +kubebuilder:validation:Optional
	skewedColumnValues?: [...null | string] @go(SkewedColumnValues,[]*string)
}

#SortColumnsObservation: {
	// Name of the column.
	column?: null | string @go(Column,*string)

	// Whether the column is sorted in ascending (1) or descending order (0).
	sortOrder?: null | float64 @go(SortOrder,*float64)
}

#SortColumnsParameters: {
	// Name of the column.
	// +kubebuilder:validation:Required
	column?: null | string @go(Column,*string)

	// Whether the column is sorted in ascending (1) or descending order (0).
	// +kubebuilder:validation:Required
	sortOrder?: null | float64 @go(SortOrder,*float64)
}

#StorageDescriptorObservation: {
	// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
	bucketColumns?: [...null | string] @go(BucketColumns,[]*string)

	// Configuration block for columns in the table. See columns below.
	columns?: [...#ColumnsObservation] @go(Columns,[]ColumnsObservation)

	// Whether the data in the table is compressed.
	compressed?: null | bool @go(Compressed,*bool)

	// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	inputFormat?: null | string @go(InputFormat,*string)

	// Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	location?: null | string @go(Location,*string)

	// Must be specified if the table contains any dimension columns.
	numberOfBuckets?: null | float64 @go(NumberOfBuckets,*float64)

	// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	outputFormat?: null | string @go(OutputFormat,*string)

	// User-supplied properties in key-value form.
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
	schemaReference?: [...#SchemaReferenceObservation] @go(SchemaReference,[]SchemaReferenceObservation)

	// Configuration block for serialization and deserialization ("SerDe") information. See ser_de_info below.
	serDeInfo?: [...#SerDeInfoObservation] @go(SerDeInfo,[]SerDeInfoObservation)

	// Configuration block with information about values that appear very frequently in a column (skewed values). See skewed_info below.
	skewedInfo?: [...#SkewedInfoObservation] @go(SkewedInfo,[]SkewedInfoObservation)

	// Configuration block for the sort order of each bucket in the table. See sort_columns below.
	sortColumns?: [...#SortColumnsObservation] @go(SortColumns,[]SortColumnsObservation)

	// Whether the table data is stored in subdirectories.
	storedAsSubDirectories?: null | bool @go(StoredAsSubDirectories,*bool)
}

#StorageDescriptorParameters: {
	// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
	// +kubebuilder:validation:Optional
	bucketColumns?: [...null | string] @go(BucketColumns,[]*string)

	// Configuration block for columns in the table. See columns below.
	// +kubebuilder:validation:Optional
	columns?: [...#ColumnsParameters] @go(Columns,[]ColumnsParameters)

	// Whether the data in the table is compressed.
	// +kubebuilder:validation:Optional
	compressed?: null | bool @go(Compressed,*bool)

	// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
	// +kubebuilder:validation:Optional
	inputFormat?: null | string @go(InputFormat,*string)

	// Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// Must be specified if the table contains any dimension columns.
	// +kubebuilder:validation:Optional
	numberOfBuckets?: null | float64 @go(NumberOfBuckets,*float64)

	// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
	// +kubebuilder:validation:Optional
	outputFormat?: null | string @go(OutputFormat,*string)

	// User-supplied properties in key-value form.
	// +kubebuilder:validation:Optional
	parameters?: {[string]: null | string} @go(Parameters,map[string]*string)

	// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
	// +kubebuilder:validation:Optional
	schemaReference?: [...#SchemaReferenceParameters] @go(SchemaReference,[]SchemaReferenceParameters)

	// Configuration block for serialization and deserialization ("SerDe") information. See ser_de_info below.
	// +kubebuilder:validation:Optional
	serDeInfo?: [...#SerDeInfoParameters] @go(SerDeInfo,[]SerDeInfoParameters)

	// Configuration block with information about values that appear very frequently in a column (skewed values). See skewed_info below.
	// +kubebuilder:validation:Optional
	skewedInfo?: [...#SkewedInfoParameters] @go(SkewedInfo,[]SkewedInfoParameters)

	// Configuration block for the sort order of each bucket in the table. See sort_columns below.
	// +kubebuilder:validation:Optional
	sortColumns?: [...#SortColumnsParameters] @go(SortColumns,[]SortColumnsParameters)

	// Whether the table data is stored in subdirectories.
	// +kubebuilder:validation:Optional
	storedAsSubDirectories?: null | bool @go(StoredAsSubDirectories,*bool)
}

#TargetTableObservation: {
	// ID of the Data Catalog in which the table resides.
	catalogId?: null | string @go(CatalogID,*string)

	// Name of the catalog database that contains the target table.
	databaseName?: null | string @go(DatabaseName,*string)

	// Name of the target table.
	name?: null | string @go(Name,*string)
}

#TargetTableParameters: {
	// ID of the Data Catalog in which the table resides.
	// +kubebuilder:validation:Required
	catalogId?: null | string @go(CatalogID,*string)

	// Name of the catalog database that contains the target table.
	// +kubebuilder:validation:Required
	databaseName?: null | string @go(DatabaseName,*string)

	// Name of the target table.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)
}

// CatalogTableSpec defines the desired state of CatalogTable
#CatalogTableSpec: {
	forProvider: #CatalogTableParameters @go(ForProvider)
}

// CatalogTableStatus defines the observed state of CatalogTable.
#CatalogTableStatus: {
	atProvider?: #CatalogTableObservation @go(AtProvider)
}

// CatalogTable is the Schema for the CatalogTables API. Provides a Glue Catalog Table.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#CatalogTable: {
	spec:    #CatalogTableSpec   @go(Spec)
	status?: #CatalogTableStatus @go(Status)
}

// CatalogTableList contains a list of CatalogTables
#CatalogTableList: {
	items: [...#CatalogTable] @go(Items,[]CatalogTable)
}
