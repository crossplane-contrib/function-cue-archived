// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/glue/v1beta1

package v1beta1

#CatalogTargetObservation: {
}

#CatalogTargetParameters: {
	// The name of the connection to use to connect to the JDBC target.
	// +kubebuilder:validation:Optional
	connectionName?: null | string @go(ConnectionName,*string)

	// Glue database where results are written.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.CatalogDatabase
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// The ARN of the dead-letter SQS queue.
	// +kubebuilder:validation:Optional
	dlqEventQueueArn?: null | string @go(DlqEventQueueArn,*string)

	// The ARN of the SQS queue to receive S3 notifications from.
	// +kubebuilder:validation:Optional
	eventQueueArn?: null | string @go(EventQueueArn,*string)

	// A list of catalog tables to be synchronized.
	// +kubebuilder:validation:Required
	tables: [...null | string] @go(Tables,[]*string)
}

#CrawlerObservation: {
	// The ARN of the crawler
	arn?: null | string @go(Arn,*string)

	// Crawler name
	id?: null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#CrawlerParameters: {
	// +kubebuilder:validation:Optional
	catalogTarget?: [...#CatalogTargetParameters] @go(CatalogTarget,[]CatalogTargetParameters)

	// List of custom classifiers. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
	// +kubebuilder:validation:Optional
	classifiers?: [...null | string] @go(Classifiers,[]*string)

	// JSON string of configuration information. For more details see Setting Crawler Configuration Options.
	// +kubebuilder:validation:Optional
	configuration?: null | string @go(Configuration,*string)

	// Glue database where results are written.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.CatalogDatabase
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// +kubebuilder:validation:Optional
	deltaTarget?: [...#DeltaTargetParameters] @go(DeltaTarget,[]DeltaTargetParameters)

	// Description of the crawler.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// List of nested DynamoDB target arguments. See Dynamodb Target below.
	// +kubebuilder:validation:Optional
	dynamodbTarget?: [...#DynamodbTargetParameters] @go(DynamodbTarget,[]DynamodbTargetParameters)

	// List of nested JBDC target arguments. See JDBC Target below.
	// +kubebuilder:validation:Optional
	jdbcTarget?: [...#JdbcTargetParameters] @go(JdbcTarget,[]JdbcTargetParameters)

	// Specifies Lake Formation configuration settings for the crawler. See Lake Formation Configuration below.
	// +kubebuilder:validation:Optional
	lakeFormationConfiguration?: [...#LakeFormationConfigurationParameters] @go(LakeFormationConfiguration,[]LakeFormationConfigurationParameters)

	// Specifies data lineage configuration settings for the crawler. See Lineage Configuration below.
	// +kubebuilder:validation:Optional
	lineageConfiguration?: [...#LineageConfigurationParameters] @go(LineageConfiguration,[]LineageConfigurationParameters)

	// List nested MongoDB target arguments. See MongoDB Target below.
	// +kubebuilder:validation:Optional
	mongodbTarget?: [...#MongodbTargetParameters] @go(MongodbTarget,[]MongodbTargetParameters)

	// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.. See Recrawl Policy below.
	// +kubebuilder:validation:Optional
	recrawlPolicy?: [...#RecrawlPolicyParameters] @go(RecrawlPolicy,[]RecrawlPolicyParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The IAM role friendly name (including path without leading slash), or ARN of an IAM role, used by the crawler to access other resources.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	role?: null | string @go(Role,*string)

	// List nested Amazon S3 target arguments. See S3 Target below.
	// +kubebuilder:validation:Optional
	s3Target?: [...#S3TargetParameters] @go(S3Target,[]S3TargetParameters)

	// Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
	// +kubebuilder:validation:Optional
	schedule?: null | string @go(Schedule,*string)

	// Policy for the crawler's update and deletion behavior. See Schema Change Policy below.
	// +kubebuilder:validation:Optional
	schemaChangePolicy?: [...#SchemaChangePolicyParameters] @go(SchemaChangePolicy,[]SchemaChangePolicyParameters)

	// The name of Security Configuration to be used by the crawler
	// +kubebuilder:validation:Optional
	securityConfiguration?: null | string @go(SecurityConfiguration,*string)

	// The table prefix used for catalog tables that are created.
	// +kubebuilder:validation:Optional
	tablePrefix?: null | string @go(TablePrefix,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#DeltaTargetObservation: {
}

#DeltaTargetParameters: {
	// The name of the connection to use to connect to the JDBC target.
	// +kubebuilder:validation:Optional
	connectionName?: null | string @go(ConnectionName,*string)

	// A list of the Amazon S3 paths to the Delta tables.
	// +kubebuilder:validation:Required
	deltaTables: [...null | string] @go(DeltaTables,[]*string)

	// Specifies whether to write the manifest files to the Delta table path.
	// +kubebuilder:validation:Required
	writeManifest?: null | bool @go(WriteManifest,*bool)
}

#DynamodbTargetObservation: {
}

#DynamodbTargetParameters: {
	// The name of the DynamoDB table to crawl.
	// +kubebuilder:validation:Required
	path?: null | string @go(Path,*string)

	// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to true.
	// +kubebuilder:validation:Optional
	scanAll?: null | bool @go(ScanAll,*bool)

	// The percentage of the configured read capacity units to use by the AWS Glue crawler. The valid values are null or a value between 0.1 to 1.5.
	// +kubebuilder:validation:Optional
	scanRate?: null | float64 @go(ScanRate,*float64)
}

#JdbcTargetObservation: {
}

#JdbcTargetParameters: {
	// The name of the connection to use to connect to the JDBC target.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.Connection
	// +kubebuilder:validation:Optional
	connectionName?: null | string @go(ConnectionName,*string)

	// Specify a value of RAWTYPES or COMMENTS to enable additional metadata intable responses. RAWTYPES provides the native-level datatype. COMMENTS provides comments associated with a column or table in the database.
	// +kubebuilder:validation:Optional
	enableAdditionalMetadata?: [...null | string] @go(EnableAdditionalMetadata,[]*string)

	// A list of glob patterns used to exclude from the crawl.
	// +kubebuilder:validation:Optional
	exclusions?: [...null | string] @go(Exclusions,[]*string)

	// The name of the DynamoDB table to crawl.
	// +kubebuilder:validation:Required
	path?: null | string @go(Path,*string)
}

#LakeFormationConfigurationObservation: {
}

#LakeFormationConfigurationParameters: {
	// Required for cross account crawls. For same account crawls as the target data, this can omitted.
	// +kubebuilder:validation:Optional
	accountId?: null | string @go(AccountID,*string)

	// Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.
	// +kubebuilder:validation:Optional
	useLakeFormationCredentials?: null | bool @go(UseLakeFormationCredentials,*bool)
}

#LineageConfigurationObservation: {
}

#LineageConfigurationParameters: {
	// Specifies whether data lineage is enabled for the crawler. Valid values are: ENABLE and DISABLE. Default value is Disable.
	// +kubebuilder:validation:Optional
	crawlerLineageSettings?: null | string @go(CrawlerLineageSettings,*string)
}

#MongodbTargetObservation: {
}

#MongodbTargetParameters: {
	// The name of the connection to use to connect to the JDBC target.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.Connection
	// +kubebuilder:validation:Optional
	connectionName?: null | string @go(ConnectionName,*string)

	// The name of the DynamoDB table to crawl.
	// +kubebuilder:validation:Required
	path?: null | string @go(Path,*string)

	// Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to true.
	// +kubebuilder:validation:Optional
	scanAll?: null | bool @go(ScanAll,*bool)
}

#RecrawlPolicyObservation: {
}

#RecrawlPolicyParameters: {
	// Specifies whether to crawl the entire dataset again, crawl only folders that were added since the last crawler run, or crawl what S3 notifies the crawler of via SQS. Valid Values are: CRAWL_EVENT_MODE, CRAWL_EVERYTHING and CRAWL_NEW_FOLDERS_ONLY. Default value is CRAWL_EVERYTHING.
	// +kubebuilder:validation:Optional
	recrawlBehavior?: null | string @go(RecrawlBehavior,*string)
}

#S3TargetObservation: {
}

#S3TargetParameters: {
	// The name of the connection to use to connect to the JDBC target.
	// +kubebuilder:validation:Optional
	connectionName?: null | string @go(ConnectionName,*string)

	// The ARN of the dead-letter SQS queue.
	// +kubebuilder:validation:Optional
	dlqEventQueueArn?: null | string @go(DlqEventQueueArn,*string)

	// The ARN of the SQS queue to receive S3 notifications from.
	// +kubebuilder:validation:Optional
	eventQueueArn?: null | string @go(EventQueueArn,*string)

	// A list of glob patterns used to exclude from the crawl.
	// +kubebuilder:validation:Optional
	exclusions?: [...null | string] @go(Exclusions,[]*string)

	// The name of the DynamoDB table to crawl.
	// +kubebuilder:validation:Required
	path?: null | string @go(Path,*string)

	// Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
	// +kubebuilder:validation:Optional
	sampleSize?: null | float64 @go(SampleSize,*float64)
}

#SchemaChangePolicyObservation: {
}

#SchemaChangePolicyParameters: {
	// The deletion behavior when the crawler finds a deleted object. Valid values: LOG, DELETE_FROM_DATABASE, or DEPRECATE_IN_DATABASE. Defaults to DEPRECATE_IN_DATABASE.
	// +kubebuilder:validation:Optional
	deleteBehavior?: null | string @go(DeleteBehavior,*string)

	// The update behavior when the crawler finds a changed schema. Valid values: LOG or UPDATE_IN_DATABASE. Defaults to UPDATE_IN_DATABASE.
	// +kubebuilder:validation:Optional
	updateBehavior?: null | string @go(UpdateBehavior,*string)
}

// CrawlerSpec defines the desired state of Crawler
#CrawlerSpec: {
	forProvider: #CrawlerParameters @go(ForProvider)
}

// CrawlerStatus defines the observed state of Crawler.
#CrawlerStatus: {
	atProvider?: #CrawlerObservation @go(AtProvider)
}

// Crawler is the Schema for the Crawlers API. Manages a Glue Crawler
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Crawler: {
	spec:    #CrawlerSpec   @go(Spec)
	status?: #CrawlerStatus @go(Status)
}

// CrawlerList contains a list of Crawlers
#CrawlerList: {
	items: [...#Crawler] @go(Items,[]Crawler)
}
