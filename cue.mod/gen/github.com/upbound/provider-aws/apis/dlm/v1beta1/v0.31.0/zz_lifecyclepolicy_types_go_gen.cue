// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/dlm/v1beta1

package v1beta1

#ActionObservation: {
}

#ActionParameters: {
	// The rule for copying shared snapshots across Regions. See the cross_region_copy configuration block.
	// +kubebuilder:validation:Required
	crossRegionCopy: [...#CrossRegionCopyParameters] @go(CrossRegionCopy,[]CrossRegionCopyParameters)

	// A descriptive name for the action.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)
}

#CreateRuleObservation: {
}

#CreateRuleParameters: {
	// The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year.
	// +kubebuilder:validation:Optional
	cronExpression?: null | string @go(CronExpression,*string)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	intervalUnit?: null | string @go(IntervalUnit,*string)

	// Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify CLOUD. To create snapshots on the same Outpost as the source resource, specify OUTPOST_LOCAL. If you omit this parameter, CLOUD is used by default. If the policy targets resources in an AWS Region, then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost. Valid values are CLOUD and OUTPOST_LOCAL.
	// +kubebuilder:validation:Optional
	location?: null | string @go(Location,*string)

	// A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1.
	// +kubebuilder:validation:Optional
	times?: [...null | string] @go(Times,[]*string)
}

#CrossRegionCopyObservation: {
}

#CrossRegionCopyParameters: {
	// The encryption settings for the copied snapshot. See the encryption_configuration block. Max of 1 per action.
	// +kubebuilder:validation:Required
	encryptionConfiguration: [...#EncryptionConfigurationParameters] @go(EncryptionConfiguration,[]EncryptionConfigurationParameters)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	// +kubebuilder:validation:Optional
	retainRule?: [...#RetainRuleParameters] @go(RetainRule,[]RetainRuleParameters)

	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	// +kubebuilder:validation:Required
	target?: null | string @go(Target,*string)
}

#CrossRegionCopyRuleObservation: {
}

#CrossRegionCopyRuleParameters: {
	// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kms/v1beta1.Key
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	cmkArn?: null | string @go(CmkArn,*string)

	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	// +kubebuilder:validation:Optional
	copyTags?: null | bool @go(CopyTags,*bool)

	// See the deprecate_rule block. Max of 1 per schedule.
	// +kubebuilder:validation:Optional
	deprecateRule?: [...#DeprecateRuleParameters] @go(DeprecateRule,[]DeprecateRuleParameters)

	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	// +kubebuilder:validation:Required
	encrypted?: null | bool @go(Encrypted,*bool)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	// +kubebuilder:validation:Optional
	retainRule?: [...#CrossRegionCopyRuleRetainRuleParameters] @go(RetainRule,[]CrossRegionCopyRuleRetainRuleParameters)

	// The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.
	// +kubebuilder:validation:Required
	target?: null | string @go(Target,*string)
}

#CrossRegionCopyRuleRetainRuleObservation: {
}

#CrossRegionCopyRuleRetainRuleParameters: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Required
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Required
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#DeprecateRuleObservation: {
}

#DeprecateRuleParameters: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Required
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Required
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#EncryptionConfigurationObservation: {
}

#EncryptionConfigurationParameters: {
	// The Amazon Resource Name (ARN) of the AWS KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
	// +kubebuilder:validation:Optional
	cmkArn?: null | string @go(CmkArn,*string)

	// To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
	// +kubebuilder:validation:Optional
	encrypted?: null | bool @go(Encrypted,*bool)
}

#EventSourceObservation: {
}

#EventSourceParameters: {
	// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
	// +kubebuilder:validation:Required
	parameters: [...#ParametersParameters] @go(Parameters,[]ParametersParameters)

	// The source of the event. Currently only managed CloudWatch Events rules are supported. Valid values are MANAGED_CWE.
	// +kubebuilder:validation:Required
	type?: null | string @go(Type,*string)
}

#FastRestoreRuleObservation: {
}

#FastRestoreRuleParameters: {
	// The Availability Zones in which to enable fast snapshot restore.
	// +kubebuilder:validation:Required
	availabilityZones: [...null | string] @go(AvailabilityZones,[]*string)

	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#LifecyclePolicyObservation: {
	// Amazon Resource Name (ARN) of the DLM Lifecycle Policy.
	arn?: null | string @go(Arn,*string)

	// Identifier of the DLM Lifecycle Policy.
	id?: null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#LifecyclePolicyParameters: {
	// A description for the DLM lifecycle policy.
	// +kubebuilder:validation:Required
	description?: null | string @go(Description,*string)

	// The ARN of an IAM role that is able to be assumed by the DLM service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	executionRoleArn?: null | string @go(ExecutionRoleArn,*string)

	// See the policy_details configuration block. Max of 1.
	// +kubebuilder:validation:Required
	policyDetails: [...#PolicyDetailsParameters] @go(PolicyDetails,[]PolicyDetailsParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Whether the lifecycle policy should be enabled or disabled. ENABLED or DISABLED are valid values. Defaults to ENABLED.
	// +kubebuilder:validation:Optional
	state?: null | string @go(State,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ParametersObservation: {
}

#ParametersParameters: {
	// The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.
	// +kubebuilder:validation:Required
	descriptionRegex?: null | string @go(DescriptionRegex,*string)

	// The type of event. Currently, only shareSnapshot events are supported.
	// +kubebuilder:validation:Required
	eventType?: null | string @go(EventType,*string)

	// The IDs of the AWS accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified AWS accounts shares a snapshot with your account.
	// +kubebuilder:validation:Required
	snapshotOwner: [...null | string] @go(SnapshotOwner,[]*string)
}

#PolicyDetailsObservation: {
}

#PolicyDetailsParameters: {
	// The actions to be performed when the event-based policy is triggered. You can specify only one action per policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the action configuration block.
	// +kubebuilder:validation:Optional
	action?: [...#ActionParameters] @go(Action,[]ActionParameters)

	// The event that triggers the event-based policy. This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter. See the event_source configuration block.
	// +kubebuilder:validation:Optional
	eventSource?: [...#EventSourceParameters] @go(EventSource,[]EventSourceParameters)

	// A set of optional parameters for snapshot and AMI lifecycle policies. See the parameters configuration block.
	// +kubebuilder:validation:Optional
	parameters?: [...#PolicyDetailsParametersParameters] @go(Parameters,[]PolicyDetailsParametersParameters)

	// The valid target resource types and actions a policy can manage. Specify EBS_SNAPSHOT_MANAGEMENT to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify IMAGE_MANAGEMENT to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify EVENT_BASED_POLICY to create an event-based policy that performs specific actions when a defined event occurs in your AWS account. Default value is EBS_SNAPSHOT_MANAGEMENT.
	// +kubebuilder:validation:Optional
	policyType?: null | string @go(PolicyType,*string)

	// The location of the resources to backup. If the source resources are located in an AWS Region, specify CLOUD. If the source resources are located on an Outpost in your account, specify OUTPOST. If you specify OUTPOST, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account. Valid values are CLOUD and OUTPOST.
	// +kubebuilder:validation:Optional
	resourceLocations?: [...null | string] @go(ResourceLocations,[]*string)

	// A list of resource types that should be targeted by the lifecycle policy. Valid values are VOLUME and INSTANCE.
	// +kubebuilder:validation:Optional
	resourceTypes?: [...null | string] @go(ResourceTypes,[]*string)

	// See the schedule configuration block.
	// +kubebuilder:validation:Optional
	schedule?: [...#ScheduleParameters] @go(Schedule,[]ScheduleParameters)

	// A map of tag keys and their values. Any resources that match the resource_types and are tagged with any of these tags will be targeted.
	// +kubebuilder:validation:Optional
	targetTags?: {[string]: null | string} @go(TargetTags,map[string]*string)
}

#PolicyDetailsParametersObservation: {
}

#PolicyDetailsParametersParameters: {
	// Indicates whether to exclude the root volume from snapshots created using CreateSnapshots. The default is false.
	// +kubebuilder:validation:Optional
	excludeBootVolume?: null | bool @go(ExcludeBootVolume,*bool)

	// Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle policy runs. true indicates that targeted instances are not rebooted when the policy runs. false indicates that target instances are rebooted when the policy runs. The default is true (instances are not rebooted).
	// +kubebuilder:validation:Optional
	noReboot?: null | bool @go(NoReboot,*bool)
}

#RetainRuleObservation: {
}

#RetainRuleParameters: {
	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Required
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Required
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#ScheduleDeprecateRuleObservation: {
}

#ScheduleDeprecateRuleParameters: {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#ScheduleObservation: {
}

#ScheduleParameters: {
	// Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
	// +kubebuilder:validation:Optional
	copyTags?: null | bool @go(CopyTags,*bool)

	// See the create_rule block. Max of 1 per schedule.
	// +kubebuilder:validation:Required
	createRule: [...#CreateRuleParameters] @go(CreateRule,[]CreateRuleParameters)

	// See the cross_region_copy_rule block. Max of 3 per schedule.
	// +kubebuilder:validation:Optional
	crossRegionCopyRule?: [...#CrossRegionCopyRuleParameters] @go(CrossRegionCopyRule,[]CrossRegionCopyRuleParameters)

	// See the deprecate_rule block. Max of 1 per schedule.
	// +kubebuilder:validation:Optional
	deprecateRule?: [...#ScheduleDeprecateRuleParameters] @go(DeprecateRule,[]ScheduleDeprecateRuleParameters)

	// See the fast_restore_rule block. Max of 1 per schedule.
	// +kubebuilder:validation:Optional
	fastRestoreRule?: [...#FastRestoreRuleParameters] @go(FastRestoreRule,[]FastRestoreRuleParameters)

	// A descriptive name for the action.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Specifies the retention rule for cross-Region snapshot copies. See the retain_rule block. Max of 1 per action.
	// +kubebuilder:validation:Required
	retainRule: [...#ScheduleRetainRuleParameters] @go(RetainRule,[]ScheduleRetainRuleParameters)

	// See the share_rule block. Max of 1 per schedule.
	// +kubebuilder:validation:Optional
	shareRule?: [...#ShareRuleParameters] @go(ShareRule,[]ShareRuleParameters)

	// A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
	// +kubebuilder:validation:Optional
	tagsToAdd?: {[string]: null | string} @go(TagsToAdd,map[string]*string)

	// A map of tag keys and variable values, where the values are determined when the policy is executed. Only $(instance-id) or $(timestamp) are valid values. Can only be used when resource_types is INSTANCE.
	// +kubebuilder:validation:Optional
	variableTags?: {[string]: null | string} @go(VariableTags,map[string]*string)
}

#ScheduleRetainRuleObservation: {
}

#ScheduleRetainRuleParameters: {
	// Specifies the number of oldest AMIs to deprecate. Must be an integer between 1 and 1000.
	// +kubebuilder:validation:Optional
	count?: null | float64 @go(Count,*float64)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	interval?: null | float64 @go(Interval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	intervalUnit?: null | string @go(IntervalUnit,*string)
}

#ShareRuleObservation: {
}

#ShareRuleParameters: {
	// The IDs of the AWS accounts with which to share the snapshots.
	// +kubebuilder:validation:Required
	targetAccounts: [...null | string] @go(TargetAccounts,[]*string)

	// How often this lifecycle policy should be evaluated. 1, 2,3,4,6,8,12 or 24 are valid values.
	// +kubebuilder:validation:Optional
	unshareInterval?: null | float64 @go(UnshareInterval,*float64)

	// The unit for how often the lifecycle policy should be evaluated. HOURS is currently the only allowed value and also the default value.
	// +kubebuilder:validation:Optional
	unshareIntervalUnit?: null | string @go(UnshareIntervalUnit,*string)
}

// LifecyclePolicySpec defines the desired state of LifecyclePolicy
#LifecyclePolicySpec: {
	forProvider: #LifecyclePolicyParameters @go(ForProvider)
}

// LifecyclePolicyStatus defines the observed state of LifecyclePolicy.
#LifecyclePolicyStatus: {
	atProvider?: #LifecyclePolicyObservation @go(AtProvider)
}

// LifecyclePolicy is the Schema for the LifecyclePolicys API. Provides a Data Lifecycle Manager (DLM) lifecycle policy for managing snapshots.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#LifecyclePolicy: {
	spec:    #LifecyclePolicySpec   @go(Spec)
	status?: #LifecyclePolicyStatus @go(Status)
}

// LifecyclePolicyList contains a list of LifecyclePolicys
#LifecyclePolicyList: {
	items: [...#LifecyclePolicy] @go(Items,[]LifecyclePolicy)
}
