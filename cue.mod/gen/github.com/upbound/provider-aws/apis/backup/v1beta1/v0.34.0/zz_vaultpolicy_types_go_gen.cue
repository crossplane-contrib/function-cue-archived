// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/backup/v1beta1

package v1beta1

#VaultPolicyObservation: {
	// The ARN of the vault.
	backupVaultArn?: null | string @go(BackupVaultArn,*string)

	// Name of the backup vault to add policy for.
	backupVaultName?: null | string @go(BackupVaultName,*string)

	// The name of the vault.
	id?: null | string @go(ID,*string)

	// The backup vault access policy document in JSON format.
	policy?: null | string @go(Policy,*string)
}

#VaultPolicyParameters: {
	// Name of the backup vault to add policy for.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/backup/v1beta1.Vault
	// +kubebuilder:validation:Optional
	backupVaultName?: null | string @go(BackupVaultName,*string)

	// The backup vault access policy document in JSON format.
	// +kubebuilder:validation:Optional
	policy?: null | string @go(Policy,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// VaultPolicySpec defines the desired state of VaultPolicy
#VaultPolicySpec: {
	forProvider: #VaultPolicyParameters @go(ForProvider)
}

// VaultPolicyStatus defines the observed state of VaultPolicy.
#VaultPolicyStatus: {
	atProvider?: #VaultPolicyObservation @go(AtProvider)
}

// VaultPolicy is the Schema for the VaultPolicys API. Provides an AWS Backup vault policy resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#VaultPolicy: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.policy)",message="policy is a required parameter"
	spec:    #VaultPolicySpec   @go(Spec)
	status?: #VaultPolicyStatus @go(Status)
}

// VaultPolicyList contains a list of VaultPolicys
#VaultPolicyList: {
	items: [...#VaultPolicy] @go(Items,[]VaultPolicy)
}
