// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/backup/v1beta1

package v1beta1

#ControlObservation: {
	// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
	inputParameter?: [...#InputParameterObservation] @go(InputParameter,[]InputParameterObservation)

	// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	name?: null | string @go(Name,*string)

	// The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
	scope?: [...#ScopeObservation] @go(Scope,[]ScopeObservation)
}

#ControlParameters: {
	// One or more input parameter blocks. An example of a control with two parameters is: "backup plan frequency is at least daily and the retention period is at least 1 year". The first parameter is daily. The second parameter is 1 year. Detailed below.
	// +kubebuilder:validation:Optional
	inputParameter?: [...#InputParameterParameters] @go(InputParameter,[]InputParameterParameters)

	// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
	// +kubebuilder:validation:Optional
	scope?: [...#ScopeParameters] @go(Scope,[]ScopeParameters)
}

#FrameworkObservation: {
	// The ARN of the backup framework.
	arn?: null | string @go(Arn,*string)

	// One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
	control?: [...#ControlObservation] @go(Control,[]ControlObservation)

	// The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC).
	creationTime?: null | string @go(CreationTime,*string)

	// The deployment status of a framework. The statuses are: CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED | FAILED.
	deploymentStatus?: null | string @go(DeploymentStatus,*string)

	// The description of the framework with a maximum of 1,024 characters
	description?: null | string @go(Description,*string)

	// The id of the backup framework.
	id?: null | string @go(ID,*string)

	// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	name?: null | string @go(Name,*string)

	// A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. For more information refer to the AWS documentation for Framework Status
	status?: null | string @go(Status,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#FrameworkParameters: {
	// One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.
	// +kubebuilder:validation:Optional
	control?: [...#ControlParameters] @go(Control,[]ControlParameters)

	// The description of the framework with a maximum of 1,024 characters
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#InputParameterObservation: {
	// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	name?: null | string @go(Name,*string)

	// The value of parameter, for example, hourly.
	value?: null | string @go(Value,*string)
}

#InputParameterParameters: {
	// The unique name of the framework. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters, numbers, and underscores.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The value of parameter, for example, hourly.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#ScopeObservation: {
	// The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
	complianceResourceIds?: [...null | string] @go(ComplianceResourceIds,[]*string)

	// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
	complianceResourceTypes?: [...null | string] @go(ComplianceResourceTypes,[]*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ScopeParameters: {
	// The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.
	// +kubebuilder:validation:Optional
	complianceResourceIds?: [...null | string] @go(ComplianceResourceIds,[]*string)

	// Describes whether the control scope includes one or more types of resources, such as EFS or RDS.
	// +kubebuilder:validation:Optional
	complianceResourceTypes?: [...null | string] @go(ComplianceResourceTypes,[]*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

// FrameworkSpec defines the desired state of Framework
#FrameworkSpec: {
	forProvider: #FrameworkParameters @go(ForProvider)
}

// FrameworkStatus defines the observed state of Framework.
#FrameworkStatus: {
	atProvider?: #FrameworkObservation @go(AtProvider)
}

// Framework is the Schema for the Frameworks API. Provides an AWS Backup Framework resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Framework: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.control)",message="control is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	spec:    #FrameworkSpec   @go(Spec)
	status?: #FrameworkStatus @go(Status)
}

// FrameworkList contains a list of Frameworks
#FrameworkList: {
	items: [...#Framework] @go(Items,[]Framework)
}
