// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lakeformation/v1beta1

package v1beta1

#ResourceObservation: {
	id?: null | string @go(ID,*string)

	// The date and time the resource was last modified in RFC 3339 format.
	lastModified?: null | string @go(LastModified,*string)
}

#ResourceParameters: {
	// â€“  Amazon Resource Name (ARN) of the resource, an S3 path.
	// +kubebuilder:validation:Required
	arn?: null | string @go(Arn,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// linked role must exist and is used.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)
}

// ResourceSpec defines the desired state of Resource
#ResourceSpec: {
	forProvider: #ResourceParameters @go(ForProvider)
}

// ResourceStatus defines the observed state of Resource.
#ResourceStatus: {
	atProvider?: #ResourceObservation @go(AtProvider)
}

// Resource is the Schema for the Resources API. Registers a Lake Formation resource as managed by the Data Catalog.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Resource: {
	spec:    #ResourceSpec   @go(Spec)
	status?: #ResourceStatus @go(Status)
}

// ResourceList contains a list of Resources
#ResourceList: {
	items: [...#Resource] @go(Items,[]Resource)
}
