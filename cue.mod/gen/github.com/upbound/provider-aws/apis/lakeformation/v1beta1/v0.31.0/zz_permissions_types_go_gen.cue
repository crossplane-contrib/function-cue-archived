// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lakeformation/v1beta1

package v1beta1

#DataLocationObservation: {
}

#DataLocationParameters: {
	// –  Amazon Resource Name (ARN) that uniquely identifies the data location resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/lakeformation/v1beta1.Resource
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",false)
	// +kubebuilder:validation:Optional
	arn?: null | string @go(Arn,*string)

	// Identifier for the Data Catalog where the location is registered with Lake Formation. By default, it is the account ID of the caller.
	// +kubebuilder:validation:Optional
	catalogId?: null | string @go(CatalogID,*string)
}

#DatabaseObservation: {
}

#DatabaseParameters: {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	// +kubebuilder:validation:Optional
	catalogId?: null | string @go(CatalogID,*string)

	// –  Name of the database resource. Unique to the Data Catalog.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.CatalogDatabase
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)
}

#ExpressionObservation: {
}

#ExpressionParameters: {
	// name of an LF-Tag.
	// +kubebuilder:validation:Required
	key?: null | string @go(Key,*string)

	// A list of possible values of an LF-Tag.
	// +kubebuilder:validation:Required
	values: [...null | string] @go(Values,[]*string)
}

#LfTagObservation: {
}

#LfTagParameters: {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	// +kubebuilder:validation:Optional
	catalogId?: null | string @go(CatalogID,*string)

	// name for the tag.
	// +kubebuilder:validation:Required
	key?: null | string @go(Key,*string)

	// A list of possible values an attribute can take.
	// +kubebuilder:validation:Required
	values: [...null | string] @go(Values,[]*string)
}

#LfTagPolicyObservation: {
}

#LfTagPolicyParameters: {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	// +kubebuilder:validation:Optional
	catalogId?: null | string @go(CatalogID,*string)

	// A list of tag conditions that apply to the resource's tag policy. Configuration block for tag conditions that apply to the policy. See expression below.
	// +kubebuilder:validation:Required
	expression: [...#ExpressionParameters] @go(Expression,[]ExpressionParameters)

	// –  The resource type for which the tag policy applies. Valid values are DATABASE and TABLE.
	// +kubebuilder:validation:Required
	resourceType?: null | string @go(ResourceType,*string)
}

#PermissionsObservation: {
	id?: null | string @go(ID,*string)
}

#PermissionsParameters: {
	// –  Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	// +kubebuilder:validation:Optional
	catalogId?: null | string @go(CatalogID,*string)

	// Whether the permissions are to be granted for the Data Catalog. Defaults to false.
	// +kubebuilder:validation:Optional
	catalogResource?: null | bool @go(CatalogResource,*bool)

	// Configuration block for a data location resource. Detailed below.
	// +kubebuilder:validation:Optional
	dataLocation?: [...#DataLocationParameters] @go(DataLocation,[]DataLocationParameters)

	// Configuration block for a database resource. Detailed below.
	// +kubebuilder:validation:Optional
	database?: [...#DatabaseParameters] @go(Database,[]DatabaseParameters)

	// Configuration block for an LF-tag resource. Detailed below.
	// +kubebuilder:validation:Optional
	lfTag?: [...#LfTagParameters] @go(LfTag,[]LfTagParameters)

	// Configuration block for an LF-tag policy resource. Detailed below.
	// +kubebuilder:validation:Optional
	lfTagPolicy?: [...#LfTagPolicyParameters] @go(LfTagPolicy,[]LfTagPolicyParameters)

	// –  List of permissions granted to the principal. Valid values may include ALL, ALTER, ASSOCIATE, CREATE_DATABASE, CREATE_TABLE, DATA_LOCATION_ACCESS, DELETE, DESCRIBE, DROP, INSERT, and SELECT. For details on each permission, see Lake Formation Permissions Reference.
	// +kubebuilder:validation:Required
	permissions: [...null | string] @go(Permissions,[]*string)

	// Subset of permissions which the principal can pass.
	// +kubebuilder:validation:Optional
	permissionsWithGrantOption?: [...null | string] @go(PermissionsWithGrantOption,[]*string)

	// account permissions. For more information, see Lake Formation Permissions Reference.
	// +kubebuilder:validation:Required
	principal?: null | string @go(Principal,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Configuration block for a table resource. Detailed below.
	// +kubebuilder:validation:Optional
	table?: [...#TableParameters] @go(Table,[]TableParameters)

	// Configuration block for a table with columns resource. Detailed below.
	// +kubebuilder:validation:Optional
	tableWithColumns?: [...#TableWithColumnsParameters] @go(TableWithColumns,[]TableWithColumnsParameters)
}

#TableObservation: {
}

#TableParameters: {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	// +kubebuilder:validation:Optional
	catalogId?: null | string @go(CatalogID,*string)

	// –  Name of the database for the table. Unique to a Data Catalog.
	// +kubebuilder:validation:Required
	databaseName?: null | string @go(DatabaseName,*string)

	// Name of the table.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Whether to use a wildcard representing every table under a database. Defaults to false.
	// +kubebuilder:validation:Optional
	wildcard?: null | bool @go(Wildcard,*bool)
}

#TableWithColumnsObservation: {
}

#TableWithColumnsParameters: {
	// Identifier for the Data Catalog. By default, it is the account ID of the caller.
	// +kubebuilder:validation:Optional
	catalogId?: null | string @go(CatalogID,*string)

	// Set of column names for the table.
	// +kubebuilder:validation:Optional
	columnNames?: [...null | string] @go(ColumnNames,[]*string)

	// –  Name of the database for the table with columns resource. Unique to the Data Catalog.
	// +kubebuilder:validation:Required
	databaseName?: null | string @go(DatabaseName,*string)

	// Set of column names for the table to exclude.
	// +kubebuilder:validation:Optional
	excludedColumnNames?: [...null | string] @go(ExcludedColumnNames,[]*string)

	// –  Name of the table resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/glue/v1beta1.CatalogTable
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Whether to use a column wildcard.
	// +kubebuilder:validation:Optional
	wildcard?: null | bool @go(Wildcard,*bool)
}

// PermissionsSpec defines the desired state of Permissions
#PermissionsSpec: {
	forProvider: #PermissionsParameters @go(ForProvider)
}

// PermissionsStatus defines the observed state of Permissions.
#PermissionsStatus: {
	atProvider?: #PermissionsObservation @go(AtProvider)
}

// Permissions is the Schema for the Permissionss API. Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Permissions: {
	spec:    #PermissionsSpec   @go(Spec)
	status?: #PermissionsStatus @go(Status)
}

// PermissionsList contains a list of Permissionss
#PermissionsList: {
	items: [...#Permissions] @go(Items,[]Permissions)
}
