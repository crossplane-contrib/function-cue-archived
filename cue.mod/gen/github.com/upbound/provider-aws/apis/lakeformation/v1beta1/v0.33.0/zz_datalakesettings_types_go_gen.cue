// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/lakeformation/v1beta1

package v1beta1

#CreateDatabaseDefaultPermissionsObservation: {
}

#CreateDatabaseDefaultPermissionsParameters: {
	// List of permissions that are granted to the principal. Valid values may include ALL, SELECT, ALTER, DROP, DELETE, INSERT, DESCRIBE, and CREATE_TABLE. For more details, see Lake Formation Permissions Reference.
	// +kubebuilder:validation:Optional
	permissions?: [...null | string] @go(Permissions,[]*string)

	// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set principal to IAM_ALLOWED_PRINCIPALS and permissions to ["ALL"].
	// +kubebuilder:validation:Optional
	principal?: null | string @go(Principal,*string)
}

#CreateTableDefaultPermissionsObservation: {
}

#CreateTableDefaultPermissionsParameters: {
	// List of permissions that are granted to the principal. Valid values may include ALL, SELECT, ALTER, DROP, DELETE, INSERT, and DESCRIBE. For more details, see Lake Formation Permissions Reference.
	// +kubebuilder:validation:Optional
	permissions?: [...null | string] @go(Permissions,[]*string)

	// Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set principal to IAM_ALLOWED_PRINCIPALS and permissions to ["ALL"].
	// +kubebuilder:validation:Optional
	principal?: null | string @go(Principal,*string)
}

#DataLakeSettingsObservation: {
	id?: null | string @go(ID,*string)
}

#DataLakeSettingsParameters: {
	// –  Set of ARNs of AWS Lake Formation principals (IAM users or roles).
	// +kubebuilder:validation:Optional
	admins?: [...null | string] @go(Admins,[]*string)

	// –  Identifier for the Data Catalog. By default, the account ID.
	// +kubebuilder:validation:Optional
	catalogId?: null | string @go(CatalogID,*string)

	// Up to three configuration blocks of principal permissions for default create database permissions. Detailed below.
	// +kubebuilder:validation:Optional
	createDatabaseDefaultPermissions?: [...#CreateDatabaseDefaultPermissionsParameters] @go(CreateDatabaseDefaultPermissions,[]CreateDatabaseDefaultPermissionsParameters)

	// Up to three configuration blocks of principal permissions for default create table permissions. Detailed below.
	// +kubebuilder:validation:Optional
	createTableDefaultPermissions?: [...#CreateTableDefaultPermissionsParameters] @go(CreateTableDefaultPermissions,[]CreateTableDefaultPermissionsParameters)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// owning account IDs that the caller's account can use to share their user access details (user ARNs).
	// +kubebuilder:validation:Optional
	trustedResourceOwners?: [...null | string] @go(TrustedResourceOwners,[]*string)
}

// DataLakeSettingsSpec defines the desired state of DataLakeSettings
#DataLakeSettingsSpec: {
	forProvider: #DataLakeSettingsParameters @go(ForProvider)
}

// DataLakeSettingsStatus defines the observed state of DataLakeSettings.
#DataLakeSettingsStatus: {
	atProvider?: #DataLakeSettingsObservation @go(AtProvider)
}

// DataLakeSettings is the Schema for the DataLakeSettingss API. Manages data lake administrators and default database and table permissions
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#DataLakeSettings: {
	spec:    #DataLakeSettingsSpec   @go(Spec)
	status?: #DataLakeSettingsStatus @go(Status)
}

// DataLakeSettingsList contains a list of DataLakeSettingss
#DataLakeSettingsList: {
	items: [...#DataLakeSettings] @go(Items,[]DataLakeSettings)
}
