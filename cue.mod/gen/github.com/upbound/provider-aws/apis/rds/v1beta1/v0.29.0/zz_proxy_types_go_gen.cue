// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/rds/v1beta1

package v1beta1

#AuthObservation: {
}

#AuthParameters: {
	// The type of authentication that the proxy uses for connections from the proxy to the underlying database. One of SECRETS.
	// +kubebuilder:validation:Optional
	authScheme?: null | string @go(AuthScheme,*string)

	// A user-specified description about the authentication used by a proxy to log in as a specific database user.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. One of DISABLED, REQUIRED.
	// +kubebuilder:validation:Optional
	iamAuth?: null | string @go(IAMAuth,*string)

	// The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/secretsmanager/v1beta1.Secret
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	secretArn?: null | string @go(SecretArn,*string)

	// The name of the database user to which the proxy connects.
	// +kubebuilder:validation:Optional
	username?: null | string @go(Username,*string)
}

#ProxyObservation: {
	// The Amazon Resource Name (ARN) for the proxy.
	arn?: null | string @go(Arn,*string)

	// The endpoint that you can use to connect to the proxy. You include the endpoint value in the connection string for a database client application.
	endpoint?: null | string @go(Endpoint,*string)

	// The Amazon Resource Name (ARN) for the proxy.
	id?: null | string @go(ID,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)
}

#ProxyParameters: {
	// Configuration block(s) with authorization mechanisms to connect to the associated instances or clusters. Described below.
	// +kubebuilder:validation:Required
	auth: [...#AuthParameters] @go(Auth,[]AuthParameters)

	// Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
	// +kubebuilder:validation:Optional
	debugLogging?: null | bool @go(DebugLogging,*bool)

	// The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. The engine family applies to MySQL and PostgreSQL for both RDS and Aurora. Valid values are MYSQL and POSTGRESQL.
	// +kubebuilder:validation:Required
	engineFamily?: null | string @go(EngineFamily,*string)

	// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
	// +kubebuilder:validation:Optional
	idleClientTimeout?: null | float64 @go(IdleClientTimeout,*float64)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
	// +kubebuilder:validation:Optional
	requireTls?: null | bool @go(RequireTLS,*bool)

	// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	roleArn?: null | string @go(RoleArn,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// One or more VPC security group IDs to associate with the new proxy.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:refFieldName=VPCSecurityGroupIDRefs
	// +crossplane:generate:reference:selectorFieldName=VPCSecurityGroupIDSelector
	// +kubebuilder:validation:Optional
	vpcSecurityGroupIds?: [...null | string] @go(VPCSecurityGroupIds,[]*string)

	// One or more VPC subnet IDs to associate with the new proxy.
	// +kubebuilder:validation:Required
	vpcSubnetIds: [...null | string] @go(VPCSubnetIds,[]*string)
}

// ProxySpec defines the desired state of Proxy
#ProxySpec: {
	forProvider: #ProxyParameters @go(ForProvider)
}

// ProxyStatus defines the observed state of Proxy.
#ProxyStatus: {
	atProvider?: #ProxyObservation @go(AtProvider)
}

// Proxy is the Schema for the Proxys API. Provides an RDS DB proxy resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Proxy: {
	spec:    #ProxySpec   @go(Spec)
	status?: #ProxyStatus @go(Status)
}

// ProxyList contains a list of Proxys
#ProxyList: {
	items: [...#Proxy] @go(Items,[]Proxy)
}
