// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/rds/v1beta1

package v1beta1

#GlobalClusterMembersObservation: {
	// Amazon Resource Name (ARN) of member DB Cluster
	dbClusterArn?: null | string @go(DBClusterArn,*string)

	// Whether the member is the primary DB Cluster
	isWriter?: null | bool @go(IsWriter,*bool)
}

#GlobalClusterMembersParameters: {
}

#GlobalClusterObservation: {
	// RDS Global Cluster Amazon Resource Name (ARN)
	arn?: null | string @go(Arn,*string)

	// Name for an automatically created database on cluster creation.
	databaseName?: null | string @go(DatabaseName,*string)

	// If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false.
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// Name of the database engine to be used for this DB cluster. Valid values: aurora, aurora-mysql, aurora-postgresql. Defaults to aurora. Conflicts with source_db_cluster_identifier.
	engine?: null | string @go(Engine,*string)

	// Engine version of the Aurora global database. The engine, engine_version, and instance_class (on the aws_rds_cluster_instance) must together support global databases. See Using Amazon Aurora global databases for more information. NOTE: To avoid an inconsistent final plan error while upgrading, use the lifecycle ignore_changes for engine_version meta argument on the associated aws_rds_cluster resource as shown above in Upgrading Engine Versions example.
	engineVersion?:       null | string @go(EngineVersion,*string)
	engineVersionActual?: null | string @go(EngineVersionActual,*string)

	// Enable to remove DB Cluster members from Global Cluster on destroy. Required with source_db_cluster_identifier.
	forceDestroy?: null | bool @go(ForceDestroy,*bool)

	// Set of objects containing Global Cluster members.
	globalClusterMembers?: [...#GlobalClusterMembersObservation] @go(GlobalClusterMembers,[]GlobalClusterMembersObservation)

	// AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed
	globalClusterResourceId?: null | string @go(GlobalClusterResourceID,*string)

	// RDS Global Cluster identifier
	id?: null | string @go(ID,*string)

	// Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation.
	sourceDbClusterIdentifier?: null | string @go(SourceDBClusterIdentifier,*string)

	// Specifies whether the DB cluster is encrypted. The default is false unless source_db_cluster_identifier is specified and encrypted.
	storageEncrypted?: null | bool @go(StorageEncrypted,*bool)
}

#GlobalClusterParameters: {
	// Name for an automatically created database on cluster creation.
	// +kubebuilder:validation:Optional
	databaseName?: null | string @go(DatabaseName,*string)

	// If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false.
	// +kubebuilder:validation:Optional
	deletionProtection?: null | bool @go(DeletionProtection,*bool)

	// Name of the database engine to be used for this DB cluster. Valid values: aurora, aurora-mysql, aurora-postgresql. Defaults to aurora. Conflicts with source_db_cluster_identifier.
	// +kubebuilder:validation:Optional
	engine?: null | string @go(Engine,*string)

	// Engine version of the Aurora global database. The engine, engine_version, and instance_class (on the aws_rds_cluster_instance) must together support global databases. See Using Amazon Aurora global databases for more information. NOTE: To avoid an inconsistent final plan error while upgrading, use the lifecycle ignore_changes for engine_version meta argument on the associated aws_rds_cluster resource as shown above in Upgrading Engine Versions example.
	// +kubebuilder:validation:Optional
	engineVersion?: null | string @go(EngineVersion,*string)

	// Enable to remove DB Cluster members from Global Cluster on destroy. Required with source_db_cluster_identifier.
	// +kubebuilder:validation:Optional
	forceDestroy?: null | bool @go(ForceDestroy,*bool)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/rds/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	sourceDbClusterIdentifier?: null | string @go(SourceDBClusterIdentifier,*string)

	// Specifies whether the DB cluster is encrypted. The default is false unless source_db_cluster_identifier is specified and encrypted.
	// +kubebuilder:validation:Optional
	storageEncrypted?: null | bool @go(StorageEncrypted,*bool)
}

// GlobalClusterSpec defines the desired state of GlobalCluster
#GlobalClusterSpec: {
	forProvider: #GlobalClusterParameters @go(ForProvider)
}

// GlobalClusterStatus defines the observed state of GlobalCluster.
#GlobalClusterStatus: {
	atProvider?: #GlobalClusterObservation @go(AtProvider)
}

// GlobalCluster is the Schema for the GlobalClusters API. Manages an RDS Global Cluster
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#GlobalCluster: {
	spec:    #GlobalClusterSpec   @go(Spec)
	status?: #GlobalClusterStatus @go(Status)
}

// GlobalClusterList contains a list of GlobalClusters
#GlobalClusterList: {
	items: [...#GlobalCluster] @go(Items,[]GlobalCluster)
}
