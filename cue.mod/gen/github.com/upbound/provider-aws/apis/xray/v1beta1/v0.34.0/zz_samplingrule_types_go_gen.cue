// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/xray/v1beta1

package v1beta1

#SamplingRuleObservation: {
	// The ARN of the sampling rule.
	arn?: null | string @go(Arn,*string)

	// Matches attributes derived from the request.
	attributes?: {[string]: null | string} @go(Attributes,map[string]*string)

	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	fixedRate?: null | float64 @go(FixedRate,*float64)

	// Matches the HTTP method of a request.
	httpMethod?: null | string @go(HTTPMethod,*string)

	// Matches the hostname from a request URL.
	host?: null | string @go(Host,*string)

	// The name of the sampling rule.
	id?: null | string @go(ID,*string)

	// The priority of the sampling rule.
	priority?: null | float64 @go(Priority,*float64)

	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	reservoirSize?: null | float64 @go(ReservoirSize,*float64)

	// Matches the ARN of the AWS resource on which the service runs.
	resourceArn?: null | string @go(ResourceArn,*string)

	// Matches the name that the service uses to identify itself in segments.
	serviceName?: null | string @go(ServiceName,*string)

	// Matches the origin that the service uses to identify its type in segments.
	serviceType?: null | string @go(ServiceType,*string)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// Matches the path from a request URL.
	urlPath?: null | string @go(URLPath,*string)

	// The version of the sampling rule format (1 )
	version?: null | float64 @go(Version,*float64)
}

#SamplingRuleParameters: {
	// Matches attributes derived from the request.
	// +kubebuilder:validation:Optional
	attributes?: {[string]: null | string} @go(Attributes,map[string]*string)

	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	// +kubebuilder:validation:Optional
	fixedRate?: null | float64 @go(FixedRate,*float64)

	// Matches the HTTP method of a request.
	// +kubebuilder:validation:Optional
	httpMethod?: null | string @go(HTTPMethod,*string)

	// Matches the hostname from a request URL.
	// +kubebuilder:validation:Optional
	host?: null | string @go(Host,*string)

	// The priority of the sampling rule.
	// +kubebuilder:validation:Optional
	priority?: null | float64 @go(Priority,*float64)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	// +kubebuilder:validation:Optional
	reservoirSize?: null | float64 @go(ReservoirSize,*float64)

	// Matches the ARN of the AWS resource on which the service runs.
	// +kubebuilder:validation:Optional
	resourceArn?: null | string @go(ResourceArn,*string)

	// Matches the name that the service uses to identify itself in segments.
	// +kubebuilder:validation:Optional
	serviceName?: null | string @go(ServiceName,*string)

	// Matches the origin that the service uses to identify its type in segments.
	// +kubebuilder:validation:Optional
	serviceType?: null | string @go(ServiceType,*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// Matches the path from a request URL.
	// +kubebuilder:validation:Optional
	urlPath?: null | string @go(URLPath,*string)

	// The version of the sampling rule format (1 )
	// +kubebuilder:validation:Optional
	version?: null | float64 @go(Version,*float64)
}

// SamplingRuleSpec defines the desired state of SamplingRule
#SamplingRuleSpec: {
	forProvider: #SamplingRuleParameters @go(ForProvider)
}

// SamplingRuleStatus defines the observed state of SamplingRule.
#SamplingRuleStatus: {
	atProvider?: #SamplingRuleObservation @go(AtProvider)
}

// SamplingRule is the Schema for the SamplingRules API. Creates and manages an AWS XRay Sampling Rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#SamplingRule: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.fixedRate)",message="fixedRate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.host)",message="host is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.httpMethod)",message="httpMethod is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.priority)",message="priority is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.reservoirSize)",message="reservoirSize is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.resourceArn)",message="resourceArn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.serviceName)",message="serviceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.serviceType)",message="serviceType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.urlPath)",message="urlPath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.version)",message="version is a required parameter"
	spec:    #SamplingRuleSpec   @go(Spec)
	status?: #SamplingRuleStatus @go(Status)
}

// SamplingRuleList contains a list of SamplingRules
#SamplingRuleList: {
	items: [...#SamplingRule] @go(Items,[]SamplingRule)
}
