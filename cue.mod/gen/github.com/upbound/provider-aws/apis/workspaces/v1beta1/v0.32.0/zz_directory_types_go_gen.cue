// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/workspaces/v1beta1

package v1beta1

#DirectoryObservation: {
	// The directory alias.
	alias?: null | string @go(Alias,*string)

	// The user name for the service account.
	customerUserName?: null | string @go(CustomerUserName,*string)

	// The IP addresses of the DNS servers for the directory.
	dnsIpAddresses?: [...null | string] @go(DNSIPAddresses,[]*string)

	// The name of the directory.
	directoryName?: null | string @go(DirectoryName,*string)

	// The directory type.
	directoryType?: null | string @go(DirectoryType,*string)

	// The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.
	iamRoleId?: null | string @go(IAMRoleID,*string)

	// The WorkSpaces directory identifier.
	id?: null | string @go(ID,*string)

	// The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.
	registrationCode?: null | string @go(RegistrationCode,*string)

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// The identifier of the security group that is assigned to new WorkSpaces.
	workspaceSecurityGroupId?: null | string @go(WorkspaceSecurityGroupID,*string)
}

#DirectoryParameters: {
	// The directory identifier for registration in WorkSpaces service.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ds/v1beta1.Directory
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	directoryId?: null | string @go(DirectoryID,*string)

	// The identifiers of the IP access control groups associated with the directory.
	// +kubebuilder:validation:Optional
	ipGroupIds?: [...null | string] @go(IPGroupIds,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// service capabilities. Defined below.
	// +kubebuilder:validation:Optional
	selfServicePermissions?: [...#SelfServicePermissionsParameters] @go(SelfServicePermissions,[]SelfServicePermissionsParameters)

	// The identifiers of the subnets where the directory resides.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.Subnet
	// +crossplane:generate:reference:refFieldName=SubnetIDRefs
	// +crossplane:generate:reference:selectorFieldName=SubnetIDSelector
	// +kubebuilder:validation:Optional
	subnetIds?: [...null | string] @go(SubnetIds,[]*string)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)

	// –  Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
	// +kubebuilder:validation:Optional
	workspaceAccessProperties?: [...#WorkspaceAccessPropertiesParameters] @go(WorkspaceAccessProperties,[]WorkspaceAccessPropertiesParameters)

	// –  Default properties that are used for creating WorkSpaces. Defined below.
	// +kubebuilder:validation:Optional
	workspaceCreationProperties?: [...#WorkspaceCreationPropertiesParameters] @go(WorkspaceCreationProperties,[]WorkspaceCreationPropertiesParameters)
}

#SelfServicePermissionsObservation: {
}

#SelfServicePermissionsParameters: {
	// –  Whether WorkSpaces directory users can change the compute type (bundle) for their workspace. Default false.
	// +kubebuilder:validation:Optional
	changeComputeType?: null | bool @go(ChangeComputeType,*bool)

	// –  Whether WorkSpaces directory users can increase the volume size of the drives on their workspace. Default false.
	// +kubebuilder:validation:Optional
	increaseVolumeSize?: null | bool @go(IncreaseVolumeSize,*bool)

	// –  Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state. Default false.
	// +kubebuilder:validation:Optional
	rebuildWorkspace?: null | bool @go(RebuildWorkspace,*bool)

	// –  Whether WorkSpaces directory users can restart their workspace. Default true.
	// +kubebuilder:validation:Optional
	restartWorkspace?: null | bool @go(RestartWorkspace,*bool)

	// –  Whether WorkSpaces directory users can switch the running mode of their workspace. Default false.
	// +kubebuilder:validation:Optional
	switchRunningMode?: null | bool @go(SwitchRunningMode,*bool)
}

#WorkspaceAccessPropertiesObservation: {
}

#WorkspaceAccessPropertiesParameters: {
	// –  Indicates whether users can use Android devices to access their WorkSpaces.
	// +kubebuilder:validation:Optional
	deviceTypeAndroid?: null | string @go(DeviceTypeAndroid,*string)

	// –  Indicates whether users can use Chromebooks to access their WorkSpaces.
	// +kubebuilder:validation:Optional
	deviceTypeChromeos?: null | string @go(DeviceTypeChromeos,*string)

	// –  Indicates whether users can use iOS devices to access their WorkSpaces.
	// +kubebuilder:validation:Optional
	deviceTypeIos?: null | string @go(DeviceTypeIos,*string)

	// –  Indicates whether users can use Linux clients to access their WorkSpaces.
	// +kubebuilder:validation:Optional
	deviceTypeLinux?: null | string @go(DeviceTypeLinux,*string)

	// –  Indicates whether users can use macOS clients to access their WorkSpaces.
	// +kubebuilder:validation:Optional
	deviceTypeOsx?: null | string @go(DeviceTypeOsx,*string)

	// –  Indicates whether users can access their WorkSpaces through a web browser.
	// +kubebuilder:validation:Optional
	deviceTypeWeb?: null | string @go(DeviceTypeWeb,*string)

	// –  Indicates whether users can use Windows clients to access their WorkSpaces.
	// +kubebuilder:validation:Optional
	deviceTypeWindows?: null | string @go(DeviceTypeWindows,*string)

	// –  Indicates whether users can use zero client devices to access their WorkSpaces.
	// +kubebuilder:validation:Optional
	deviceTypeZeroclient?: null | string @go(DeviceTypeZeroclient,*string)
}

#WorkspaceCreationPropertiesObservation: {
}

#WorkspaceCreationPropertiesParameters: {
	// –  The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.SecurityGroup
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	customSecurityGroupId?: null | string @go(CustomSecurityGroupID,*string)

	// –  The default organizational unit (OU) for your WorkSpace directories. Should conform "OU=<value>,DC=<value>,...,DC=<value>" pattern.
	// +kubebuilder:validation:Optional
	defaultOu?: null | string @go(DefaultOu,*string)

	// –  Indicates whether internet access is enabled for your WorkSpaces.
	// +kubebuilder:validation:Optional
	enableInternetAccess?: null | bool @go(EnableInternetAccess,*bool)

	// –  Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see WorkSpace Maintenance..
	// +kubebuilder:validation:Optional
	enableMaintenanceMode?: null | bool @go(EnableMaintenanceMode,*bool)

	// –  Indicates whether users are local administrators of their WorkSpaces.
	// +kubebuilder:validation:Optional
	userEnabledAsLocalAdministrator?: null | bool @go(UserEnabledAsLocalAdministrator,*bool)
}

// DirectorySpec defines the desired state of Directory
#DirectorySpec: {
	forProvider: #DirectoryParameters @go(ForProvider)
}

// DirectoryStatus defines the observed state of Directory.
#DirectoryStatus: {
	atProvider?: #DirectoryObservation @go(AtProvider)
}

// Directory is the Schema for the Directorys API. Provides a WorkSpaces directory in AWS WorkSpaces Service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Directory: {
	spec:    #DirectorySpec   @go(Spec)
	status?: #DirectoryStatus @go(Status)
}

// DirectoryList contains a list of Directorys
#DirectoryList: {
	items: [...#Directory] @go(Items,[]Directory)
}
