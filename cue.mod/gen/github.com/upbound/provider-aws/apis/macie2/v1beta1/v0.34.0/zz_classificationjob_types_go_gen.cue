// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/macie2/v1beta1

package v1beta1

#AndObservation: {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
	simpleCriterion?: [...#SimpleCriterionObservation] @go(SimpleCriterion,[]SimpleCriterionObservation)

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
	tagCriterion?: [...#TagCriterionObservation] @go(TagCriterion,[]TagCriterionObservation)
}

#AndParameters: {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
	// +kubebuilder:validation:Optional
	simpleCriterion?: [...#SimpleCriterionParameters] @go(SimpleCriterion,[]SimpleCriterionParameters)

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
	// +kubebuilder:validation:Optional
	tagCriterion?: [...#TagCriterionParameters] @go(TagCriterion,[]TagCriterionParameters)
}

#AndSimpleCriterionObservation: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	key?: null | string @go(Key,*string)

	// An array that lists the values to use in the condition.
	values?: [...null | string] @go(Values,[]*string)
}

#AndSimpleCriterionParameters: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// An array that lists the values to use in the condition.
	// +kubebuilder:validation:Optional
	values?: [...null | string] @go(Values,[]*string)
}

#AndSimpleScopeTermObservation: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	key?: null | string @go(Key,*string)

	// An array that lists the values to use in the condition.
	values?: [...null | string] @go(Values,[]*string)
}

#AndSimpleScopeTermParameters: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// An array that lists the values to use in the condition.
	// +kubebuilder:validation:Optional
	values?: [...null | string] @go(Values,[]*string)
}

#AndTagCriterionObservation: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	comparator?: null | string @go(Comparator,*string)

	// The tag keys or tag key and value pairs to use in the condition.
	tagValues?: [...#TagCriterionTagValuesObservation] @go(TagValues,[]TagCriterionTagValuesObservation)
}

#AndTagCriterionParameters: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	comparator?: null | string @go(Comparator,*string)

	// The tag keys or tag key and value pairs to use in the condition.
	// +kubebuilder:validation:Optional
	tagValues?: [...#TagCriterionTagValuesParameters] @go(TagValues,[]TagCriterionTagValuesParameters)
}

#AndTagScopeTermObservation: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	key?: null | string @go(Key,*string)

	// The tag keys or tag key and value pairs to use in the condition.
	tagValues?: [...#AndTagScopeTermTagValuesObservation] @go(TagValues,[]AndTagScopeTermTagValuesObservation)

	// The type of object to apply the condition to. The only valid value is S3_OBJECT.
	target?: null | string @go(Target,*string)
}

#AndTagScopeTermParameters: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The tag keys or tag key and value pairs to use in the condition.
	// +kubebuilder:validation:Optional
	tagValues?: [...#AndTagScopeTermTagValuesParameters] @go(TagValues,[]AndTagScopeTermTagValuesParameters)

	// The type of object to apply the condition to. The only valid value is S3_OBJECT.
	// +kubebuilder:validation:Optional
	target?: null | string @go(Target,*string)
}

#AndTagScopeTermTagValuesObservation: {
	// The object property to use in the condition.
	key?: null | string @go(Key,*string)

	// The tag value.
	value?: null | string @go(Value,*string)
}

#AndTagScopeTermTagValuesParameters: {
	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The tag value.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#BucketCriteriaObservation: {
	// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
	excludes?: [...#ExcludesObservation] @go(Excludes,[]ExcludesObservation)

	// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
	includes?: [...#IncludesObservation] @go(Includes,[]IncludesObservation)
}

#BucketCriteriaParameters: {
	// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
	// +kubebuilder:validation:Optional
	excludes?: [...#ExcludesParameters] @go(Excludes,[]ExcludesParameters)

	// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
	// +kubebuilder:validation:Optional
	includes?: [...#IncludesParameters] @go(Includes,[]IncludesParameters)
}

#BucketDefinitionsObservation: {
	// The unique identifier for the AWS account that owns the buckets.
	accountId?: null | string @go(AccountID,*string)

	// An array that lists the names of the buckets.
	buckets?: [...null | string] @go(Buckets,[]*string)
}

#BucketDefinitionsParameters: {
	// The unique identifier for the AWS account that owns the buckets.
	// +kubebuilder:validation:Required
	accountId?: null | string @go(AccountID,*string)

	// An array that lists the names of the buckets.
	// +kubebuilder:validation:Required
	buckets: [...null | string] @go(Buckets,[]*string)
}

#ClassificationJobObservation: {
	// The date and time, in UTC and extended RFC 3339 format, when the job was created.
	createdAt?: null | string @go(CreatedAt,*string)

	// The custom data identifiers to use for data analysis and classification.
	customDataIdentifierIds?: [...null | string] @go(CustomDataIdentifierIds,[]*string)

	// A custom description of the job. The description can contain as many as 200 characters.
	description?: null | string @go(Description,*string)

	// The unique identifier (ID) of the macie classification job.
	id?: null | string @go(ID,*string)

	// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
	initialRun?: null | bool   @go(InitialRun,*bool)
	jobArn?:     null | string @go(JobArn,*string)

	// The unique identifier (ID) of the macie classification job.
	jobId?: null | string @go(JobID,*string)

	// The status for the job. Valid values are: CANCELLED, RUNNING and USER_PAUSED
	jobStatus?: null | string @go(JobStatus,*string)

	// The schedule for running the job. Valid values are: ONE_TIME - Run the job only once. If you specify this value, don't specify a value for the schedule_frequency property. SCHEDULED - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the schedule_frequency property to define the recurrence pattern for the job.
	jobType?: null | string @go(JobType,*string)

	// A custom name for the job. The name can contain as many as 500 characters. Conflicts with name_prefix.
	name?: null | string @go(Name,*string)

	// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
	s3JobDefinition?: [...#S3JobDefinitionObservation] @go(S3JobDefinition,[]S3JobDefinitionObservation)

	// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
	samplingPercentage?: null | float64 @go(SamplingPercentage,*float64)

	// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the job_type property to ONE_TIME. (documented below)
	scheduleFrequency?: [...#ScheduleFrequencyObservation] @go(ScheduleFrequency,[]ScheduleFrequencyObservation)

	// Key-value map of resource tags.
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
	tagsAll?: {[string]: null | string} @go(TagsAll,map[string]*string)

	// If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for job-status is USER_PAUSED.
	userPausedDetails?: [...#UserPausedDetailsObservation] @go(UserPausedDetails,[]UserPausedDetailsObservation)
}

#ClassificationJobParameters: {
	// The custom data identifiers to use for data analysis and classification.
	// +kubebuilder:validation:Optional
	customDataIdentifierIds?: [...null | string] @go(CustomDataIdentifierIds,[]*string)

	// A custom description of the job. The description can contain as many as 200 characters.
	// +kubebuilder:validation:Optional
	description?: null | string @go(Description,*string)

	// Specifies whether to analyze all existing, eligible objects immediately after the job is created.
	// +kubebuilder:validation:Optional
	initialRun?: null | bool @go(InitialRun,*bool)

	// The status for the job. Valid values are: CANCELLED, RUNNING and USER_PAUSED
	// +kubebuilder:validation:Optional
	jobStatus?: null | string @go(JobStatus,*string)

	// The schedule for running the job. Valid values are: ONE_TIME - Run the job only once. If you specify this value, don't specify a value for the schedule_frequency property. SCHEDULED - Run the job on a daily, weekly, or monthly basis. If you specify this value, use the schedule_frequency property to define the recurrence pattern for the job.
	// +kubebuilder:validation:Optional
	jobType?: null | string @go(JobType,*string)

	// A custom name for the job. The name can contain as many as 500 characters. Conflicts with name_prefix.
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The S3 buckets that contain the objects to analyze, and the scope of that analysis. (documented below)
	// +kubebuilder:validation:Optional
	s3JobDefinition?: [...#S3JobDefinitionParameters] @go(S3JobDefinition,[]S3JobDefinitionParameters)

	// The sampling depth, as a percentage, to apply when processing objects. This value determines the percentage of eligible objects that the job analyzes. If this value is less than 100, Amazon Macie selects the objects to analyze at random, up to the specified percentage, and analyzes all the data in those objects.
	// +kubebuilder:validation:Optional
	samplingPercentage?: null | float64 @go(SamplingPercentage,*float64)

	// The recurrence pattern for running the job. To run the job only once, don't specify a value for this property and set the value for the job_type property to ONE_TIME. (documented below)
	// +kubebuilder:validation:Optional
	scheduleFrequency?: [...#ScheduleFrequencyParameters] @go(ScheduleFrequency,[]ScheduleFrequencyParameters)

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	tags?: {[string]: null | string} @go(Tags,map[string]*string)
}

#ExcludesAndObservation: {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
	simpleScopeTerm?: [...#SimpleScopeTermObservation] @go(SimpleScopeTerm,[]SimpleScopeTermObservation)

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
	tagScopeTerm?: [...#TagScopeTermObservation] @go(TagScopeTerm,[]TagScopeTermObservation)
}

#ExcludesAndParameters: {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
	// +kubebuilder:validation:Optional
	simpleScopeTerm?: [...#SimpleScopeTermParameters] @go(SimpleScopeTerm,[]SimpleScopeTermParameters)

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
	// +kubebuilder:validation:Optional
	tagScopeTerm?: [...#TagScopeTermParameters] @go(TagScopeTerm,[]TagScopeTermParameters)
}

#ExcludesObservation: {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	and?: [...#AndObservation] @go(And,[]AndObservation)
}

#ExcludesParameters: {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	// +kubebuilder:validation:Optional
	and?: [...#AndParameters] @go(And,[]AndParameters)
}

#IncludesAndObservation: {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
	simpleCriterion?: [...#AndSimpleCriterionObservation] @go(SimpleCriterion,[]AndSimpleCriterionObservation)

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
	tagCriterion?: [...#AndTagCriterionObservation] @go(TagCriterion,[]AndTagCriterionObservation)
}

#IncludesAndParameters: {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an S3 buckets from the job. (documented below)
	// +kubebuilder:validation:Optional
	simpleCriterion?: [...#AndSimpleCriterionParameters] @go(SimpleCriterion,[]AndSimpleCriterionParameters)

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an S3 buckets from the job. (documented below)
	// +kubebuilder:validation:Optional
	tagCriterion?: [...#AndTagCriterionParameters] @go(TagCriterion,[]AndTagCriterionParameters)
}

#IncludesObservation: {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	and?: [...#IncludesAndObservation] @go(And,[]IncludesAndObservation)
}

#IncludesParameters: {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	// +kubebuilder:validation:Optional
	and?: [...#IncludesAndParameters] @go(And,[]IncludesAndParameters)
}

#S3JobDefinitionObservation: {
	// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with bucket_definitions. (documented below)
	bucketCriteria?: [...#BucketCriteriaObservation] @go(BucketCriteria,[]BucketCriteriaObservation)

	// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. Conflicts with bucket_criteria. (documented below)
	bucketDefinitions?: [...#BucketDefinitionsObservation] @go(BucketDefinitions,[]BucketDefinitionsObservation)

	// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
	scoping?: [...#ScopingObservation] @go(Scoping,[]ScopingObservation)
}

#S3JobDefinitionParameters: {
	// The property- and tag-based conditions that determine which S3 buckets to include or exclude from the analysis. Conflicts with bucket_definitions. (documented below)
	// +kubebuilder:validation:Optional
	bucketCriteria?: [...#BucketCriteriaParameters] @go(BucketCriteria,[]BucketCriteriaParameters)

	// An array of objects, one for each AWS account that owns buckets to analyze. Each object specifies the account ID for an account and one or more buckets to analyze for the account. Conflicts with bucket_criteria. (documented below)
	// +kubebuilder:validation:Optional
	bucketDefinitions?: [...#BucketDefinitionsParameters] @go(BucketDefinitions,[]BucketDefinitionsParameters)

	// The property- and tag-based conditions that determine which objects to include or exclude from the analysis. (documented below)
	// +kubebuilder:validation:Optional
	scoping?: [...#ScopingParameters] @go(Scoping,[]ScopingParameters)
}

#ScheduleFrequencyObservation: {
	// Specifies a daily recurrence pattern for running the job.
	dailySchedule?: null | bool @go(DailySchedule,*bool)

	// Specifies a monthly recurrence pattern for running the job.
	monthlySchedule?: null | float64 @go(MonthlySchedule,*float64)

	// Specifies a weekly recurrence pattern for running the job.
	weeklySchedule?: null | string @go(WeeklySchedule,*string)
}

#ScheduleFrequencyParameters: {
	// Specifies a daily recurrence pattern for running the job.
	// +kubebuilder:validation:Optional
	dailySchedule?: null | bool @go(DailySchedule,*bool)

	// Specifies a monthly recurrence pattern for running the job.
	// +kubebuilder:validation:Optional
	monthlySchedule?: null | float64 @go(MonthlySchedule,*float64)

	// Specifies a weekly recurrence pattern for running the job.
	// +kubebuilder:validation:Optional
	weeklySchedule?: null | string @go(WeeklySchedule,*string)
}

#ScopingExcludesObservation: {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	and?: [...#ExcludesAndObservation] @go(And,[]ExcludesAndObservation)
}

#ScopingExcludesParameters: {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	// +kubebuilder:validation:Optional
	and?: [...#ExcludesAndParameters] @go(And,[]ExcludesAndParameters)
}

#ScopingIncludesAndObservation: {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
	simpleScopeTerm?: [...#AndSimpleScopeTermObservation] @go(SimpleScopeTerm,[]AndSimpleScopeTermObservation)

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
	tagScopeTerm?: [...#AndTagScopeTermObservation] @go(TagScopeTerm,[]AndTagScopeTermObservation)
}

#ScopingIncludesAndParameters: {
	// A property-based condition that defines a property, operator, and one or more values for including or excluding an object from the job. (documented below)
	// +kubebuilder:validation:Optional
	simpleScopeTerm?: [...#AndSimpleScopeTermParameters] @go(SimpleScopeTerm,[]AndSimpleScopeTermParameters)

	// A tag-based condition that defines the operator and tag keys or tag key and value pairs for including or excluding an object from the job. (documented below)
	// +kubebuilder:validation:Optional
	tagScopeTerm?: [...#AndTagScopeTermParameters] @go(TagScopeTerm,[]AndTagScopeTermParameters)
}

#ScopingIncludesObservation: {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	and?: [...#ScopingIncludesAndObservation] @go(And,[]ScopingIncludesAndObservation)
}

#ScopingIncludesParameters: {
	// An array of conditions, one for each condition that determines which objects to include or exclude from the job. (documented below)
	// +kubebuilder:validation:Optional
	and?: [...#ScopingIncludesAndParameters] @go(And,[]ScopingIncludesAndParameters)
}

#ScopingObservation: {
	// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
	excludes?: [...#ScopingExcludesObservation] @go(Excludes,[]ScopingExcludesObservation)

	// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
	includes?: [...#ScopingIncludesObservation] @go(Includes,[]ScopingIncludesObservation)
}

#ScopingParameters: {
	// The property- or tag-based conditions that determine which objects to exclude from the analysis. (documented below)
	// +kubebuilder:validation:Optional
	excludes?: [...#ScopingExcludesParameters] @go(Excludes,[]ScopingExcludesParameters)

	// The property- or tag-based conditions that determine which objects to include in the analysis. (documented below)
	// +kubebuilder:validation:Optional
	includes?: [...#ScopingIncludesParameters] @go(Includes,[]ScopingIncludesParameters)
}

#SimpleCriterionObservation: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	key?: null | string @go(Key,*string)

	// An array that lists the values to use in the condition.
	values?: [...null | string] @go(Values,[]*string)
}

#SimpleCriterionParameters: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// An array that lists the values to use in the condition.
	// +kubebuilder:validation:Optional
	values?: [...null | string] @go(Values,[]*string)
}

#SimpleScopeTermObservation: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	key?: null | string @go(Key,*string)

	// An array that lists the values to use in the condition.
	values?: [...null | string] @go(Values,[]*string)
}

#SimpleScopeTermParameters: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// An array that lists the values to use in the condition.
	// +kubebuilder:validation:Optional
	values?: [...null | string] @go(Values,[]*string)
}

#TagCriterionObservation: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	comparator?: null | string @go(Comparator,*string)

	// The tag keys or tag key and value pairs to use in the condition.
	tagValues?: [...#TagValuesObservation] @go(TagValues,[]TagValuesObservation)
}

#TagCriterionParameters: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	comparator?: null | string @go(Comparator,*string)

	// The tag keys or tag key and value pairs to use in the condition.
	// +kubebuilder:validation:Optional
	tagValues?: [...#TagValuesParameters] @go(TagValues,[]TagValuesParameters)
}

#TagCriterionTagValuesObservation: {
	// The object property to use in the condition.
	key?: null | string @go(Key,*string)

	// The tag value.
	value?: null | string @go(Value,*string)
}

#TagCriterionTagValuesParameters: {
	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The tag value.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#TagScopeTermObservation: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	key?: null | string @go(Key,*string)

	// The tag keys or tag key and value pairs to use in the condition.
	tagValues?: [...#TagScopeTermTagValuesObservation] @go(TagValues,[]TagScopeTermTagValuesObservation)

	// The type of object to apply the condition to. The only valid value is S3_OBJECT.
	target?: null | string @go(Target,*string)
}

#TagScopeTermParameters: {
	// The operator to use in a condition. Valid values are: EQ, GT, GTE, LT, LTE, NE, CONTAINS, STARTS_WITH
	// +kubebuilder:validation:Optional
	comparator?: null | string @go(Comparator,*string)

	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The tag keys or tag key and value pairs to use in the condition.
	// +kubebuilder:validation:Optional
	tagValues?: [...#TagScopeTermTagValuesParameters] @go(TagValues,[]TagScopeTermTagValuesParameters)

	// The type of object to apply the condition to. The only valid value is S3_OBJECT.
	// +kubebuilder:validation:Optional
	target?: null | string @go(Target,*string)
}

#TagScopeTermTagValuesObservation: {
	// The object property to use in the condition.
	key?: null | string @go(Key,*string)

	// The tag value.
	value?: null | string @go(Value,*string)
}

#TagScopeTermTagValuesParameters: {
	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The tag value.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#TagValuesObservation: {
	// The object property to use in the condition.
	key?: null | string @go(Key,*string)

	// The tag value.
	value?: null | string @go(Value,*string)
}

#TagValuesParameters: {
	// The object property to use in the condition.
	// +kubebuilder:validation:Optional
	key?: null | string @go(Key,*string)

	// The tag value.
	// +kubebuilder:validation:Optional
	value?: null | string @go(Value,*string)
}

#UserPausedDetailsObservation: {
	jobExpiresAt?:                        null | string @go(JobExpiresAt,*string)
	jobImminentExpirationHealthEventArn?: null | string @go(JobImminentExpirationHealthEventArn,*string)
	jobPausedAt?:                         null | string @go(JobPausedAt,*string)
}

#UserPausedDetailsParameters: {
}

// ClassificationJobSpec defines the desired state of ClassificationJob
#ClassificationJobSpec: {
	forProvider: #ClassificationJobParameters @go(ForProvider)
}

// ClassificationJobStatus defines the observed state of ClassificationJob.
#ClassificationJobStatus: {
	atProvider?: #ClassificationJobObservation @go(AtProvider)
}

// ClassificationJob is the Schema for the ClassificationJobs API. Provides a resource to manage an AWS Macie Classification Job.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ClassificationJob: {
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.jobType)",message="jobType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.s3JobDefinition)",message="s3JobDefinition is a required parameter"
	spec:    #ClassificationJobSpec   @go(Spec)
	status?: #ClassificationJobStatus @go(Status)
}

// ClassificationJobList contains a list of ClassificationJobs
#ClassificationJobList: {
	items: [...#ClassificationJob] @go(Items,[]ClassificationJob)
}
