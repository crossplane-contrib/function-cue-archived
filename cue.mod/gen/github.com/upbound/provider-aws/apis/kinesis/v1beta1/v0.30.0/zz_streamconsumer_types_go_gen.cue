// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/kinesis/v1beta1

package v1beta1

#StreamConsumerObservation: {
	// Amazon Resource Name (ARN) of the stream consumer.
	arn?: null | string @go(Arn,*string)

	// Approximate timestamp in RFC3339 format of when the stream consumer was created.
	creationTimestamp?: null | string @go(CreationTimestamp,*string)

	// Amazon Resource Name (ARN) of the stream consumer.
	id?: null | string @go(ID,*string)
}

#StreamConsumerParameters: {
	// Name of the stream consumer.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// â€“  Amazon Resource Name (ARN) of the data stream the consumer is registered with.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/kinesis/v1beta1.Stream
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.TerraformID()
	// +kubebuilder:validation:Optional
	streamArn?: null | string @go(StreamArn,*string)
}

// StreamConsumerSpec defines the desired state of StreamConsumer
#StreamConsumerSpec: {
	forProvider: #StreamConsumerParameters @go(ForProvider)
}

// StreamConsumerStatus defines the observed state of StreamConsumer.
#StreamConsumerStatus: {
	atProvider?: #StreamConsumerObservation @go(AtProvider)
}

// StreamConsumer is the Schema for the StreamConsumers API. Manages a Kinesis Stream Consumer.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#StreamConsumer: {
	spec:    #StreamConsumerSpec   @go(Spec)
	status?: #StreamConsumerStatus @go(Status)
}

// StreamConsumerList contains a list of StreamConsumers
#StreamConsumerList: {
	items: [...#StreamConsumer] @go(Items,[]StreamConsumer)
}
