// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/cognitoidp/v1beta1

package v1beta1

#ResourceServerObservation: {
	id?: null | string @go(ID,*string)

	// A list of all scopes configured for this resource server in the format identifier/scope_name.
	scopeIdentifiers?: [...null | string] @go(ScopeIdentifiers,[]*string)
}

#ResourceServerParameters: {
	// An identifier for the resource server.
	// +kubebuilder:validation:Required
	identifier?: null | string @go(Identifier,*string)

	// A name for the resource server.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// A list of Authorization Scope.
	// +kubebuilder:validation:Optional
	scope?: [...#ScopeParameters] @go(Scope,[]ScopeParameters)

	// +crossplane:generate:reference:type=UserPool
	// +kubebuilder:validation:Optional
	userPoolId?: null | string @go(UserPoolID,*string)
}

#ScopeObservation: {
}

#ScopeParameters: {
	// The scope description.
	// +kubebuilder:validation:Required
	scopeDescription?: null | string @go(ScopeDescription,*string)

	// The scope name.
	// +kubebuilder:validation:Required
	scopeName?: null | string @go(ScopeName,*string)
}

// ResourceServerSpec defines the desired state of ResourceServer
#ResourceServerSpec: {
	forProvider: #ResourceServerParameters @go(ForProvider)
}

// ResourceServerStatus defines the observed state of ResourceServer.
#ResourceServerStatus: {
	atProvider?: #ResourceServerObservation @go(AtProvider)
}

// ResourceServer is the Schema for the ResourceServers API. Provides a Cognito Resource Server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ResourceServer: {
	spec:    #ResourceServerSpec   @go(Spec)
	status?: #ResourceServerStatus @go(Status)
}

// ResourceServerList contains a list of ResourceServers
#ResourceServerList: {
	items: [...#ResourceServer] @go(Items,[]ResourceServer)
}
