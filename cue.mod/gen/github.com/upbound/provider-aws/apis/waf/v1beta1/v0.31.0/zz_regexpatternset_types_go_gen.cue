// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/waf/v1beta1

package v1beta1

#RegexPatternSetObservation: {
	// Amazon Resource Name (ARN)
	arn?: null | string @go(Arn,*string)

	// The ID of the WAF Regex Pattern Set.
	id?: null | string @go(ID,*string)
}

#RegexPatternSetParameters: {
	// The name or description of the Regex Pattern Set.
	// +kubebuilder:validation:Required
	name?: null | string @go(Name,*string)

	// A list of regular expression (regex) patterns that you want AWS WAF to search for, such as B[a@]dB[o0]t.
	// +kubebuilder:validation:Optional
	regexPatternStrings?: [...null | string] @go(RegexPatternStrings,[]*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// RegexPatternSetSpec defines the desired state of RegexPatternSet
#RegexPatternSetSpec: {
	forProvider: #RegexPatternSetParameters @go(ForProvider)
}

// RegexPatternSetStatus defines the observed state of RegexPatternSet.
#RegexPatternSetStatus: {
	atProvider?: #RegexPatternSetObservation @go(AtProvider)
}

// RegexPatternSet is the Schema for the RegexPatternSets API. Provides a AWS WAF Regex Pattern Set resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#RegexPatternSet: {
	spec:    #RegexPatternSetSpec   @go(Spec)
	status?: #RegexPatternSetStatus @go(Status)
}

// RegexPatternSetList contains a list of RegexPatternSets
#RegexPatternSetList: {
	items: [...#RegexPatternSet] @go(Items,[]RegexPatternSet)
}
