// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/docdb/v1beta1

package v1beta1

#ClusterSnapshotObservation: {
	// List of EC2 Availability Zones that instances in the DocDB cluster snapshot can be restored in.
	availabilityZones?: [...null | string] @go(AvailabilityZones,[]*string)

	// The Amazon Resource Name (ARN) for the DocDB Cluster Snapshot.
	dbClusterSnapshotArn?: null | string @go(DBClusterSnapshotArn,*string)

	// Specifies the name of the database engine.
	engine?: null | string @go(Engine,*string)

	// Version of the database engine for this DocDB cluster snapshot.
	engineVersion?: null | string @go(EngineVersion,*string)
	id?:            null | string @go(ID,*string)

	// If storage_encrypted is true, the AWS KMS key identifier for the encrypted DocDB cluster snapshot.
	kmsKeyId?: null | string @go(KMSKeyID,*string)

	// Port that the DocDB cluster was listening on at the time of the snapshot.
	port?:         null | float64 @go(Port,*float64)
	snapshotType?: null | string  @go(SnapshotType,*string)

	// The Amazon Resource Name (ARN) for the DocDB Cluster Snapshot.
	sourceDbClusterSnapshotArn?: null | string @go(SourceDBClusterSnapshotArn,*string)

	// The status of this DocDB Cluster Snapshot.
	status?: null | string @go(Status,*string)

	// Specifies whether the DocDB cluster snapshot is encrypted.
	storageEncrypted?: null | bool @go(StorageEncrypted,*bool)

	// The VPC ID associated with the DocDB cluster snapshot.
	vpcId?: null | string @go(VPCID,*string)
}

#ClusterSnapshotParameters: {
	// The DocDB Cluster Identifier from which to take the snapshot.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/docdb/v1beta1.Cluster
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	dbClusterIdentifier?: null | string @go(DBClusterIdentifier,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)
}

// ClusterSnapshotSpec defines the desired state of ClusterSnapshot
#ClusterSnapshotSpec: {
	forProvider: #ClusterSnapshotParameters @go(ForProvider)
}

// ClusterSnapshotStatus defines the observed state of ClusterSnapshot.
#ClusterSnapshotStatus: {
	atProvider?: #ClusterSnapshotObservation @go(AtProvider)
}

// ClusterSnapshot is the Schema for the ClusterSnapshots API. Manages a DocDB database cluster snapshot.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#ClusterSnapshot: {
	spec:    #ClusterSnapshotSpec   @go(Spec)
	status?: #ClusterSnapshotStatus @go(Status)
}

// ClusterSnapshotList contains a list of ClusterSnapshots
#ClusterSnapshotList: {
	items: [...#ClusterSnapshot] @go(Items,[]ClusterSnapshot)
}
