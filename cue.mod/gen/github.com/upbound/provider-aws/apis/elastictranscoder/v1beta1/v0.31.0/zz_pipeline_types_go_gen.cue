// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/upbound/provider-aws/apis/elastictranscoder/v1beta1

package v1beta1

#ContentConfigObservation: {
}

#ContentConfigParameters: {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
	// +kubebuilder:validation:Optional
	storageClass?: null | string @go(StorageClass,*string)
}

#ContentConfigPermissionsObservation: {
}

#ContentConfigPermissionsParameters: {
	// The permission that you want to give to the AWS user that you specified in content_config_permissions.grantee. Valid values are Read, ReadAcp, WriteAcp or FullControl.
	// +kubebuilder:validation:Optional
	access?: [...null | string] @go(Access,[]*string)

	// The AWS user or group that you want to have access to transcoded files and playlists.
	// +kubebuilder:validation:Optional
	grantee?: null | string @go(Grantee,*string)

	// Specify the type of value that appears in the content_config_permissions.grantee object. Valid values are Canonical, Email or Group.
	// +kubebuilder:validation:Optional
	granteeType?: null | string @go(GranteeType,*string)
}

#NotificationsObservation: {
}

#NotificationsParameters: {
	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
	// +kubebuilder:validation:Optional
	completed?: null | string @go(Completed,*string)

	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
	// +kubebuilder:validation:Optional
	error?: null | string @go(Error,*string)

	// The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
	// +kubebuilder:validation:Optional
	progressing?: null | string @go(Progressing,*string)

	// The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
	// +kubebuilder:validation:Optional
	warning?: null | string @go(Warning,*string)
}

#PipelineObservation: {
	// The ARN of the Elastictranscoder pipeline.
	arn?: null | string @go(Arn,*string)

	// The ID of the Elastictranscoder pipeline.
	id?: null | string @go(ID,*string)
}

#PipelineParameters: {
	// The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.
	// +kubebuilder:validation:Optional
	awsKmsKeyArn?: null | string @go(AwsKMSKeyArn,*string)

	// The ContentConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists. (documented below)
	// +kubebuilder:validation:Optional
	contentConfig?: [...#ContentConfigParameters] @go(ContentConfig,[]ContentConfigParameters)

	// The permissions for the content_config object. (documented below)
	// +kubebuilder:validation:Optional
	contentConfigPermissions?: [...#ContentConfigPermissionsParameters] @go(ContentConfigPermissions,[]ContentConfigPermissionsParameters)

	// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	inputBucket?: null | string @go(InputBucket,*string)

	// The name of the pipeline. Maximum 40 characters
	// +kubebuilder:validation:Optional
	name?: null | string @go(Name,*string)

	// The Amazon Simple Notification Service (Amazon SNS) topic that you want to notify to report job status. (documented below)
	// +kubebuilder:validation:Optional
	notifications?: [...#NotificationsParameters] @go(Notifications,[]NotificationsParameters)

	// The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files.
	// +kubebuilder:validation:Optional
	outputBucket?: null | string @go(OutputBucket,*string)

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	region?: null | string @go(Region,*string)

	// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("arn",true)
	// +kubebuilder:validation:Optional
	role?: null | string @go(Role,*string)

	// The ThumbnailConfig object specifies information about the Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files. (documented below)
	// +kubebuilder:validation:Optional
	thumbnailConfig?: [...#ThumbnailConfigParameters] @go(ThumbnailConfig,[]ThumbnailConfigParameters)

	// The permissions for the thumbnail_config object. (documented below)
	// +kubebuilder:validation:Optional
	thumbnailConfigPermissions?: [...#ThumbnailConfigPermissionsParameters] @go(ThumbnailConfigPermissions,[]ThumbnailConfigPermissionsParameters)
}

#ThumbnailConfigObservation: {
}

#ThumbnailConfigParameters: {
	// The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/s3/v1beta1.Bucket
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	bucket?: null | string @go(Bucket,*string)

	// The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
	// +kubebuilder:validation:Optional
	storageClass?: null | string @go(StorageClass,*string)
}

#ThumbnailConfigPermissionsObservation: {
}

#ThumbnailConfigPermissionsParameters: {
	// The permission that you want to give to the AWS user that you specified in content_config_permissions.grantee. Valid values are Read, ReadAcp, WriteAcp or FullControl.
	// +kubebuilder:validation:Optional
	access?: [...null | string] @go(Access,[]*string)

	// The AWS user or group that you want to have access to transcoded files and playlists.
	// +kubebuilder:validation:Optional
	grantee?: null | string @go(Grantee,*string)

	// Specify the type of value that appears in the content_config_permissions.grantee object. Valid values are Canonical, Email or Group.
	// +kubebuilder:validation:Optional
	granteeType?: null | string @go(GranteeType,*string)
}

// PipelineSpec defines the desired state of Pipeline
#PipelineSpec: {
	forProvider: #PipelineParameters @go(ForProvider)
}

// PipelineStatus defines the observed state of Pipeline.
#PipelineStatus: {
	atProvider?: #PipelineObservation @go(AtProvider)
}

// Pipeline is the Schema for the Pipelines API. Provides an Elastic Transcoder pipeline resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
#Pipeline: {
	spec:    #PipelineSpec   @go(Spec)
	status?: #PipelineStatus @go(Status)
}

// PipelineList contains a list of Pipelines
#PipelineList: {
	items: [...#Pipeline] @go(Items,[]Pipeline)
}
